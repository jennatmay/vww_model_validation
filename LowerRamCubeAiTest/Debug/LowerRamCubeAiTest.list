
LowerRamCubeAiTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000cf35c  0800d5c0  0800d5c0  0001d5c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080dc91c  080dc91c  000f44b4  2**0
                  CONTENTS
  4 .ARM          00000008  080dc91c  080dc91c  000ec91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080dc924  080dc924  000f44b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080dc924  080dc924  000ec924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080dc928  080dc928  000ec928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004374  20000000  080dc92c  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20004374  080e0ca0  000f4374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20004414  080e0d40  000f4414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000266fc  200044c0  080e0de0  000f44c0  2**5
                  ALLOC
 12 ._user_heap_stack 00001004  2002abbc  080e0de0  000fabbc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000f44b4  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000f44e4  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002f769  00000000  00000000  000f4527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000670a  00000000  00000000  00123c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 0001005d  00000000  00000000  0012a39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001588  00000000  00000000  0013a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000182f  00000000  00000000  0013b980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002edcb  00000000  00000000  0013d1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002921c  00000000  00000000  0016bf7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00115268  00000000  00000000  00195196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000538c  00000000  00000000  002aa400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000086  00000000  00000000  002af78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200044c0 	.word	0x200044c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d5a8 	.word	0x0800d5a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200044c4 	.word	0x200044c4
 800020c:	0800d5a8 	.word	0x0800d5a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_frsub>:
 8000be8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	e002      	b.n	8000bf4 <__addsf3>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_fsub>:
 8000bf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bf4 <__addsf3>:
 8000bf4:	0042      	lsls	r2, r0, #1
 8000bf6:	bf1f      	itttt	ne
 8000bf8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bfc:	ea92 0f03 	teqne	r2, r3
 8000c00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c08:	d06a      	beq.n	8000ce0 <__addsf3+0xec>
 8000c0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c12:	bfc1      	itttt	gt
 8000c14:	18d2      	addgt	r2, r2, r3
 8000c16:	4041      	eorgt	r1, r0
 8000c18:	4048      	eorgt	r0, r1
 8000c1a:	4041      	eorgt	r1, r0
 8000c1c:	bfb8      	it	lt
 8000c1e:	425b      	neglt	r3, r3
 8000c20:	2b19      	cmp	r3, #25
 8000c22:	bf88      	it	hi
 8000c24:	4770      	bxhi	lr
 8000c26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4249      	negne	r1, r1
 8000c46:	ea92 0f03 	teq	r2, r3
 8000c4a:	d03f      	beq.n	8000ccc <__addsf3+0xd8>
 8000c4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c50:	fa41 fc03 	asr.w	ip, r1, r3
 8000c54:	eb10 000c 	adds.w	r0, r0, ip
 8000c58:	f1c3 0320 	rsb	r3, r3, #32
 8000c5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__addsf3+0x78>
 8000c66:	4249      	negs	r1, r1
 8000c68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c70:	d313      	bcc.n	8000c9a <__addsf3+0xa6>
 8000c72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c76:	d306      	bcc.n	8000c86 <__addsf3+0x92>
 8000c78:	0840      	lsrs	r0, r0, #1
 8000c7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c7e:	f102 0201 	add.w	r2, r2, #1
 8000c82:	2afe      	cmp	r2, #254	; 0xfe
 8000c84:	d251      	bcs.n	8000d2a <__addsf3+0x136>
 8000c86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c8e:	bf08      	it	eq
 8000c90:	f020 0001 	biceq.w	r0, r0, #1
 8000c94:	ea40 0003 	orr.w	r0, r0, r3
 8000c98:	4770      	bx	lr
 8000c9a:	0049      	lsls	r1, r1, #1
 8000c9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ca0:	3a01      	subs	r2, #1
 8000ca2:	bf28      	it	cs
 8000ca4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca8:	d2ed      	bcs.n	8000c86 <__addsf3+0x92>
 8000caa:	fab0 fc80 	clz	ip, r0
 8000cae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cba:	bfaa      	itet	ge
 8000cbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc0:	4252      	neglt	r2, r2
 8000cc2:	4318      	orrge	r0, r3
 8000cc4:	bfbc      	itt	lt
 8000cc6:	40d0      	lsrlt	r0, r2
 8000cc8:	4318      	orrlt	r0, r3
 8000cca:	4770      	bx	lr
 8000ccc:	f092 0f00 	teq	r2, #0
 8000cd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cd4:	bf06      	itte	eq
 8000cd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cda:	3201      	addeq	r2, #1
 8000cdc:	3b01      	subne	r3, #1
 8000cde:	e7b5      	b.n	8000c4c <__addsf3+0x58>
 8000ce0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ce4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce8:	bf18      	it	ne
 8000cea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cee:	d021      	beq.n	8000d34 <__addsf3+0x140>
 8000cf0:	ea92 0f03 	teq	r2, r3
 8000cf4:	d004      	beq.n	8000d00 <__addsf3+0x10c>
 8000cf6:	f092 0f00 	teq	r2, #0
 8000cfa:	bf08      	it	eq
 8000cfc:	4608      	moveq	r0, r1
 8000cfe:	4770      	bx	lr
 8000d00:	ea90 0f01 	teq	r0, r1
 8000d04:	bf1c      	itt	ne
 8000d06:	2000      	movne	r0, #0
 8000d08:	4770      	bxne	lr
 8000d0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d0e:	d104      	bne.n	8000d1a <__addsf3+0x126>
 8000d10:	0040      	lsls	r0, r0, #1
 8000d12:	bf28      	it	cs
 8000d14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d18:	4770      	bx	lr
 8000d1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d1e:	bf3c      	itt	cc
 8000d20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bxcc	lr
 8000d26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d32:	4770      	bx	lr
 8000d34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d38:	bf16      	itet	ne
 8000d3a:	4608      	movne	r0, r1
 8000d3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d40:	4601      	movne	r1, r0
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	bf06      	itte	eq
 8000d46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d4a:	ea90 0f01 	teqeq	r0, r1
 8000d4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_ui2f>:
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e004      	b.n	8000d64 <__aeabi_i2f+0x8>
 8000d5a:	bf00      	nop

08000d5c <__aeabi_i2f>:
 8000d5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d60:	bf48      	it	mi
 8000d62:	4240      	negmi	r0, r0
 8000d64:	ea5f 0c00 	movs.w	ip, r0
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d70:	4601      	mov	r1, r0
 8000d72:	f04f 0000 	mov.w	r0, #0
 8000d76:	e01c      	b.n	8000db2 <__aeabi_l2f+0x2a>

08000d78 <__aeabi_ul2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e00a      	b.n	8000d9c <__aeabi_l2f+0x14>
 8000d86:	bf00      	nop

08000d88 <__aeabi_l2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d94:	d502      	bpl.n	8000d9c <__aeabi_l2f+0x14>
 8000d96:	4240      	negs	r0, r0
 8000d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d9c:	ea5f 0c01 	movs.w	ip, r1
 8000da0:	bf02      	ittt	eq
 8000da2:	4684      	moveq	ip, r0
 8000da4:	4601      	moveq	r1, r0
 8000da6:	2000      	moveq	r0, #0
 8000da8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dac:	bf08      	it	eq
 8000dae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000db2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000db6:	fabc f28c 	clz	r2, ip
 8000dba:	3a08      	subs	r2, #8
 8000dbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc0:	db10      	blt.n	8000de4 <__aeabi_l2f+0x5c>
 8000dc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dcc:	f1c2 0220 	rsb	r2, r2, #32
 8000dd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	eb43 0002 	adc.w	r0, r3, r2
 8000ddc:	bf08      	it	eq
 8000dde:	f020 0001 	biceq.w	r0, r0, #1
 8000de2:	4770      	bx	lr
 8000de4:	f102 0220 	add.w	r2, r2, #32
 8000de8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dec:	f1c2 0220 	rsb	r2, r2, #32
 8000df0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000df4:	fa21 f202 	lsr.w	r2, r1, r2
 8000df8:	eb43 0002 	adc.w	r0, r3, r2
 8000dfc:	bf08      	it	eq
 8000dfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_uldivmod>:
 8000e04:	b953      	cbnz	r3, 8000e1c <__aeabi_uldivmod+0x18>
 8000e06:	b94a      	cbnz	r2, 8000e1c <__aeabi_uldivmod+0x18>
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	bf08      	it	eq
 8000e0c:	2800      	cmpeq	r0, #0
 8000e0e:	bf1c      	itt	ne
 8000e10:	f04f 31ff 	movne.w	r1, #4294967295
 8000e14:	f04f 30ff 	movne.w	r0, #4294967295
 8000e18:	f000 b98e 	b.w	8001138 <__aeabi_idiv0>
 8000e1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e24:	f000 f824 	bl	8000e70 <__udivmoddi4>
 8000e28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e30:	b004      	add	sp, #16
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_d2ulz>:
 8000e34:	b5d0      	push	{r4, r6, r7, lr}
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <__aeabi_d2ulz+0x34>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4606      	mov	r6, r0
 8000e3c:	460f      	mov	r7, r1
 8000e3e:	f7ff fbfb 	bl	8000638 <__aeabi_dmul>
 8000e42:	f000 f97b 	bl	800113c <__aeabi_d2uiz>
 8000e46:	4604      	mov	r4, r0
 8000e48:	f7ff fb7c 	bl	8000544 <__aeabi_ui2d>
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <__aeabi_d2ulz+0x38>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f7ff fbf2 	bl	8000638 <__aeabi_dmul>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	4630      	mov	r0, r6
 8000e5a:	4639      	mov	r1, r7
 8000e5c:	f7ff fa34 	bl	80002c8 <__aeabi_dsub>
 8000e60:	f000 f96c 	bl	800113c <__aeabi_d2uiz>
 8000e64:	4621      	mov	r1, r4
 8000e66:	bdd0      	pop	{r4, r6, r7, pc}
 8000e68:	3df00000 	.word	0x3df00000
 8000e6c:	41f00000 	.word	0x41f00000

08000e70 <__udivmoddi4>:
 8000e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e74:	9e08      	ldr	r6, [sp, #32]
 8000e76:	460d      	mov	r5, r1
 8000e78:	4604      	mov	r4, r0
 8000e7a:	460f      	mov	r7, r1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d14a      	bne.n	8000f16 <__udivmoddi4+0xa6>
 8000e80:	428a      	cmp	r2, r1
 8000e82:	4694      	mov	ip, r2
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0xe2>
 8000e86:	fab2 f382 	clz	r3, r2
 8000e8a:	b143      	cbz	r3, 8000e9e <__udivmoddi4+0x2e>
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	f1c3 0220 	rsb	r2, r3, #32
 8000e94:	409f      	lsls	r7, r3
 8000e96:	fa20 f202 	lsr.w	r2, r0, r2
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	409c      	lsls	r4, r3
 8000e9e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ea2:	fa1f f58c 	uxth.w	r5, ip
 8000ea6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000eaa:	0c22      	lsrs	r2, r4, #16
 8000eac:	fb0e 7711 	mls	r7, lr, r1, r7
 8000eb0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000eb4:	fb01 f005 	mul.w	r0, r1, r5
 8000eb8:	4290      	cmp	r0, r2
 8000eba:	d90a      	bls.n	8000ed2 <__udivmoddi4+0x62>
 8000ebc:	eb1c 0202 	adds.w	r2, ip, r2
 8000ec0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ec4:	f080 811c 	bcs.w	8001100 <__udivmoddi4+0x290>
 8000ec8:	4290      	cmp	r0, r2
 8000eca:	f240 8119 	bls.w	8001100 <__udivmoddi4+0x290>
 8000ece:	3902      	subs	r1, #2
 8000ed0:	4462      	add	r2, ip
 8000ed2:	1a12      	subs	r2, r2, r0
 8000ed4:	b2a4      	uxth	r4, r4
 8000ed6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000eda:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ede:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ee2:	fb00 f505 	mul.w	r5, r0, r5
 8000ee6:	42a5      	cmp	r5, r4
 8000ee8:	d90a      	bls.n	8000f00 <__udivmoddi4+0x90>
 8000eea:	eb1c 0404 	adds.w	r4, ip, r4
 8000eee:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ef2:	f080 8107 	bcs.w	8001104 <__udivmoddi4+0x294>
 8000ef6:	42a5      	cmp	r5, r4
 8000ef8:	f240 8104 	bls.w	8001104 <__udivmoddi4+0x294>
 8000efc:	4464      	add	r4, ip
 8000efe:	3802      	subs	r0, #2
 8000f00:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	2100      	movs	r1, #0
 8000f08:	b11e      	cbz	r6, 8000f12 <__udivmoddi4+0xa2>
 8000f0a:	40dc      	lsrs	r4, r3
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e9c6 4300 	strd	r4, r3, [r6]
 8000f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d908      	bls.n	8000f2c <__udivmoddi4+0xbc>
 8000f1a:	2e00      	cmp	r6, #0
 8000f1c:	f000 80ed 	beq.w	80010fa <__udivmoddi4+0x28a>
 8000f20:	2100      	movs	r1, #0
 8000f22:	e9c6 0500 	strd	r0, r5, [r6]
 8000f26:	4608      	mov	r0, r1
 8000f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2c:	fab3 f183 	clz	r1, r3
 8000f30:	2900      	cmp	r1, #0
 8000f32:	d149      	bne.n	8000fc8 <__udivmoddi4+0x158>
 8000f34:	42ab      	cmp	r3, r5
 8000f36:	d302      	bcc.n	8000f3e <__udivmoddi4+0xce>
 8000f38:	4282      	cmp	r2, r0
 8000f3a:	f200 80f8 	bhi.w	800112e <__udivmoddi4+0x2be>
 8000f3e:	1a84      	subs	r4, r0, r2
 8000f40:	eb65 0203 	sbc.w	r2, r5, r3
 8000f44:	2001      	movs	r0, #1
 8000f46:	4617      	mov	r7, r2
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d0e2      	beq.n	8000f12 <__udivmoddi4+0xa2>
 8000f4c:	e9c6 4700 	strd	r4, r7, [r6]
 8000f50:	e7df      	b.n	8000f12 <__udivmoddi4+0xa2>
 8000f52:	b902      	cbnz	r2, 8000f56 <__udivmoddi4+0xe6>
 8000f54:	deff      	udf	#255	; 0xff
 8000f56:	fab2 f382 	clz	r3, r2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f040 8090 	bne.w	8001080 <__udivmoddi4+0x210>
 8000f60:	1a8a      	subs	r2, r1, r2
 8000f62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f66:	fa1f fe8c 	uxth.w	lr, ip
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f70:	fb07 2015 	mls	r0, r7, r5, r2
 8000f74:	0c22      	lsrs	r2, r4, #16
 8000f76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f7a:	fb0e f005 	mul.w	r0, lr, r5
 8000f7e:	4290      	cmp	r0, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x124>
 8000f82:	eb1c 0202 	adds.w	r2, ip, r2
 8000f86:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f8a:	d202      	bcs.n	8000f92 <__udivmoddi4+0x122>
 8000f8c:	4290      	cmp	r0, r2
 8000f8e:	f200 80cb 	bhi.w	8001128 <__udivmoddi4+0x2b8>
 8000f92:	4645      	mov	r5, r8
 8000f94:	1a12      	subs	r2, r2, r0
 8000f96:	b2a4      	uxth	r4, r4
 8000f98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000fa0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fa4:	fb0e fe00 	mul.w	lr, lr, r0
 8000fa8:	45a6      	cmp	lr, r4
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x14e>
 8000fac:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fb4:	d202      	bcs.n	8000fbc <__udivmoddi4+0x14c>
 8000fb6:	45a6      	cmp	lr, r4
 8000fb8:	f200 80bb 	bhi.w	8001132 <__udivmoddi4+0x2c2>
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	eba4 040e 	sub.w	r4, r4, lr
 8000fc2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000fc6:	e79f      	b.n	8000f08 <__udivmoddi4+0x98>
 8000fc8:	f1c1 0720 	rsb	r7, r1, #32
 8000fcc:	408b      	lsls	r3, r1
 8000fce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000fd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000fd6:	fa05 f401 	lsl.w	r4, r5, r1
 8000fda:	fa20 f307 	lsr.w	r3, r0, r7
 8000fde:	40fd      	lsrs	r5, r7
 8000fe0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000fe4:	4323      	orrs	r3, r4
 8000fe6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000fea:	fa1f fe8c 	uxth.w	lr, ip
 8000fee:	fb09 5518 	mls	r5, r9, r8, r5
 8000ff2:	0c1c      	lsrs	r4, r3, #16
 8000ff4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ff8:	fb08 f50e 	mul.w	r5, r8, lr
 8000ffc:	42a5      	cmp	r5, r4
 8000ffe:	fa02 f201 	lsl.w	r2, r2, r1
 8001002:	fa00 f001 	lsl.w	r0, r0, r1
 8001006:	d90b      	bls.n	8001020 <__udivmoddi4+0x1b0>
 8001008:	eb1c 0404 	adds.w	r4, ip, r4
 800100c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001010:	f080 8088 	bcs.w	8001124 <__udivmoddi4+0x2b4>
 8001014:	42a5      	cmp	r5, r4
 8001016:	f240 8085 	bls.w	8001124 <__udivmoddi4+0x2b4>
 800101a:	f1a8 0802 	sub.w	r8, r8, #2
 800101e:	4464      	add	r4, ip
 8001020:	1b64      	subs	r4, r4, r5
 8001022:	b29d      	uxth	r5, r3
 8001024:	fbb4 f3f9 	udiv	r3, r4, r9
 8001028:	fb09 4413 	mls	r4, r9, r3, r4
 800102c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001030:	fb03 fe0e 	mul.w	lr, r3, lr
 8001034:	45a6      	cmp	lr, r4
 8001036:	d908      	bls.n	800104a <__udivmoddi4+0x1da>
 8001038:	eb1c 0404 	adds.w	r4, ip, r4
 800103c:	f103 35ff 	add.w	r5, r3, #4294967295
 8001040:	d26c      	bcs.n	800111c <__udivmoddi4+0x2ac>
 8001042:	45a6      	cmp	lr, r4
 8001044:	d96a      	bls.n	800111c <__udivmoddi4+0x2ac>
 8001046:	3b02      	subs	r3, #2
 8001048:	4464      	add	r4, ip
 800104a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800104e:	fba3 9502 	umull	r9, r5, r3, r2
 8001052:	eba4 040e 	sub.w	r4, r4, lr
 8001056:	42ac      	cmp	r4, r5
 8001058:	46c8      	mov	r8, r9
 800105a:	46ae      	mov	lr, r5
 800105c:	d356      	bcc.n	800110c <__udivmoddi4+0x29c>
 800105e:	d053      	beq.n	8001108 <__udivmoddi4+0x298>
 8001060:	b156      	cbz	r6, 8001078 <__udivmoddi4+0x208>
 8001062:	ebb0 0208 	subs.w	r2, r0, r8
 8001066:	eb64 040e 	sbc.w	r4, r4, lr
 800106a:	fa04 f707 	lsl.w	r7, r4, r7
 800106e:	40ca      	lsrs	r2, r1
 8001070:	40cc      	lsrs	r4, r1
 8001072:	4317      	orrs	r7, r2
 8001074:	e9c6 7400 	strd	r7, r4, [r6]
 8001078:	4618      	mov	r0, r3
 800107a:	2100      	movs	r1, #0
 800107c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001080:	f1c3 0120 	rsb	r1, r3, #32
 8001084:	fa02 fc03 	lsl.w	ip, r2, r3
 8001088:	fa20 f201 	lsr.w	r2, r0, r1
 800108c:	fa25 f101 	lsr.w	r1, r5, r1
 8001090:	409d      	lsls	r5, r3
 8001092:	432a      	orrs	r2, r5
 8001094:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001098:	fa1f fe8c 	uxth.w	lr, ip
 800109c:	fbb1 f0f7 	udiv	r0, r1, r7
 80010a0:	fb07 1510 	mls	r5, r7, r0, r1
 80010a4:	0c11      	lsrs	r1, r2, #16
 80010a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80010aa:	fb00 f50e 	mul.w	r5, r0, lr
 80010ae:	428d      	cmp	r5, r1
 80010b0:	fa04 f403 	lsl.w	r4, r4, r3
 80010b4:	d908      	bls.n	80010c8 <__udivmoddi4+0x258>
 80010b6:	eb1c 0101 	adds.w	r1, ip, r1
 80010ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80010be:	d22f      	bcs.n	8001120 <__udivmoddi4+0x2b0>
 80010c0:	428d      	cmp	r5, r1
 80010c2:	d92d      	bls.n	8001120 <__udivmoddi4+0x2b0>
 80010c4:	3802      	subs	r0, #2
 80010c6:	4461      	add	r1, ip
 80010c8:	1b49      	subs	r1, r1, r5
 80010ca:	b292      	uxth	r2, r2
 80010cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80010d0:	fb07 1115 	mls	r1, r7, r5, r1
 80010d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010d8:	fb05 f10e 	mul.w	r1, r5, lr
 80010dc:	4291      	cmp	r1, r2
 80010de:	d908      	bls.n	80010f2 <__udivmoddi4+0x282>
 80010e0:	eb1c 0202 	adds.w	r2, ip, r2
 80010e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80010e8:	d216      	bcs.n	8001118 <__udivmoddi4+0x2a8>
 80010ea:	4291      	cmp	r1, r2
 80010ec:	d914      	bls.n	8001118 <__udivmoddi4+0x2a8>
 80010ee:	3d02      	subs	r5, #2
 80010f0:	4462      	add	r2, ip
 80010f2:	1a52      	subs	r2, r2, r1
 80010f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80010f8:	e738      	b.n	8000f6c <__udivmoddi4+0xfc>
 80010fa:	4631      	mov	r1, r6
 80010fc:	4630      	mov	r0, r6
 80010fe:	e708      	b.n	8000f12 <__udivmoddi4+0xa2>
 8001100:	4639      	mov	r1, r7
 8001102:	e6e6      	b.n	8000ed2 <__udivmoddi4+0x62>
 8001104:	4610      	mov	r0, r2
 8001106:	e6fb      	b.n	8000f00 <__udivmoddi4+0x90>
 8001108:	4548      	cmp	r0, r9
 800110a:	d2a9      	bcs.n	8001060 <__udivmoddi4+0x1f0>
 800110c:	ebb9 0802 	subs.w	r8, r9, r2
 8001110:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001114:	3b01      	subs	r3, #1
 8001116:	e7a3      	b.n	8001060 <__udivmoddi4+0x1f0>
 8001118:	4645      	mov	r5, r8
 800111a:	e7ea      	b.n	80010f2 <__udivmoddi4+0x282>
 800111c:	462b      	mov	r3, r5
 800111e:	e794      	b.n	800104a <__udivmoddi4+0x1da>
 8001120:	4640      	mov	r0, r8
 8001122:	e7d1      	b.n	80010c8 <__udivmoddi4+0x258>
 8001124:	46d0      	mov	r8, sl
 8001126:	e77b      	b.n	8001020 <__udivmoddi4+0x1b0>
 8001128:	3d02      	subs	r5, #2
 800112a:	4462      	add	r2, ip
 800112c:	e732      	b.n	8000f94 <__udivmoddi4+0x124>
 800112e:	4608      	mov	r0, r1
 8001130:	e70a      	b.n	8000f48 <__udivmoddi4+0xd8>
 8001132:	4464      	add	r4, ip
 8001134:	3802      	subs	r0, #2
 8001136:	e742      	b.n	8000fbe <__udivmoddi4+0x14e>

08001138 <__aeabi_idiv0>:
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <__aeabi_d2uiz>:
 800113c:	004a      	lsls	r2, r1, #1
 800113e:	d211      	bcs.n	8001164 <__aeabi_d2uiz+0x28>
 8001140:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001144:	d211      	bcs.n	800116a <__aeabi_d2uiz+0x2e>
 8001146:	d50d      	bpl.n	8001164 <__aeabi_d2uiz+0x28>
 8001148:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800114c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001150:	d40e      	bmi.n	8001170 <__aeabi_d2uiz+0x34>
 8001152:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001156:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800115a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800115e:	fa23 f002 	lsr.w	r0, r3, r2
 8001162:	4770      	bx	lr
 8001164:	f04f 0000 	mov.w	r0, #0
 8001168:	4770      	bx	lr
 800116a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800116e:	d102      	bne.n	8001176 <__aeabi_d2uiz+0x3a>
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	4770      	bx	lr
 8001176:	f04f 0000 	mov.w	r0, #0
 800117a:	4770      	bx	lr

0800117c <fillFreeRam>:
 */
__STATIC_FORCEINLINE uint32_t __get_MSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 800117c:	f3ef 8308 	mrs	r3, MSP
	uint8_t* sp = (uint8_t*)__get_MSP(); // Main Stack Pointer (MSP)


	uint8_t *ptr = &_end + 1;
	while(ptr < sp){
		*ptr = 0x81;
 8001180:	4803      	ldr	r0, [pc, #12]	; (8001190 <fillFreeRam+0x14>)
 8001182:	2181      	movs	r1, #129	; 0x81
 8001184:	1a1a      	subs	r2, r3, r0
 8001186:	4298      	cmp	r0, r3
 8001188:	bf88      	it	hi
 800118a:	2200      	movhi	r2, #0
 800118c:	f00a b9ed 	b.w	800b56a <memset>
 8001190:	2002abc1 	.word	0x2002abc1

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b510      	push	{r4, lr}
 8001196:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001198:	2230      	movs	r2, #48	; 0x30
 800119a:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119c:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	a808      	add	r0, sp, #32
 80011a0:	f00a f9e3 	bl	800b56a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	2214      	movs	r2, #20
 80011a6:	2100      	movs	r1, #0
 80011a8:	a803      	add	r0, sp, #12
 80011aa:	f00a f9de 	bl	800b56a <memset>
  HAL_PWR_EnableBkUpAccess();
 80011ae:	f000 ff8b 	bl	80020c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <SystemClock_Config+0xa4>)
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011b4:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
 80011b6:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <SystemClock_Config+0xa8>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011d6:	9412      	str	r4, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011dc:	9302      	str	r3, [sp, #8]
 80011de:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011e4:	e9cd 1308 	strd	r1, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ec:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 80011f0:	23d8      	movs	r3, #216	; 0xd8
 80011f2:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011f6:	2309      	movs	r3, #9
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011fa:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f000 ffa4 	bl	8002148 <HAL_RCC_OscConfig>
 8001200:	b108      	cbz	r0, 8001206 <SystemClock_Config+0x72>
  __ASM volatile ("cpsid i" : : : "memory");
 8001202:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001204:	e7fe      	b.n	8001204 <SystemClock_Config+0x70>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001206:	f000 ff67 	bl	80020d8 <HAL_PWREx_EnableOverDrive>
 800120a:	b108      	cbz	r0, 8001210 <SystemClock_Config+0x7c>
 800120c:	b672      	cpsid	i
  while (1)
 800120e:	e7fe      	b.n	800120e <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001212:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001216:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001218:	2107      	movs	r1, #7
 800121a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121c:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001224:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001228:	f001 f976 	bl	8002518 <HAL_RCC_ClockConfig>
 800122c:	b108      	cbz	r0, 8001232 <SystemClock_Config+0x9e>
 800122e:	b672      	cpsid	i
  while (1)
 8001230:	e7fe      	b.n	8001230 <SystemClock_Config+0x9c>
}
 8001232:	b014      	add	sp, #80	; 0x50
 8001234:	bd10      	pop	{r4, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40007000 	.word	0x40007000

08001240 <main>:
{
 8001240:	b500      	push	{lr}
 8001242:	b08f      	sub	sp, #60	; 0x3c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001244:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001248:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800124c:	4a98      	ldr	r2, [pc, #608]	; (80014b0 <main+0x270>)
 800124e:	2100      	movs	r1, #0
 8001250:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001258:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800125c:	6953      	ldr	r3, [r2, #20]
 800125e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001262:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001264:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001268:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800126c:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001270:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001274:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001278:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800127c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001280:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001284:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001286:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800128a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800128c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001290:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001292:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8001296:	d2f9      	bcs.n	800128c <main+0x4c>
    } while(sets-- != 0U);
 8001298:	3b20      	subs	r3, #32
 800129a:	f113 0f20 	cmn.w	r3, #32
 800129e:	d1f2      	bne.n	8001286 <main+0x46>
 80012a0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012a4:	6953      	ldr	r3, [r2, #20]
 80012a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012aa:	6153      	str	r3, [r2, #20]
 80012ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80012b0:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80012b4:	f000 fb2a 	bl	800190c <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2400      	movs	r4, #0
  SystemClock_Config();
 80012ba:	f7ff ff6b 	bl	8001194 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2501      	movs	r5, #1
  fillFreeRam();
 80012c0:	f7ff ff5c 	bl	800117c <fillFreeRam>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	2214      	movs	r2, #20
 80012c6:	2100      	movs	r1, #0
 80012c8:	a809      	add	r0, sp, #36	; 0x24
 80012ca:	f00a f94e 	bl	800b56a <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	4b79      	ldr	r3, [pc, #484]	; (80014b4 <main+0x274>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012d0:	f244 0181 	movw	r1, #16513	; 0x4081
 80012d4:	4878      	ldr	r0, [pc, #480]	; (80014b8 <main+0x278>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012d8:	2680      	movs	r6, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	f042 0204 	orr.w	r2, r2, #4
 80012de:	631a      	str	r2, [r3, #48]	; 0x30
 80012e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012e2:	f002 0204 	and.w	r2, r2, #4
 80012e6:	9200      	str	r2, [sp, #0]
 80012e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012f0:	631a      	str	r2, [r3, #48]	; 0x30
 80012f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012f4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80012f8:	9201      	str	r2, [sp, #4]
 80012fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012fe:	f042 0201 	orr.w	r2, r2, #1
 8001302:	631a      	str	r2, [r3, #48]	; 0x30
 8001304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001306:	f002 0201 	and.w	r2, r2, #1
 800130a:	9202      	str	r2, [sp, #8]
 800130c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001310:	f042 0202 	orr.w	r2, r2, #2
 8001314:	631a      	str	r2, [r3, #48]	; 0x30
 8001316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001318:	f002 0202 	and.w	r2, r2, #2
 800131c:	9203      	str	r2, [sp, #12]
 800131e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001322:	f042 0208 	orr.w	r2, r2, #8
 8001326:	631a      	str	r2, [r3, #48]	; 0x30
 8001328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800132a:	f002 0208 	and.w	r2, r2, #8
 800132e:	9204      	str	r2, [sp, #16]
 8001330:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001338:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001342:	9305      	str	r3, [sp, #20]
 8001344:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001346:	f000 fe2f 	bl	8001fa8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2140      	movs	r1, #64	; 0x40
 800134e:	485b      	ldr	r0, [pc, #364]	; (80014bc <main+0x27c>)
 8001350:	f000 fe2a 	bl	8001fa8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001354:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8001358:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800135c:	a909      	add	r1, sp, #36	; 0x24
 800135e:	4858      	ldr	r0, [pc, #352]	; (80014c0 <main+0x280>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001362:	e9cd c309 	strd	ip, r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001366:	f000 fd3d 	bl	8001de4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	a909      	add	r1, sp, #36	; 0x24
 8001370:	4851      	ldr	r0, [pc, #324]	; (80014b8 <main+0x278>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f000 fd33 	bl	8001de4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800137e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001380:	a909      	add	r1, sp, #36	; 0x24
 8001382:	484e      	ldr	r0, [pc, #312]	; (80014bc <main+0x27c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800138c:	f000 fd2a 	bl	8001de4 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001390:	a909      	add	r1, sp, #36	; 0x24
 8001392:	484a      	ldr	r0, [pc, #296]	; (80014bc <main+0x27c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	e9cd 6409 	strd	r6, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800139a:	f000 fd23 	bl	8001de4 <HAL_GPIO_Init>
  heth.Instance = ETH;
 800139e:	4849      	ldr	r0, [pc, #292]	; (80014c4 <main+0x284>)
 80013a0:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <main+0x288>)
  MACAddr[2] = 0xE1;
 80013a2:	22e1      	movs	r2, #225	; 0xe1
  heth.Instance = ETH;
 80013a4:	6003      	str	r3, [r0, #0]
  MACAddr[0] = 0x00;
 80013a6:	4b49      	ldr	r3, [pc, #292]	; (80014cc <main+0x28c>)
 80013a8:	701c      	strb	r4, [r3, #0]
  MACAddr[3] = 0x00;
 80013aa:	70dc      	strb	r4, [r3, #3]
  MACAddr[4] = 0x00;
 80013ac:	711c      	strb	r4, [r3, #4]
  MACAddr[5] = 0x00;
 80013ae:	715c      	strb	r4, [r3, #5]
  MACAddr[1] = 0x80;
 80013b0:	705e      	strb	r6, [r3, #1]
  MACAddr[2] = 0xE1;
 80013b2:	709a      	strb	r2, [r3, #2]
  heth.Init.MACAddr = &MACAddr[0];
 80013b4:	6043      	str	r3, [r0, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80013b6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80013ba:	6083      	str	r3, [r0, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <main+0x290>)
 80013be:	60c3      	str	r3, [r0, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80013c0:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <main+0x294>)
 80013c2:	6103      	str	r3, [r0, #16]
  heth.Init.RxBuffLen = 1524;
 80013c4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80013c8:	6143      	str	r3, [r0, #20]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 80013ca:	f000 fc0f 	bl	8001bec <HAL_ETH_Init>
 80013ce:	4604      	mov	r4, r0
 80013d0:	b108      	cbz	r0, 80013d6 <main+0x196>
  __ASM volatile ("cpsid i" : : : "memory");
 80013d2:	b672      	cpsid	i
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <main+0x194>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80013d6:	4e40      	ldr	r6, [pc, #256]	; (80014d8 <main+0x298>)
 80013d8:	4601      	mov	r1, r0
 80013da:	2234      	movs	r2, #52	; 0x34
 80013dc:	1d30      	adds	r0, r6, #4
 80013de:	f00a f8c4 	bl	800b56a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80013e2:	2321      	movs	r3, #33	; 0x21
  huart3.Instance = USART3;
 80013e4:	483d      	ldr	r0, [pc, #244]	; (80014dc <main+0x29c>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80013e6:	6033      	str	r3, [r6, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80013e8:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ec:	6104      	str	r4, [r0, #16]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80013ee:	6173      	str	r3, [r6, #20]
  huart3.Init.BaudRate = 115200;
 80013f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80013f4:	4e3a      	ldr	r6, [pc, #232]	; (80014e0 <main+0x2a0>)
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f6:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 80013f8:	e9c0 6300 	strd	r6, r3, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013fc:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001406:	e9c0 4407 	strd	r4, r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800140a:	f002 f93c 	bl	8003686 <HAL_UART_Init>
 800140e:	b108      	cbz	r0, 8001414 <main+0x1d4>
 8001410:	b672      	cpsid	i
  while (1)
 8001412:	e7fe      	b.n	8001412 <main+0x1d2>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001414:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <main+0x2a4>)
 8001416:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800141a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800141c:	2206      	movs	r2, #6
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800141e:	815d      	strh	r5, [r3, #10]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001420:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001422:	f44f 7200 	mov.w	r2, #512	; 0x200
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001426:	7318      	strb	r0, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001428:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800142a:	80da      	strh	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800142c:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800142e:	81dd      	strh	r5, [r3, #14]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001430:	725a      	strb	r2, [r3, #9]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001432:	f000 fdbe 	bl	8001fb2 <HAL_PCD_Init>
 8001436:	4605      	mov	r5, r0
 8001438:	b108      	cbz	r0, 800143e <main+0x1fe>
 800143a:	b672      	cpsid	i
  while (1)
 800143c:	e7fe      	b.n	800143c <main+0x1fc>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	2210      	movs	r2, #16
 8001440:	4601      	mov	r1, r0
 8001442:	a809      	add	r0, sp, #36	; 0x24
  htim3.Instance = TIM3;
 8001444:	4c28      	ldr	r4, [pc, #160]	; (80014e8 <main+0x2a8>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	f00a f890 	bl	800b56a <memset>
  htim3.Init.Prescaler = 63999;
 800144a:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 800144e:	4a27      	ldr	r2, [pc, #156]	; (80014ec <main+0x2ac>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001450:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001452:	9508      	str	r5, [sp, #32]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	60a5      	str	r5, [r4, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	61a5      	str	r5, [r4, #24]
  htim3.Init.Prescaler = 63999;
 8001458:	e9c4 2300 	strd	r2, r3, [r4]
  htim3.Init.Period = 65535;
 800145c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	e9cd 5506 	strd	r5, r5, [sp, #24]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	e9c4 3503 	strd	r3, r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001468:	f001 fcf4 	bl	8002e54 <HAL_TIM_Base_Init>
 800146c:	b108      	cbz	r0, 8001472 <main+0x232>
 800146e:	b672      	cpsid	i
  while (1)
 8001470:	e7fe      	b.n	8001470 <main+0x230>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001476:	a909      	add	r1, sp, #36	; 0x24
 8001478:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800147c:	f001 fd24 	bl	8002ec8 <HAL_TIM_ConfigClockSource>
 8001480:	b108      	cbz	r0, 8001486 <main+0x246>
 8001482:	b672      	cpsid	i
  while (1)
 8001484:	e7fe      	b.n	8001484 <main+0x244>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001486:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001488:	a906      	add	r1, sp, #24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148a:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800148c:	4620      	mov	r0, r4
 800148e:	f001 fdb5 	bl	8002ffc <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	b108      	cbz	r0, 8001498 <main+0x258>
 8001494:	b672      	cpsid	i
  while (1)
 8001496:	e7fe      	b.n	8001496 <main+0x256>
  MX_X_CUBE_AI_Init();
 8001498:	f004 f8b2 	bl	8005600 <MX_X_CUBE_AI_Init>
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 800149c:	4620      	mov	r0, r4
 800149e:	f001 fb89 	bl	8002bb4 <HAL_TIM_Base_Start_IT>
 80014a2:	b108      	cbz	r0, 80014a8 <main+0x268>
 80014a4:	b672      	cpsid	i
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <main+0x266>
  MX_X_CUBE_AI_Process();
 80014a8:	f004 f8ac 	bl	8005604 <MX_X_CUBE_AI_Process>
  while (1)
 80014ac:	e7fc      	b.n	80014a8 <main+0x268>
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40021800 	.word	0x40021800
 80014c0:	40020800 	.word	0x40020800
 80014c4:	2000451c 	.word	0x2000451c
 80014c8:	40028000 	.word	0x40028000
 80014cc:	200044dc 	.word	0x200044dc
 80014d0:	20004414 	.word	0x20004414
 80014d4:	20004374 	.word	0x20004374
 80014d8:	200044e4 	.word	0x200044e4
 80014dc:	20004af8 	.word	0x20004af8
 80014e0:	40004800 	.word	0x40004800
 80014e4:	200045cc 	.word	0x200045cc
 80014e8:	20004aac 	.word	0x20004aac
 80014ec:	40000400 	.word	0x40000400

080014f0 <Error_Handler>:
 80014f0:	b672      	cpsid	i
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <Error_Handler+0x2>

080014f4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_MspInit+0x2c>)
{
 80014f6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001502:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001506:	9200      	str	r2, [sp, #0]
 8001508:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800150c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001510:	645a      	str	r2, [r3, #68]	; 0x44
 8001512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151c:	b002      	add	sp, #8
 800151e:	4770      	bx	lr
 8001520:	40023800 	.word	0x40023800

08001524 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001526:	b08d      	sub	sp, #52	; 0x34
 8001528:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	2214      	movs	r2, #20
 800152c:	2100      	movs	r1, #0
 800152e:	a807      	add	r0, sp, #28
 8001530:	f00a f81b 	bl	800b56a <memset>
  if(heth->Instance==ETH)
 8001534:	6822      	ldr	r2, [r4, #0]
 8001536:	4b39      	ldr	r3, [pc, #228]	; (800161c <HAL_ETH_MspInit+0xf8>)
 8001538:	429a      	cmp	r2, r3
 800153a:	d16d      	bne.n	8001618 <HAL_ETH_MspInit+0xf4>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800153c:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001542:	2503      	movs	r5, #3
 8001544:	240b      	movs	r4, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 8001546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001548:	a907      	add	r1, sp, #28
 800154a:	4835      	ldr	r0, [pc, #212]	; (8001620 <HAL_ETH_MspInit+0xfc>)

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2700      	movs	r7, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 800154e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
 8001554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001556:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800155a:	9200      	str	r2, [sp, #0]
 800155c:	9a00      	ldr	r2, [sp, #0]
 800155e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001560:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001564:	631a      	str	r2, [r3, #48]	; 0x30
 8001566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001568:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800156c:	9201      	str	r2, [sp, #4]
 800156e:	9a01      	ldr	r2, [sp, #4]
 8001570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001572:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001576:	631a      	str	r2, [r3, #48]	; 0x30
 8001578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800157e:	9202      	str	r2, [sp, #8]
 8001580:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001584:	f042 0204 	orr.w	r2, r2, #4
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
 800158a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158c:	f002 0204 	and.w	r2, r2, #4
 8001590:	9203      	str	r2, [sp, #12]
 8001592:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
 800159c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800159e:	f002 0201 	and.w	r2, r2, #1
 80015a2:	9204      	str	r2, [sp, #16]
 80015a4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a8:	f042 0202 	orr.w	r2, r2, #2
 80015ac:	631a      	str	r2, [r3, #48]	; 0x30
 80015ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b0:	f002 0202 	and.w	r2, r2, #2
 80015b4:	9205      	str	r2, [sp, #20]
 80015b6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015c6:	9306      	str	r3, [sp, #24]
 80015c8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2332      	movs	r3, #50	; 0x32
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015cc:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	e9cd 3607 	strd	r3, r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d4:	f000 fc06 	bl	8001de4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015d8:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	a907      	add	r1, sp, #28
 80015dc:	4811      	ldr	r0, [pc, #68]	; (8001624 <HAL_ETH_MspInit+0x100>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015de:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f000 fbfc 	bl	8001de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015f0:	a907      	add	r1, sp, #28
 80015f2:	480d      	ldr	r0, [pc, #52]	; (8001628 <HAL_ETH_MspInit+0x104>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015f4:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f000 fbf1 	bl	8001de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001602:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001606:	a907      	add	r1, sp, #28
 8001608:	4808      	ldr	r0, [pc, #32]	; (800162c <HAL_ETH_MspInit+0x108>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800160a:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	e9cd 3607 	strd	r3, r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001614:	f000 fbe6 	bl	8001de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001618:	b00d      	add	sp, #52	; 0x34
 800161a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161c:	40028000 	.word	0x40028000
 8001620:	40020800 	.word	0x40020800
 8001624:	40020000 	.word	0x40020000
 8001628:	40020400 	.word	0x40020400
 800162c:	40021800 	.word	0x40021800

08001630 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <HAL_TIM_Base_MspInit+0x3c>)
{
 8001632:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8001634:	6802      	ldr	r2, [r0, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d115      	bne.n	8001666 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800163a:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800163e:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001642:	f042 0202 	orr.w	r2, r2, #2
 8001646:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800164c:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001656:	f000 f9ad 	bl	80019b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800165a:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800165c:	b003      	add	sp, #12
 800165e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001662:	f000 b9d9 	b.w	8001a18 <HAL_NVIC_EnableIRQ>
}
 8001666:	b003      	add	sp, #12
 8001668:	f85d fb04 	ldr.w	pc, [sp], #4
 800166c:	40000400 	.word	0x40000400

08001670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b510      	push	{r4, lr}
 8001672:	b0a8      	sub	sp, #160	; 0xa0
 8001674:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	2214      	movs	r2, #20
 8001678:	2100      	movs	r1, #0
 800167a:	a802      	add	r0, sp, #8
 800167c:	f009 ff75 	bl	800b56a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001680:	2284      	movs	r2, #132	; 0x84
 8001682:	2100      	movs	r1, #0
 8001684:	a807      	add	r0, sp, #28
 8001686:	f009 ff70 	bl	800b56a <memset>
  if(huart->Instance==USART3)
 800168a:	6822      	ldr	r2, [r4, #0]
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_UART_MspInit+0x7c>)
 800168e:	429a      	cmp	r2, r3
 8001690:	d12a      	bne.n	80016e8 <HAL_UART_MspInit+0x78>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001692:	f44f 7380 	mov.w	r3, #256	; 0x100
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001696:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001698:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169a:	f001 f801 	bl	80026a0 <HAL_RCCEx_PeriphCLKConfig>
 800169e:	b108      	cbz	r0, 80016a4 <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 80016a0:	f7ff ff26 	bl	80014f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_UART_MspInit+0x80>)
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2100      	movs	r1, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a8:	4812      	ldr	r0, [pc, #72]	; (80016f4 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80016aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
 80016b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016b4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80016b8:	9200      	str	r2, [sp, #0]
 80016ba:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016be:	f042 0208 	orr.w	r2, r2, #8
 80016c2:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016de:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016e2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e4:	f000 fb7e 	bl	8001de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016e8:	b028      	add	sp, #160	; 0xa0
 80016ea:	bd10      	pop	{r4, pc}
 80016ec:	40004800 	.word	0x40004800
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020c00 	.word	0x40020c00

080016f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016f8:	b530      	push	{r4, r5, lr}
 80016fa:	b0ab      	sub	sp, #172	; 0xac
 80016fc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	2214      	movs	r2, #20
 8001700:	2100      	movs	r1, #0
 8001702:	a804      	add	r0, sp, #16
 8001704:	f009 ff31 	bl	800b56a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001708:	2284      	movs	r2, #132	; 0x84
 800170a:	2100      	movs	r1, #0
 800170c:	a809      	add	r0, sp, #36	; 0x24
 800170e:	f009 ff2c 	bl	800b56a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001718:	d13c      	bne.n	8001794 <HAL_PCD_MspInit+0x9c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800171a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800171e:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001720:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001722:	f000 ffbd 	bl	80026a0 <HAL_RCCEx_PeriphCLKConfig>
 8001726:	b108      	cbz	r0, 800172c <HAL_PCD_MspInit+0x34>
    {
      Error_Handler();
 8001728:	f7ff fee2 	bl	80014f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4c1a      	ldr	r4, [pc, #104]	; (8001798 <HAL_PCD_MspInit+0xa0>)
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	f44f 52e8 	mov.w	r2, #7424	; 0x1d00
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	4818      	ldr	r0, [pc, #96]	; (800179c <HAL_PCD_MspInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6323      	str	r3, [r4, #48]	; 0x30
 8001740:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	e9cd 5306 	strd	r5, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001756:	230a      	movs	r3, #10
 8001758:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f000 fb43 	bl	8001de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800175e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001762:	a904      	add	r1, sp, #16
 8001764:	480d      	ldr	r0, [pc, #52]	; (800179c <HAL_PCD_MspInit+0xa4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001768:	e9cd 3504 	strd	r3, r5, [sp, #16]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800176c:	f000 fb3a 	bl	8001de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001776:	6363      	str	r3, [r4, #52]	; 0x34
 8001778:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800177a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	9b02      	ldr	r3, [sp, #8]
 8001782:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001788:	6463      	str	r3, [r4, #68]	; 0x44
 800178a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800178c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001790:	9303      	str	r3, [sp, #12]
 8001792:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001794:	b02b      	add	sp, #172	; 0xac
 8001796:	bd30      	pop	{r4, r5, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000

080017a0 <returnEmptyRAM>:
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80017a0:	f3ef 8208 	mrs	r2, MSP
	extern uint8_t _estack; // End of SRAM (start of the stack)
	volatile uint8_t* sp = (uint8_t*)__get_MSP(); // Main Stack Pointer (MSP)

	uint32_t ret = 0;

	volatile uint8_t *ptr = &_end + 1;
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <returnEmptyRAM+0x1c>)
	uint32_t ret = 0;
 80017a6:	2000      	movs	r0, #0
	while(ptr < sp){
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d300      	bcc.n	80017ae <returnEmptyRAM+0xe>
			ret++;
		}
		ptr++;
	}
	return ret;
}
 80017ac:	4770      	bx	lr
		if(*ptr ==  0x81){
 80017ae:	7819      	ldrb	r1, [r3, #0]
		ptr++;
 80017b0:	3301      	adds	r3, #1
		if(*ptr ==  0x81){
 80017b2:	2981      	cmp	r1, #129	; 0x81
			ret++;
 80017b4:	bf08      	it	eq
 80017b6:	3001      	addeq	r0, #1
		ptr++;
 80017b8:	e7f6      	b.n	80017a8 <returnEmptyRAM+0x8>
 80017ba:	bf00      	nop
 80017bc:	2002abc1 	.word	0x2002abc1

080017c0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <NMI_Handler>

080017c2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <HardFault_Handler>

080017c4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler>

080017c6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <BusFault_Handler>

080017c8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <UsageFault_Handler>

080017ca <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	4770      	bx	lr

080017cc <DebugMon_Handler>:
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d0:	f000 b8a8 	b.w	8001924 <HAL_IncTick>

080017d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017d6:	480e      	ldr	r0, [pc, #56]	; (8001810 <TIM3_IRQHandler+0x3c>)
 80017d8:	f001 fa2f 	bl	8002c3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  static char size_string[10]= {'0','0','0','0','0','0','0','0','\n'};

	  // clear string
	  for(int i = 0; i <8; i ++)
				  size_string[i] = '0';
 80017dc:	4c0d      	ldr	r4, [pc, #52]	; (8001814 <TIM3_IRQHandler+0x40>)
 80017de:	f04f 3330 	mov.w	r3, #808464432	; 0x30303030
 80017e2:	6023      	str	r3, [r4, #0]
 80017e4:	6063      	str	r3, [r4, #4]

	  // calc new number
	  uint32_t postAiRam = returnEmptyRAM();
 80017e6:	f7ff ffdb 	bl	80017a0 <returnEmptyRAM>

	  // convert number to string
	  for(int i = 7; i >= 0; i--){
 80017ea:	2307      	movs	r3, #7
			size_string[i] = postAiRam % 10 + '0';
 80017ec:	210a      	movs	r1, #10
 80017ee:	fbb0 f2f1 	udiv	r2, r0, r1
 80017f2:	fb01 0012 	mls	r0, r1, r2, r0
 80017f6:	3030      	adds	r0, #48	; 0x30
 80017f8:	54e0      	strb	r0, [r4, r3]
	  for(int i = 7; i >= 0; i--){
 80017fa:	3b01      	subs	r3, #1
			postAiRam = postAiRam/10;
 80017fc:	4610      	mov	r0, r2
	  for(int i = 7; i >= 0; i--){
 80017fe:	d2f6      	bcs.n	80017ee <TIM3_IRQHandler+0x1a>
		}
	  HAL_UART_Transmit(&UartHandle, size_string, 9, HAL_MAX_DELAY);
 8001800:	2209      	movs	r2, #9
 8001802:	4904      	ldr	r1, [pc, #16]	; (8001814 <TIM3_IRQHandler+0x40>)
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <TIM3_IRQHandler+0x44>)


  /* USER CODE END TIM3_IRQn 1 */
}
 8001806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_UART_Transmit(&UartHandle, size_string, 9, HAL_MAX_DELAY);
 800180a:	f001 be4e 	b.w	80034aa <HAL_UART_Transmit>
 800180e:	bf00      	nop
 8001810:	20004aac 	.word	0x20004aac
 8001814:	20000000 	.word	0x20000000
 8001818:	20004af8 	.word	0x20004af8

0800181c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800181c:	4a0b      	ldr	r2, [pc, #44]	; (800184c <_sbrk+0x30>)
{
 800181e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001820:	6811      	ldr	r1, [r2, #0]
{
 8001822:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001824:	b909      	cbnz	r1, 800182a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001826:	490a      	ldr	r1, [pc, #40]	; (8001850 <_sbrk+0x34>)
 8001828:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182a:	6810      	ldr	r0, [r2, #0]
 800182c:	4909      	ldr	r1, [pc, #36]	; (8001854 <_sbrk+0x38>)
 800182e:	4c0a      	ldr	r4, [pc, #40]	; (8001858 <_sbrk+0x3c>)
 8001830:	4403      	add	r3, r0
 8001832:	1b09      	subs	r1, r1, r4
 8001834:	428b      	cmp	r3, r1
 8001836:	d906      	bls.n	8001846 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001838:	f009 ff0c 	bl	800b654 <__errno>
 800183c:	230c      	movs	r3, #12
 800183e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001840:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001844:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001846:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001848:	e7fc      	b.n	8001844 <_sbrk+0x28>
 800184a:	bf00      	nop
 800184c:	20004b80 	.word	0x20004b80
 8001850:	2002abc0 	.word	0x2002abc0
 8001854:	20050000 	.word	0x20050000
 8001858:	00000800 	.word	0x00000800

0800185c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800185c:	4a03      	ldr	r2, [pc, #12]	; (800186c <SystemInit+0x10>)
 800185e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001862:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001866:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800186a:	4770      	bx	lr
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001874:	f7ff fff2 	bl	800185c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800187a:	490d      	ldr	r1, [pc, #52]	; (80018b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800187c:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001890:	4c0a      	ldr	r4, [pc, #40]	; (80018bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800189e:	f009 fedf 	bl	800b660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a2:	f7ff fccd 	bl	8001240 <main>
  bx  lr    
 80018a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	20004374 	.word	0x20004374
  ldr r2, =_sidata
 80018b4:	080dc92c 	.word	0x080dc92c
  ldr r2, =_sbss
 80018b8:	200044c0 	.word	0x200044c0
  ldr r4, =_ebss
 80018bc:	2002abbc 	.word	0x2002abbc

080018c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC_IRQHandler>
	...

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_InitTick+0x3c>)
{
 80018c8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80018d4:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <HAL_InitTick+0x40>)
 80018d6:	6810      	ldr	r0, [r2, #0]
 80018d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80018dc:	f000 f8aa 	bl	8001a34 <HAL_SYSTICK_Config>
 80018e0:	4604      	mov	r4, r0
 80018e2:	b958      	cbnz	r0, 80018fc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e4:	2d0f      	cmp	r5, #15
 80018e6:	d809      	bhi.n	80018fc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e8:	4602      	mov	r2, r0
 80018ea:	4629      	mov	r1, r5
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f000 f860 	bl	80019b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <HAL_InitTick+0x44>)
 80018f6:	4620      	mov	r0, r4
 80018f8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80018fa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80018fc:	2001      	movs	r0, #1
 80018fe:	e7fc      	b.n	80018fa <HAL_InitTick+0x36>
 8001900:	20000010 	.word	0x20000010
 8001904:	2000000c 	.word	0x2000000c
 8001908:	20000014 	.word	0x20000014

0800190c <HAL_Init>:
{
 800190c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190e:	2003      	movs	r0, #3
 8001910:	f000 f83e 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff ffd5 	bl	80018c4 <HAL_InitTick>
  HAL_MspInit();
 800191a:	f7ff fdeb 	bl	80014f4 <HAL_MspInit>
}
 800191e:	2000      	movs	r0, #0
 8001920:	bd08      	pop	{r3, pc}
	...

08001924 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001924:	4a03      	ldr	r2, [pc, #12]	; (8001934 <HAL_IncTick+0x10>)
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <HAL_IncTick+0x14>)
 8001928:	6811      	ldr	r1, [r2, #0]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	440b      	add	r3, r1
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20004b84 	.word	0x20004b84
 8001938:	20000010 	.word	0x20000010

0800193c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800193c:	4b01      	ldr	r3, [pc, #4]	; (8001944 <HAL_GetTick+0x8>)
 800193e:	6818      	ldr	r0, [r3, #0]
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20004b84 	.word	0x20004b84

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b538      	push	{r3, r4, r5, lr}
 800194a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff fff6 	bl	800193c <HAL_GetTick>
 8001950:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001954:	bf1e      	ittt	ne
 8001956:	4b04      	ldrne	r3, [pc, #16]	; (8001968 <HAL_Delay+0x20>)
 8001958:	781b      	ldrbne	r3, [r3, #0]
 800195a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800195c:	f7ff ffee 	bl	800193c <HAL_GetTick>
 8001960:	1b43      	subs	r3, r0, r5
 8001962:	42a3      	cmp	r3, r4
 8001964:	d3fa      	bcc.n	800195c <HAL_Delay+0x14>
  {
  }
}
 8001966:	bd38      	pop	{r3, r4, r5, pc}
 8001968:	20000010 	.word	0x20000010

0800196c <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F7xx_HAL_VERSION;
}
 800196c:	4800      	ldr	r0, [pc, #0]	; (8001970 <HAL_GetHalVersion+0x4>)
 800196e:	4770      	bx	lr
 8001970:	01030100 	.word	0x01030100

08001974 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 8001974:	4b01      	ldr	r3, [pc, #4]	; (800197c <HAL_GetREVID+0x8>)
 8001976:	6818      	ldr	r0, [r3, #0]
}
 8001978:	0c00      	lsrs	r0, r0, #16
 800197a:	4770      	bx	lr
 800197c:	e0042000 	.word	0xe0042000

08001980 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <HAL_GetDEVID+0xc>)
 8001982:	6818      	ldr	r0, [r3, #0]
}
 8001984:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e0042000 	.word	0xe0042000

08001990 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001990:	4907      	ldr	r1, [pc, #28]	; (80019b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001992:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800199e:	0412      	lsls	r2, r2, #16
 80019a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80019ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b6:	b530      	push	{r4, r5, lr}
 80019b8:	68dc      	ldr	r4, [r3, #12]
 80019ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019be:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	bf28      	it	cs
 80019c8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ca:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d0:	bf8c      	ite	hi
 80019d2:	3c03      	subhi	r4, #3
 80019d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80019da:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019dc:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	fa03 f304 	lsl.w	r3, r3, r4
 80019ec:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80019f4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80019f6:	db06      	blt.n	8001a06 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80019fc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001a00:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a04:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	f000 000f 	and.w	r0, r0, #15
 8001a0a:	4a02      	ldr	r2, [pc, #8]	; (8001a14 <HAL_NVIC_SetPriority+0x60>)
 8001a0c:	5413      	strb	r3, [r2, r0]
 8001a0e:	e7f9      	b.n	8001a04 <HAL_NVIC_SetPriority+0x50>
 8001a10:	e000ed00 	.word	0xe000ed00
 8001a14:	e000ed14 	.word	0xe000ed14

08001a18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a18:	2800      	cmp	r0, #0
 8001a1a:	db07      	blt.n	8001a2c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1c:	0941      	lsrs	r1, r0, #5
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f000 001f 	and.w	r0, r0, #31
 8001a24:	4a02      	ldr	r2, [pc, #8]	; (8001a30 <HAL_NVIC_EnableIRQ+0x18>)
 8001a26:	4083      	lsls	r3, r0
 8001a28:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100

08001a34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a34:	3801      	subs	r0, #1
 8001a36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a3a:	d20b      	bcs.n	8001a54 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <HAL_SYSTICK_Config+0x24>)
 8001a42:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a44:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a46:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a48:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a50:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a52:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a54:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	460d      	mov	r5, r1
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a60:	6802      	ldr	r2, [r0, #0]
{
 8001a62:	4604      	mov	r4, r0
 8001a64:	68ab      	ldr	r3, [r5, #8]
 8001a66:	6968      	ldr	r0, [r5, #20]
  tmpreg1 = (heth->Instance)->MACCR;
 8001a68:	6811      	ldr	r1, [r2, #0]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001a6a:	4303      	orrs	r3, r0
 8001a6c:	69a8      	ldr	r0, [r5, #24]
 8001a6e:	4303      	orrs	r3, r0
 8001a70:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001a72:	4303      	orrs	r3, r0
 8001a74:	7ba8      	ldrb	r0, [r5, #14]
 8001a76:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
                        (uint32_t)macconf->InterPacketGapVal |
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001a7a:	7fe8      	ldrb	r0, [r5, #31]
 8001a7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                        macconf->Speed |
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a80:	7f28      	ldrb	r0, [r5, #28]
 8001a82:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
                        macconf->DuplexMode |
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a86:	7928      	ldrb	r0, [r5, #4]
 8001a88:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a8c:	7be8      	ldrb	r0, [r5, #15]
 8001a8e:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
                        macconf->BackOffLimit |
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001a92:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
 8001a96:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a9a:	482a      	ldr	r0, [pc, #168]	; (8001b44 <ETH_SetMACConfig+0xe8>)
 8001a9c:	4008      	ands	r0, r1
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a9e:	7c29      	ldrb	r1, [r5, #16]
 8001aa0:	fab1 f181 	clz	r1, r1
 8001aa4:	4303      	orrs	r3, r0
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aa6:	2001      	movs	r0, #1
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001aa8:	0949      	lsrs	r1, r1, #5
 8001aaa:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001aae:	7c69      	ldrb	r1, [r5, #17]
 8001ab0:	fab1 f181 	clz	r1, r1
 8001ab4:	0949      	lsrs	r1, r1, #5
 8001ab6:	ea43 5381 	orr.w	r3, r3, r1, lsl #22
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001aba:	7fa9      	ldrb	r1, [r5, #30]
 8001abc:	fab1 f181 	clz	r1, r1
 8001ac0:	0949      	lsrs	r1, r1, #5
 8001ac2:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ac6:	f895 1020 	ldrb.w	r1, [r5, #32]
 8001aca:	fab1 f181 	clz	r1, r1
 8001ace:	0949      	lsrs	r1, r1, #5
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ad0:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ad4:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001ad6:	6816      	ldr	r6, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ad8:	f7ff ff36 	bl	8001948 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001adc:	6821      	ldr	r1, [r4, #0]
  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ade:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  (heth->Instance)->MACCR = tmpreg1;
 8001ae0:	600e      	str	r6, [r1, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ae2:	698a      	ldr	r2, [r1, #24]
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ae4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ae6:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8001aea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001aee:	0412      	lsls	r2, r2, #16
 8001af0:	0c12      	lsrs	r2, r2, #16
 8001af2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001af4:	f895 204c 	ldrb.w	r2, [r5, #76]	; 0x4c
 8001af8:	fab2 f282 	clz	r2, r2
 8001afc:	0952      	lsrs	r2, r2, #5
 8001afe:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
                        macconf->PauseLowThreshold |
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b02:	f895 2055 	ldrb.w	r2, [r5, #85]	; 0x55
 8001b06:	1e50      	subs	r0, r2, #1
 8001b08:	4242      	negs	r2, r0
 8001b0a:	4142      	adcs	r2, r0
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001b12:	f895 2056 	ldrb.w	r2, [r5, #86]	; 0x56
 8001b16:	1e56      	subs	r6, r2, #1
 8001b18:	4272      	negs	r2, r6
 8001b1a:	4172      	adcs	r2, r6
 8001b1c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001b20:	f895 2054 	ldrb.w	r2, [r5, #84]	; 0x54
 8001b24:	f102 3cff 	add.w	ip, r2, #4294967295
 8001b28:	f1dc 0200 	rsbs	r2, ip, #0
 8001b2c:	eb42 020c 	adc.w	r2, r2, ip
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b30:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b34:	618b      	str	r3, [r1, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b36:	698d      	ldr	r5, [r1, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b38:	f7ff ff06 	bl	8001948 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	619d      	str	r5, [r3, #24]
}
 8001b40:	bd70      	pop	{r4, r5, r6, pc}
 8001b42:	bf00      	nop
 8001b44:	fd20810f 	.word	0xfd20810f

08001b48 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001b48:	b570      	push	{r4, r5, r6, lr}
 8001b4a:	694b      	ldr	r3, [r1, #20]
 8001b4c:	460d      	mov	r5, r1
 8001b4e:	6a09      	ldr	r1, [r1, #32]
 8001b50:	4604      	mov	r4, r0
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b52:	6802      	ldr	r2, [r0, #0]
 8001b54:	430b      	orrs	r3, r1
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001b56:	7b69      	ldrb	r1, [r5, #13]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b5c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001b60:	7ba9      	ldrb	r1, [r5, #14]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b62:	6990      	ldr	r0, [r2, #24]
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b64:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
                        dmaconf->TransmitThresholdControl |
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001b68:	7f29      	ldrb	r1, [r5, #28]
 8001b6a:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001b6e:	7fa9      	ldrb	r1, [r5, #30]
 8001b70:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
                        dmaconf->ReceiveThresholdControl |
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001b74:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 8001b78:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001b7c:	491a      	ldr	r1, [pc, #104]	; (8001be8 <ETH_SetDMAConfig+0xa0>)
 8001b7e:	4001      	ands	r1, r0
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b80:	2001      	movs	r0, #1
 8001b82:	430b      	orrs	r3, r1
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b84:	7b29      	ldrb	r1, [r5, #12]
 8001b86:	fab1 f181 	clz	r1, r1
 8001b8a:	0949      	lsrs	r1, r1, #5
 8001b8c:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001b90:	7f69      	ldrb	r1, [r5, #29]
 8001b92:	fab1 f181 	clz	r1, r1
 8001b96:	0949      	lsrs	r1, r1, #5
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b98:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001b9c:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b9e:	6996      	ldr	r6, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba0:	f7ff fed2 	bl	8001948 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ba4:	6822      	ldr	r2, [r4, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba6:	2001      	movs	r0, #1
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ba8:	69a9      	ldr	r1, [r5, #24]
  (heth->Instance)->DMAOMR = tmpreg1;
 8001baa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001bae:	68ab      	ldr	r3, [r5, #8]
  (heth->Instance)->DMAOMR = tmpreg1;
 8001bb0:	6196      	str	r6, [r2, #24]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001bb2:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001bb4:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001bb8:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8001bbc:	6929      	ldr	r1, [r5, #16]
 8001bbe:	430b      	orrs	r3, r1
 8001bc0:	6829      	ldr	r1, [r5, #0]
 8001bc2:	430b      	orrs	r3, r1
 8001bc4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001bc6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001bca:	7929      	ldrb	r1, [r5, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001bcc:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001bd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bd4:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 8001bd6:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bd8:	f7ff feb6 	bl	8001948 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be2:	601d      	str	r5, [r3, #0]
}
 8001be4:	bd70      	pop	{r4, r5, r6, pc}
 8001be6:	bf00      	nop
 8001be8:	f8de3f23 	.word	0xf8de3f23

08001bec <HAL_ETH_Init>:
{
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (heth == NULL)
 8001bee:	4604      	mov	r4, r0
{
 8001bf0:	b0a7      	sub	sp, #156	; 0x9c
  if (heth == NULL)
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	f000 80e9 	beq.w	8001dca <HAL_ETH_Init+0x1de>
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001bf8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001bfc:	b923      	cbnz	r3, 8001c08 <HAL_ETH_Init+0x1c>
    heth->gState = HAL_ETH_STATE_BUSY;
 8001bfe:	2323      	movs	r3, #35	; 0x23
 8001c00:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 8001c04:	f7ff fc8e 	bl	8001524 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c08:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <HAL_ETH_Init+0x1ec>)
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c0a:	68a1      	ldr	r1, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c12:	645a      	str	r2, [r3, #68]	; 0x44
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c1e:	4b6f      	ldr	r3, [pc, #444]	; (8001ddc <HAL_ETH_Init+0x1f0>)
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001c26:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 8001c2e:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001c30:	6823      	ldr	r3, [r4, #0]
 8001c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001c3e:	f7ff fe7d 	bl	800193c <HAL_GetTick>
 8001c42:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4a:	681d      	ldr	r5, [r3, #0]
 8001c4c:	f015 0501 	ands.w	r5, r5, #1
 8001c50:	f040 80ae 	bne.w	8001db0 <HAL_ETH_Init+0x1c4>
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
  macDefaultConf.ReceiveOwn = ENABLE;
  macDefaultConf.LoopbackMode = DISABLE;
  macDefaultConf.CRCStripTypePacket = ENABLE;
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c54:	2601      	movs	r6, #1
  macDefaultConf.ZeroQuantaPause = DISABLE;
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
  macDefaultConf.ReceiveFlowControl = DISABLE;
  macDefaultConf.TransmitFlowControl = DISABLE;
  macDefaultConf.Speed = ETH_SPEED_100M;
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  macDefaultConf.Watchdog = ENABLE;
 8001c5a:	f240 1701 	movw	r7, #257	; 0x101
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  macDefaultConf.UnicastPausePacketDetect = DISABLE;

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c62:	a90d      	add	r1, sp, #52	; 0x34
 8001c64:	4620      	mov	r0, r4
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c66:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c6a:	f8ad 6052 	strh.w	r6, [sp, #82]	; 0x52
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c6e:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001c72:	950f      	str	r5, [sp, #60]	; 0x3c
  macDefaultConf.LoopbackMode = DISABLE;
 8001c74:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
  macDefaultConf.RetryTransmission = DISABLE;
 8001c78:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
  macDefaultConf.Watchdog = ENABLE;
 8001c7c:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c80:	9516      	str	r5, [sp, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001c82:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001c86:	951f      	str	r5, [sp, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001c88:	f88d 5080 	strb.w	r5, [sp, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001c8c:	9521      	str	r5, [sp, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c8e:	f8ad 5088 	strh.w	r5, [sp, #136]	; 0x88
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c92:	f88d 508a 	strb.w	r5, [sp, #138]	; 0x8a
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c96:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c9a:	f7ff fedf 	bl	8001a5c <ETH_SetMACConfig>
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
  dmaDefaultConf.SecondFrameOperate = ENABLE;
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	a902      	add	r1, sp, #8
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ca6:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001cac:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001cb0:	f88d 6016 	strb.w	r6, [sp, #22]
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001cb4:	f8ad 7014 	strh.w	r7, [sp, #20]
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001cb8:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001cbc:	950a      	str	r5, [sp, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001cbe:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001cc2:	950c      	str	r5, [sp, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001cc4:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001cc6:	e9cd 3506 	strd	r3, r5, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001cca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cce:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001cd8:	f7ff ff36 	bl	8001b48 <ETH_SetDMAConfig>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001cdc:	68e6      	ldr	r6, [r4, #12]
 8001cde:	f104 0c14 	add.w	ip, r4, #20
 8001ce2:	462a      	mov	r2, r5
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001ce4:	4628      	mov	r0, r5
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ce6:	4633      	mov	r3, r6
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001ce8:	6018      	str	r0, [r3, #0]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001cea:	4619      	mov	r1, r3
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001cec:	6058      	str	r0, [r3, #4]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001cee:	2a03      	cmp	r2, #3
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001cf0:	6098      	str	r0, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001cf2:	60d8      	str	r0, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001cf4:	f84c 3f04 	str.w	r3, [ip, #4]!
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001cf8:	681f      	ldr	r7, [r3, #0]
 8001cfa:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
 8001cfe:	f841 7b28 	str.w	r7, [r1], #40
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d02:	d064      	beq.n	8001dce <HAL_ETH_Init+0x1e2>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d04:	60d9      	str	r1, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d06:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d08:	3201      	adds	r2, #1
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d0a:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d0e:	2a04      	cmp	r2, #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d10:	601f      	str	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d12:	460b      	mov	r3, r1
 8001d14:	d1e8      	bne.n	8001ce8 <HAL_ETH_Init+0xfc>
  }

  heth->TxDescList.CurTxDesc = 0;

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001d16:	6822      	ldr	r2, [r4, #0]
  heth->TxDescList.CurTxDesc = 0;
 8001d18:	2100      	movs	r1, #0
 8001d1a:	f104 0c44 	add.w	ip, r4, #68	; 0x44
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001d1e:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001d22:	f502 5780 	add.w	r7, r2, #4096	; 0x1000
  heth->TxDescList.CurTxDesc = 0;
 8001d26:	62a1      	str	r1, [r4, #40]	; 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001d28:	613e      	str	r6, [r7, #16]
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001d2a:	6926      	ldr	r6, [r4, #16]
 8001d2c:	4633      	mov	r3, r6
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d2e:	6019      	str	r1, [r3, #0]
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001d30:	2d03      	cmp	r5, #3
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001d32:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001d34:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001d36:	60d9      	str	r1, [r3, #12]
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001d38:	f8c3 e000 	str.w	lr, [r3]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001d3c:	e9c3 1108 	strd	r1, r1, [r3, #32]
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001d40:	6960      	ldr	r0, [r4, #20]
 8001d42:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8001d46:	6058      	str	r0, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001d48:	6858      	ldr	r0, [r3, #4]
 8001d4a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001d4e:	6058      	str	r0, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d50:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8001d54:	f84c 3f04 	str.w	r3, [ip, #4]!
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001d58:	d03b      	beq.n	8001dd2 <HAL_ETH_Init+0x1e6>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001d5a:	60d8      	str	r0, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d5c:	3501      	adds	r5, #1
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2d04      	cmp	r5, #4
 8001d62:	d1e4      	bne.n	8001d2e <HAL_ETH_Init+0x142>
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d64:	6861      	ldr	r1, [r4, #4]
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001d66:	2000      	movs	r0, #0
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_ETH_Init+0x1f4>)
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001d6a:	65a0      	str	r0, [r4, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001d6c:	e9c4 0017 	strd	r0, r0, [r4, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001d70:	e9c4 001a 	strd	r0, r0, [r4, #104]	; 0x68

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001d74:	60fe      	str	r6, [r7, #12]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001d76:	888d      	ldrh	r5, [r1, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001d78:	641d      	str	r5, [r3, #64]	; 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001d7a:	6809      	ldr	r1, [r1, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001d7c:	6459      	str	r1, [r3, #68]	; 0x44
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001d7e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001d80:	f443 7302 	orr.w	r3, r3, #520	; 0x208
 8001d84:	63d3      	str	r3, [r2, #60]	; 0x3c
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001d86:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8001d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d92:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001d96:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
 8001d9a:	f443 1303 	orr.w	r3, r3, #2146304	; 0x20c000
 8001d9e:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  heth->gState = HAL_ETH_STATE_READY;
 8001da2:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001da4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001da8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8001dac:	b027      	add	sp, #156	; 0x9c
 8001dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001db0:	f7ff fdc4 	bl	800193c <HAL_GetTick>
 8001db4:	1b80      	subs	r0, r0, r6
 8001db6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001dba:	f67f af43 	bls.w	8001c44 <HAL_ETH_Init+0x58>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8001dc4:	23e0      	movs	r3, #224	; 0xe0
 8001dc6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_ERROR;
 8001dca:	2001      	movs	r0, #1
 8001dcc:	e7ee      	b.n	8001dac <HAL_ETH_Init+0x1c0>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001dce:	60de      	str	r6, [r3, #12]
 8001dd0:	e799      	b.n	8001d06 <HAL_ETH_Init+0x11a>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001dd2:	60de      	str	r6, [r3, #12]
 8001dd4:	e7c2      	b.n	8001d5c <HAL_ETH_Init+0x170>
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40013800 	.word	0x40013800
 8001de0:	40028000 	.word	0x40028000

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001de8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8001fa4 <HAL_GPIO_Init+0x1c0>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dee:	4a6b      	ldr	r2, [pc, #428]	; (8001f9c <HAL_GPIO_Init+0x1b8>)
    ioposition = ((uint32_t)0x01) << position;
 8001df0:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df2:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8001df4:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df6:	ea04 0c05 	and.w	ip, r4, r5
    if (iocurrent == ioposition)
 8001dfa:	43ac      	bics	r4, r5
 8001dfc:	f040 80b4 	bne.w	8001f68 <HAL_GPIO_Init+0x184>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e00:	684d      	ldr	r5, [r1, #4]
 8001e02:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e06:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e08:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e0c:	fa06 f608 	lsl.w	r6, r6, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e10:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e12:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e14:	2f01      	cmp	r7, #1
 8001e16:	d834      	bhi.n	8001e82 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 8001e18:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e1a:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e1e:	68cf      	ldr	r7, [r1, #12]
 8001e20:	fa07 f708 	lsl.w	r7, r7, r8
 8001e24:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001e28:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e2a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e2c:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e30:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001e34:	409f      	lsls	r7, r3
 8001e36:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001e3a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001e3c:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3e:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e40:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e44:	688f      	ldr	r7, [r1, #8]
 8001e46:	fa07 f708 	lsl.w	r7, r7, r8
 8001e4a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001e4e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e50:	d119      	bne.n	8001e86 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8001e52:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e56:	f003 0b07 	and.w	fp, r3, #7
 8001e5a:	f04f 0e0f 	mov.w	lr, #15
 8001e5e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001e62:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001e66:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e6a:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001e6e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e72:	690f      	ldr	r7, [r1, #16]
 8001e74:	fa07 f70b 	lsl.w	r7, r7, fp
 8001e78:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8001e7c:	f8ca 7020 	str.w	r7, [sl, #32]
 8001e80:	e001      	b.n	8001e86 <HAL_GPIO_Init+0xa2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e82:	2c03      	cmp	r4, #3
 8001e84:	d1da      	bne.n	8001e3c <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8001e86:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e88:	fa04 f408 	lsl.w	r4, r4, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e8c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e90:	ea07 0706 	and.w	r7, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e94:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8001e98:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e9a:	d065      	beq.n	8001f68 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9c:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8001ea0:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ea4:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001eac:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001eb0:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb2:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8001eb6:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8001eba:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8001ebe:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8001ec2:	9401      	str	r4, [sp, #4]
 8001ec4:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ec6:	240f      	movs	r4, #15
        temp = SYSCFG->EXTICR[position >> 2];
 8001ec8:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ecc:	40bc      	lsls	r4, r7
 8001ece:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ed2:	4c33      	ldr	r4, [pc, #204]	; (8001fa0 <HAL_GPIO_Init+0x1bc>)
 8001ed4:	42a0      	cmp	r0, r4
 8001ed6:	d04e      	beq.n	8001f76 <HAL_GPIO_Init+0x192>
 8001ed8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001edc:	42a0      	cmp	r0, r4
 8001ede:	d04c      	beq.n	8001f7a <HAL_GPIO_Init+0x196>
 8001ee0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ee4:	42a0      	cmp	r0, r4
 8001ee6:	d04a      	beq.n	8001f7e <HAL_GPIO_Init+0x19a>
 8001ee8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001eec:	42a0      	cmp	r0, r4
 8001eee:	d048      	beq.n	8001f82 <HAL_GPIO_Init+0x19e>
 8001ef0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ef4:	42a0      	cmp	r0, r4
 8001ef6:	d046      	beq.n	8001f86 <HAL_GPIO_Init+0x1a2>
 8001ef8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001efc:	42a0      	cmp	r0, r4
 8001efe:	d044      	beq.n	8001f8a <HAL_GPIO_Init+0x1a6>
 8001f00:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f04:	42a0      	cmp	r0, r4
 8001f06:	d042      	beq.n	8001f8e <HAL_GPIO_Init+0x1aa>
 8001f08:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f0c:	42a0      	cmp	r0, r4
 8001f0e:	d040      	beq.n	8001f92 <HAL_GPIO_Init+0x1ae>
 8001f10:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f14:	42a0      	cmp	r0, r4
 8001f16:	d03e      	beq.n	8001f96 <HAL_GPIO_Init+0x1b2>
 8001f18:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f1c:	42a0      	cmp	r0, r4
 8001f1e:	bf0c      	ite	eq
 8001f20:	2409      	moveq	r4, #9
 8001f22:	240a      	movne	r4, #10
 8001f24:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f26:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f28:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f2c:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f2e:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8001f32:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	bf54      	ite	pl
 8001f36:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001f38:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f3c:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8001f3e:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8001f40:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	bf54      	ite	pl
 8001f44:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001f46:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f4a:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8001f4c:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8001f4e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001f50:	bf54      	ite	pl
 8001f52:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001f54:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f58:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8001f5a:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8001f5c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	bf54      	ite	pl
 8001f60:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001f62:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001f66:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001f68:	3301      	adds	r3, #1
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	f47f af40 	bne.w	8001df0 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001f70:	b003      	add	sp, #12
 8001f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f76:	2400      	movs	r4, #0
 8001f78:	e7d4      	b.n	8001f24 <HAL_GPIO_Init+0x140>
 8001f7a:	2401      	movs	r4, #1
 8001f7c:	e7d2      	b.n	8001f24 <HAL_GPIO_Init+0x140>
 8001f7e:	2402      	movs	r4, #2
 8001f80:	e7d0      	b.n	8001f24 <HAL_GPIO_Init+0x140>
 8001f82:	2403      	movs	r4, #3
 8001f84:	e7ce      	b.n	8001f24 <HAL_GPIO_Init+0x140>
 8001f86:	2404      	movs	r4, #4
 8001f88:	e7cc      	b.n	8001f24 <HAL_GPIO_Init+0x140>
 8001f8a:	2405      	movs	r4, #5
 8001f8c:	e7ca      	b.n	8001f24 <HAL_GPIO_Init+0x140>
 8001f8e:	2406      	movs	r4, #6
 8001f90:	e7c8      	b.n	8001f24 <HAL_GPIO_Init+0x140>
 8001f92:	2407      	movs	r4, #7
 8001f94:	e7c6      	b.n	8001f24 <HAL_GPIO_Init+0x140>
 8001f96:	2408      	movs	r4, #8
 8001f98:	e7c4      	b.n	8001f24 <HAL_GPIO_Init+0x140>
 8001f9a:	bf00      	nop
 8001f9c:	40013c00 	.word	0x40013c00
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	40023800 	.word	0x40023800

08001fa8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa8:	b10a      	cbz	r2, 8001fae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001faa:	6181      	str	r1, [r0, #24]
  }
}
 8001fac:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fae:	0409      	lsls	r1, r1, #16
 8001fb0:	e7fb      	b.n	8001faa <HAL_GPIO_WritePin+0x2>

08001fb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	b318      	cbz	r0, 8002000 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fb8:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
  USBx = hpcd->Instance;
 8001fbc:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fbe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fc2:	b91b      	cbnz	r3, 8001fcc <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fc4:	f880 2494 	strb.w	r2, [r0, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fc8:	f7ff fb96 	bl	80016f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fcc:	2303      	movs	r3, #3

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001fce:	f1b5 4fa0 	cmp.w	r5, #1342177280	; 0x50000000
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fd2:	6820      	ldr	r0, [r4, #0]

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fd4:	f104 0504 	add.w	r5, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fd8:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
    hpcd->Init.dma_enable = 0U;
 8001fdc:	bf04      	itt	eq
 8001fde:	2300      	moveq	r3, #0
 8001fe0:	71a3      	strbeq	r3, [r4, #6]
  __HAL_PCD_DISABLE(hpcd);
 8001fe2:	f001 fbdf 	bl	80037a4 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fe6:	7c23      	ldrb	r3, [r4, #16]
 8001fe8:	f88d 3000 	strb.w	r3, [sp]
 8001fec:	6820      	ldr	r0, [r4, #0]
 8001fee:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001ff2:	f001 fb99 	bl	8003728 <USB_CoreInit>
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	b120      	cbz	r0, 8002004 <HAL_PCD_Init+0x52>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
    return HAL_ERROR;
 8002000:	2501      	movs	r5, #1
 8002002:	e04a      	b.n	800209a <HAL_PCD_Init+0xe8>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002004:	6820      	ldr	r0, [r4, #0]
 8002006:	f001 fbd3 	bl	80037b0 <USB_SetCurrentMode>
 800200a:	2800      	cmp	r0, #0
 800200c:	d1f5      	bne.n	8001ffa <HAL_PCD_Init+0x48>
    return HAL_ERROR;
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200e:	7926      	ldrb	r6, [r4, #4]
 8002010:	f104 0314 	add.w	r3, r4, #20
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002014:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002016:	4602      	mov	r2, r0
 8002018:	b2c1      	uxtb	r1, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201a:	3324      	adds	r3, #36	; 0x24
 800201c:	428e      	cmp	r6, r1
 800201e:	d816      	bhi.n	800204e <HAL_PCD_Init+0x9c>
 8002020:	2100      	movs	r1, #0
 8002022:	f504 7315 	add.w	r3, r4, #596	; 0x254
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002026:	460a      	mov	r2, r1
 8002028:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202a:	3324      	adds	r3, #36	; 0x24
 800202c:	4286      	cmp	r6, r0
 800202e:	d81c      	bhi.n	800206a <HAL_PCD_Init+0xb8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002030:	7c23      	ldrb	r3, [r4, #16]
 8002032:	f88d 3000 	strb.w	r3, [sp]
 8002036:	6820      	ldr	r0, [r4, #0]
 8002038:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800203c:	f001 fc32 	bl	80038a4 <USB_DevInit>
 8002040:	2301      	movs	r3, #1
 8002042:	4605      	mov	r5, r0
 8002044:	b1e8      	cbz	r0, 8002082 <HAL_PCD_Init+0xd0>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002046:	2202      	movs	r2, #2
 8002048:	f884 2495 	strb.w	r2, [r4, #1173]	; 0x495
    return HAL_ERROR;
 800204c:	e7d8      	b.n	8002000 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].tx_fifo_num = i;
 800204e:	f823 0c0a 	strh.w	r0, [r3, #-10]
 8002052:	3001      	adds	r0, #1
    hpcd->IN_ep[i].is_in = 1U;
 8002054:	f803 7c23 	strb.w	r7, [r3, #-35]
    hpcd->IN_ep[i].num = i;
 8002058:	f803 1c24 	strb.w	r1, [r3, #-36]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800205c:	f803 2c20 	strb.w	r2, [r3, #-32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002060:	f843 2c14 	str.w	r2, [r3, #-20]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002064:	e943 2207 	strd	r2, r2, [r3, #-28]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002068:	e7d6      	b.n	8002018 <HAL_PCD_Init+0x66>
    hpcd->OUT_ep[i].is_in = 0U;
 800206a:	3101      	adds	r1, #1
 800206c:	f803 2c23 	strb.w	r2, [r3, #-35]
    hpcd->OUT_ep[i].num = i;
 8002070:	f803 0c24 	strb.w	r0, [r3, #-36]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002074:	f803 2c20 	strb.w	r2, [r3, #-32]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002078:	f843 2c14 	str.w	r2, [r3, #-20]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800207c:	e943 2207 	strd	r2, r2, [r3, #-28]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002080:	e7d2      	b.n	8002028 <HAL_PCD_Init+0x76>
  }

  hpcd->USB_Address = 0U;
 8002082:	7460      	strb	r0, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002084:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002088:	7b23      	ldrb	r3, [r4, #12]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d102      	bne.n	8002094 <HAL_PCD_Init+0xe2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800208e:	4620      	mov	r0, r4
 8002090:	f000 f806 	bl	80020a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002094:	6820      	ldr	r0, [r4, #0]
 8002096:	f001 fcbd 	bl	8003a14 <USB_DevDisconnect>

  return HAL_OK;
}
 800209a:	4628      	mov	r0, r5
 800209c:	b003      	add	sp, #12
 800209e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020a0 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020a0:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 80020a2:	2100      	movs	r1, #0
  hpcd->lpm_active = 1U;
 80020a4:	2301      	movs	r3, #1
  hpcd->LPM_State = LPM_L0;
 80020a6:	f880 14cc 	strb.w	r1, [r0, #1228]	; 0x4cc
  hpcd->lpm_active = 1U;
 80020aa:	f8c0 34d8 	str.w	r3, [r0, #1240]	; 0x4d8
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);

  return HAL_OK;
}
 80020ae:	4608      	mov	r0, r1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020b0:	6993      	ldr	r3, [r2, #24]
 80020b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020b6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020b8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80020ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020be:	f043 0303 	orr.w	r3, r3, #3
 80020c2:	6553      	str	r3, [r2, #84]	; 0x54
}
 80020c4:	4770      	bx	lr
	...

080020c8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c8:	4a02      	ldr	r2, [pc, #8]	; (80020d4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d0:	6013      	str	r3, [r2, #0]
}
 80020d2:	4770      	bx	lr
 80020d4:	40007000 	.word	0x40007000

080020d8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80020da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80020dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020de:	4c19      	ldr	r4, [pc, #100]	; (8002144 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f8:	f7ff fc20 	bl	800193c <HAL_GetTick>
 80020fc:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020fe:	6863      	ldr	r3, [r4, #4]
 8002100:	03da      	lsls	r2, r3, #15
 8002102:	d50c      	bpl.n	800211e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002104:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002106:	4d0f      	ldr	r5, [pc, #60]	; (8002144 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800210e:	f7ff fc15 	bl	800193c <HAL_GetTick>
 8002112:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002114:	686b      	ldr	r3, [r5, #4]
 8002116:	039b      	lsls	r3, r3, #14
 8002118:	d50a      	bpl.n	8002130 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800211a:	2000      	movs	r0, #0
 800211c:	e006      	b.n	800212c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800211e:	f7ff fc0d 	bl	800193c <HAL_GetTick>
 8002122:	1b40      	subs	r0, r0, r5
 8002124:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002128:	d9e9      	bls.n	80020fe <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800212a:	2003      	movs	r0, #3
}
 800212c:	b003      	add	sp, #12
 800212e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002130:	f7ff fc04 	bl	800193c <HAL_GetTick>
 8002134:	1b00      	subs	r0, r0, r4
 8002136:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800213a:	d9eb      	bls.n	8002114 <HAL_PWREx_EnableOverDrive+0x3c>
 800213c:	e7f5      	b.n	800212a <HAL_PWREx_EnableOverDrive+0x52>
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	40007000 	.word	0x40007000

08002148 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002148:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800214c:	4604      	mov	r4, r0
 800214e:	b340      	cbz	r0, 80021a2 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002150:	6803      	ldr	r3, [r0, #0]
 8002152:	07db      	lsls	r3, r3, #31
 8002154:	d410      	bmi.n	8002178 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	079f      	lsls	r7, r3, #30
 800215a:	d461      	bmi.n	8002220 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215c:	6823      	ldr	r3, [r4, #0]
 800215e:	0719      	lsls	r1, r3, #28
 8002160:	f100 80a6 	bmi.w	80022b0 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	075a      	lsls	r2, r3, #29
 8002168:	f100 80c7 	bmi.w	80022fa <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800216c:	69a2      	ldr	r2, [r4, #24]
 800216e:	2a00      	cmp	r2, #0
 8002170:	f040 8130 	bne.w	80023d4 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002174:	2000      	movs	r0, #0
 8002176:	e02c      	b.n	80021d2 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002178:	4b94      	ldr	r3, [pc, #592]	; (80023cc <HAL_RCC_OscConfig+0x284>)
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	f002 020c 	and.w	r2, r2, #12
 8002180:	2a04      	cmp	r2, #4
 8002182:	d007      	beq.n	8002194 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	f002 020c 	and.w	r2, r2, #12
 800218a:	2a08      	cmp	r2, #8
 800218c:	d10b      	bne.n	80021a6 <HAL_RCC_OscConfig+0x5e>
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	025e      	lsls	r6, r3, #9
 8002192:	d508      	bpl.n	80021a6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	4b8d      	ldr	r3, [pc, #564]	; (80023cc <HAL_RCC_OscConfig+0x284>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	039d      	lsls	r5, r3, #14
 800219a:	d5dc      	bpl.n	8002156 <HAL_RCC_OscConfig+0xe>
 800219c:	6863      	ldr	r3, [r4, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1d9      	bne.n	8002156 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 80021a2:	2001      	movs	r0, #1
 80021a4:	e015      	b.n	80021d2 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a6:	6863      	ldr	r3, [r4, #4]
 80021a8:	4d88      	ldr	r5, [pc, #544]	; (80023cc <HAL_RCC_OscConfig+0x284>)
 80021aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ae:	d113      	bne.n	80021d8 <HAL_RCC_OscConfig+0x90>
 80021b0:	682b      	ldr	r3, [r5, #0]
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80021b8:	f7ff fbc0 	bl	800193c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021bc:	4e83      	ldr	r6, [pc, #524]	; (80023cc <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 80021be:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c0:	6833      	ldr	r3, [r6, #0]
 80021c2:	0398      	lsls	r0, r3, #14
 80021c4:	d4c7      	bmi.n	8002156 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c6:	f7ff fbb9 	bl	800193c <HAL_GetTick>
 80021ca:	1b40      	subs	r0, r0, r5
 80021cc:	2864      	cmp	r0, #100	; 0x64
 80021ce:	d9f7      	bls.n	80021c0 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80021d0:	2003      	movs	r0, #3
}
 80021d2:	b002      	add	sp, #8
 80021d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d8:	b99b      	cbnz	r3, 8002202 <HAL_RCC_OscConfig+0xba>
 80021da:	682b      	ldr	r3, [r5, #0]
 80021dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e0:	602b      	str	r3, [r5, #0]
 80021e2:	682b      	ldr	r3, [r5, #0]
 80021e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80021ea:	f7ff fba7 	bl	800193c <HAL_GetTick>
 80021ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f0:	682b      	ldr	r3, [r5, #0]
 80021f2:	0399      	lsls	r1, r3, #14
 80021f4:	d5af      	bpl.n	8002156 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f6:	f7ff fba1 	bl	800193c <HAL_GetTick>
 80021fa:	1b80      	subs	r0, r0, r6
 80021fc:	2864      	cmp	r0, #100	; 0x64
 80021fe:	d9f7      	bls.n	80021f0 <HAL_RCC_OscConfig+0xa8>
 8002200:	e7e6      	b.n	80021d0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002202:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002206:	682b      	ldr	r3, [r5, #0]
 8002208:	d103      	bne.n	8002212 <HAL_RCC_OscConfig+0xca>
 800220a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220e:	602b      	str	r3, [r5, #0]
 8002210:	e7ce      	b.n	80021b0 <HAL_RCC_OscConfig+0x68>
 8002212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002216:	602b      	str	r3, [r5, #0]
 8002218:	682b      	ldr	r3, [r5, #0]
 800221a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221e:	e7ca      	b.n	80021b6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002220:	4b6a      	ldr	r3, [pc, #424]	; (80023cc <HAL_RCC_OscConfig+0x284>)
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	f012 0f0c 	tst.w	r2, #12
 8002228:	d007      	beq.n	800223a <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	f002 020c 	and.w	r2, r2, #12
 8002230:	2a08      	cmp	r2, #8
 8002232:	d111      	bne.n	8002258 <HAL_RCC_OscConfig+0x110>
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	025a      	lsls	r2, r3, #9
 8002238:	d40e      	bmi.n	8002258 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	4a64      	ldr	r2, [pc, #400]	; (80023cc <HAL_RCC_OscConfig+0x284>)
 800223c:	6813      	ldr	r3, [r2, #0]
 800223e:	079b      	lsls	r3, r3, #30
 8002240:	d502      	bpl.n	8002248 <HAL_RCC_OscConfig+0x100>
 8002242:	68e3      	ldr	r3, [r4, #12]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d1ac      	bne.n	80021a2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	6813      	ldr	r3, [r2, #0]
 800224a:	6921      	ldr	r1, [r4, #16]
 800224c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002250:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002254:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002256:	e781      	b.n	800215c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002258:	68e3      	ldr	r3, [r4, #12]
 800225a:	4d5c      	ldr	r5, [pc, #368]	; (80023cc <HAL_RCC_OscConfig+0x284>)
 800225c:	b1bb      	cbz	r3, 800228e <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 800225e:	682b      	ldr	r3, [r5, #0]
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002266:	f7ff fb69 	bl	800193c <HAL_GetTick>
 800226a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	682b      	ldr	r3, [r5, #0]
 800226e:	079f      	lsls	r7, r3, #30
 8002270:	d507      	bpl.n	8002282 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002272:	682b      	ldr	r3, [r5, #0]
 8002274:	6922      	ldr	r2, [r4, #16]
 8002276:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800227a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800227e:	602b      	str	r3, [r5, #0]
 8002280:	e76c      	b.n	800215c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002282:	f7ff fb5b 	bl	800193c <HAL_GetTick>
 8002286:	1b80      	subs	r0, r0, r6
 8002288:	2802      	cmp	r0, #2
 800228a:	d9ef      	bls.n	800226c <HAL_RCC_OscConfig+0x124>
 800228c:	e7a0      	b.n	80021d0 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800228e:	682b      	ldr	r3, [r5, #0]
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002296:	f7ff fb51 	bl	800193c <HAL_GetTick>
 800229a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229c:	682b      	ldr	r3, [r5, #0]
 800229e:	0798      	lsls	r0, r3, #30
 80022a0:	f57f af5c 	bpl.w	800215c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a4:	f7ff fb4a 	bl	800193c <HAL_GetTick>
 80022a8:	1b80      	subs	r0, r0, r6
 80022aa:	2802      	cmp	r0, #2
 80022ac:	d9f6      	bls.n	800229c <HAL_RCC_OscConfig+0x154>
 80022ae:	e78f      	b.n	80021d0 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022b0:	6963      	ldr	r3, [r4, #20]
 80022b2:	4d46      	ldr	r5, [pc, #280]	; (80023cc <HAL_RCC_OscConfig+0x284>)
 80022b4:	b183      	cbz	r3, 80022d8 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 80022b6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80022be:	f7ff fb3d 	bl	800193c <HAL_GetTick>
 80022c2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80022c6:	079b      	lsls	r3, r3, #30
 80022c8:	f53f af4c 	bmi.w	8002164 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022cc:	f7ff fb36 	bl	800193c <HAL_GetTick>
 80022d0:	1b80      	subs	r0, r0, r6
 80022d2:	2802      	cmp	r0, #2
 80022d4:	d9f6      	bls.n	80022c4 <HAL_RCC_OscConfig+0x17c>
 80022d6:	e77b      	b.n	80021d0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80022d8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80022da:	f023 0301 	bic.w	r3, r3, #1
 80022de:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80022e0:	f7ff fb2c 	bl	800193c <HAL_GetTick>
 80022e4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80022e8:	079f      	lsls	r7, r3, #30
 80022ea:	f57f af3b 	bpl.w	8002164 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ee:	f7ff fb25 	bl	800193c <HAL_GetTick>
 80022f2:	1b80      	subs	r0, r0, r6
 80022f4:	2802      	cmp	r0, #2
 80022f6:	d9f6      	bls.n	80022e6 <HAL_RCC_OscConfig+0x19e>
 80022f8:	e76a      	b.n	80021d0 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fa:	4b34      	ldr	r3, [pc, #208]	; (80023cc <HAL_RCC_OscConfig+0x284>)
 80022fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fe:	00d0      	lsls	r0, r2, #3
 8002300:	d427      	bmi.n	8002352 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8002304:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800230a:	641a      	str	r2, [r3, #64]	; 0x40
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002316:	4d2e      	ldr	r5, [pc, #184]	; (80023d0 <HAL_RCC_OscConfig+0x288>)
 8002318:	682b      	ldr	r3, [r5, #0]
 800231a:	05d9      	lsls	r1, r3, #23
 800231c:	d51b      	bpl.n	8002356 <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231e:	68a3      	ldr	r3, [r4, #8]
 8002320:	4d2a      	ldr	r5, [pc, #168]	; (80023cc <HAL_RCC_OscConfig+0x284>)
 8002322:	2b01      	cmp	r3, #1
 8002324:	d127      	bne.n	8002376 <HAL_RCC_OscConfig+0x22e>
 8002326:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002332:	f7ff fb03 	bl	800193c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002336:	4e25      	ldr	r6, [pc, #148]	; (80023cc <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8002338:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800233c:	079b      	lsls	r3, r3, #30
 800233e:	d53f      	bpl.n	80023c0 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8002340:	2f00      	cmp	r7, #0
 8002342:	f43f af13 	beq.w	800216c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002346:	4a21      	ldr	r2, [pc, #132]	; (80023cc <HAL_RCC_OscConfig+0x284>)
 8002348:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800234a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234e:	6413      	str	r3, [r2, #64]	; 0x40
 8002350:	e70c      	b.n	800216c <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8002352:	2700      	movs	r7, #0
 8002354:	e7df      	b.n	8002316 <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 8002356:	682b      	ldr	r3, [r5, #0]
 8002358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800235e:	f7ff faed 	bl	800193c <HAL_GetTick>
 8002362:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	05da      	lsls	r2, r3, #23
 8002368:	d4d9      	bmi.n	800231e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236a:	f7ff fae7 	bl	800193c <HAL_GetTick>
 800236e:	1b80      	subs	r0, r0, r6
 8002370:	2864      	cmp	r0, #100	; 0x64
 8002372:	d9f7      	bls.n	8002364 <HAL_RCC_OscConfig+0x21c>
 8002374:	e72c      	b.n	80021d0 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002376:	b9ab      	cbnz	r3, 80023a4 <HAL_RCC_OscConfig+0x25c>
 8002378:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	672b      	str	r3, [r5, #112]	; 0x70
 8002384:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002386:	f023 0304 	bic.w	r3, r3, #4
 800238a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800238c:	f7ff fad6 	bl	800193c <HAL_GetTick>
 8002390:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002392:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002394:	0798      	lsls	r0, r3, #30
 8002396:	d5d3      	bpl.n	8002340 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7ff fad0 	bl	800193c <HAL_GetTick>
 800239c:	1b80      	subs	r0, r0, r6
 800239e:	4540      	cmp	r0, r8
 80023a0:	d9f7      	bls.n	8002392 <HAL_RCC_OscConfig+0x24a>
 80023a2:	e715      	b.n	80021d0 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80023a8:	d103      	bne.n	80023b2 <HAL_RCC_OscConfig+0x26a>
 80023aa:	f043 0304 	orr.w	r3, r3, #4
 80023ae:	672b      	str	r3, [r5, #112]	; 0x70
 80023b0:	e7b9      	b.n	8002326 <HAL_RCC_OscConfig+0x1de>
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	672b      	str	r3, [r5, #112]	; 0x70
 80023b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80023ba:	f023 0304 	bic.w	r3, r3, #4
 80023be:	e7b5      	b.n	800232c <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c0:	f7ff fabc 	bl	800193c <HAL_GetTick>
 80023c4:	1b40      	subs	r0, r0, r5
 80023c6:	4540      	cmp	r0, r8
 80023c8:	d9b7      	bls.n	800233a <HAL_RCC_OscConfig+0x1f2>
 80023ca:	e701      	b.n	80021d0 <HAL_RCC_OscConfig+0x88>
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d4:	4d38      	ldr	r5, [pc, #224]	; (80024b8 <HAL_RCC_OscConfig+0x370>)
 80023d6:	68ab      	ldr	r3, [r5, #8]
 80023d8:	f003 030c 	and.w	r3, r3, #12
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d041      	beq.n	8002464 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 80023e0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80023e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023e8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ea:	d12e      	bne.n	800244a <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 80023ec:	f7ff faa6 	bl	800193c <HAL_GetTick>
 80023f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	682b      	ldr	r3, [r5, #0]
 80023f4:	0199      	lsls	r1, r3, #6
 80023f6:	d422      	bmi.n	800243e <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023fa:	085b      	lsrs	r3, r3, #1
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002402:	430b      	orrs	r3, r1
 8002404:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002408:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800240a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800240e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002410:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002418:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800241a:	682b      	ldr	r3, [r5, #0]
 800241c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002420:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002422:	f7ff fa8b 	bl	800193c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002426:	4d24      	ldr	r5, [pc, #144]	; (80024b8 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 8002428:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242a:	682b      	ldr	r3, [r5, #0]
 800242c:	019a      	lsls	r2, r3, #6
 800242e:	f53f aea1 	bmi.w	8002174 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002432:	f7ff fa83 	bl	800193c <HAL_GetTick>
 8002436:	1b00      	subs	r0, r0, r4
 8002438:	2802      	cmp	r0, #2
 800243a:	d9f6      	bls.n	800242a <HAL_RCC_OscConfig+0x2e2>
 800243c:	e6c8      	b.n	80021d0 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243e:	f7ff fa7d 	bl	800193c <HAL_GetTick>
 8002442:	1b80      	subs	r0, r0, r6
 8002444:	2802      	cmp	r0, #2
 8002446:	d9d4      	bls.n	80023f2 <HAL_RCC_OscConfig+0x2aa>
 8002448:	e6c2      	b.n	80021d0 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 800244a:	f7ff fa77 	bl	800193c <HAL_GetTick>
 800244e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002450:	682b      	ldr	r3, [r5, #0]
 8002452:	019b      	lsls	r3, r3, #6
 8002454:	f57f ae8e 	bpl.w	8002174 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7ff fa70 	bl	800193c <HAL_GetTick>
 800245c:	1b00      	subs	r0, r0, r4
 800245e:	2802      	cmp	r0, #2
 8002460:	d9f6      	bls.n	8002450 <HAL_RCC_OscConfig+0x308>
 8002462:	e6b5      	b.n	80021d0 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002464:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8002466:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002468:	f43f ae9b 	beq.w	80021a2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002470:	69e1      	ldr	r1, [r4, #28]
 8002472:	428a      	cmp	r2, r1
 8002474:	f47f ae95 	bne.w	80021a2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002478:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247c:	6a21      	ldr	r1, [r4, #32]
 800247e:	428a      	cmp	r2, r1
 8002480:	f47f ae8f 	bne.w	80021a2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002484:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002488:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800248a:	401a      	ands	r2, r3
 800248c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002490:	f47f ae87 	bne.w	80021a2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002494:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002496:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800249a:	0852      	lsrs	r2, r2, #1
 800249c:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800249e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80024a2:	f47f ae7e 	bne.w	80021a2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024a6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80024aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024ac:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80024b0:	f43f ae60 	beq.w	8002174 <HAL_RCC_OscConfig+0x2c>
 80024b4:	e675      	b.n	80021a2 <HAL_RCC_OscConfig+0x5a>
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800

080024bc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024bc:	4913      	ldr	r1, [pc, #76]	; (800250c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80024be:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024c0:	688b      	ldr	r3, [r1, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d01b      	beq.n	8002502 <HAL_RCC_GetSysClockFreq+0x46>
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d11b      	bne.n	8002506 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024ce:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024d0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d2:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024d4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024d8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024dc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80024e0:	bf1a      	itte	ne
 80024e2:	480b      	ldrne	r0, [pc, #44]	; (8002510 <HAL_RCC_GetSysClockFreq+0x54>)
 80024e4:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e6:	480b      	ldreq	r0, [pc, #44]	; (8002514 <HAL_RCC_GetSysClockFreq+0x58>)
 80024e8:	fba1 0100 	umull	r0, r1, r1, r0
 80024ec:	f7fe fc8a 	bl	8000e04 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_RCC_GetSysClockFreq+0x50>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80024f8:	3301      	adds	r3, #1
 80024fa:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80024fc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002500:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002502:	4803      	ldr	r0, [pc, #12]	; (8002510 <HAL_RCC_GetSysClockFreq+0x54>)
 8002504:	e7fc      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8002506:	4803      	ldr	r0, [pc, #12]	; (8002514 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002508:	e7fa      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x44>
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	007a1200 	.word	0x007a1200
 8002514:	00f42400 	.word	0x00f42400

08002518 <HAL_RCC_ClockConfig>:
{
 8002518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800251c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800251e:	4604      	mov	r4, r0
 8002520:	b910      	cbnz	r0, 8002528 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002522:	2001      	movs	r0, #1
}
 8002524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002528:	4a45      	ldr	r2, [pc, #276]	; (8002640 <HAL_RCC_ClockConfig+0x128>)
 800252a:	6813      	ldr	r3, [r2, #0]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	428b      	cmp	r3, r1
 8002532:	d328      	bcc.n	8002586 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002534:	6821      	ldr	r1, [r4, #0]
 8002536:	078f      	lsls	r7, r1, #30
 8002538:	d430      	bmi.n	800259c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253a:	07c8      	lsls	r0, r1, #31
 800253c:	d443      	bmi.n	80025c6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800253e:	4a40      	ldr	r2, [pc, #256]	; (8002640 <HAL_RCC_ClockConfig+0x128>)
 8002540:	6813      	ldr	r3, [r2, #0]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	42ab      	cmp	r3, r5
 8002548:	d866      	bhi.n	8002618 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254a:	6822      	ldr	r2, [r4, #0]
 800254c:	0751      	lsls	r1, r2, #29
 800254e:	d46f      	bmi.n	8002630 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002550:	0713      	lsls	r3, r2, #28
 8002552:	d507      	bpl.n	8002564 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002554:	4a3b      	ldr	r2, [pc, #236]	; (8002644 <HAL_RCC_ClockConfig+0x12c>)
 8002556:	6921      	ldr	r1, [r4, #16]
 8002558:	6893      	ldr	r3, [r2, #8]
 800255a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800255e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002562:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002564:	f7ff ffaa 	bl	80024bc <HAL_RCC_GetSysClockFreq>
 8002568:	4b36      	ldr	r3, [pc, #216]	; (8002644 <HAL_RCC_ClockConfig+0x12c>)
 800256a:	4a37      	ldr	r2, [pc, #220]	; (8002648 <HAL_RCC_ClockConfig+0x130>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	40d8      	lsrs	r0, r3
 8002576:	4b35      	ldr	r3, [pc, #212]	; (800264c <HAL_RCC_ClockConfig+0x134>)
 8002578:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800257a:	4b35      	ldr	r3, [pc, #212]	; (8002650 <HAL_RCC_ClockConfig+0x138>)
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	f7ff f9a1 	bl	80018c4 <HAL_InitTick>
  return HAL_OK;
 8002582:	2000      	movs	r0, #0
 8002584:	e7ce      	b.n	8002524 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	6813      	ldr	r3, [r2, #0]
 8002588:	f023 030f 	bic.w	r3, r3, #15
 800258c:	430b      	orrs	r3, r1
 800258e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002590:	6813      	ldr	r3, [r2, #0]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	428b      	cmp	r3, r1
 8002598:	d1c3      	bne.n	8002522 <HAL_RCC_ClockConfig+0xa>
 800259a:	e7cb      	b.n	8002534 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	f011 0f04 	tst.w	r1, #4
 80025a0:	4b28      	ldr	r3, [pc, #160]	; (8002644 <HAL_RCC_ClockConfig+0x12c>)
 80025a2:	d003      	beq.n	80025ac <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80025aa:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	070e      	lsls	r6, r1, #28
 80025ae:	d503      	bpl.n	80025b8 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80025b6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	68a0      	ldr	r0, [r4, #8]
 80025bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80025c0:	4302      	orrs	r2, r0
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	e7b9      	b.n	800253a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c6:	6861      	ldr	r1, [r4, #4]
 80025c8:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <HAL_RCC_ClockConfig+0x12c>)
 80025ca:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025cc:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ce:	d11b      	bne.n	8002608 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d4:	d0a5      	beq.n	8002522 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d6:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d8:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025dc:	4f19      	ldr	r7, [pc, #100]	; (8002644 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025de:	f022 0203 	bic.w	r2, r2, #3
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80025e6:	f7ff f9a9 	bl	800193c <HAL_GetTick>
 80025ea:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	6862      	ldr	r2, [r4, #4]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80025f8:	d0a1      	beq.n	800253e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fa:	f7ff f99f 	bl	800193c <HAL_GetTick>
 80025fe:	1b80      	subs	r0, r0, r6
 8002600:	4540      	cmp	r0, r8
 8002602:	d9f3      	bls.n	80025ec <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8002604:	2003      	movs	r0, #3
 8002606:	e78d      	b.n	8002524 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002608:	2902      	cmp	r1, #2
 800260a:	d102      	bne.n	8002612 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002610:	e7e0      	b.n	80025d4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	f012 0f02 	tst.w	r2, #2
 8002616:	e7dd      	b.n	80025d4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002618:	6813      	ldr	r3, [r2, #0]
 800261a:	f023 030f 	bic.w	r3, r3, #15
 800261e:	432b      	orrs	r3, r5
 8002620:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	6813      	ldr	r3, [r2, #0]
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	42ab      	cmp	r3, r5
 800262a:	f47f af7a 	bne.w	8002522 <HAL_RCC_ClockConfig+0xa>
 800262e:	e78c      	b.n	800254a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002630:	4904      	ldr	r1, [pc, #16]	; (8002644 <HAL_RCC_ClockConfig+0x12c>)
 8002632:	68e0      	ldr	r0, [r4, #12]
 8002634:	688b      	ldr	r3, [r1, #8]
 8002636:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800263a:	4303      	orrs	r3, r0
 800263c:	608b      	str	r3, [r1, #8]
 800263e:	e787      	b.n	8002550 <HAL_RCC_ClockConfig+0x38>
 8002640:	40023c00 	.word	0x40023c00
 8002644:	40023800 	.word	0x40023800
 8002648:	0800dec0 	.word	0x0800dec0
 800264c:	2000000c 	.word	0x2000000c
 8002650:	20000014 	.word	0x20000014

08002654 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002654:	4b01      	ldr	r3, [pc, #4]	; (800265c <HAL_RCC_GetHCLKFreq+0x8>)
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	2000000c 	.word	0x2000000c

08002660 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002662:	4a05      	ldr	r2, [pc, #20]	; (8002678 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800266a:	5cd3      	ldrb	r3, [r2, r3]
 800266c:	4a03      	ldr	r2, [pc, #12]	; (800267c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800266e:	6810      	ldr	r0, [r2, #0]
}
 8002670:	40d8      	lsrs	r0, r3
 8002672:	4770      	bx	lr
 8002674:	40023800 	.word	0x40023800
 8002678:	0800ded0 	.word	0x0800ded0
 800267c:	2000000c 	.word	0x2000000c

08002680 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002682:	4a05      	ldr	r2, [pc, #20]	; (8002698 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	4a03      	ldr	r2, [pc, #12]	; (800269c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800268e:	6810      	ldr	r0, [r2, #0]
}
 8002690:	40d8      	lsrs	r0, r3
 8002692:	4770      	bx	lr
 8002694:	40023800 	.word	0x40023800
 8002698:	0800ded0 	.word	0x0800ded0
 800269c:	2000000c 	.word	0x2000000c

080026a0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026a0:	6803      	ldr	r3, [r0, #0]
{
 80026a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026a6:	f013 0601 	ands.w	r6, r3, #1
{
 80026aa:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026ac:	d00b      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026ae:	4aad      	ldr	r2, [pc, #692]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026b0:	6891      	ldr	r1, [r2, #8]
 80026b2:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80026b6:	6091      	str	r1, [r2, #8]
 80026b8:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80026ba:	6891      	ldr	r1, [r2, #8]
 80026bc:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026be:	fab6 f686 	clz	r6, r6
 80026c2:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026c4:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026c6:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80026ca:	d012      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026cc:	49a5      	ldr	r1, [pc, #660]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026ce:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80026d0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026d4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026d8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80026dc:	bf08      	it	eq
 80026de:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026e0:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026e4:	bf16      	itet	ne
 80026e6:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80026ea:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026ec:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026ee:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026f2:	02d8      	lsls	r0, r3, #11
 80026f4:	d510      	bpl.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026f6:	489b      	ldr	r0, [pc, #620]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80026f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80026fa:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026fe:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002702:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002706:	ea42 0201 	orr.w	r2, r2, r1
 800270a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800270e:	f000 8186 	beq.w	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8002712:	2900      	cmp	r1, #0
 8002714:	bf08      	it	eq
 8002716:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8002718:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800271c:	bf18      	it	ne
 800271e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002720:	0699      	lsls	r1, r3, #26
 8002722:	d532      	bpl.n	800278a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b8f      	ldr	r3, [pc, #572]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002726:	4f90      	ldr	r7, [pc, #576]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800272a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002740:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002742:	f7ff f8fb 	bl	800193c <HAL_GetTick>
 8002746:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	05da      	lsls	r2, r3, #23
 800274c:	f140 8169 	bpl.w	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002750:	4f84      	ldr	r7, [pc, #528]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002752:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002754:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002756:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800275a:	f040 816d 	bne.w	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800275e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002760:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002764:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002768:	4a7e      	ldr	r2, [pc, #504]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800276a:	f040 818a 	bne.w	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800276e:	6891      	ldr	r1, [r2, #8]
 8002770:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002774:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002778:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800277c:	4301      	orrs	r1, r0
 800277e:	6091      	str	r1, [r2, #8]
 8002780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002784:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002786:	430b      	orrs	r3, r1
 8002788:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	06d9      	lsls	r1, r3, #27
 800278e:	d50c      	bpl.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002790:	4a74      	ldr	r2, [pc, #464]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002792:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002796:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800279a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800279e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80027a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80027a4:	4301      	orrs	r1, r0
 80027a6:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027aa:	045a      	lsls	r2, r3, #17
 80027ac:	d508      	bpl.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ae:	496d      	ldr	r1, [pc, #436]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027b0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80027b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80027b6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80027ba:	4302      	orrs	r2, r0
 80027bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027c0:	041f      	lsls	r7, r3, #16
 80027c2:	d508      	bpl.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027c4:	4967      	ldr	r1, [pc, #412]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027c6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80027c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80027cc:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80027d0:	4302      	orrs	r2, r0
 80027d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027d6:	03d8      	lsls	r0, r3, #15
 80027d8:	d508      	bpl.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027da:	4962      	ldr	r1, [pc, #392]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027dc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80027de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80027e2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80027e6:	4302      	orrs	r2, r0
 80027e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027ec:	0399      	lsls	r1, r3, #14
 80027ee:	d508      	bpl.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027f0:	495c      	ldr	r1, [pc, #368]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027f2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80027f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80027f8:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80027fc:	4302      	orrs	r2, r0
 80027fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002802:	065a      	lsls	r2, r3, #25
 8002804:	d508      	bpl.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002806:	4957      	ldr	r1, [pc, #348]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002808:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800280a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800280e:	f022 0203 	bic.w	r2, r2, #3
 8002812:	4302      	orrs	r2, r0
 8002814:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002818:	061f      	lsls	r7, r3, #24
 800281a:	d508      	bpl.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800281c:	4951      	ldr	r1, [pc, #324]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800281e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002820:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002824:	f022 020c 	bic.w	r2, r2, #12
 8002828:	4302      	orrs	r2, r0
 800282a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800282e:	05d8      	lsls	r0, r3, #23
 8002830:	d508      	bpl.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002832:	494c      	ldr	r1, [pc, #304]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002834:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002836:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800283a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800283e:	4302      	orrs	r2, r0
 8002840:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002844:	0599      	lsls	r1, r3, #22
 8002846:	d508      	bpl.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002848:	4946      	ldr	r1, [pc, #280]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800284a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800284c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002850:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002854:	4302      	orrs	r2, r0
 8002856:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800285a:	055a      	lsls	r2, r3, #21
 800285c:	d508      	bpl.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800285e:	4941      	ldr	r1, [pc, #260]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002860:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002862:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002866:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800286a:	4302      	orrs	r2, r0
 800286c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002870:	051f      	lsls	r7, r3, #20
 8002872:	d508      	bpl.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002874:	493b      	ldr	r1, [pc, #236]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002876:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002878:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800287c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002880:	4302      	orrs	r2, r0
 8002882:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002886:	04d8      	lsls	r0, r3, #19
 8002888:	d508      	bpl.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800288a:	4936      	ldr	r1, [pc, #216]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800288c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800288e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002892:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002896:	4302      	orrs	r2, r0
 8002898:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800289c:	0499      	lsls	r1, r3, #18
 800289e:	d508      	bpl.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028a0:	4930      	ldr	r1, [pc, #192]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028a2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80028a4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028a8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80028ac:	4302      	orrs	r2, r0
 80028ae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028b2:	025a      	lsls	r2, r3, #9
 80028b4:	d508      	bpl.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028b6:	492b      	ldr	r1, [pc, #172]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028b8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80028ba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028be:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80028c2:	4302      	orrs	r2, r0
 80028c4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028c8:	029f      	lsls	r7, r3, #10
 80028ca:	d50c      	bpl.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028cc:	4825      	ldr	r0, [pc, #148]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028ce:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80028d0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80028d4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028d8:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80028dc:	bf08      	it	eq
 80028de:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028e0:	430a      	orrs	r2, r1
 80028e2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80028e6:	f013 0f08 	tst.w	r3, #8
 80028ea:	bf18      	it	ne
 80028ec:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028ee:	0358      	lsls	r0, r3, #13
 80028f0:	d508      	bpl.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028f2:	491c      	ldr	r1, [pc, #112]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028f4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80028f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80028fa:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028fe:	4302      	orrs	r2, r0
 8002900:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002904:	0219      	lsls	r1, r3, #8
 8002906:	d509      	bpl.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002908:	4916      	ldr	r1, [pc, #88]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800290a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800290e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002912:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002916:	4302      	orrs	r2, r0
 8002918:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800291c:	2e01      	cmp	r6, #1
 800291e:	f000 80b4 	beq.w	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002922:	019a      	lsls	r2, r3, #6
 8002924:	f100 80b1 	bmi.w	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002928:	2d01      	cmp	r5, #1
 800292a:	d176      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800292c:	4d0d      	ldr	r5, [pc, #52]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800292e:	682b      	ldr	r3, [r5, #0]
 8002930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002934:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002936:	f7ff f801 	bl	800193c <HAL_GetTick>
 800293a:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	009f      	lsls	r7, r3, #2
 8002940:	f100 8127 	bmi.w	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002944:	6821      	ldr	r1, [r4, #0]
 8002946:	030e      	lsls	r6, r1, #12
 8002948:	d501      	bpl.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800294a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800294c:	b11b      	cbz	r3, 8002956 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800294e:	02cd      	lsls	r5, r1, #11
 8002950:	d523      	bpl.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002954:	bb0b      	cbnz	r3, 800299a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002956:	4a03      	ldr	r2, [pc, #12]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002958:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800295c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8002960:	e004      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800296c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002970:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002974:	4303      	orrs	r3, r0
 8002976:	6960      	ldr	r0, [r4, #20]
 8002978:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800297c:	69a0      	ldr	r0, [r4, #24]
 800297e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002982:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002986:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800298a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800298c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002990:	3801      	subs	r0, #1
 8002992:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002996:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800299a:	0288      	lsls	r0, r1, #10
 800299c:	d515      	bpl.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800299e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80029a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a4:	d111      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029a6:	4a82      	ldr	r2, [pc, #520]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80029a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029ac:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80029b0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80029b4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80029b8:	4303      	orrs	r3, r0
 80029ba:	6960      	ldr	r0, [r4, #20]
 80029bc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80029c0:	6a20      	ldr	r0, [r4, #32]
 80029c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80029c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029ca:	070a      	lsls	r2, r1, #28
 80029cc:	d519      	bpl.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029ce:	4a78      	ldr	r2, [pc, #480]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80029d0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80029d8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80029dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e0:	430b      	orrs	r3, r1
 80029e2:	6961      	ldr	r1, [r4, #20]
 80029e4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80029e8:	69e1      	ldr	r1, [r4, #28]
 80029ea:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80029ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80029f2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80029f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80029f8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80029fc:	430b      	orrs	r3, r1
 80029fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a02:	4c6b      	ldr	r4, [pc, #428]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0c:	f7fe ff96 	bl	800193c <HAL_GetTick>
 8002a10:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	f140 80c3 	bpl.w	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	e009      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
 8002a1e:	2601      	movs	r6, #1
 8002a20:	e67a      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a22:	f7fe ff8b 	bl	800193c <HAL_GetTick>
 8002a26:	eba0 0008 	sub.w	r0, r0, r8
 8002a2a:	2864      	cmp	r0, #100	; 0x64
 8002a2c:	f67f ae8c 	bls.w	8002748 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002a30:	2003      	movs	r0, #3
}
 8002a32:	b003      	add	sp, #12
 8002a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a38:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	f43f ae8e 	beq.w	800275e <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a4a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a4e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a50:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002a52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a56:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002a58:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a5c:	07db      	lsls	r3, r3, #31
 8002a5e:	f57f ae7e 	bpl.w	800275e <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8002a62:	f7fe ff6b 	bl	800193c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002a6a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a6e:	0798      	lsls	r0, r3, #30
 8002a70:	f53f ae75 	bmi.w	800275e <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fe ff62 	bl	800193c <HAL_GetTick>
 8002a78:	eba0 0008 	sub.w	r0, r0, r8
 8002a7c:	4548      	cmp	r0, r9
 8002a7e:	d9f5      	bls.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002a80:	e7d6      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a82:	6891      	ldr	r1, [r2, #8]
 8002a84:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002a88:	e679      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 8002a8a:	4e49      	ldr	r6, [pc, #292]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002a8c:	6833      	ldr	r3, [r6, #0]
 8002a8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a92:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002a94:	f7fe ff52 	bl	800193c <HAL_GetTick>
 8002a98:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a9a:	6833      	ldr	r3, [r6, #0]
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	d472      	bmi.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002aa0:	6822      	ldr	r2, [r4, #0]
 8002aa2:	07d7      	lsls	r7, r2, #31
 8002aa4:	d512      	bpl.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002aa8:	b983      	cbnz	r3, 8002acc <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002aaa:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002aae:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ab2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab6:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002aba:	430b      	orrs	r3, r1
 8002abc:	6861      	ldr	r1, [r4, #4]
 8002abe:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002ac2:	68a1      	ldr	r1, [r4, #8]
 8002ac4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002ac8:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002acc:	0316      	lsls	r6, r2, #12
 8002ace:	d503      	bpl.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8002ad0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8002ad8:	02d0      	lsls	r0, r2, #11
 8002ada:	d51e      	bpl.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002adc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae2:	d11a      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ae4:	4932      	ldr	r1, [pc, #200]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002ae6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aea:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002aee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002af6:	4303      	orrs	r3, r0
 8002af8:	6860      	ldr	r0, [r4, #4]
 8002afa:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002afe:	68e0      	ldr	r0, [r4, #12]
 8002b00:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002b04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b08:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002b0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b0e:	f020 001f 	bic.w	r0, r0, #31
 8002b12:	3b01      	subs	r3, #1
 8002b14:	4303      	orrs	r3, r0
 8002b16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b1a:	01d1      	lsls	r1, r2, #7
 8002b1c:	d511      	bpl.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b1e:	4924      	ldr	r1, [pc, #144]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002b20:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b24:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b28:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002b2c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002b30:	4303      	orrs	r3, r0
 8002b32:	6860      	ldr	r0, [r4, #4]
 8002b34:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002b38:	6920      	ldr	r0, [r4, #16]
 8002b3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002b3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b42:	0192      	lsls	r2, r2, #6
 8002b44:	d50d      	bpl.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b46:	6923      	ldr	r3, [r4, #16]
 8002b48:	6862      	ldr	r2, [r4, #4]
 8002b4a:	041b      	lsls	r3, r3, #16
 8002b4c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b50:	68e2      	ldr	r2, [r4, #12]
 8002b52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b56:	68a2      	ldr	r2, [r4, #8]
 8002b58:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002b5e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002b62:	4e13      	ldr	r6, [pc, #76]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002b64:	6833      	ldr	r3, [r6, #0]
 8002b66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b6a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002b6c:	f7fe fee6 	bl	800193c <HAL_GetTick>
 8002b70:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b72:	6833      	ldr	r3, [r6, #0]
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	f53f aed7 	bmi.w	8002928 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b7a:	f7fe fedf 	bl	800193c <HAL_GetTick>
 8002b7e:	1bc0      	subs	r0, r0, r7
 8002b80:	2864      	cmp	r0, #100	; 0x64
 8002b82:	d9f6      	bls.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b84:	e754      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b86:	f7fe fed9 	bl	800193c <HAL_GetTick>
 8002b8a:	1bc0      	subs	r0, r0, r7
 8002b8c:	2864      	cmp	r0, #100	; 0x64
 8002b8e:	d984      	bls.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002b90:	e74e      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b92:	f7fe fed3 	bl	800193c <HAL_GetTick>
 8002b96:	1b80      	subs	r0, r0, r6
 8002b98:	2864      	cmp	r0, #100	; 0x64
 8002b9a:	f67f aecf 	bls.w	800293c <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8002b9e:	e747      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ba0:	f7fe fecc 	bl	800193c <HAL_GetTick>
 8002ba4:	1b40      	subs	r0, r0, r5
 8002ba6:	2864      	cmp	r0, #100	; 0x64
 8002ba8:	f67f af33 	bls.w	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002bac:	e740      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800

08002bb4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bb4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d133      	bne.n	8002c24 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bc2:	6803      	ldr	r3, [r0, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bcc:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <HAL_TIM_Base_Start_IT+0x74>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01a      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x54>
 8002bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd6:	d017      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x54>
 8002bd8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d013      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x54>
 8002be0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00f      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x54>
 8002be8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00b      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x54>
 8002bf0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d007      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x54>
 8002bf8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d003      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0x54>
 8002c00:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d107      	bne.n	8002c18 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	4a08      	ldr	r2, [pc, #32]	; (8002c2c <HAL_TIM_Base_Start_IT+0x78>)
 8002c0c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0e:	2a06      	cmp	r2, #6
 8002c10:	d006      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x6c>
 8002c12:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002c16:	d003      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c20:	2000      	movs	r0, #0
}
 8002c22:	4770      	bx	lr
    return HAL_ERROR;
 8002c24:	2001      	movs	r0, #1
 8002c26:	4770      	bx	lr
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	00010007 	.word	0x00010007

08002c30 <HAL_TIM_PeriodElapsedCallback>:
 8002c30:	4770      	bx	lr

08002c32 <HAL_TIM_OC_DelayElapsedCallback>:
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIM_IC_CaptureCallback>:
 8002c34:	4770      	bx	lr

08002c36 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002c36:	4770      	bx	lr

08002c38 <HAL_TIM_TriggerCallback>:
 8002c38:	4770      	bx	lr

08002c3a <HAL_TIM_IRQHandler>:
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  uint32_t itsource = htim->Instance->DIER;
 8002c3a:	6803      	ldr	r3, [r0, #0]
{
 8002c3c:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8002c3e:	68dd      	ldr	r5, [r3, #12]
{
 8002c40:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 8002c42:	691e      	ldr	r6, [r3, #16]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c44:	07b2      	lsls	r2, r6, #30
 8002c46:	d50d      	bpl.n	8002c64 <HAL_TIM_IRQHandler+0x2a>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c48:	07a9      	lsls	r1, r5, #30
 8002c4a:	d50b      	bpl.n	8002c64 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c4c:	f06f 0202 	mvn.w	r2, #2
 8002c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c52:	2201      	movs	r2, #1
 8002c54:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	079a      	lsls	r2, r3, #30
 8002c5a:	d075      	beq.n	8002d48 <HAL_TIM_IRQHandler+0x10e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c5c:	f7ff ffea 	bl	8002c34 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c60:	2300      	movs	r3, #0
 8002c62:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c64:	0773      	lsls	r3, r6, #29
 8002c66:	d510      	bpl.n	8002c8a <HAL_TIM_IRQHandler+0x50>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c68:	0768      	lsls	r0, r5, #29
 8002c6a:	d50e      	bpl.n	8002c8a <HAL_TIM_IRQHandler+0x50>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c76:	2202      	movs	r2, #2
 8002c78:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002c80:	d068      	beq.n	8002d54 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c82:	f7ff ffd7 	bl	8002c34 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	2300      	movs	r3, #0
 8002c88:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c8a:	0731      	lsls	r1, r6, #28
 8002c8c:	d50f      	bpl.n	8002cae <HAL_TIM_IRQHandler+0x74>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c8e:	072a      	lsls	r2, r5, #28
 8002c90:	d50d      	bpl.n	8002cae <HAL_TIM_IRQHandler+0x74>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c98:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	079b      	lsls	r3, r3, #30
 8002ca4:	d05c      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca6:	f7ff ffc5 	bl	8002c34 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002caa:	2300      	movs	r3, #0
 8002cac:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002cae:	06f1      	lsls	r1, r6, #27
 8002cb0:	d510      	bpl.n	8002cd4 <HAL_TIM_IRQHandler+0x9a>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cb2:	06ea      	lsls	r2, r5, #27
 8002cb4:	d50e      	bpl.n	8002cd4 <HAL_TIM_IRQHandler+0x9a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cbc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002cca:	d04f      	beq.n	8002d6c <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ccc:	f7ff ffb2 	bl	8002c34 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002cd4:	07f3      	lsls	r3, r6, #31
 8002cd6:	d508      	bpl.n	8002cea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cd8:	07e8      	lsls	r0, r5, #31
 8002cda:	d506      	bpl.n	8002cea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ce2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ce4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ce6:	f7ff ffa3 	bl	8002c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002cea:	f416 5f02 	tst.w	r6, #8320	; 0x2080
 8002cee:	d008      	beq.n	8002d02 <HAL_TIM_IRQHandler+0xc8>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cf0:	0629      	lsls	r1, r5, #24
 8002cf2:	d506      	bpl.n	8002d02 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cfa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002cfc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002cfe:	f000 f9ca 	bl	8003096 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002d02:	05f2      	lsls	r2, r6, #23
 8002d04:	d508      	bpl.n	8002d18 <HAL_TIM_IRQHandler+0xde>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d06:	062b      	lsls	r3, r5, #24
 8002d08:	d506      	bpl.n	8002d18 <HAL_TIM_IRQHandler+0xde>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d10:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d12:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002d14:	f000 f9c0 	bl	8003098 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d18:	0670      	lsls	r0, r6, #25
 8002d1a:	d508      	bpl.n	8002d2e <HAL_TIM_IRQHandler+0xf4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d1c:	0669      	lsls	r1, r5, #25
 8002d1e:	d506      	bpl.n	8002d2e <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d26:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d28:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002d2a:	f7ff ff85 	bl	8002c38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d2e:	06b2      	lsls	r2, r6, #26
 8002d30:	d522      	bpl.n	8002d78 <HAL_TIM_IRQHandler+0x13e>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d32:	06ab      	lsls	r3, r5, #26
 8002d34:	d520      	bpl.n	8002d78 <HAL_TIM_IRQHandler+0x13e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d3c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d3e:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002d44:	f000 b9a6 	b.w	8003094 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d48:	f7ff ff73 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f7ff ff72 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d52:	e785      	b.n	8002c60 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d54:	f7ff ff6d 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff ff6c 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d5e:	e792      	b.n	8002c86 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d60:	f7ff ff67 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7ff ff66 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d6a:	e79e      	b.n	8002caa <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6c:	f7ff ff61 	bl	8002c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	4620      	mov	r0, r4
 8002d72:	f7ff ff60 	bl	8002c36 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d76:	e7ab      	b.n	8002cd0 <HAL_TIM_IRQHandler+0x96>
}
 8002d78:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d7c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d7c:	4a33      	ldr	r2, [pc, #204]	; (8002e4c <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
 8002d7e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d80:	4290      	cmp	r0, r2
 8002d82:	d012      	beq.n	8002daa <TIM_Base_SetConfig+0x2e>
 8002d84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d88:	d00f      	beq.n	8002daa <TIM_Base_SetConfig+0x2e>
 8002d8a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002d8e:	4290      	cmp	r0, r2
 8002d90:	d00b      	beq.n	8002daa <TIM_Base_SetConfig+0x2e>
 8002d92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d96:	4290      	cmp	r0, r2
 8002d98:	d007      	beq.n	8002daa <TIM_Base_SetConfig+0x2e>
 8002d9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d9e:	4290      	cmp	r0, r2
 8002da0:	d003      	beq.n	8002daa <TIM_Base_SetConfig+0x2e>
 8002da2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002da6:	4290      	cmp	r0, r2
 8002da8:	d119      	bne.n	8002dde <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002daa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002db0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002db2:	4a26      	ldr	r2, [pc, #152]	; (8002e4c <TIM_Base_SetConfig+0xd0>)
 8002db4:	4290      	cmp	r0, r2
 8002db6:	d029      	beq.n	8002e0c <TIM_Base_SetConfig+0x90>
 8002db8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002dbc:	d026      	beq.n	8002e0c <TIM_Base_SetConfig+0x90>
 8002dbe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002dc2:	4290      	cmp	r0, r2
 8002dc4:	d022      	beq.n	8002e0c <TIM_Base_SetConfig+0x90>
 8002dc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dca:	4290      	cmp	r0, r2
 8002dcc:	d01e      	beq.n	8002e0c <TIM_Base_SetConfig+0x90>
 8002dce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dd2:	4290      	cmp	r0, r2
 8002dd4:	d01a      	beq.n	8002e0c <TIM_Base_SetConfig+0x90>
 8002dd6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002dda:	4290      	cmp	r0, r2
 8002ddc:	d016      	beq.n	8002e0c <TIM_Base_SetConfig+0x90>
 8002dde:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <TIM_Base_SetConfig+0xd4>)
 8002de0:	4290      	cmp	r0, r2
 8002de2:	d013      	beq.n	8002e0c <TIM_Base_SetConfig+0x90>
 8002de4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002de8:	4290      	cmp	r0, r2
 8002dea:	d00f      	beq.n	8002e0c <TIM_Base_SetConfig+0x90>
 8002dec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002df0:	4290      	cmp	r0, r2
 8002df2:	d00b      	beq.n	8002e0c <TIM_Base_SetConfig+0x90>
 8002df4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002df8:	4290      	cmp	r0, r2
 8002dfa:	d007      	beq.n	8002e0c <TIM_Base_SetConfig+0x90>
 8002dfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e00:	4290      	cmp	r0, r2
 8002e02:	d003      	beq.n	8002e0c <TIM_Base_SetConfig+0x90>
 8002e04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e08:	4290      	cmp	r0, r2
 8002e0a:	d103      	bne.n	8002e14 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e10:	68ca      	ldr	r2, [r1, #12]
 8002e12:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e14:	694a      	ldr	r2, [r1, #20]
 8002e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e1a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002e1c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e1e:	688b      	ldr	r3, [r1, #8]
 8002e20:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e22:	680b      	ldr	r3, [r1, #0]
 8002e24:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e26:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <TIM_Base_SetConfig+0xd0>)
 8002e28:	4298      	cmp	r0, r3
 8002e2a:	d003      	beq.n	8002e34 <TIM_Base_SetConfig+0xb8>
 8002e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e30:	4298      	cmp	r0, r3
 8002e32:	d101      	bne.n	8002e38 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e34:	690b      	ldr	r3, [r1, #16]
 8002e36:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e3c:	6903      	ldr	r3, [r0, #16]
 8002e3e:	07db      	lsls	r3, r3, #31
 8002e40:	d503      	bpl.n	8002e4a <TIM_Base_SetConfig+0xce>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e42:	6903      	ldr	r3, [r0, #16]
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	6103      	str	r3, [r0, #16]
  }
}
 8002e4a:	4770      	bx	lr
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40014000 	.word	0x40014000

08002e54 <HAL_TIM_Base_Init>:
{
 8002e54:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002e56:	4604      	mov	r4, r0
 8002e58:	b350      	cbz	r0, 8002eb0 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002e5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e62:	b91b      	cbnz	r3, 8002e6c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002e64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002e68:	f7fe fbe2 	bl	8001630 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e6e:	6820      	ldr	r0, [r4, #0]
 8002e70:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8002e72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e76:	f7ff ff81 	bl	8002d7c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e7a:	2301      	movs	r3, #1
  return HAL_OK;
 8002e7c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e7e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e82:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002e86:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002e8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002e8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002e92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002e9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ea2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002ea6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002eaa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002eae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	e7fc      	b.n	8002eae <HAL_TIM_Base_Init+0x5a>

08002eb4 <TIM_ETR_SetConfig>:

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eb4:	4311      	orrs	r1, r2
{
 8002eb6:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8002eb8:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eba:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ebe:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ec2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec4:	6083      	str	r3, [r0, #8]
}
 8002ec6:	bd10      	pop	{r4, pc}

08002ec8 <HAL_TIM_ConfigClockSource>:
{
 8002ec8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002eca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002ece:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	f04f 0302 	mov.w	r3, #2
 8002ed6:	f000 808c 	beq.w	8002ff2 <HAL_TIM_ConfigClockSource+0x12a>
 8002eda:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002edc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee0:	4b45      	ldr	r3, [pc, #276]	; (8002ff8 <HAL_TIM_ConfigClockSource+0x130>)
  __HAL_LOCK(htim);
 8002ee2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002ee6:	6800      	ldr	r0, [r0, #0]
 8002ee8:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eea:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8002eec:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002eee:	680b      	ldr	r3, [r1, #0]
 8002ef0:	2b60      	cmp	r3, #96	; 0x60
 8002ef2:	d04f      	beq.n	8002f94 <HAL_TIM_ConfigClockSource+0xcc>
 8002ef4:	d832      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x94>
 8002ef6:	2b40      	cmp	r3, #64	; 0x40
 8002ef8:	d064      	beq.n	8002fc4 <HAL_TIM_ConfigClockSource+0xfc>
 8002efa:	d816      	bhi.n	8002f2a <HAL_TIM_ConfigClockSource+0x62>
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d00d      	beq.n	8002f1c <HAL_TIM_ConfigClockSource+0x54>
 8002f00:	d80a      	bhi.n	8002f18 <HAL_TIM_ConfigClockSource+0x50>
 8002f02:	f033 0110 	bics.w	r1, r3, #16
 8002f06:	d009      	beq.n	8002f1c <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002f14:	4610      	mov	r0, r2
 8002f16:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8002f18:	2b30      	cmp	r3, #48	; 0x30
 8002f1a:	d1f5      	bne.n	8002f08 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8002f1c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f043 0307 	orr.w	r3, r3, #7
 8002f28:	e028      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8002f2a:	2b50      	cmp	r3, #80	; 0x50
 8002f2c:	d1ec      	bne.n	8002f08 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 8002f2e:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002f30:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002f32:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f34:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f36:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
 8002f3e:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f40:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f42:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f48:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002f4c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f4e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002f50:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f56:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002f5a:	e00f      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8002f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f60:	d00d      	beq.n	8002f7e <HAL_TIM_ConfigClockSource+0xb6>
 8002f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f66:	d00c      	beq.n	8002f82 <HAL_TIM_ConfigClockSource+0xba>
 8002f68:	2b70      	cmp	r3, #112	; 0x70
 8002f6a:	d1cd      	bne.n	8002f08 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8002f6c:	68cb      	ldr	r3, [r1, #12]
 8002f6e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002f72:	f7ff ff9f 	bl	8002eb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f76:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8002f7c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7e:	2200      	movs	r2, #0
 8002f80:	e7c2      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8002f82:	68cb      	ldr	r3, [r1, #12]
 8002f84:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002f88:	f7ff ff94 	bl	8002eb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f8c:	6883      	ldr	r3, [r0, #8]
 8002f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f92:	e7f3      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 8002f94:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f96:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8002f98:	684d      	ldr	r5, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f9e:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8002fa2:	68c9      	ldr	r1, [r1, #12]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fa4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fa8:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002faa:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fac:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fb0:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002fb4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002fb6:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002fb8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fbe:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002fc2:	e7db      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8002fc4:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002fc6:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002fc8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fca:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fcc:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
 8002fd4:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fd8:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fde:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002fe2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002fe4:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002fe6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fec:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002ff0:	e7c4      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	e78e      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x4c>
 8002ff6:	bf00      	nop
 8002ff8:	fffe0088 	.word	0xfffe0088

08002ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ffc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ffe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003002:	2b01      	cmp	r3, #1
 8003004:	f04f 0302 	mov.w	r3, #2
 8003008:	d03b      	beq.n	8003082 <HAL_TIMEx_MasterConfigSynchronization+0x86>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800300e:	4d1e      	ldr	r5, [pc, #120]	; (8003088 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  tmpcr2 = htim->Instance->CR2;
 8003010:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003012:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8003014:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003016:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003018:	d002      	beq.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 800301a:	4e1c      	ldr	r6, [pc, #112]	; (800308c <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 800301c:	42b3      	cmp	r3, r6
 800301e:	d103      	bne.n	8003028 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003020:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003024:	684e      	ldr	r6, [r1, #4]
 8003026:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003028:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800302a:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302e:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003030:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 8003034:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003036:	d019      	beq.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303c:	d016      	beq.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800303e:	4a14      	ldr	r2, [pc, #80]	; (8003090 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d013      	beq.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003044:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003048:	4293      	cmp	r3, r2
 800304a:	d00f      	beq.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800304c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003050:	4293      	cmp	r3, r2
 8003052:	d00b      	beq.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003054:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003058:	4293      	cmp	r3, r2
 800305a:	d007      	beq.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800305c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003060:	4293      	cmp	r3, r2
 8003062:	d003      	beq.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003064:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003068:	4293      	cmp	r3, r2
 800306a:	d104      	bne.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800306c:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800306e:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003072:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003074:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003076:	2301      	movs	r3, #1
 8003078:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800307c:	2300      	movs	r3, #0
 800307e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003082:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003084:	bd70      	pop	{r4, r5, r6, pc}
 8003086:	bf00      	nop
 8003088:	40010000 	.word	0x40010000
 800308c:	40010400 	.word	0x40010400
 8003090:	40000400 	.word	0x40000400

08003094 <HAL_TIMEx_CommutCallback>:
 8003094:	4770      	bx	lr

08003096 <HAL_TIMEx_BreakCallback>:
 8003096:	4770      	bx	lr

08003098 <HAL_TIMEx_Break2Callback>:
 8003098:	4770      	bx	lr

0800309a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800309a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309c:	e852 3f00 	ldrex	r3, [r2]
 80030a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80030a8:	6802      	ldr	r2, [r0, #0]
 80030aa:	2900      	cmp	r1, #0
 80030ac:	d1f5      	bne.n	800309a <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ae:	f102 0308 	add.w	r3, r2, #8
 80030b2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	f102 0c08 	add.w	ip, r2, #8
 80030be:	e84c 3100 	strex	r1, r3, [ip]
 80030c2:	2900      	cmp	r1, #0
 80030c4:	d1f3      	bne.n	80030ae <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d107      	bne.n	80030dc <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	e842 3100 	strex	r1, r3, [r2]
 80030d8:	2900      	cmp	r1, #0
 80030da:	d1f7      	bne.n	80030cc <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030dc:	2320      	movs	r3, #32
 80030de:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e2:	2300      	movs	r3, #0
 80030e4:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030e6:	6683      	str	r3, [r0, #104]	; 0x68
}
 80030e8:	4770      	bx	lr
	...

080030ec <UART_SetConfig>:
{
 80030ec:	b538      	push	{r3, r4, r5, lr}
 80030ee:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030f0:	69c0      	ldr	r0, [r0, #28]
 80030f2:	6921      	ldr	r1, [r4, #16]
 80030f4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030f6:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030f8:	430a      	orrs	r2, r1
 80030fa:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030fc:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030fe:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003100:	498e      	ldr	r1, [pc, #568]	; (800333c <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003102:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003104:	4029      	ands	r1, r5
  tmpreg |= huart->Init.OneBitSampling;
 8003106:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003108:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800310a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800310c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003114:	430a      	orrs	r2, r1
 8003116:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003118:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800311a:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800311c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800311e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003122:	430a      	orrs	r2, r1
 8003124:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003126:	4a86      	ldr	r2, [pc, #536]	; (8003340 <UART_SetConfig+0x254>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d117      	bne.n	800315c <UART_SetConfig+0x70>
 800312c:	4b85      	ldr	r3, [pc, #532]	; (8003344 <UART_SetConfig+0x258>)
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	3b01      	subs	r3, #1
 8003138:	2b02      	cmp	r3, #2
 800313a:	f200 80e2 	bhi.w	8003302 <UART_SetConfig+0x216>
 800313e:	4a82      	ldr	r2, [pc, #520]	; (8003348 <UART_SetConfig+0x25c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003140:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003144:	5cd3      	ldrb	r3, [r2, r3]
 8003146:	f040 80b3 	bne.w	80032b0 <UART_SetConfig+0x1c4>
    switch (clocksource)
 800314a:	2b08      	cmp	r3, #8
 800314c:	d822      	bhi.n	8003194 <UART_SetConfig+0xa8>
 800314e:	e8df f003 	tbb	[pc, r3]
 8003152:	db90      	.short	0xdb90
 8003154:	21d52198 	.word	0x21d52198
 8003158:	2121      	.short	0x2121
 800315a:	99          	.byte	0x99
 800315b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800315c:	4a7b      	ldr	r2, [pc, #492]	; (800334c <UART_SetConfig+0x260>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d106      	bne.n	8003170 <UART_SetConfig+0x84>
 8003162:	4b78      	ldr	r3, [pc, #480]	; (8003344 <UART_SetConfig+0x258>)
 8003164:	4a7a      	ldr	r2, [pc, #488]	; (8003350 <UART_SetConfig+0x264>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	e7e7      	b.n	8003140 <UART_SetConfig+0x54>
 8003170:	4a78      	ldr	r2, [pc, #480]	; (8003354 <UART_SetConfig+0x268>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d118      	bne.n	80031a8 <UART_SetConfig+0xbc>
 8003176:	4b73      	ldr	r3, [pc, #460]	; (8003344 <UART_SetConfig+0x258>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003180:	2b20      	cmp	r3, #32
 8003182:	f000 80b3 	beq.w	80032ec <UART_SetConfig+0x200>
 8003186:	d807      	bhi.n	8003198 <UART_SetConfig+0xac>
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80c0 	beq.w	800330e <UART_SetConfig+0x222>
 800318e:	2b10      	cmp	r3, #16
 8003190:	f000 80b1 	beq.w	80032f6 <UART_SetConfig+0x20a>
    switch (clocksource)
 8003194:	2001      	movs	r0, #1
 8003196:	e070      	b.n	800327a <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003198:	2b30      	cmp	r3, #48	; 0x30
 800319a:	d1fb      	bne.n	8003194 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800319c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80031a0:	d070      	beq.n	8003284 <UART_SetConfig+0x198>
        pclk = (uint32_t) LSE_VALUE;
 80031a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80031a6:	e0b9      	b.n	800331c <UART_SetConfig+0x230>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031a8:	4a6b      	ldr	r2, [pc, #428]	; (8003358 <UART_SetConfig+0x26c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d10f      	bne.n	80031ce <UART_SetConfig+0xe2>
 80031ae:	4b65      	ldr	r3, [pc, #404]	; (8003344 <UART_SetConfig+0x258>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	f000 8097 	beq.w	80032ec <UART_SetConfig+0x200>
 80031be:	d804      	bhi.n	80031ca <UART_SetConfig+0xde>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80a4 	beq.w	800330e <UART_SetConfig+0x222>
 80031c6:	2b40      	cmp	r3, #64	; 0x40
 80031c8:	e7e2      	b.n	8003190 <UART_SetConfig+0xa4>
 80031ca:	2bc0      	cmp	r3, #192	; 0xc0
 80031cc:	e7e5      	b.n	800319a <UART_SetConfig+0xae>
 80031ce:	4a63      	ldr	r2, [pc, #396]	; (800335c <UART_SetConfig+0x270>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d112      	bne.n	80031fa <UART_SetConfig+0x10e>
 80031d4:	4b5b      	ldr	r3, [pc, #364]	; (8003344 <UART_SetConfig+0x258>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e2:	f000 8083 	beq.w	80032ec <UART_SetConfig+0x200>
 80031e6:	d805      	bhi.n	80031f4 <UART_SetConfig+0x108>
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8090 	beq.w	800330e <UART_SetConfig+0x222>
 80031ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f2:	e7cd      	b.n	8003190 <UART_SetConfig+0xa4>
 80031f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031f8:	e7cf      	b.n	800319a <UART_SetConfig+0xae>
 80031fa:	4a59      	ldr	r2, [pc, #356]	; (8003360 <UART_SetConfig+0x274>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d110      	bne.n	8003222 <UART_SetConfig+0x136>
 8003200:	4b50      	ldr	r3, [pc, #320]	; (8003344 <UART_SetConfig+0x258>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800320a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800320e:	d06d      	beq.n	80032ec <UART_SetConfig+0x200>
 8003210:	d804      	bhi.n	800321c <UART_SetConfig+0x130>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d075      	beq.n	8003302 <UART_SetConfig+0x216>
 8003216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321a:	e7b9      	b.n	8003190 <UART_SetConfig+0xa4>
 800321c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003220:	e7bb      	b.n	800319a <UART_SetConfig+0xae>
 8003222:	4a50      	ldr	r2, [pc, #320]	; (8003364 <UART_SetConfig+0x278>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d110      	bne.n	800324a <UART_SetConfig+0x15e>
 8003228:	4b46      	ldr	r3, [pc, #280]	; (8003344 <UART_SetConfig+0x258>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003236:	d059      	beq.n	80032ec <UART_SetConfig+0x200>
 8003238:	d804      	bhi.n	8003244 <UART_SetConfig+0x158>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d067      	beq.n	800330e <UART_SetConfig+0x222>
 800323e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003242:	e7a5      	b.n	8003190 <UART_SetConfig+0xa4>
 8003244:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003248:	e7a7      	b.n	800319a <UART_SetConfig+0xae>
 800324a:	4a47      	ldr	r2, [pc, #284]	; (8003368 <UART_SetConfig+0x27c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d1a1      	bne.n	8003194 <UART_SetConfig+0xa8>
 8003250:	4b3c      	ldr	r3, [pc, #240]	; (8003344 <UART_SetConfig+0x258>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800325a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325e:	d045      	beq.n	80032ec <UART_SetConfig+0x200>
 8003260:	d804      	bhi.n	800326c <UART_SetConfig+0x180>
 8003262:	2b00      	cmp	r3, #0
 8003264:	d053      	beq.n	800330e <UART_SetConfig+0x222>
 8003266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800326a:	e791      	b.n	8003190 <UART_SetConfig+0xa4>
 800326c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003270:	e793      	b.n	800319a <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003272:	f7ff f9f5 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003276:	b928      	cbnz	r0, 8003284 <UART_SetConfig+0x198>
 8003278:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800327a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800327c:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8003280:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 8003282:	483a      	ldr	r0, [pc, #232]	; (800336c <UART_SetConfig+0x280>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003284:	6862      	ldr	r2, [r4, #4]
 8003286:	0853      	lsrs	r3, r2, #1
 8003288:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800328c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003290:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003294:	f1a3 0110 	sub.w	r1, r3, #16
 8003298:	4291      	cmp	r1, r2
 800329a:	f63f af7b 	bhi.w	8003194 <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800329e:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032a2:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80032a6:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032a8:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60cb      	str	r3, [r1, #12]
 80032ae:	e7e3      	b.n	8003278 <UART_SetConfig+0x18c>
    switch (clocksource)
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	f63f af6f 	bhi.w	8003194 <UART_SetConfig+0xa8>
 80032b6:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <UART_SetConfig+0x1d0>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	08003315 	.word	0x08003315
 80032c0:	080032e1 	.word	0x080032e1
 80032c4:	080032f3 	.word	0x080032f3
 80032c8:	08003195 	.word	0x08003195
 80032cc:	080032e7 	.word	0x080032e7
 80032d0:	08003195 	.word	0x08003195
 80032d4:	08003195 	.word	0x08003195
 80032d8:	08003195 	.word	0x08003195
 80032dc:	080031a3 	.word	0x080031a3
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e0:	f7ff f9ce 	bl	8002680 <HAL_RCC_GetPCLK2Freq>
        break;
 80032e4:	e018      	b.n	8003318 <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetSysClockFreq();
 80032e6:	f7ff f8e9 	bl	80024bc <HAL_RCC_GetSysClockFreq>
        break;
 80032ea:	e015      	b.n	8003318 <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80032f0:	d0c7      	beq.n	8003282 <UART_SetConfig+0x196>
        pclk = (uint32_t) HSI_VALUE;
 80032f2:	481e      	ldr	r0, [pc, #120]	; (800336c <UART_SetConfig+0x280>)
 80032f4:	e012      	b.n	800331c <UART_SetConfig+0x230>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032f6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80032fa:	d1f4      	bne.n	80032e6 <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 80032fc:	f7ff f8de 	bl	80024bc <HAL_RCC_GetSysClockFreq>
        break;
 8003300:	e7b9      	b.n	8003276 <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003302:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003306:	d1eb      	bne.n	80032e0 <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003308:	f7ff f9ba 	bl	8002680 <HAL_RCC_GetPCLK2Freq>
        break;
 800330c:	e7b3      	b.n	8003276 <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800330e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003312:	d0ae      	beq.n	8003272 <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003314:	f7ff f9a4 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003318:	2800      	cmp	r0, #0
 800331a:	d0ad      	beq.n	8003278 <UART_SetConfig+0x18c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800331c:	6862      	ldr	r2, [r4, #4]
 800331e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003322:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003326:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800332a:	f1a3 0110 	sub.w	r1, r3, #16
 800332e:	4291      	cmp	r1, r2
 8003330:	f63f af30 	bhi.w	8003194 <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003334:	6822      	ldr	r2, [r4, #0]
 8003336:	60d3      	str	r3, [r2, #12]
 8003338:	e79e      	b.n	8003278 <UART_SetConfig+0x18c>
 800333a:	bf00      	nop
 800333c:	efff69f3 	.word	0xefff69f3
 8003340:	40011000 	.word	0x40011000
 8003344:	40023800 	.word	0x40023800
 8003348:	0800ded8 	.word	0x0800ded8
 800334c:	40004400 	.word	0x40004400
 8003350:	0800dedb 	.word	0x0800dedb
 8003354:	40004800 	.word	0x40004800
 8003358:	40004c00 	.word	0x40004c00
 800335c:	40005000 	.word	0x40005000
 8003360:	40011400 	.word	0x40011400
 8003364:	40007800 	.word	0x40007800
 8003368:	40007c00 	.word	0x40007c00
 800336c:	00f42400 	.word	0x00f42400

08003370 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003370:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003372:	071a      	lsls	r2, r3, #28
{
 8003374:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003376:	d506      	bpl.n	8003386 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003378:	6801      	ldr	r1, [r0, #0]
 800337a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800337c:	684a      	ldr	r2, [r1, #4]
 800337e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003382:	4322      	orrs	r2, r4
 8003384:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003386:	07dc      	lsls	r4, r3, #31
 8003388:	d506      	bpl.n	8003398 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800338a:	6801      	ldr	r1, [r0, #0]
 800338c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800338e:	684a      	ldr	r2, [r1, #4]
 8003390:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003394:	4322      	orrs	r2, r4
 8003396:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003398:	0799      	lsls	r1, r3, #30
 800339a:	d506      	bpl.n	80033aa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800339c:	6801      	ldr	r1, [r0, #0]
 800339e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80033a0:	684a      	ldr	r2, [r1, #4]
 80033a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80033a6:	4322      	orrs	r2, r4
 80033a8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033aa:	075a      	lsls	r2, r3, #29
 80033ac:	d506      	bpl.n	80033bc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033ae:	6801      	ldr	r1, [r0, #0]
 80033b0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80033b2:	684a      	ldr	r2, [r1, #4]
 80033b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033b8:	4322      	orrs	r2, r4
 80033ba:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033bc:	06dc      	lsls	r4, r3, #27
 80033be:	d506      	bpl.n	80033ce <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c0:	6801      	ldr	r1, [r0, #0]
 80033c2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80033c4:	688a      	ldr	r2, [r1, #8]
 80033c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033ca:	4322      	orrs	r2, r4
 80033cc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033ce:	0699      	lsls	r1, r3, #26
 80033d0:	d506      	bpl.n	80033e0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033d2:	6801      	ldr	r1, [r0, #0]
 80033d4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80033d6:	688a      	ldr	r2, [r1, #8]
 80033d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033dc:	4322      	orrs	r2, r4
 80033de:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033e0:	065a      	lsls	r2, r3, #25
 80033e2:	d510      	bpl.n	8003406 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033e4:	6801      	ldr	r1, [r0, #0]
 80033e6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80033e8:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ea:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ee:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80033f2:	ea42 0204 	orr.w	r2, r2, r4
 80033f6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033f8:	d105      	bne.n	8003406 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033fa:	684a      	ldr	r2, [r1, #4]
 80033fc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80033fe:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003402:	4322      	orrs	r2, r4
 8003404:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003406:	061b      	lsls	r3, r3, #24
 8003408:	d506      	bpl.n	8003418 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800340a:	6802      	ldr	r2, [r0, #0]
 800340c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800340e:	6853      	ldr	r3, [r2, #4]
 8003410:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003414:	430b      	orrs	r3, r1
 8003416:	6053      	str	r3, [r2, #4]
}
 8003418:	bd10      	pop	{r4, pc}

0800341a <UART_WaitOnFlagUntilTimeout>:
{
 800341a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800341e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003422:	4604      	mov	r4, r0
 8003424:	460d      	mov	r5, r1
 8003426:	4617      	mov	r7, r2
 8003428:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800342a:	6822      	ldr	r2, [r4, #0]
 800342c:	69d3      	ldr	r3, [r2, #28]
 800342e:	ea35 0303 	bics.w	r3, r5, r3
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	42bb      	cmp	r3, r7
 800343a:	d001      	beq.n	8003440 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800343c:	2000      	movs	r0, #0
 800343e:	e022      	b.n	8003486 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8003440:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003444:	d0f2      	beq.n	800342c <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003446:	f7fe fa79 	bl	800193c <HAL_GetTick>
 800344a:	eba0 0008 	sub.w	r0, r0, r8
 800344e:	4548      	cmp	r0, r9
 8003450:	d829      	bhi.n	80034a6 <UART_WaitOnFlagUntilTimeout+0x8c>
 8003452:	f1b9 0f00 	cmp.w	r9, #0
 8003456:	d026      	beq.n	80034a6 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003458:	6821      	ldr	r1, [r4, #0]
 800345a:	680b      	ldr	r3, [r1, #0]
 800345c:	075a      	lsls	r2, r3, #29
 800345e:	d5e4      	bpl.n	800342a <UART_WaitOnFlagUntilTimeout+0x10>
 8003460:	2d80      	cmp	r5, #128	; 0x80
 8003462:	d0e2      	beq.n	800342a <UART_WaitOnFlagUntilTimeout+0x10>
 8003464:	2d40      	cmp	r5, #64	; 0x40
 8003466:	d0e0      	beq.n	800342a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003468:	69ce      	ldr	r6, [r1, #28]
 800346a:	f016 0608 	ands.w	r6, r6, #8
 800346e:	d00c      	beq.n	800348a <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003470:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8003472:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003474:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8003476:	f7ff fe10 	bl	800309a <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 800347a:	2300      	movs	r3, #0
          return HAL_ERROR;
 800347c:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800347e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8003482:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8003486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800348a:	69cb      	ldr	r3, [r1, #28]
 800348c:	051b      	lsls	r3, r3, #20
 800348e:	d5cc      	bpl.n	800342a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003490:	f44f 6300 	mov.w	r3, #2048	; 0x800
          UART_EndRxTransfer(huart);
 8003494:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003496:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8003498:	f7ff fdff 	bl	800309a <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800349c:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 800349e:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034a2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_TIMEOUT;
 80034a6:	2003      	movs	r0, #3
 80034a8:	e7ed      	b.n	8003486 <UART_WaitOnFlagUntilTimeout+0x6c>

080034aa <HAL_UART_Transmit>:
{
 80034aa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80034ae:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80034b0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 80034b2:	4604      	mov	r4, r0
 80034b4:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80034b6:	2b20      	cmp	r3, #32
{
 80034b8:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80034ba:	d144      	bne.n	8003546 <HAL_UART_Transmit+0x9c>
    if ((pData == NULL) || (Size == 0U))
 80034bc:	2900      	cmp	r1, #0
 80034be:	d044      	beq.n	800354a <HAL_UART_Transmit+0xa0>
 80034c0:	2a00      	cmp	r2, #0
 80034c2:	d042      	beq.n	800354a <HAL_UART_Transmit+0xa0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034c4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c6:	2500      	movs	r5, #0
 80034c8:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034cc:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 80034ce:	f7fe fa35 	bl	800193c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d2:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80034d4:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 80034d6:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034da:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 80034de:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e2:	d103      	bne.n	80034ec <HAL_UART_Transmit+0x42>
 80034e4:	6922      	ldr	r2, [r4, #16]
 80034e6:	b90a      	cbnz	r2, 80034ec <HAL_UART_Transmit+0x42>
 80034e8:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80034ea:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 80034ec:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034f0:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80034f4:	b292      	uxth	r2, r2
 80034f6:	b94a      	cbnz	r2, 800350c <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034f8:	2140      	movs	r1, #64	; 0x40
 80034fa:	4620      	mov	r0, r4
 80034fc:	f7ff ff8d 	bl	800341a <UART_WaitOnFlagUntilTimeout>
 8003500:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8003502:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003504:	b960      	cbnz	r0, 8003520 <HAL_UART_Transmit+0x76>
}
 8003506:	b004      	add	sp, #16
 8003508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800350c:	2200      	movs	r2, #0
 800350e:	2180      	movs	r1, #128	; 0x80
 8003510:	4620      	mov	r0, r4
 8003512:	9303      	str	r3, [sp, #12]
 8003514:	f7ff ff81 	bl	800341a <UART_WaitOnFlagUntilTimeout>
 8003518:	9b03      	ldr	r3, [sp, #12]
 800351a:	b118      	cbz	r0, 8003524 <HAL_UART_Transmit+0x7a>
        huart->gState = HAL_UART_STATE_READY;
 800351c:	2320      	movs	r3, #32
 800351e:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8003520:	2003      	movs	r0, #3
 8003522:	e7f0      	b.n	8003506 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003524:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8003526:	b95e      	cbnz	r6, 8003540 <HAL_UART_Transmit+0x96>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003528:	f835 2b02 	ldrh.w	r2, [r5], #2
 800352c:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003530:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8003532:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003536:	3a01      	subs	r2, #1
 8003538:	b292      	uxth	r2, r2
 800353a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 800353e:	e7d5      	b.n	80034ec <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003540:	f816 2b01 	ldrb.w	r2, [r6], #1
 8003544:	e7f4      	b.n	8003530 <HAL_UART_Transmit+0x86>
    return HAL_BUSY;
 8003546:	2002      	movs	r0, #2
 8003548:	e7dd      	b.n	8003506 <HAL_UART_Transmit+0x5c>
      return  HAL_ERROR;
 800354a:	2001      	movs	r0, #1
 800354c:	e7db      	b.n	8003506 <HAL_UART_Transmit+0x5c>

0800354e <HAL_UART_Receive>:
{
 800354e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003552:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8003554:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8003558:	4604      	mov	r4, r0
 800355a:	460e      	mov	r6, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 800355c:	2b20      	cmp	r3, #32
{
 800355e:	4617      	mov	r7, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003560:	d15e      	bne.n	8003620 <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 8003562:	2900      	cmp	r1, #0
 8003564:	d05e      	beq.n	8003624 <HAL_UART_Receive+0xd6>
 8003566:	2a00      	cmp	r2, #0
 8003568:	d05c      	beq.n	8003624 <HAL_UART_Receive+0xd6>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800356a:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356c:	2500      	movs	r5, #0
 800356e:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003572:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003576:	6605      	str	r5, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 8003578:	f7fe f9e0 	bl	800193c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800357c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800357e:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 8003580:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8003584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8003588:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800358c:	d116      	bne.n	80035bc <HAL_UART_Receive+0x6e>
 800358e:	6922      	ldr	r2, [r4, #16]
 8003590:	42aa      	cmp	r2, r5
 8003592:	f240 15ff 	movw	r5, #511	; 0x1ff
 8003596:	bf18      	it	ne
 8003598:	25ff      	movne	r5, #255	; 0xff
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    UART_MASK_COMPUTATION(huart);
 800359e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a2:	d11b      	bne.n	80035dc <HAL_UART_Receive+0x8e>
 80035a4:	6923      	ldr	r3, [r4, #16]
 80035a6:	b9cb      	cbnz	r3, 80035dc <HAL_UART_Receive+0x8e>
 80035a8:	4637      	mov	r7, r6
      pdata8bits  = NULL;
 80035aa:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 80035ac:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80035b0:	b290      	uxth	r0, r2
 80035b2:	b9a8      	cbnz	r0, 80035e0 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 80035b4:	2320      	movs	r3, #32
 80035b6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 80035ba:	e01e      	b.n	80035fa <HAL_UART_Receive+0xac>
    UART_MASK_COMPUTATION(huart);
 80035bc:	b92b      	cbnz	r3, 80035ca <HAL_UART_Receive+0x7c>
 80035be:	6922      	ldr	r2, [r4, #16]
 80035c0:	2a00      	cmp	r2, #0
 80035c2:	bf14      	ite	ne
 80035c4:	257f      	movne	r5, #127	; 0x7f
 80035c6:	25ff      	moveq	r5, #255	; 0xff
 80035c8:	e7e7      	b.n	800359a <HAL_UART_Receive+0x4c>
 80035ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ce:	d1e4      	bne.n	800359a <HAL_UART_Receive+0x4c>
 80035d0:	6922      	ldr	r2, [r4, #16]
 80035d2:	2a00      	cmp	r2, #0
 80035d4:	bf0c      	ite	eq
 80035d6:	257f      	moveq	r5, #127	; 0x7f
 80035d8:	253f      	movne	r5, #63	; 0x3f
 80035da:	e7de      	b.n	800359a <HAL_UART_Receive+0x4c>
      pdata16bits = NULL;
 80035dc:	2700      	movs	r7, #0
 80035de:	e7e5      	b.n	80035ac <HAL_UART_Receive+0x5e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035e0:	464b      	mov	r3, r9
 80035e2:	2200      	movs	r2, #0
 80035e4:	2120      	movs	r1, #32
 80035e6:	4620      	mov	r0, r4
 80035e8:	f8cd 8000 	str.w	r8, [sp]
 80035ec:	f7ff ff15 	bl	800341a <UART_WaitOnFlagUntilTimeout>
 80035f0:	b130      	cbz	r0, 8003600 <HAL_UART_Receive+0xb2>
        huart->RxState = HAL_UART_STATE_READY;
 80035f2:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80035f4:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80035f6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 80035fa:	b003      	add	sp, #12
 80035fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	402b      	ands	r3, r5
      if (pdata8bits == NULL)
 8003606:	b946      	cbnz	r6, 800361a <HAL_UART_Receive+0xcc>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003608:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 800360c:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8003610:	3a01      	subs	r2, #1
 8003612:	b292      	uxth	r2, r2
 8003614:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8003618:	e7c8      	b.n	80035ac <HAL_UART_Receive+0x5e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800361a:	f806 3b01 	strb.w	r3, [r6], #1
        pdata8bits++;
 800361e:	e7f5      	b.n	800360c <HAL_UART_Receive+0xbe>
    return HAL_BUSY;
 8003620:	2002      	movs	r0, #2
 8003622:	e7ea      	b.n	80035fa <HAL_UART_Receive+0xac>
      return  HAL_ERROR;
 8003624:	2001      	movs	r0, #1
 8003626:	e7e8      	b.n	80035fa <HAL_UART_Receive+0xac>

08003628 <UART_CheckIdleState>:
{
 8003628:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362a:	2500      	movs	r5, #0
{
 800362c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362e:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8003632:	f7fe f983 	bl	800193c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003636:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8003638:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	0712      	lsls	r2, r2, #28
 800363e:	d51a      	bpl.n	8003676 <UART_CheckIdleState+0x4e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003640:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003644:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003648:	4620      	mov	r0, r4
 800364a:	9200      	str	r2, [sp, #0]
 800364c:	462a      	mov	r2, r5
 800364e:	f7ff fee4 	bl	800341a <UART_WaitOnFlagUntilTimeout>
 8003652:	b180      	cbz	r0, 8003676 <UART_CheckIdleState+0x4e>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003654:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003656:	e852 3f00 	ldrex	r3, [r2]
 800365a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365e:	e842 3100 	strex	r1, r3, [r2]
 8003662:	2900      	cmp	r1, #0
 8003664:	d1f6      	bne.n	8003654 <UART_CheckIdleState+0x2c>
      huart->gState = HAL_UART_STATE_READY;
 8003666:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8003668:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 800366a:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 800366c:	2300      	movs	r3, #0
 800366e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8003672:	b003      	add	sp, #12
 8003674:	bd30      	pop	{r4, r5, pc}
  huart->gState = HAL_UART_STATE_READY;
 8003676:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003678:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800367a:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800367c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003680:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003682:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 8003684:	e7f2      	b.n	800366c <UART_CheckIdleState+0x44>

08003686 <HAL_UART_Init>:
{
 8003686:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003688:	4604      	mov	r4, r0
 800368a:	b340      	cbz	r0, 80036de <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800368c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800368e:	b91b      	cbnz	r3, 8003698 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003690:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8003694:	f7fd ffec 	bl	8001670 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003698:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800369a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800369c:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800369e:	6813      	ldr	r3, [r2, #0]
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036a8:	b113      	cbz	r3, 80036b0 <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 80036aa:	4620      	mov	r0, r4
 80036ac:	f7ff fe60 	bl	8003370 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036b0:	4620      	mov	r0, r4
 80036b2:	f7ff fd1b 	bl	80030ec <UART_SetConfig>
 80036b6:	2801      	cmp	r0, #1
 80036b8:	d011      	beq.n	80036de <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ba:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80036bc:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036cc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	f042 0201 	orr.w	r2, r2, #1
}
 80036d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80036d8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80036da:	f7ff bfa5 	b.w	8003628 <UART_CheckIdleState>
}
 80036de:	2001      	movs	r0, #1
 80036e0:	bd10      	pop	{r4, pc}

080036e2 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80036e2:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80036e8:	9b01      	ldr	r3, [sp, #4]
 80036ea:	3301      	adds	r3, #1
 80036ec:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 80036ee:	9b01      	ldr	r3, [sp, #4]
 80036f0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80036f4:	d816      	bhi.n	8003724 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036f6:	6903      	ldr	r3, [r0, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	daf5      	bge.n	80036e8 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003700:	6903      	ldr	r3, [r0, #16]
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8003708:	9b01      	ldr	r3, [sp, #4]
 800370a:	3301      	adds	r3, #1
 800370c:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 800370e:	9b01      	ldr	r3, [sp, #4]
 8003710:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003714:	d806      	bhi.n	8003724 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003716:	6903      	ldr	r3, [r0, #16]
 8003718:	f013 0301 	ands.w	r3, r3, #1
 800371c:	d1f4      	bne.n	8003708 <USB_CoreReset+0x26>

  return HAL_OK;
 800371e:	4618      	mov	r0, r3
}
 8003720:	b002      	add	sp, #8
 8003722:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003724:	2003      	movs	r0, #3
 8003726:	e7fb      	b.n	8003720 <USB_CoreReset+0x3e>

08003728 <USB_CoreInit>:
{
 8003728:	b084      	sub	sp, #16
 800372a:	b538      	push	{r3, r4, r5, lr}
 800372c:	ad05      	add	r5, sp, #20
 800372e:	4604      	mov	r4, r0
 8003730:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003734:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d128      	bne.n	800378e <USB_CoreInit+0x66>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800373c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800373e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003742:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003744:	68c3      	ldr	r3, [r0, #12]
 8003746:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800374a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800374e:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003750:	68c3      	ldr	r3, [r0, #12]
 8003752:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003756:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8003758:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d103      	bne.n	8003768 <USB_CoreInit+0x40>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003760:	68c3      	ldr	r3, [r0, #12]
 8003762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003766:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8003768:	4620      	mov	r0, r4
 800376a:	f7ff ffba 	bl	80036e2 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800376e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d107      	bne.n	8003786 <USB_CoreInit+0x5e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003776:	68a3      	ldr	r3, [r4, #8]
 8003778:	f043 0306 	orr.w	r3, r3, #6
 800377c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800377e:	68a3      	ldr	r3, [r4, #8]
 8003780:	f043 0320 	orr.w	r3, r3, #32
 8003784:	60a3      	str	r3, [r4, #8]
}
 8003786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800378a:	b004      	add	sp, #16
 800378c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800378e:	68c3      	ldr	r3, [r0, #12]
 8003790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003794:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8003796:	f7ff ffa4 	bl	80036e2 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800379a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800379c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80037a2:	e7e4      	b.n	800376e <USB_CoreInit+0x46>

080037a4 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037a4:	6883      	ldr	r3, [r0, #8]
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	6083      	str	r3, [r0, #8]
}
 80037ac:	2000      	movs	r0, #0
 80037ae:	4770      	bx	lr

080037b0 <USB_SetCurrentMode>:
{
 80037b0:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037b2:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80037b4:	2901      	cmp	r1, #1
{
 80037b6:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80037bc:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80037be:	d10f      	bne.n	80037e0 <USB_SetCurrentMode+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037c0:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 80037c2:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037c8:	60c3      	str	r3, [r0, #12]
      HAL_Delay(10U);
 80037ca:	200a      	movs	r0, #10
      ms += 10U;
 80037cc:	340a      	adds	r4, #10
      HAL_Delay(10U);
 80037ce:	f7fe f8bb 	bl	8001948 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80037d2:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80037d4:	07d9      	lsls	r1, r3, #31
 80037d6:	d414      	bmi.n	8003802 <USB_SetCurrentMode+0x52>
 80037d8:	2cc8      	cmp	r4, #200	; 0xc8
 80037da:	d1f6      	bne.n	80037ca <USB_SetCurrentMode+0x1a>
    return HAL_ERROR;
 80037dc:	2001      	movs	r0, #1
}
 80037de:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 80037e0:	2900      	cmp	r1, #0
 80037e2:	d1fb      	bne.n	80037dc <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037e4:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 80037e6:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037ec:	60c3      	str	r3, [r0, #12]
      HAL_Delay(10U);
 80037ee:	200a      	movs	r0, #10
      ms += 10U;
 80037f0:	340a      	adds	r4, #10
      HAL_Delay(10U);
 80037f2:	f7fe f8a9 	bl	8001948 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80037f6:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80037f8:	07da      	lsls	r2, r3, #31
 80037fa:	d502      	bpl.n	8003802 <USB_SetCurrentMode+0x52>
 80037fc:	2cc8      	cmp	r4, #200	; 0xc8
 80037fe:	d1f6      	bne.n	80037ee <USB_SetCurrentMode+0x3e>
 8003800:	e7ec      	b.n	80037dc <USB_SetCurrentMode+0x2c>
    return HAL_ERROR;
 8003802:	f1a4 03c8 	sub.w	r3, r4, #200	; 0xc8
 8003806:	4258      	negs	r0, r3
 8003808:	4158      	adcs	r0, r3
 800380a:	e7e8      	b.n	80037de <USB_SetCurrentMode+0x2e>

0800380c <USB_FlushTxFifo>:
{
 800380c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	9301      	str	r3, [sp, #4]
    count++;
 8003812:	9b01      	ldr	r3, [sp, #4]
 8003814:	3301      	adds	r3, #1
 8003816:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003818:	9b01      	ldr	r3, [sp, #4]
 800381a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800381e:	d816      	bhi.n	800384e <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003820:	6903      	ldr	r3, [r0, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	daf5      	bge.n	8003812 <USB_FlushTxFifo+0x6>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003826:	0189      	lsls	r1, r1, #6
  count = 0U;
 8003828:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800382a:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800382e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003830:	6101      	str	r1, [r0, #16]
    count++;
 8003832:	9b01      	ldr	r3, [sp, #4]
 8003834:	3301      	adds	r3, #1
 8003836:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003838:	9b01      	ldr	r3, [sp, #4]
 800383a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800383e:	d806      	bhi.n	800384e <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003840:	6903      	ldr	r3, [r0, #16]
 8003842:	f013 0320 	ands.w	r3, r3, #32
 8003846:	d1f4      	bne.n	8003832 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8003848:	4618      	mov	r0, r3
}
 800384a:	b002      	add	sp, #8
 800384c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800384e:	2003      	movs	r0, #3
 8003850:	e7fb      	b.n	800384a <USB_FlushTxFifo+0x3e>

08003852 <USB_FlushRxFifo>:
{
 8003852:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	9301      	str	r3, [sp, #4]
    count++;
 8003858:	9b01      	ldr	r3, [sp, #4]
 800385a:	3301      	adds	r3, #1
 800385c:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800385e:	9b01      	ldr	r3, [sp, #4]
 8003860:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003864:	d814      	bhi.n	8003890 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003866:	6903      	ldr	r3, [r0, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	daf5      	bge.n	8003858 <USB_FlushRxFifo+0x6>
  count = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003870:	2310      	movs	r3, #16
 8003872:	6103      	str	r3, [r0, #16]
    count++;
 8003874:	9b01      	ldr	r3, [sp, #4]
 8003876:	3301      	adds	r3, #1
 8003878:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800387a:	9b01      	ldr	r3, [sp, #4]
 800387c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003880:	d806      	bhi.n	8003890 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003882:	6903      	ldr	r3, [r0, #16]
 8003884:	f013 0310 	ands.w	r3, r3, #16
 8003888:	d1f4      	bne.n	8003874 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 800388a:	4618      	mov	r0, r3
}
 800388c:	b002      	add	sp, #8
 800388e:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003890:	2003      	movs	r0, #3
 8003892:	e7fb      	b.n	800388c <USB_FlushRxFifo+0x3a>

08003894 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8003894:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003898:	4319      	orrs	r1, r3
 800389a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800389e:	2000      	movs	r0, #0
 80038a0:	4770      	bx	lr
	...

080038a4 <USB_DevInit>:
{
 80038a4:	b084      	sub	sp, #16
 80038a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038aa:	4604      	mov	r4, r0
 80038ac:	a809      	add	r0, sp, #36	; 0x24
 80038ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80038b2:	2300      	movs	r3, #0
 80038b4:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 80038b8:	f89d 502e 	ldrb.w	r5, [sp, #46]	; 0x2e
    USBx->DIEPTXF[i] = 0U;
 80038bc:	4619      	mov	r1, r3
 80038be:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80038c2:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80038c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80038c8:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80038ca:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80038cc:	d1f7      	bne.n	80038be <USB_DevInit+0x1a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038ce:	f504 6700 	add.w	r7, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 80038d2:	2d00      	cmp	r5, #0
 80038d4:	d16c      	bne.n	80039b0 <USB_DevInit+0x10c>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f043 0302 	orr.w	r3, r3, #2
 80038dc:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80038de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038e4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ec:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f4:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038fc:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8003900:	2b01      	cmp	r3, #1
 8003902:	d15c      	bne.n	80039be <USB_DevInit+0x11a>
    if (cfg.speed == USBD_HS_SPEED)
 8003904:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
 8003908:	2900      	cmp	r1, #0
 800390a:	d156      	bne.n	80039ba <USB_DevInit+0x116>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800390c:	4620      	mov	r0, r4
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800390e:	f64f 387f 	movw	r8, #64383	; 0xfb7f
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003912:	f7ff ffbf 	bl	8003894 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003916:	2110      	movs	r1, #16
 8003918:	4620      	mov	r0, r4
 800391a:	f7ff ff77 	bl	800380c <USB_FlushTxFifo>
 800391e:	4602      	mov	r2, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003920:	4620      	mov	r0, r4
 8003922:	f7ff ff96 	bl	8003852 <USB_FlushRxFifo>
 8003926:	4310      	orrs	r0, r2
  USBx_DEVICE->DIEPMSK = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800392e:	b2c0      	uxtb	r0, r0
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003930:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8003934:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003936:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    ret = HAL_ERROR;
 800393a:	3800      	subs	r0, #0
  USBx_DEVICE->DIEPMSK = 0U;
 800393c:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800393e:	617b      	str	r3, [r7, #20]
    ret = HAL_ERROR;
 8003940:	bf18      	it	ne
 8003942:	2001      	movne	r0, #1
  USBx_DEVICE->DAINTMSK = 0U;
 8003944:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003946:	429e      	cmp	r6, r3
 8003948:	d83b      	bhi.n	80039c2 <USB_DevInit+0x11e>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800394a:	2200      	movs	r2, #0
 800394c:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003950:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003954:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003958:	4611      	mov	r1, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800395a:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800395e:	4296      	cmp	r6, r2
 8003960:	d842      	bhi.n	80039e8 <USB_DevInit+0x144>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003968:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800396e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8003972:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8003974:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8003978:	b91b      	cbnz	r3, 8003982 <USB_DevInit+0xde>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800397a:	69a3      	ldr	r3, [r4, #24]
 800397c:	f043 0310 	orr.w	r3, r3, #16
 8003980:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003982:	69a2      	ldr	r2, [r4, #24]
 8003984:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <USB_DevInit+0x16c>)
 8003986:	4313      	orrs	r3, r2
 8003988:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800398a:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 800398e:	b11b      	cbz	r3, 8003998 <USB_DevInit+0xf4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003990:	69a3      	ldr	r3, [r4, #24]
 8003992:	f043 0308 	orr.w	r3, r3, #8
 8003996:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003998:	2d01      	cmp	r5, #1
 800399a:	d105      	bne.n	80039a8 <USB_DevInit+0x104>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800399c:	69a3      	ldr	r3, [r4, #24]
 800399e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039a2:	f043 0304 	orr.w	r3, r3, #4
 80039a6:	61a3      	str	r3, [r4, #24]
}
 80039a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039ac:	b004      	add	sp, #16
 80039ae:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80039b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80039b8:	e79d      	b.n	80038f6 <USB_DevInit+0x52>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039ba:	4619      	mov	r1, r3
 80039bc:	e7a6      	b.n	800390c <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039be:	2103      	movs	r1, #3
 80039c0:	e7a4      	b.n	800390c <USB_DevInit+0x68>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039c2:	f8d2 9000 	ldr.w	r9, [r2]
 80039c6:	f1b9 0f00 	cmp.w	r9, #0
 80039ca:	da0b      	bge.n	80039e4 <USB_DevInit+0x140>
      if (i == 0U)
 80039cc:	b93b      	cbnz	r3, 80039de <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039ce:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039d2:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039d4:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039d6:	f8c2 8008 	str.w	r8, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039da:	3220      	adds	r2, #32
 80039dc:	e7b3      	b.n	8003946 <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039de:	f8c2 c000 	str.w	ip, [r2]
 80039e2:	e7f6      	b.n	80039d2 <USB_DevInit+0x12e>
      USBx_INEP(i)->DIEPCTL = 0U;
 80039e4:	6011      	str	r1, [r2, #0]
 80039e6:	e7f4      	b.n	80039d2 <USB_DevInit+0x12e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039e8:	f8d3 9000 	ldr.w	r9, [r3]
 80039ec:	f1b9 0f00 	cmp.w	r9, #0
 80039f0:	da0b      	bge.n	8003a0a <USB_DevInit+0x166>
      if (i == 0U)
 80039f2:	b93a      	cbnz	r2, 8003a04 <USB_DevInit+0x160>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039f4:	f8c3 e000 	str.w	lr, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039f8:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039fa:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039fc:	f8c3 8008 	str.w	r8, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a00:	3320      	adds	r3, #32
 8003a02:	e7ac      	b.n	800395e <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a04:	f8c3 c000 	str.w	ip, [r3]
 8003a08:	e7f6      	b.n	80039f8 <USB_DevInit+0x154>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a0a:	6019      	str	r1, [r3, #0]
 8003a0c:	e7f4      	b.n	80039f8 <USB_DevInit+0x154>
 8003a0e:	bf00      	nop
 8003a10:	803c3800 	.word	0x803c3800

08003a14 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a14:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003a18:	f023 0303 	bic.w	r3, r3, #3
 8003a1c:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a20:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003a24:	f043 0302 	orr.w	r3, r3, #2
 8003a28:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	4770      	bx	lr

08003a30 <write_callback>:
  o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool res = true;
 8003a32:	2001      	movs	r0, #1
{
 8003a34:	460e      	mov	r6, r1
 8003a36:	4614      	mov	r4, r2
  uint8_t *pr = (uint8_t *)buf;

  UNUSED(stream);

  while (count) {
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8003a38:	4d0c      	ldr	r5, [pc, #48]	; (8003a6c <write_callback+0x3c>)
      pr++;
      count--;
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
      res = write_packet();
      o_packet.pw = 0;
 8003a3a:	2700      	movs	r7, #0
  while (count) {
 8003a3c:	b93c      	cbnz	r4, 8003a4e <write_callback+0x1e>
 8003a3e:	e00b      	b.n	8003a58 <write_callback+0x28>
      o_packet.payload[o_packet.pw] = *pr;
 8003a40:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003a44:	18ea      	adds	r2, r5, r3
      count--;
 8003a46:	3c01      	subs	r4, #1
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8003a48:	3301      	adds	r3, #1
      o_packet.payload[o_packet.pw] = *pr;
 8003a4a:	7051      	strb	r1, [r2, #1]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8003a4c:	702b      	strb	r3, [r5, #0]
 8003a4e:	782b      	ldrb	r3, [r5, #0]
 8003a50:	2b1f      	cmp	r3, #31
 8003a52:	d802      	bhi.n	8003a5a <write_callback+0x2a>
 8003a54:	2c00      	cmp	r4, #0
 8003a56:	d1f3      	bne.n	8003a40 <write_callback+0x10>
    }
  }
  return res;
}
 8003a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d1ee      	bne.n	8003a3c <write_callback+0xc>
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8003a5e:	2121      	movs	r1, #33	; 0x21
 8003a60:	4628      	mov	r0, r5
 8003a62:	f000 fc8b 	bl	800437c <ioRawWriteBuffer>
      o_packet.pw = 0;
 8003a66:	702f      	strb	r7, [r5, #0]
 8003a68:	e7e8      	b.n	8003a3c <write_callback+0xc>
 8003a6a:	bf00      	nop
 8003a6c:	20004bb0 	.word	0x20004bb0

08003a70 <read_callback>:
  i_packet.pr = 0xFF;
  i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 8003a70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003a74:	460c      	mov	r4, r1
  bool res = true;
  uint8_t *pw = (uint8_t *)buf;

  UNUSED(stream);

  if (count == 0)
 8003a76:	4615      	mov	r5, r2
 8003a78:	b35a      	cbz	r2, 8003ad2 <read_callback+0x62>
    return true;

  if (i_packet.pr == 0xFF)
 8003a7a:	4e20      	ldr	r6, [pc, #128]	; (8003afc <read_callback+0x8c>)
 8003a7c:	4f20      	ldr	r7, [pc, #128]	; (8003b00 <read_callback+0x90>)
 8003a7e:	7833      	ldrb	r3, [r6, #0]
 8003a80:	2bff      	cmp	r3, #255	; 0xff
 8003a82:	d008      	beq.n	8003a96 <read_callback+0x26>

  if (res == false)
    return res;

  while (count) {
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8003a84:	f04f 0900 	mov.w	r9, #0
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8003a88:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003afc <read_callback+0x8c>
 8003a8c:	683b      	ldr	r3, [r7, #0]
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8003a8e:	2200      	movs	r2, #0
 8003a90:	18f0      	adds	r0, r6, r3
 8003a92:	1b1b      	subs	r3, r3, r4
 8003a94:	e013      	b.n	8003abe <read_callback+0x4e>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8003a96:	2121      	movs	r1, #33	; 0x21
 8003a98:	4630      	mov	r0, r6
 8003a9a:	f000 fc7d 	bl	8004398 <ioRawReadBuffer>
  i_ridx = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	603b      	str	r3, [r7, #0]
  if (res == false)
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d1ee      	bne.n	8003a84 <read_callback+0x14>
      read_packet();
    }
  }

  return res;
}
 8003aa6:	b003      	add	sp, #12
 8003aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *pw = i_packet.payload[i_ridx];
 8003aac:	f810 2f01 	ldrb.w	r2, [r0, #1]!
      count--;
 8003ab0:	3d01      	subs	r5, #1
      *pw = i_packet.payload[i_ridx];
 8003ab2:	f804 2b01 	strb.w	r2, [r4], #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8003ab6:	7832      	ldrb	r2, [r6, #0]
 8003ab8:	3a01      	subs	r2, #1
 8003aba:	7032      	strb	r2, [r6, #0]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f896 c000 	ldrb.w	ip, [r6]
 8003ac2:	18e1      	adds	r1, r4, r3
 8003ac4:	f1bc 0f00 	cmp.w	ip, #0
 8003ac8:	d005      	beq.n	8003ad6 <read_callback+0x66>
 8003aca:	2d00      	cmp	r5, #0
 8003acc:	d1ee      	bne.n	8003aac <read_callback+0x3c>
 8003ace:	b102      	cbz	r2, 8003ad2 <read_callback+0x62>
 8003ad0:	6039      	str	r1, [r7, #0]
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	e7e7      	b.n	8003aa6 <read_callback+0x36>
 8003ad6:	b102      	cbz	r2, 8003ada <read_callback+0x6a>
 8003ad8:	6039      	str	r1, [r7, #0]
    if (count && i_packet.pr == 0) {
 8003ada:	2d00      	cmp	r5, #0
 8003adc:	d0f9      	beq.n	8003ad2 <read_callback+0x62>
      uint8_t sync = 0xAA;
 8003ade:	23aa      	movs	r3, #170	; 0xaa
      ioRawWriteBuffer(&sync, 1);
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	f10d 0007 	add.w	r0, sp, #7
      uint8_t sync = 0xAA;
 8003ae6:	f88d 3007 	strb.w	r3, [sp, #7]
      ioRawWriteBuffer(&sync, 1);
 8003aea:	f000 fc47 	bl	800437c <ioRawWriteBuffer>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8003aee:	2121      	movs	r1, #33	; 0x21
 8003af0:	4640      	mov	r0, r8
 8003af2:	f000 fc51 	bl	8004398 <ioRawReadBuffer>
  i_ridx = 0;
 8003af6:	f8c7 9000 	str.w	r9, [r7]
  while (count) {
 8003afa:	e7c7      	b.n	8003a8c <read_callback+0x1c>
 8003afc:	20004b88 	.word	0x20004b88
 8003b00:	20004bac 	.word	0x20004bac

08003b04 <pb_io_flush_ostream>:
{
 8003b04:	b510      	push	{r4, lr}
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8003b06:	4c06      	ldr	r4, [pc, #24]	; (8003b20 <pb_io_flush_ostream+0x1c>)
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8003b08:	2121      	movs	r1, #33	; 0x21
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8003b0a:	7823      	ldrb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8003b0c:	4620      	mov	r0, r4
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8003b0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b12:	7023      	strb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8003b14:	f000 fc32 	bl	800437c <ioRawWriteBuffer>
  o_packet.pw = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	7023      	strb	r3, [r4, #0]
}
 8003b1c:	bd10      	pop	{r4, pc}
 8003b1e:	bf00      	nop
 8003b20:	20004bb0 	.word	0x20004bb0

08003b24 <pb_io_flush_istream>:
  i_packet.pr = 0xFF;
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <pb_io_flush_istream+0x10>)
 8003b26:	22ff      	movs	r2, #255	; 0xff
 8003b28:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	4b02      	ldr	r3, [pc, #8]	; (8003b38 <pb_io_flush_istream+0x14>)
 8003b2e:	601a      	str	r2, [r3, #0]
}
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20004b88 	.word	0x20004b88
 8003b38:	20004bac 	.word	0x20004bac

08003b3c <pb_io_ostream>:
#ifndef PB_NO_ERRMSG
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0, NULL};
#else
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
#endif
  return stream;
 8003b3c:	4a04      	ldr	r2, [pc, #16]	; (8003b50 <pb_io_ostream+0x14>)
 8003b3e:	e9c0 2100 	strd	r2, r1, [r0]
 8003b42:	f04f 31ff 	mov.w	r1, #4294967295
 8003b46:	2200      	movs	r2, #0
 8003b48:	e9c0 1202 	strd	r1, r2, [r0, #8]
}
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	08003a31 	.word	0x08003a31

08003b54 <pb_io_istream>:
#ifndef PB_NO_ERRMSG
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX, NULL};
#else
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
#endif
  return stream;
 8003b54:	4a03      	ldr	r2, [pc, #12]	; (8003b64 <pb_io_istream+0x10>)
 8003b56:	e9c0 2100 	strd	r2, r1, [r0]
 8003b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5e:	6082      	str	r2, [r0, #8]
}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	08003a71 	.word	0x08003a71

08003b68 <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 8003b68:	b508      	push	{r3, lr}
  ioRawDisableLLWrite();
 8003b6a:	f000 fc23 	bl	80043b4 <ioRawDisableLLWrite>
  return 0;
}
 8003b6e:	2000      	movs	r0, #0
 8003b70:	bd08      	pop	{r3, pc}

08003b72 <encode_uint32>:
/*
 * Callback function to encode array of uint32
 */
bool encode_uint32(pb_ostream_t *stream, const pb_field_t *field,
                   void * const *arg)
{
 8003b72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct _encode_uint32* array = (struct _encode_uint32 *)*arg;
 8003b76:	f8d2 8000 	ldr.w	r8, [r2]
  int offset = (array->offset == 0)?4:array->offset;
  for (size_t i = 0; i < array->size; i++)
 8003b7a:	2600      	movs	r6, #0
{
 8003b7c:	4607      	mov	r7, r0
 8003b7e:	4689      	mov	r9, r1
  int offset = (array->offset == 0)?4:array->offset;
 8003b80:	f8d8 4008 	ldr.w	r4, [r8, #8]
  for (size_t i = 0; i < array->size; i++)
 8003b84:	4635      	mov	r5, r6
 8003b86:	2c00      	cmp	r4, #0
 8003b88:	bf08      	it	eq
 8003b8a:	2404      	moveq	r4, #4
 8003b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b90:	42ab      	cmp	r3, r5
 8003b92:	d801      	bhi.n	8003b98 <encode_uint32+0x26>
    else
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
      return false;
  }
  return true;
 8003b94:	2001      	movs	r0, #1
 8003b96:	e005      	b.n	8003ba4 <encode_uint32+0x32>
    if (!pb_encode_tag_for_field(stream, field))
 8003b98:	4649      	mov	r1, r9
 8003b9a:	4638      	mov	r0, r7
 8003b9c:	f003 fbfe 	bl	800739c <pb_encode_tag_for_field>
 8003ba0:	b910      	cbnz	r0, 8003ba8 <encode_uint32+0x36>
      return false;
 8003ba2:	2000      	movs	r0, #0
}
 8003ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8003ba8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (offset == 2)
 8003bac:	2c02      	cmp	r4, #2
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8003bae:	4638      	mov	r0, r7
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
 8003bb0:	bf18      	it	ne
 8003bb2:	599a      	ldrne	r2, [r3, r6]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8003bb4:	4426      	add	r6, r4
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8003bb6:	bf08      	it	eq
 8003bb8:	f833 2015 	ldrheq.w	r2, [r3, r5, lsl #1]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8003bbc:	17d3      	asrs	r3, r2, #31
 8003bbe:	f003 fb44 	bl	800724a <pb_encode_varint>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d0ed      	beq.n	8003ba2 <encode_uint32+0x30>
  for (size_t i = 0; i < array->size; i++)
 8003bc6:	3501      	adds	r5, #1
 8003bc8:	e7e0      	b.n	8003b8c <encode_uint32+0x1a>

08003bca <encode_data_cb>:
/*
 * Local callback function to encode datas field from aiDataMsg msg
 */
bool encode_data_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 8003bca:	b570      	push	{r4, r5, r6, lr}
  aiPbData *data = (aiPbData *)*arg;
 8003bcc:	6815      	ldr	r5, [r2, #0]
{
 8003bce:	4604      	mov	r4, r0

  pb_byte_t *pr = (pb_byte_t *)data->addr;
 8003bd0:	68ae      	ldr	r6, [r5, #8]

  if (!pb_encode_tag_for_field(stream, field))
 8003bd2:	f003 fbe3 	bl	800739c <pb_encode_tag_for_field>
 8003bd6:	b130      	cbz	r0, 8003be6 <encode_data_cb+0x1c>
    return false;

  if (!pb_encode_string(stream, pr, data->size))
 8003bd8:	686a      	ldr	r2, [r5, #4]
 8003bda:	4631      	mov	r1, r6
 8003bdc:	4620      	mov	r0, r4
    return false;

  return true;
}
 8003bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (!pb_encode_string(stream, pr, data->size))
 8003be2:	f003 bd0f 	b.w	8007604 <pb_encode_string>
}
 8003be6:	bd70      	pop	{r4, r5, r6, pc}

08003be8 <decode_data_cb>:
{
 8003be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  aiPbData *data = (aiPbData *)*arg;
 8003bea:	6814      	ldr	r4, [r2, #0]
{
 8003bec:	4605      	mov	r5, r0
  data->nb_read = 0;
 8003bee:	2300      	movs	r3, #0
  uint8_t *pw = (uint8_t *)data->addr;
 8003bf0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
    data->nb_read += itsize;
 8003bf4:	60e3      	str	r3, [r4, #12]
  while (stream->bytes_left) {
 8003bf6:	68ab      	ldr	r3, [r5, #8]
 8003bf8:	b913      	cbnz	r3, 8003c00 <decode_data_cb+0x18>
  return true;
 8003bfa:	2001      	movs	r0, #1
}
 8003bfc:	b003      	add	sp, #12
 8003bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 8003c00:	2201      	movs	r2, #1
 8003c02:	4669      	mov	r1, sp
 8003c04:	4628      	mov	r0, r5
 8003c06:	f002 fec5 	bl	8006994 <pb_read>
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d0f6      	beq.n	8003bfc <decode_data_cb+0x14>
    if ((pw) && (maxr > 0)) /* additional data are skipped */
 8003c0e:	b13f      	cbz	r7, 8003c20 <decode_data_cb+0x38>
 8003c10:	2e00      	cmp	r6, #0
      *pw = *(uint8_t *)&number;
 8003c12:	bfc2      	ittt	gt
 8003c14:	f89d 3000 	ldrbgt.w	r3, [sp]
      maxr--;
 8003c18:	f106 36ff 	addgt.w	r6, r6, #4294967295
      *pw = *(uint8_t *)&number;
 8003c1c:	f807 3b01 	strbgt.w	r3, [r7], #1
    data->nb_read += itsize;
 8003c20:	68e3      	ldr	r3, [r4, #12]
 8003c22:	3301      	adds	r3, #1
 8003c24:	e7e6      	b.n	8003bf4 <decode_data_cb+0xc>
	...

08003c28 <aiPbMgrInit>:
{
 8003c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c2a:	b089      	sub	sp, #36	; 0x24
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8003c2c:	4c1a      	ldr	r4, [pc, #104]	; (8003c98 <aiPbMgrInit+0x70>)
 8003c2e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8003c32:	2100      	movs	r1, #0
  pbContextMgr.input = pb_io_istream(0);
 8003c34:	ae04      	add	r6, sp, #16
{
 8003c36:	4605      	mov	r5, r0
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8003c38:	4620      	mov	r0, r4
  pbContextMgr.output = pb_io_ostream(0);
 8003c3a:	f104 070c 	add.w	r7, r4, #12
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8003c3e:	f007 fc94 	bl	800b56a <memset>
  pb_io_stream_init();
 8003c42:	f7ff ff91 	bl	8003b68 <pb_io_stream_init>
  pbContextMgr.input = pb_io_istream(0);
 8003c46:	4630      	mov	r0, r6
 8003c48:	2100      	movs	r1, #0
 8003c4a:	f7ff ff83 	bl	8003b54 <pb_io_istream>
 8003c4e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  pbContextMgr.output = pb_io_ostream(0);
 8003c52:	466e      	mov	r6, sp
  pbContextMgr.input = pb_io_istream(0);
 8003c54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pbContextMgr.output = pb_io_ostream(0);
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	f7ff ff6e 	bl	8003b3c <pb_io_ostream>
 8003c60:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003c64:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  pbContextMgr.n_func = 0;
 8003c68:	2300      	movs	r3, #0
  pbContextMgr.funcs = NULL;
 8003c6a:	e9c4 3307 	strd	r3, r3, [r4, #28]
  if (funcs) {
 8003c6e:	b97d      	cbnz	r5, 8003c90 <aiPbMgrInit+0x68>
  pbContextMgr.state = PB_MGR_READY;
 8003c70:	2301      	movs	r3, #1
 8003c72:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
}
 8003c76:	b009      	add	sp, #36	; 0x24
 8003c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cfunc++;
 8003c7a:	320c      	adds	r2, #12
 8003c7c:	4633      	mov	r3, r6
 8003c7e:	2101      	movs	r1, #1
    while (cfunc->process) {
 8003c80:	6850      	ldr	r0, [r2, #4]
 8003c82:	1c5e      	adds	r6, r3, #1
 8003c84:	2800      	cmp	r0, #0
 8003c86:	d1f8      	bne.n	8003c7a <aiPbMgrInit+0x52>
 8003c88:	b101      	cbz	r1, 8003c8c <aiPbMgrInit+0x64>
 8003c8a:	6223      	str	r3, [r4, #32]
    pbContextMgr.funcs = funcs;
 8003c8c:	61e5      	str	r5, [r4, #28]
 8003c8e:	e7ef      	b.n	8003c70 <aiPbMgrInit+0x48>
 8003c90:	462a      	mov	r2, r5
 8003c92:	4619      	mov	r1, r3
 8003c94:	e7f4      	b.n	8003c80 <aiPbMgrInit+0x58>
 8003c96:	bf00      	nop
 8003c98:	20004bd8 	.word	0x20004bd8

08003c9c <aiPbStrCopy>:
{
 8003c9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003c9e:	4616      	mov	r6, r2
  const char undef[] = "UNDEFINED";
 8003ca0:	4a10      	ldr	r2, [pc, #64]	; (8003ce4 <aiPbStrCopy+0x48>)
{
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	460c      	mov	r4, r1
  const char undef[] = "UNDEFINED";
 8003ca6:	6810      	ldr	r0, [r2, #0]
 8003ca8:	ab01      	add	r3, sp, #4
 8003caa:	6851      	ldr	r1, [r2, #4]
 8003cac:	8912      	ldrh	r2, [r2, #8]
 8003cae:	c303      	stmia	r3!, {r0, r1}
  size_t l = strlen(src);
 8003cb0:	4628      	mov	r0, r5
  const char undef[] = "UNDEFINED";
 8003cb2:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 8003cb4:	f7fc fafc 	bl	80002b0 <strlen>
  if (l > max)
 8003cb8:	42b0      	cmp	r0, r6
    l = max-1;
 8003cba:	bf88      	it	hi
 8003cbc:	f106 30ff 	addhi.w	r0, r6, #4294967295
  if (!dst)
 8003cc0:	b174      	cbz	r4, 8003ce0 <aiPbStrCopy+0x44>
  if (src && l)
 8003cc2:	b138      	cbz	r0, 8003cd4 <aiPbStrCopy+0x38>
    memcpy(dst, src, l+1);
 8003cc4:	1c42      	adds	r2, r0, #1
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	4620      	mov	r0, r4
}
 8003cca:	b004      	add	sp, #16
 8003ccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(dst, src, l+1);
 8003cd0:	f007 bced 	b.w	800b6ae <memcpy>
    memcpy(dst, undef, strlen(undef)+1);
 8003cd4:	ab01      	add	r3, sp, #4
 8003cd6:	cb03      	ldmia	r3!, {r0, r1}
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	6020      	str	r0, [r4, #0]
 8003cdc:	6061      	str	r1, [r4, #4]
 8003cde:	8123      	strh	r3, [r4, #8]
}
 8003ce0:	b004      	add	sp, #16
 8003ce2:	bd70      	pop	{r4, r5, r6, pc}
 8003ce4:	0800dee8 	.word	0x0800dee8

08003ce8 <encode_tensor_desc>:
{
 8003ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cec:	4605      	mov	r5, r0
 8003cee:	b09c      	sub	sp, #112	; 0x70
 8003cf0:	4688      	mov	r8, r1
  struct _encode_tensor_desc* tensors = (struct _encode_tensor_desc *)*arg;
 8003cf2:	6816      	ldr	r6, [r2, #0]
  for (size_t i = 0; i < tensors->size; i++)
 8003cf4:	2400      	movs	r4, #0
    msg.dims.funcs.encode = encode_uint32;
 8003cf6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8003d48 <encode_tensor_desc+0x60>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 8003cfa:	f8df a050 	ldr.w	sl, [pc, #80]	; 8003d4c <encode_tensor_desc+0x64>
  for (size_t i = 0; i < tensors->size; i++)
 8003cfe:	6873      	ldr	r3, [r6, #4]
 8003d00:	42a3      	cmp	r3, r4
 8003d02:	d801      	bhi.n	8003d08 <encode_tensor_desc+0x20>
  return true;
 8003d04:	2001      	movs	r0, #1
 8003d06:	e01c      	b.n	8003d42 <encode_tensor_desc+0x5a>
    aiTensorDescMsg msg = aiTensorDescMsg_init_zero;
 8003d08:	2264      	movs	r2, #100	; 0x64
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	a803      	add	r0, sp, #12
 8003d0e:	f007 fc2c 	bl	800b56a <memset>
    tensors->cb(i, tensors->data, &msg, &array_u32);
 8003d12:	68b1      	ldr	r1, [r6, #8]
 8003d14:	4620      	mov	r0, r4
 8003d16:	466b      	mov	r3, sp
 8003d18:	aa03      	add	r2, sp, #12
 8003d1a:	6837      	ldr	r7, [r6, #0]
 8003d1c:	47b8      	blx	r7
    if (!pb_encode_tag_for_field(stream, field))
 8003d1e:	4641      	mov	r1, r8
 8003d20:	4628      	mov	r0, r5
    msg.dims.funcs.encode = encode_uint32;
 8003d22:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
    msg.dims.arg = &array_u32;
 8003d26:	f8cd d05c 	str.w	sp, [sp, #92]	; 0x5c
    if (!pb_encode_tag_for_field(stream, field))
 8003d2a:	f003 fb37 	bl	800739c <pb_encode_tag_for_field>
 8003d2e:	b138      	cbz	r0, 8003d40 <encode_tensor_desc+0x58>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 8003d30:	aa03      	add	r2, sp, #12
 8003d32:	4651      	mov	r1, sl
 8003d34:	4628      	mov	r0, r5
 8003d36:	f003 fca8 	bl	800768a <pb_encode_submessage>
 8003d3a:	b108      	cbz	r0, 8003d40 <encode_tensor_desc+0x58>
  for (size_t i = 0; i < tensors->size; i++)
 8003d3c:	3401      	adds	r4, #1
 8003d3e:	e7de      	b.n	8003cfe <encode_tensor_desc+0x16>
      return false;
 8003d40:	2000      	movs	r0, #0
}
 8003d42:	b01c      	add	sp, #112	; 0x70
 8003d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d48:	08003b73 	.word	0x08003b73
 8003d4c:	080dc294 	.word	0x080dc294

08003d50 <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
    EnumState state)
{
 8003d50:	b508      	push	{r3, lr}
  resp->reqid = req->reqid;
 8003d52:	6803      	ldr	r3, [r0, #0]
  resp->state = state;
 8003d54:	710a      	strb	r2, [r1, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8003d56:	460a      	mov	r2, r1
  resp->reqid = req->reqid;
 8003d58:	600b      	str	r3, [r1, #0]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8003d5a:	4804      	ldr	r0, [pc, #16]	; (8003d6c <aiPbMgrSendResp+0x1c>)
 8003d5c:	4904      	ldr	r1, [pc, #16]	; (8003d70 <aiPbMgrSendResp+0x20>)
 8003d5e:	f003 fc1d 	bl	800759c <pb_encode>
  pb_io_flush_ostream();
}
 8003d62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pb_io_flush_ostream();
 8003d66:	f7ff becd 	b.w	8003b04 <pb_io_flush_ostream>
 8003d6a:	bf00      	nop
 8003d6c:	20004be4 	.word	0x20004be4
 8003d70:	080dc410 	.word	0x080dc410

08003d74 <aiPbMgrWaitAndProcess>:
{
 8003d74:	b570      	push	{r4, r5, r6, lr}
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8003d76:	4c1d      	ldr	r4, [pc, #116]	; (8003dec <aiPbMgrWaitAndProcess+0x78>)
  pb_io_flush_istream();
 8003d78:	f7ff fed4 	bl	8003b24 <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8003d7c:	491c      	ldr	r1, [pc, #112]	; (8003df0 <aiPbMgrWaitAndProcess+0x7c>)
 8003d7e:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8003d82:	4620      	mov	r0, r4
 8003d84:	f003 f98b 	bl	800709e <pb_decode_delimited>
 8003d88:	b348      	cbz	r0, 8003dde <aiPbMgrWaitAndProcess+0x6a>
    pb_io_flush_istream();
 8003d8a:	f7ff fecb 	bl	8003b24 <pb_io_flush_istream>
    pbContextMgr.state = PB_MGR_ON_GOING;
 8003d8e:	2302      	movs	r3, #2
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8003d90:	6a21      	ldr	r1, [r4, #32]
 8003d92:	2500      	movs	r5, #0
    pbContextMgr.state = PB_MGR_ON_GOING;
 8003d94:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8003d98:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8003d9c:	69e3      	ldr	r3, [r4, #28]
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8003d9e:	42a9      	cmp	r1, r5
 8003da0:	d00d      	beq.n	8003dbe <aiPbMgrWaitAndProcess+0x4a>
      cfunc = &pbContextMgr.funcs[idx];
 8003da2:	461a      	mov	r2, r3
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8003da4:	f813 6b0c 	ldrb.w	r6, [r3], #12
 8003da8:	4286      	cmp	r6, r0
 8003daa:	d11c      	bne.n	8003de6 <aiPbMgrWaitAndProcess+0x72>
        cfunc->process(&(pbContextMgr.req), &(pbContextMgr.resp), cfunc->param);
 8003dac:	4911      	ldr	r1, [pc, #68]	; (8003df4 <aiPbMgrWaitAndProcess+0x80>)
 8003dae:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
 8003db2:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
 8003db6:	4798      	blx	r3
    if (idx == pbContextMgr.n_func) {
 8003db8:	6a23      	ldr	r3, [r4, #32]
 8003dba:	42ab      	cmp	r3, r5
 8003dbc:	d10c      	bne.n	8003dd8 <aiPbMgrWaitAndProcess+0x64>
    EnumState state, uint32_t param, EnumError error)
{
  resp->which_payload = respMsg_ack_tag;
  resp->payload.ack.param = param;
  resp->payload.ack.error = error;
  aiPbMgrSendResp(req, resp, state);
 8003dbe:	490d      	ldr	r1, [pc, #52]	; (8003df4 <aiPbMgrWaitAndProcess+0x80>)
  resp->payload.ack.param = param;
 8003dc0:	2204      	movs	r2, #4
  resp->which_payload = respMsg_ack_tag;
 8003dc2:	230c      	movs	r3, #12
  aiPbMgrSendResp(req, resp, state);
 8003dc4:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
  resp->payload.ack.param = param;
 8003dc8:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  resp->which_payload = respMsg_ack_tag;
 8003dcc:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
  resp->payload.ack.error = error;
 8003dd0:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  aiPbMgrSendResp(req, resp, state);
 8003dd4:	f7ff ffbc 	bl	8003d50 <aiPbMgrSendResp>
    pbContextMgr.state = PB_MGR_READY;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
  pb_io_flush_istream();
 8003dde:	f7ff fea1 	bl	8003b24 <pb_io_flush_istream>
}
 8003de2:	2000      	movs	r0, #0
 8003de4:	bd70      	pop	{r4, r5, r6, pc}
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8003de6:	3501      	adds	r5, #1
 8003de8:	e7d9      	b.n	8003d9e <aiPbMgrWaitAndProcess+0x2a>
 8003dea:	bf00      	nop
 8003dec:	20004bd8 	.word	0x20004bd8
 8003df0:	080dc3b0 	.word	0x080dc3b0
 8003df4:	20004c50 	.word	0x20004c50

08003df8 <aiPbMgrSendAck>:
{
 8003df8:	b470      	push	{r4, r5, r6}
  resp->which_payload = respMsg_ack_tag;
 8003dfa:	260c      	movs	r6, #12
{
 8003dfc:	f89d 500c 	ldrb.w	r5, [sp, #12]
  resp->payload.ack.param = param;
 8003e00:	608b      	str	r3, [r1, #8]
  resp->which_payload = respMsg_ack_tag;
 8003e02:	80ce      	strh	r6, [r1, #6]
  resp->payload.ack.error = error;
 8003e04:	730d      	strb	r5, [r1, #12]
}
 8003e06:	bc70      	pop	{r4, r5, r6}
  aiPbMgrSendResp(req, resp, state);
 8003e08:	f7ff bfa2 	b.w	8003d50 <aiPbMgrSendResp>

08003e0c <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 8003e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;
 8003e0e:	2300      	movs	r3, #0
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8003e10:	aa02      	add	r2, sp, #8
 8003e12:	4907      	ldr	r1, [pc, #28]	; (8003e30 <aiPbMgrWaitAck+0x24>)
 8003e14:	4807      	ldr	r0, [pc, #28]	; (8003e34 <aiPbMgrWaitAck+0x28>)
  ackMsg ack = ackMsg_init_default;
 8003e16:	9302      	str	r3, [sp, #8]
 8003e18:	f88d 300c 	strb.w	r3, [sp, #12]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8003e1c:	f003 f93f 	bl	800709e <pb_decode_delimited>
 8003e20:	9001      	str	r0, [sp, #4]
  pb_io_flush_istream();
 8003e22:	f7ff fe7f 	bl	8003b24 <pb_io_flush_istream>
  return res;
}
 8003e26:	9801      	ldr	r0, [sp, #4]
 8003e28:	b005      	add	sp, #20
 8003e2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e2e:	bf00      	nop
 8003e30:	080dc058 	.word	0x080dc058
 8003e34:	20004bd8 	.word	0x20004bd8

08003e38 <aiPbMgrSendLogV2>:
  pb_io_flush_istream();
  return res;
}

bool aiPbMgrSendLogV2(EnumState state, uint32_t lvl, const char *str)
{
 8003e38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;

  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8003e3a:	4c19      	ldr	r4, [pc, #100]	; (8003ea0 <aiPbMgrSendLogV2+0x68>)
{
 8003e3c:	460e      	mov	r6, r1
 8003e3e:	4611      	mov	r1, r2
  ackMsg ack = ackMsg_init_default;
 8003e40:	2300      	movs	r3, #0
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8003e42:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
{
 8003e46:	4605      	mov	r5, r0
  ackMsg ack = ackMsg_init_default;
 8003e48:	9302      	str	r3, [sp, #8]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8003e4a:	2a02      	cmp	r2, #2
  ackMsg ack = ackMsg_init_default;
 8003e4c:	f88d 300c 	strb.w	r3, [sp, #12]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8003e50:	d124      	bne.n	8003e9c <aiPbMgrSendLogV2+0x64>
    return false;

  size_t len = strlen(str);
 8003e52:	4608      	mov	r0, r1
 8003e54:	9101      	str	r1, [sp, #4]
 8003e56:	f7fc fa2b 	bl	80002b0 <strlen>
  pbContextMgr.resp.which_payload = respMsg_log_tag;
  pbContextMgr.resp.payload.log.level = lvl;
  if (len >= sizeof(pbContextMgr.resp.payload.log.str))
    len = sizeof(pbContextMgr.resp.payload.log.str) - 1;

  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8003e5a:	287f      	cmp	r0, #127	; 0x7f
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 8003e5c:	f04f 030d 	mov.w	r3, #13
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8003e60:	9901      	ldr	r1, [sp, #4]
 8003e62:	bf28      	it	cs
 8003e64:	207f      	movcs	r0, #127	; 0x7f
  pbContextMgr.resp.payload.log.level = lvl;
 8003e66:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 8003e6a:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8003e6e:	1c42      	adds	r2, r0, #1
 8003e70:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8003e74:	f007 fc1b 	bl	800b6ae <memcpy>

  aiPbMgrSendResp(&(pbContextMgr.req), &(pbContextMgr.resp), state);
 8003e78:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8003e7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e80:	462a      	mov	r2, r5
 8003e82:	f7ff ff65 	bl	8003d50 <aiPbMgrSendResp>

  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8003e86:	4620      	mov	r0, r4
 8003e88:	aa02      	add	r2, sp, #8
 8003e8a:	4906      	ldr	r1, [pc, #24]	; (8003ea4 <aiPbMgrSendLogV2+0x6c>)
 8003e8c:	f003 f907 	bl	800709e <pb_decode_delimited>
 8003e90:	4604      	mov	r4, r0
  pb_io_flush_istream();
 8003e92:	f7ff fe47 	bl	8003b24 <pb_io_flush_istream>
  return res;
}
 8003e96:	4620      	mov	r0, r4
 8003e98:	b004      	add	sp, #16
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8003e9c:	461c      	mov	r4, r3
 8003e9e:	e7fa      	b.n	8003e96 <aiPbMgrSendLogV2+0x5e>
 8003ea0:	20004bd8 	.word	0x20004bd8
 8003ea4:	080dc058 	.word	0x080dc058

08003ea8 <aiPbMgrReceiveData>:

bool aiPbMgrReceiveData(aiPbData *data)
{
 8003ea8:	b510      	push	{r4, lr}
  aiDataMsg msg;

  msg.datas.funcs.decode = &decode_data_cb;
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <aiPbMgrReceiveData+0x28>)
{
 8003eac:	b086      	sub	sp, #24
 8003eae:	4604      	mov	r4, r0
  msg.datas.arg = (void *)data;

  /* Waiting and decoding aiDataMsg message */
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 8003eb0:	4908      	ldr	r1, [pc, #32]	; (8003ed4 <aiPbMgrReceiveData+0x2c>)
 8003eb2:	aa01      	add	r2, sp, #4
  msg.datas.arg = (void *)data;
 8003eb4:	e9cd 3004 	strd	r3, r0, [sp, #16]
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 8003eb8:	4807      	ldr	r0, [pc, #28]	; (8003ed8 <aiPbMgrReceiveData+0x30>)
 8003eba:	f003 f8f0 	bl	800709e <pb_decode_delimited>
  pb_io_flush_istream();
 8003ebe:	f7ff fe31 	bl	8003b24 <pb_io_flush_istream>

  data->type = msg.type;
 8003ec2:	9b01      	ldr	r3, [sp, #4]
  data->addr = msg.addr;

  return true;
}
 8003ec4:	2001      	movs	r0, #1
  data->type = msg.type;
 8003ec6:	6023      	str	r3, [r4, #0]
  data->addr = msg.addr;
 8003ec8:	9b03      	ldr	r3, [sp, #12]
 8003eca:	60a3      	str	r3, [r4, #8]
}
 8003ecc:	b006      	add	sp, #24
 8003ece:	bd10      	pop	{r4, pc}
 8003ed0:	08003be9 	.word	0x08003be9
 8003ed4:	080dc08c 	.word	0x080dc08c
 8003ed8:	20004bd8 	.word	0x20004bd8

08003edc <aiPbMgrSendOperator>:


bool aiPbMgrSendOperator(const reqMsg *req, respMsg *resp,
    EnumState state, const char *name, const uint32_t type, const uint32_t id,
    aiOpPerf *perf)
{
 8003edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ede:	4617      	mov	r7, r2
 8003ee0:	b085      	sub	sp, #20
  struct _encode_uint32 array;
  resp->which_payload = respMsg_op_tag;
 8003ee2:	2210      	movs	r2, #16
{
 8003ee4:	4606      	mov	r6, r0
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (name)
 8003eea:	4618      	mov	r0, r3
  resp->which_payload = respMsg_op_tag;
 8003eec:	80ca      	strh	r2, [r1, #6]
  if (name)
 8003eee:	b31b      	cbz	r3, 8003f38 <aiPbMgrSendOperator+0x5c>
    aiPbStrCopy(name, &resp->payload.op.name[0], sizeof(resp->payload.op.name));
 8003ef0:	2240      	movs	r2, #64	; 0x40
 8003ef2:	3108      	adds	r1, #8
 8003ef4:	f7ff fed2 	bl	8003c9c <aiPbStrCopy>
  else
    resp->payload.op.name[0] = 0;
  resp->payload.op.type = type;
 8003ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003efa:	64a3      	str	r3, [r4, #72]	; 0x48
  resp->payload.op.id = id;
 8003efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003efe:	64e3      	str	r3, [r4, #76]	; 0x4c

  if (perf) {
 8003f00:	b1f5      	cbz	r5, 8003f40 <aiPbMgrSendOperator+0x64>
    resp->payload.op.stack_used = perf->stack_usage;
 8003f02:	692b      	ldr	r3, [r5, #16]
 8003f04:	6623      	str	r3, [r4, #96]	; 0x60
    resp->payload.op.heap_used = perf->heap_usage;
 8003f06:	696b      	ldr	r3, [r5, #20]
 8003f08:	6663      	str	r3, [r4, #100]	; 0x64
    resp->payload.op.duration = perf->duration;
 8003f0a:	682b      	ldr	r3, [r5, #0]
 8003f0c:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = perf->counter_type;
 8003f0e:	686b      	ldr	r3, [r5, #4]
 8003f10:	6563      	str	r3, [r4, #84]	; 0x54
    if (perf->counters) {
 8003f12:	68eb      	ldr	r3, [r5, #12]
 8003f14:	b193      	cbz	r3, 8003f3c <aiPbMgrSendOperator+0x60>
      array.size = perf->counter_n;
 8003f16:	68aa      	ldr	r2, [r5, #8]
	  array.data = (void *)perf->counters;
 8003f18:	e9cd 2301 	strd	r2, r3, [sp, #4]
	  array.offset = 4;
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	9303      	str	r3, [sp, #12]
      resp->payload.op.counters.funcs.encode = encode_uint32;
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <aiPbMgrSendOperator+0x70>)
 8003f22:	65a3      	str	r3, [r4, #88]	; 0x58
      resp->payload.op.counters.arg = &array;
 8003f24:	ab01      	add	r3, sp, #4
 8003f26:	65e3      	str	r3, [r4, #92]	; 0x5c
    resp->payload.op.duration = 0.0f;
    resp->payload.op.counter_type = 0;
    resp->payload.op.counters.funcs.encode = NULL;
  }

  aiPbMgrSendResp(req, resp, state);
 8003f28:	4630      	mov	r0, r6
 8003f2a:	463a      	mov	r2, r7
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	f7ff ff0f 	bl	8003d50 <aiPbMgrSendResp>
  // aiPbMgrWaitAck();

  return true;
}
 8003f32:	2001      	movs	r0, #1
 8003f34:	b005      	add	sp, #20
 8003f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    resp->payload.op.name[0] = 0;
 8003f38:	720b      	strb	r3, [r1, #8]
 8003f3a:	e7dd      	b.n	8003ef8 <aiPbMgrSendOperator+0x1c>
      resp->payload.op.counters.funcs.encode = NULL;
 8003f3c:	65a3      	str	r3, [r4, #88]	; 0x58
 8003f3e:	e7f3      	b.n	8003f28 <aiPbMgrSendOperator+0x4c>
    resp->payload.op.duration = 0.0f;
 8003f40:	2300      	movs	r3, #0
    resp->payload.op.counters.funcs.encode = NULL;
 8003f42:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
    resp->payload.op.duration = 0.0f;
 8003f46:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = 0;
 8003f48:	e7ee      	b.n	8003f28 <aiPbMgrSendOperator+0x4c>
 8003f4a:	bf00      	nop
 8003f4c:	08003b73 	.word	0x08003b73

08003f50 <aiPbCmdSync>:
#if defined(_IS_GHS_COMPILER) && _IS_GHS_COMPILER
#define _ARM_TOOLS_ID       EnumTools_AI_GHS
#endif

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 8003f50:	b410      	push	{r4}
  resp->which_payload = respMsg_sync_tag;
 8003f52:	240a      	movs	r4, #10
 8003f54:	80cc      	strh	r4, [r1, #6]
  resp->payload.sync.version =
 8003f56:	f240 3401 	movw	r4, #769	; 0x301
 8003f5a:	608c      	str	r4, [r1, #8]
   *  b15..b8  8b : API variant (EnumAiApiRuntime value)
   *  b23..b16 8b : TOOL-CHAIN ID (EnumTools value)
   */

  resp->payload.sync.rtid = ((uint32_t)param >> 16) & 0xFFFF;
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8003f5c:	b294      	uxth	r4, r2
  resp->payload.sync.rtid = ((uint32_t)param >> 16) & 0xFFFF;
 8003f5e:	0c12      	lsrs	r2, r2, #16
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8003f60:	60cc      	str	r4, [r1, #12]

  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << EnumTools_AI_TOOLS_POS);
 8003f62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
}
 8003f66:	f85d 4b04 	ldr.w	r4, [sp], #4
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << EnumTools_AI_TOOLS_POS);
 8003f6a:	610a      	str	r2, [r1, #16]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f7ff beef 	b.w	8003d50 <aiPbMgrSendResp>
	...

08003f74 <_aiPrintDataInfo>:
    );
}


static void _aiPrintDataInfo(const int idx, const ai_buffer *buffer)
{
 8003f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
  const ai_buffer_format fmt = buffer->format;
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 8003f76:	e9d1 5200 	ldrd	r5, r2, [r1]
{
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	4608      	mov	r0, r1
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 8003f7e:	2101      	movs	r1, #1
 8003f80:	9201      	str	r2, [sp, #4]
 8003f82:	f003 fc1f 	bl	80077c4 <ai_buffer_get_size>
 8003f86:	4629      	mov	r1, r5
 8003f88:	f003 fc50 	bl	800782c <ai_buffer_get_byte_size>
 8003f8c:	9a01      	ldr	r2, [sp, #4]
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4621      	mov	r1, r4
 8003f92:	4803      	ldr	r0, [pc, #12]	; (8003fa0 <_aiPrintDataInfo+0x2c>)
      idx,
      (int)buffer->data,
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
  );
}
 8003f94:	b003      	add	sp, #12
 8003f96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 8003f9a:	f000 ba49 	b.w	8004430 <lc_print>
 8003f9e:	bf00      	nop
 8003fa0:	0800d5c0 	.word	0x0800d5c0

08003fa4 <aiPlatformVersion>:
{
 8003fa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 8003fa6:	f003 fda5 	bl	8007af4 <ai_platform_runtime_get_version>
  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8003faa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8003fae:	2201      	movs	r2, #1
 8003fb0:	9302      	str	r3, [sp, #8]
 8003fb2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003fb6:	b2c0      	uxtb	r0, r0
 8003fb8:	4611      	mov	r1, r2
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	9000      	str	r0, [sp, #0]
 8003fc0:	4802      	ldr	r0, [pc, #8]	; (8003fcc <aiPlatformVersion+0x28>)
 8003fc2:	f000 fa35 	bl	8004430 <lc_print>
}
 8003fc6:	b007      	add	sp, #28
 8003fc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fcc:	0800d5d3 	.word	0x0800d5d3

08003fd0 <aiLogErr>:
{
 8003fd0:	b410      	push	{r4}
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003fd2:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8003fd6:	b2c4      	uxtb	r4, r0
  if (fct)
 8003fd8:	b129      	cbz	r1, 8003fe6 <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003fda:	4622      	mov	r2, r4
 8003fdc:	4805      	ldr	r0, [pc, #20]	; (8003ff4 <aiLogErr+0x24>)
}
 8003fde:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003fe2:	f000 ba25 	b.w	8004430 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4803      	ldr	r0, [pc, #12]	; (8003ff8 <aiLogErr+0x28>)
}
 8003fec:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003ff0:	f000 ba1e 	b.w	8004430 <lc_print>
 8003ff4:	0800d605 	.word	0x0800d605
 8003ff8:	0800d632 	.word	0x0800d632

08003ffc <aiPrintBufferInfo>:
{
 8003ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LC_PRINT("(%d,%d,%d,",
 8004000:	6981      	ldr	r1, [r0, #24]
{
 8004002:	4605      	mov	r5, r0
  const ai_buffer_format fmt = buffer->format;
 8004004:	6807      	ldr	r7, [r0, #0]
  LC_PRINT("(%d,%d,%d,",
 8004006:	486c      	ldr	r0, [pc, #432]	; (80041b8 <aiPrintBufferInfo+0x1bc>)
 8004008:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 800400c:	6809      	ldr	r1, [r1, #0]
 800400e:	f000 fa0f 	bl	8004430 <lc_print>
  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 8004012:	696a      	ldr	r2, [r5, #20]
 8004014:	69a8      	ldr	r0, [r5, #24]
 8004016:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800401a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800401e:	d119      	bne.n	8004054 <aiPrintBufferInfo+0x58>
    LC_PRINT("%d,%d)",
 8004020:	6842      	ldr	r2, [r0, #4]
 8004022:	6901      	ldr	r1, [r0, #16]
 8004024:	4865      	ldr	r0, [pc, #404]	; (80041bc <aiPrintBufferInfo+0x1c0>)
 8004026:	f000 fa03 	bl	8004430 <lc_print>
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 800402a:	2101      	movs	r1, #1
 800402c:	4628      	mov	r0, r5
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800402e:	f3c7 4643 	ubfx	r6, r7, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8004032:	f003 fbc7 	bl	80077c4 <ai_buffer_get_size>
 8004036:	4601      	mov	r1, r0
 8004038:	4861      	ldr	r0, [pc, #388]	; (80041c0 <aiPrintBufferInfo+0x1c4>)
 800403a:	f000 f9f9 	bl	8004430 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800403e:	2e01      	cmp	r6, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8004040:	ea4f 19e7 	mov.w	r9, r7, asr #7
 8004044:	f3c7 14c6 	ubfx	r4, r7, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8004048:	d113      	bne.n	8004072 <aiPrintBufferInfo+0x76>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800404a:	4621      	mov	r1, r4
 800404c:	485d      	ldr	r0, [pc, #372]	; (80041c4 <aiPrintBufferInfo+0x1c8>)
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800404e:	f000 f9ef 	bl	8004430 <lc_print>
 8004052:	e046      	b.n	80040e2 <aiPrintBufferInfo+0xe6>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8004054:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 8004058:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 800405a:	d105      	bne.n	8004068 <aiPrintBufferInfo+0x6c>
    LC_PRINT("%d,%d,%d)",
 800405c:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8004060:	4859      	ldr	r0, [pc, #356]	; (80041c8 <aiPrintBufferInfo+0x1cc>)
 8004062:	f000 f9e5 	bl	8004430 <lc_print>
 8004066:	e7e0      	b.n	800402a <aiPrintBufferInfo+0x2e>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 8004068:	4619      	mov	r1, r3
 800406a:	4858      	ldr	r0, [pc, #352]	; (80041cc <aiPrintBufferInfo+0x1d0>)
 800406c:	f000 f9e0 	bl	8004430 <lc_print>
 8004070:	e7db      	b.n	800402a <aiPrintBufferInfo+0x2e>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8004072:	2e03      	cmp	r6, #3
 8004074:	d102      	bne.n	800407c <aiPrintBufferInfo+0x80>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8004076:	4621      	mov	r1, r4
 8004078:	4855      	ldr	r0, [pc, #340]	; (80041d0 <aiPrintBufferInfo+0x1d4>)
 800407a:	e7e8      	b.n	800404e <aiPrintBufferInfo+0x52>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 800407c:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80041e8 <aiPrintBufferInfo+0x1ec>
 8004080:	f417 0f00 	tst.w	r7, #8388608	; 0x800000
 8004084:	4622      	mov	r2, r4
 8004086:	f108 0102 	add.w	r1, r8, #2
 800408a:	f108 003b 	add.w	r0, r8, #59	; 0x3b
 800408e:	bf18      	it	ne
 8004090:	4641      	movne	r1, r8
 8004092:	f000 f9cd 	bl	8004430 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 8004096:	2e02      	cmp	r6, #2
 8004098:	d123      	bne.n	80040e2 <aiPrintBufferInfo+0xe6>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800409a:	68ab      	ldr	r3, [r5, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d069      	beq.n	8004174 <aiPrintBufferInfo+0x178>
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	07d2      	lsls	r2, r2, #31
 80040a4:	d566      	bpl.n	8004174 <aiPrintBufferInfo+0x178>
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d063      	beq.n	8004174 <aiPrintBufferInfo+0x178>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 80040ac:	f8b3 a002 	ldrh.w	sl, [r3, #2]
      LC_PRINT(" %d:", s_);
 80040b0:	f108 0040 	add.w	r0, r8, #64	; 0x40
      for (int idx=0; idx<max_; idx++) {
 80040b4:	2600      	movs	r6, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80040b6:	f04f 0900 	mov.w	r9, #0
      const int max_ = s_> 4?4:s_;
 80040ba:	f1ba 0f04 	cmp.w	sl, #4
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 80040be:	f108 0845 	add.w	r8, r8, #69	; 0x45
      LC_PRINT(" %d:", s_);
 80040c2:	4651      	mov	r1, sl
      const int max_ = s_> 4?4:s_;
 80040c4:	46d3      	mov	fp, sl
 80040c6:	bf28      	it	cs
 80040c8:	f04f 0b04 	movcs.w	fp, #4
      LC_PRINT(" %d:", s_);
 80040cc:	f000 f9b0 	bl	8004430 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 80040d0:	455e      	cmp	r6, fp
 80040d2:	db18      	blt.n	8004106 <aiPrintBufferInfo+0x10a>
      LC_PRINT((s_ > max_)?"..":"");
 80040d4:	4b3f      	ldr	r3, [pc, #252]	; (80041d4 <aiPrintBufferInfo+0x1d8>)
 80040d6:	1cd8      	adds	r0, r3, #3
 80040d8:	45d3      	cmp	fp, sl
 80040da:	bf38      	it	cc
 80040dc:	4618      	movcc	r0, r3
 80040de:	f000 f9a7 	bl	8004430 <lc_print>
  if (buffer->data)
 80040e2:	686c      	ldr	r4, [r5, #4]
    LC_PRINT(" @0x%X/%d",
 80040e4:	2101      	movs	r1, #1
 80040e6:	4628      	mov	r0, r5
  if (buffer->data)
 80040e8:	2c00      	cmp	r4, #0
 80040ea:	d054      	beq.n	8004196 <aiPrintBufferInfo+0x19a>
    LC_PRINT(" @0x%X/%d",
 80040ec:	f003 fb6a 	bl	80077c4 <ai_buffer_get_size>
 80040f0:	4639      	mov	r1, r7
 80040f2:	f003 fb9b 	bl	800782c <ai_buffer_get_byte_size>
 80040f6:	4621      	mov	r1, r4
 80040f8:	4602      	mov	r2, r0
 80040fa:	4837      	ldr	r0, [pc, #220]	; (80041d8 <aiPrintBufferInfo+0x1dc>)
}
 80040fc:	b003      	add	sp, #12
 80040fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" @0x%X/%d",
 8004102:	f000 b995 	b.w	8004430 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8004106:	68ab      	ldr	r3, [r5, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d02e      	beq.n	800416a <aiPrintBufferInfo+0x16e>
 800410c:	681c      	ldr	r4, [r3, #0]
 800410e:	f014 0401 	ands.w	r4, r4, #1
 8004112:	d02d      	beq.n	8004170 <aiPrintBufferInfo+0x174>
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	2a00      	cmp	r2, #0
 8004118:	d049      	beq.n	80041ae <aiPrintBufferInfo+0x1b2>
 800411a:	6853      	ldr	r3, [r2, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d049      	beq.n	80041b4 <aiPrintBufferInfo+0x1b8>
 8004120:	8851      	ldrh	r1, [r2, #2]
 8004122:	42b1      	cmp	r1, r6
 8004124:	dd46      	ble.n	80041b4 <aiPrintBufferInfo+0x1b8>
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800412c:	6818      	ldr	r0, [r3, #0]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800412e:	2a00      	cmp	r2, #0
 8004130:	d03e      	beq.n	80041b0 <aiPrintBufferInfo+0x1b4>
 8004132:	8814      	ldrh	r4, [r2, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8004134:	6853      	ldr	r3, [r2, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8004136:	f014 0402 	ands.w	r4, r4, #2
 800413a:	d00f      	beq.n	800415c <aiPrintBufferInfo+0x160>
 800413c:	b1b3      	cbz	r3, 800416c <aiPrintBufferInfo+0x170>
 800413e:	8852      	ldrh	r2, [r2, #2]
 8004140:	42b2      	cmp	r2, r6
 8004142:	dd35      	ble.n	80041b0 <aiPrintBufferInfo+0x1b4>
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	5d9c      	ldrb	r4, [r3, r6]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8004148:	f7fc fa1e 	bl	8000588 <__aeabi_f2d>
 800414c:	9400      	str	r4, [sp, #0]
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4640      	mov	r0, r8
      for (int idx=0; idx<max_; idx++) {
 8004154:	3601      	adds	r6, #1
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8004156:	f000 f96b 	bl	8004430 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 800415a:	e7b9      	b.n	80040d0 <aiPrintBufferInfo+0xd4>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800415c:	b133      	cbz	r3, 800416c <aiPrintBufferInfo+0x170>
 800415e:	8852      	ldrh	r2, [r2, #2]
 8004160:	42b2      	cmp	r2, r6
 8004162:	ddf1      	ble.n	8004148 <aiPrintBufferInfo+0x14c>
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	579c      	ldrsb	r4, [r3, r6]
 8004168:	e7ee      	b.n	8004148 <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800416a:	4648      	mov	r0, r9
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800416c:	461c      	mov	r4, r3
 800416e:	e7eb      	b.n	8004148 <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8004170:	4648      	mov	r0, r9
 8004172:	e7e9      	b.n	8004148 <aiPrintBufferInfo+0x14c>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 8004174:	f019 0f78 	tst.w	r9, #120	; 0x78
 8004178:	d102      	bne.n	8004180 <aiPrintBufferInfo+0x184>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800417a:	4621      	mov	r1, r4
 800417c:	4817      	ldr	r0, [pc, #92]	; (80041dc <aiPrintBufferInfo+0x1e0>)
 800417e:	e766      	b.n	800404e <aiPrintBufferInfo+0x52>
      LC_PRINT(" Q%d.%d",
 8004180:	f007 027f 	and.w	r2, r7, #127	; 0x7f
 8004184:	f3c7 51c0 	ubfx	r1, r7, #23, #1
 8004188:	4815      	ldr	r0, [pc, #84]	; (80041e0 <aiPrintBufferInfo+0x1e4>)
 800418a:	3a40      	subs	r2, #64	; 0x40
 800418c:	4411      	add	r1, r2
 800418e:	1a61      	subs	r1, r4, r1
 8004190:	f000 f94e 	bl	8004430 <lc_print>
 8004194:	e7a5      	b.n	80040e2 <aiPrintBufferInfo+0xe6>
    LC_PRINT(" (User Domain)/%d",
 8004196:	f003 fb15 	bl	80077c4 <ai_buffer_get_size>
 800419a:	4639      	mov	r1, r7
 800419c:	f003 fb46 	bl	800782c <ai_buffer_get_byte_size>
 80041a0:	4601      	mov	r1, r0
 80041a2:	4810      	ldr	r0, [pc, #64]	; (80041e4 <aiPrintBufferInfo+0x1e8>)
}
 80041a4:	b003      	add	sp, #12
 80041a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LC_PRINT(" (User Domain)/%d",
 80041aa:	f000 b941 	b.w	8004430 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80041ae:	4648      	mov	r0, r9
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80041b0:	2400      	movs	r4, #0
 80041b2:	e7c9      	b.n	8004148 <aiPrintBufferInfo+0x14c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80041b4:	4648      	mov	r0, r9
 80041b6:	e7ba      	b.n	800412e <aiPrintBufferInfo+0x132>
 80041b8:	0800d662 	.word	0x0800d662
 80041bc:	0800d66d 	.word	0x0800d66d
 80041c0:	0800d682 	.word	0x0800d682
 80041c4:	0800d686 	.word	0x0800d686
 80041c8:	0800d674 	.word	0x0800d674
 80041cc:	0800d67e 	.word	0x0800d67e
 80041d0:	0800d68e 	.word	0x0800d68e
 80041d4:	0800d65e 	.word	0x0800d65e
 80041d8:	0800d6bb 	.word	0x0800d6bb
 80041dc:	0800d6a8 	.word	0x0800d6a8
 80041e0:	0800d6b3 	.word	0x0800d6b3
 80041e4:	0800d6c5 	.word	0x0800d6c5
 80041e8:	0800d65a 	.word	0x0800d65a

080041ec <aiPrintNetworkInfo>:


void aiPrintNetworkInfo(const ai_network_report* report)
{
 80041ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f0:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 80041f2:	4842      	ldr	r0, [pc, #264]	; (80042fc <aiPrintNetworkInfo+0x110>)
 80041f4:	f000 f91c 	bl	8004430 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 80041f8:	4841      	ldr	r0, [pc, #260]	; (8004300 <aiPrintNetworkInfo+0x114>)
 80041fa:	6821      	ldr	r1, [r4, #0]
 80041fc:	f000 f918 	bl	8004430 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8004200:	6861      	ldr	r1, [r4, #4]
 8004202:	4840      	ldr	r0, [pc, #256]	; (8004304 <aiPrintNetworkInfo+0x118>)
 8004204:	f000 f914 	bl	8004430 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8004208:	68a1      	ldr	r1, [r4, #8]
 800420a:	483f      	ldr	r0, [pc, #252]	; (8004308 <aiPrintNetworkInfo+0x11c>)
 800420c:	f000 f910 	bl	8004430 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8004210:	68e1      	ldr	r1, [r4, #12]
 8004212:	483e      	ldr	r0, [pc, #248]	; (800430c <aiPrintNetworkInfo+0x120>)
 8004214:	f000 f90c 	bl	8004430 <lc_print>

  if (report->tool_revision[0])
 8004218:	69a1      	ldr	r1, [r4, #24]
 800421a:	780b      	ldrb	r3, [r1, #0]
 800421c:	b113      	cbz	r3, 8004224 <aiPrintNetworkInfo+0x38>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 800421e:	483c      	ldr	r0, [pc, #240]	; (8004310 <aiPrintNetworkInfo+0x124>)
 8004220:	f000 f906 	bl	8004430 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8004224:	7fa3      	ldrb	r3, [r4, #30]
      report->tool_version.micro);
  LC_PRINT(" complexity         : %s MACC\r\n", uint64ToDecimal(report->n_macc));
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8004226:	2500      	movs	r5, #0
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8004228:	7f62      	ldrb	r2, [r4, #29]
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 800422a:	261c      	movs	r6, #28
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 800422c:	7f21      	ldrb	r1, [r4, #28]
 800422e:	4839      	ldr	r0, [pc, #228]	; (8004314 <aiPrintNetworkInfo+0x128>)
 8004230:	f000 f8fe 	bl	8004430 <lc_print>
  LC_PRINT(" complexity         : %s MACC\r\n", uint64ToDecimal(report->n_macc));
 8004234:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8004238:	f000 f8e2 	bl	8004400 <uint64ToDecimal>
 800423c:	4601      	mov	r1, r0
 800423e:	4836      	ldr	r0, [pc, #216]	; (8004318 <aiPrintNetworkInfo+0x12c>)
 8004240:	f000 f8f6 	bl	8004430 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8004244:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004246:	4835      	ldr	r0, [pc, #212]	; (800431c <aiPrintNetworkInfo+0x130>)
 8004248:	f000 f8f2 	bl	8004430 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 800424c:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 8004250:	4833      	ldr	r0, [pc, #204]	; (8004320 <aiPrintNetworkInfo+0x134>)
 8004252:	f000 f8ed 	bl	8004430 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8004256:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800425a:	42ab      	cmp	r3, r5
 800425c:	dc21      	bgt.n	80042a2 <aiPrintNetworkInfo+0xb6>
      _aiPrintDataInfo(idx, buffer);
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800425e:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8004260:	261c      	movs	r6, #28
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8004262:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8004266:	482f      	ldr	r0, [pc, #188]	; (8004324 <aiPrintNetworkInfo+0x138>)
 8004268:	f000 f8e2 	bl	8004430 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800426c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8004270:	42ab      	cmp	r3, r5
 8004272:	dc1e      	bgt.n	80042b2 <aiPrintNetworkInfo+0xc6>

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    LC_PRINT("  I[%d] ", i);
 8004274:	4e2c      	ldr	r6, [pc, #176]	; (8004328 <aiPrintNetworkInfo+0x13c>)
  for (int i=0; i<report->n_inputs; i++) {
 8004276:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 8004278:	271c      	movs	r7, #28
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 800427a:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    LC_PRINT("\r\n");
 800427c:	f106 0809 	add.w	r8, r6, #9
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8004280:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8004282:	482a      	ldr	r0, [pc, #168]	; (800432c <aiPrintNetworkInfo+0x140>)
 8004284:	f000 f8d4 	bl	8004430 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8004288:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800428a:	42ab      	cmp	r3, r5
 800428c:	dc19      	bgt.n	80042c2 <aiPrintNetworkInfo+0xd6>
  }

  for (int i=0; i<report->n_outputs; i++) {
    LC_PRINT("  O[%d] ", i);
 800428e:	4e28      	ldr	r6, [pc, #160]	; (8004330 <aiPrintNetworkInfo+0x144>)
  for (int i=0; i<report->n_outputs; i++) {
 8004290:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 8004292:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8004294:	f1a6 0803 	sub.w	r8, r6, #3
  for (int i=0; i<report->n_outputs; i++) {
 8004298:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800429a:	42ab      	cmp	r3, r5
 800429c:	dc1f      	bgt.n	80042de <aiPrintNetworkInfo+0xf2>
  }
}
 800429e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80042a2:	6d61      	ldr	r1, [r4, #84]	; 0x54
      _aiPrintDataInfo(idx, buffer);
 80042a4:	4628      	mov	r0, r5
 80042a6:	fb06 1105 	mla	r1, r6, r5, r1
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80042aa:	3501      	adds	r5, #1
      _aiPrintDataInfo(idx, buffer);
 80042ac:	f7ff fe62 	bl	8003f74 <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80042b0:	e7d1      	b.n	8004256 <aiPrintNetworkInfo+0x6a>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80042b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      _aiPrintDataInfo(idx, buffer);
 80042b4:	4628      	mov	r0, r5
 80042b6:	fb06 1105 	mla	r1, r6, r5, r1
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80042ba:	3501      	adds	r5, #1
      _aiPrintDataInfo(idx, buffer);
 80042bc:	f7ff fe5a 	bl	8003f74 <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80042c0:	e7d4      	b.n	800426c <aiPrintNetworkInfo+0x80>
    LC_PRINT("  I[%d] ", i);
 80042c2:	4629      	mov	r1, r5
 80042c4:	4630      	mov	r0, r6
 80042c6:	f000 f8b3 	bl	8004430 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 80042ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80042cc:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_inputs; i++) {
 80042d0:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->inputs[i]);
 80042d2:	f7ff fe93 	bl	8003ffc <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 80042d6:	4640      	mov	r0, r8
 80042d8:	f000 f8aa 	bl	8004430 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 80042dc:	e7d4      	b.n	8004288 <aiPrintNetworkInfo+0x9c>
    LC_PRINT("  O[%d] ", i);
 80042de:	4629      	mov	r1, r5
 80042e0:	4630      	mov	r0, r6
 80042e2:	f000 f8a5 	bl	8004430 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 80042e6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80042e8:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_outputs; i++) {
 80042ec:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->outputs[i]);
 80042ee:	f7ff fe85 	bl	8003ffc <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 80042f2:	4640      	mov	r0, r8
 80042f4:	f000 f89c 	bl	8004430 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 80042f8:	e7ce      	b.n	8004298 <aiPrintNetworkInfo+0xac>
 80042fa:	bf00      	nop
 80042fc:	0800d6d7 	.word	0x0800d6d7
 8004300:	0800d6f1 	.word	0x0800d6f1
 8004304:	0800d70c 	.word	0x0800d70c
 8004308:	0800d727 	.word	0x0800d727
 800430c:	0800d742 	.word	0x0800d742
 8004310:	0800d75d 	.word	0x0800d75d
 8004314:	0800d778 	.word	0x0800d778
 8004318:	0800d799 	.word	0x0800d799
 800431c:	0800d7b9 	.word	0x0800d7b9
 8004320:	0800d7d4 	.word	0x0800d7d4
 8004324:	0800d7ef 	.word	0x0800d7ef
 8004328:	0800d828 	.word	0x0800d828
 800432c:	0800d80a 	.word	0x0800d80a
 8004330:	0800d834 	.word	0x0800d834

08004334 <_put_c_buffer_cb>:
};

static void _put_c_buffer_cb(void *user, const char c)
{
  struct _buffer *buffer = (struct _buffer *)user;
  if (buffer->pos < (buffer->size - 1)) {
 8004334:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8004338:	3b01      	subs	r3, #1
 800433a:	429a      	cmp	r2, r3
 800433c:	d207      	bcs.n	800434e <_put_c_buffer_cb+0x1a>
    buffer->buffer[buffer->pos] = c;
 800433e:	6803      	ldr	r3, [r0, #0]
 8004340:	5499      	strb	r1, [r3, r2]
    buffer->pos++;
    buffer->buffer[buffer->pos] = 0;
 8004342:	2100      	movs	r1, #0
    buffer->pos++;
 8004344:	6883      	ldr	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 8004346:	6802      	ldr	r2, [r0, #0]
    buffer->pos++;
 8004348:	3301      	adds	r3, #1
 800434a:	6083      	str	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 800434c:	54d1      	strb	r1, [r2, r3]
  }
}
 800434e:	4770      	bx	lr

08004350 <_put_c_driver>:
  if (_ioWriteAllowed)
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <_put_c_driver+0x24>)
 8004352:	781b      	ldrb	r3, [r3, #0]
{
 8004354:	b507      	push	{r0, r1, r2, lr}
 8004356:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 800435a:	b13b      	cbz	r3, 800436c <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 800435c:	f04f 33ff 	mov.w	r3, #4294967295
 8004360:	2201      	movs	r2, #1
 8004362:	f10d 0107 	add.w	r1, sp, #7
 8004366:	4804      	ldr	r0, [pc, #16]	; (8004378 <_put_c_driver+0x28>)
 8004368:	f7ff f89f 	bl	80034aa <HAL_UART_Transmit>
}
 800436c:	b003      	add	sp, #12
 800436e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004372:	bf00      	nop
 8004374:	20000018 	.word	0x20000018
 8004378:	20004af8 	.word	0x20004af8

0800437c <ioRawWriteBuffer>:
 800437c:	b28a      	uxth	r2, r1
 800437e:	4601      	mov	r1, r0
 8004380:	4804      	ldr	r0, [pc, #16]	; (8004394 <ioRawWriteBuffer+0x18>)
{
 8004382:	b508      	push	{r3, lr}
 8004384:	f04f 33ff 	mov.w	r3, #4294967295
 8004388:	f7ff f88f 	bl	80034aa <HAL_UART_Transmit>
}
 800438c:	fab0 f080 	clz	r0, r0
 8004390:	0940      	lsrs	r0, r0, #5
 8004392:	bd08      	pop	{r3, pc}
 8004394:	20004af8 	.word	0x20004af8

08004398 <ioRawReadBuffer>:

__STATIC_INLINE bool port_io_read(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 8004398:	b28a      	uxth	r2, r1
 800439a:	4601      	mov	r1, r0
 800439c:	4804      	ldr	r0, [pc, #16]	; (80043b0 <ioRawReadBuffer+0x18>)
{
 800439e:	b508      	push	{r3, lr}
 80043a0:	f04f 33ff 	mov.w	r3, #4294967295
 80043a4:	f7ff f8d3 	bl	800354e <HAL_UART_Receive>
}
 80043a8:	fab0 f080 	clz	r0, r0
 80043ac:	0940      	lsrs	r0, r0, #5
 80043ae:	bd08      	pop	{r3, pc}
 80043b0:	20004af8 	.word	0x20004af8

080043b4 <ioRawDisableLLWrite>:
  _ioWriteAllowed = false;
 80043b4:	4b01      	ldr	r3, [pc, #4]	; (80043bc <ioRawDisableLLWrite+0x8>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	701a      	strb	r2, [r3, #0]
}
 80043ba:	4770      	bx	lr
 80043bc:	20000018 	.word	0x20000018

080043c0 <_write>:
{
 80043c0:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 80043c2:	1e14      	subs	r4, r2, #0
 80043c4:	da0a      	bge.n	80043dc <_write+0x1c>
 80043c6:	3801      	subs	r0, #1
 80043c8:	2801      	cmp	r0, #1
 80043ca:	d907      	bls.n	80043dc <_write+0x1c>
    errno = EBADF;
 80043cc:	f007 f942 	bl	800b654 <__errno>
    return -1;
 80043d0:	f04f 34ff 	mov.w	r4, #4294967295
    errno = EBADF;
 80043d4:	2309      	movs	r3, #9
 80043d6:	6003      	str	r3, [r0, #0]
}
 80043d8:	4620      	mov	r0, r4
 80043da:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <_write+0x38>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f9      	beq.n	80043d8 <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80043e4:	b2a2      	uxth	r2, r4
 80043e6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ea:	4804      	ldr	r0, [pc, #16]	; (80043fc <_write+0x3c>)
 80043ec:	f7ff f85d 	bl	80034aa <HAL_UART_Transmit>
  return (status ? count : 0);
 80043f0:	2800      	cmp	r0, #0
 80043f2:	bf18      	it	ne
 80043f4:	2400      	movne	r4, #0
 80043f6:	e7ef      	b.n	80043d8 <_write+0x18>
 80043f8:	20000018 	.word	0x20000018
 80043fc:	20004af8 	.word	0x20004af8

08004400 <uint64ToDecimal>:
  *(--p) = '\0';
 8004400:	2300      	movs	r3, #0
{ /* see https://www.eevblog.com/forum/microcontrollers/printf-uint64_t-with-arm-gcc/ */
 8004402:	b510      	push	{r4, lr}
  *(--p) = '\0';
 8004404:	4c09      	ldr	r4, [pc, #36]	; (800442c <uint64ToDecimal+0x2c>)
 8004406:	f804 3f14 	strb.w	r3, [r4, #20]!
  for (bool first = true; v || first; first = false) {
 800440a:	2301      	movs	r3, #1
 800440c:	ea50 0201 	orrs.w	r2, r0, r1
 8004410:	d102      	bne.n	8004418 <uint64ToDecimal+0x18>
 8004412:	b90b      	cbnz	r3, 8004418 <uint64ToDecimal+0x18>
}
 8004414:	4620      	mov	r0, r4
 8004416:	bd10      	pop	{r4, pc}
    const uint32_t digit = v % 10;
 8004418:	220a      	movs	r2, #10
 800441a:	2300      	movs	r3, #0
 800441c:	f7fc fcf2 	bl	8000e04 <__aeabi_uldivmod>
    const char c = '0' + digit;
 8004420:	3230      	adds	r2, #48	; 0x30
  for (bool first = true; v || first; first = false) {
 8004422:	2300      	movs	r3, #0
    *(--p) = c;
 8004424:	f804 2d01 	strb.w	r2, [r4, #-1]!
  for (bool first = true; v || first; first = false) {
 8004428:	e7f0      	b.n	800440c <uint64ToDecimal+0xc>
 800442a:	bf00      	nop
 800442c:	20004db0 	.word	0x20004db0

08004430 <lc_print>:
{
 8004430:	b40f      	push	{r0, r1, r2, r3}
 8004432:	b507      	push	{r0, r1, r2, lr}
 8004434:	ab04      	add	r3, sp, #16
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8004436:	2100      	movs	r1, #0
 8004438:	4805      	ldr	r0, [pc, #20]	; (8004450 <lc_print+0x20>)
{
 800443a:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 800443e:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8004440:	f001 fa28 	bl	8005894 <vlc_print>
}
 8004444:	b003      	add	sp, #12
 8004446:	f85d eb04 	ldr.w	lr, [sp], #4
 800444a:	b004      	add	sp, #16
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	08004351 	.word	0x08004351

08004454 <lc_vsnprint>:

size_t lc_vsnprint(char *buff, size_t size, const char* fmt, va_list vlist)
{
 8004454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  struct _buffer buffer = {buff, size, 0};
 8004456:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800445a:	2100      	movs	r1, #0
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 800445c:	4804      	ldr	r0, [pc, #16]	; (8004470 <lc_vsnprint+0x1c>)
  struct _buffer buffer = {buff, size, 0};
 800445e:	9103      	str	r1, [sp, #12]
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 8004460:	a901      	add	r1, sp, #4
 8004462:	f001 fa17 	bl	8005894 <vlc_print>
  return buffer.pos - 1;
}
 8004466:	9803      	ldr	r0, [sp, #12]
 8004468:	3801      	subs	r0, #1
 800446a:	b005      	add	sp, #20
 800446c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004470:	08004335 	.word	0x08004335

08004474 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8004474:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8004476:	4d11      	ldr	r5, [pc, #68]	; (80044bc <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8004478:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 800447a:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 800447c:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8004480:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8004484:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8004488:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 800448a:	f006 fa47 	bl	800a91c <malloc>

  /* remember size */
  if (ptr) {
 800448e:	b1a0      	cbz	r0, 80044ba <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8004490:	1903      	adds	r3, r0, r4
 8004492:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8004494:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8004496:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	07db      	lsls	r3, r3, #31
 800449c:	d50c      	bpl.n	80044b8 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 800449e:	68eb      	ldr	r3, [r5, #12]
 80044a0:	3301      	adds	r3, #1
 80044a2:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 80044a4:	686b      	ldr	r3, [r5, #4]
 80044a6:	4423      	add	r3, r4
 80044a8:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 80044aa:	69ab      	ldr	r3, [r5, #24]
 80044ac:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 80044ae:	696b      	ldr	r3, [r5, #20]
 80044b0:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 80044b2:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 80044b4:	bf88      	it	hi
 80044b6:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 80044b8:	3004      	adds	r0, #4
}
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	20004dd4 	.word	0x20004dd4
 80044c0:	efdcba98 	.word	0xefdcba98

080044c4 <__wrap_free>:
void __wrap_free(void *ptr)
{
  uint8_t* p;
  uint32_t bytes;

  io_malloc.cfg |= 1 << 2;
 80044c4:	4b10      	ldr	r3, [pc, #64]	; (8004508 <__wrap_free+0x44>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	f042 0204 	orr.w	r2, r2, #4
{
 80044cc:	b430      	push	{r4, r5}
  io_malloc.cfg |= 1 << 2;
 80044ce:	601a      	str	r2, [r3, #0]

  if (!ptr)
 80044d0:	4602      	mov	r2, r0
 80044d2:	b1b8      	cbz	r0, 8004504 <__wrap_free+0x40>
    return;

  p = (uint8_t*)ptr - 4;
  bytes = *((uint32_t*)p);
 80044d4:	f852 1c04 	ldr.w	r1, [r2, #-4]
  p = (uint8_t*)ptr - 4;
 80044d8:	3804      	subs	r0, #4

  if (*((uint32_t*)(p + 4 + bytes)) == MAGIC_MALLOC_NUMBER) {
 80044da:	4c0c      	ldr	r4, [pc, #48]	; (800450c <__wrap_free+0x48>)
 80044dc:	5855      	ldr	r5, [r2, r1]
 80044de:	42a5      	cmp	r5, r4
    *((uint32_t*)(p + 4 + bytes)) = 0;
 80044e0:	bf04      	itt	eq
 80044e2:	2400      	moveq	r4, #0
 80044e4:	5054      	streq	r4, [r2, r1]
  }

  if (io_malloc.cfg & 1UL) {
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	07d2      	lsls	r2, r2, #31
 80044ea:	d508      	bpl.n	80044fe <__wrap_free+0x3a>
    io_malloc.free_req++;
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	3201      	adds	r2, #1
 80044f0:	611a      	str	r2, [r3, #16]
    io_malloc.free += bytes;
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	440a      	add	r2, r1
 80044f6:	609a      	str	r2, [r3, #8]
    io_malloc.used -= bytes;
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	1a52      	subs	r2, r2, r1
 80044fc:	619a      	str	r2, [r3, #24]
    if (io_malloc.f_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.f_idx = 0;
#endif
  }
  __real_free(p);
}
 80044fe:	bc30      	pop	{r4, r5}
  __real_free(p);
 8004500:	f006 ba14 	b.w	800a92c <free>
}
 8004504:	bc30      	pop	{r4, r5}
 8004506:	4770      	bx	lr
 8004508:	20004dd4 	.word	0x20004dd4
 800450c:	efdcba98 	.word	0xefdcba98

08004510 <stackMonInit>:
#endif

struct io_stack io_stack;

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 8004510:	b538      	push	{r3, r4, r5, lr}
  memset(&io_stack, 0, sizeof(struct io_stack));
 8004512:	4c11      	ldr	r4, [pc, #68]	; (8004558 <stackMonInit+0x48>)
 8004514:	2500      	movs	r5, #0
  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
  io_stack.cstack = cstack;

#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  io_stack.estack = (uint32_t)_estack;
 8004516:	4b11      	ldr	r3, [pc, #68]	; (800455c <stackMonInit+0x4c>)
  memset(&io_stack, 0, sizeof(struct io_stack));
 8004518:	60e5      	str	r5, [r4, #12]
  io_stack.estack = (uint32_t)_estack;
 800451a:	6123      	str	r3, [r4, #16]
  io_stack.bstack = io_stack.estack - msize;
 800451c:	1a9b      	subs	r3, r3, r2
  io_stack.ctrl = ctrl;
 800451e:	6020      	str	r0, [r4, #0]
  io_stack.bstack = io_stack.estack - msize;
 8004520:	61e3      	str	r3, [r4, #28]
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  (void)msize;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8004522:	0783      	lsls	r3, r0, #30
  io_stack.cstack = cstack;
 8004524:	61a1      	str	r1, [r4, #24]
  io_stack.mstack_size = msize;
 8004526:	6162      	str	r2, [r4, #20]
  memset(&io_stack, 0, sizeof(struct io_stack));
 8004528:	e9c4 5501 	strd	r5, r5, [r4, #4]
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 800452c:	d511      	bpl.n	8004552 <stackMonInit+0x42>
    LC_PRINT("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 800452e:	480c      	ldr	r0, [pc, #48]	; (8004560 <stackMonInit+0x50>)
 8004530:	f7ff ff7e 	bl	8004430 <lc_print>
    io_stack.stack_mon = false;
  } else
    io_stack.stack_mon = true;

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8004534:	6921      	ldr	r1, [r4, #16]
 8004536:	69a3      	ldr	r3, [r4, #24]
    io_stack.stack_mon = false;
 8004538:	7125      	strb	r5, [r4, #4]
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 800453a:	1ac9      	subs	r1, r1, r3
 800453c:	60e1      	str	r1, [r4, #12]

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 800453e:	b13d      	cbz	r5, 8004550 <stackMonInit+0x40>
 8004540:	6962      	ldr	r2, [r4, #20]
 8004542:	4291      	cmp	r1, r2
 8004544:	d904      	bls.n	8004550 <stackMonInit+0x40>
    LC_PRINT("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 8004546:	4807      	ldr	r0, [pc, #28]	; (8004564 <stackMonInit+0x54>)
 8004548:	f7ff ff72 	bl	8004430 <lc_print>
        (int)io_stack.mstack_size);
    io_stack.stack_mon = false;
 800454c:	2300      	movs	r3, #0
 800454e:	7123      	strb	r3, [r4, #4]
  }
}
 8004550:	bd38      	pop	{r3, r4, r5, pc}
 8004552:	2501      	movs	r5, #1
 8004554:	e7ee      	b.n	8004534 <stackMonInit+0x24>
 8004556:	bf00      	nop
 8004558:	20004df0 	.word	0x20004df0
 800455c:	20050000 	.word	0x20050000
 8004560:	0800d83d 	.word	0x0800d83d
 8004564:	0800d87d 	.word	0x0800d87d

08004568 <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8004568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456c:	4604      	mov	r4, r0
 800456e:	468a      	mov	sl, r1
  if (!t)
 8004570:	4617      	mov	r7, r2
 8004572:	b382      	cbz	r2, 80045d6 <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
  uint64_t s  = clks / fcpu;
  uint64_t ms = (clks * 1000) / fcpu;
 8004574:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint32_t fcpu = port_hal_get_cpu_freq();
 8004578:	f7fe f86c 	bl	8002654 <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 800457c:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 800457e:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8004580:	9001      	str	r0, [sp, #4]
 8004582:	4651      	mov	r1, sl
 8004584:	4620      	mov	r0, r4
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8004586:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80045dc <dwtCyclesToTime+0x74>
  uint64_t s  = clks / fcpu;
 800458a:	f7fc fc3b 	bl	8000e04 <__aeabi_uldivmod>
 800458e:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8004590:	fba4 0106 	umull	r0, r1, r4, r6
 8004594:	9a01      	ldr	r2, [sp, #4]
 8004596:	2300      	movs	r3, #0
 8004598:	fb06 110a 	mla	r1, r6, sl, r1
 800459c:	f7fc fc32 	bl	8000e04 <__aeabi_uldivmod>
  ms -= (s * 1000);
 80045a0:	fbab 3106 	umull	r3, r1, fp, r6
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80045a4:	9a01      	ldr	r2, [sp, #4]
  ms -= (s * 1000);
 80045a6:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80045a8:	fba4 0109 	umull	r0, r1, r4, r9
 80045ac:	2300      	movs	r3, #0
 80045ae:	fb09 110a 	mla	r1, r9, sl, r1
  us -= (ms * 1000 + s * 1000000);
 80045b2:	fbab 8909 	umull	r8, r9, fp, r9
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80045b6:	f7fc fc25 	bl	8000e04 <__aeabi_uldivmod>
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 80045ba:	60bd      	str	r5, [r7, #8]
 80045bc:	eba0 0008 	sub.w	r0, r0, r8
  us -= (ms * 1000 + s * 1000000);
 80045c0:	fba5 5606 	umull	r5, r6, r5, r6
  t->fcpu = fcpu;
 80045c4:	9a01      	ldr	r2, [sp, #4]
  us -= (ms * 1000 + s * 1000000);
 80045c6:	1b40      	subs	r0, r0, r5
  t->us = us;
 80045c8:	60f8      	str	r0, [r7, #12]
  return 0;
 80045ca:	2000      	movs	r0, #0
  t->s = s;
 80045cc:	e9c7 2b00 	strd	r2, fp, [r7]
}
 80045d0:	b003      	add	sp, #12
 80045d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 80045d6:	f04f 30ff 	mov.w	r0, #4294967295
 80045da:	e7f9      	b.n	80045d0 <dwtCyclesToTime+0x68>
 80045dc:	000f4240 	.word	0x000f4240

080045e0 <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 80045e0:	b510      	push	{r4, lr}
 80045e2:	4604      	mov	r4, r0
 80045e4:	ed2d 8b02 	vpush	{d8}
 80045e8:	b082      	sub	sp, #8
 80045ea:	9101      	str	r1, [sp, #4]
  float res;
  float fcpu = (float)port_hal_get_cpu_freq();
 80045ec:	f7fe f832 	bl	8002654 <HAL_RCC_GetHCLKFreq>
  res = ((float)clks * (float)1000.0) / fcpu;
 80045f0:	9901      	ldr	r1, [sp, #4]
  float fcpu = (float)port_hal_get_cpu_freq();
 80045f2:	ee08 0a10 	vmov	s16, r0
  res = ((float)clks * (float)1000.0) / fcpu;
 80045f6:	4620      	mov	r0, r4
 80045f8:	f7fc fbbe 	bl	8000d78 <__aeabi_ul2f>
 80045fc:	eddf 7a06 	vldr	s15, [pc, #24]	; 8004618 <dwtCyclesToFloatMs+0x38>
 8004600:	ee07 0a10 	vmov	s14, r0
  float fcpu = (float)port_hal_get_cpu_freq();
 8004604:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  res = ((float)clks * (float)1000.0) / fcpu;
 8004608:	ee27 0a27 	vmul.f32	s0, s14, s15
  return res;
}
 800460c:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8004610:	b002      	add	sp, #8
 8004612:	ecbd 8b02 	vpop	{d8}
 8004616:	bd10      	pop	{r4, pc}
 8004618:	447a0000 	.word	0x447a0000

0800461c <getFlashCacheConf>:

#if defined(STM32F7)

  mconf |= MCONF_F7;

  __I uint32_t acr = FLASH->ACR;
 800461c:	4b11      	ldr	r3, [pc, #68]	; (8004664 <getFlashCacheConf+0x48>)
{
 800461e:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR;
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	9300      	str	r3, [sp, #0]
  __I uint32_t ccr = SCB->CCR;
 8004624:	4b10      	ldr	r3, [pc, #64]	; (8004668 <getFlashCacheConf+0x4c>)
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 800462a:	9800      	ldr	r0, [sp, #0]
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 800462c:	9b00      	ldr	r3, [sp, #0]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 800462e:	f000 000f 	and.w	r0, r0, #15
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8004632:	05db      	lsls	r3, r3, #23
    mconf |= MCONF_ART_PREF;
  if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 8004634:	9b00      	ldr	r3, [sp, #0]
    mconf |= MCONF_ART_PREF;
 8004636:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800463a:	bf48      	it	mi
 800463c:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 8004640:	0599      	lsls	r1, r3, #22
    mconf |= MCONF_ART_EN;

  if (ccr & SCB_CCR_IC_Msk)
 8004642:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_EN;
 8004644:	bf48      	it	mi
 8004646:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if (ccr & SCB_CCR_IC_Msk)
 800464a:	039a      	lsls	r2, r3, #14
    mconf |= MCONF_CORE_ICACHE;
  if (ccr & SCB_CCR_DC_Msk)
 800464c:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_CORE_ICACHE;
 800464e:	bf48      	it	mi
 8004650:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
  if (ccr & SCB_CCR_DC_Msk)
 8004654:	03db      	lsls	r3, r3, #15
    mconf |= MCONF_CORE_DCACHE;
 8004656:	bf48      	it	mi
 8004658:	f440 6000 	orrmi.w	r0, r0, #2048	; 0x800
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 800465c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004660:	b002      	add	sp, #8
 8004662:	4770      	bx	lr
 8004664:	40023c00 	.word	0x40023c00
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 800466c:	b510      	push	{r4, lr}
 800466e:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 8004670:	f7fd fff0 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 8004674:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 8004676:	f7fd ffed 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 800467a:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 800467c:	f7ff ffce 	bl	800461c <getFlashCacheConf>
 8004680:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 8004682:	f7fd f97d 	bl	8001980 <HAL_GetDEVID>
 8004686:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8004688:	f7fd f974 	bl	8001974 <HAL_GetREVID>
 800468c:	6120      	str	r0, [r4, #16]
}
 800468e:	bd10      	pop	{r4, pc}

08004690 <getSysConf>:
  if (!conf)
 8004690:	b108      	cbz	r0, 8004696 <getSysConf+0x6>
 8004692:	f7ff bfeb 	b.w	800466c <getSysConf.part.0>
}
 8004696:	4770      	bx	lr

08004698 <systemSettingLog>:

void systemSettingLog(void)
{
 8004698:	b570      	push	{r4, r5, r6, lr}
 800469a:	b088      	sub	sp, #32
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800469c:	2203      	movs	r2, #3
 800469e:	2301      	movs	r3, #1
 80046a0:	210b      	movs	r1, #11
 80046a2:	482d      	ldr	r0, [pc, #180]	; (8004758 <systemSettingLog+0xc0>)
 80046a4:	f7ff fec4 	bl	8004430 <lc_print>
  if (!conf)
 80046a8:	a803      	add	r0, sp, #12
 80046aa:	f7ff ffdf 	bl	800466c <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 80046ae:	482b      	ldr	r0, [pc, #172]	; (800475c <systemSettingLog+0xc4>)
 80046b0:	f7ff febe 	bl	8004430 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80046b4:	9906      	ldr	r1, [sp, #24]
  switch (dev_id) {
 80046b6:	f46f 6389 	mvn.w	r3, #1096	; 0x448
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80046ba:	4829      	ldr	r0, [pc, #164]	; (8004760 <systemSettingLog+0xc8>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 80046bc:	4c29      	ldr	r4, [pc, #164]	; (8004764 <systemSettingLog+0xcc>)
 80046be:	18cb      	adds	r3, r1, r3
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b09      	cmp	r3, #9
 80046c4:	bf96      	itet	ls
 80046c6:	4a28      	ldrls	r2, [pc, #160]	; (8004768 <systemSettingLog+0xd0>)
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80046c8:	4a28      	ldrhi	r2, [pc, #160]	; (800476c <systemSettingLog+0xd4>)
 80046ca:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 80046ce:	9b07      	ldr	r3, [sp, #28]
 80046d0:	f7ff feae 	bl	8004430 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 80046d4:	4b26      	ldr	r3, [pc, #152]	; (8004770 <systemSettingLog+0xd8>)
 80046d6:	2107      	movs	r1, #7
 80046d8:	1d5a      	adds	r2, r3, #5
 80046da:	f103 000a 	add.w	r0, r3, #10
 80046de:	f7ff fea7 	bl	8004430 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 80046e2:	f7fd f943 	bl	800196c <HAL_GetHalVersion>
 80046e6:	4601      	mov	r1, r0
 80046e8:	4822      	ldr	r0, [pc, #136]	; (8004774 <systemSettingLog+0xdc>)
 80046ea:	f7ff fea1 	bl	8004430 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 80046ee:	9903      	ldr	r1, [sp, #12]
 80046f0:	4821      	ldr	r0, [pc, #132]	; (8004778 <systemSettingLog+0xe0>)
 80046f2:	fb91 f1f4 	sdiv	r1, r1, r4
 80046f6:	f7ff fe9b 	bl	8004430 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 80046fa:	9904      	ldr	r1, [sp, #16]
 80046fc:	481f      	ldr	r0, [pc, #124]	; (800477c <systemSettingLog+0xe4>)
 80046fe:	fb91 f1f4 	sdiv	r1, r1, r4
 8004702:	f7ff fe95 	bl	8004430 <lc_print>

#if defined(STM32F7)
  uint32_t acr = FLASH->ACR;
 8004706:	4b1e      	ldr	r3, [pc, #120]	; (8004780 <systemSettingLog+0xe8>)
    return "False";
 8004708:	4c1e      	ldr	r4, [pc, #120]	; (8004784 <systemSettingLog+0xec>)
  uint32_t acr = FLASH->ACR;
 800470a:	6819      	ldr	r1, [r3, #0]
    return "False";
 800470c:	1d65      	adds	r5, r4, #5
  uint32_t ccr = SCB->CCR;
 800470e:	4b1e      	ldr	r3, [pc, #120]	; (8004788 <systemSettingLog+0xf0>)
    return "False";
 8004710:	f411 7f80 	tst.w	r1, #256	; 0x100
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8004714:	f104 00ec 	add.w	r0, r4, #236	; 0xec
  uint32_t ccr = SCB->CCR;
 8004718:	695e      	ldr	r6, [r3, #20]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800471a:	f001 030f 	and.w	r3, r1, #15
    return "False";
 800471e:	bf14      	ite	ne
 8004720:	4622      	movne	r2, r4
 8004722:	462a      	moveq	r2, r5
 8004724:	f411 7f00 	tst.w	r1, #512	; 0x200
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	bf14      	ite	ne
 800472c:	4623      	movne	r3, r4
 800472e:	462b      	moveq	r3, r5
 8004730:	f7ff fe7e 	bl	8004430 <lc_print>
    return "False";
 8004734:	f416 3f00 	tst.w	r6, #131072	; 0x20000
      (int)acr,
      bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
      bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8004738:	f204 1029 	addw	r0, r4, #297	; 0x129
    return "False";
 800473c:	bf14      	ite	ne
 800473e:	4621      	movne	r1, r4
 8004740:	4629      	moveq	r1, r5
 8004742:	f416 3f80 	tst.w	r6, #65536	; 0x10000
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8004746:	bf14      	ite	ne
 8004748:	4622      	movne	r2, r4
 800474a:	462a      	moveq	r2, r5
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 800474c:	b008      	add	sp, #32
 800474e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8004752:	f7ff be6d 	b.w	8004430 <lc_print>
 8004756:	bf00      	nop
 8004758:	0800d8b6 	.word	0x0800d8b6
 800475c:	0800d8d3 	.word	0x0800d8d3
 8004760:	0800d8f3 	.word	0x0800d8f3
 8004764:	000f4240 	.word	0x000f4240
 8004768:	0800def4 	.word	0x0800def4
 800476c:	0800d8a3 	.word	0x0800d8a3
 8004770:	0800d924 	.word	0x0800d924
 8004774:	0800d94c 	.word	0x0800d94c
 8004778:	0800d965 	.word	0x0800d965
 800477c:	0800d97e 	.word	0x0800d97e
 8004780:	40023c00 	.word	0x40023c00
 8004784:	0800d8ab 	.word	0x0800d8ab
 8004788:	e000ed00 	.word	0xe000ed00

0800478c <_mon_alloc_reset>:

#include <stdlib.h>

#pragma GCC push_options
#pragma GCC optimize ("O0")
static inline void _mon_alloc_reset(void) {
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
    memset((void *)&io_malloc, 0, sizeof(struct io_malloc));
 8004790:	221c      	movs	r2, #28
 8004792:	2100      	movs	r1, #0
 8004794:	4805      	ldr	r0, [pc, #20]	; (80047ac <_mon_alloc_reset+0x20>)
 8004796:	f006 fee8 	bl	800b56a <memset>
    /* force a call of wrap functions */\
    free(malloc(10));
 800479a:	200a      	movs	r0, #10
 800479c:	f7ff fe6a 	bl	8004474 <__wrap_malloc>
 80047a0:	4603      	mov	r3, r0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff fe8e 	bl	80044c4 <__wrap_free>
}
 80047a8:	bf00      	nop
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20004dd4 	.word	0x20004dd4

080047b0 <aiPbCmdSysInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 80047b0:	b530      	push	{r4, r5, lr}
 80047b2:	b089      	sub	sp, #36	; 0x24
 80047b4:	4605      	mov	r5, r0
 80047b6:	460c      	mov	r4, r1
  UNUSED(param);
  struct mcu_conf conf;
  struct _encode_uint32 array_u32;

  getSysConf(&conf);
 80047b8:	a803      	add	r0, sp, #12
 80047ba:	f7ff ff69 	bl	8004690 <getSysConf>

  resp->which_payload = respMsg_sinfo_tag;
 80047be:	230b      	movs	r3, #11
#if defined(HAS_EXTRA_CONF) && HAS_EXTRA_CONF > 0
  array_u32.size = HAS_EXTRA_CONF;
  array_u32.offset = 4;
  array_u32.data = &conf.extra[0];
#else
  array_u32.size = 0;
 80047c0:	2200      	movs	r2, #0
#endif

  resp->payload.sinfo.extra.funcs.encode = encode_uint32;
  resp->payload.sinfo.extra.arg = &array_u32;

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80047c2:	4621      	mov	r1, r4
  resp->which_payload = respMsg_sinfo_tag;
 80047c4:	80e3      	strh	r3, [r4, #6]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80047c6:	4628      	mov	r0, r5
  resp->payload.sinfo.devid = conf.devid;
 80047c8:	9b06      	ldr	r3, [sp, #24]
  resp->payload.sinfo.extra.arg = &array_u32;
 80047ca:	f8c4 d01c 	str.w	sp, [r4, #28]
  resp->payload.sinfo.devid = conf.devid;
 80047ce:	60a3      	str	r3, [r4, #8]
  resp->payload.sinfo.sclock = conf.sclk;
 80047d0:	9b03      	ldr	r3, [sp, #12]
  array_u32.size = 0;
 80047d2:	9200      	str	r2, [sp, #0]
  resp->payload.sinfo.sclock = conf.sclk;
 80047d4:	60e3      	str	r3, [r4, #12]
  resp->payload.sinfo.hclock = conf.hclk;
 80047d6:	9b04      	ldr	r3, [sp, #16]
 80047d8:	6123      	str	r3, [r4, #16]
  resp->payload.sinfo.cache = conf.conf;
 80047da:	9b05      	ldr	r3, [sp, #20]
 80047dc:	6163      	str	r3, [r4, #20]
  array_u32.offset = 4;
 80047de:	2304      	movs	r3, #4
  array_u32.data = NULL;
 80047e0:	e9cd 2301 	strd	r2, r3, [sp, #4]
  resp->payload.sinfo.extra.funcs.encode = encode_uint32;
 80047e4:	4b02      	ldr	r3, [pc, #8]	; (80047f0 <aiPbCmdSysInfo+0x40>)
 80047e6:	61a3      	str	r3, [r4, #24]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80047e8:	f7ff fab2 	bl	8003d50 <aiPbMgrSendResp>
}
 80047ec:	b009      	add	sp, #36	; 0x24
 80047ee:	bd30      	pop	{r4, r5, pc}
 80047f0:	08003b73 	.word	0x08003b73

080047f4 <encode_mempool_to_tensor_desc>:
{
 80047f4:	b570      	push	{r4, r5, r6, lr}
 80047f6:	461e      	mov	r6, r3
  array_u32->size = 1;
 80047f8:	2301      	movs	r3, #1
  if (info->name)
 80047fa:	6808      	ldr	r0, [r1, #0]
{
 80047fc:	460d      	mov	r5, r1
  array_u32->size = 1;
 80047fe:	6033      	str	r3, [r6, #0]
  array_u32->data = (void *)&info->size;
 8004800:	1d0b      	adds	r3, r1, #4
{
 8004802:	4614      	mov	r4, r2
  array_u32->data = (void *)&info->size;
 8004804:	6073      	str	r3, [r6, #4]
  array_u32->offset = 4;
 8004806:	2304      	movs	r3, #4
 8004808:	60b3      	str	r3, [r6, #8]
  if (info->name)
 800480a:	b1a0      	cbz	r0, 8004836 <encode_mempool_to_tensor_desc+0x42>
    aiPbStrCopy(info->name, &msg->name[0],
 800480c:	2240      	movs	r2, #64	; 0x40
 800480e:	4621      	mov	r1, r4
 8004810:	f7ff fa44 	bl	8003c9c <aiPbStrCopy>
  msg->format = AI_BUFFER_FORMAT_U8;
 8004814:	4b09      	ldr	r3, [pc, #36]	; (800483c <encode_mempool_to_tensor_desc+0x48>)
 8004816:	6423      	str	r3, [r4, #64]	; 0x40
  msg->size = info->size;
 8004818:	686b      	ldr	r3, [r5, #4]
 800481a:	6463      	str	r3, [r4, #68]	; 0x44
  msg->n_dims = EnumShapeFmt_F_SHAPE_FMT_BCWH << EnumShapeFmt_F_SHAPE_FMT_POS | array_u32->size;
 800481c:	6833      	ldr	r3, [r6, #0]
 800481e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004822:	64a3      	str	r3, [r4, #72]	; 0x48
  msg->scale = 0.0;
 8004824:	2300      	movs	r3, #0
 8004826:	6563      	str	r3, [r4, #84]	; 0x54
  msg->zeropoint = 0;
 8004828:	2300      	movs	r3, #0
 800482a:	65a3      	str	r3, [r4, #88]	; 0x58
  msg->addr = (uint32_t)info->addr;
 800482c:	68ab      	ldr	r3, [r5, #8]
 800482e:	65e3      	str	r3, [r4, #92]	; 0x5c
  msg->flags = EnumTensorFlag_TENSOR_FLAG_MEMPOOL;
 8004830:	2308      	movs	r3, #8
 8004832:	6623      	str	r3, [r4, #96]	; 0x60
}
 8004834:	bd70      	pop	{r4, r5, r6, pc}
    msg->name[0] = 0;
 8004836:	7010      	strb	r0, [r2, #0]
 8004838:	e7ec      	b.n	8004814 <encode_mempool_to_tensor_desc+0x20>
 800483a:	bf00      	nop
 800483c:	00040440 	.word	0x00040440

08004840 <fill_tensor_desc_msg>:
{
 8004840:	b570      	push	{r4, r5, r6, lr}
 8004842:	460c      	mov	r4, r1
  array_u32->size = buff->shape.size;
 8004844:	6941      	ldr	r1, [r0, #20]
  array_u32->data = (uint32_t *)buff->shape.data;
 8004846:	6986      	ldr	r6, [r0, #24]
  array_u32->offset = sizeof(buff->shape.data[0]);
 8004848:	f04f 0c04 	mov.w	ip, #4
  array_u32->size = buff->shape.size;
 800484c:	f3c1 2117 	ubfx	r1, r1, #8, #24
{
 8004850:	4605      	mov	r5, r0
 8004852:	ed2d 8b02 	vpush	{d8}
  array_u32->offset = sizeof(buff->shape.data[0]);
 8004856:	f8c2 c008 	str.w	ip, [r2, #8]
{
 800485a:	eeb0 8a40 	vmov.f32	s16, s0
  array_u32->size = buff->shape.size;
 800485e:	6011      	str	r1, [r2, #0]
  array_u32->data = (uint32_t *)buff->shape.data;
 8004860:	6056      	str	r6, [r2, #4]
  msg->name[0] = 0;
 8004862:	2200      	movs	r2, #0
 8004864:	7022      	strb	r2, [r4, #0]
  msg->format = (uint32_t)buff->format;
 8004866:	6802      	ldr	r2, [r0, #0]
  msg->flags = flags;
 8004868:	6623      	str	r3, [r4, #96]	; 0x60
  if (buff->shape.type == AI_SHAPE_BCWH)
 800486a:	7d03      	ldrb	r3, [r0, #20]
  msg->format = (uint32_t)buff->format;
 800486c:	6422      	str	r2, [r4, #64]	; 0x40
  if (buff->shape.type == AI_SHAPE_BCWH)
 800486e:	f103 3cff 	add.w	ip, r3, #4294967295
 8004872:	f1dc 0300 	rsbs	r3, ip, #0
 8004876:	eb43 030c 	adc.w	r3, r3, ip
  n_dims = shape_fmt << EnumShapeFmt_F_SHAPE_FMT_POS | buff->shape.size;
 800487a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  msg->n_dims = _shape_to_n_dims(buff);
 800487e:	64a1      	str	r1, [r4, #72]	; 0x48
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8004880:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8004882:	6836      	ldr	r6, [r6, #0]
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8004884:	f002 ff9e 	bl	80077c4 <ai_buffer_get_size>
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buff);
 8004888:	68ab      	ldr	r3, [r5, #8]
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 800488a:	4370      	muls	r0, r6
  msg->zeropoint = zero_point;
 800488c:	9a06      	ldr	r2, [sp, #24]
  msg->scale = scale;
 800488e:	ed84 8a15 	vstr	s16, [r4, #84]	; 0x54
  msg->size = _get_buffer_element_size(buff);
 8004892:	6460      	str	r0, [r4, #68]	; 0x44
  msg->zeropoint = zero_point;
 8004894:	65a2      	str	r2, [r4, #88]	; 0x58
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 8004896:	b1a3      	cbz	r3, 80048c2 <fill_tensor_desc_msg+0x82>
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	07d0      	lsls	r0, r2, #31
 800489c:	d511      	bpl.n	80048c2 <fill_tensor_desc_msg+0x82>
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	b17b      	cbz	r3, 80048c2 <fill_tensor_desc_msg+0x82>
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	b192      	cbz	r2, 80048cc <fill_tensor_desc_msg+0x8c>
 80048a6:	8859      	ldrh	r1, [r3, #2]
 80048a8:	b181      	cbz	r1, 80048cc <fill_tensor_desc_msg+0x8c>
 80048aa:	6811      	ldr	r1, [r2, #0]
 80048ac:	6809      	ldr	r1, [r1, #0]
 80048ae:	6561      	str	r1, [r4, #84]	; 0x54
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 80048b0:	8819      	ldrh	r1, [r3, #0]
 80048b2:	0789      	lsls	r1, r1, #30
 80048b4:	d50c      	bpl.n	80048d0 <fill_tensor_desc_msg+0x90>
 80048b6:	b19a      	cbz	r2, 80048e0 <fill_tensor_desc_msg+0xa0>
 80048b8:	885b      	ldrh	r3, [r3, #2]
 80048ba:	b10b      	cbz	r3, 80048c0 <fill_tensor_desc_msg+0x80>
 80048bc:	6853      	ldr	r3, [r2, #4]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	65a3      	str	r3, [r4, #88]	; 0x58
  msg->addr = (uint32_t)buff->data;
 80048c2:	686b      	ldr	r3, [r5, #4]
}
 80048c4:	ecbd 8b02 	vpop	{d8}
  msg->addr = (uint32_t)buff->data;
 80048c8:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80048ca:	bd70      	pop	{r4, r5, r6, pc}
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 80048cc:	2100      	movs	r1, #0
 80048ce:	e7ee      	b.n	80048ae <fill_tensor_desc_msg+0x6e>
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 80048d0:	b132      	cbz	r2, 80048e0 <fill_tensor_desc_msg+0xa0>
 80048d2:	885b      	ldrh	r3, [r3, #2]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f3      	beq.n	80048c0 <fill_tensor_desc_msg+0x80>
 80048d8:	6853      	ldr	r3, [r2, #4]
 80048da:	f993 3000 	ldrsb.w	r3, [r3]
 80048de:	e7ef      	b.n	80048c0 <fill_tensor_desc_msg+0x80>
 80048e0:	4613      	mov	r3, r2
 80048e2:	e7ed      	b.n	80048c0 <fill_tensor_desc_msg+0x80>

080048e4 <encode_ai_buffer_to_tensor_desc>:
{
 80048e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048e6:	460c      	mov	r4, r1
 80048e8:	4611      	mov	r1, r2
 80048ea:	461a      	mov	r2, r3
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 80048ec:	68e3      	ldr	r3, [r4, #12]
  ai_buffer *buff = &((ai_buffer *)(info->buffer))[index];
 80048ee:	6825      	ldr	r5, [r4, #0]
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	ed94 0a02 	vldr	s0, [r4, #8]
 80048f6:	6863      	ldr	r3, [r4, #4]
 80048f8:	241c      	movs	r4, #28
 80048fa:	fb04 5000 	mla	r0, r4, r0, r5
 80048fe:	f7ff ff9f 	bl	8004840 <fill_tensor_desc_msg>
}
 8004902:	b003      	add	sp, #12
 8004904:	bd30      	pop	{r4, r5, pc}
	...

08004908 <cyclesCounterStart>:
  port_dwt_init();
#endif /* !USE_SYSTICK_ONLY */
}

__STATIC_INLINE void cyclesCounterStart(void)
{
 8004908:	b508      	push	{r3, lr}
#else
#if USE_CORE_CLOCK_ONLY == 1
  port_dwt_reset();
  cyclesCount.dwt_start = port_dwt_get_cycles();
#else
  cyclesCount.tick_start = port_hal_get_tick();
 800490a:	f7fd f817 	bl	800193c <HAL_GetTick>
 800490e:	4b04      	ldr	r3, [pc, #16]	; (8004920 <cyclesCounterStart+0x18>)
  port_dwt_reset();
 8004910:	4a04      	ldr	r2, [pc, #16]	; (8004924 <cyclesCounterStart+0x1c>)
 8004912:	2100      	movs	r1, #0
  cyclesCount.tick_start = port_hal_get_tick();
 8004914:	6098      	str	r0, [r3, #8]
  port_dwt_reset();
 8004916:	6051      	str	r1, [r2, #4]
  cyclesCount.dwt_start = port_dwt_get_cycles();
 8004918:	6852      	ldr	r2, [r2, #4]
 800491a:	605a      	str	r2, [r3, #4]
#endif
#endif
}
 800491c:	bd08      	pop	{r3, pc}
 800491e:	bf00      	nop
 8004920:	20004dc8 	.word	0x20004dc8
 8004924:	e0001000 	.word	0xe0001000

08004928 <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8004928:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(port_dwt_get_cycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 800492a:	4b10      	ldr	r3, [pc, #64]	; (800496c <cyclesCounterEnd+0x44>)
 800492c:	4d10      	ldr	r5, [pc, #64]	; (8004970 <cyclesCounterEnd+0x48>)
 800492e:	685c      	ldr	r4, [r3, #4]
 8004930:	686b      	ldr	r3, [r5, #4]
 8004932:	1ae4      	subs	r4, r4, r3
 8004934:	2300      	movs	r3, #0
 8004936:	9301      	str	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8004938:	f7fd f800 	bl	800193c <HAL_GetTick>
 800493c:	68aa      	ldr	r2, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 800493e:	9b01      	ldr	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8004940:	1a80      	subs	r0, r0, r2
  if (tick_e > cyclesCount.dwt_max) {
 8004942:	682a      	ldr	r2, [r5, #0]
 8004944:	4290      	cmp	r0, r2
 8004946:	d90c      	bls.n	8004962 <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8004948:	4619      	mov	r1, r3
 800494a:	f7fc fa5b 	bl	8000e04 <__aeabi_uldivmod>
 800494e:	f04f 33ff 	mov.w	r3, #4294967295
 8004952:	fba0 0303 	umull	r0, r3, r0, r3
 8004956:	1900      	adds	r0, r0, r4
 8004958:	eba3 0301 	sub.w	r3, r3, r1
 800495c:	4604      	mov	r4, r0
 800495e:	f143 0300 	adc.w	r3, r3, #0
  }
  return dwt_e;
#endif
#endif
}
 8004962:	4620      	mov	r0, r4
 8004964:	4619      	mov	r1, r3
 8004966:	b003      	add	sp, #12
 8004968:	bd30      	pop	{r4, r5, pc}
 800496a:	bf00      	nop
 800496c:	e0001000 	.word	0xe0001000
 8004970:	20004dc8 	.word	0x20004dc8

08004974 <_get_buffer_size>:
{
 8004974:	b538      	push	{r3, r4, r5, lr}
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8004976:	6983      	ldr	r3, [r0, #24]
{
 8004978:	4604      	mov	r4, r0
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 800497a:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 800497c:	681d      	ldr	r5, [r3, #0]
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 800497e:	f002 ff21 	bl	80077c4 <ai_buffer_get_size>
 8004982:	6821      	ldr	r1, [r4, #0]
 8004984:	4368      	muls	r0, r5
}
 8004986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 800498a:	f002 bf4f 	b.w	800782c <ai_buffer_get_byte_size>
	...

08004990 <aiExecCtx>:
{
 8004990:	e92d 4178 	stmdb	sp!, {r3, r4, r5, r6, r8, lr}
 8004994:	4604      	mov	r4, r0
  if (!nn_name[0]) {
 8004996:	7800      	ldrb	r0, [r0, #0]
 8004998:	b938      	cbnz	r0, 80049aa <aiExecCtx+0x1a>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 800499a:	b921      	cbnz	r1, 80049a6 <aiExecCtx+0x16>
 800499c:	4b10      	ldr	r3, [pc, #64]	; (80049e0 <aiExecCtx+0x50>)
 800499e:	6818      	ldr	r0, [r3, #0]
      cur = &net_exec_ctx[pos];
 80049a0:	2800      	cmp	r0, #0
 80049a2:	bf18      	it	ne
 80049a4:	4618      	movne	r0, r3
}
 80049a6:	e8bd 8178 	ldmia.w	sp!, {r3, r4, r5, r6, r8, pc}
      if (cur->handle &&
 80049aa:	4e0d      	ldr	r6, [pc, #52]	; (80049e0 <aiExecCtx+0x50>)
 80049ac:	6830      	ldr	r0, [r6, #0]
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d0f9      	beq.n	80049a6 <aiExecCtx+0x16>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 80049b2:	f8d6 8008 	ldr.w	r8, [r6, #8]
 80049b6:	4640      	mov	r0, r8
 80049b8:	f7fb fc7a 	bl	80002b0 <strlen>
 80049bc:	4605      	mov	r5, r0
 80049be:	4620      	mov	r0, r4
 80049c0:	f7fb fc76 	bl	80002b0 <strlen>
      if (cur->handle &&
 80049c4:	4285      	cmp	r5, r0
 80049c6:	d109      	bne.n	80049dc <aiExecCtx+0x4c>
          (strncmp(cur->report.model_name, nn_name,
 80049c8:	462a      	mov	r2, r5
 80049ca:	4621      	mov	r1, r4
 80049cc:	4640      	mov	r0, r8
 80049ce:	f006 fdd4 	bl	800b57a <strncmp>
      cur = &net_exec_ctx[pos];
 80049d2:	2800      	cmp	r0, #0
 80049d4:	bf0c      	ite	eq
 80049d6:	4630      	moveq	r0, r6
 80049d8:	2000      	movne	r0, #0
 80049da:	e7e4      	b.n	80049a6 <aiExecCtx+0x16>
 80049dc:	2000      	movs	r0, #0
 80049de:	e7e2      	b.n	80049a6 <aiExecCtx+0x16>
 80049e0:	20004e60 	.word	0x20004e60

080049e4 <send_ai_io_tensor.isra.0>:
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 80049e4:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 80049e8:	461d      	mov	r5, r3
 80049ea:	b08b      	sub	sp, #44	; 0x2c
  resp->which_payload = respMsg_tensor_tag;
 80049ec:	2311      	movs	r3, #17
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 80049ee:	460c      	mov	r4, r1
 80049f0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 80049f4:	f10d 0a0c 	add.w	sl, sp, #12
  resp->which_payload = respMsg_tensor_tag;
 80049f8:	80cb      	strh	r3, [r1, #6]
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 80049fa:	4606      	mov	r6, r0
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 80049fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 80049fe:	4690      	mov	r8, r2
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8004a00:	3108      	adds	r1, #8
 8004a02:	4652      	mov	r2, sl
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	4628      	mov	r0, r5
 8004a08:	464b      	mov	r3, r9
 8004a0a:	f7ff ff19 	bl	8004840 <fill_tensor_desc_msg>
  resp->payload.tensor.desc.dims.funcs.encode = encode_uint32;
 8004a0e:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <send_ai_io_tensor.isra.0+0x6c>)
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 8004a10:	f419 7f00 	tst.w	r9, #512	; 0x200
  resp->payload.tensor.desc.dims.arg = &array_u32;
 8004a14:	e9c4 3a15 	strd	r3, sl, [r4, #84]	; 0x54
  resp->payload.tensor.data.addr = (uint32_t)buffer->data;
 8004a18:	686b      	ldr	r3, [r5, #4]
 8004a1a:	6763      	str	r3, [r4, #116]	; 0x74
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 8004a1c:	d115      	bne.n	8004a4a <send_ai_io_tensor.isra.0+0x66>
    resp->payload.tensor.data.size = _get_buffer_size(buffer);
 8004a1e:	4628      	mov	r0, r5
 8004a20:	f7ff ffa8 	bl	8004974 <_get_buffer_size>
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8004a24:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004a26:	2200      	movs	r2, #0
    resp->payload.tensor.data.size = 0;
 8004a28:	6720      	str	r0, [r4, #112]	; 0x70
  aiPbMgrSendResp(req, resp, state);
 8004a2a:	4621      	mov	r1, r4
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8004a2c:	e9cd 3208 	strd	r3, r2, [sp, #32]
  resp->payload.tensor.data.datas.funcs.encode = &encode_data_cb;
 8004a30:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <send_ai_io_tensor.isra.0+0x70>)
 8004a32:	67a3      	str	r3, [r4, #120]	; 0x78
  resp->payload.tensor.data.datas.arg = (void *)&data;
 8004a34:	ab06      	add	r3, sp, #24
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8004a36:	e9cd 2006 	strd	r2, r0, [sp, #24]
  aiPbMgrSendResp(req, resp, state);
 8004a3a:	4642      	mov	r2, r8
 8004a3c:	4630      	mov	r0, r6
  resp->payload.tensor.data.datas.arg = (void *)&data;
 8004a3e:	67e3      	str	r3, [r4, #124]	; 0x7c
  aiPbMgrSendResp(req, resp, state);
 8004a40:	f7ff f986 	bl	8003d50 <aiPbMgrSendResp>
}
 8004a44:	b00b      	add	sp, #44	; 0x2c
 8004a46:	e8bd 8770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, pc}
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	e7ea      	b.n	8004a24 <send_ai_io_tensor.isra.0+0x40>
 8004a4e:	bf00      	nop
 8004a50:	08003b73 	.word	0x08003b73
 8004a54:	08003bcb 	.word	0x08003bcb

08004a58 <aiOnExecNode_cb>:
    const ai_observer_node *node) {
 8004a58:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8004a5c:	4688      	mov	r8, r1
 8004a5e:	4615      	mov	r5, r2
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8004a60:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
    const ai_observer_node *node) {
 8004a64:	ed2d 8b02 	vpush	{d8}
 8004a68:	b095      	sub	sp, #84	; 0x54
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 8004a6a:	f7ff ff5d 	bl	8004928 <cyclesCounterEnd>
  if (flags & AI_OBSERVER_PRE_EVT) {
 8004a6e:	f018 0602 	ands.w	r6, r8, #2
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 8004a72:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if (flags & AI_OBSERVER_PRE_EVT) {
 8004a76:	d012      	beq.n	8004a9e <aiOnExecNode_cb+0x46>
    obs_ctx->n_cb_in++;
 8004a78:	6863      	ldr	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8004a7a:	f418 7f80 	tst.w	r8, #256	; 0x100
    obs_ctx->n_cb_in++;
 8004a7e:	f103 0301 	add.w	r3, r3, #1
 8004a82:	6063      	str	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8004a84:	d003      	beq.n	8004a8e <aiOnExecNode_cb+0x36>
      obs_ctx->tnodes = ts;
 8004a86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a8a:	e9c4 2308 	strd	r2, r3, [r4, #32]
  cyclesCounterStart();
 8004a8e:	f7ff ff3b 	bl	8004908 <cyclesCounterStart>
}
 8004a92:	2000      	movs	r0, #0
 8004a94:	b015      	add	sp, #84	; 0x54
 8004a96:	ecbd 8b02 	vpop	{d8}
 8004a9a:	e8bd 8770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, pc}
  } else if (flags & AI_OBSERVER_POST_EVT) {
 8004a9e:	f018 0f04 	tst.w	r8, #4
 8004aa2:	d0f4      	beq.n	8004a8e <aiOnExecNode_cb+0x36>
    cyclesCounterStart();
 8004aa4:	f7ff ff30 	bl	8004908 <cyclesCounterStart>
    obs_ctx->tnodes += ts;
 8004aa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004aac:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8004ab0:	181b      	adds	r3, r3, r0
 8004ab2:	eb42 0201 	adc.w	r2, r2, r1
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 8004ab6:	f418 7f00 	tst.w	r8, #512	; 0x200
    type |= (node->type & (ai_u16)0x7FFF);
 8004aba:	f8b5 8002 	ldrh.w	r8, [r5, #2]
    obs_ctx->tnodes += ts;
 8004abe:	e9c4 3208 	strd	r3, r2, [r4, #32]
    obs_ctx->n_cb_out++;
 8004ac2:	68a3      	ldr	r3, [r4, #8]
    type |= (node->type & (ai_u16)0x7FFF);
 8004ac4:	f3c8 080e 	ubfx	r8, r8, #0, #15
    obs_ctx->n_cb_out++;
 8004ac8:	f103 0301 	add.w	r3, r3, #1
 8004acc:	60a3      	str	r3, [r4, #8]
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 8004ace:	bf0c      	ite	eq
 8004ad0:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8004ad4:	f04f 7340 	movne.w	r3, #50331648	; 0x3000000
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8004ad8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    type |= (node->type & (ai_u16)0x7FFF);
 8004adc:	ea48 0803 	orr.w	r8, r8, r3
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8004ae0:	f7ff fd7e 	bl	80045e0 <dwtCyclesToFloatMs>
 8004ae4:	ab04      	add	r3, sp, #16
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	ed8d 0a07 	vstr	s0, [sp, #28]
 8004aec:	930a      	str	r3, [sp, #40]	; 0x28
 8004aee:	f04f 33ff 	mov.w	r3, #4294967295
 8004af2:	9209      	str	r2, [sp, #36]	; 0x24
 8004af4:	9608      	str	r6, [sp, #32]
 8004af6:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8004afa:	ab07      	add	r3, sp, #28
 8004afc:	9302      	str	r3, [sp, #8]
 8004afe:	88ab      	ldrh	r3, [r5, #4]
 8004b00:	e9cd 8300 	strd	r8, r3, [sp]
 8004b04:	4633      	mov	r3, r6
 8004b06:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8004b0a:	f7ff f9e7 	bl	8003edc <aiPbMgrSendOperator>
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 8004b0e:	68eb      	ldr	r3, [r5, #12]
 8004b10:	881a      	ldrh	r2, [r3, #0]
 8004b12:	2a01      	cmp	r2, #1
 8004b14:	d910      	bls.n	8004b38 <aiOnExecNode_cb+0xe0>
 8004b16:	f8d3 9004 	ldr.w	r9, [r3, #4]
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8004b1a:	46b2      	mov	sl, r6
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8004b1c:	eddf 8a3c 	vldr	s17, [pc, #240]	; 8004c10 <aiOnExecNode_cb+0x1b8>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8004b20:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004b24:	429e      	cmp	r6, r3
 8004b26:	d207      	bcs.n	8004b38 <aiOnExecNode_cb+0xe0>
 8004b28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004b2c:	b123      	cbz	r3, 8004b38 <aiOnExecNode_cb+0xe0>
 8004b2e:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 8004b32:	f1b8 0f00 	cmp.w	r8, #0
 8004b36:	d109      	bne.n	8004b4c <aiOnExecNode_cb+0xf4>
    obs_ctx->tcom += cyclesCounterEnd();
 8004b38:	f7ff fef6 	bl	8004928 <cyclesCounterEnd>
 8004b3c:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8004b40:	1818      	adds	r0, r3, r0
 8004b42:	eb42 0101 	adc.w	r1, r2, r1
 8004b46:	e9c4 0106 	strd	r0, r1, [r4, #24]
 8004b4a:	e7a0      	b.n	8004a8e <aiOnExecNode_cb+0x36>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8004b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d04a      	beq.n	8004bea <aiOnExecNode_cb+0x192>
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	2a00      	cmp	r2, #0
 8004b58:	d047      	beq.n	8004bea <aiOnExecNode_cb+0x192>
 8004b5a:	8859      	ldrh	r1, [r3, #2]
 8004b5c:	2900      	cmp	r1, #0
 8004b5e:	d044      	beq.n	8004bea <aiOnExecNode_cb+0x192>
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	ed92 8a00 	vldr	s16, [r2]
      if (AI_TENSOR_FMT_GET_SIGN(t))
 8004b66:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8004b6a:	6802      	ldr	r2, [r0, #0]
 8004b6c:	f412 0500 	ands.w	r5, r2, #8388608	; 0x800000
 8004b70:	d03e      	beq.n	8004bf0 <aiOnExecNode_cb+0x198>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d047      	beq.n	8004c06 <aiOnExecNode_cb+0x1ae>
 8004b76:	6859      	ldr	r1, [r3, #4]
 8004b78:	2900      	cmp	r1, #0
 8004b7a:	d046      	beq.n	8004c0a <aiOnExecNode_cb+0x1b2>
 8004b7c:	885d      	ldrh	r5, [r3, #2]
 8004b7e:	b115      	cbz	r5, 8004b86 <aiOnExecNode_cb+0x12e>
 8004b80:	684b      	ldr	r3, [r1, #4]
 8004b82:	f993 5000 	ldrsb.w	r5, [r3]
      ai_buffer buffer =
 8004b86:	68c3      	ldr	r3, [r0, #12]
          AI_BUFFER_INIT(
 8004b88:	2101      	movs	r1, #1
 8004b8a:	4640      	mov	r0, r8
      ai_buffer buffer =
 8004b8c:	920d      	str	r2, [sp, #52]	; 0x34
 8004b8e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004b92:	e9cd 3a0e 	strd	r3, sl, [sp, #56]	; 0x38
          AI_BUFFER_INIT(
 8004b96:	f002 fdeb 	bl	8007770 <get_tensor_size>
      ai_buffer buffer =
 8004b9a:	f898 3008 	ldrb.w	r3, [r8, #8]
 8004b9e:	9011      	str	r0, [sp, #68]	; 0x44
 8004ba0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
          AI_BUFFER_INIT(
 8004ba4:	f8d8 3008 	ldr.w	r3, [r8, #8]
      ai_buffer buffer =
 8004ba8:	9a12      	ldr	r2, [sp, #72]	; 0x48
          AI_BUFFER_INIT(
 8004baa:	f3c3 2317 	ubfx	r3, r3, #8, #24
      ai_buffer buffer =
 8004bae:	f363 221f 	bfi	r2, r3, #8, #24
 8004bb2:	9212      	str	r2, [sp, #72]	; 0x48
 8004bb4:	f8d8 300c 	ldr.w	r3, [r8, #12]
      if (obs_ctx->no_data)
 8004bb8:	7d22      	ldrb	r2, [r4, #20]
      ai_buffer buffer =
 8004bba:	9313      	str	r3, [sp, #76]	; 0x4c
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1U))
 8004bbc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004bc0:	3b01      	subs	r3, #1
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8004bc2:	429e      	cmp	r6, r3
 8004bc4:	bf14      	ite	ne
 8004bc6:	2304      	movne	r3, #4
 8004bc8:	f44f 7382 	moveq.w	r3, #260	; 0x104
      if (obs_ctx->no_data)
 8004bcc:	b10a      	cbz	r2, 8004bd2 <aiOnExecNode_cb+0x17a>
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8004bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8004bd2:	eeb0 0a48 	vmov.f32	s0, s16
 8004bd6:	2202      	movs	r2, #2
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8004bd8:	3601      	adds	r6, #1
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8004bda:	e9cd 3500 	strd	r3, r5, [sp]
 8004bde:	ab0d      	add	r3, sp, #52	; 0x34
 8004be0:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8004be4:	f7ff fefe 	bl	80049e4 <send_ai_io_tensor.isra.0>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8004be8:	e79a      	b.n	8004b20 <aiOnExecNode_cb+0xc8>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8004bea:	eeb0 8a68 	vmov.f32	s16, s17
 8004bee:	e7ba      	b.n	8004b66 <aiOnExecNode_cb+0x10e>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0c8      	beq.n	8004b86 <aiOnExecNode_cb+0x12e>
 8004bf4:	6859      	ldr	r1, [r3, #4]
 8004bf6:	2900      	cmp	r1, #0
 8004bf8:	d0c5      	beq.n	8004b86 <aiOnExecNode_cb+0x12e>
 8004bfa:	885b      	ldrh	r3, [r3, #2]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0c2      	beq.n	8004b86 <aiOnExecNode_cb+0x12e>
 8004c00:	684b      	ldr	r3, [r1, #4]
 8004c02:	781d      	ldrb	r5, [r3, #0]
 8004c04:	e7bf      	b.n	8004b86 <aiOnExecNode_cb+0x12e>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8004c06:	461d      	mov	r5, r3
 8004c08:	e7bd      	b.n	8004b86 <aiOnExecNode_cb+0x12e>
 8004c0a:	460d      	mov	r5, r1
 8004c0c:	e7bb      	b.n	8004b86 <aiOnExecNode_cb+0x12e>
 8004c0e:	bf00      	nop
 8004c10:	00000000 	.word	0x00000000

08004c14 <aiPbCmdNNInfo>:

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8004c14:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8004c18:	4606      	mov	r6, r0
 8004c1a:	b0a2      	sub	sp, #136	; 0x88
 8004c1c:	460c      	mov	r4, r1
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 8004c1e:	300c      	adds	r0, #12
 8004c20:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8004c24:	f7ff feb4 	bl	8004990 <aiExecCtx>
  if (ctx)
 8004c28:	4605      	mov	r5, r0
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	f000 80d6 	beq.w	8004ddc <aiPbCmdNNInfo+0x1c8>
  resp->which_payload = respMsg_minfo_tag;
 8004c30:	2316      	movs	r3, #22
    send_model_info(req, resp, EnumState_S_IDLE, &ctx->report,
 8004c32:	f890 9090 	ldrb.w	r9, [r0, #144]	; 0x90
 8004c36:	f890 8091 	ldrb.w	r8, [r0, #145]	; 0x91
  stai_runtime_get_info(&rt_info);
 8004c3a:	a81c      	add	r0, sp, #112	; 0x70
  resp->which_payload = respMsg_minfo_tag;
 8004c3c:	80e3      	strh	r3, [r4, #6]
  stai_runtime_get_info(&rt_info);
 8004c3e:	f002 fd67 	bl	8007710 <stai_runtime_get_info>
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 8004c42:	2240      	movs	r2, #64	; 0x40
 8004c44:	f104 0108 	add.w	r1, r4, #8
 8004c48:	68a8      	ldr	r0, [r5, #8]
 8004c4a:	f7ff f827 	bl	8003c9c <aiPbStrCopy>
  aiPbStrCopy(nn->model_signature, &resp->payload.minfo.signature[0],
 8004c4e:	2240      	movs	r2, #64	; 0x40
 8004c50:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8004c54:	68e8      	ldr	r0, [r5, #12]
 8004c56:	f7ff f821 	bl	8003c9c <aiPbStrCopy>
  aiPbStrCopy(nn->compile_datetime, &resp->payload.minfo.compile_datetime[0],
 8004c5a:	2240      	movs	r2, #64	; 0x40
 8004c5c:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 8004c60:	6968      	ldr	r0, [r5, #20]
 8004c62:	f7ff f81b 	bl	8003c9c <aiPbStrCopy>
  resp->payload.minfo.runtime_version = _ai_version_to_uint32((const ai_platform_version *)&rt_info.runtime_version);
 8004c66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c68:	ba1b      	rev	r3, r3
 8004c6a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 8004c6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c70:	ba1b      	rev	r3, r3
 8004c72:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 8004c76:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
  if (id == STAI_COMPILER_ID_GCC) {
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d00f      	beq.n	8004c9e <aiPbCmdNNInfo+0x8a>
  else if (id == STAI_COMPILER_ID_GHS) {
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	f000 80a0 	beq.w	8004dc4 <aiPbCmdNNInfo+0x1b0>
  else if  (id == STAI_COMPILER_ID_HIGHTECH) {
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	f000 809f 	beq.w	8004dc8 <aiPbCmdNNInfo+0x1b4>
  else if  (id == STAI_COMPILER_ID_IAR) {
 8004c8a:	2b30      	cmp	r3, #48	; 0x30
 8004c8c:	f000 809e 	beq.w	8004dcc <aiPbCmdNNInfo+0x1b8>
  else if  (id == STAI_COMPILER_ID_KEIL_AC6) {
 8004c90:	2b50      	cmp	r3, #80	; 0x50
 8004c92:	f000 809d 	beq.w	8004dd0 <aiPbCmdNNInfo+0x1bc>
    return EnumTools_AI_MDK_5;
 8004c96:	2b40      	cmp	r3, #64	; 0x40
 8004c98:	bf14      	ite	ne
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	2303      	moveq	r3, #3
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 8004c9e:	041b      	lsls	r3, r3, #16
  aiPbStrCopy(rt_info.compiler_desc, &resp->payload.minfo.runtime_desc[0],
 8004ca0:	2240      	movs	r2, #64	; 0x40
 8004ca2:	f504 718a 	add.w	r1, r4, #276	; 0x114
 8004ca6:	9821      	ldr	r0, [sp, #132]	; 0x84
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 8004ca8:	f043 0301 	orr.w	r3, r3, #1
 8004cac:	64a3      	str	r3, [r4, #72]	; 0x48
  aiPbStrCopy(rt_info.compiler_desc, &resp->payload.minfo.runtime_desc[0],
 8004cae:	f7fe fff5 	bl	8003c9c <aiPbStrCopy>
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8004cb2:	f1b9 0f00 	cmp.w	r9, #0
  struct _encode_tensor_desc tensor_ins = {
 8004cb6:	a914      	add	r1, sp, #80	; 0x50
 8004cb8:	484c      	ldr	r0, [pc, #304]	; (8004dec <aiPbCmdNNInfo+0x1d8>)
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8004cba:	f04f 0e00 	mov.w	lr, #0
  struct _encode_tensor_desc tensor_ins = {
 8004cbe:	9104      	str	r1, [sp, #16]
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 8004cc0:	494b      	ldr	r1, [pc, #300]	; (8004df0 <aiPbCmdNNInfo+0x1dc>)
  struct _encode_tensor_desc tensor_ins = {
 8004cc2:	9002      	str	r0, [sp, #8]
  struct _encode_tensor_desc tensor_outs = {
 8004cc4:	9005      	str	r0, [sp, #20]
 8004cc6:	a818      	add	r0, sp, #96	; 0x60
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8004cc8:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8004ccc:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
  struct _encode_tensor_desc tensor_outs = {
 8004cd0:	9007      	str	r0, [sp, #28]
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 8004cd2:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
 8004cd6:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8004cda:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8004cde:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8004ce0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8004ce4:	f240 4301 	movw	r3, #1025	; 0x401
 8004ce8:	bf08      	it	eq
 8004cea:	2301      	moveq	r3, #1
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8004cec:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
      &encode_ai_buffer_to_tensor_desc, nn->n_inputs, &tensor_desc_ins };
 8004cf0:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8004cf4:	2300      	movs	r3, #0
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 8004cf6:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
  struct _encode_tensor_desc tensor_ins = {
 8004cfa:	9203      	str	r2, [sp, #12]
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8004cfc:	4598      	cmp	r8, r3
  resp->payload.minfo.n_inputs = nn->n_inputs;
 8004cfe:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8004d02:	aa02      	add	r2, sp, #8
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8004d04:	bf08      	it	eq
 8004d06:	f04f 0c02 	moveq.w	ip, #2
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8004d0a:	9317      	str	r3, [sp, #92]	; 0x5c
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8004d0c:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8004d10:	f240 4202 	movw	r2, #1026	; 0x402
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8004d14:	931b      	str	r3, [sp, #108]	; 0x6c
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8004d16:	bf18      	it	ne
 8004d18:	4694      	movne	ip, r2
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8004d1a:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8004d1c:	e9cd 2c18 	strd	r2, ip, [sp, #96]	; 0x60
      &encode_ai_buffer_to_tensor_desc, nn->n_outputs, &tensor_desc_outs };
 8004d20:	f8b5 2042 	ldrh.w	r2, [r5, #66]	; 0x42
  if (nn->map_activations.size) {
 8004d24:	f8b5 c05a 	ldrh.w	ip, [r5, #90]	; 0x5a
  struct _encode_tensor_desc tensor_outs = {
 8004d28:	9206      	str	r2, [sp, #24]
  resp->payload.minfo.outputs.funcs.encode = encode_tensor_desc;
 8004d2a:	e9c4 213c 	strd	r2, r1, [r4, #240]	; 0xf0
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 8004d2e:	aa05      	add	r2, sp, #20
 8004d30:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
  if (nn->map_activations.size) {
 8004d34:	f1bc 0f00 	cmp.w	ip, #0
 8004d38:	d04c      	beq.n	8004dd4 <aiPbCmdNNInfo+0x1c0>
      size_acts += nn->map_activations.buffer[i].size;
 8004d3a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    for (int i=0; i<nn->map_activations.size; i++)
 8004d3c:	4618      	mov	r0, r3
      size_acts += nn->map_activations.buffer[i].size;
 8004d3e:	f04f 081c 	mov.w	r8, #28
 8004d42:	3210      	adds	r2, #16
 8004d44:	fb08 fe00 	mul.w	lr, r8, r0
    for (int i=0; i<nn->map_activations.size; i++)
 8004d48:	3001      	adds	r0, #1
      size_acts += nn->map_activations.buffer[i].size;
 8004d4a:	f852 e00e 	ldr.w	lr, [r2, lr]
    for (int i=0; i<nn->map_activations.size; i++)
 8004d4e:	4560      	cmp	r0, ip
      size_acts += nn->map_activations.buffer[i].size;
 8004d50:	4473      	add	r3, lr
    for (int i=0; i<nn->map_activations.size; i++)
 8004d52:	dbf7      	blt.n	8004d44 <aiPbCmdNNInfo+0x130>
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8004d54:	4a27      	ldr	r2, [pc, #156]	; (8004df4 <aiPbCmdNNInfo+0x1e0>)
  struct _encode_tensor_desc tensor_acts = {
 8004d56:	a808      	add	r0, sp, #32
 8004d58:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8004dfc <aiPbCmdNNInfo+0x1e8>
 8004d5c:	900d      	str	r0, [sp, #52]	; 0x34
  if (nn->map_weights.size) {
 8004d5e:	f8b5 0052 	ldrh.w	r0, [r5, #82]	; 0x52
  struct _encode_tensor_desc tensor_acts = {
 8004d62:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8004d66:	e9cd 2308 	strd	r2, r3, [sp, #32]
  struct _encode_tensor_desc tensor_acts = {
 8004d6a:	2201      	movs	r2, #1
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8004d6c:	2300      	movs	r3, #0
  struct _encode_tensor_desc tensor_acts = {
 8004d6e:	920c      	str	r2, [sp, #48]	; 0x30
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8004d70:	930a      	str	r3, [sp, #40]	; 0x28
  resp->payload.minfo.activations.funcs.encode = encode_tensor_desc;
 8004d72:	e9c4 213f 	strd	r2, r1, [r4, #252]	; 0xfc
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 8004d76:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d78:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
  if (nn->map_weights.size) {
 8004d7c:	b360      	cbz	r0, 8004dd8 <aiPbCmdNNInfo+0x1c4>
      size_params += nn->map_weights.buffer[i].size;
 8004d7e:	6d6d      	ldr	r5, [r5, #84]	; 0x54
    for (int i=0; i<nn->map_weights.size; i++)
 8004d80:	461a      	mov	r2, r3
      size_params += nn->map_weights.buffer[i].size;
 8004d82:	f04f 081c 	mov.w	r8, #28
 8004d86:	3510      	adds	r5, #16
 8004d88:	fb08 fe02 	mul.w	lr, r8, r2
    for (int i=0; i<nn->map_weights.size; i++)
 8004d8c:	3201      	adds	r2, #1
      size_params += nn->map_weights.buffer[i].size;
 8004d8e:	f855 e00e 	ldr.w	lr, [r5, lr]
    for (int i=0; i<nn->map_weights.size; i++)
 8004d92:	4282      	cmp	r2, r0
      size_params += nn->map_weights.buffer[i].size;
 8004d94:	4473      	add	r3, lr
    for (int i=0; i<nn->map_weights.size; i++)
 8004d96:	dbf7      	blt.n	8004d88 <aiPbCmdNNInfo+0x174>
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 8004d98:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <aiPbCmdNNInfo+0x1e4>)
  struct _encode_tensor_desc tensor_w = {
 8004d9a:	a80e      	add	r0, sp, #56	; 0x38
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 8004d9c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  struct _encode_tensor_desc tensor_w = {
 8004da0:	2301      	movs	r3, #1
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 8004da2:	2200      	movs	r2, #0
  struct _encode_tensor_desc tensor_w = {
 8004da4:	9013      	str	r0, [sp, #76]	; 0x4c
  aiPbMgrSendResp(req, resp, state);
 8004da6:	4630      	mov	r0, r6
  struct _encode_tensor_desc tensor_w = {
 8004da8:	9312      	str	r3, [sp, #72]	; 0x48
  resp->payload.minfo.params.funcs.encode = encode_tensor_desc;
 8004daa:	e9c4 3142 	strd	r3, r1, [r4, #264]	; 0x108
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 8004dae:	ab11      	add	r3, sp, #68	; 0x44
  aiPbMgrSendResp(req, resp, state);
 8004db0:	4621      	mov	r1, r4
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 8004db2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  struct _encode_tensor_desc tensor_w = {
 8004db6:	e9cd 2c10 	strd	r2, ip, [sp, #64]	; 0x40
  aiPbMgrSendResp(req, resp, state);
 8004dba:	f7fe ffc9 	bl	8003d50 <aiPbMgrSendResp>
        ctx->inputs_in_activations, ctx->outputs_in_activations);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 8004dbe:	b022      	add	sp, #136	; 0x88
 8004dc0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    return EnumTools_AI_GHS;
 8004dc4:	2306      	movs	r3, #6
 8004dc6:	e76a      	b.n	8004c9e <aiPbCmdNNInfo+0x8a>
    return EnumTools_AI_HTC;
 8004dc8:	2305      	movs	r3, #5
 8004dca:	e768      	b.n	8004c9e <aiPbCmdNNInfo+0x8a>
    return EnumTools_AI_IAR;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e766      	b.n	8004c9e <aiPbCmdNNInfo+0x8a>
    return EnumTools_AI_MDK_6;
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	e764      	b.n	8004c9e <aiPbCmdNNInfo+0x8a>
  ai_size size_acts = 0;
 8004dd4:	4663      	mov	r3, ip
 8004dd6:	e7bd      	b.n	8004d54 <aiPbCmdNNInfo+0x140>
  ai_size size_params = 0;
 8004dd8:	4603      	mov	r3, r0
 8004dda:	e7dd      	b.n	8004d98 <aiPbCmdNNInfo+0x184>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8004ddc:	2304      	movs	r3, #4
 8004dde:	4621      	mov	r1, r4
 8004de0:	4630      	mov	r0, r6
 8004de2:	461a      	mov	r2, r3
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	f7ff f807 	bl	8003df8 <aiPbMgrSendAck>
}
 8004dea:	e7e8      	b.n	8004dbe <aiPbCmdNNInfo+0x1aa>
 8004dec:	080048e5 	.word	0x080048e5
 8004df0:	08003ce9 	.word	0x08003ce9
 8004df4:	0800da1c 	.word	0x0800da1c
 8004df8:	0800da21 	.word	0x0800da21
 8004dfc:	080047f5 	.word	0x080047f5

08004e00 <_print_debug>:
{
 8004e00:	b40e      	push	{r1, r2, r3}
 8004e02:	b517      	push	{r0, r1, r2, r4, lr}
  if (!debug)
 8004e04:	b178      	cbz	r0, 8004e26 <_print_debug+0x26>
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8004e06:	4c0f      	ldr	r4, [pc, #60]	; (8004e44 <_print_debug+0x44>)
  va_start(ap, fmt);
 8004e08:	ab06      	add	r3, sp, #24
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8004e0a:	2150      	movs	r1, #80	; 0x50
 8004e0c:	9a05      	ldr	r2, [sp, #20]
 8004e0e:	4620      	mov	r0, r4
  va_start(ap, fmt);
 8004e10:	9301      	str	r3, [sp, #4]
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8004e12:	f7ff fb1f 	bl	8004454 <lc_vsnprint>
      _print_buffer[s] = 0;
 8004e16:	2100      	movs	r1, #0
 8004e18:	1823      	adds	r3, r4, r0
  while (s) {
 8004e1a:	b948      	cbnz	r0, 8004e30 <_print_debug+0x30>
  aiPbMgrSendLogV2(EnumState_S_WAITING, 1, &_print_buffer[0]);
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <_print_debug+0x44>)
 8004e20:	4608      	mov	r0, r1
 8004e22:	f7ff f809 	bl	8003e38 <aiPbMgrSendLogV2>
}
 8004e26:	b003      	add	sp, #12
 8004e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e2c:	b003      	add	sp, #12
 8004e2e:	4770      	bx	lr
    if ((_print_buffer[s] == '\n') || (_print_buffer[s] == '\r'))
 8004e30:	781a      	ldrb	r2, [r3, #0]
 8004e32:	2a0a      	cmp	r2, #10
 8004e34:	d001      	beq.n	8004e3a <_print_debug+0x3a>
 8004e36:	2a0d      	cmp	r2, #13
 8004e38:	d100      	bne.n	8004e3c <_print_debug+0x3c>
      _print_buffer[s] = 0;
 8004e3a:	7019      	strb	r1, [r3, #0]
    s--;
 8004e3c:	3801      	subs	r0, #1
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	e7eb      	b.n	8004e1a <_print_debug+0x1a>
 8004e42:	bf00      	nop
 8004e44:	20004e10 	.word	0x20004e10

08004e48 <aiPbCmdNNRun>:
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
}


void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 8004e48:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	460e      	mov	r6, r1
 8004e50:	ed2d 8b02 	vpush	{d8}
 8004e54:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8004e56:	f3ef 8014 	mrs	r0, CONTROL
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8004e5a:	f3ef 8108 	mrs	r1, MSP
  ai_buffer *ai_input;
  ai_buffer *ai_output;

  UNUSED(param);

  MON_STACK_INIT();
 8004e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e62:	f7ff fb55 	bl	8004510 <stackMonInit>

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 8004e66:	f04f 31ff 	mov.w	r1, #4294967295
 8004e6a:	f105 000c 	add.w	r0, r5, #12
 8004e6e:	f7ff fd8f 	bl	8004990 <aiExecCtx>
  if (!ctx) {
 8004e72:	4604      	mov	r4, r0
 8004e74:	b910      	cbnz	r0, 8004e7c <aiPbCmdNNRun+0x34>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8004e76:	2304      	movs	r3, #4

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
  if (batch != 1) {
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	e1a4      	b.n	80051c6 <aiPbCmdNNRun+0x37e>
  _set_context(req, ctx);
 8004e7c:	68a8      	ldr	r0, [r5, #8]
  ctx->emit_intermediate_data = false;
 8004e7e:	2300      	movs	r3, #0
  net_obs_ctx.no_data = true;
 8004e80:	2201      	movs	r2, #1
  ctx->emit_intermediate_data = false;
 8004e82:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER_WITH_DATA) ==
 8004e86:	0743      	lsls	r3, r0, #29
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER) ==
 8004e88:	bf55      	itete	pl
 8004e8a:	f3c0 0340 	ubfxpl	r3, r0, #1, #1
    ctx->observer_is_enabled = true;
 8004e8e:	f240 1301 	movwmi	r3, #257	; 0x101
 8004e92:	f884 3092 	strbpl.w	r3, [r4, #146]	; 0x92
 8004e96:	f8a4 3092 	strhmi.w	r3, [r4, #146]	; 0x92
  ctx->direct_write = req->param & EnumRunParam_P_RUN_CONF_DIRECT_WRITE?true:false;
 8004e9a:	f3c0 2380 	ubfx	r3, r0, #10, #1
 8004e9e:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
 8004ea2:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  ctx->simple_value = req->param & EnumRunParam_P_RUN_CONF_CONST_VALUE?true:false;
 8004ea6:	f3c0 2340 	ubfx	r3, r0, #9, #1
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8004eaa:	f3c0 2000 	ubfx	r0, r0, #8, #1
  ctx->simple_value = req->param & EnumRunParam_P_RUN_CONF_CONST_VALUE?true:false;
 8004eae:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
  net_obs_ctx.no_data = true;
 8004eb2:	4bcb      	ldr	r3, [pc, #812]	; (80051e0 <aiPbCmdNNRun+0x398>)
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8004eb4:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
  net_obs_ctx.no_data = true;
 8004eb8:	7019      	strb	r1, [r3, #0]
  if (ctx->emit_intermediate_data) {
 8004eba:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
  net_obs_ctx.no_data = true;
 8004ebe:	751a      	strb	r2, [r3, #20]
  if (ctx->emit_intermediate_data) {
 8004ec0:	b111      	cbz	r1, 8004ec8 <aiPbCmdNNRun+0x80>
    net_obs_ctx.is_enabled = true;
 8004ec2:	701a      	strb	r2, [r3, #0]
    net_obs_ctx.no_data = false;
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	751a      	strb	r2, [r3, #20]
  net_obs_ctx.tcom = 0ULL;
 8004ec8:	f04f 0800 	mov.w	r8, #0
 8004ecc:	f04f 0900 	mov.w	r9, #0
  net_obs_ctx.n_cb_in  = 0;
 8004ed0:	f04f 0a00 	mov.w	sl, #0
  ctx->obs_ctx = &net_obs_ctx;
 8004ed4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  PB_LC_PRINT(ctx->debug, "RUN: c-model=%s rtid=%d\r\n", ctx->report.model_name, _AI_RUNTIME_ID);
 8004ed8:	68a2      	ldr	r2, [r4, #8]
 8004eda:	49c2      	ldr	r1, [pc, #776]	; (80051e4 <aiPbCmdNNRun+0x39c>)
  net_obs_ctx.tcom = 0ULL;
 8004edc:	e9c3 8906 	strd	r8, r9, [r3, #24]
  net_obs_ctx.tnodes = 0ULL;
 8004ee0:	e9c3 8908 	strd	r8, r9, [r3, #32]
  net_obs_ctx.n_cb_out = 0;
 8004ee4:	e9c3 aa01 	strd	sl, sl, [r3, #4]
  ai_output = ctx->report.outputs;
 8004ee8:	e9d4 9311 	ldrd	r9, r3, [r4, #68]	; 0x44
 8004eec:	9306      	str	r3, [sp, #24]
  PB_LC_PRINT(ctx->debug, "RUN: c-model=%s rtid=%d\r\n", ctx->report.model_name, _AI_RUNTIME_ID);
 8004eee:	2301      	movs	r3, #1
 8004ef0:	f7ff ff86 	bl	8004e00 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN:  observer=%d/%d, simple_value=%d, direct_write=%d\r\n",
 8004ef4:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
 8004ef8:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
 8004efc:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
 8004f00:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 8004f04:	9101      	str	r1, [sp, #4]
 8004f06:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
 8004f0a:	9100      	str	r1, [sp, #0]
 8004f0c:	49b6      	ldr	r1, [pc, #728]	; (80051e8 <aiPbCmdNNRun+0x3a0>)
 8004f0e:	f7ff ff77 	bl	8004e00 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data (%d bytes).. opt=0x%x, param=0x%x\r\n",
 8004f12:	4648      	mov	r0, r9
 8004f14:	f894 8096 	ldrb.w	r8, [r4, #150]	; 0x96
 8004f18:	f7ff fd2c 	bl	8004974 <_get_buffer_size>
 8004f1c:	68ab      	ldr	r3, [r5, #8]
 8004f1e:	4602      	mov	r2, r0
 8004f20:	49b2      	ldr	r1, [pc, #712]	; (80051ec <aiPbCmdNNRun+0x3a4>)
 8004f22:	4640      	mov	r0, r8
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	46c8      	mov	r8, r9
 8004f28:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004f2a:	f7ff ff69 	bl	8004e00 <_print_debug>
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 8004f2e:	4648      	mov	r0, r9
 8004f30:	f7ff fd20 	bl	8004974 <_get_buffer_size>
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 8004f34:	2201      	movs	r2, #1
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 8004f36:	4603      	mov	r3, r0
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 8004f38:	4631      	mov	r1, r6
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f8cd a000 	str.w	sl, [sp]
 8004f40:	f7fe ff5a 	bl	8003df8 <aiPbMgrSendAck>
  tick = port_hal_get_tick();
 8004f44:	f7fc fcfa 	bl	800193c <HAL_GetTick>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8004f48:	f8cd a014 	str.w	sl, [sp, #20]
  tick = port_hal_get_tick();
 8004f4c:	9007      	str	r0, [sp, #28]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8004f4e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8004f52:	9a05      	ldr	r2, [sp, #20]
 8004f54:	4293      	cmp	r3, r2
 8004f56:	f300 80fa 	bgt.w	800514e <aiPbCmdNNRun+0x306>
  tick = port_hal_get_tick() - tick;
 8004f5a:	f7fc fcef 	bl	800193c <HAL_GetTick>
  PB_LC_PRINT(ctx->debug, "RUN: %d ticks to download %d input(s)\r\n", tick, ctx->report.n_inputs);
 8004f5e:	9a07      	ldr	r2, [sp, #28]
 8004f60:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8004f64:	1a82      	subs	r2, r0, r2
 8004f66:	49a2      	ldr	r1, [pc, #648]	; (80051f0 <aiPbCmdNNRun+0x3a8>)
 8004f68:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 8004f6c:	f7ff ff48 	bl	8004e00 <_print_debug>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8004f70:	f8d4 8098 	ldr.w	r8, [r4, #152]	; 0x98
  if (obs_ctx->is_enabled == false)
 8004f74:	f898 3000 	ldrb.w	r3, [r8]
 8004f78:	b193      	cbz	r3, 8004fa0 <aiPbCmdNNRun+0x158>
  if (ctx->handle == AI_HANDLE_NULL)
 8004f7a:	6820      	ldr	r0, [r4, #0]
 8004f7c:	b180      	cbz	r0, 8004fa0 <aiPbCmdNNRun+0x158>
  ai_mnetwork_get_private_handle(ctx->handle,
 8004f7e:	a90e      	add	r1, sp, #56	; 0x38
 8004f80:	aa14      	add	r2, sp, #80	; 0x50
  obs_ctx->cresp = cresp;
 8004f82:	e9c8 5603 	strd	r5, r6, [r8, #12]
  ai_mnetwork_get_private_handle(ctx->handle,
 8004f86:	f000 fbd5 	bl	8005734 <ai_mnetwork_get_private_handle>
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 8004f8a:	4b9a      	ldr	r3, [pc, #616]	; (80051f4 <aiPbCmdNNRun+0x3ac>)
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8004f8c:	f108 0128 	add.w	r1, r8, #40	; 0x28
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 8004f90:	e9c8 340a 	strd	r3, r4, [r8, #40]	; 0x28
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8004f94:	2306      	movs	r3, #6
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8004f96:	980e      	ldr	r0, [sp, #56]	; 0x38
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8004f98:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8004f9c:	f003 fb60 	bl	8008660 <ai_platform_observer_register_s>
  MON_ALLOC_ENABLE();
 8004fa0:	f8df a270 	ldr.w	sl, [pc, #624]	; 8005214 <aiPbCmdNNRun+0x3cc>
  MON_ALLOC_RESET();
 8004fa4:	f7ff fbf2 	bl	800478c <_mon_alloc_reset>
  PB_LC_PRINT(ctx->debug, "RUN: Processing.. current tick=%lu\r\n", (uint32_t)port_hal_get_tick());
 8004fa8:	f894 8096 	ldrb.w	r8, [r4, #150]	; 0x96
  MON_ALLOC_ENABLE();
 8004fac:	f8da 3000 	ldr.w	r3, [sl]
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	f8ca 3000 	str.w	r3, [sl]
  PB_LC_PRINT(ctx->debug, "RUN: Processing.. current tick=%lu\r\n", (uint32_t)port_hal_get_tick());
 8004fb8:	f7fc fcc0 	bl	800193c <HAL_GetTick>
 8004fbc:	498e      	ldr	r1, [pc, #568]	; (80051f8 <aiPbCmdNNRun+0x3b0>)
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	f7ff ff1d 	bl	8004e00 <_print_debug>
 8004fc6:	f3ef 8308 	mrs	r3, MSP
  MON_STACK_CHECK0();
 8004fca:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8005218 <aiPbCmdNNRun+0x3d0>
 8004fce:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d004      	beq.n	8004fe0 <aiPbCmdNNRun+0x198>
 8004fd6:	f3ef 8108 	mrs	r1, MSP
 8004fda:	4888      	ldr	r0, [pc, #544]	; (80051fc <aiPbCmdNNRun+0x3b4>)
 8004fdc:	f7ff fa28 	bl	8004430 <lc_print>
  MON_STACK_MARK();
 8004fe0:	f898 3004 	ldrb.w	r3, [r8, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f040 8149 	bne.w	800527c <aiPbCmdNNRun+0x434>
  tick = port_hal_get_tick();
 8004fea:	f7fc fca7 	bl	800193c <HAL_GetTick>
 8004fee:	4683      	mov	fp, r0
  cyclesCounterStart();
 8004ff0:	f7ff fc8a 	bl	8004908 <cyclesCounterStart>
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 8004ff4:	9a06      	ldr	r2, [sp, #24]
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	6820      	ldr	r0, [r4, #0]
 8004ffa:	f000 fb8a 	bl	8005712 <ai_mnetwork_run>
  if (batch != 1) {
 8004ffe:	2801      	cmp	r0, #1
 8005000:	f040 814b 	bne.w	800529a <aiPbCmdNNRun+0x452>
        EnumError_E_GENERIC, EnumError_E_GENERIC);
    return;
  }
  tend = cyclesCounterEnd();
 8005004:	f7ff fc90 	bl	8004928 <cyclesCounterEnd>
 8005008:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  tick = port_hal_get_tick() - tick;
 800500c:	f7fc fc96 	bl	800193c <HAL_GetTick>

  MON_ALLOC_DISABLE();
 8005010:	f8da 3000 	ldr.w	r3, [sl]
  tick = port_hal_get_tick() - tick;
 8005014:	eba0 020b 	sub.w	r2, r0, fp
  MON_STACK_EVALUATE();
 8005018:	f898 c004 	ldrb.w	ip, [r8, #4]
  MON_ALLOC_DISABLE();
 800501c:	f023 0301 	bic.w	r3, r3, #1
  MON_STACK_EVALUATE();
 8005020:	2000      	movs	r0, #0
  MON_ALLOC_DISABLE();
 8005022:	f8ca 3000 	str.w	r3, [sl]
  MON_STACK_EVALUATE();
 8005026:	f8c8 0008 	str.w	r0, [r8, #8]
 800502a:	f1bc 0f00 	cmp.w	ip, #0
 800502e:	d029      	beq.n	8005084 <aiPbCmdNNRun+0x23c>
 8005030:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005034:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8005038:	eba1 0b03 	sub.w	fp, r1, r3
 800503c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8005040:	3303      	adds	r3, #3
 8005042:	f023 0303 	bic.w	r3, r3, #3
 8005046:	f103 0e20 	add.w	lr, r3, #32
 800504a:	f853 9b04 	ldr.w	r9, [r3], #4
 800504e:	f1b9 3fde 	cmp.w	r9, #3739147998	; 0xdededede
 8005052:	bf18      	it	ne
 8005054:	4660      	movne	r0, ip
 8005056:	4573      	cmp	r3, lr
 8005058:	d1f7      	bne.n	800504a <aiPbCmdNNRun+0x202>
 800505a:	2800      	cmp	r0, #0
 800505c:	f040 812a 	bne.w	80052b4 <aiPbCmdNNRun+0x46c>
 8005060:	2020      	movs	r0, #32
 8005062:	f8d8 e018 	ldr.w	lr, [r8, #24]
 8005066:	f8c8 0008 	str.w	r0, [r8, #8]
 800506a:	6819      	ldr	r1, [r3, #0]
 800506c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005070:	f1b1 3fde 	cmp.w	r1, #3739147998	; 0xdededede
 8005074:	d102      	bne.n	800507c <aiPbCmdNNRun+0x234>
 8005076:	4573      	cmp	r3, lr
 8005078:	f0c0 8117 	bcc.w	80052aa <aiPbCmdNNRun+0x462>
 800507c:	ebab 0100 	sub.w	r1, fp, r0
 8005080:	f8c8 1008 	str.w	r1, [r8, #8]

  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8005084:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98

  /* 4 - Send basic report (optional) ------------------------------ */

#if defined(_APP_STACK_MONITOR_) && _APP_STACK_MONITOR_ == 1 && defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  PB_LC_PRINT(ctx->debug, "RUN:  used stack/heap=%d/%d\r\n", (int)io_stack.susage, (int)io_malloc.used);
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 8005088:	f04f 0900 	mov.w	r9, #0
    }
    if ((i + 1) == ctx->report.n_outputs) {
      state = EnumState_S_DONE;
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
    }
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 800508c:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8005200 <aiPbCmdNNRun+0x3b8>
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 8005090:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 8005094:	e9d0 c008 	ldrd	ip, r0, [r0, #32]
 8005098:	eb13 030c 	adds.w	r3, r3, ip
 800509c:	eb41 0100 	adc.w	r1, r1, r0
 80050a0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80050a2:	18c0      	adds	r0, r0, r3
 80050a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050a6:	eb41 0303 	adc.w	r3, r1, r3
  PB_LC_PRINT(ctx->debug, "RUN: Processing done. delta_tick=%lu\r\n", tick);
 80050aa:	4956      	ldr	r1, [pc, #344]	; (8005204 <aiPbCmdNNRun+0x3bc>)
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 80050ac:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
  PB_LC_PRINT(ctx->debug, "RUN: Processing done. delta_tick=%lu\r\n", tick);
 80050b0:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 80050b4:	f7ff fea4 	bl	8004e00 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN:  used stack/heap=%d/%d\r\n", (int)io_stack.susage, (int)io_malloc.used);
 80050b8:	f8da 3018 	ldr.w	r3, [sl, #24]
 80050bc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80050c0:	4951      	ldr	r1, [pc, #324]	; (8005208 <aiPbCmdNNRun+0x3c0>)
 80050c2:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 80050c6:	f7ff fe9b 	bl	8004e00 <_print_debug>
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 80050ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050ce:	f7ff fa87 	bl	80045e0 <dwtCyclesToFloatMs>
 80050d2:	f8da 1018 	ldr.w	r1, [sl, #24]
 80050d6:	ab0c      	add	r3, sp, #48	; 0x30
 80050d8:	2202      	movs	r2, #2
 80050da:	9113      	str	r1, [sp, #76]	; 0x4c
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 80050dc:	4628      	mov	r0, r5
  if (ctx->observer_is_enabled)
 80050de:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 80050e2:	9311      	str	r3, [sp, #68]	; 0x44
    perf.stack_usage = -1;
 80050e4:	4549      	cmp	r1, r9
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 80050e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 80050ea:	4631      	mov	r1, r6
 80050ec:	f8cd 9000 	str.w	r9, [sp]
    perf.stack_usage = -1;
 80050f0:	bf18      	it	ne
 80050f2:	f04f 33ff 	movne.w	r3, #4294967295
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 80050f6:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80050fa:	46c8      	mov	r8, r9
 80050fc:	9312      	str	r3, [sp, #72]	; 0x48
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 80050fe:	ab0e      	add	r3, sp, #56	; 0x38
 8005100:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005104:	68a3      	ldr	r3, [r4, #8]
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 8005106:	e9cd 920f 	strd	r9, r2, [sp, #60]	; 0x3c
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 800510a:	f7fe fee7 	bl	8003edc <aiPbMgrSendOperator>
  PB_LC_PRINT(ctx->debug, "RUN: send %d output tensors\r\n", ctx->report.n_outputs);
 800510e:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8005112:	493e      	ldr	r1, [pc, #248]	; (800520c <aiPbCmdNNRun+0x3c4>)
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8005114:	f240 2902 	movw	r9, #514	; 0x202
  PB_LC_PRINT(ctx->debug, "RUN: send %d output tensors\r\n", ctx->report.n_outputs);
 8005118:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 800511c:	f7ff fe70 	bl	8004e00 <_print_debug>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8005120:	f8dd a018 	ldr.w	sl, [sp, #24]
 8005124:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8005128:	4542      	cmp	r2, r8
 800512a:	f300 80d1 	bgt.w	80052d0 <aiPbCmdNNRun+0x488>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 800512e:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
  if (obs_ctx->is_enabled == false)
 8005132:	782b      	ldrb	r3, [r5, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d04b      	beq.n	80051d0 <aiPbCmdNNRun+0x388>
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 8005138:	a90b      	add	r1, sp, #44	; 0x2c
 800513a:	aa14      	add	r2, sp, #80	; 0x50
 800513c:	6820      	ldr	r0, [r4, #0]
 800513e:	f000 faf9 	bl	8005734 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 8005142:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8005146:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005148:	f003 fac0 	bl	80086cc <ai_platform_observer_unregister_s>
  return 0;
 800514c:	e040      	b.n	80051d0 <aiPbCmdNNRun+0x388>
    if ((i + 1) == ctx->report.n_inputs)
 800514e:	9a05      	ldr	r2, [sp, #20]
    batch += _get_buffer_size(&ai_input[i]);
 8005150:	4640      	mov	r0, r8
    if ((i + 1) == ctx->report.n_inputs)
 8005152:	3201      	adds	r2, #1
      state = EnumState_S_PROCESSING;
 8005154:	429a      	cmp	r2, r3
 8005156:	bf14      	ite	ne
 8005158:	2301      	movne	r3, #1
 800515a:	2302      	moveq	r3, #2
    if ((i + 1) == ctx->report.n_inputs)
 800515c:	9205      	str	r2, [sp, #20]
      state = EnumState_S_PROCESSING;
 800515e:	ee08 3a10 	vmov	s16, r3
    batch += _get_buffer_size(&ai_input[i]);
 8005162:	f7ff fc07 	bl	8004974 <_get_buffer_size>
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8005166:	2300      	movs	r3, #0
 8005168:	4640      	mov	r0, r8
    res = receive_ai_data(req, resp, state, &ai_input[i], ctx->simple_value, ctx->direct_write);
 800516a:	f894 b094 	ldrb.w	fp, [r4, #148]	; 0x94
 800516e:	f894 a095 	ldrb.w	sl, [r4, #149]	; 0x95
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8005172:	9314      	str	r3, [sp, #80]	; 0x50
 8005174:	f7ff fbfe 	bl	8004974 <_get_buffer_size>
 8005178:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800517c:	9015      	str	r0, [sp, #84]	; 0x54
 800517e:	9316      	str	r3, [sp, #88]	; 0x58
 8005180:	2300      	movs	r3, #0
 8005182:	9317      	str	r3, [sp, #92]	; 0x5c
  if ((simple_value) || (direct_write))
 8005184:	f1bb 0f00 	cmp.w	fp, #0
 8005188:	d102      	bne.n	8005190 <aiPbCmdNNRun+0x348>
 800518a:	f1ba 0f00 	cmp.w	sl, #0
 800518e:	d011      	beq.n	80051b4 <aiPbCmdNNRun+0x36c>
    data.size = _get_element_size(buffer);
 8005190:	f8d8 1000 	ldr.w	r1, [r8]
  if (is_binary)
 8005194:	4a1e      	ldr	r2, [pc, #120]	; (8005210 <aiPbCmdNNRun+0x3c8>)
 8005196:	f021 437e 	bic.w	r3, r1, #4261412864	; 0xfe000000
 800519a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01b      	beq.n	80051da <aiPbCmdNNRun+0x392>
  return (size_t)AI_BUFFER_BYTE_SIZE(1, buffer->format);
 80051a2:	2001      	movs	r0, #1
 80051a4:	f002 fb42 	bl	800782c <ai_buffer_get_byte_size>
    data.size = _get_element_size(buffer);
 80051a8:	9015      	str	r0, [sp, #84]	; 0x54
  if (direct_write)
 80051aa:	f1ba 0f00 	cmp.w	sl, #0
 80051ae:	d001      	beq.n	80051b4 <aiPbCmdNNRun+0x36c>
    data.addr = (uintptr_t)&temp;
 80051b0:	ab0e      	add	r3, sp, #56	; 0x38
 80051b2:	9316      	str	r3, [sp, #88]	; 0x58
  aiPbMgrReceiveData(&data);
 80051b4:	a814      	add	r0, sp, #80	; 0x50
 80051b6:	f7fe fe77 	bl	8003ea8 <aiPbMgrReceiveData>
  if (data.nb_read != data.size) {
 80051ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80051bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80051be:	4293      	cmp	r3, r2
 80051c0:	d02c      	beq.n	800521c <aiPbCmdNNRun+0x3d4>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80051c2:	2201      	movs	r2, #1
 80051c4:	9200      	str	r2, [sp, #0]
 80051c6:	2204      	movs	r2, #4
 80051c8:	4631      	mov	r1, r6
 80051ca:	4628      	mov	r0, r5
 80051cc:	f7fe fe14 	bl	8003df8 <aiPbMgrSendAck>
  }

  aiObserverUnbind(ctx);
}
 80051d0:	b022      	add	sp, #136	; 0x88
 80051d2:	ecbd 8b02 	vpop	{d8}
 80051d6:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    return 4;
 80051da:	2004      	movs	r0, #4
 80051dc:	e7e4      	b.n	80051a8 <aiPbCmdNNRun+0x360>
 80051de:	bf00      	nop
 80051e0:	20004f00 	.word	0x20004f00
 80051e4:	0800da28 	.word	0x0800da28
 80051e8:	0800da42 	.word	0x0800da42
 80051ec:	0800da7b 	.word	0x0800da7b
 80051f0:	0800dab1 	.word	0x0800dab1
 80051f4:	08004a59 	.word	0x08004a59
 80051f8:	0800dad9 	.word	0x0800dad9
 80051fc:	0800dafe 	.word	0x0800dafe
 8005200:	00000000 	.word	0x00000000
 8005204:	0800dbcf 	.word	0x0800dbcf
 8005208:	0800dbf6 	.word	0x0800dbf6
 800520c:	0800dc14 	.word	0x0800dc14
 8005210:	000400c0 	.word	0x000400c0
 8005214:	20004dd4 	.word	0x20004dd4
 8005218:	20004df0 	.word	0x20004df0
  if ((simple_value) && (!direct_write))/* broadcast the value */
 800521c:	f1bb 0f00 	cmp.w	fp, #0
 8005220:	d10d      	bne.n	800523e <aiPbCmdNNRun+0x3f6>
    aiPbMgrSendAck(req, resp, state, data.size, EnumError_E_NONE);
 8005222:	2300      	movs	r3, #0
 8005224:	ee18 2a10 	vmov	r2, s16
 8005228:	4631      	mov	r1, r6
 800522a:	4628      	mov	r0, r5
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	f108 081c 	add.w	r8, r8, #28
 8005232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005234:	f7fe fde0 	bl	8003df8 <aiPbMgrSendAck>
      aiPbMgrWaitAck();
 8005238:	f7fe fde8 	bl	8003e0c <aiPbMgrWaitAck>
    if (res != true)
 800523c:	e687      	b.n	8004f4e <aiPbCmdNNRun+0x106>
  if ((simple_value) && (!direct_write))/* broadcast the value */
 800523e:	f1ba 0f00 	cmp.w	sl, #0
 8005242:	d1ee      	bne.n	8005222 <aiPbCmdNNRun+0x3da>
      const uintptr_t r_ptr = (uintptr_t)buffer->data;
 8005244:	f8d8 1004 	ldr.w	r1, [r8, #4]
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 8005248:	f04f 0a01 	mov.w	sl, #1
      uintptr_t w_ptr = r_ptr + el_s;
 800524c:	eb01 0b02 	add.w	fp, r1, r2
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 8005250:	4640      	mov	r0, r8
 8005252:	e9cd 2108 	strd	r2, r1, [sp, #32]
 8005256:	f7ff fb8d 	bl	8004974 <_get_buffer_size>
 800525a:	9a08      	ldr	r2, [sp, #32]
 800525c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800525e:	fbb0 f0f2 	udiv	r0, r0, r2
 8005262:	4582      	cmp	sl, r0
 8005264:	d2dd      	bcs.n	8005222 <aiPbCmdNNRun+0x3da>
        memcpy((void *)w_ptr, (void *)r_ptr, el_s);
 8005266:	4658      	mov	r0, fp
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 8005268:	f10a 0a01 	add.w	sl, sl, #1
        memcpy((void *)w_ptr, (void *)r_ptr, el_s);
 800526c:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8005270:	f006 fa1d 	bl	800b6ae <memcpy>
        w_ptr += el_s;
 8005274:	9a09      	ldr	r2, [sp, #36]	; 0x24
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 8005276:	9908      	ldr	r1, [sp, #32]
        w_ptr += el_s;
 8005278:	4493      	add	fp, r2
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 800527a:	e7e9      	b.n	8005250 <aiPbCmdNNRun+0x408>
  MON_STACK_MARK();
 800527c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8005280:	f04f 31de 	mov.w	r1, #3739147998	; 0xdededede
 8005284:	3303      	adds	r3, #3
 8005286:	f023 0303 	bic.w	r3, r3, #3
 800528a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800528e:	4293      	cmp	r3, r2
 8005290:	f4bf aeab 	bcs.w	8004fea <aiPbCmdNNRun+0x1a2>
 8005294:	f843 1b04 	str.w	r1, [r3], #4
 8005298:	e7f7      	b.n	800528a <aiPbCmdNNRun+0x442>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 800529a:	6820      	ldr	r0, [r4, #0]
 800529c:	f000 fa0d 	bl	80056ba <ai_mnetwork_get_error>
 80052a0:	4919      	ldr	r1, [pc, #100]	; (8005308 <aiPbCmdNNRun+0x4c0>)
 80052a2:	f7fe fe95 	bl	8003fd0 <aiLogErr>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80052a6:	230a      	movs	r3, #10
 80052a8:	e5e6      	b.n	8004e78 <aiPbCmdNNRun+0x30>
  MON_STACK_EVALUATE();
 80052aa:	3004      	adds	r0, #4
 80052ac:	3304      	adds	r3, #4
 80052ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80052b2:	e6da      	b.n	800506a <aiPbCmdNNRun+0x222>
 80052b4:	f04f 33ff 	mov.w	r3, #4294967295
 80052b8:	4659      	mov	r1, fp
 80052ba:	4814      	ldr	r0, [pc, #80]	; (800530c <aiPbCmdNNRun+0x4c4>)
 80052bc:	9205      	str	r2, [sp, #20]
 80052be:	f8c8 3008 	str.w	r3, [r8, #8]
 80052c2:	f7ff f8b5 	bl	8004430 <lc_print>
 80052c6:	4812      	ldr	r0, [pc, #72]	; (8005310 <aiPbCmdNNRun+0x4c8>)
 80052c8:	f7ff f8b2 	bl	8004430 <lc_print>
 80052cc:	9a05      	ldr	r2, [sp, #20]
 80052ce:	e6d9      	b.n	8005084 <aiPbCmdNNRun+0x23c>
    if (req->param & EnumRunParam_P_RUN_MODE_PERF) {
 80052d0:	68ab      	ldr	r3, [r5, #8]
    if ((i + 1) == ctx->report.n_outputs) {
 80052d2:	f108 0801 	add.w	r8, r8, #1
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 80052d6:	2100      	movs	r1, #0
 80052d8:	eeb0 0a48 	vmov.f32	s0, s16
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 80052dc:	f013 0f08 	tst.w	r3, #8
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 80052e0:	4628      	mov	r0, r5
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 80052e2:	bf0c      	ite	eq
 80052e4:	2302      	moveq	r3, #2
 80052e6:	464b      	movne	r3, r9
    if ((i + 1) == ctx->report.n_outputs) {
 80052e8:	4590      	cmp	r8, r2
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 80052ea:	bf06      	itte	eq
 80052ec:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
      state = EnumState_S_DONE;
 80052f0:	2203      	moveq	r2, #3
    EnumState state = EnumState_S_PROCESSING;
 80052f2:	2202      	movne	r2, #2
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 80052f4:	e9cd 3100 	strd	r3, r1, [sp]
 80052f8:	4653      	mov	r3, sl
 80052fa:	4631      	mov	r1, r6
 80052fc:	f10a 0a1c 	add.w	sl, sl, #28
 8005300:	f7ff fb70 	bl	80049e4 <send_ai_io_tensor.isra.0>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8005304:	e70e      	b.n	8005124 <aiPbCmdNNRun+0x2dc>
 8005306:	bf00      	nop
 8005308:	0800db42 	.word	0x0800db42
 800530c:	0800db52 	.word	0x0800db52
 8005310:	0800db76 	.word	0x0800db76

08005314 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 8005314:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 8005316:	4c1f      	ldr	r4, [pc, #124]	; (8005394 <aiValidationInit+0x80>)
  port_dwt_reset();
 8005318:	2500      	movs	r5, #0
 800531a:	4e1f      	ldr	r6, [pc, #124]	; (8005398 <aiValidationInit+0x84>)
 800531c:	f204 2016 	addw	r0, r4, #534	; 0x216
 8005320:	f7ff f886 	bl	8004430 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 8005324:	2301      	movs	r3, #1
 8005326:	f504 7107 	add.w	r1, r4, #540	; 0x21c
 800532a:	2207      	movs	r2, #7
 800532c:	f204 202a 	addw	r0, r4, #554	; 0x22a
 8005330:	f7ff f87e 	bl	8004430 <lc_print>
  LC_PRINT("#\r\n");
 8005334:	f204 2037 	addw	r0, r4, #567	; 0x237
 8005338:	f7ff f87a 	bl	8004430 <lc_print>

  systemSettingLog();
 800533c:	f7ff f9ac 	bl	8004698 <systemSettingLog>
  port_dwt_init();
 8005340:	f000 f924 	bl	800558c <port_dwt_init_imp>
  port_dwt_reset();
 8005344:	6075      	str	r5, [r6, #4]
  port_hal_delay(100);
 8005346:	2064      	movs	r0, #100	; 0x64
 8005348:	f7fc fafe 	bl	8001948 <HAL_Delay>
  st = port_dwt_get_cycles();
 800534c:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 800534e:	2664      	movs	r6, #100	; 0x64
 8005350:	466a      	mov	r2, sp
 8005352:	4629      	mov	r1, r5
 8005354:	fbb0 f0f6 	udiv	r0, r0, r6
 8005358:	f7ff f906 	bl	8004568 <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 800535c:	9a03      	ldr	r2, [sp, #12]
 800535e:	f204 203b 	addw	r0, r4, #571	; 0x23b
 8005362:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8005366:	fb06 3101 	mla	r1, r6, r1, r3
 800536a:	f7ff f861 	bl	8004430 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 800536e:	466a      	mov	r2, sp
 8005370:	2100      	movs	r1, #0
 8005372:	f04f 30ff 	mov.w	r0, #4294967295
 8005376:	f7ff f8f7 	bl	8004568 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 800537a:	9a01      	ldr	r2, [sp, #4]
 800537c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005380:	9b02      	ldr	r3, [sp, #8]
 8005382:	fb01 3302 	mla	r3, r1, r2, r3
 8005386:	4a05      	ldr	r2, [pc, #20]	; (800539c <aiValidationInit+0x88>)
 8005388:	6013      	str	r3, [r2, #0]
  port_dwt_init();
 800538a:	f000 f8ff 	bl	800558c <port_dwt_init_imp>

  cyclesCounterInit();

  return 0;
}
 800538e:	4628      	mov	r0, r5
 8005390:	b004      	add	sp, #16
 8005392:	bd70      	pop	{r4, r5, r6, pc}
 8005394:	0800da1c 	.word	0x0800da1c
 8005398:	e0001000 	.word	0xe0001000
 800539c:	20004dc8 	.word	0x20004dc8

080053a0 <aiValidationProcess>:

int aiValidationProcess(void)
{
 80053a0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80053a4:	2500      	movs	r5, #0
 80053a6:	4c67      	ldr	r4, [pc, #412]	; (8005544 <aiValidationProcess+0x1a4>)
  aiPlatformVersion();
 80053a8:	f7fe fdfc 	bl	8003fa4 <aiPlatformVersion>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 80053ac:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8005580 <aiValidationProcess+0x1e0>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80053b0:	f844 5b08 	str.w	r5, [r4], #8
  idx = 0;
 80053b4:	46a8      	mov	r8, r5
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 80053b6:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8005584 <aiValidationProcess+0x1e4>
  int res = -1;
 80053ba:	f04f 35ff 	mov.w	r5, #4294967295
  LC_PRINT("Discovering the network(s)...\r\n");
 80053be:	4862      	ldr	r0, [pc, #392]	; (8005548 <aiValidationProcess+0x1a8>)
 80053c0:	f7ff f836 	bl	8004430 <lc_print>
    nn_name = ai_mnetwork_find(NULL, idx);
 80053c4:	4641      	mov	r1, r8
 80053c6:	2000      	movs	r0, #0
 80053c8:	f000 f91e 	bl	8005608 <ai_mnetwork_find>
    if (nn_name) {
 80053cc:	4606      	mov	r6, r0
 80053ce:	b1b0      	cbz	r0, 80053fe <aiValidationProcess+0x5e>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 80053d0:	4601      	mov	r1, r0
 80053d2:	4648      	mov	r0, r9
 80053d4:	f7ff f82c 	bl	8004430 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 80053d8:	4631      	mov	r1, r6
 80053da:	485c      	ldr	r0, [pc, #368]	; (800554c <aiValidationProcess+0x1ac>)
 80053dc:	f7ff f828 	bl	8004430 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 80053e0:	2200      	movs	r2, #0
 80053e2:	f1a4 0108 	sub.w	r1, r4, #8
 80053e6:	4630      	mov	r0, r6
 80053e8:	f000 f91c 	bl	8005624 <ai_mnetwork_create>
  if (err.type) {
 80053ec:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 80053f0:	d017      	beq.n	8005422 <aiValidationProcess+0x82>
        nn_name = NULL;
 80053f2:	2600      	movs	r6, #0
    return -1;
 80053f4:	f04f 35ff 	mov.w	r5, #4294967295
    aiLogErr(err, "ai_mnetwork_create");
 80053f8:	4955      	ldr	r1, [pc, #340]	; (8005550 <aiValidationProcess+0x1b0>)
 80053fa:	f7fe fde9 	bl	8003fd0 <aiLogErr>
    idx++;
 80053fe:	f108 0801 	add.w	r8, r8, #1
  } while (nn_name);
 8005402:	34a0      	adds	r4, #160	; 0xa0
 8005404:	2e00      	cmp	r6, #0
 8005406:	d1dd      	bne.n	80053c4 <aiValidationProcess+0x24>
  int r;

  r = aiInit();
  if (r) {
 8005408:	2d00      	cmp	r5, #0
 800540a:	d077      	beq.n	80054fc <aiValidationProcess+0x15c>
    LC_PRINT("\r\nE:  aiInit() r=%d\r\n", r);
 800540c:	4851      	ldr	r0, [pc, #324]	; (8005554 <aiValidationProcess+0x1b4>)
 800540e:	4629      	mov	r1, r5
 8005410:	f7ff f80e 	bl	8004430 <lc_print>
    port_hal_delay(2000);
 8005414:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005418:	f7fc fa96 	bl	8001948 <HAL_Delay>
  do {
    r = aiPbMgrWaitAndProcess();
  } while (r==0);

  return r;
}
 800541c:	4628      	mov	r0, r5
 800541e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 8005422:	484d      	ldr	r0, [pc, #308]	; (8005558 <aiValidationProcess+0x1b8>)
 8005424:	f7ff f804 	bl	8004430 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8005428:	4621      	mov	r1, r4
 800542a:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800542e:	f000 f939 	bl	80056a4 <ai_mnetwork_get_report>
 8005432:	4683      	mov	fp, r0
    err = ai_mnetwork_get_error(ctx->handle);
 8005434:	f854 0c08 	ldr.w	r0, [r4, #-8]
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8005438:	f1bb 0f00 	cmp.w	fp, #0
 800543c:	d10e      	bne.n	800545c <aiValidationProcess+0xbc>
    err = ai_mnetwork_get_error(ctx->handle);
 800543e:	f000 f93c 	bl	80056ba <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8005442:	4946      	ldr	r1, [pc, #280]	; (800555c <aiValidationProcess+0x1bc>)
 8005444:	f7fe fdc4 	bl	8003fd0 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8005448:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800544c:	f000 f914 	bl	8005678 <ai_mnetwork_destroy>
        nn_name = NULL;
 8005450:	465e      	mov	r6, fp
    return -2;
 8005452:	f06f 0501 	mvn.w	r5, #1
    ctx->handle = AI_HANDLE_NULL;
 8005456:	f844 bc08 	str.w	fp, [r4, #-8]
      if (res)
 800545a:	e7d0      	b.n	80053fe <aiValidationProcess+0x5e>
  if (!ai_mnetwork_init(ctx->handle)) {
 800545c:	f000 f93a 	bl	80056d4 <ai_mnetwork_init>
 8005460:	4683      	mov	fp, r0
 8005462:	b980      	cbnz	r0, 8005486 <aiValidationProcess+0xe6>
    err = ai_mnetwork_get_error(ctx->handle);
 8005464:	f854 0c08 	ldr.w	r0, [r4, #-8]
        nn_name = NULL;
 8005468:	465e      	mov	r6, fp
    err = ai_mnetwork_get_error(ctx->handle);
 800546a:	f000 f926 	bl	80056ba <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 800546e:	493c      	ldr	r1, [pc, #240]	; (8005560 <aiValidationProcess+0x1c0>)
 8005470:	f7fe fdae 	bl	8003fd0 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8005474:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8005478:	f000 f8fe 	bl	8005678 <ai_mnetwork_destroy>
    return -4;
 800547c:	f06f 0503 	mvn.w	r5, #3
    ctx->handle = AI_HANDLE_NULL;
 8005480:	f844 bc08 	str.w	fp, [r4, #-8]
      if (res)
 8005484:	e7bb      	b.n	80053fe <aiValidationProcess+0x5e>
  if (ai_mnetwork_get_report(ctx->handle,
 8005486:	4621      	mov	r1, r4
 8005488:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800548c:	f000 f90a 	bl	80056a4 <ai_mnetwork_get_report>
 8005490:	4683      	mov	fp, r0
 8005492:	b1b0      	cbz	r0, 80054c2 <aiValidationProcess+0x122>
    aiPrintNetworkInfo(&ctx->report);
 8005494:	4620      	mov	r0, r4
 8005496:	f7fe fea9 	bl	80041ec <aiPrintNetworkInfo>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 800549a:	4628      	mov	r0, r5
  ctx->inputs_in_activations = false;
 800549c:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
    if (!ctx->report.inputs[i].data)
 80054a0:	211c      	movs	r1, #28
  ctx->outputs_in_activations = false;
 80054a2:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
      ctx->inputs_in_activations = true;
 80054a6:	2501      	movs	r5, #1
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 80054a8:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8005588 <aiValidationProcess+0x1e8>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 80054ac:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80054ae:	4298      	cmp	r0, r3
 80054b0:	db0a      	blt.n	80054c8 <aiValidationProcess+0x128>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80054b2:	2300      	movs	r3, #0
    if (!ctx->report.outputs[i].data)
 80054b4:	201c      	movs	r0, #28
      ctx->outputs_in_activations = true;
 80054b6:	2501      	movs	r5, #1
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80054b8:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 80054ba:	4293      	cmp	r3, r2
 80054bc:	db11      	blt.n	80054e2 <aiValidationProcess+0x142>
      res = aiBootstrap(&net_exec_ctx[idx], nn_name);
 80054be:	2500      	movs	r5, #0
 80054c0:	e79d      	b.n	80053fe <aiValidationProcess+0x5e>
    err = ai_mnetwork_get_error(ctx->handle);
 80054c2:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80054c6:	e7ba      	b.n	800543e <aiValidationProcess+0x9e>
    if (!ctx->report.inputs[i].data)
 80054c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80054ca:	fb01 3300 	mla	r3, r1, r0, r3
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	b922      	cbnz	r2, 80054dc <aiValidationProcess+0x13c>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 80054d2:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 80054d6:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 80054d8:	3001      	adds	r0, #1
 80054da:	e7e7      	b.n	80054ac <aiValidationProcess+0x10c>
      ctx->inputs_in_activations = true;
 80054dc:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
 80054e0:	e7fa      	b.n	80054d8 <aiValidationProcess+0x138>
    if (!ctx->report.outputs[i].data)
 80054e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80054e4:	fb00 2203 	mla	r2, r0, r3, r2
 80054e8:	6851      	ldr	r1, [r2, #4]
 80054ea:	b921      	cbnz	r1, 80054f6 <aiValidationProcess+0x156>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 80054ec:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 80054f0:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80054f2:	3301      	adds	r3, #1
 80054f4:	e7e0      	b.n	80054b8 <aiValidationProcess+0x118>
      ctx->outputs_in_activations = true;
 80054f6:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 80054fa:	e7fa      	b.n	80054f2 <aiValidationProcess+0x152>
    LC_PRINT("\r\n");
 80054fc:	4819      	ldr	r0, [pc, #100]	; (8005564 <aiValidationProcess+0x1c4>)
 80054fe:	f7fe ff97 	bl	8004430 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8005502:	4819      	ldr	r0, [pc, #100]	; (8005568 <aiValidationProcess+0x1c8>)
 8005504:	f7fe ff94 	bl	8004430 <lc_print>
    LC_PRINT("| READY to receive a CMD from the HOST... |\r\n");
 8005508:	4818      	ldr	r0, [pc, #96]	; (800556c <aiValidationProcess+0x1cc>)
 800550a:	f7fe ff91 	bl	8004430 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 800550e:	4816      	ldr	r0, [pc, #88]	; (8005568 <aiValidationProcess+0x1c8>)
 8005510:	f7fe ff8e 	bl	8004430 <lc_print>
    LC_PRINT("\r\n");
 8005514:	4813      	ldr	r0, [pc, #76]	; (8005564 <aiValidationProcess+0x1c4>)
 8005516:	f7fe ff8b 	bl	8004430 <lc_print>
    LC_PRINT("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 800551a:	4815      	ldr	r0, [pc, #84]	; (8005570 <aiValidationProcess+0x1d0>)
 800551c:	f7fe ff88 	bl	8004430 <lc_print>
    LC_PRINT("# and a serial COM interface should be used\r\n");
 8005520:	4814      	ldr	r0, [pc, #80]	; (8005574 <aiValidationProcess+0x1d4>)
 8005522:	f7fe ff85 	bl	8004430 <lc_print>
    LC_PRINT("# (i.e. Python ai_runner module). Protocol version = %d.%d\r\n",
 8005526:	4814      	ldr	r0, [pc, #80]	; (8005578 <aiValidationProcess+0x1d8>)
 8005528:	2201      	movs	r2, #1
 800552a:	2103      	movs	r1, #3
 800552c:	f7fe ff80 	bl	8004430 <lc_print>
  aiPbMgrInit(pbCmdFuncTab);
 8005530:	4812      	ldr	r0, [pc, #72]	; (800557c <aiValidationProcess+0x1dc>)
 8005532:	f7fe fb79 	bl	8003c28 <aiPbMgrInit>
    r = aiPbMgrWaitAndProcess();
 8005536:	f7fe fc1d 	bl	8003d74 <aiPbMgrWaitAndProcess>
  } while (r==0);
 800553a:	4605      	mov	r5, r0
 800553c:	2800      	cmp	r0, #0
 800553e:	d0fa      	beq.n	8005536 <aiValidationProcess+0x196>
 8005540:	e76c      	b.n	800541c <aiValidationProcess+0x7c>
 8005542:	bf00      	nop
 8005544:	20004e60 	.word	0x20004e60
 8005548:	0800dc8d 	.word	0x0800dc8d
 800554c:	0800dcc4 	.word	0x0800dcc4
 8005550:	0800dce2 	.word	0x0800dce2
 8005554:	0800dd36 	.word	0x0800dd36
 8005558:	0800dcf5 	.word	0x0800dcf5
 800555c:	0800dd10 	.word	0x0800dd10
 8005560:	0800dd25 	.word	0x0800dd25
 8005564:	0800dd4c 	.word	0x0800dd4c
 8005568:	0800dd4f 	.word	0x0800dd4f
 800556c:	0800dd7d 	.word	0x0800dd7d
 8005570:	0800ddab 	.word	0x0800ddab
 8005574:	0800ddf1 	.word	0x0800ddf1
 8005578:	0800de1f 	.word	0x0800de1f
 800557c:	2000001c 	.word	0x2000001c
 8005580:	0800dcad 	.word	0x0800dcad
 8005584:	20000060 	.word	0x20000060
 8005588:	2000005c 	.word	0x2000005c

0800558c <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800558c:	4a08      	ldr	r2, [pc, #32]	; (80055b0 <port_dwt_init_imp+0x24>)
 800558e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8005592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005596:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
 800559a:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <port_dwt_init_imp+0x28>)
 800559c:	4a06      	ldr	r2, [pc, #24]	; (80055b8 <port_dwt_init_imp+0x2c>)
 800559e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
#endif
  DWT->CYCCNT = 0;
 80055a2:	2200      	movs	r2, #0
 80055a4:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
}
 80055ae:	4770      	bx	lr
 80055b0:	e000ed00 	.word	0xe000ed00
 80055b4:	e0001000 	.word	0xe0001000
 80055b8:	c5acce55 	.word	0xc5acce55

080055bc <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <ai_mnetwork_handle+0x18>)
 80055be:	b120      	cbz	r0, 80055ca <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 80055c0:	4298      	cmp	r0, r3
 80055c2:	bf0c      	ite	eq
 80055c4:	4618      	moveq	r0, r3
 80055c6:	2000      	movne	r0, #0
 80055c8:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 80055ca:	681a      	ldr	r2, [r3, #0]
            return inst;
 80055cc:	2a00      	cmp	r2, #0
 80055ce:	bf08      	it	eq
 80055d0:	4618      	moveq	r0, r3
}
 80055d2:	4770      	bx	lr
 80055d4:	20004f48 	.word	0x20004f48

080055d8 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 80055d8:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 80055da:	4604      	mov	r4, r0
 80055dc:	b160      	cbz	r0, 80055f8 <ai_mnetwork_is_valid.constprop.0+0x20>
 80055de:	f7fa fe67 	bl	80002b0 <strlen>
 80055e2:	2807      	cmp	r0, #7
 80055e4:	4602      	mov	r2, r0
 80055e6:	d107      	bne.n	80055f8 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 80055e8:	4621      	mov	r1, r4
 80055ea:	4804      	ldr	r0, [pc, #16]	; (80055fc <ai_mnetwork_is_valid.constprop.0+0x24>)
 80055ec:	f005 ffc5 	bl	800b57a <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 80055f0:	fab0 f080 	clz	r0, r0
 80055f4:	0940      	lsrs	r0, r0, #5
}
 80055f6:	bd10      	pop	{r4, pc}
    return false;
 80055f8:	2000      	movs	r0, #0
 80055fa:	e7fc      	b.n	80055f6 <ai_mnetwork_is_valid.constprop.0+0x1e>
 80055fc:	0800df1c 	.word	0x0800df1c

08005600 <MX_X_CUBE_AI_Init>:
    aiValidationInit();
 8005600:	f7ff be88 	b.w	8005314 <aiValidationInit>

08005604 <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 8005604:	f7ff becc 	b.w	80053a0 <aiValidationProcess>

08005608 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8005608:	b510      	push	{r4, lr}
 800560a:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 800560c:	f7ff ffe4 	bl	80055d8 <ai_mnetwork_is_valid.constprop.0>
 8005610:	b920      	cbnz	r0, 800561c <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 8005612:	2c00      	cmp	r4, #0
 8005614:	4802      	ldr	r0, [pc, #8]	; (8005620 <ai_mnetwork_find+0x18>)
 8005616:	bf18      	it	ne
 8005618:	2000      	movne	r0, #0
}
 800561a:	bd10      	pop	{r4, pc}
            return entry->name;
 800561c:	4800      	ldr	r0, [pc, #0]	; (8005620 <ai_mnetwork_find+0x18>)
 800561e:	e7fc      	b.n	800561a <ai_mnetwork_find+0x12>
 8005620:	0800df1c 	.word	0x0800df1c

08005624 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8005624:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005626:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8005628:	2000      	movs	r0, #0
{
 800562a:	9201      	str	r2, [sp, #4]
 800562c:	460d      	mov	r5, r1
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 800562e:	f7ff ffc5 	bl	80055bc <ai_mnetwork_handle>

    if (!inst) {
 8005632:	4604      	mov	r4, r0
 8005634:	b1e0      	cbz	r0, 8005670 <ai_mnetwork_create+0x4c>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8005636:	4630      	mov	r0, r6
 8005638:	f7ff ffce 	bl	80055d8 <ai_mnetwork_is_valid.constprop.0>
 800563c:	9901      	ldr	r1, [sp, #4]
 800563e:	b910      	cbnz	r0, 8005646 <ai_mnetwork_create+0x22>
 8005640:	2214      	movs	r2, #20
 8005642:	2310      	movs	r3, #16
 8005644:	e00d      	b.n	8005662 <ai_mnetwork_create+0x3e>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 8005646:	4628      	mov	r0, r5
 8005648:	f000 fbe2 	bl	8005e10 <ai_network_create>
 800564c:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8005650:	b2c2      	uxtb	r2, r0
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8005652:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8005656:	d104      	bne.n	8005662 <ai_mnetwork_create+0x3e>
        inst->entry = found;
 8005658:	4906      	ldr	r1, [pc, #24]	; (8005674 <ai_mnetwork_create+0x50>)
 800565a:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 800565c:	6829      	ldr	r1, [r5, #0]
 800565e:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8005660:	602c      	str	r4, [r5, #0]
        return err;
 8005662:	2000      	movs	r0, #0
 8005664:	f362 0007 	bfi	r0, r2, #0, #8
 8005668:	f363 201f 	bfi	r0, r3, #8, #24
    }

    return err;
}
 800566c:	b002      	add	sp, #8
 800566e:	bd70      	pop	{r4, r5, r6, pc}
 8005670:	2231      	movs	r2, #49	; 0x31
 8005672:	e7e6      	b.n	8005642 <ai_mnetwork_create+0x1e>
 8005674:	0800df24 	.word	0x0800df24

08005678 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800567c:	f7ff ff9e 	bl	80055bc <ai_mnetwork_handle>
    if (inn) {
 8005680:	4605      	mov	r5, r0
 8005682:	b158      	cbz	r0, 800569c <ai_mnetwork_destroy+0x24>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8005684:	6803      	ldr	r3, [r0, #0]
 8005686:	6840      	ldr	r0, [r0, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	4798      	blx	r3
        if (hdl != inn->handle) {
 800568c:	686b      	ldr	r3, [r5, #4]
 800568e:	4283      	cmp	r3, r0
 8005690:	d004      	beq.n	800569c <ai_mnetwork_destroy+0x24>
        if ((inst) && (&gnetworks[i] == inst)) {
 8005692:	4b03      	ldr	r3, [pc, #12]	; (80056a0 <ai_mnetwork_destroy+0x28>)
 8005694:	2400      	movs	r4, #0
 8005696:	429d      	cmp	r5, r3
 8005698:	d100      	bne.n	800569c <ai_mnetwork_destroy+0x24>
            gnetworks[i].entry = NULL;
 800569a:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 800569c:	4620      	mov	r0, r4
 800569e:	bd38      	pop	{r3, r4, r5, pc}
 80056a0:	20004f48 	.word	0x20004f48

080056a4 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 80056a4:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80056a6:	f7ff ff89 	bl	80055bc <ai_mnetwork_handle>
    if (inn)
 80056aa:	b128      	cbz	r0, 80056b8 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 80056ac:	6802      	ldr	r2, [r0, #0]
 80056ae:	6840      	ldr	r0, [r0, #4]
 80056b0:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 80056b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 80056b6:	4710      	bx	r2
}
 80056b8:	bd10      	pop	{r4, pc}

080056ba <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 80056ba:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80056bc:	f7ff ff7e 	bl	80055bc <ai_mnetwork_handle>
    if (inn)
 80056c0:	b128      	cbz	r0, 80056ce <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 80056c2:	6803      	ldr	r3, [r0, #0]
 80056c4:	6840      	ldr	r0, [r0, #4]
 80056c6:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 80056c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 80056cc:	4718      	bx	r3
}
 80056ce:	f241 0014 	movw	r0, #4116	; 0x1014
 80056d2:	bd10      	pop	{r4, pc}

080056d4 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 80056d4:	b530      	push	{r4, r5, lr}
 80056d6:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80056d8:	f7ff ff70 	bl	80055bc <ai_mnetwork_handle>
    if (inn) {
 80056dc:	4604      	mov	r4, r0
 80056de:	b168      	cbz	r0, 80056fc <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 80056e0:	6803      	ldr	r3, [r0, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 80056e2:	2500      	movs	r5, #0
        inn->entry->ai_data_params_get(&par);
 80056e4:	4668      	mov	r0, sp
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 80056ea:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80056ee:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 80056f0:	42aa      	cmp	r2, r5
 80056f2:	dc05      	bgt.n	8005700 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	4669      	mov	r1, sp
 80056f8:	6860      	ldr	r0, [r4, #4]
 80056fa:	4798      	blx	r3
    }
    else
        return false;
}
 80056fc:	b00f      	add	sp, #60	; 0x3c
 80056fe:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	4629      	mov	r1, r5
 8005704:	a803      	add	r0, sp, #12
 8005706:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
        for (int idx=0; idx < par.map_activations.size; idx++)
 800570a:	3501      	adds	r5, #1
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 800570c:	f002 f8a0 	bl	8007850 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8005710:	e7eb      	b.n	80056ea <ai_mnetwork_init+0x16>

08005712 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8005712:	b513      	push	{r0, r1, r4, lr}
 8005714:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8005716:	f7ff ff51 	bl	80055bc <ai_mnetwork_handle>
    if (inn)
 800571a:	4603      	mov	r3, r0
 800571c:	b140      	cbz	r0, 8005730 <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 800571e:	6800      	ldr	r0, [r0, #0]
 8005720:	9a01      	ldr	r2, [sp, #4]
 8005722:	6a04      	ldr	r4, [r0, #32]
 8005724:	6858      	ldr	r0, [r3, #4]
 8005726:	4623      	mov	r3, r4
    else
        return 0;
}
 8005728:	b002      	add	sp, #8
 800572a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 800572e:	4718      	bx	r3
}
 8005730:	b002      	add	sp, #8
 8005732:	bd10      	pop	{r4, pc}

08005734 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8005738:	f7ff ff40 	bl	80055bc <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 800573c:	b188      	cbz	r0, 8005762 <ai_mnetwork_get_private_handle+0x2e>
 800573e:	b181      	cbz	r1, 8005762 <ai_mnetwork_get_private_handle+0x2e>
 8005740:	b17d      	cbz	r5, 8005762 <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8005742:	6843      	ldr	r3, [r0, #4]
         *pparams = inn->params;
 8005744:	f100 0408 	add.w	r4, r0, #8
         *phandle = inn->handle;
 8005748:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 800574a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800574c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800574e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005756:	e894 0003 	ldmia.w	r4, {r0, r1}
 800575a:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 800575e:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8005760:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 8005762:	f04f 30ff 	mov.w	r0, #4294967295
 8005766:	e7fb      	b.n	8005760 <ai_mnetwork_get_private_handle+0x2c>

08005768 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8005768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 800576c:	6896      	ldr	r6, [r2, #8]
{
 800576e:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8005770:	2500      	movs	r5, #0
{
 8005772:	4614      	mov	r4, r2
  if (specifier->flags & FLAG_IS_SIGNED) {
 8005774:	f016 0304 	ands.w	r3, r6, #4
  buf[idx--] = 0;
 8005778:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 800577c:	d02a      	beq.n	80057d4 <_write_number+0x6c>
    if ((int64_t)number < 0) {
 800577e:	42a9      	cmp	r1, r5
 8005780:	da08      	bge.n	8005794 <_write_number+0x2c>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8005782:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8005784:	4240      	negs	r0, r0
      sign_neg = '-';
 8005786:	f04f 052d 	mov.w	r5, #45	; 0x2d
      specifier->width -= 1;
 800578a:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 800578e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	f016 0f08 	tst.w	r6, #8
 8005798:	f10d 093f 	add.w	r9, sp, #63	; 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800579c:	f04f 073e 	mov.w	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 80057a0:	f006 0a10 	and.w	sl, r6, #16
 80057a4:	bf14      	ite	ne
 80057a6:	f04f 0841 	movne.w	r8, #65	; 0x41
 80057aa:	f04f 0861 	moveq.w	r8, #97	; 0x61
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80057ae:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 80057b2:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 80057b6:	f1ba 0f00 	cmp.w	sl, #0
 80057ba:	d033      	beq.n	8005824 <_write_number+0xbc>
      chr = number & 0x0F;
 80057bc:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 80057c0:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80057c2:	2b09      	cmp	r3, #9
      t = number >> 4;
 80057c4:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 80057c8:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80057cc:	d906      	bls.n	80057dc <_write_number+0x74>
 80057ce:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	e004      	b.n	80057de <_write_number+0x76>
  char sign_neg = 0;
 80057d4:	461d      	mov	r5, r3
 80057d6:	e7dd      	b.n	8005794 <_write_number+0x2c>
    }
    number = t;
    buf[idx--] = chr;
 80057d8:	4617      	mov	r7, r2
 80057da:	e7ea      	b.n	80057b2 <_write_number+0x4a>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80057dc:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 80057de:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 80057e2:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 80057e6:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 80057ea:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 80057ee:	d1f3      	bne.n	80057d8 <_write_number+0x70>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 80057f0:	f006 0101 	and.w	r1, r6, #1
 80057f4:	b155      	cbz	r5, 800580c <_write_number+0xa4>
 80057f6:	b949      	cbnz	r1, 800580c <_write_number+0xa4>
    buf[idx--] = sign_neg;
 80057f8:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 80057fc:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8005800:	eb0d 0203 	add.w	r2, sp, r3
 8005804:	232d      	movs	r3, #45	; 0x2d
 8005806:	f802 3c40 	strb.w	r3, [r2, #-64]
 800580a:	1eba      	subs	r2, r7, #2
 800580c:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	f006 0602 	and.w	r6, r6, #2
 8005814:	bf14      	ite	ne
 8005816:	2130      	movne	r1, #48	; 0x30
 8005818:	2120      	moveq	r1, #32
 800581a:	455b      	cmp	r3, fp
 800581c:	dd13      	ble.n	8005846 <_write_number+0xde>
 800581e:	b166      	cbz	r6, 800583a <_write_number+0xd2>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8005820:	b9a5      	cbnz	r5, 800584c <_write_number+0xe4>
 8005822:	e01c      	b.n	800585e <_write_number+0xf6>
      t = number / 10;
 8005824:	220a      	movs	r2, #10
 8005826:	2300      	movs	r3, #0
 8005828:	f7fb faec 	bl	8000e04 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 800582c:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8005830:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8005834:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8005838:	e7ca      	b.n	80057d0 <_write_number+0x68>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 800583a:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 800583e:	f10b 0b01 	add.w	fp, fp, #1
 8005842:	3a01      	subs	r2, #1
 8005844:	e7e9      	b.n	800581a <_write_number+0xb2>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 8005846:	b155      	cbz	r5, 800585e <_write_number+0xf6>
 8005848:	455b      	cmp	r3, fp
 800584a:	d108      	bne.n	800585e <_write_number+0xf6>
    buf[idx--] = sign_neg;
 800584c:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8005850:	212d      	movs	r1, #45	; 0x2d
    count++;
 8005852:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8005856:	3a01      	subs	r2, #1
 8005858:	446b      	add	r3, sp
 800585a:	f803 1c40 	strb.w	r1, [r3, #-64]
  }

  idx++;


  for(int i = 0; i < count; i++) {
 800585e:	eb0d 0602 	add.w	r6, sp, r2
 8005862:	2500      	movs	r5, #0
 8005864:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8005866:	68e3      	ldr	r3, [r4, #12]
 8005868:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800586c:	6920      	ldr	r0, [r4, #16]
 800586e:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8005870:	45ab      	cmp	fp, r5
 8005872:	d1f7      	bne.n	8005864 <_write_number+0xfc>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8005874:	68a3      	ldr	r3, [r4, #8]
 8005876:	079b      	lsls	r3, r3, #30
 8005878:	d408      	bmi.n	800588c <_write_number+0x124>
      _WRITE_C(' ');
    }
  }

  return count;
}
 800587a:	4628      	mov	r0, r5
 800587c:	b011      	add	sp, #68	; 0x44
 800587e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8005882:	3501      	adds	r5, #1
 8005884:	68e3      	ldr	r3, [r4, #12]
 8005886:	2120      	movs	r1, #32
 8005888:	6920      	ldr	r0, [r4, #16]
 800588a:	4798      	blx	r3
    while (count < specifier->width) {
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	42ab      	cmp	r3, r5
 8005890:	dcf7      	bgt.n	8005882 <_write_number+0x11a>
 8005892:	e7f2      	b.n	800587a <_write_number+0x112>

08005894 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8005894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005898:	4682      	mov	sl, r0
 800589a:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 800589c:	f04f 0b00 	mov.w	fp, #0
{
 80058a0:	ed2d 8b02 	vpush	{d8}
 80058a4:	ee08 1a10 	vmov	s16, r1
 80058a8:	b09d      	sub	sp, #116	; 0x74
  return *(*fmtP)++;
 80058aa:	4613      	mov	r3, r2
 80058ac:	f813 1b01 	ldrb.w	r1, [r3], #1
 80058b0:	9301      	str	r3, [sp, #4]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 80058b2:	b929      	cbnz	r1, 80058c0 <vlc_print+0x2c>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 80058b4:	4658      	mov	r0, fp
 80058b6:	b01d      	add	sp, #116	; 0x74
 80058b8:	ecbd 8b02 	vpop	{d8}
 80058bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 80058c0:	290a      	cmp	r1, #10
 80058c2:	d105      	bne.n	80058d0 <vlc_print+0x3c>
      putc_fct(user, c);
 80058c4:	ee18 0a10 	vmov	r0, s16
      count++;
 80058c8:	f10b 0b01 	add.w	fp, fp, #1
      putc_fct(user, c);
 80058cc:	47d0      	blx	sl
      count++;
 80058ce:	e10c      	b.n	8005aea <vlc_print+0x256>
    else if (c == '%')
 80058d0:	2925      	cmp	r1, #37	; 0x25
 80058d2:	d1f7      	bne.n	80058c4 <vlc_print+0x30>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 80058d4:	2300      	movs	r3, #0
 80058d6:	f04f 080a 	mov.w	r8, #10
 80058da:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 80058de:	461e      	mov	r6, r3
 80058e0:	461f      	mov	r7, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	469c      	mov	ip, r3
 80058e6:	4618      	mov	r0, r3
      bool has_precision = false;
 80058e8:	469e      	mov	lr, r3
      int long_type = 0;
 80058ea:	9302      	str	r3, [sp, #8]
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 80058ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80058f0:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
  return *(*fmtP)++;
 80058f4:	9d01      	ldr	r5, [sp, #4]
 80058f6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80058fa:	9501      	str	r5, [sp, #4]
        if (!c)
 80058fc:	b321      	cbz	r1, 8005948 <vlc_print+0xb4>
        else if (c == '0')
 80058fe:	2939      	cmp	r1, #57	; 0x39
 8005900:	d814      	bhi.n	800592c <vlc_print+0x98>
 8005902:	292c      	cmp	r1, #44	; 0x2c
 8005904:	d91d      	bls.n	8005942 <vlc_print+0xae>
 8005906:	f1a1 052d 	sub.w	r5, r1, #45	; 0x2d
 800590a:	2d0c      	cmp	r5, #12
 800590c:	d810      	bhi.n	8005930 <vlc_print+0x9c>
 800590e:	e8df f015 	tbh	[pc, r5, lsl #1]
 8005912:	0048      	.short	0x0048
 8005914:	000f020e 	.word	0x000f020e
 8005918:	004b0033 	.word	0x004b0033
 800591c:	004b004b 	.word	0x004b004b
 8005920:	004b004b 	.word	0x004b004b
 8005924:	004b004b 	.word	0x004b004b
 8005928:	004b004b 	.word	0x004b004b
 800592c:	296c      	cmp	r1, #108	; 0x6c
 800592e:	d045      	beq.n	80059bc <vlc_print+0x128>
          switch(c)
 8005930:	2978      	cmp	r1, #120	; 0x78
 8005932:	d809      	bhi.n	8005948 <vlc_print+0xb4>
 8005934:	2962      	cmp	r1, #98	; 0x62
 8005936:	d845      	bhi.n	80059c4 <vlc_print+0x130>
 8005938:	2946      	cmp	r1, #70	; 0x46
 800593a:	f000 8118 	beq.w	8005b6e <vlc_print+0x2da>
 800593e:	2958      	cmp	r1, #88	; 0x58
 8005940:	d074      	beq.n	8005a2c <vlc_print+0x198>
 8005942:	2925      	cmp	r1, #37	; 0x25
 8005944:	f000 8093 	beq.w	8005a6e <vlc_print+0x1da>
 8005948:	b103      	cbz	r3, 800594c <vlc_print+0xb8>
 800594a:	9609      	str	r6, [sp, #36]	; 0x24
 800594c:	b107      	cbz	r7, 8005950 <vlc_print+0xbc>
 800594e:	9208      	str	r2, [sp, #32]
 8005950:	f1bc 0f00 	cmp.w	ip, #0
 8005954:	d000      	beq.n	8005958 <vlc_print+0xc4>
 8005956:	9007      	str	r0, [sp, #28]
        putc_fct(user, '<');
 8005958:	213c      	movs	r1, #60	; 0x3c
 800595a:	ee18 0a10 	vmov	r0, s16
 800595e:	47d0      	blx	sl
        putc_fct(user, '!');
 8005960:	2121      	movs	r1, #33	; 0x21
 8005962:	ee18 0a10 	vmov	r0, s16
        va_arg(vl, signed long);
 8005966:	3404      	adds	r4, #4
        putc_fct(user, '!');
 8005968:	47d0      	blx	sl
        putc_fct(user, '>');
 800596a:	213e      	movs	r1, #62	; 0x3e
 800596c:	ee18 0a10 	vmov	r0, s16
        count += 3;
 8005970:	f10b 0b03 	add.w	fp, fp, #3
        putc_fct(user, '>');
 8005974:	47d0      	blx	sl
        error = false;
 8005976:	e0b8      	b.n	8005aea <vlc_print+0x256>
          if (!specifier.width && !specifier.precision) {
 8005978:	ea50 0102 	orrs.w	r1, r0, r2
 800597c:	d105      	bne.n	800598a <vlc_print+0xf6>
            specifier.flags |= FLAG_ZERO_EXTEND;
 800597e:	f046 0601 	orr.w	r6, r6, #1
 8005982:	460a      	mov	r2, r1
 8005984:	4608      	mov	r0, r1
 8005986:	2301      	movs	r3, #1
 8005988:	e7b4      	b.n	80058f4 <vlc_print+0x60>
          } else if (has_precision) {
 800598a:	f1be 0f00 	cmp.w	lr, #0
 800598e:	d003      	beq.n	8005998 <vlc_print+0x104>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8005990:	fb08 f202 	mul.w	r2, r8, r2
 8005994:	4677      	mov	r7, lr
 8005996:	e7ad      	b.n	80058f4 <vlc_print+0x60>
            specifier.width = specifier.width * 10 + (c - '0');
 8005998:	fb08 f000 	mul.w	r0, r8, r0
            specifier.width = specifier.width * 10 + (c - '0');
 800599c:	f04f 0c01 	mov.w	ip, #1
 80059a0:	e7a8      	b.n	80058f4 <vlc_print+0x60>
          specifier.flags |= FLAG_NEG_PAD;
 80059a2:	f046 0602 	orr.w	r6, r6, #2
 80059a6:	e7ee      	b.n	8005986 <vlc_print+0xf2>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80059a8:	3930      	subs	r1, #48	; 0x30
          if (has_precision) {
 80059aa:	f1be 0f00 	cmp.w	lr, #0
 80059ae:	d002      	beq.n	80059b6 <vlc_print+0x122>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80059b0:	fb08 1202 	mla	r2, r8, r2, r1
 80059b4:	e7ee      	b.n	8005994 <vlc_print+0x100>
            specifier.width = specifier.width * 10 + (c - '0');
 80059b6:	fb08 1000 	mla	r0, r8, r0, r1
 80059ba:	e7ef      	b.n	800599c <vlc_print+0x108>
          long_type += 1;
 80059bc:	9902      	ldr	r1, [sp, #8]
 80059be:	3101      	adds	r1, #1
 80059c0:	9102      	str	r1, [sp, #8]
 80059c2:	e797      	b.n	80058f4 <vlc_print+0x60>
          switch(c)
 80059c4:	3963      	subs	r1, #99	; 0x63
 80059c6:	2915      	cmp	r1, #21
 80059c8:	d8be      	bhi.n	8005948 <vlc_print+0xb4>
 80059ca:	f20f 0e08 	addw	lr, pc, #8
 80059ce:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
 80059d2:	bf00      	nop
 80059d4:	08005a83 	.word	0x08005a83
 80059d8:	08005b45 	.word	0x08005b45
 80059dc:	08005949 	.word	0x08005949
 80059e0:	08005b6f 	.word	0x08005b6f
 80059e4:	08005949 	.word	0x08005949
 80059e8:	08005949 	.word	0x08005949
 80059ec:	08005b45 	.word	0x08005b45
 80059f0:	08005949 	.word	0x08005949
 80059f4:	08005949 	.word	0x08005949
 80059f8:	08005949 	.word	0x08005949
 80059fc:	08005949 	.word	0x08005949
 8005a00:	08005949 	.word	0x08005949
 8005a04:	08005949 	.word	0x08005949
 8005a08:	08005b2f 	.word	0x08005b2f
 8005a0c:	08005949 	.word	0x08005949
 8005a10:	08005949 	.word	0x08005949
 8005a14:	08005a99 	.word	0x08005a99
 8005a18:	08005949 	.word	0x08005949
 8005a1c:	08005d35 	.word	0x08005d35
 8005a20:	08005949 	.word	0x08005949
 8005a24:	08005949 	.word	0x08005949
 8005a28:	08005a47 	.word	0x08005a47
 8005a2c:	b103      	cbz	r3, 8005a30 <vlc_print+0x19c>
 8005a2e:	9609      	str	r6, [sp, #36]	; 0x24
 8005a30:	b107      	cbz	r7, 8005a34 <vlc_print+0x1a0>
 8005a32:	9208      	str	r2, [sp, #32]
 8005a34:	f1bc 0f00 	cmp.w	ip, #0
 8005a38:	d000      	beq.n	8005a3c <vlc_print+0x1a8>
 8005a3a:	9007      	str	r0, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 8005a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a3e:	f043 0308 	orr.w	r3, r3, #8
 8005a42:	9309      	str	r3, [sp, #36]	; 0x24
 8005a44:	e007      	b.n	8005a56 <vlc_print+0x1c2>
 8005a46:	b103      	cbz	r3, 8005a4a <vlc_print+0x1b6>
 8005a48:	9609      	str	r6, [sp, #36]	; 0x24
 8005a4a:	b107      	cbz	r7, 8005a4e <vlc_print+0x1ba>
 8005a4c:	9208      	str	r2, [sp, #32]
 8005a4e:	f1bc 0f00 	cmp.w	ip, #0
 8005a52:	d000      	beq.n	8005a56 <vlc_print+0x1c2>
 8005a54:	9007      	str	r0, [sp, #28]
            specifier.flags |= FLAG_HEX;
 8005a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8005a58:	aa07      	add	r2, sp, #28
 8005a5a:	f854 0b04 	ldr.w	r0, [r4], #4
 8005a5e:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8005a60:	f043 0310 	orr.w	r3, r3, #16
 8005a64:	9309      	str	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8005a66:	f7ff fe7f 	bl	8005768 <_write_number>
 8005a6a:	4483      	add	fp, r0
            break;
 8005a6c:	e03d      	b.n	8005aea <vlc_print+0x256>
 8005a6e:	b103      	cbz	r3, 8005a72 <vlc_print+0x1de>
 8005a70:	9609      	str	r6, [sp, #36]	; 0x24
 8005a72:	b107      	cbz	r7, 8005a76 <vlc_print+0x1e2>
 8005a74:	9208      	str	r2, [sp, #32]
 8005a76:	f1bc 0f00 	cmp.w	ip, #0
 8005a7a:	d000      	beq.n	8005a7e <vlc_print+0x1ea>
 8005a7c:	9007      	str	r0, [sp, #28]
            putc_fct(user, c);
 8005a7e:	2125      	movs	r1, #37	; 0x25
 8005a80:	e720      	b.n	80058c4 <vlc_print+0x30>
 8005a82:	b103      	cbz	r3, 8005a86 <vlc_print+0x1f2>
 8005a84:	9609      	str	r6, [sp, #36]	; 0x24
 8005a86:	b107      	cbz	r7, 8005a8a <vlc_print+0x1f6>
 8005a88:	9208      	str	r2, [sp, #32]
 8005a8a:	f1bc 0f00 	cmp.w	ip, #0
 8005a8e:	d000      	beq.n	8005a92 <vlc_print+0x1fe>
 8005a90:	9007      	str	r0, [sp, #28]
            putc_fct(user, t);
 8005a92:	f814 1b04 	ldrb.w	r1, [r4], #4
 8005a96:	e715      	b.n	80058c4 <vlc_print+0x30>
 8005a98:	b103      	cbz	r3, 8005a9c <vlc_print+0x208>
 8005a9a:	9609      	str	r6, [sp, #36]	; 0x24
 8005a9c:	b107      	cbz	r7, 8005aa0 <vlc_print+0x20c>
 8005a9e:	9208      	str	r2, [sp, #32]
 8005aa0:	f1bc 0f00 	cmp.w	ip, #0
 8005aa4:	d000      	beq.n	8005aa8 <vlc_print+0x214>
 8005aa6:	9007      	str	r0, [sp, #28]
            if (!str) str = "(null)";
 8005aa8:	4ba9      	ldr	r3, [pc, #676]	; (8005d50 <vlc_print+0x4bc>)
            str = va_arg(vl, char*);
 8005aaa:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 8005aae:	f1b9 0f00 	cmp.w	r9, #0
 8005ab2:	bf08      	it	eq
 8005ab4:	4699      	moveq	r9, r3
  int len = strlen(str);
 8005ab6:	4648      	mov	r0, r9
 8005ab8:	f7fa fbfa 	bl	80002b0 <strlen>
  if (specifier->precision) {
 8005abc:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 8005abe:	4607      	mov	r7, r0
  if (specifier->precision) {
 8005ac0:	b113      	cbz	r3, 8005ac8 <vlc_print+0x234>
    len = (len > specifier->precision)?specifier->precision:len;
 8005ac2:	4298      	cmp	r0, r3
 8005ac4:	bfa8      	it	ge
 8005ac6:	461f      	movge	r7, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8005ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aca:	f013 0802 	ands.w	r8, r3, #2
 8005ace:	d018      	beq.n	8005b02 <vlc_print+0x26e>
  int count = 0;
 8005ad0:	2600      	movs	r6, #0
 8005ad2:	464a      	mov	r2, r9
  for (int i = 0; i < len; i++) {
 8005ad4:	eba2 0309 	sub.w	r3, r2, r9
 8005ad8:	429f      	cmp	r7, r3
 8005ada:	dc14      	bgt.n	8005b06 <vlc_print+0x272>
 8005adc:	2f00      	cmp	r7, #0
 8005ade:	bfa8      	it	ge
 8005ae0:	19f6      	addge	r6, r6, r7
  if (specifier->flags & FLAG_NEG_PAD) {
 8005ae2:	f1b8 0f00 	cmp.w	r8, #0
 8005ae6:	d120      	bne.n	8005b2a <vlc_print+0x296>
            count += _write_string(str, &specifier);
 8005ae8:	44b3      	add	fp, r6
            break;
 8005aea:	9a01      	ldr	r2, [sp, #4]
 8005aec:	e6dd      	b.n	80058aa <vlc_print+0x16>
      _WRITE_C(' ');
 8005aee:	3601      	adds	r6, #1
 8005af0:	2120      	movs	r1, #32
 8005af2:	ee18 0a10 	vmov	r0, s16
 8005af6:	47d0      	blx	sl
    for(int i = len; i < specifier->width; i++) {
 8005af8:	19bb      	adds	r3, r7, r6
 8005afa:	9a07      	ldr	r2, [sp, #28]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	dcf6      	bgt.n	8005aee <vlc_print+0x25a>
 8005b00:	e7e7      	b.n	8005ad2 <vlc_print+0x23e>
  int count = 0;
 8005b02:	4646      	mov	r6, r8
 8005b04:	e7f8      	b.n	8005af8 <vlc_print+0x264>
    _WRITE_C(*str++);
 8005b06:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005b0a:	ee18 0a10 	vmov	r0, s16
 8005b0e:	9202      	str	r2, [sp, #8]
 8005b10:	47d0      	blx	sl
 8005b12:	9a02      	ldr	r2, [sp, #8]
  for (int i = 0; i < len; i++) {
 8005b14:	e7de      	b.n	8005ad4 <vlc_print+0x240>
      _WRITE_C(' ');
 8005b16:	3601      	adds	r6, #1
 8005b18:	2120      	movs	r1, #32
 8005b1a:	ee18 0a10 	vmov	r0, s16
 8005b1e:	47d0      	blx	sl
    for(int i = len; i < specifier->width; i++) {
 8005b20:	19bb      	adds	r3, r7, r6
 8005b22:	9a07      	ldr	r2, [sp, #28]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	dcf6      	bgt.n	8005b16 <vlc_print+0x282>
 8005b28:	e7de      	b.n	8005ae8 <vlc_print+0x254>
 8005b2a:	1bbf      	subs	r7, r7, r6
 8005b2c:	e7f8      	b.n	8005b20 <vlc_print+0x28c>
 8005b2e:	b103      	cbz	r3, 8005b32 <vlc_print+0x29e>
 8005b30:	9609      	str	r6, [sp, #36]	; 0x24
 8005b32:	b107      	cbz	r7, 8005b36 <vlc_print+0x2a2>
 8005b34:	9208      	str	r2, [sp, #32]
            specifier.flags |= FLAG_ZERO_EXTEND;
 8005b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b38:	f043 0301 	orr.w	r3, r3, #1
 8005b3c:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.width = 8;
 8005b3e:	2308      	movs	r3, #8
 8005b40:	9307      	str	r3, [sp, #28]
 8005b42:	e77b      	b.n	8005a3c <vlc_print+0x1a8>
 8005b44:	b103      	cbz	r3, 8005b48 <vlc_print+0x2b4>
 8005b46:	9609      	str	r6, [sp, #36]	; 0x24
 8005b48:	b107      	cbz	r7, 8005b4c <vlc_print+0x2b8>
 8005b4a:	9208      	str	r2, [sp, #32]
 8005b4c:	f1bc 0f00 	cmp.w	ip, #0
 8005b50:	d000      	beq.n	8005b54 <vlc_print+0x2c0>
 8005b52:	9007      	str	r0, [sp, #28]
            specifier.flags |= FLAG_IS_SIGNED;
 8005b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
            val = va_arg(vl, unsigned int);
 8005b56:	1d26      	adds	r6, r4, #4
            specifier.flags |= FLAG_IS_SIGNED;
 8005b58:	f043 0304 	orr.w	r3, r3, #4
 8005b5c:	9309      	str	r3, [sp, #36]	; 0x24
                val = va_arg(vl, signed int);
 8005b5e:	6820      	ldr	r0, [r4, #0]
 8005b60:	17c1      	asrs	r1, r0, #31
            count += _write_number(val, &specifier);
 8005b62:	aa07      	add	r2, sp, #28
            break;
 8005b64:	4634      	mov	r4, r6
            count += _write_number(val, &specifier);
 8005b66:	f7ff fdff 	bl	8005768 <_write_number>
 8005b6a:	4483      	add	fp, r0
            break;
 8005b6c:	e7bd      	b.n	8005aea <vlc_print+0x256>
 8005b6e:	b103      	cbz	r3, 8005b72 <vlc_print+0x2de>
 8005b70:	9609      	str	r6, [sp, #36]	; 0x24
 8005b72:	b107      	cbz	r7, 8005b76 <vlc_print+0x2e2>
 8005b74:	9208      	str	r2, [sp, #32]
 8005b76:	f1bc 0f00 	cmp.w	ip, #0
 8005b7a:	d000      	beq.n	8005b7e <vlc_print+0x2ea>
 8005b7c:	9007      	str	r0, [sp, #28]
            dbl = va_arg(vl, double);
 8005b7e:	3407      	adds	r4, #7
            if (specifier.precision == 0)
 8005b80:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 8005b82:	f024 0407 	bic.w	r4, r4, #7
 8005b86:	ecb4 7b02 	vldmia	r4!, {d7}
 8005b8a:	ed8d 7b02 	vstr	d7, [sp, #8]
            if (specifier.precision == 0)
 8005b8e:	b90b      	cbnz	r3, 8005b94 <vlc_print+0x300>
              specifier.precision = 6;
 8005b90:	2306      	movs	r3, #6
 8005b92:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 8005b94:	9e08      	ldr	r6, [sp, #32]
 8005b96:	2700      	movs	r7, #0
  double mul = 1.0;
 8005b98:	f04f 0800 	mov.w	r8, #0
 8005b9c:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8005d5c <vlc_print+0x4c8>
  for (int i=0;i <specifier->precision; i++)
 8005ba0:	42b7      	cmp	r7, r6
    mul *= 10;
 8005ba2:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 8005ba6:	f2c0 80ae 	blt.w	8005d06 <vlc_print+0x472>
  if (is_signed)
 8005baa:	2300      	movs	r3, #0
 8005bac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bb0:	f7fa ffb4 	bl	8000b1c <__aeabi_dcmplt>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	f000 80af 	beq.w	8005d18 <vlc_print+0x484>
    number = -number;
 8005bba:	9b02      	ldr	r3, [sp, #8]
 8005bbc:	9304      	str	r3, [sp, #16]
 8005bbe:	9b03      	ldr	r3, [sp, #12]
 8005bc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005bc4:	9305      	str	r3, [sp, #20]
  number += (half_ / mul);
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	464b      	mov	r3, r9
 8005bca:	2000      	movs	r0, #0
 8005bcc:	4961      	ldr	r1, [pc, #388]	; (8005d54 <vlc_print+0x4c0>)
 8005bce:	f7fa fe5d 	bl	800088c <__aeabi_ddiv>
  uint32_t count = 0;
 8005bd2:	2700      	movs	r7, #0
  number += (half_ / mul);
 8005bd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bd8:	f7fa fb78 	bl	80002cc <__adddf3>
  val = (uint64_t)(number * mul);
 8005bdc:	4642      	mov	r2, r8
 8005bde:	464b      	mov	r3, r9
  uint32_t idx = sizeof(buf) - 1;
 8005be0:	f04f 083f 	mov.w	r8, #63	; 0x3f
  val = (uint64_t)(number * mul);
 8005be4:	f7fa fd28 	bl	8000638 <__aeabi_dmul>
 8005be8:	f7fb f924 	bl	8000e34 <__aeabi_d2ulz>
 8005bec:	4602      	mov	r2, r0
    uint64_t t = val / 10;
 8005bee:	4691      	mov	r9, r2
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	220a      	movs	r2, #10
 8005bf4:	460d      	mov	r5, r1
 8005bf6:	4648      	mov	r0, r9
 8005bf8:	f7fb f904 	bl	8000e04 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8005bfc:	f109 0e30 	add.w	lr, r9, #48	; 0x30
 8005c00:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    uint64_t t = val / 10;
 8005c04:	4602      	mov	r2, r0
    buf[idx--] = chr;
 8005c06:	f108 3cff 	add.w	ip, r8, #4294967295
    chr = (val - t * 10) + '0';
 8005c0a:	ebae 0043 	sub.w	r0, lr, r3, lsl #1
    buf[idx--] = chr;
 8005c0e:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8005c12:	446b      	add	r3, sp
 8005c14:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 8005c18:	1c7b      	adds	r3, r7, #1
    if (count == specifier->precision) {
 8005c1a:	429e      	cmp	r6, r3
      buf[idx--] = '.';
 8005c1c:	bf03      	ittte	eq
 8005c1e:	f10c 0370 	addeq.w	r3, ip, #112	; 0x70
 8005c22:	f1a8 0802 	subeq.w	r8, r8, #2
      count++;
 8005c26:	3702      	addeq	r7, #2
    count++;
 8005c28:	461f      	movne	r7, r3
      buf[idx--] = '.';
 8005c2a:	bf05      	ittet	eq
 8005c2c:	eb0d 0c03 	addeq.w	ip, sp, r3
 8005c30:	232e      	moveq	r3, #46	; 0x2e
    buf[idx--] = chr;
 8005c32:	46e0      	movne	r8, ip
      buf[idx--] = '.';
 8005c34:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
  } while (val);
 8005c38:	f1b9 0f0a 	cmp.w	r9, #10
 8005c3c:	f175 0900 	sbcs.w	r9, r5, #0
 8005c40:	d2d5      	bcs.n	8005bee <vlc_print+0x35a>
    buf[idx--] = '0';
 8005c42:	42b7      	cmp	r7, r6
 8005c44:	f1c6 0001 	rsb	r0, r6, #1
 8005c48:	f04f 0130 	mov.w	r1, #48	; 0x30
 8005c4c:	eba6 0907 	sub.w	r9, r6, r7
 8005c50:	4438      	add	r0, r7
 8005c52:	bf84      	itt	hi
 8005c54:	2001      	movhi	r0, #1
 8005c56:	f04f 0900 	movhi.w	r9, #0
 8005c5a:	eb0d 0301 	add.w	r3, sp, r1
 8005c5e:	4440      	add	r0, r8
 8005c60:	464a      	mov	r2, r9
 8005c62:	4418      	add	r0, r3
 8005c64:	f005 fc81 	bl	800b56a <memset>
 8005c68:	1bbb      	subs	r3, r7, r6
 8005c6a:	42b7      	cmp	r7, r6
 8005c6c:	bf88      	it	hi
 8005c6e:	2300      	movhi	r3, #0
 8005c70:	444f      	add	r7, r9
  if (count == specifier->precision) {
 8005c72:	42be      	cmp	r6, r7
 8005c74:	4498      	add	r8, r3
 8005c76:	f106 0601 	add.w	r6, r6, #1
 8005c7a:	d108      	bne.n	8005c8e <vlc_print+0x3fa>
    buf[idx--] = '.';
 8005c7c:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8005c80:	222e      	movs	r2, #46	; 0x2e
    count++;
 8005c82:	4637      	mov	r7, r6
    buf[idx--] = '.';
 8005c84:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c88:	446b      	add	r3, sp
 8005c8a:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (count == specifier->precision + 1)
 8005c8e:	42be      	cmp	r6, r7
 8005c90:	d108      	bne.n	8005ca4 <vlc_print+0x410>
    buf[idx--] = '0';
 8005c92:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8005c96:	2230      	movs	r2, #48	; 0x30
    count++;
 8005c98:	3701      	adds	r7, #1
    buf[idx--] = '0';
 8005c9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c9e:	446b      	add	r3, sp
 8005ca0:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (is_signed) {
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cac:	f7fa ff36 	bl	8000b1c <__aeabi_dcmplt>
 8005cb0:	b140      	cbz	r0, 8005cc4 <vlc_print+0x430>
    buf[idx--] = '-';
 8005cb2:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8005cb6:	222d      	movs	r2, #45	; 0x2d
    count++;
 8005cb8:	3701      	adds	r7, #1
    buf[idx--] = '-';
 8005cba:	f108 38ff 	add.w	r8, r8, #4294967295
 8005cbe:	446b      	add	r3, sp
 8005cc0:	f803 2c40 	strb.w	r2, [r3, #-64]
  while (count < specifier->width) {
 8005cc4:	9e07      	ldr	r6, [sp, #28]
    buf[idx--] = ' ';
 8005cc6:	ab0c      	add	r3, sp, #48	; 0x30
 8005cc8:	2120      	movs	r1, #32
 8005cca:	42b7      	cmp	r7, r6
 8005ccc:	f1c6 0001 	rsb	r0, r6, #1
 8005cd0:	eba6 0907 	sub.w	r9, r6, r7
 8005cd4:	4438      	add	r0, r7
 8005cd6:	bf84      	itt	hi
 8005cd8:	2001      	movhi	r0, #1
 8005cda:	f04f 0900 	movhi.w	r9, #0
 8005cde:	4440      	add	r0, r8
 8005ce0:	464a      	mov	r2, r9
 8005ce2:	4418      	add	r0, r3
 8005ce4:	f005 fc41 	bl	800b56a <memset>
 8005ce8:	1bbb      	subs	r3, r7, r6
 8005cea:	aa0c      	add	r2, sp, #48	; 0x30
 8005cec:	42b7      	cmp	r7, r6
 8005cee:	bf88      	it	hi
 8005cf0:	2300      	movhi	r3, #0
 8005cf2:	444f      	add	r7, r9
  for(int i = 0; i < count; i++) {
 8005cf4:	4443      	add	r3, r8
 8005cf6:	eb02 0803 	add.w	r8, r2, r3
 8005cfa:	443b      	add	r3, r7
 8005cfc:	189e      	adds	r6, r3, r2
 8005cfe:	4546      	cmp	r6, r8
 8005d00:	d10f      	bne.n	8005d22 <vlc_print+0x48e>
            count += _write_double(dbl, &specifier);
 8005d02:	44bb      	add	fp, r7
            break;
 8005d04:	e6f1      	b.n	8005aea <vlc_print+0x256>
    mul *= 10;
 8005d06:	4640      	mov	r0, r8
 8005d08:	4649      	mov	r1, r9
 8005d0a:	4b13      	ldr	r3, [pc, #76]	; (8005d58 <vlc_print+0x4c4>)
  for (int i=0;i <specifier->precision; i++)
 8005d0c:	3701      	adds	r7, #1
    mul *= 10;
 8005d0e:	f7fa fc93 	bl	8000638 <__aeabi_dmul>
 8005d12:	4680      	mov	r8, r0
 8005d14:	4689      	mov	r9, r1
  for (int i=0;i <specifier->precision; i++)
 8005d16:	e743      	b.n	8005ba0 <vlc_print+0x30c>
 8005d18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005d20:	e751      	b.n	8005bc6 <vlc_print+0x332>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8005d22:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8005d26:	ee18 0a10 	vmov	r0, s16
 8005d2a:	47d0      	blx	sl
  for(int i = 0; i < count; i++) {
 8005d2c:	e7e7      	b.n	8005cfe <vlc_print+0x46a>
        if (!c)
 8005d2e:	f04f 0e01 	mov.w	lr, #1
 8005d32:	e5df      	b.n	80058f4 <vlc_print+0x60>
 8005d34:	b103      	cbz	r3, 8005d38 <vlc_print+0x4a4>
 8005d36:	9609      	str	r6, [sp, #36]	; 0x24
 8005d38:	b107      	cbz	r7, 8005d3c <vlc_print+0x4a8>
 8005d3a:	9208      	str	r2, [sp, #32]
 8005d3c:	f1bc 0f00 	cmp.w	ip, #0
 8005d40:	d000      	beq.n	8005d44 <vlc_print+0x4b0>
 8005d42:	9007      	str	r0, [sp, #28]
            val = va_arg(vl, unsigned int);
 8005d44:	4626      	mov	r6, r4
 8005d46:	2100      	movs	r1, #0
 8005d48:	f856 0b04 	ldr.w	r0, [r6], #4
 8005d4c:	e709      	b.n	8005b62 <vlc_print+0x2ce>
 8005d4e:	bf00      	nop
 8005d50:	0800df50 	.word	0x0800df50
 8005d54:	3fe00000 	.word	0x3fe00000
 8005d58:	40240000 	.word	0x40240000
 8005d5c:	3ff00000 	.word	0x3ff00000

08005d60 <ai_network_get_report>:


AI_API_ENTRY
ai_bool ai_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	460d      	mov	r5, r1
 8005d64:	b0a2      	sub	sp, #136	; 0x88
 8005d66:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005d68:	f001 ff0c 	bl	8007b84 <ai_platform_context_acquire>
 8005d6c:	4604      	mov	r4, r0

  if (report && net_ctx)
 8005d6e:	2d00      	cmp	r5, #0
 8005d70:	d036      	beq.n	8005de0 <ai_network_get_report+0x80>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d031      	beq.n	8005dda <ai_network_get_report+0x7a>
  {
    ai_network_report r = {
 8005d76:	2278      	movs	r2, #120	; 0x78
 8005d78:	2100      	movs	r1, #0
 8005d7a:	a804      	add	r0, sp, #16
 8005d7c:	f005 fbf5 	bl	800b56a <memset>
 8005d80:	4b1b      	ldr	r3, [pc, #108]	; (8005df0 <ai_network_get_report+0x90>)
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	4b1b      	ldr	r3, [pc, #108]	; (8005df4 <ai_network_get_report+0x94>)
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	4b1b      	ldr	r3, [pc, #108]	; (8005df8 <ai_network_get_report+0x98>)
 8005d8a:	9302      	str	r3, [sp, #8]
 8005d8c:	4b1b      	ldr	r3, [pc, #108]	; (8005dfc <ai_network_get_report+0x9c>)
 8005d8e:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005d90:	f001 feac 	bl	8007aec <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8005d94:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8005d96:	f001 fead 	bl	8007af4 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8005d9a:	4b19      	ldr	r3, [pc, #100]	; (8005e00 <ai_network_get_report+0xa0>)
      .runtime_version   = ai_platform_runtime_get_version(),
 8005d9c:	9005      	str	r0, [sp, #20]
    ai_network_report r = {
 8005d9e:	9306      	str	r3, [sp, #24]
 8005da0:	2301      	movs	r3, #1
 8005da2:	f88d 301c 	strb.w	r3, [sp, #28]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8005da6:	f001 febd 	bl	8007b24 <ai_platform_api_get_version>
 8005daa:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8005dac:	f001 fed2 	bl	8007b54 <ai_platform_interface_api_get_version>
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x21dc9eff,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005db0:	4669      	mov	r1, sp
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8005db2:	900a      	str	r0, [sp, #40]	; 0x28
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005db4:	4630      	mov	r0, r6
    ai_network_report r = {
 8005db6:	a30c      	add	r3, pc, #48	; (adr r3, 8005de8 <ai_network_get_report+0x88>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005dc0:	4b10      	ldr	r3, [pc, #64]	; (8005e04 <ai_network_get_report+0xa4>)
 8005dc2:	9311      	str	r3, [sp, #68]	; 0x44
 8005dc4:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <ai_network_get_report+0xa8>)
 8005dc6:	9320      	str	r3, [sp, #128]	; 0x80
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005dc8:	f001 fef6 	bl	8007bb8 <ai_platform_api_get_network_report>
 8005dcc:	4604      	mov	r4, r0
 8005dce:	b120      	cbz	r0, 8005dda <ai_network_get_report+0x7a>

    *report = r;
 8005dd0:	2288      	movs	r2, #136	; 0x88
 8005dd2:	4669      	mov	r1, sp
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	f005 fc6a 	bl	800b6ae <memcpy>
    return true;
  }
  return false;
}
 8005dda:	4620      	mov	r0, r4
 8005ddc:	b022      	add	sp, #136	; 0x88
 8005dde:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8005de0:	462c      	mov	r4, r5
 8005de2:	e7fa      	b.n	8005dda <ai_network_get_report+0x7a>
 8005de4:	f3af 8000 	nop.w
 8005de8:	0075e4d0 	.word	0x0075e4d0
 8005dec:	00000000 	.word	0x00000000
 8005df0:	0800df1c 	.word	0x0800df1c
 8005df4:	0800df57 	.word	0x0800df57
 8005df8:	0800df7a 	.word	0x0800df7a
 8005dfc:	0800df93 	.word	0x0800df93
 8005e00:	080dc7f1 	.word	0x080dc7f1
 8005e04:	a1facade 	.word	0xa1facade
 8005e08:	21dc9eff 	.word	0x21dc9eff

08005e0c <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8005e0c:	f001 bec2 	b.w	8007b94 <ai_platform_network_get_error>

08005e10 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005e10:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8005e12:	2305      	movs	r3, #5
 8005e14:	2200      	movs	r2, #0
 8005e16:	e9cd 3200 	strd	r3, r2, [sp]
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	4a02      	ldr	r2, [pc, #8]	; (8005e28 <ai_network_create+0x18>)
 8005e1e:	f002 f895 	bl	8007f4c <ai_platform_network_create>
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005e22:	b003      	add	sp, #12
 8005e24:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e28:	20003788 	.word	0x20003788

08005e2c <ai_network_destroy>:


AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8005e2c:	f002 b8d0 	b.w	8007fd0 <ai_platform_network_destroy>

08005e30 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e34:	4605      	mov	r5, r0
 8005e36:	460f      	mov	r7, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8005e38:	f002 f8dc 	bl	8007ff4 <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	f000 8436 	beq.w	80066b0 <ai_network_init+0x880>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8005e44:	f8df 83bc 	ldr.w	r8, [pc, #956]	; 8006204 <ai_network_init+0x3d4>
 8005e48:	463a      	mov	r2, r7
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	4640      	mov	r0, r8
 8005e4e:	f001 fd83 	bl	8007958 <ai_platform_get_weights_map>
 8005e52:	4604      	mov	r4, r0
 8005e54:	2800      	cmp	r0, #0
 8005e56:	f000 842d 	beq.w	80066b4 <ai_network_init+0x884>
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e5a:	4ac1      	ldr	r2, [pc, #772]	; (8006160 <ai_network_init+0x330>)
 8005e5c:	6813      	ldr	r3, [r2, #0]
 8005e5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e62:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8005e64:	f8d8 3000 	ldr.w	r3, [r8]
    conv2d_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8005e68:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e6c:	4abd      	ldr	r2, [pc, #756]	; (8006164 <ai_network_init+0x334>)
 8005e6e:	6811      	ldr	r1, [r2, #0]
 8005e70:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e74:	6011      	str	r1, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 864);
 8005e76:	f503 7158 	add.w	r1, r3, #864	; 0x360
    conv2d_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 864);
 8005e7a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e7e:	4aba      	ldr	r2, [pc, #744]	; (8006168 <ai_network_init+0x338>)
 8005e80:	6811      	ldr	r1, [r2, #0]
 8005e82:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e86:	6011      	str	r1, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 896);
 8005e88:	f503 7160 	add.w	r1, r3, #896	; 0x380
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 896);
 8005e8c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e90:	4ab6      	ldr	r2, [pc, #728]	; (800616c <ai_network_init+0x33c>)
 8005e92:	6811      	ldr	r1, [r2, #0]
 8005e94:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e98:	6011      	str	r1, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 1184);
 8005e9a:	f503 6194 	add.w	r1, r3, #1184	; 0x4a0
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1184);
 8005e9e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ea2:	4ab3      	ldr	r2, [pc, #716]	; (8006170 <ai_network_init+0x340>)
 8005ea4:	6811      	ldr	r1, [r2, #0]
 8005ea6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005eaa:	6011      	str	r1, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 1216);
 8005eac:	f503 6198 	add.w	r1, r3, #1216	; 0x4c0
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1216);
 8005eb0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005eb4:	4aaf      	ldr	r2, [pc, #700]	; (8006174 <ai_network_init+0x344>)
 8005eb6:	6811      	ldr	r1, [r2, #0]
 8005eb8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ebc:	6011      	str	r1, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 1728);
 8005ebe:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1728);
 8005ec2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ec6:	4aac      	ldr	r2, [pc, #688]	; (8006178 <ai_network_init+0x348>)
 8005ec8:	6811      	ldr	r1, [r2, #0]
 8005eca:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ece:	6011      	str	r1, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 1792);
 8005ed0:	f503 61e0 	add.w	r1, r3, #1792	; 0x700
    conv2d_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1792);
 8005ed4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ed8:	4aa8      	ldr	r2, [pc, #672]	; (800617c <ai_network_init+0x34c>)
 8005eda:	6811      	ldr	r1, [r2, #0]
 8005edc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ee0:	6011      	str	r1, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 2368);
 8005ee2:	f503 6114 	add.w	r1, r3, #2368	; 0x940
    conv2d_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2368);
 8005ee6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005eea:	4aa5      	ldr	r2, [pc, #660]	; (8006180 <ai_network_init+0x350>)
 8005eec:	6811      	ldr	r1, [r2, #0]
 8005eee:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ef2:	6011      	str	r1, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 2432);
 8005ef4:	f503 6118 	add.w	r1, r3, #2432	; 0x980
    conv2d_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2432);
 8005ef8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005efc:	4aa1      	ldr	r2, [pc, #644]	; (8006184 <ai_network_init+0x354>)
 8005efe:	6811      	ldr	r1, [r2, #0]
 8005f00:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005f04:	6011      	str	r1, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 4480);
 8005f06:	f503 518c 	add.w	r1, r3, #4480	; 0x1180
    conv2d_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 4480);
 8005f0a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f0e:	4a9e      	ldr	r2, [pc, #632]	; (8006188 <ai_network_init+0x358>)
 8005f10:	6811      	ldr	r1, [r2, #0]
 8005f12:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005f16:	6011      	str	r1, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 4608);
 8005f18:	f503 5190 	add.w	r1, r3, #4608	; 0x1200
    conv2d_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 4608);
 8005f1c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f20:	4a9a      	ldr	r2, [pc, #616]	; (800618c <ai_network_init+0x35c>)
 8005f22:	6811      	ldr	r1, [r2, #0]
 8005f24:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005f28:	6011      	str	r1, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 5760);
 8005f2a:	f503 51b4 	add.w	r1, r3, #5760	; 0x1680
    conv2d_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 5760);
 8005f2e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f32:	4a97      	ldr	r2, [pc, #604]	; (8006190 <ai_network_init+0x360>)
 8005f34:	6811      	ldr	r1, [r2, #0]
 8005f36:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005f3a:	6011      	str	r1, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_network_weights_map[0] + 5888);
 8005f3c:	f503 51b8 	add.w	r1, r3, #5888	; 0x1700
    conv2d_6_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 5888);
 8005f40:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f44:	4a93      	ldr	r2, [pc, #588]	; (8006194 <ai_network_init+0x364>)
 8005f46:	6811      	ldr	r1, [r2, #0]
 8005f48:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005f4c:	6011      	str	r1, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_network_weights_map[0] + 9984);
 8005f4e:	f503 511c 	add.w	r1, r3, #9984	; 0x2700
    conv2d_6_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 9984);
 8005f52:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f56:	4a90      	ldr	r2, [pc, #576]	; (8006198 <ai_network_init+0x368>)
 8005f58:	6811      	ldr	r1, [r2, #0]
 8005f5a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005f5e:	6011      	str	r1, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 10112);
 8005f60:	f503 511e 	add.w	r1, r3, #10112	; 0x2780
    conv2d_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 10112);
 8005f64:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f68:	4a8c      	ldr	r2, [pc, #560]	; (800619c <ai_network_init+0x36c>)
 8005f6a:	6811      	ldr	r1, [r2, #0]
 8005f6c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005f70:	6011      	str	r1, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 11264);
 8005f72:	f503 5130 	add.w	r1, r3, #11264	; 0x2c00
    conv2d_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 11264);
 8005f76:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f7a:	4a89      	ldr	r2, [pc, #548]	; (80061a0 <ai_network_init+0x370>)
 8005f7c:	6811      	ldr	r1, [r2, #0]
 8005f7e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005f82:	6011      	str	r1, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_network_weights_map[0] + 11392);
 8005f84:	f503 5132 	add.w	r1, r3, #11392	; 0x2c80
    conv2d_8_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 11392);
 8005f88:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f8c:	4a85      	ldr	r2, [pc, #532]	; (80061a4 <ai_network_init+0x374>)
 8005f8e:	6811      	ldr	r1, [r2, #0]
 8005f90:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005f94:	6011      	str	r1, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(g_network_weights_map[0] + 19584);
 8005f96:	f503 4199 	add.w	r1, r3, #19584	; 0x4c80
    conv2d_8_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 19584);
 8005f9a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f9e:	4a82      	ldr	r2, [pc, #520]	; (80061a8 <ai_network_init+0x378>)
 8005fa0:	6811      	ldr	r1, [r2, #0]
 8005fa2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005fa6:	6011      	str	r1, [r2, #0]
    conv2d_9_weights_array.data = AI_PTR(g_network_weights_map[0] + 19840);
 8005fa8:	f503 419b 	add.w	r1, r3, #19840	; 0x4d80
    conv2d_9_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 19840);
 8005fac:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8005fb0:	4a7e      	ldr	r2, [pc, #504]	; (80061ac <ai_network_init+0x37c>)
 8005fb2:	6811      	ldr	r1, [r2, #0]
 8005fb4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005fb8:	6011      	str	r1, [r2, #0]
    conv2d_9_bias_array.data = AI_PTR(g_network_weights_map[0] + 22144);
 8005fba:	f503 41ad 	add.w	r1, r3, #22144	; 0x5680
    conv2d_9_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 22144);
 8005fbe:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8005fc2:	4a7b      	ldr	r2, [pc, #492]	; (80061b0 <ai_network_init+0x380>)
 8005fc4:	6811      	ldr	r1, [r2, #0]
 8005fc6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005fca:	6011      	str	r1, [r2, #0]
    conv2d_10_weights_array.data = AI_PTR(g_network_weights_map[0] + 22400);
 8005fcc:	f503 41af 	add.w	r1, r3, #22400	; 0x5780
    conv2d_10_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 22400);
 8005fd0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005fd4:	4a77      	ldr	r2, [pc, #476]	; (80061b4 <ai_network_init+0x384>)
 8005fd6:	6811      	ldr	r1, [r2, #0]
 8005fd8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005fdc:	6011      	str	r1, [r2, #0]
    conv2d_10_bias_array.data = AI_PTR(g_network_weights_map[0] + 38784);
 8005fde:	f503 4117 	add.w	r1, r3, #38656	; 0x9700
 8005fe2:	3180      	adds	r1, #128	; 0x80
    conv2d_10_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 38784);
 8005fe4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8005fe8:	4a73      	ldr	r2, [pc, #460]	; (80061b8 <ai_network_init+0x388>)
 8005fea:	6811      	ldr	r1, [r2, #0]
 8005fec:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ff0:	6011      	str	r1, [r2, #0]
    conv2d_11_weights_array.data = AI_PTR(g_network_weights_map[0] + 39040);
 8005ff2:	f503 4118 	add.w	r1, r3, #38912	; 0x9800
 8005ff6:	3180      	adds	r1, #128	; 0x80
    conv2d_11_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 39040);
 8005ff8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ffc:	4a6f      	ldr	r2, [pc, #444]	; (80061bc <ai_network_init+0x38c>)
 8005ffe:	6811      	ldr	r1, [r2, #0]
 8006000:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006004:	6011      	str	r1, [r2, #0]
    conv2d_11_bias_array.data = AI_PTR(g_network_weights_map[0] + 41344);
 8006006:	f503 4121 	add.w	r1, r3, #41216	; 0xa100
 800600a:	3180      	adds	r1, #128	; 0x80
    conv2d_11_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 41344);
 800600c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8006010:	4a6b      	ldr	r2, [pc, #428]	; (80061c0 <ai_network_init+0x390>)
 8006012:	6811      	ldr	r1, [r2, #0]
 8006014:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006018:	6011      	str	r1, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_network_weights_map[0] + 41600);
 800601a:	f503 4122 	add.w	r1, r3, #41472	; 0xa200
 800601e:	3180      	adds	r1, #128	; 0x80
    conv2d_12_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 41600);
 8006020:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8006024:	4a67      	ldr	r2, [pc, #412]	; (80061c4 <ai_network_init+0x394>)
 8006026:	6811      	ldr	r1, [r2, #0]
 8006028:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800602c:	6011      	str	r1, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_network_weights_map[0] + 74368);
 800602e:	f503 3191 	add.w	r1, r3, #74240	; 0x12200
 8006032:	3180      	adds	r1, #128	; 0x80
    conv2d_12_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 74368);
 8006034:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 8006038:	4a63      	ldr	r2, [pc, #396]	; (80061c8 <ai_network_init+0x398>)
 800603a:	6811      	ldr	r1, [r2, #0]
 800603c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006040:	6011      	str	r1, [r2, #0]
    conv2d_13_weights_array.data = AI_PTR(g_network_weights_map[0] + 74880);
 8006042:	f503 3192 	add.w	r1, r3, #74752	; 0x12400
 8006046:	3180      	adds	r1, #128	; 0x80
    conv2d_13_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 74880);
 8006048:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 800604c:	4a5f      	ldr	r2, [pc, #380]	; (80061cc <ai_network_init+0x39c>)
 800604e:	6811      	ldr	r1, [r2, #0]
 8006050:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006054:	6011      	str	r1, [r2, #0]
    conv2d_13_bias_array.data = AI_PTR(g_network_weights_map[0] + 79488);
 8006056:	f503 319b 	add.w	r1, r3, #79360	; 0x13600
 800605a:	3180      	adds	r1, #128	; 0x80
    conv2d_13_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 79488);
 800605c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8006060:	4a5b      	ldr	r2, [pc, #364]	; (80061d0 <ai_network_init+0x3a0>)
 8006062:	6811      	ldr	r1, [r2, #0]
 8006064:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006068:	6011      	str	r1, [r2, #0]
    conv2d_14_weights_array.data = AI_PTR(g_network_weights_map[0] + 80000);
 800606a:	f503 319c 	add.w	r1, r3, #79872	; 0x13800
 800606e:	3180      	adds	r1, #128	; 0x80
    conv2d_14_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 80000);
 8006070:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8006074:	4957      	ldr	r1, [pc, #348]	; (80061d4 <ai_network_init+0x3a4>)
 8006076:	680a      	ldr	r2, [r1, #0]
 8006078:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800607c:	600a      	str	r2, [r1, #0]
    conv2d_14_bias_array.data = AI_PTR(g_network_weights_map[0] + 145536);
 800607e:	f503 320e 	add.w	r2, r3, #145408	; 0x23800
 8006082:	f102 0080 	add.w	r0, r2, #128	; 0x80
    conv2d_15_weights_array.data = AI_PTR(g_network_weights_map[0] + 146048);
 8006086:	f502 7220 	add.w	r2, r2, #640	; 0x280
    conv2d_14_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 145536);
 800608a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 800608e:	4952      	ldr	r1, [pc, #328]	; (80061d8 <ai_network_init+0x3a8>)
 8006090:	6808      	ldr	r0, [r1, #0]
 8006092:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_15_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 146048);
 8006096:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 800609a:	6008      	str	r0, [r1, #0]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 800609c:	494f      	ldr	r1, [pc, #316]	; (80061dc <ai_network_init+0x3ac>)
 800609e:	680a      	ldr	r2, [r1, #0]
 80060a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80060a4:	600a      	str	r2, [r1, #0]
    conv2d_15_bias_array.data = AI_PTR(g_network_weights_map[0] + 150656);
 80060a6:	f503 3213 	add.w	r2, r3, #150528	; 0x24c00
 80060aa:	f102 0080 	add.w	r0, r2, #128	; 0x80
    conv2d_16_weights_array.data = AI_PTR(g_network_weights_map[0] + 151168);
 80060ae:	f502 7220 	add.w	r2, r2, #640	; 0x280
    conv2d_15_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 150656);
 80060b2:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80060b6:	494a      	ldr	r1, [pc, #296]	; (80061e0 <ai_network_init+0x3b0>)
 80060b8:	6808      	ldr	r0, [r1, #0]
    conv2d_16_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 151168);
 80060ba:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80060be:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80060c2:	4a48      	ldr	r2, [pc, #288]	; (80061e4 <ai_network_init+0x3b4>)
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80060c4:	6008      	str	r0, [r1, #0]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80060c6:	6811      	ldr	r1, [r2, #0]
 80060c8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80060cc:	6011      	str	r1, [r2, #0]
    conv2d_16_bias_array.data = AI_PTR(g_network_weights_map[0] + 216704);
 80060ce:	f503 3153 	add.w	r1, r3, #216064	; 0x34c00
 80060d2:	f501 7120 	add.w	r1, r1, #640	; 0x280
    conv2d_16_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 216704);
 80060d6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 80060da:	4a43      	ldr	r2, [pc, #268]	; (80061e8 <ai_network_init+0x3b8>)
 80060dc:	6811      	ldr	r1, [r2, #0]
 80060de:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80060e2:	6011      	str	r1, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(g_network_weights_map[0] + 217216);
 80060e4:	f503 3154 	add.w	r1, r3, #217088	; 0x35000
 80060e8:	3180      	adds	r1, #128	; 0x80
    conv2d_17_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 217216);
 80060ea:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 80060ee:	4a3f      	ldr	r2, [pc, #252]	; (80061ec <ai_network_init+0x3bc>)
 80060f0:	6811      	ldr	r1, [r2, #0]
 80060f2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80060f6:	6011      	str	r1, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_network_weights_map[0] + 221824);
 80060f8:	f503 3158 	add.w	r1, r3, #221184	; 0x36000
 80060fc:	f501 7120 	add.w	r1, r1, #640	; 0x280
    conv2d_17_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 221824);
 8006100:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 8006104:	4a3a      	ldr	r2, [pc, #232]	; (80061f0 <ai_network_init+0x3c0>)
 8006106:	6811      	ldr	r1, [r2, #0]
 8006108:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800610c:	6011      	str	r1, [r2, #0]
    conv2d_18_weights_array.data = AI_PTR(g_network_weights_map[0] + 222336);
 800610e:	f503 3159 	add.w	r1, r3, #222208	; 0x36400
 8006112:	3180      	adds	r1, #128	; 0x80
    conv2d_18_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 222336);
 8006114:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8006118:	4936      	ldr	r1, [pc, #216]	; (80061f4 <ai_network_init+0x3c4>)
 800611a:	680a      	ldr	r2, [r1, #0]
 800611c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006120:	600a      	str	r2, [r1, #0]
    conv2d_18_bias_array.data = AI_PTR(g_network_weights_map[0] + 287872);
 8006122:	f503 228c 	add.w	r2, r3, #286720	; 0x46000
 8006126:	f502 6090 	add.w	r0, r2, #1152	; 0x480
    conv2d_19_weights_array.data = AI_PTR(g_network_weights_map[0] + 288384);
 800612a:	f502 62d0 	add.w	r2, r2, #1664	; 0x680
    conv2d_18_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 287872);
 800612e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 8006132:	4931      	ldr	r1, [pc, #196]	; (80061f8 <ai_network_init+0x3c8>)
 8006134:	6808      	ldr	r0, [r1, #0]
 8006136:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_19_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 288384);
 800613a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 800613e:	6008      	str	r0, [r1, #0]
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8006140:	492e      	ldr	r1, [pc, #184]	; (80061fc <ai_network_init+0x3cc>)
 8006142:	680a      	ldr	r2, [r1, #0]
 8006144:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006148:	600a      	str	r2, [r1, #0]
    conv2d_19_bias_array.data = AI_PTR(g_network_weights_map[0] + 292992);
 800614a:	f503 228f 	add.w	r2, r3, #292864	; 0x47800
 800614e:	f102 0080 	add.w	r0, r2, #128	; 0x80
    conv2d_20_weights_array.data = AI_PTR(g_network_weights_map[0] + 293504);
 8006152:	f502 7220 	add.w	r2, r2, #640	; 0x280
    conv2d_19_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 292992);
 8006156:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800615a:	4929      	ldr	r1, [pc, #164]	; (8006200 <ai_network_init+0x3d0>)
 800615c:	6808      	ldr	r0, [r1, #0]
 800615e:	e053      	b.n	8006208 <ai_network_init+0x3d8>
 8006160:	200020ec 	.word	0x200020ec
 8006164:	20002024 	.word	0x20002024
 8006168:	20002a60 	.word	0x20002a60
 800616c:	200029c4 	.word	0x200029c4
 8006170:	2000317c 	.word	0x2000317c
 8006174:	200030b4 	.word	0x200030b4
 8006178:	20003244 	.word	0x20003244
 800617c:	200031a8 	.word	0x200031a8
 8006180:	20003338 	.word	0x20003338
 8006184:	20003270 	.word	0x20003270
 8006188:	20003400 	.word	0x20003400
 800618c:	20003364 	.word	0x20003364
 8006190:	200034f4 	.word	0x200034f4
 8006194:	2000342c 	.word	0x2000342c
 8006198:	200035bc 	.word	0x200035bc
 800619c:	20003520 	.word	0x20003520
 80061a0:	200036b0 	.word	0x200036b0
 80061a4:	200035e8 	.word	0x200035e8
 80061a8:	20003778 	.word	0x20003778
 80061ac:	200036dc 	.word	0x200036dc
 80061b0:	200021e0 	.word	0x200021e0
 80061b4:	20002118 	.word	0x20002118
 80061b8:	200022a8 	.word	0x200022a8
 80061bc:	2000220c 	.word	0x2000220c
 80061c0:	2000239c 	.word	0x2000239c
 80061c4:	200022d4 	.word	0x200022d4
 80061c8:	20002464 	.word	0x20002464
 80061cc:	200023c8 	.word	0x200023c8
 80061d0:	20002558 	.word	0x20002558
 80061d4:	20002490 	.word	0x20002490
 80061d8:	20002620 	.word	0x20002620
 80061dc:	20002584 	.word	0x20002584
 80061e0:	20002714 	.word	0x20002714
 80061e4:	2000264c 	.word	0x2000264c
 80061e8:	200027dc 	.word	0x200027dc
 80061ec:	20002740 	.word	0x20002740
 80061f0:	200028d0 	.word	0x200028d0
 80061f4:	20002808 	.word	0x20002808
 80061f8:	20002998 	.word	0x20002998
 80061fc:	200028fc 	.word	0x200028fc
 8006200:	20002b54 	.word	0x20002b54
 8006204:	2002aa6c 	.word	0x2002aa6c
 8006208:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_20_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 293504);
 800620c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 8006210:	6008      	str	r0, [r1, #0]
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8006212:	49c7      	ldr	r1, [pc, #796]	; (8006530 <ai_network_init+0x700>)
 8006214:	680a      	ldr	r2, [r1, #0]
 8006216:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800621a:	600a      	str	r2, [r1, #0]
    conv2d_20_bias_array.data = AI_PTR(g_network_weights_map[0] + 359040);
 800621c:	f503 22af 	add.w	r2, r3, #358400	; 0x57800
 8006220:	f502 7020 	add.w	r0, r2, #640	; 0x280
    conv2d_21_weights_array.data = AI_PTR(g_network_weights_map[0] + 359552);
 8006224:	f502 6290 	add.w	r2, r2, #1152	; 0x480
    conv2d_20_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 359040);
 8006228:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 800622c:	49c1      	ldr	r1, [pc, #772]	; (8006534 <ai_network_init+0x704>)
 800622e:	6808      	ldr	r0, [r1, #0]
    conv2d_21_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 359552);
 8006230:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8006234:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 8006238:	4abf      	ldr	r2, [pc, #764]	; (8006538 <ai_network_init+0x708>)
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 800623a:	6008      	str	r0, [r1, #0]
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 800623c:	6811      	ldr	r1, [r2, #0]
 800623e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006242:	6011      	str	r1, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(g_network_weights_map[0] + 364160);
 8006244:	f503 21b1 	add.w	r1, r3, #362496	; 0x58800
 8006248:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
    conv2d_21_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 364160);
 800624c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 8006250:	4aba      	ldr	r2, [pc, #744]	; (800653c <ai_network_init+0x70c>)
 8006252:	6811      	ldr	r1, [r2, #0]
 8006254:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006258:	6011      	str	r1, [r2, #0]
    conv2d_22_weights_array.data = AI_PTR(g_network_weights_map[0] + 364672);
 800625a:	f503 21b2 	add.w	r1, r3, #364544	; 0x59000
 800625e:	3180      	adds	r1, #128	; 0x80
    conv2d_22_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 364672);
 8006260:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8006264:	49b6      	ldr	r1, [pc, #728]	; (8006540 <ai_network_init+0x710>)
 8006266:	680a      	ldr	r2, [r1, #0]
 8006268:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800626c:	600a      	str	r2, [r1, #0]
    conv2d_22_bias_array.data = AI_PTR(g_network_weights_map[0] + 430208);
 800626e:	f503 22d2 	add.w	r2, r3, #430080	; 0x69000
 8006272:	f102 0080 	add.w	r0, r2, #128	; 0x80
    conv2d_23_weights_array.data = AI_PTR(g_network_weights_map[0] + 430720);
 8006276:	f502 7220 	add.w	r2, r2, #640	; 0x280
    conv2d_22_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 430208);
 800627a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 800627e:	49b1      	ldr	r1, [pc, #708]	; (8006544 <ai_network_init+0x714>)
 8006280:	6808      	ldr	r0, [r1, #0]
 8006282:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_23_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 430720);
 8006286:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 800628a:	6008      	str	r0, [r1, #0]
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 800628c:	49ae      	ldr	r1, [pc, #696]	; (8006548 <ai_network_init+0x718>)
 800628e:	680a      	ldr	r2, [r1, #0]
 8006290:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006294:	600a      	str	r2, [r1, #0]
    conv2d_23_bias_array.data = AI_PTR(g_network_weights_map[0] + 435328);
 8006296:	f503 22d4 	add.w	r2, r3, #434176	; 0x6a000
 800629a:	f502 6090 	add.w	r0, r2, #1152	; 0x480
    conv2d_24_weights_array.data = AI_PTR(g_network_weights_map[0] + 435840);
 800629e:	f502 62d0 	add.w	r2, r2, #1664	; 0x680
    conv2d_23_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 435328);
 80062a2:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 80062a6:	49a9      	ldr	r1, [pc, #676]	; (800654c <ai_network_init+0x71c>)
 80062a8:	6808      	ldr	r0, [r1, #0]
    conv2d_24_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 435840);
 80062aa:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 80062ae:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 80062b2:	4aa7      	ldr	r2, [pc, #668]	; (8006550 <ai_network_init+0x720>)
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 80062b4:	6008      	str	r0, [r1, #0]
    conv2d_24_bias_array.data = AI_PTR(g_network_weights_map[0] + 566912);
 80062b6:	f503 200a 	add.w	r0, r3, #565248	; 0x8a000
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 80062ba:	6811      	ldr	r1, [r2, #0]
 80062bc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80062c0:	6011      	str	r1, [r2, #0]
    conv2d_24_bias_array.data = AI_PTR(g_network_weights_map[0] + 566912);
 80062c2:	f500 61d0 	add.w	r1, r0, #1664	; 0x680
    conv2d_25_weights_array.data = AI_PTR(g_network_weights_map[0] + 567936);
 80062c6:	f500 6028 	add.w	r0, r0, #2688	; 0xa80
    conv2d_24_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 566912);
 80062ca:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 80062ce:	4aa1      	ldr	r2, [pc, #644]	; (8006554 <ai_network_init+0x724>)
 80062d0:	6811      	ldr	r1, [r2, #0]
 80062d2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    conv2d_25_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 567936);
 80062d6:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 80062da:	6011      	str	r1, [r2, #0]
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 80062dc:	4a9e      	ldr	r2, [pc, #632]	; (8006558 <ai_network_init+0x728>)
 80062de:	6811      	ldr	r1, [r2, #0]
 80062e0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80062e4:	6011      	str	r1, [r2, #0]
    conv2d_25_bias_array.data = AI_PTR(g_network_weights_map[0] + 577152);
 80062e6:	f503 210c 	add.w	r1, r3, #573440	; 0x8c000
 80062ea:	f501 6168 	add.w	r1, r1, #3712	; 0xe80
    conv2d_25_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 577152);
 80062ee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 80062f2:	4a9a      	ldr	r2, [pc, #616]	; (800655c <ai_network_init+0x72c>)
 80062f4:	6811      	ldr	r1, [r2, #0]
 80062f6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80062fa:	6011      	str	r1, [r2, #0]
    conv2d_26_weights_array.data = AI_PTR(g_network_weights_map[0] + 578176);
 80062fc:	f503 210d 	add.w	r1, r3, #577536	; 0x8d000
    conv2d_26_bias_array.data = AI_PTR(g_network_weights_map[0] + 840320);
 8006300:	f503 234d 	add.w	r3, r3, #839680	; 0xcd000
    conv2d_26_weights_array.data = AI_PTR(g_network_weights_map[0] + 578176);
 8006304:	f501 7120 	add.w	r1, r1, #640	; 0x280
    conv2d_26_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 578176);
 8006308:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 800630c:	4a94      	ldr	r2, [pc, #592]	; (8006560 <ai_network_init+0x730>)
 800630e:	6811      	ldr	r1, [r2, #0]
 8006310:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006314:	6011      	str	r1, [r2, #0]
    conv2d_26_bias_array.data = AI_PTR(g_network_weights_map[0] + 840320);
 8006316:	f503 7120 	add.w	r1, r3, #640	; 0x280
    conv2d_26_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 840320);
 800631a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_29_weights_array.format |= AI_FMT_FLAG_CONST;
 800631e:	4a91      	ldr	r2, [pc, #580]	; (8006564 <ai_network_init+0x734>)
 8006320:	6811      	ldr	r1, [r2, #0]
 8006322:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006326:	6011      	str	r1, [r2, #0]
    gemm_29_weights_array.data = AI_PTR(g_network_weights_map[0] + 841344);
 8006328:	f503 61d0 	add.w	r1, r3, #1664	; 0x680
    gemm_29_bias_array.data = AI_PTR(g_network_weights_map[0] + 843392);
 800632c:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
    gemm_29_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 841344);
 8006330:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8006334:	4a8c      	ldr	r2, [pc, #560]	; (8006568 <ai_network_init+0x738>)
 8006336:	6811      	ldr	r1, [r2, #0]
 8006338:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    gemm_29_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 843392);
 800633c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8006340:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8006342:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8006664 <ai_network_init+0x834>
 8006346:	463a      	mov	r2, r7
 8006348:	2101      	movs	r1, #1
 800634a:	4640      	mov	r0, r8
 800634c:	f001 fb5c 	bl	8007a08 <ai_platform_get_activations_map>
 8006350:	4607      	mov	r7, r0
 8006352:	2800      	cmp	r0, #0
 8006354:	f000 81b4 	beq.w	80066c0 <ai_network_init+0x890>
    input_1_output_array.data = AI_PTR(g_network_activations_map[0] + 8160);
 8006358:	f8d8 3000 	ldr.w	r3, [r8]
 800635c:	4a83      	ldr	r2, [pc, #524]	; (800656c <ai_network_init+0x73c>)
 800635e:	f503 51ff 	add.w	r1, r3, #8160	; 0x1fe0
    nl_0_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 79936);
 8006362:	4883      	ldr	r0, [pc, #524]	; (8006570 <ai_network_init+0x740>)
    conv2d_8_output_array.data = AI_PTR(g_network_activations_map[0] + 18560);
 8006364:	f503 4c91 	add.w	ip, r3, #18560	; 0x4880
    input_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8160);
 8006368:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 118752);
 800636c:	f503 32e7 	add.w	r2, r3, #118272	; 0x1ce00
 8006370:	4980      	ldr	r1, [pc, #512]	; (8006574 <ai_network_init+0x744>)
 8006372:	f502 72f0 	add.w	r2, r2, #480	; 0x1e0
    conv2d_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 118752);
 8006376:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_0_output_array.data = AI_PTR(g_network_activations_map[0] + 6208);
 800637a:	f503 51c2 	add.w	r1, r3, #6208	; 0x1840
 800637e:	4a7e      	ldr	r2, [pc, #504]	; (8006578 <ai_network_init+0x748>)
    conv2d_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 6208);
 8006380:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_0_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 79936);
 8006384:	f503 329c 	add.w	r2, r3, #79872	; 0x13800
 8006388:	3240      	adds	r2, #64	; 0x40
    nl_0_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 79936);
 800638a:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 6208);
 800638e:	487b      	ldr	r0, [pc, #492]	; (800657c <ai_network_init+0x74c>)
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 6208);
 8006390:	e9c0 1102 	strd	r1, r1, [r0, #8]
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 79936);
 8006394:	497a      	ldr	r1, [pc, #488]	; (8006580 <ai_network_init+0x750>)
    nl_3_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 36864);
 8006396:	f503 4010 	add.w	r0, r3, #36864	; 0x9000
    nl_1_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 79936);
 800639a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 153664);
 800639e:	f503 3216 	add.w	r2, r3, #153600	; 0x25800
 80063a2:	4978      	ldr	r1, [pc, #480]	; (8006584 <ai_network_init+0x754>)
 80063a4:	3240      	adds	r2, #64	; 0x40
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 153664);
 80063a6:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 1600);
 80063aa:	f503 62c8 	add.w	r2, r3, #1600	; 0x640
 80063ae:	4976      	ldr	r1, [pc, #472]	; (8006588 <ai_network_init+0x758>)
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1600);
 80063b0:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_2_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 1600);
 80063b4:	4975      	ldr	r1, [pc, #468]	; (800658c <ai_network_init+0x75c>)
    nl_2_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1600);
 80063b6:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_3_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80063ba:	4a75      	ldr	r2, [pc, #468]	; (8006590 <ai_network_init+0x760>)
    conv2d_4_output_array.data = AI_PTR(g_network_activations_map[0] + 73728);
 80063bc:	f503 3190 	add.w	r1, r3, #73728	; 0x12000
    conv2d_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80063c0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_3_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 36864);
 80063c4:	4a73      	ldr	r2, [pc, #460]	; (8006594 <ai_network_init+0x764>)
    conv2d_6_output_array.data = AI_PTR(g_network_activations_map[0] + 73856);
 80063c6:	f101 0680 	add.w	r6, r1, #128	; 0x80
    nl_3_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 36864);
 80063ca:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_4_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80063ce:	4a72      	ldr	r2, [pc, #456]	; (8006598 <ai_network_init+0x768>)
    conv2d_4_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80063d0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_4_output_array.data = AI_PTR(g_network_activations_map[0] + 73728);
 80063d4:	4a71      	ldr	r2, [pc, #452]	; (800659c <ai_network_init+0x76c>)
    conv2d_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 73728);
 80063d6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_4_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80063da:	4a71      	ldr	r2, [pc, #452]	; (80065a0 <ai_network_init+0x770>)
    nl_4_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80063dc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_5_output_array.data = AI_PTR(g_network_activations_map[0] + 73728);
 80063e0:	4a70      	ldr	r2, [pc, #448]	; (80065a4 <ai_network_init+0x774>)
    conv2d_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 73728);
 80063e2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_5_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80063e6:	4a70      	ldr	r2, [pc, #448]	; (80065a8 <ai_network_init+0x778>)
    nl_5_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80063e8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_6_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 73728);
 80063ec:	4a6f      	ldr	r2, [pc, #444]	; (80065ac <ai_network_init+0x77c>)
    conv2d_6_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 73728);
 80063ee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_6_output_array.data = AI_PTR(g_network_activations_map[0] + 73856);
 80063f2:	4a6f      	ldr	r2, [pc, #444]	; (80065b0 <ai_network_init+0x780>)
    conv2d_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 73856);
 80063f4:	e9c2 6602 	strd	r6, r6, [r2, #8]
    nl_6_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80063f8:	4a6e      	ldr	r2, [pc, #440]	; (80065b4 <ai_network_init+0x784>)
    conv2d_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 18432);
 80063fa:	4e6f      	ldr	r6, [pc, #444]	; (80065b8 <ai_network_init+0x788>)
    nl_6_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80063fc:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_7_output_array.data = AI_PTR(g_network_activations_map[0] + 73728);
 8006400:	4a6e      	ldr	r2, [pc, #440]	; (80065bc <ai_network_init+0x78c>)
    conv2d_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 73728);
 8006402:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_7_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006406:	4a6e      	ldr	r2, [pc, #440]	; (80065c0 <ai_network_init+0x790>)
    nl_7_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006408:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_8_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 18432);
 800640c:	f503 4290 	add.w	r2, r3, #18432	; 0x4800
    conv2d_8_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 18432);
 8006410:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_8_output_array.data = AI_PTR(g_network_activations_map[0] + 18560);
 8006414:	4e6b      	ldr	r6, [pc, #428]	; (80065c4 <ai_network_init+0x794>)
    conv2d_8_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18560);
 8006416:	e9c6 cc02 	strd	ip, ip, [r6, #8]
    nl_8_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 55424);
 800641a:	f503 4658 	add.w	r6, r3, #55296	; 0xd800
 800641e:	f8df c248 	ldr.w	ip, [pc, #584]	; 8006668 <ai_network_init+0x838>
 8006422:	3680      	adds	r6, #128	; 0x80
    nl_8_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 55424);
 8006424:	e9cc 6602 	strd	r6, r6, [ip, #8]
    conv2d_9_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006428:	4e67      	ldr	r6, [pc, #412]	; (80065c8 <ai_network_init+0x798>)
    conv2d_12_output_array.data = AI_PTR(g_network_activations_map[0] + 9472);
 800642a:	f503 5c14 	add.w	ip, r3, #9472	; 0x2500
    conv2d_9_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800642e:	e9c6 3302 	strd	r3, r3, [r6, #8]
    nl_9_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 36864);
 8006432:	4e66      	ldr	r6, [pc, #408]	; (80065cc <ai_network_init+0x79c>)
    nl_9_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 36864);
 8006434:	e9c6 0002 	strd	r0, r0, [r6, #8]
    conv2d_10_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006438:	4e65      	ldr	r6, [pc, #404]	; (80065d0 <ai_network_init+0x7a0>)
    conv2d_10_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800643a:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_10_output_array.data = AI_PTR(g_network_activations_map[0] + 73728);
 800643e:	4e65      	ldr	r6, [pc, #404]	; (80065d4 <ai_network_init+0x7a4>)
    conv2d_10_output_array.data_start = AI_PTR(g_network_activations_map[0] + 73728);
 8006440:	e9c6 1102 	strd	r1, r1, [r6, #8]
    nl_10_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006444:	4964      	ldr	r1, [pc, #400]	; (80065d8 <ai_network_init+0x7a8>)
    conv2d_12_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 9216);
 8006446:	f503 5610 	add.w	r6, r3, #9216	; 0x2400
    nl_10_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800644a:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_11_output_array.data = AI_PTR(g_network_activations_map[0] + 36864);
 800644e:	4963      	ldr	r1, [pc, #396]	; (80065dc <ai_network_init+0x7ac>)
    conv2d_11_output_array.data_start = AI_PTR(g_network_activations_map[0] + 36864);
 8006450:	e9c1 0002 	strd	r0, r0, [r1, #8]
    nl_11_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006454:	4962      	ldr	r1, [pc, #392]	; (80065e0 <ai_network_init+0x7b0>)
    nl_11_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006456:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_12_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 9216);
 800645a:	4962      	ldr	r1, [pc, #392]	; (80065e4 <ai_network_init+0x7b4>)
    conv2d_12_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 9216);
 800645c:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_12_output_array.data = AI_PTR(g_network_activations_map[0] + 9472);
 8006460:	4961      	ldr	r1, [pc, #388]	; (80065e8 <ai_network_init+0x7b8>)
    conv2d_12_output_array.data_start = AI_PTR(g_network_activations_map[0] + 9472);
 8006462:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    nl_12_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 27904);
 8006466:	f503 4cda 	add.w	ip, r3, #27904	; 0x6d00
 800646a:	4960      	ldr	r1, [pc, #384]	; (80065ec <ai_network_init+0x7bc>)
    nl_12_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 27904);
 800646c:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_13_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006470:	495f      	ldr	r1, [pc, #380]	; (80065f0 <ai_network_init+0x7c0>)
    conv2d_13_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006472:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_13_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 18432);
 8006476:	495f      	ldr	r1, [pc, #380]	; (80065f4 <ai_network_init+0x7c4>)
    nl_13_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18432);
 8006478:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_14_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800647c:	495e      	ldr	r1, [pc, #376]	; (80065f8 <ai_network_init+0x7c8>)
    conv2d_14_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800647e:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_14_output_array.data = AI_PTR(g_network_activations_map[0] + 36864);
 8006482:	495e      	ldr	r1, [pc, #376]	; (80065fc <ai_network_init+0x7cc>)
    conv2d_14_output_array.data_start = AI_PTR(g_network_activations_map[0] + 36864);
 8006484:	e9c1 0002 	strd	r0, r0, [r1, #8]
    nl_14_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006488:	495d      	ldr	r1, [pc, #372]	; (8006600 <ai_network_init+0x7d0>)
    conv2d_16_output_array.data = AI_PTR(g_network_activations_map[0] + 18944);
 800648a:	485e      	ldr	r0, [pc, #376]	; (8006604 <ai_network_init+0x7d4>)
    nl_14_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800648c:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_15_output_array.data = AI_PTR(g_network_activations_map[0] + 18432);
 8006490:	495d      	ldr	r1, [pc, #372]	; (8006608 <ai_network_init+0x7d8>)
    conv2d_15_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18432);
 8006492:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_15_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006496:	495d      	ldr	r1, [pc, #372]	; (800660c <ai_network_init+0x7dc>)
    nl_15_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006498:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_16_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 18432);
 800649c:	495c      	ldr	r1, [pc, #368]	; (8006610 <ai_network_init+0x7e0>)
    conv2d_16_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 18432);
 800649e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_16_output_array.data = AI_PTR(g_network_activations_map[0] + 18944);
 80064a2:	f503 4194 	add.w	r1, r3, #18944	; 0x4a00
    conv2d_16_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18944);
 80064a6:	e9c0 1102 	strd	r1, r1, [r0, #8]
    nl_16_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80064aa:	485a      	ldr	r0, [pc, #360]	; (8006614 <ai_network_init+0x7e4>)
    nl_16_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80064ac:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_17_output_array.data = AI_PTR(g_network_activations_map[0] + 18432);
 80064b0:	4859      	ldr	r0, [pc, #356]	; (8006618 <ai_network_init+0x7e8>)
    conv2d_17_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18432);
 80064b2:	e9c0 2202 	strd	r2, r2, [r0, #8]
    nl_17_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80064b6:	4859      	ldr	r0, [pc, #356]	; (800661c <ai_network_init+0x7ec>)
    nl_17_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80064b8:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_18_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 18432);
 80064bc:	4858      	ldr	r0, [pc, #352]	; (8006620 <ai_network_init+0x7f0>)
    conv2d_18_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 18432);
 80064be:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_18_output_array.data = AI_PTR(g_network_activations_map[0] + 18944);
 80064c2:	4858      	ldr	r0, [pc, #352]	; (8006624 <ai_network_init+0x7f4>)
    conv2d_18_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18944);
 80064c4:	e9c0 1102 	strd	r1, r1, [r0, #8]
    nl_18_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80064c8:	4857      	ldr	r0, [pc, #348]	; (8006628 <ai_network_init+0x7f8>)
    nl_18_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80064ca:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_19_output_array.data = AI_PTR(g_network_activations_map[0] + 18432);
 80064ce:	4857      	ldr	r0, [pc, #348]	; (800662c <ai_network_init+0x7fc>)
    conv2d_19_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18432);
 80064d0:	e9c0 2202 	strd	r2, r2, [r0, #8]
    nl_19_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80064d4:	4856      	ldr	r0, [pc, #344]	; (8006630 <ai_network_init+0x800>)
    nl_19_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80064d6:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_20_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 18432);
 80064da:	4856      	ldr	r0, [pc, #344]	; (8006634 <ai_network_init+0x804>)
    conv2d_20_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 18432);
 80064dc:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_20_output_array.data = AI_PTR(g_network_activations_map[0] + 18944);
 80064e0:	4855      	ldr	r0, [pc, #340]	; (8006638 <ai_network_init+0x808>)
    conv2d_20_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18944);
 80064e2:	e9c0 1102 	strd	r1, r1, [r0, #8]
    nl_20_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80064e6:	4855      	ldr	r0, [pc, #340]	; (800663c <ai_network_init+0x80c>)
    nl_20_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80064e8:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_21_output_array.data = AI_PTR(g_network_activations_map[0] + 18432);
 80064ec:	4854      	ldr	r0, [pc, #336]	; (8006640 <ai_network_init+0x810>)
    conv2d_21_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18432);
 80064ee:	e9c0 2202 	strd	r2, r2, [r0, #8]
    nl_21_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80064f2:	4854      	ldr	r0, [pc, #336]	; (8006644 <ai_network_init+0x814>)
    nl_21_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80064f4:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_22_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 18432);
 80064f8:	4853      	ldr	r0, [pc, #332]	; (8006648 <ai_network_init+0x818>)
    conv2d_22_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 18432);
 80064fa:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_22_output_array.data = AI_PTR(g_network_activations_map[0] + 18944);
 80064fe:	4853      	ldr	r0, [pc, #332]	; (800664c <ai_network_init+0x81c>)
    conv2d_22_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18944);
 8006500:	e9c0 1102 	strd	r1, r1, [r0, #8]
    nl_22_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006504:	4952      	ldr	r1, [pc, #328]	; (8006650 <ai_network_init+0x820>)
    conv2d_24_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 4608);
 8006506:	f503 5090 	add.w	r0, r3, #4608	; 0x1200
    nl_22_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800650a:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_23_output_array.data = AI_PTR(g_network_activations_map[0] + 18432);
 800650e:	4951      	ldr	r1, [pc, #324]	; (8006654 <ai_network_init+0x824>)
    conv2d_23_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18432);
 8006510:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_23_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006514:	4950      	ldr	r1, [pc, #320]	; (8006658 <ai_network_init+0x828>)
    nl_23_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006516:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_24_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 4608);
 800651a:	4950      	ldr	r1, [pc, #320]	; (800665c <ai_network_init+0x82c>)
    conv2d_24_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 4608);
 800651c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_24_output_array.data = AI_PTR(g_network_activations_map[0] + 5120);
 8006520:	f503 50a0 	add.w	r0, r3, #5120	; 0x1400
 8006524:	494e      	ldr	r1, [pc, #312]	; (8006660 <ai_network_init+0x830>)
    conv2d_24_output_array.data_start = AI_PTR(g_network_activations_map[0] + 5120);
 8006526:	e9c1 0002 	strd	r0, r0, [r1, #8]
    nl_24_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 14336);
 800652a:	f503 5060 	add.w	r0, r3, #14336	; 0x3800
 800652e:	e09d      	b.n	800666c <ai_network_init+0x83c>
 8006530:	20002a8c 	.word	0x20002a8c
 8006534:	20002c1c 	.word	0x20002c1c
 8006538:	20002b80 	.word	0x20002b80
 800653c:	20002d10 	.word	0x20002d10
 8006540:	20002c48 	.word	0x20002c48
 8006544:	20002dd8 	.word	0x20002dd8
 8006548:	20002d3c 	.word	0x20002d3c
 800654c:	20002ecc 	.word	0x20002ecc
 8006550:	20002e04 	.word	0x20002e04
 8006554:	20002f94 	.word	0x20002f94
 8006558:	20002ef8 	.word	0x20002ef8
 800655c:	20003088 	.word	0x20003088
 8006560:	20002fc0 	.word	0x20002fc0
 8006564:	20003864 	.word	0x20003864
 8006568:	200037f0 	.word	0x200037f0
 800656c:	20003890 	.word	0x20003890
 8006570:	200038dc 	.word	0x200038dc
 8006574:	200020c0 	.word	0x200020c0
 8006578:	20002094 	.word	0x20002094
 800657c:	20002a34 	.word	0x20002a34
 8006580:	20003c20 	.word	0x20003c20
 8006584:	20003150 	.word	0x20003150
 8006588:	20003124 	.word	0x20003124
 800658c:	20003e80 	.word	0x20003e80
 8006590:	20003218 	.word	0x20003218
 8006594:	20003f18 	.word	0x20003f18
 8006598:	2000330c 	.word	0x2000330c
 800659c:	200032e0 	.word	0x200032e0
 80065a0:	20003f64 	.word	0x20003f64
 80065a4:	200033d4 	.word	0x200033d4
 80065a8:	20003fb0 	.word	0x20003fb0
 80065ac:	200034c8 	.word	0x200034c8
 80065b0:	2000349c 	.word	0x2000349c
 80065b4:	20003ffc 	.word	0x20003ffc
 80065b8:	20003684 	.word	0x20003684
 80065bc:	20003590 	.word	0x20003590
 80065c0:	20004048 	.word	0x20004048
 80065c4:	20003658 	.word	0x20003658
 80065c8:	2000374c 	.word	0x2000374c
 80065cc:	200040e0 	.word	0x200040e0
 80065d0:	200021b4 	.word	0x200021b4
 80065d4:	20002188 	.word	0x20002188
 80065d8:	20003928 	.word	0x20003928
 80065dc:	2000227c 	.word	0x2000227c
 80065e0:	20003974 	.word	0x20003974
 80065e4:	20002370 	.word	0x20002370
 80065e8:	20002344 	.word	0x20002344
 80065ec:	200039c0 	.word	0x200039c0
 80065f0:	20002438 	.word	0x20002438
 80065f4:	20003a0c 	.word	0x20003a0c
 80065f8:	2000252c 	.word	0x2000252c
 80065fc:	20002500 	.word	0x20002500
 8006600:	20003a58 	.word	0x20003a58
 8006604:	200026bc 	.word	0x200026bc
 8006608:	200025f4 	.word	0x200025f4
 800660c:	20003aa4 	.word	0x20003aa4
 8006610:	200026e8 	.word	0x200026e8
 8006614:	20003af0 	.word	0x20003af0
 8006618:	200027b0 	.word	0x200027b0
 800661c:	20003b3c 	.word	0x20003b3c
 8006620:	200028a4 	.word	0x200028a4
 8006624:	20002878 	.word	0x20002878
 8006628:	20003b88 	.word	0x20003b88
 800662c:	2000296c 	.word	0x2000296c
 8006630:	20003bd4 	.word	0x20003bd4
 8006634:	20002b28 	.word	0x20002b28
 8006638:	20002afc 	.word	0x20002afc
 800663c:	20003c6c 	.word	0x20003c6c
 8006640:	20002bf0 	.word	0x20002bf0
 8006644:	20003cb8 	.word	0x20003cb8
 8006648:	20002ce4 	.word	0x20002ce4
 800664c:	20002cb8 	.word	0x20002cb8
 8006650:	20003d04 	.word	0x20003d04
 8006654:	20002dac 	.word	0x20002dac
 8006658:	20003d50 	.word	0x20003d50
 800665c:	20002ea0 	.word	0x20002ea0
 8006660:	20002e74 	.word	0x20002e74
 8006664:	2002aa68 	.word	0x2002aa68
 8006668:	20004094 	.word	0x20004094
 800666c:	4917      	ldr	r1, [pc, #92]	; (80066cc <ai_network_init+0x89c>)
    nl_24_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 14336);
 800666e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_25_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006672:	4917      	ldr	r1, [pc, #92]	; (80066d0 <ai_network_init+0x8a0>)
    conv2d_25_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006674:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_25_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 9216);
 8006678:	4916      	ldr	r1, [pc, #88]	; (80066d4 <ai_network_init+0x8a4>)
    nl_25_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 9216);
 800667a:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_26_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800667e:	4916      	ldr	r1, [pc, #88]	; (80066d8 <ai_network_init+0x8a8>)
    conv2d_26_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006680:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_26_output_array.data = AI_PTR(g_network_activations_map[0] + 18432);
 8006684:	4915      	ldr	r1, [pc, #84]	; (80066dc <ai_network_init+0x8ac>)
    conv2d_26_output_array.data_start = AI_PTR(g_network_activations_map[0] + 18432);
 8006686:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_26_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800668a:	4a15      	ldr	r2, [pc, #84]	; (80066e0 <ai_network_init+0x8b0>)
    nl_26_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800668c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    pool_27_output_array.data = AI_PTR(g_network_activations_map[0] + 9216);
 8006690:	4a14      	ldr	r2, [pc, #80]	; (80066e4 <ai_network_init+0x8b4>)
    pool_27_output_array.data_start = AI_PTR(g_network_activations_map[0] + 9216);
 8006692:	e9c2 6602 	strd	r6, r6, [r2, #8]
    gemm_29_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006696:	4a14      	ldr	r2, [pc, #80]	; (80066e8 <ai_network_init+0x8b8>)
    gemm_29_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006698:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_30_output_array.data = AI_PTR(g_network_activations_map[0] + 8);
 800669c:	3308      	adds	r3, #8
 800669e:	4a13      	ldr	r2, [pc, #76]	; (80066ec <ai_network_init+0x8bc>)
    nl_30_output_array.data_start = AI_PTR(g_network_activations_map[0] + 8);
 80066a0:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 80066a4:	4628      	mov	r0, r5
 80066a6:	f001 fd65 	bl	8008174 <ai_platform_network_post_init>
 80066aa:	4038      	ands	r0, r7
 80066ac:	4004      	ands	r4, r0
 80066ae:	b2e0      	uxtb	r0, r4

  return ok;
}
 80066b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80066b4:	2212      	movs	r2, #18
 80066b6:	2130      	movs	r1, #48	; 0x30
 80066b8:	4630      	mov	r0, r6
 80066ba:	f001 fa77 	bl	8007bac <ai_platform_network_set_error>
  return false;
 80066be:	e640      	b.n	8006342 <ai_network_init+0x512>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80066c0:	2213      	movs	r2, #19
 80066c2:	2130      	movs	r1, #48	; 0x30
 80066c4:	4630      	mov	r0, r6
 80066c6:	f001 fa71 	bl	8007bac <ai_platform_network_set_error>
  return false;
 80066ca:	e7eb      	b.n	80066a4 <ai_network_init+0x874>
 80066cc:	20003d9c 	.word	0x20003d9c
 80066d0:	20002f68 	.word	0x20002f68
 80066d4:	20003de8 	.word	0x20003de8
 80066d8:	2000305c 	.word	0x2000305c
 80066dc:	20003030 	.word	0x20003030
 80066e0:	20003e34 	.word	0x20003e34
 80066e4:	20004144 	.word	0x20004144
 80066e8:	20003838 	.word	0x20003838
 80066ec:	20003ecc 	.word	0x20003ecc

080066f0 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80066f0:	f001 bd70 	b.w	80081d4 <ai_platform_network_process>

080066f4 <ai_network_forward>:


AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 80066f4:	2200      	movs	r2, #0
 80066f6:	f001 bd6d 	b.w	80081d4 <ai_platform_network_process>
	...

080066fc <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 80066fc:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 80066fe:	4603      	mov	r3, r0
{
 8006700:	b085      	sub	sp, #20
  if (!params) return false;
 8006702:	b170      	cbz	r0, 8006722 <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8006704:	4c08      	ldr	r4, [pc, #32]	; (8006728 <ai_network_data_params_get+0x2c>)
 8006706:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8006708:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 800670a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800670e:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 8006712:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8006716:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800671a:	4629      	mov	r1, r5
 800671c:	4618      	mov	r0, r3
 800671e:	f001 f9cb 	bl	8007ab8 <ai_platform_bind_network_params>
}
 8006722:	b005      	add	sp, #20
 8006724:	bd30      	pop	{r4, r5, pc}
 8006726:	bf00      	nop
 8006728:	0800dea0 	.word	0x0800dea0

0800672c <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 800672c:	2300      	movs	r3, #0
    iter->dest_struct = dest_struct;
 800672e:	e9c0 3202 	strd	r3, r2, [r0, #8]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 8006732:	888b      	ldrh	r3, [r1, #4]
 8006734:	441a      	add	r2, r3
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8006736:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 800673a:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 800673c:	441a      	add	r2, r3
    iter->pos = fields;
 800673e:	e9c0 1100 	strd	r1, r1, [r0]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8006742:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 8006744:	8808      	ldrh	r0, [r1, #0]
}
 8006746:	3800      	subs	r0, #0
 8006748:	bf18      	it	ne
 800674a:	2001      	movne	r0, #1
 800674c:	4770      	bx	lr

0800674e <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 800674e:	6841      	ldr	r1, [r0, #4]
{
 8006750:	4603      	mov	r3, r0

    if (prev_field->tag == 0)
 8006752:	880a      	ldrh	r2, [r1, #0]
{
 8006754:	b570      	push	{r4, r5, r6, lr}
    if (prev_field->tag == 0)
 8006756:	2a00      	cmp	r2, #0
 8006758:	d035      	beq.n	80067c6 <pb_field_iter_next+0x78>
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
    }
    
    iter->pos++;
 800675a:	f101 0210 	add.w	r2, r1, #16
    
    if (iter->pos->tag == 0)
 800675e:	8a0c      	ldrh	r4, [r1, #16]
    iter->pos++;
 8006760:	6042      	str	r2, [r0, #4]
    if (iter->pos->tag == 0)
 8006762:	b92c      	cbnz	r4, 8006770 <pb_field_iter_next+0x22>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 8006764:	68c2      	ldr	r2, [r0, #12]
 8006766:	6801      	ldr	r1, [r0, #0]
 8006768:	f7ff ffe0 	bl	800672c <pb_field_iter_begin>
        return false;
 800676c:	4620      	mov	r0, r4
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
 800676e:	bd70      	pop	{r4, r5, r6, pc}
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8006770:	7888      	ldrb	r0, [r1, #2]
        size_t prev_size = prev_field->data_size;
 8006772:	890a      	ldrh	r2, [r1, #8]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8006774:	f000 0630 	and.w	r6, r0, #48	; 0x30
            iter->pos->data_offset == PB_SIZE_MAX)
 8006778:	8a8c      	ldrh	r4, [r1, #20]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800677a:	2e30      	cmp	r6, #48	; 0x30
 800677c:	d10a      	bne.n	8006794 <pb_field_iter_next+0x46>
 800677e:	7c8d      	ldrb	r5, [r1, #18]
 8006780:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8006784:	2d30      	cmp	r5, #48	; 0x30
 8006786:	d118      	bne.n	80067ba <pb_field_iter_next+0x6c>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 8006788:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800678c:	42ac      	cmp	r4, r5
 800678e:	d114      	bne.n	80067ba <pb_field_iter_next+0x6c>
            return true;
 8006790:	2001      	movs	r0, #1
 8006792:	e7ec      	b.n	800676e <pb_field_iter_next+0x20>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8006794:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 8006798:	2d20      	cmp	r5, #32
 800679a:	d10e      	bne.n	80067ba <pb_field_iter_next+0x6c>
            prev_size *= prev_field->array_size;
 800679c:	8948      	ldrh	r0, [r1, #10]
 800679e:	4342      	muls	r2, r0
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 80067a0:	b916      	cbnz	r6, 80067a8 <pb_field_iter_next+0x5a>
            iter->required_field_index++;
 80067a2:	6898      	ldr	r0, [r3, #8]
 80067a4:	3001      	adds	r0, #1
 80067a6:	6098      	str	r0, [r3, #8]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 80067a8:	4414      	add	r4, r2
 80067aa:	691a      	ldr	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80067ac:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 80067b0:	4422      	add	r2, r4
 80067b2:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80067b4:	440a      	add	r2, r1
 80067b6:	615a      	str	r2, [r3, #20]
        return true;
 80067b8:	e7ea      	b.n	8006790 <pb_field_iter_next+0x42>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 80067ba:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
            prev_size = sizeof(void*);
 80067be:	2880      	cmp	r0, #128	; 0x80
 80067c0:	bf08      	it	eq
 80067c2:	2204      	moveq	r2, #4
 80067c4:	e7ec      	b.n	80067a0 <pb_field_iter_next+0x52>
        return false;
 80067c6:	4610      	mov	r0, r2
 80067c8:	e7d1      	b.n	800676e <pb_field_iter_next+0x20>

080067ca <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 80067ca:	b570      	push	{r4, r5, r6, lr}
 80067cc:	4604      	mov	r4, r0
 80067ce:	460d      	mov	r5, r1
    const pb_field_t *start = iter->pos;
 80067d0:	6846      	ldr	r6, [r0, #4]
    
    do {
        if (iter->pos->tag == tag &&
 80067d2:	6863      	ldr	r3, [r4, #4]
 80067d4:	881a      	ldrh	r2, [r3, #0]
 80067d6:	42aa      	cmp	r2, r5
 80067d8:	d104      	bne.n	80067e4 <pb_field_iter_find+0x1a>
 80067da:	789b      	ldrb	r3, [r3, #2]
 80067dc:	f003 030f 	and.w	r3, r3, #15
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d107      	bne.n	80067f4 <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 80067e4:	4620      	mov	r0, r4
 80067e6:	f7ff ffb2 	bl	800674e <pb_field_iter_next>
    } while (iter->pos != start);
 80067ea:	6863      	ldr	r3, [r4, #4]
 80067ec:	42b3      	cmp	r3, r6
 80067ee:	d1f0      	bne.n	80067d2 <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 80067f0:	2000      	movs	r0, #0
}
 80067f2:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 80067f4:	2001      	movs	r0, #1
 80067f6:	e7fc      	b.n	80067f2 <pb_field_iter_find+0x28>

080067f8 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80067f8:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 80067fa:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 80067fc:	18a3      	adds	r3, r4, r2
 80067fe:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 8006800:	b939      	cbnz	r1, 8006812 <buf_read+0x1a>
        for (i = 0; i < count; i++)
            buf[i] = source[i];
    }
    
    return true;
}
 8006802:	2001      	movs	r0, #1
 8006804:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 8006806:	5ce0      	ldrb	r0, [r4, r3]
 8006808:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 800680a:	3301      	adds	r3, #1
 800680c:	4293      	cmp	r3, r2
 800680e:	d1fa      	bne.n	8006806 <buf_read+0xe>
 8006810:	e7f7      	b.n	8006802 <buf_read+0xa>
 8006812:	2300      	movs	r3, #0
 8006814:	e7fa      	b.n	800680c <buf_read+0x14>

08006816 <pb_field_set_to_default>:
    return false;
}

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 8006816:	b570      	push	{r4, r5, r6, lr}
    pb_type_t type;
    type = iter->pos->type;
 8006818:	6845      	ldr	r5, [r0, #4]
{
 800681a:	b086      	sub	sp, #24
 800681c:	4603      	mov	r3, r0
    type = iter->pos->type;
 800681e:	78aa      	ldrb	r2, [r5, #2]
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8006820:	f002 060f 	and.w	r6, r2, #15
 8006824:	2e08      	cmp	r6, #8
 8006826:	d11e      	bne.n	8006866 <pb_field_set_to_default+0x50>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8006828:	6903      	ldr	r3, [r0, #16]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 800682a:	2600      	movs	r6, #0
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 800682c:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
 800682e:	b90c      	cbnz	r4, 8006834 <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 8006830:	b006      	add	sp, #24
 8006832:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8006834:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8006836:	4668      	mov	r0, sp
 8006838:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800683a:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 800683c:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 800683e:	4629      	mov	r1, r5
 8006840:	f7ff ff74 	bl	800672c <pb_field_iter_begin>
    iter->pData = extension->dest;
 8006844:	6863      	ldr	r3, [r4, #4]
            pb_field_set_to_default(&ext_iter);
 8006846:	4668      	mov	r0, sp
    iter->pData = extension->dest;
 8006848:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 800684a:	f104 030c 	add.w	r3, r4, #12
 800684e:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006850:	78ab      	ldrb	r3, [r5, #2]
 8006852:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006856:	2b80      	cmp	r3, #128	; 0x80
        iter->pData = &extension->dest;
 8006858:	bf04      	itt	eq
 800685a:	1d23      	addeq	r3, r4, #4
 800685c:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 800685e:	f7ff ffda 	bl	8006816 <pb_field_set_to_default>
            ext = ext->next;
 8006862:	68a4      	ldr	r4, [r4, #8]
 8006864:	e7e3      	b.n	800682e <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8006866:	f012 01c0 	ands.w	r1, r2, #192	; 0xc0
 800686a:	d125      	bne.n	80068b8 <pb_field_set_to_default+0xa2>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 800686c:	f002 0030 	and.w	r0, r2, #48	; 0x30
 8006870:	2810      	cmp	r0, #16
 8006872:	d10f      	bne.n	8006894 <pb_field_set_to_default+0x7e>
 8006874:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 8006878:	4282      	cmp	r2, r0
 800687a:	d000      	beq.n	800687e <pb_field_set_to_default+0x68>
            *(bool*)iter->pSize = false;
 800687c:	7011      	strb	r1, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 800687e:	2e07      	cmp	r6, #7
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8006880:	68ec      	ldr	r4, [r5, #12]
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8006882:	6918      	ldr	r0, [r3, #16]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8006884:	d10b      	bne.n	800689e <pb_field_set_to_default+0x88>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8006886:	4601      	mov	r1, r0
 8006888:	4620      	mov	r0, r4
}
 800688a:	b006      	add	sp, #24
 800688c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8006890:	f000 b81a 	b.w	80068c8 <pb_message_set_to_defaults>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006894:	0690      	lsls	r0, r2, #26
 8006896:	d5f2      	bpl.n	800687e <pb_field_set_to_default+0x68>
            *(pb_size_t*)iter->pSize = 0;
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	8019      	strh	r1, [r3, #0]
}
 800689c:	e7c8      	b.n	8006830 <pb_field_set_to_default+0x1a>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 800689e:	892a      	ldrh	r2, [r5, #8]
 80068a0:	4621      	mov	r1, r4
            else if (iter->pos->ptr != NULL)
 80068a2:	b124      	cbz	r4, 80068ae <pb_field_set_to_default+0x98>
}
 80068a4:	b006      	add	sp, #24
 80068a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 80068aa:	f004 bf00 	b.w	800b6ae <memcpy>
}
 80068ae:	b006      	add	sp, #24
 80068b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(iter->pData, 0, iter->pos->data_size);
 80068b4:	f004 be59 	b.w	800b56a <memset>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80068b8:	2980      	cmp	r1, #128	; 0x80
 80068ba:	d1b9      	bne.n	8006830 <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 80068bc:	6900      	ldr	r0, [r0, #16]
 80068be:	2100      	movs	r1, #0
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80068c0:	0692      	lsls	r2, r2, #26
        *(void**)iter->pData = NULL;
 80068c2:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80068c4:	d5b4      	bpl.n	8006830 <pb_field_set_to_default+0x1a>
 80068c6:	e7e7      	b.n	8006898 <pb_field_set_to_default+0x82>

080068c8 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 80068c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80068ca:	460a      	mov	r2, r1
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 80068cc:	4601      	mov	r1, r0
 80068ce:	4668      	mov	r0, sp
 80068d0:	f7ff ff2c 	bl	800672c <pb_field_iter_begin>
 80068d4:	b130      	cbz	r0, 80068e4 <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 80068d6:	4668      	mov	r0, sp
 80068d8:	f7ff ff9d 	bl	8006816 <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 80068dc:	4668      	mov	r0, sp
 80068de:	f7ff ff36 	bl	800674e <pb_field_iter_next>
 80068e2:	e7f7      	b.n	80068d4 <pb_message_set_to_defaults+0xc>
}
 80068e4:	b007      	add	sp, #28
 80068e6:	f85d fb04 	ldr.w	pc, [sp], #4

080068ea <pb_readbyte>:
    if (stream->bytes_left == 0)
 80068ea:	6883      	ldr	r3, [r0, #8]
{
 80068ec:	b510      	push	{r4, lr}
 80068ee:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 80068f0:	b90b      	cbnz	r3, 80068f6 <pb_readbyte+0xc>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80068f2:	2000      	movs	r0, #0
}
 80068f4:	bd10      	pop	{r4, pc}
    if (!stream->callback(stream, buf, 1))
 80068f6:	6803      	ldr	r3, [r0, #0]
 80068f8:	2201      	movs	r2, #1
 80068fa:	4798      	blx	r3
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d0f8      	beq.n	80068f2 <pb_readbyte+0x8>
    stream->bytes_left--;
 8006900:	68a3      	ldr	r3, [r4, #8]
 8006902:	3b01      	subs	r3, #1
 8006904:	60a3      	str	r3, [r4, #8]
    return true;    
 8006906:	e7f5      	b.n	80068f4 <pb_readbyte+0xa>

08006908 <pb_decode_varint32_eof>:
{
 8006908:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800690c:	4688      	mov	r8, r1
    if (!pb_readbyte(stream, &byte))
 800690e:	f10d 0107 	add.w	r1, sp, #7
{
 8006912:	4607      	mov	r7, r0
 8006914:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 8006916:	f7ff ffe8 	bl	80068ea <pb_readbyte>
 800691a:	4606      	mov	r6, r0
 800691c:	b958      	cbnz	r0, 8006936 <pb_decode_varint32_eof+0x2e>
        if (stream->bytes_left == 0)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	b123      	cbz	r3, 800692c <pb_decode_varint32_eof+0x24>
        return false;
 8006922:	2600      	movs	r6, #0
}
 8006924:	4630      	mov	r0, r6
 8006926:	b002      	add	sp, #8
 8006928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (eof)
 800692c:	2c00      	cmp	r4, #0
 800692e:	d0f8      	beq.n	8006922 <pb_decode_varint32_eof+0x1a>
                *eof = true;
 8006930:	2301      	movs	r3, #1
 8006932:	7023      	strb	r3, [r4, #0]
 8006934:	e7f6      	b.n	8006924 <pb_decode_varint32_eof+0x1c>
    if ((byte & 0x80) == 0)
 8006936:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800693a:	f89d 4007 	ldrb.w	r4, [sp, #7]
 800693e:	2b00      	cmp	r3, #0
 8006940:	da21      	bge.n	8006986 <pb_decode_varint32_eof+0x7e>
        result = byte & 0x7F;
 8006942:	f004 047f 	and.w	r4, r4, #127	; 0x7f
        uint_fast8_t bitpos = 7;
 8006946:	2507      	movs	r5, #7
            if (!pb_readbyte(stream, &byte))
 8006948:	f10d 0107 	add.w	r1, sp, #7
 800694c:	4638      	mov	r0, r7
 800694e:	f7ff ffcc 	bl	80068ea <pb_readbyte>
 8006952:	2800      	cmp	r0, #0
 8006954:	d0e5      	beq.n	8006922 <pb_decode_varint32_eof+0x1a>
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8006956:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if (bitpos >= 32)
 800695a:	2d1f      	cmp	r5, #31
 800695c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006960:	d914      	bls.n	800698c <pb_decode_varint32_eof+0x84>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8006962:	2d3f      	cmp	r5, #63	; 0x3f
 8006964:	bf34      	ite	cc
 8006966:	21ff      	movcc	r1, #255	; 0xff
 8006968:	2101      	movcs	r1, #1
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 800696a:	b11a      	cbz	r2, 8006974 <pb_decode_varint32_eof+0x6c>
 800696c:	2c00      	cmp	r4, #0
 800696e:	dad8      	bge.n	8006922 <pb_decode_varint32_eof+0x1a>
 8006970:	4299      	cmp	r1, r3
 8006972:	d1d6      	bne.n	8006922 <pb_decode_varint32_eof+0x1a>
        } while (byte & 0x80);
 8006974:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 8006976:	f105 0507 	add.w	r5, r5, #7
        } while (byte & 0x80);
 800697a:	d4e5      	bmi.n	8006948 <pb_decode_varint32_eof+0x40>
        if (bitpos == 35 && (byte & 0x70) != 0)
 800697c:	2d23      	cmp	r5, #35	; 0x23
 800697e:	d102      	bne.n	8006986 <pb_decode_varint32_eof+0x7e>
 8006980:	f013 0f70 	tst.w	r3, #112	; 0x70
 8006984:	d1cd      	bne.n	8006922 <pb_decode_varint32_eof+0x1a>
   *dest = result;
 8006986:	f8c8 4000 	str.w	r4, [r8]
   return true;
 800698a:	e7cb      	b.n	8006924 <pb_decode_varint32_eof+0x1c>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 800698c:	40aa      	lsls	r2, r5
 800698e:	4314      	orrs	r4, r2
 8006990:	e7f0      	b.n	8006974 <pb_decode_varint32_eof+0x6c>
	...

08006994 <pb_read>:
{
 8006994:	b530      	push	{r4, r5, lr}
 8006996:	4604      	mov	r4, r0
 8006998:	b085      	sub	sp, #20
 800699a:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 800699c:	b9a9      	cbnz	r1, 80069ca <pb_read+0x36>
 800699e:	6802      	ldr	r2, [r0, #0]
 80069a0:	4b11      	ldr	r3, [pc, #68]	; (80069e8 <pb_read+0x54>)
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d011      	beq.n	80069ca <pb_read+0x36>
		while (count > 16)
 80069a6:	2d10      	cmp	r5, #16
 80069a8:	d806      	bhi.n	80069b8 <pb_read+0x24>
		return pb_read(stream, tmp, count);
 80069aa:	462a      	mov	r2, r5
 80069ac:	4669      	mov	r1, sp
 80069ae:	4620      	mov	r0, r4
 80069b0:	f7ff fff0 	bl	8006994 <pb_read>
}
 80069b4:	b005      	add	sp, #20
 80069b6:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 80069b8:	2210      	movs	r2, #16
 80069ba:	4669      	mov	r1, sp
 80069bc:	4620      	mov	r0, r4
 80069be:	f7ff ffe9 	bl	8006994 <pb_read>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d0f6      	beq.n	80069b4 <pb_read+0x20>
			count -= 16;
 80069c6:	3d10      	subs	r5, #16
 80069c8:	e7ed      	b.n	80069a6 <pb_read+0x12>
    if (stream->bytes_left < count)
 80069ca:	68a3      	ldr	r3, [r4, #8]
 80069cc:	42ab      	cmp	r3, r5
 80069ce:	d201      	bcs.n	80069d4 <pb_read+0x40>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80069d0:	2000      	movs	r0, #0
 80069d2:	e7ef      	b.n	80069b4 <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	462a      	mov	r2, r5
 80069d8:	4620      	mov	r0, r4
 80069da:	4798      	blx	r3
 80069dc:	2800      	cmp	r0, #0
 80069de:	d0f7      	beq.n	80069d0 <pb_read+0x3c>
    stream->bytes_left -= count;
 80069e0:	68a3      	ldr	r3, [r4, #8]
 80069e2:	1b5b      	subs	r3, r3, r5
 80069e4:	60a3      	str	r3, [r4, #8]
    return true;
 80069e6:	e7e5      	b.n	80069b4 <pb_read+0x20>
 80069e8:	080067f9 	.word	0x080067f9

080069ec <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 80069ec:	2200      	movs	r2, #0
 80069ee:	f7ff bf8b 	b.w	8006908 <pb_decode_varint32_eof>

080069f2 <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 80069f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069f4:	460f      	mov	r7, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 80069f6:	a901      	add	r1, sp, #4
{
 80069f8:	4606      	mov	r6, r0
 80069fa:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 80069fc:	f7ff fff6 	bl	80069ec <pb_decode_varint32>
 8006a00:	4604      	mov	r4, r0
 8006a02:	b140      	cbz	r0, 8006a16 <pb_dec_fixed_length_bytes+0x24>
        return false;

    if (size > PB_SIZE_MAX)
 8006a04:	9901      	ldr	r1, [sp, #4]
 8006a06:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006a0a:	d210      	bcs.n	8006a2e <pb_dec_fixed_length_bytes+0x3c>
        PB_RETURN_ERROR(stream, "bytes overflow");

    if (size == 0)
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(dest, 0, field->data_size);
 8006a0c:	893a      	ldrh	r2, [r7, #8]
    if (size == 0)
 8006a0e:	b929      	cbnz	r1, 8006a1c <pb_dec_fixed_length_bytes+0x2a>
        memset(dest, 0, field->data_size);
 8006a10:	4628      	mov	r0, r5
 8006a12:	f004 fdaa 	bl	800b56a <memset>

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 8006a16:	4620      	mov	r0, r4
 8006a18:	b003      	add	sp, #12
 8006a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 8006a1c:	428a      	cmp	r2, r1
 8006a1e:	d106      	bne.n	8006a2e <pb_dec_fixed_length_bytes+0x3c>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 8006a20:	4629      	mov	r1, r5
 8006a22:	4630      	mov	r0, r6
}
 8006a24:	b003      	add	sp, #12
 8006a26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 8006a2a:	f7ff bfb3 	b.w	8006994 <pb_read>
        return false;
 8006a2e:	2400      	movs	r4, #0
 8006a30:	e7f1      	b.n	8006a16 <pb_dec_fixed_length_bytes+0x24>

08006a32 <pb_dec_string>:
{
 8006a32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006a36:	460f      	mov	r7, r1
    if (!pb_decode_varint32(stream, &size))
 8006a38:	a901      	add	r1, sp, #4
{
 8006a3a:	4680      	mov	r8, r0
 8006a3c:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 8006a3e:	f7ff ffd5 	bl	80069ec <pb_decode_varint32>
 8006a42:	b198      	cbz	r0, 8006a6c <pb_dec_string+0x3a>
    alloc_size = size + 1;
 8006a44:	9c01      	ldr	r4, [sp, #4]
 8006a46:	2500      	movs	r5, #0
 8006a48:	1c62      	adds	r2, r4, #1
 8006a4a:	d204      	bcs.n	8006a56 <pb_dec_string+0x24>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006a4c:	78bb      	ldrb	r3, [r7, #2]
 8006a4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a52:	2b80      	cmp	r3, #128	; 0x80
 8006a54:	d101      	bne.n	8006a5a <pb_dec_string+0x28>
        return false;
 8006a56:	4628      	mov	r0, r5
 8006a58:	e008      	b.n	8006a6c <pb_dec_string+0x3a>
        if (alloc_size > field->data_size)
 8006a5a:	893b      	ldrh	r3, [r7, #8]
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d3fa      	bcc.n	8006a56 <pb_dec_string+0x24>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 8006a60:	4622      	mov	r2, r4
 8006a62:	4631      	mov	r1, r6
 8006a64:	4640      	mov	r0, r8
 8006a66:	f7ff ff95 	bl	8006994 <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 8006a6a:	5535      	strb	r5, [r6, r4]
}
 8006a6c:	b002      	add	sp, #8
 8006a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006a72 <pb_dec_bytes>:
{
 8006a72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a74:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8006a76:	a901      	add	r1, sp, #4
{
 8006a78:	4606      	mov	r6, r0
 8006a7a:	4614      	mov	r4, r2
    if (!pb_decode_varint32(stream, &size))
 8006a7c:	f7ff ffb6 	bl	80069ec <pb_decode_varint32>
 8006a80:	b1a8      	cbz	r0, 8006aae <pb_dec_bytes+0x3c>
    if (size > PB_SIZE_MAX)
 8006a82:	9a01      	ldr	r2, [sp, #4]
 8006a84:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006a88:	d211      	bcs.n	8006aae <pb_dec_bytes+0x3c>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006a8a:	78ab      	ldrb	r3, [r5, #2]
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8006a8c:	1c91      	adds	r1, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006a8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a92:	2b80      	cmp	r3, #128	; 0x80
 8006a94:	d00b      	beq.n	8006aae <pb_dec_bytes+0x3c>
        if (alloc_size > field->data_size)
 8006a96:	892b      	ldrh	r3, [r5, #8]
 8006a98:	428b      	cmp	r3, r1
 8006a9a:	d308      	bcc.n	8006aae <pb_dec_bytes+0x3c>
    bdest->size = (pb_size_t)size;
 8006a9c:	4621      	mov	r1, r4
    return pb_read(stream, bdest->bytes, size);
 8006a9e:	4630      	mov	r0, r6
    bdest->size = (pb_size_t)size;
 8006aa0:	f821 2b02 	strh.w	r2, [r1], #2
}
 8006aa4:	b002      	add	sp, #8
 8006aa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_read(stream, bdest->bytes, size);
 8006aaa:	f7ff bf73 	b.w	8006994 <pb_read>
}
 8006aae:	2000      	movs	r0, #0
 8006ab0:	b002      	add	sp, #8
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}

08006ab4 <pb_decode_varint>:
{
 8006ab4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint64_t result = 0;
 8006ab8:	2500      	movs	r5, #0
{
 8006aba:	4680      	mov	r8, r0
 8006abc:	460e      	mov	r6, r1
    uint64_t result = 0;
 8006abe:	462f      	mov	r7, r5
    uint_fast8_t bitpos = 0;
 8006ac0:	462c      	mov	r4, r5
        if (!pb_readbyte(stream, &byte))
 8006ac2:	f10d 0107 	add.w	r1, sp, #7
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	f7ff ff0f 	bl	80068ea <pb_readbyte>
 8006acc:	b1d0      	cbz	r0, 8006b04 <pb_decode_varint+0x50>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8006ace:	f89d c007 	ldrb.w	ip, [sp, #7]
 8006ad2:	f1a4 0320 	sub.w	r3, r4, #32
 8006ad6:	f1c4 0120 	rsb	r1, r4, #32
 8006ada:	f00c 027f 	and.w	r2, ip, #127	; 0x7f
    } while (byte & 0x80);
 8006ade:	f01c 0f80 	tst.w	ip, #128	; 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8006ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae6:	fa22 f101 	lsr.w	r1, r2, r1
 8006aea:	fa02 f204 	lsl.w	r2, r2, r4
        bitpos = (uint_fast8_t)(bitpos + 7);
 8006aee:	f104 0407 	add.w	r4, r4, #7
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8006af2:	ea43 0301 	orr.w	r3, r3, r1
 8006af6:	ea45 0502 	orr.w	r5, r5, r2
 8006afa:	ea47 0703 	orr.w	r7, r7, r3
    } while (byte & 0x80);
 8006afe:	d104      	bne.n	8006b0a <pb_decode_varint+0x56>
    *dest = result;
 8006b00:	e9c6 5700 	strd	r5, r7, [r6]
}
 8006b04:	b002      	add	sp, #8
 8006b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (bitpos >= 64)
 8006b0a:	2c46      	cmp	r4, #70	; 0x46
 8006b0c:	d1d9      	bne.n	8006ac2 <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 8006b0e:	2000      	movs	r0, #0
 8006b10:	e7f8      	b.n	8006b04 <pb_decode_varint+0x50>

08006b12 <pb_dec_uvarint>:
{
 8006b12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b14:	460d      	mov	r5, r1
    if (!pb_decode_varint(stream, &value))
 8006b16:	4669      	mov	r1, sp
{
 8006b18:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 8006b1a:	f7ff ffcb 	bl	8006ab4 <pb_decode_varint>
 8006b1e:	b170      	cbz	r0, 8006b3e <pb_dec_uvarint+0x2c>
    if (field->data_size == sizeof(pb_uint64_t))
 8006b20:	892b      	ldrh	r3, [r5, #8]
 8006b22:	2b08      	cmp	r3, #8
 8006b24:	d10d      	bne.n	8006b42 <pb_dec_uvarint+0x30>
        clamped = *(pb_uint64_t*)dest = value;
 8006b26:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006b2a:	e9c4 3200 	strd	r3, r2, [r4]
    if (clamped != value)
 8006b2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b32:	4291      	cmp	r1, r2
 8006b34:	bf08      	it	eq
 8006b36:	4298      	cmpeq	r0, r3
 8006b38:	bf0c      	ite	eq
 8006b3a:	2001      	moveq	r0, #1
 8006b3c:	2000      	movne	r0, #0
}
 8006b3e:	b003      	add	sp, #12
 8006b40:	bd30      	pop	{r4, r5, pc}
    else if (field->data_size == sizeof(uint32_t))
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d103      	bne.n	8006b4e <pb_dec_uvarint+0x3c>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 8006b46:	9b00      	ldr	r3, [sp, #0]
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	e7ef      	b.n	8006b2e <pb_dec_uvarint+0x1c>
    else if (field->data_size == sizeof(uint_least16_t))
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d103      	bne.n	8006b5a <pb_dec_uvarint+0x48>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 8006b52:	9b00      	ldr	r3, [sp, #0]
 8006b54:	8023      	strh	r3, [r4, #0]
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	e7f7      	b.n	8006b4a <pb_dec_uvarint+0x38>
    else if (field->data_size == sizeof(uint_least8_t))
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d104      	bne.n	8006b68 <pb_dec_uvarint+0x56>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 8006b5e:	9b00      	ldr	r3, [sp, #0]
 8006b60:	7023      	strb	r3, [r4, #0]
 8006b62:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8006b66:	e7f0      	b.n	8006b4a <pb_dec_uvarint+0x38>
        return false;
 8006b68:	2000      	movs	r0, #0
 8006b6a:	e7e8      	b.n	8006b3e <pb_dec_uvarint+0x2c>

08006b6c <pb_dec_varint>:
{
 8006b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b6e:	460d      	mov	r5, r1
    if (!pb_decode_varint(stream, &value))
 8006b70:	4669      	mov	r1, sp
{
 8006b72:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 8006b74:	f7ff ff9e 	bl	8006ab4 <pb_decode_varint>
 8006b78:	b130      	cbz	r0, 8006b88 <pb_dec_varint+0x1c>
    if (field->data_size == sizeof(pb_int64_t))
 8006b7a:	892b      	ldrh	r3, [r5, #8]
 8006b7c:	2b08      	cmp	r3, #8
        svalue = (pb_int64_t)value;
 8006b7e:	e9dd 1200 	ldrd	r1, r2, [sp]
    if (field->data_size == sizeof(pb_int64_t))
 8006b82:	d103      	bne.n	8006b8c <pb_dec_varint+0x20>
        clamped = *(pb_int64_t*)dest = svalue;
 8006b84:	e9c4 1200 	strd	r1, r2, [r4]
}
 8006b88:	b003      	add	sp, #12
 8006b8a:	bd30      	pop	{r4, r5, pc}
    else if (field->data_size == sizeof(int32_t))
 8006b8c:	2b04      	cmp	r3, #4
        svalue = (int32_t)value;
 8006b8e:	ea4f 70e1 	mov.w	r0, r1, asr #31
    else if (field->data_size == sizeof(int32_t))
 8006b92:	d109      	bne.n	8006ba8 <pb_dec_varint+0x3c>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 8006b94:	460b      	mov	r3, r1
 8006b96:	4602      	mov	r2, r0
 8006b98:	6021      	str	r1, [r4, #0]
    if (clamped != svalue)
 8006b9a:	4282      	cmp	r2, r0
 8006b9c:	bf08      	it	eq
 8006b9e:	428b      	cmpeq	r3, r1
 8006ba0:	bf0c      	ite	eq
 8006ba2:	2001      	moveq	r0, #1
 8006ba4:	2000      	movne	r0, #0
 8006ba6:	e7ef      	b.n	8006b88 <pb_dec_varint+0x1c>
    else if (field->data_size == sizeof(int_least16_t))
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d103      	bne.n	8006bb4 <pb_dec_varint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 8006bac:	b20b      	sxth	r3, r1
 8006bae:	8023      	strh	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8006bb0:	17da      	asrs	r2, r3, #31
 8006bb2:	e7f2      	b.n	8006b9a <pb_dec_varint+0x2e>
    else if (field->data_size == sizeof(int_least8_t))
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d102      	bne.n	8006bbe <pb_dec_varint+0x52>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8006bb8:	b24b      	sxtb	r3, r1
 8006bba:	7023      	strb	r3, [r4, #0]
 8006bbc:	e7f8      	b.n	8006bb0 <pb_dec_varint+0x44>
        return false;
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	e7e2      	b.n	8006b88 <pb_dec_varint+0x1c>

08006bc2 <pb_decode_tag>:
{
 8006bc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bc4:	461d      	mov	r5, r3
    *eof = false;
 8006bc6:	2300      	movs	r3, #0
{
 8006bc8:	460e      	mov	r6, r1
 8006bca:	4617      	mov	r7, r2
    *eof = false;
 8006bcc:	702b      	strb	r3, [r5, #0]
    *wire_type = (pb_wire_type_t) 0;
 8006bce:	700b      	strb	r3, [r1, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8006bd0:	a901      	add	r1, sp, #4
    *tag = 0;
 8006bd2:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8006bd4:	462a      	mov	r2, r5
 8006bd6:	f7ff fe97 	bl	8006908 <pb_decode_varint32_eof>
 8006bda:	b120      	cbz	r0, 8006be6 <pb_decode_tag+0x24>
    if (temp == 0)
 8006bdc:	9c01      	ldr	r4, [sp, #4]
 8006bde:	b924      	cbnz	r4, 8006bea <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 8006be0:	2301      	movs	r3, #1
        return false;
 8006be2:	4620      	mov	r0, r4
        *eof = true; /* Special feature: allow 0-terminated messages. */
 8006be4:	702b      	strb	r3, [r5, #0]
}
 8006be6:	b003      	add	sp, #12
 8006be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *tag = temp >> 3;
 8006bea:	08e3      	lsrs	r3, r4, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 8006bec:	f004 0407 	and.w	r4, r4, #7
    *tag = temp >> 3;
 8006bf0:	603b      	str	r3, [r7, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8006bf2:	7034      	strb	r4, [r6, #0]
    return true;
 8006bf4:	e7f7      	b.n	8006be6 <pb_decode_tag+0x24>

08006bf6 <pb_skip_field>:
{
 8006bf6:	b513      	push	{r0, r1, r4, lr}
 8006bf8:	4604      	mov	r4, r0
    switch (wire_type)
 8006bfa:	2905      	cmp	r1, #5
 8006bfc:	d821      	bhi.n	8006c42 <pb_skip_field+0x4c>
 8006bfe:	e8df f001 	tbb	[pc, r1]
 8006c02:	0f03      	.short	0x0f03
 8006c04:	1e202017 	.word	0x1e202017
        if (!pb_read(stream, &byte, 1))
 8006c08:	2201      	movs	r2, #1
 8006c0a:	a901      	add	r1, sp, #4
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f7ff fec1 	bl	8006994 <pb_read>
 8006c12:	b118      	cbz	r0, 8006c1c <pb_skip_field+0x26>
    } while (byte & 0x80);
 8006c14:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	dbf5      	blt.n	8006c08 <pb_skip_field+0x12>
}
 8006c1c:	b002      	add	sp, #8
 8006c1e:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8006c20:	2208      	movs	r2, #8
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8006c22:	2100      	movs	r1, #0
 8006c24:	4620      	mov	r0, r4
}
 8006c26:	b002      	add	sp, #8
 8006c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8006c2c:	f7ff beb2 	b.w	8006994 <pb_read>
    if (!pb_decode_varint32(stream, &length))
 8006c30:	a901      	add	r1, sp, #4
 8006c32:	f7ff fedb 	bl	80069ec <pb_decode_varint32>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d0f0      	beq.n	8006c1c <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 8006c3a:	9a01      	ldr	r2, [sp, #4]
 8006c3c:	e7f1      	b.n	8006c22 <pb_skip_field+0x2c>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8006c3e:	2204      	movs	r2, #4
 8006c40:	e7ef      	b.n	8006c22 <pb_skip_field+0x2c>
    switch (wire_type)
 8006c42:	2000      	movs	r0, #0
 8006c44:	e7ea      	b.n	8006c1c <pb_skip_field+0x26>

08006c46 <pb_make_string_substream>:
{
 8006c46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c48:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8006c4a:	a901      	add	r1, sp, #4
{
 8006c4c:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 8006c4e:	f7ff fecd 	bl	80069ec <pb_decode_varint32>
 8006c52:	4603      	mov	r3, r0
 8006c54:	b918      	cbnz	r0, 8006c5e <pb_make_string_substream+0x18>
        return false;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	b003      	add	sp, #12
 8006c5c:	bd30      	pop	{r4, r5, pc}
    *substream = *stream;
 8006c5e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006c62:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (substream->bytes_left < size)
 8006c66:	9901      	ldr	r1, [sp, #4]
 8006c68:	428a      	cmp	r2, r1
 8006c6a:	d3f4      	bcc.n	8006c56 <pb_make_string_substream+0x10>
    substream->bytes_left = size;
 8006c6c:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 8006c6e:	68a2      	ldr	r2, [r4, #8]
 8006c70:	1a52      	subs	r2, r2, r1
 8006c72:	60a2      	str	r2, [r4, #8]
    return true;
 8006c74:	e7f0      	b.n	8006c58 <pb_make_string_substream+0x12>

08006c76 <pb_close_string_substream>:
    if (substream->bytes_left) {
 8006c76:	688a      	ldr	r2, [r1, #8]
{
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 8006c7e:	b91a      	cbnz	r2, 8006c88 <pb_close_string_substream+0x12>
    stream->state = substream->state;
 8006c80:	6863      	ldr	r3, [r4, #4]
    return true;
 8006c82:	2001      	movs	r0, #1
    stream->state = substream->state;
 8006c84:	606b      	str	r3, [r5, #4]
}
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f7ff fe82 	bl	8006994 <pb_read>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d1f5      	bne.n	8006c80 <pb_close_string_substream+0xa>
 8006c94:	e7f7      	b.n	8006c86 <pb_close_string_substream+0x10>
	...

08006c98 <decode_field>:
{
 8006c98:	460b      	mov	r3, r1
    switch (PB_ATYPE(iter->pos->type))
 8006c9a:	6851      	ldr	r1, [r2, #4]
{
 8006c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ca0:	4615      	mov	r5, r2
    switch (PB_ATYPE(iter->pos->type))
 8006ca2:	788a      	ldrb	r2, [r1, #2]
{
 8006ca4:	b087      	sub	sp, #28
 8006ca6:	4606      	mov	r6, r0
    switch (PB_ATYPE(iter->pos->type))
 8006ca8:	f012 04c0 	ands.w	r4, r2, #192	; 0xc0
 8006cac:	d003      	beq.n	8006cb6 <decode_field+0x1e>
 8006cae:	2c40      	cmp	r4, #64	; 0x40
 8006cb0:	d070      	beq.n	8006d94 <decode_field+0xfc>
                    PB_RETURN_ERROR(stream, "array overflow");
 8006cb2:	2400      	movs	r4, #0
 8006cb4:	e00c      	b.n	8006cd0 <decode_field+0x38>
    func = PB_DECODERS[PB_LTYPE(type)];
 8006cb6:	f002 0c0f 	and.w	ip, r2, #15
 8006cba:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8006cbe:	4f61      	ldr	r7, [pc, #388]	; (8006e44 <decode_field+0x1ac>)
    switch (PB_HTYPE(type))
 8006cc0:	2a20      	cmp	r2, #32
    func = PB_DECODERS[PB_LTYPE(type)];
 8006cc2:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
    switch (PB_HTYPE(type))
 8006cc6:	d02a      	beq.n	8006d1e <decode_field+0x86>
 8006cc8:	d806      	bhi.n	8006cd8 <decode_field+0x40>
 8006cca:	b1d2      	cbz	r2, 8006d02 <decode_field+0x6a>
 8006ccc:	2a10      	cmp	r2, #16
 8006cce:	d01e      	beq.n	8006d0e <decode_field+0x76>
}
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	b007      	add	sp, #28
 8006cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch (PB_HTYPE(type))
 8006cd8:	2a30      	cmp	r2, #48	; 0x30
 8006cda:	d1f9      	bne.n	8006cd0 <decode_field+0x38>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8006cdc:	880a      	ldrh	r2, [r1, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8006cde:	f1bc 0f07 	cmp.w	ip, #7
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8006ce2:	696b      	ldr	r3, [r5, #20]
 8006ce4:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8006ce6:	d109      	bne.n	8006cfc <decode_field+0x64>
                memset(iter->pData, 0, iter->pos->data_size);
 8006ce8:	890a      	ldrh	r2, [r1, #8]
 8006cea:	4621      	mov	r1, r4
 8006cec:	6928      	ldr	r0, [r5, #16]
 8006cee:	f004 fc3c 	bl	800b56a <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 8006cf2:	686b      	ldr	r3, [r5, #4]
 8006cf4:	6929      	ldr	r1, [r5, #16]
 8006cf6:	68d8      	ldr	r0, [r3, #12]
 8006cf8:	f7ff fde6 	bl	80068c8 <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 8006cfc:	692a      	ldr	r2, [r5, #16]
 8006cfe:	6869      	ldr	r1, [r5, #4]
 8006d00:	e00b      	b.n	8006d1a <decode_field+0x82>
            return func(stream, iter->pos, iter->pData);
 8006d02:	692a      	ldr	r2, [r5, #16]
            return func(stream, iter->pos, iter->pData);
 8006d04:	463b      	mov	r3, r7
}
 8006d06:	b007      	add	sp, #28
 8006d08:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return func(stream, iter->pos, iter->pData);
 8006d0c:	4718      	bx	r3
            if (iter->pSize != iter->pData)
 8006d0e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8006d12:	4293      	cmp	r3, r2
                *(bool*)iter->pSize = true;
 8006d14:	bf1c      	itt	ne
 8006d16:	2001      	movne	r0, #1
 8006d18:	7018      	strbne	r0, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	e7f2      	b.n	8006d04 <decode_field+0x6c>
            if (wire_type == PB_WT_STRING
 8006d1e:	2b02      	cmp	r3, #2
            if (iter->pSize != iter->pData)
 8006d20:	f8d5 8014 	ldr.w	r8, [r5, #20]
            if (wire_type == PB_WT_STRING
 8006d24:	d129      	bne.n	8006d7a <decode_field+0xe2>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8006d26:	f1bc 0f04 	cmp.w	ip, #4
 8006d2a:	d826      	bhi.n	8006d7a <decode_field+0xe2>
                if (!pb_make_string_substream(stream, &substream))
 8006d2c:	a903      	add	r1, sp, #12
 8006d2e:	f7ff ff8a 	bl	8006c46 <pb_make_string_substream>
 8006d32:	4604      	mov	r4, r0
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d0bc      	beq.n	8006cb2 <decode_field+0x1a>
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 8006d38:	9b05      	ldr	r3, [sp, #20]
 8006d3a:	b12b      	cbz	r3, 8006d48 <decode_field+0xb0>
 8006d3c:	6869      	ldr	r1, [r5, #4]
 8006d3e:	f8b8 3000 	ldrh.w	r3, [r8]
 8006d42:	894a      	ldrh	r2, [r1, #10]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d809      	bhi.n	8006d5c <decode_field+0xc4>
                if (substream.bytes_left != 0)
 8006d48:	9b05      	ldr	r3, [sp, #20]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1b1      	bne.n	8006cb2 <decode_field+0x1a>
                if (!pb_close_string_substream(stream, &substream))
 8006d4e:	a903      	add	r1, sp, #12
 8006d50:	4630      	mov	r0, r6
 8006d52:	f7ff ff90 	bl	8006c76 <pb_close_string_substream>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d1ba      	bne.n	8006cd0 <decode_field+0x38>
 8006d5a:	e7aa      	b.n	8006cb2 <decode_field+0x1a>
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8006d5c:	8908      	ldrh	r0, [r1, #8]
 8006d5e:	692a      	ldr	r2, [r5, #16]
                    if (!func(&substream, iter->pos, pItem))
 8006d60:	fb03 2200 	mla	r2, r3, r0, r2
 8006d64:	a803      	add	r0, sp, #12
 8006d66:	47b8      	blx	r7
 8006d68:	b128      	cbz	r0, 8006d76 <decode_field+0xde>
                    (*size)++;
 8006d6a:	f8b8 3000 	ldrh.w	r3, [r8]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	f8a8 3000 	strh.w	r3, [r8]
 8006d74:	e7e0      	b.n	8006d38 <decode_field+0xa0>
                        status = false;
 8006d76:	4604      	mov	r4, r0
 8006d78:	e7e6      	b.n	8006d48 <decode_field+0xb0>
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8006d7a:	f8b8 3000 	ldrh.w	r3, [r8]
 8006d7e:	692a      	ldr	r2, [r5, #16]
                if ((*size)++ >= iter->pos->array_size)
 8006d80:	1c5c      	adds	r4, r3, #1
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8006d82:	8908      	ldrh	r0, [r1, #8]
                if ((*size)++ >= iter->pos->array_size)
 8006d84:	f8a8 4000 	strh.w	r4, [r8]
 8006d88:	894c      	ldrh	r4, [r1, #10]
 8006d8a:	429c      	cmp	r4, r3
 8006d8c:	d991      	bls.n	8006cb2 <decode_field+0x1a>
                return func(stream, iter->pos, pItem);
 8006d8e:	fb03 2200 	mla	r2, r3, r0, r2
 8006d92:	e7c2      	b.n	8006d1a <decode_field+0x82>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 8006d94:	692f      	ldr	r7, [r5, #16]
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 8006d96:	b10f      	cbz	r7, 8006d9c <decode_field+0x104>
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	b932      	cbnz	r2, 8006daa <decode_field+0x112>
        return pb_skip_field(stream, wire_type);
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4630      	mov	r0, r6
}
 8006da0:	b007      	add	sp, #28
 8006da2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return pb_skip_field(stream, wire_type);
 8006da6:	f7ff bf26 	b.w	8006bf6 <pb_skip_field>
    if (wire_type == PB_WT_STRING)
 8006daa:	2b02      	cmp	r3, #2
    void **arg = &(pCallback->arg);
 8006dac:	f107 0804 	add.w	r8, r7, #4
    if (wire_type == PB_WT_STRING)
 8006db0:	d116      	bne.n	8006de0 <decode_field+0x148>
        if (!pb_make_string_substream(stream, &substream))
 8006db2:	a903      	add	r1, sp, #12
 8006db4:	f7ff ff47 	bl	8006c46 <pb_make_string_substream>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	f43f af7a 	beq.w	8006cb2 <decode_field+0x1a>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	6869      	ldr	r1, [r5, #4]
 8006dc4:	a803      	add	r0, sp, #12
 8006dc6:	4798      	blx	r3
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	f43f af72 	beq.w	8006cb2 <decode_field+0x1a>
        } while (substream.bytes_left);
 8006dce:	9b05      	ldr	r3, [sp, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1f4      	bne.n	8006dbe <decode_field+0x126>
        if (!pb_close_string_substream(stream, &substream))
 8006dd4:	a903      	add	r1, sp, #12
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f7ff ff4d 	bl	8006c76 <pb_close_string_substream>
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8006ddc:	4604      	mov	r4, r0
 8006dde:	e777      	b.n	8006cd0 <decode_field+0x38>
    switch (wire_type)
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d021      	beq.n	8006e28 <decode_field+0x190>
 8006de4:	2b05      	cmp	r3, #5
 8006de6:	d027      	beq.n	8006e38 <decode_field+0x1a0>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f47f af62 	bne.w	8006cb2 <decode_field+0x1a>
 8006dee:	461c      	mov	r4, r3
 8006df0:	46e9      	mov	r9, sp
                (*size)++;
 8006df2:	3401      	adds	r4, #1
                if (*size > max_size) return false;
 8006df4:	2c0b      	cmp	r4, #11
 8006df6:	f43f af5c 	beq.w	8006cb2 <decode_field+0x1a>
                if (!pb_read(stream, buf, 1)) return false;
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	4630      	mov	r0, r6
 8006e00:	f7ff fdc8 	bl	8006994 <pb_read>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	f43f af54 	beq.w	8006cb2 <decode_field+0x1a>
            } while (*buf++ & 0x80);
 8006e0a:	f919 3b01 	ldrsb.w	r3, [r9], #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	dbef      	blt.n	8006df2 <decode_field+0x15a>
        substream = pb_istream_from_buffer(buffer, size);
 8006e12:	4b0d      	ldr	r3, [pc, #52]	; (8006e48 <decode_field+0x1b0>)
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8006e14:	4642      	mov	r2, r8
 8006e16:	6869      	ldr	r1, [r5, #4]
 8006e18:	a803      	add	r0, sp, #12
        substream = pb_istream_from_buffer(buffer, size);
 8006e1a:	9303      	str	r3, [sp, #12]
 8006e1c:	f8cd d010 	str.w	sp, [sp, #16]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8006e20:	683b      	ldr	r3, [r7, #0]
        substream = pb_istream_from_buffer(buffer, size);
 8006e22:	9405      	str	r4, [sp, #20]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8006e24:	4798      	blx	r3
 8006e26:	e7d9      	b.n	8006ddc <decode_field+0x144>
            *size = 8;
 8006e28:	2408      	movs	r4, #8
            return pb_read(stream, buf, 8);
 8006e2a:	2208      	movs	r2, #8
 8006e2c:	4669      	mov	r1, sp
 8006e2e:	f7ff fdb1 	bl	8006994 <pb_read>
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d1ed      	bne.n	8006e12 <decode_field+0x17a>
 8006e36:	e73c      	b.n	8006cb2 <decode_field+0x1a>
            return pb_read(stream, buf, 4);
 8006e38:	2204      	movs	r2, #4
 8006e3a:	4669      	mov	r1, sp
            *size = 4;
 8006e3c:	2404      	movs	r4, #4
            return pb_read(stream, buf, 4);
 8006e3e:	f7ff fda9 	bl	8006994 <pb_read>
 8006e42:	e7f6      	b.n	8006e32 <decode_field+0x19a>
 8006e44:	080dc008 	.word	0x080dc008
 8006e48:	080067f9 	.word	0x080067f9

08006e4c <pb_decode_noinit>:
{
 8006e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8006e50:	2400      	movs	r4, #0
{
 8006e52:	b091      	sub	sp, #68	; 0x44
 8006e54:	4605      	mov	r5, r0
    uint32_t extension_range_start = 0;
 8006e56:	46a0      	mov	r8, r4
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8006e58:	a804      	add	r0, sp, #16
    pb_size_t fixed_count_size = 0;
 8006e5a:	f8ad 4002 	strh.w	r4, [sp, #2]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8006e5e:	e9cd 4402 	strd	r4, r4, [sp, #8]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8006e62:	f7ff fc63 	bl	800672c <pb_field_iter_begin>
    while (stream->bytes_left)
 8006e66:	68ab      	ldr	r3, [r5, #8]
 8006e68:	b9e3      	cbnz	r3, 8006ea4 <pb_decode_noinit+0x58>
    if (fixed_count_field != NULL &&
 8006e6a:	b124      	cbz	r4, 8006e76 <pb_decode_noinit+0x2a>
 8006e6c:	8962      	ldrh	r2, [r4, #10]
 8006e6e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d122      	bne.n	8006ebc <pb_decode_noinit+0x70>
        } while (pb_field_iter_next(&iter));
 8006e76:	a804      	add	r0, sp, #16
            last_type = iter.pos->type;
 8006e78:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
 8006e7c:	789d      	ldrb	r5, [r3, #2]
        } while (pb_field_iter_next(&iter));
 8006e7e:	f7ff fc66 	bl	800674e <pb_field_iter_next>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d1f7      	bne.n	8006e76 <pb_decode_noinit+0x2a>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 8006e86:	f015 0f30 	tst.w	r5, #48	; 0x30
 8006e8a:	d103      	bne.n	8006e94 <pb_decode_noinit+0x48>
 8006e8c:	9b05      	ldr	r3, [sp, #20]
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b103      	cbz	r3, 8006e94 <pb_decode_noinit+0x48>
            req_field_count++;
 8006e92:	3401      	adds	r4, #1
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8006e94:	2c40      	cmp	r4, #64	; 0x40
 8006e96:	f200 80bb 	bhi.w	8007010 <pb_decode_noinit+0x1c4>
        if (req_field_count > 0)
 8006e9a:	2c00      	cmp	r4, #0
 8006e9c:	f040 80b9 	bne.w	8007012 <pb_decode_noinit+0x1c6>
    return true;
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	e00c      	b.n	8006ebe <pb_decode_noinit+0x72>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8006ea4:	f10d 0301 	add.w	r3, sp, #1
 8006ea8:	aa01      	add	r2, sp, #4
 8006eaa:	4669      	mov	r1, sp
 8006eac:	4628      	mov	r0, r5
 8006eae:	f7ff fe88 	bl	8006bc2 <pb_decode_tag>
 8006eb2:	b938      	cbnz	r0, 8006ec4 <pb_decode_noinit+0x78>
            if (eof)
 8006eb4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1d6      	bne.n	8006e6a <pb_decode_noinit+0x1e>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8006ebc:	2000      	movs	r0, #0
}
 8006ebe:	b011      	add	sp, #68	; 0x44
 8006ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 8006ec4:	9f01      	ldr	r7, [sp, #4]
 8006ec6:	a804      	add	r0, sp, #16
 8006ec8:	4639      	mov	r1, r7
 8006eca:	f7ff fc7e 	bl	80067ca <pb_field_iter_find>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d151      	bne.n	8006f76 <pb_decode_noinit+0x12a>
            if (tag >= extension_range_start)
 8006ed2:	4547      	cmp	r7, r8
 8006ed4:	f0c0 80a4 	bcc.w	8007020 <pb_decode_noinit+0x1d4>
    const pb_field_t *start = iter->pos;
 8006ed8:	9e05      	ldr	r6, [sp, #20]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 8006eda:	9a05      	ldr	r2, [sp, #20]
 8006edc:	7893      	ldrb	r3, [r2, #2]
 8006ede:	f003 030f 	and.w	r3, r3, #15
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	f000 80a5 	beq.w	8007032 <pb_decode_noinit+0x1e6>
        (void)pb_field_iter_next(iter);
 8006ee8:	a804      	add	r0, sp, #16
 8006eea:	f7ff fc30 	bl	800674e <pb_field_iter_next>
    } while (iter->pos != start);
 8006eee:	9b05      	ldr	r3, [sp, #20]
 8006ef0:	429e      	cmp	r6, r3
 8006ef2:	d1f2      	bne.n	8006eda <pb_decode_noinit+0x8e>
                    extension_range_start = (uint32_t)-1;
 8006ef4:	f04f 38ff 	mov.w	r8, #4294967295
                if (tag >= extension_range_start)
 8006ef8:	4547      	cmp	r7, r8
                    if (!decode_extension(stream, tag, wire_type, &iter))
 8006efa:	f89d b000 	ldrb.w	fp, [sp]
                if (tag >= extension_range_start)
 8006efe:	f0c0 808f 	bcc.w	8007020 <pb_decode_noinit+0x1d4>
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8006f02:	9a08      	ldr	r2, [sp, #32]
                    size_t pos = stream->bytes_left;
 8006f04:	f8d5 9008 	ldr.w	r9, [r5, #8]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8006f08:	6816      	ldr	r6, [r2, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8006f0a:	68aa      	ldr	r2, [r5, #8]
 8006f0c:	2e00      	cmp	r6, #0
 8006f0e:	f000 8084 	beq.w	800701a <pb_decode_noinit+0x1ce>
 8006f12:	4591      	cmp	r9, r2
 8006f14:	d1a7      	bne.n	8006e66 <pb_decode_noinit+0x1a>
        if (extension->type->decode)
 8006f16:	6832      	ldr	r2, [r6, #0]
 8006f18:	f8d2 a000 	ldr.w	sl, [r2]
 8006f1c:	f1ba 0f00 	cmp.w	sl, #0
 8006f20:	d008      	beq.n	8006f34 <pb_decode_noinit+0xe8>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8006f22:	465b      	mov	r3, fp
 8006f24:	463a      	mov	r2, r7
 8006f26:	4631      	mov	r1, r6
 8006f28:	4628      	mov	r0, r5
 8006f2a:	47d0      	blx	sl
        if (!status)
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d0c5      	beq.n	8006ebc <pb_decode_noinit+0x70>
        extension = extension->next;
 8006f30:	68b6      	ldr	r6, [r6, #8]
 8006f32:	e7ea      	b.n	8006f0a <pb_decode_noinit+0xbe>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8006f34:	f8d2 a008 	ldr.w	sl, [r2, #8]
    if (field->tag != tag)
 8006f38:	f8ba 2000 	ldrh.w	r2, [sl]
 8006f3c:	4297      	cmp	r7, r2
 8006f3e:	d1f7      	bne.n	8006f30 <pb_decode_noinit+0xe4>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8006f40:	6872      	ldr	r2, [r6, #4]
 8006f42:	4651      	mov	r1, sl
 8006f44:	a80a      	add	r0, sp, #40	; 0x28
 8006f46:	f7ff fbf1 	bl	800672c <pb_field_iter_begin>
    iter->pData = extension->dest;
 8006f4a:	6872      	ldr	r2, [r6, #4]
    extension->found = true;
 8006f4c:	f04f 0301 	mov.w	r3, #1
    return decode_field(stream, wire_type, &iter);
 8006f50:	4659      	mov	r1, fp
    iter->pData = extension->dest;
 8006f52:	920e      	str	r2, [sp, #56]	; 0x38
    iter->pSize = &extension->found;
 8006f54:	f106 020c 	add.w	r2, r6, #12
    return decode_field(stream, wire_type, &iter);
 8006f58:	4628      	mov	r0, r5
    iter->pSize = &extension->found;
 8006f5a:	920f      	str	r2, [sp, #60]	; 0x3c
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006f5c:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8006f60:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8006f64:	2a80      	cmp	r2, #128	; 0x80
        iter->pData = &extension->dest;
 8006f66:	bf04      	itt	eq
 8006f68:	1d32      	addeq	r2, r6, #4
 8006f6a:	920e      	streq	r2, [sp, #56]	; 0x38
    return decode_field(stream, wire_type, &iter);
 8006f6c:	aa0a      	add	r2, sp, #40	; 0x28
    extension->found = true;
 8006f6e:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 8006f70:	f7ff fe92 	bl	8006c98 <decode_field>
 8006f74:	e7da      	b.n	8006f2c <pb_decode_noinit+0xe0>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 8006f76:	9a05      	ldr	r2, [sp, #20]
 8006f78:	7893      	ldrb	r3, [r2, #2]
 8006f7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	d119      	bne.n	8006fb6 <pb_decode_noinit+0x16a>
            && iter.pSize == iter.pData)
 8006f82:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 8006f86:	4299      	cmp	r1, r3
 8006f88:	d10e      	bne.n	8006fa8 <pb_decode_noinit+0x15c>
            if (fixed_count_field != iter.pos) {
 8006f8a:	42a2      	cmp	r2, r4
 8006f8c:	d008      	beq.n	8006fa0 <pb_decode_noinit+0x154>
                if (fixed_count_field != NULL &&
 8006f8e:	b124      	cbz	r4, 8006f9a <pb_decode_noinit+0x14e>
 8006f90:	8961      	ldrh	r1, [r4, #10]
 8006f92:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8006f96:	4299      	cmp	r1, r3
 8006f98:	d190      	bne.n	8006ebc <pb_decode_noinit+0x70>
                fixed_count_size = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f8ad 3002 	strh.w	r3, [sp, #2]
            iter.pSize = &fixed_count_size;
 8006fa0:	f10d 0302 	add.w	r3, sp, #2
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	9309      	str	r3, [sp, #36]	; 0x24
        if (!decode_field(stream, wire_type, &iter))
 8006fa8:	aa04      	add	r2, sp, #16
 8006faa:	f89d 1000 	ldrb.w	r1, [sp]
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f7ff fe72 	bl	8006c98 <decode_field>
 8006fb4:	e039      	b.n	800702a <pb_decode_noinit+0x1de>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f6      	bne.n	8006fa8 <pb_decode_noinit+0x15c>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8006fba:	9a06      	ldr	r2, [sp, #24]
 8006fbc:	2a3f      	cmp	r2, #63	; 0x3f
 8006fbe:	d8f3      	bhi.n	8006fa8 <pb_decode_noinit+0x15c>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8006fc0:	0951      	lsrs	r1, r2, #5
 8006fc2:	ab10      	add	r3, sp, #64	; 0x40
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8006fc4:	f002 021f 	and.w	r2, r2, #31
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8006fc8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8006fcc:	2301      	movs	r3, #1
 8006fce:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8006fd0:	f851 2c38 	ldr.w	r2, [r1, #-56]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	f841 3c38 	str.w	r3, [r1, #-56]
 8006fda:	e7e5      	b.n	8006fa8 <pb_decode_noinit+0x15c>
                if (fields_seen[i] != allbits)
 8006fdc:	f851 0b04 	ldr.w	r0, [r1], #4
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	f47f af6b 	bne.w	8006ebc <pb_decode_noinit+0x70>
            for (i = 0; i < (req_field_count >> 5); i++)
 8006fe6:	3201      	adds	r2, #1
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d1f7      	bne.n	8006fdc <pb_decode_noinit+0x190>
            if ((req_field_count & 31) != 0)
 8006fec:	f014 041f 	ands.w	r4, r4, #31
 8006ff0:	f43f af56 	beq.w	8006ea0 <pb_decode_noinit+0x54>
                if (fields_seen[req_field_count >> 5] !=
 8006ff4:	aa10      	add	r2, sp, #64	; 0x40
                    (allbits >> (32 - (req_field_count & 31))))
 8006ff6:	f1c4 0420 	rsb	r4, r4, #32
 8006ffa:	f04f 30ff 	mov.w	r0, #4294967295
                if (fields_seen[req_field_count >> 5] !=
 8006ffe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 8007002:	40e0      	lsrs	r0, r4
                if (fields_seen[req_field_count >> 5] !=
 8007004:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8007008:	1ac3      	subs	r3, r0, r3
 800700a:	4258      	negs	r0, r3
 800700c:	4158      	adcs	r0, r3
 800700e:	e756      	b.n	8006ebe <pb_decode_noinit+0x72>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 8007010:	2440      	movs	r4, #64	; 0x40
            for (i = 0; i < (req_field_count >> 5); i++)
 8007012:	0963      	lsrs	r3, r4, #5
 8007014:	a902      	add	r1, sp, #8
 8007016:	2200      	movs	r2, #0
 8007018:	e7e6      	b.n	8006fe8 <pb_decode_noinit+0x19c>
                    if (pos != stream->bytes_left)
 800701a:	4591      	cmp	r9, r2
 800701c:	f47f af23 	bne.w	8006e66 <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 8007020:	f89d 1000 	ldrb.w	r1, [sp]
 8007024:	4628      	mov	r0, r5
 8007026:	f7ff fde6 	bl	8006bf6 <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 800702a:	2800      	cmp	r0, #0
 800702c:	f47f af1b 	bne.w	8006e66 <pb_decode_noinit+0x1a>
 8007030:	e744      	b.n	8006ebc <pb_decode_noinit+0x70>
                    extension_range_start = iter.pos->tag;
 8007032:	f8b2 8000 	ldrh.w	r8, [r2]
 8007036:	e75f      	b.n	8006ef8 <pb_decode_noinit+0xac>

08007038 <pb_decode>:
{
 8007038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800703a:	460c      	mov	r4, r1
 800703c:	4605      	mov	r5, r0
    pb_message_set_to_defaults(fields, dest_struct);
 800703e:	4611      	mov	r1, r2
 8007040:	9201      	str	r2, [sp, #4]
 8007042:	4620      	mov	r0, r4
 8007044:	f7ff fc40 	bl	80068c8 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 8007048:	9a01      	ldr	r2, [sp, #4]
 800704a:	4621      	mov	r1, r4
 800704c:	4628      	mov	r0, r5
}
 800704e:	b003      	add	sp, #12
 8007050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 8007054:	f7ff befa 	b.w	8006e4c <pb_decode_noinit>

08007058 <pb_dec_submessage>:
{
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	460c      	mov	r4, r1
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 800705e:	68ce      	ldr	r6, [r1, #12]
{
 8007060:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 8007062:	a903      	add	r1, sp, #12
{
 8007064:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 8007066:	f7ff fdee 	bl	8006c46 <pb_make_string_substream>
 800706a:	b188      	cbz	r0, 8007090 <pb_dec_submessage+0x38>
    if (field->ptr == NULL)
 800706c:	68e3      	ldr	r3, [r4, #12]
 800706e:	b17b      	cbz	r3, 8007090 <pb_dec_submessage+0x38>
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8007070:	78a3      	ldrb	r3, [r4, #2]
        status = pb_decode(&substream, submsg_fields, dest);
 8007072:	4631      	mov	r1, r6
 8007074:	a803      	add	r0, sp, #12
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8007076:	9a01      	ldr	r2, [sp, #4]
 8007078:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800707c:	2b20      	cmp	r3, #32
 800707e:	d10b      	bne.n	8007098 <pb_dec_submessage+0x40>
        status = pb_decode(&substream, submsg_fields, dest);
 8007080:	f7ff ffda 	bl	8007038 <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8007084:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8007086:	a903      	add	r1, sp, #12
 8007088:	4628      	mov	r0, r5
 800708a:	f7ff fdf4 	bl	8006c76 <pb_close_string_substream>
 800708e:	b900      	cbnz	r0, 8007092 <pb_dec_submessage+0x3a>
        return false;
 8007090:	2400      	movs	r4, #0
}
 8007092:	4620      	mov	r0, r4
 8007094:	b006      	add	sp, #24
 8007096:	bd70      	pop	{r4, r5, r6, pc}
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8007098:	f7ff fed8 	bl	8006e4c <pb_decode_noinit>
 800709c:	e7f2      	b.n	8007084 <pb_dec_submessage+0x2c>

0800709e <pb_decode_delimited>:
{
 800709e:	b530      	push	{r4, r5, lr}
 80070a0:	b087      	sub	sp, #28
 80070a2:	460c      	mov	r4, r1
 80070a4:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 80070a6:	a903      	add	r1, sp, #12
{
 80070a8:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 80070aa:	f7ff fdcc 	bl	8006c46 <pb_make_string_substream>
 80070ae:	b150      	cbz	r0, 80070c6 <pb_decode_delimited+0x28>
    status = pb_decode(&substream, fields, dest_struct);
 80070b0:	4621      	mov	r1, r4
 80070b2:	9a01      	ldr	r2, [sp, #4]
 80070b4:	a803      	add	r0, sp, #12
 80070b6:	f7ff ffbf 	bl	8007038 <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 80070ba:	a903      	add	r1, sp, #12
    status = pb_decode(&substream, fields, dest_struct);
 80070bc:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 80070be:	4628      	mov	r0, r5
 80070c0:	f7ff fdd9 	bl	8006c76 <pb_close_string_substream>
 80070c4:	b900      	cbnz	r0, 80070c8 <pb_decode_delimited+0x2a>
        return false;
 80070c6:	2400      	movs	r4, #0
}
 80070c8:	4620      	mov	r0, r4
 80070ca:	b007      	add	sp, #28
 80070cc:	bd30      	pop	{r4, r5, pc}

080070ce <pb_decode_svarint>:
{
 80070ce:	b513      	push	{r0, r1, r4, lr}
 80070d0:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 80070d2:	4669      	mov	r1, sp
 80070d4:	f7ff fcee 	bl	8006ab4 <pb_decode_varint>
 80070d8:	b160      	cbz	r0, 80070f4 <pb_decode_svarint+0x26>
    if (value & 1)
 80070da:	e9dd 1300 	ldrd	r1, r3, [sp]
        *dest = (pb_int64_t)(~(value >> 1));
 80070de:	084a      	lsrs	r2, r1, #1
    if (value & 1)
 80070e0:	07c9      	lsls	r1, r1, #31
        *dest = (pb_int64_t)(~(value >> 1));
 80070e2:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80070e6:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80070ea:	bf44      	itt	mi
 80070ec:	43d2      	mvnmi	r2, r2
 80070ee:	43db      	mvnmi	r3, r3
        *dest = (pb_int64_t)(value >> 1);
 80070f0:	e9c4 2300 	strd	r2, r3, [r4]
}
 80070f4:	b002      	add	sp, #8
 80070f6:	bd10      	pop	{r4, pc}

080070f8 <pb_dec_svarint>:
{
 80070f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070fa:	460d      	mov	r5, r1
    if (!pb_decode_svarint(stream, &value))
 80070fc:	4669      	mov	r1, sp
{
 80070fe:	4614      	mov	r4, r2
    if (!pb_decode_svarint(stream, &value))
 8007100:	f7ff ffe5 	bl	80070ce <pb_decode_svarint>
 8007104:	b170      	cbz	r0, 8007124 <pb_dec_svarint+0x2c>
    if (field->data_size == sizeof(pb_int64_t))
 8007106:	892b      	ldrh	r3, [r5, #8]
 8007108:	2b08      	cmp	r3, #8
 800710a:	d10d      	bne.n	8007128 <pb_dec_svarint+0x30>
        clamped = *(pb_int64_t*)dest = value;
 800710c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007110:	e9c4 3200 	strd	r3, r2, [r4]
    if (clamped != value)
 8007114:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007118:	4291      	cmp	r1, r2
 800711a:	bf08      	it	eq
 800711c:	4298      	cmpeq	r0, r3
 800711e:	bf0c      	ite	eq
 8007120:	2001      	moveq	r0, #1
 8007122:	2000      	movne	r0, #0
}
 8007124:	b003      	add	sp, #12
 8007126:	bd30      	pop	{r4, r5, pc}
    else if (field->data_size == sizeof(int32_t))
 8007128:	2b04      	cmp	r3, #4
 800712a:	d103      	bne.n	8007134 <pb_dec_svarint+0x3c>
        clamped = *(int32_t*)dest = (int32_t)value;
 800712c:	9b00      	ldr	r3, [sp, #0]
 800712e:	6023      	str	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8007130:	17da      	asrs	r2, r3, #31
 8007132:	e7ef      	b.n	8007114 <pb_dec_svarint+0x1c>
    else if (field->data_size == sizeof(int_least16_t))
 8007134:	2b02      	cmp	r3, #2
 8007136:	d103      	bne.n	8007140 <pb_dec_svarint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 8007138:	f9bd 3000 	ldrsh.w	r3, [sp]
 800713c:	8023      	strh	r3, [r4, #0]
 800713e:	e7f7      	b.n	8007130 <pb_dec_svarint+0x38>
    else if (field->data_size == sizeof(int_least8_t))
 8007140:	2b01      	cmp	r3, #1
 8007142:	d103      	bne.n	800714c <pb_dec_svarint+0x54>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8007144:	f99d 3000 	ldrsb.w	r3, [sp]
 8007148:	7023      	strb	r3, [r4, #0]
 800714a:	e7f1      	b.n	8007130 <pb_dec_svarint+0x38>
        return false;
 800714c:	2000      	movs	r0, #0
 800714e:	e7e9      	b.n	8007124 <pb_dec_svarint+0x2c>

08007150 <pb_decode_fixed32>:
    if (!pb_read(stream, bytes, 4))
 8007150:	2204      	movs	r2, #4
{
 8007152:	b513      	push	{r0, r1, r4, lr}
 8007154:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 8007156:	eb0d 0102 	add.w	r1, sp, r2
 800715a:	f7ff fc1b 	bl	8006994 <pb_read>
 800715e:	b108      	cbz	r0, 8007164 <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 8007160:	9b01      	ldr	r3, [sp, #4]
 8007162:	6023      	str	r3, [r4, #0]
}
 8007164:	b002      	add	sp, #8
 8007166:	bd10      	pop	{r4, pc}

08007168 <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 8007168:	4611      	mov	r1, r2
 800716a:	f7ff bff1 	b.w	8007150 <pb_decode_fixed32>

0800716e <pb_decode_fixed64>:
{
 800716e:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 8007170:	2208      	movs	r2, #8
{
 8007172:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 8007174:	4669      	mov	r1, sp
 8007176:	f7ff fc0d 	bl	8006994 <pb_read>
 800717a:	b118      	cbz	r0, 8007184 <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 800717c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007180:	e9c4 2300 	strd	r2, r3, [r4]
}
 8007184:	b002      	add	sp, #8
 8007186:	bd10      	pop	{r4, pc}

08007188 <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 8007188:	4611      	mov	r1, r2
 800718a:	f7ff bff0 	b.w	800716e <pb_decode_fixed64>

0800718e <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 800718e:	b510      	push	{r4, lr}
 8007190:	460a      	mov	r2, r1
    pb_type_t type = field->type;
 8007192:	7881      	ldrb	r1, [r0, #2]
{
 8007194:	b086      	sub	sp, #24
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8007196:	f011 0330 	ands.w	r3, r1, #48	; 0x30
 800719a:	d03f      	beq.n	800721c <pb_check_proto3_default_value+0x8e>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800719c:	2b20      	cmp	r3, #32
    const void *pSize = (const char*)pData + field->size_offset;
 800719e:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 80071a2:	d104      	bne.n	80071ae <pb_check_proto3_default_value+0x20>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 80071a4:	5b10      	ldrh	r0, [r2, r4]
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
            return bytes->size == 0;
 80071a6:	fab0 f080 	clz	r0, r0
 80071aa:	0940      	lsrs	r0, r0, #5
 80071ac:	e007      	b.n	80071be <pb_check_proto3_default_value+0x30>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80071ae:	2b30      	cmp	r3, #48	; 0x30
 80071b0:	d0f8      	beq.n	80071a4 <pb_check_proto3_default_value+0x16>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 80071b2:	2b10      	cmp	r3, #16
 80071b4:	d105      	bne.n	80071c2 <pb_check_proto3_default_value+0x34>
 80071b6:	b124      	cbz	r4, 80071c2 <pb_check_proto3_default_value+0x34>
        return *(const bool*)pSize == false;
 80071b8:	5d10      	ldrb	r0, [r2, r4]
 80071ba:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 80071be:	b006      	add	sp, #24
 80071c0:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80071c2:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 80071c6:	d005      	beq.n	80071d4 <pb_check_proto3_default_value+0x46>
 80071c8:	8903      	ldrh	r3, [r0, #8]
 80071ca:	4413      	add	r3, r2
	    for (i = 0; i < field->data_size; i++)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d121      	bne.n	8007214 <pb_check_proto3_default_value+0x86>
	    return true;
 80071d0:	2001      	movs	r0, #1
 80071d2:	e7f4      	b.n	80071be <pb_check_proto3_default_value+0x30>
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 80071d4:	f001 030f 	and.w	r3, r1, #15
 80071d8:	2b05      	cmp	r3, #5
 80071da:	d101      	bne.n	80071e0 <pb_check_proto3_default_value+0x52>
            return bytes->size == 0;
 80071dc:	8810      	ldrh	r0, [r2, #0]
 80071de:	e7e2      	b.n	80071a6 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 80071e0:	2b06      	cmp	r3, #6
 80071e2:	d101      	bne.n	80071e8 <pb_check_proto3_default_value+0x5a>
            return *(const char*)pData == '\0';
 80071e4:	7810      	ldrb	r0, [r2, #0]
 80071e6:	e7de      	b.n	80071a6 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 80071e8:	2b09      	cmp	r3, #9
 80071ea:	d101      	bne.n	80071f0 <pb_check_proto3_default_value+0x62>
            return field->data_size == 0;
 80071ec:	8900      	ldrh	r0, [r0, #8]
 80071ee:	e7da      	b.n	80071a6 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 80071f0:	2b07      	cmp	r3, #7
 80071f2:	d1e9      	bne.n	80071c8 <pb_check_proto3_default_value+0x3a>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 80071f4:	68c1      	ldr	r1, [r0, #12]
 80071f6:	4668      	mov	r0, sp
 80071f8:	f7ff fa98 	bl	800672c <pb_field_iter_begin>
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d0e7      	beq.n	80071d0 <pb_check_proto3_default_value+0x42>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 8007200:	9904      	ldr	r1, [sp, #16]
 8007202:	9801      	ldr	r0, [sp, #4]
 8007204:	f7ff ffc3 	bl	800718e <pb_check_proto3_default_value>
 8007208:	2800      	cmp	r0, #0
 800720a:	d0d8      	beq.n	80071be <pb_check_proto3_default_value+0x30>
                } while (pb_field_iter_next(&iter));
 800720c:	4668      	mov	r0, sp
 800720e:	f7ff fa9e 	bl	800674e <pb_field_iter_next>
 8007212:	e7f3      	b.n	80071fc <pb_check_proto3_default_value+0x6e>
	        if (p[i] != 0)
 8007214:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007218:	2900      	cmp	r1, #0
 800721a:	d0d7      	beq.n	80071cc <pb_check_proto3_default_value+0x3e>
        return false;
 800721c:	2000      	movs	r0, #0
 800721e:	e7ce      	b.n	80071be <pb_check_proto3_default_value+0x30>

08007220 <pb_write>:
{
 8007220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 8007222:	6806      	ldr	r6, [r0, #0]
{
 8007224:	4604      	mov	r4, r0
 8007226:	4615      	mov	r5, r2
        if (stream->bytes_written + count > stream->max_size)
 8007228:	68c3      	ldr	r3, [r0, #12]
    if (stream->callback != NULL)
 800722a:	b926      	cbnz	r6, 8007236 <pb_write+0x16>
    stream->bytes_written += count;
 800722c:	68e3      	ldr	r3, [r4, #12]
    return true;
 800722e:	2001      	movs	r0, #1
    stream->bytes_written += count;
 8007230:	442b      	add	r3, r5
 8007232:	60e3      	str	r3, [r4, #12]
}
 8007234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (stream->bytes_written + count > stream->max_size)
 8007236:	4413      	add	r3, r2
 8007238:	6887      	ldr	r7, [r0, #8]
 800723a:	429f      	cmp	r7, r3
 800723c:	d201      	bcs.n	8007242 <pb_write+0x22>
            PB_RETURN_ERROR(stream, "stream full");
 800723e:	2000      	movs	r0, #0
 8007240:	e7f8      	b.n	8007234 <pb_write+0x14>
        if (!stream->callback(stream, buf, count))
 8007242:	47b0      	blx	r6
 8007244:	2800      	cmp	r0, #0
 8007246:	d1f1      	bne.n	800722c <pb_write+0xc>
 8007248:	e7f9      	b.n	800723e <pb_write+0x1e>

0800724a <pb_encode_varint>:
bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 800724a:	2a80      	cmp	r2, #128	; 0x80
 800724c:	f173 0100 	sbcs.w	r1, r3, #0
{
 8007250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007252:	4605      	mov	r5, r0
 8007254:	b085      	sub	sp, #20
    if (value <= 0x7F)
 8007256:	d207      	bcs.n	8007268 <pb_encode_varint+0x1e>
    {
        pb_byte_t v = (pb_byte_t)value;
 8007258:	f88d 2004 	strb.w	r2, [sp, #4]
        return pb_write(stream, &v, 1);
 800725c:	a901      	add	r1, sp, #4
 800725e:	2201      	movs	r2, #1
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 8007260:	f7ff ffde 	bl	8007220 <pb_write>
}
 8007264:	b005      	add	sp, #20
 8007266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007268:	ae01      	add	r6, sp, #4
    size_t i = 0;
 800726a:	2400      	movs	r4, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 800726c:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8007270:	b2d0      	uxtb	r0, r2
 8007272:	f806 1b01 	strb.w	r1, [r6], #1
        value >>= 7;
 8007276:	09d1      	lsrs	r1, r2, #7
 8007278:	ea41 6243 	orr.w	r2, r1, r3, lsl #25
 800727c:	4621      	mov	r1, r4
 800727e:	09db      	lsrs	r3, r3, #7
        i++;
 8007280:	3401      	adds	r4, #1
    while (value)
 8007282:	ea52 0703 	orrs.w	r7, r2, r3
 8007286:	d1f1      	bne.n	800726c <pb_encode_varint+0x22>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8007288:	f101 0310 	add.w	r3, r1, #16
 800728c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    return pb_write(stream, buffer, i);
 8007290:	a901      	add	r1, sp, #4
 8007292:	4628      	mov	r0, r5
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8007294:	446b      	add	r3, sp
 8007296:	f803 2c0c 	strb.w	r2, [r3, #-12]
    return pb_write(stream, buffer, i);
 800729a:	4622      	mov	r2, r4
 800729c:	e7e0      	b.n	8007260 <pb_encode_varint+0x16>

0800729e <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
 800729e:	890b      	ldrh	r3, [r1, #8]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d104      	bne.n	80072ae <pb_enc_uvarint+0x10>
        value = *(const uint_least8_t*)src;
 80072a4:	7811      	ldrb	r1, [r2, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
 80072a6:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 80072a8:	460a      	mov	r2, r1
 80072aa:	f7ff bfce 	b.w	800724a <pb_encode_varint>
    else if (field->data_size == sizeof(uint_least16_t))
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d101      	bne.n	80072b6 <pb_enc_uvarint+0x18>
        value = *(const uint_least16_t*)src;
 80072b2:	8811      	ldrh	r1, [r2, #0]
 80072b4:	e7f7      	b.n	80072a6 <pb_enc_uvarint+0x8>
    else if (field->data_size == sizeof(uint32_t))
 80072b6:	2b04      	cmp	r3, #4
 80072b8:	d101      	bne.n	80072be <pb_enc_uvarint+0x20>
        value = *(const uint32_t*)src;
 80072ba:	6811      	ldr	r1, [r2, #0]
 80072bc:	e7f3      	b.n	80072a6 <pb_enc_uvarint+0x8>
    else if (field->data_size == sizeof(pb_uint64_t))
 80072be:	2b08      	cmp	r3, #8
 80072c0:	d102      	bne.n	80072c8 <pb_enc_uvarint+0x2a>
        value = *(const pb_uint64_t*)src;
 80072c2:	e9d2 1300 	ldrd	r1, r3, [r2]
 80072c6:	e7ef      	b.n	80072a8 <pb_enc_uvarint+0xa>
}
 80072c8:	2000      	movs	r0, #0
 80072ca:	4770      	bx	lr

080072cc <pb_enc_varint>:
{
 80072cc:	4613      	mov	r3, r2
    if (field->data_size == sizeof(int_least8_t))
 80072ce:	890a      	ldrh	r2, [r1, #8]
 80072d0:	2a01      	cmp	r2, #1
 80072d2:	d104      	bne.n	80072de <pb_enc_varint+0x12>
        value = *(const int_least8_t*)src;
 80072d4:	f993 2000 	ldrsb.w	r2, [r3]
        value = *(const int_least16_t*)src;
 80072d8:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 80072da:	f7ff bfb6 	b.w	800724a <pb_encode_varint>
    else if (field->data_size == sizeof(int_least16_t))
 80072de:	2a02      	cmp	r2, #2
 80072e0:	d102      	bne.n	80072e8 <pb_enc_varint+0x1c>
        value = *(const int_least16_t*)src;
 80072e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80072e6:	e7f7      	b.n	80072d8 <pb_enc_varint+0xc>
    else if (field->data_size == sizeof(int32_t))
 80072e8:	2a04      	cmp	r2, #4
 80072ea:	d101      	bne.n	80072f0 <pb_enc_varint+0x24>
        value = *(const int32_t*)src;
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	e7f3      	b.n	80072d8 <pb_enc_varint+0xc>
    else if (field->data_size == sizeof(pb_int64_t))
 80072f0:	2a08      	cmp	r2, #8
 80072f2:	d102      	bne.n	80072fa <pb_enc_varint+0x2e>
        value = *(const pb_int64_t*)src;
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	e7ef      	b.n	80072da <pb_enc_varint+0xe>
}
 80072fa:	2000      	movs	r0, #0
 80072fc:	4770      	bx	lr

080072fe <pb_encode_svarint>:
        zigzagged = ~((pb_uint64_t)value << 1);
 80072fe:	1892      	adds	r2, r2, r2
 8007300:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
 8007304:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
 8007308:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
 800730c:	f7ff bf9d 	b.w	800724a <pb_encode_varint>

08007310 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8007310:	4613      	mov	r3, r2
    pb_int64_t value = 0;
    
    if (field->data_size == sizeof(int_least8_t))
 8007312:	890a      	ldrh	r2, [r1, #8]
 8007314:	2a01      	cmp	r2, #1
 8007316:	d104      	bne.n	8007322 <pb_enc_svarint+0x12>
        value = *(const int_least8_t*)src;
 8007318:	f993 2000 	ldrsb.w	r2, [r3]
    else if (field->data_size == sizeof(int_least16_t))
        value = *(const int_least16_t*)src;
 800731c:	17d3      	asrs	r3, r2, #31
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_svarint(stream, value);
 800731e:	f7ff bfee 	b.w	80072fe <pb_encode_svarint>
    else if (field->data_size == sizeof(int_least16_t))
 8007322:	2a02      	cmp	r2, #2
 8007324:	d102      	bne.n	800732c <pb_enc_svarint+0x1c>
        value = *(const int_least16_t*)src;
 8007326:	f9b3 2000 	ldrsh.w	r2, [r3]
 800732a:	e7f7      	b.n	800731c <pb_enc_svarint+0xc>
    else if (field->data_size == sizeof(int32_t))
 800732c:	2a04      	cmp	r2, #4
 800732e:	d101      	bne.n	8007334 <pb_enc_svarint+0x24>
        value = *(const int32_t*)src;
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	e7f3      	b.n	800731c <pb_enc_svarint+0xc>
    else if (field->data_size == sizeof(pb_int64_t))
 8007334:	2a08      	cmp	r2, #8
 8007336:	d102      	bne.n	800733e <pb_enc_svarint+0x2e>
        value = *(const pb_int64_t*)src;
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733c:	e7ef      	b.n	800731e <pb_enc_svarint+0xe>
}
 800733e:	2000      	movs	r0, #0
 8007340:	4770      	bx	lr

08007342 <pb_encode_fixed32>:
{
 8007342:	b507      	push	{r0, r1, r2, lr}
    return pb_write(stream, bytes, 4);
 8007344:	2204      	movs	r2, #4
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8007346:	680b      	ldr	r3, [r1, #0]
    return pb_write(stream, bytes, 4);
 8007348:	eb0d 0102 	add.w	r1, sp, r2
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800734c:	9301      	str	r3, [sp, #4]
    return pb_write(stream, bytes, 4);
 800734e:	f7ff ff67 	bl	8007220 <pb_write>
}
 8007352:	b003      	add	sp, #12
 8007354:	f85d fb04 	ldr.w	pc, [sp], #4

08007358 <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 8007358:	4611      	mov	r1, r2
 800735a:	f7ff bff2 	b.w	8007342 <pb_encode_fixed32>

0800735e <pb_encode_fixed64>:
{
 800735e:	b507      	push	{r0, r1, r2, lr}
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8007360:	e9d1 2300 	ldrd	r2, r3, [r1]
    return pb_write(stream, bytes, 8);
 8007364:	4669      	mov	r1, sp
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8007366:	9200      	str	r2, [sp, #0]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 8007368:	0a1a      	lsrs	r2, r3, #8
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 800736a:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 800736e:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8007372:	0c1a      	lsrs	r2, r3, #16
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8007374:	0e1b      	lsrs	r3, r3, #24
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8007376:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 8);
 800737a:	2208      	movs	r2, #8
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800737c:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 8007380:	f7ff ff4e 	bl	8007220 <pb_write>
}
 8007384:	b003      	add	sp, #12
 8007386:	f85d fb04 	ldr.w	pc, [sp], #4

0800738a <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 800738a:	4611      	mov	r1, r2
 800738c:	f7ff bfe7 	b.w	800735e <pb_encode_fixed64>

08007390 <pb_encode_tag>:
{
 8007390:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
 8007392:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 8007396:	0f5b      	lsrs	r3, r3, #29
 8007398:	f7ff bf57 	b.w	800724a <pb_encode_varint>

0800739c <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 800739c:	788b      	ldrb	r3, [r1, #2]
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	2b09      	cmp	r3, #9
 80073a4:	d811      	bhi.n	80073ca <pb_encode_tag_for_field+0x2e>
 80073a6:	e8df f003 	tbb	[pc, r3]
 80073aa:	0e0e      	.short	0x0e0e
 80073ac:	0c0a050e 	.word	0x0c0a050e
 80073b0:	0c100c0c 	.word	0x0c100c0c
 80073b4:	2305      	movs	r3, #5
    return pb_encode_tag(stream, wiretype, field->tag);
 80073b6:	880a      	ldrh	r2, [r1, #0]
 80073b8:	4619      	mov	r1, r3
 80073ba:	f7ff bfe9 	b.w	8007390 <pb_encode_tag>
            wiretype = PB_WT_64BIT;
 80073be:	2301      	movs	r3, #1
            break;
 80073c0:	e7f9      	b.n	80073b6 <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_STRING;
 80073c2:	2302      	movs	r3, #2
            break;
 80073c4:	e7f7      	b.n	80073b6 <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_VARINT;
 80073c6:	2300      	movs	r3, #0
 80073c8:	e7f5      	b.n	80073b6 <pb_encode_tag_for_field+0x1a>
}
 80073ca:	2000      	movs	r0, #0
 80073cc:	4770      	bx	lr
	...

080073d0 <encode_field>:
{
 80073d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d4:	4615      	mov	r5, r2
    switch (PB_ATYPE(field->type))
 80073d6:	788a      	ldrb	r2, [r1, #2]
{
 80073d8:	b086      	sub	sp, #24
 80073da:	4606      	mov	r6, r0
    switch (PB_ATYPE(field->type))
 80073dc:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
{
 80073e0:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 80073e2:	2b40      	cmp	r3, #64	; 0x40
 80073e4:	f000 80d2 	beq.w	800758c <encode_field+0x1bc>
 80073e8:	0653      	lsls	r3, r2, #25
 80073ea:	d41b      	bmi.n	8007424 <encode_field+0x54>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 80073ec:	4b6a      	ldr	r3, [pc, #424]	; (8007598 <encode_field+0x1c8>)
 80073ee:	f002 010f 	and.w	r1, r2, #15
 80073f2:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    if (field->size_offset)
 80073f6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80073fa:	b1bb      	cbz	r3, 800742c <encode_field+0x5c>
        pSize = (const char*)pData + field->size_offset;
 80073fc:	442b      	add	r3, r5
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80073fe:	78a2      	ldrb	r2, [r4, #2]
 8007400:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 8007404:	2880      	cmp	r0, #128	; 0x80
 8007406:	d105      	bne.n	8007414 <encode_field+0x44>
        pData = *(const void* const*)pData;
 8007408:	682d      	ldr	r5, [r5, #0]
        implicit_has = (pData != NULL);
 800740a:	1e29      	subs	r1, r5, #0
 800740c:	bf18      	it	ne
 800740e:	2101      	movne	r1, #1
 8007410:	f88d 1007 	strb.w	r1, [sp, #7]
    switch (PB_HTYPE(field->type))
 8007414:	f002 0130 	and.w	r1, r2, #48	; 0x30
 8007418:	2920      	cmp	r1, #32
 800741a:	d036      	beq.n	800748a <encode_field+0xba>
 800741c:	d819      	bhi.n	8007452 <encode_field+0x82>
 800741e:	b1f9      	cbz	r1, 8007460 <encode_field+0x90>
 8007420:	2910      	cmp	r1, #16
 8007422:	d02d      	beq.n	8007480 <encode_field+0xb0>
    switch (PB_ATYPE(field->type))
 8007424:	2000      	movs	r0, #0
}
 8007426:	b006      	add	sp, #24
 8007428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800742c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8007430:	2a10      	cmp	r2, #16
 8007432:	d10a      	bne.n	800744a <encode_field+0x7a>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 8007434:	4629      	mov	r1, r5
 8007436:	4620      	mov	r0, r4
 8007438:	f7ff fea9 	bl	800718e <pb_check_proto3_default_value>
 800743c:	f080 0001 	eor.w	r0, r0, #1
 8007440:	f88d 0007 	strb.w	r0, [sp, #7]
    const void *pSize = &implicit_has;
 8007444:	f10d 0307 	add.w	r3, sp, #7
 8007448:	e7d9      	b.n	80073fe <encode_field+0x2e>
        implicit_has = true;
 800744a:	2301      	movs	r3, #1
 800744c:	f88d 3007 	strb.w	r3, [sp, #7]
 8007450:	e7f8      	b.n	8007444 <encode_field+0x74>
    switch (PB_HTYPE(field->type))
 8007452:	2930      	cmp	r1, #48	; 0x30
 8007454:	d1e6      	bne.n	8007424 <encode_field+0x54>
            if (*(const pb_size_t*)pSize == field->tag)
 8007456:	881a      	ldrh	r2, [r3, #0]
 8007458:	8823      	ldrh	r3, [r4, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d113      	bne.n	8007486 <encode_field+0xb6>
 800745e:	e001      	b.n	8007464 <encode_field+0x94>
            if (!pData)
 8007460:	2d00      	cmp	r5, #0
 8007462:	d0df      	beq.n	8007424 <encode_field+0x54>
                if (!pb_encode_tag_for_field(stream, field))
 8007464:	4621      	mov	r1, r4
 8007466:	4630      	mov	r0, r6
 8007468:	f7ff ff98 	bl	800739c <pb_encode_tag_for_field>
 800746c:	2800      	cmp	r0, #0
 800746e:	d0d9      	beq.n	8007424 <encode_field+0x54>
                if (!func(stream, field, pData))
 8007470:	462a      	mov	r2, r5
 8007472:	4621      	mov	r1, r4
 8007474:	4630      	mov	r0, r6
 8007476:	463b      	mov	r3, r7
}
 8007478:	b006      	add	sp, #24
 800747a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (!callback->funcs.encode(stream, field, arg))
 800747e:	4718      	bx	r3
            if (*(const bool*)pSize)
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1ee      	bne.n	8007464 <encode_field+0x94>
    return true;
 8007486:	2001      	movs	r0, #1
 8007488:	e7cd      	b.n	8007426 <encode_field+0x56>
            if (field->size_offset != 0) {
 800748a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800748e:	b359      	cbz	r1, 80074e8 <encode_field+0x118>
                count = *(const pb_size_t*)pSize;
 8007490:	f8b3 8000 	ldrh.w	r8, [r3]
    if (count == 0)
 8007494:	f1b8 0f00 	cmp.w	r8, #0
 8007498:	d0f5      	beq.n	8007486 <encode_field+0xb6>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800749a:	2880      	cmp	r0, #128	; 0x80
 800749c:	d002      	beq.n	80074a4 <encode_field+0xd4>
 800749e:	8963      	ldrh	r3, [r4, #10]
 80074a0:	4598      	cmp	r8, r3
 80074a2:	d8bf      	bhi.n	8007424 <encode_field+0x54>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 80074a4:	f002 020f 	and.w	r2, r2, #15
 80074a8:	2a04      	cmp	r2, #4
 80074aa:	d84c      	bhi.n	8007546 <encode_field+0x176>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 80074ac:	8822      	ldrh	r2, [r4, #0]
 80074ae:	2102      	movs	r1, #2
 80074b0:	4630      	mov	r0, r6
 80074b2:	f7ff ff6d 	bl	8007390 <pb_encode_tag>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d0b4      	beq.n	8007424 <encode_field+0x54>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 80074ba:	78a3      	ldrb	r3, [r4, #2]
 80074bc:	f003 030f 	and.w	r3, r3, #15
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d114      	bne.n	80074ee <encode_field+0x11e>
            size = 4 * count;
 80074c4:	ea4f 0988 	mov.w	r9, r8, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80074c8:	464a      	mov	r2, r9
 80074ca:	2300      	movs	r3, #0
 80074cc:	4630      	mov	r0, r6
 80074ce:	f7ff febc 	bl	800724a <pb_encode_varint>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d0a6      	beq.n	8007424 <encode_field+0x54>
        if (stream->callback == NULL)
 80074d6:	6831      	ldr	r1, [r6, #0]
 80074d8:	bb29      	cbnz	r1, 8007526 <encode_field+0x156>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 80074da:	464a      	mov	r2, r9
 80074dc:	4630      	mov	r0, r6
}
 80074de:	b006      	add	sp, #24
 80074e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
 80074e4:	f7ff be9c 	b.w	8007220 <pb_write>
                count = field->array_size;
 80074e8:	f8b4 800a 	ldrh.w	r8, [r4, #10]
 80074ec:	e7d2      	b.n	8007494 <encode_field+0xc4>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d102      	bne.n	80074f8 <encode_field+0x128>
            size = 8 * count;
 80074f2:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80074f6:	e7e7      	b.n	80074c8 <encode_field+0xf8>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 80074f8:	46aa      	mov	sl, r5
            for (i = 0; i < count; i++)
 80074fa:	f04f 0900 	mov.w	r9, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 80074fe:	2210      	movs	r2, #16
 8007500:	2100      	movs	r1, #0
 8007502:	a802      	add	r0, sp, #8
 8007504:	f004 f831 	bl	800b56a <memset>
                if (!func(&sizestream, field, p))
 8007508:	4652      	mov	r2, sl
 800750a:	4621      	mov	r1, r4
 800750c:	a802      	add	r0, sp, #8
 800750e:	47b8      	blx	r7
 8007510:	2800      	cmp	r0, #0
 8007512:	d088      	beq.n	8007426 <encode_field+0x56>
            for (i = 0; i < count; i++)
 8007514:	f109 0901 	add.w	r9, r9, #1
                p = (const char*)p + field->data_size;
 8007518:	8923      	ldrh	r3, [r4, #8]
            for (i = 0; i < count; i++)
 800751a:	45c8      	cmp	r8, r9
                p = (const char*)p + field->data_size;
 800751c:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 800751e:	d8f3      	bhi.n	8007508 <encode_field+0x138>
            size = sizestream.bytes_written;
 8007520:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007524:	e7d0      	b.n	80074c8 <encode_field+0xf8>
        for (i = 0; i < count; i++)
 8007526:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 800752a:	462a      	mov	r2, r5
 800752c:	4621      	mov	r1, r4
 800752e:	4630      	mov	r0, r6
 8007530:	47b8      	blx	r7
 8007532:	2800      	cmp	r0, #0
 8007534:	f43f af76 	beq.w	8007424 <encode_field+0x54>
        for (i = 0; i < count; i++)
 8007538:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 800753c:	8923      	ldrh	r3, [r4, #8]
        for (i = 0; i < count; i++)
 800753e:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 8007540:	441d      	add	r5, r3
        for (i = 0; i < count; i++)
 8007542:	d8f2      	bhi.n	800752a <encode_field+0x15a>
 8007544:	e79f      	b.n	8007486 <encode_field+0xb6>
        for (i = 0; i < count; i++)
 8007546:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 800754a:	4621      	mov	r1, r4
 800754c:	4630      	mov	r0, r6
 800754e:	f7ff ff25 	bl	800739c <pb_encode_tag_for_field>
 8007552:	2800      	cmp	r0, #0
 8007554:	f43f af66 	beq.w	8007424 <encode_field+0x54>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8007558:	78a3      	ldrb	r3, [r4, #2]
 800755a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800755e:	2a80      	cmp	r2, #128	; 0x80
 8007560:	d112      	bne.n	8007588 <encode_field+0x1b8>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8007568:	2b01      	cmp	r3, #1
 800756a:	d80d      	bhi.n	8007588 <encode_field+0x1b8>
                if (!func(stream, field, *(const void* const*)p))
 800756c:	682a      	ldr	r2, [r5, #0]
                if (!func(stream, field, p))
 800756e:	4621      	mov	r1, r4
 8007570:	4630      	mov	r0, r6
 8007572:	47b8      	blx	r7
 8007574:	2800      	cmp	r0, #0
 8007576:	f43f af55 	beq.w	8007424 <encode_field+0x54>
        for (i = 0; i < count; i++)
 800757a:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 800757e:	8923      	ldrh	r3, [r4, #8]
        for (i = 0; i < count; i++)
 8007580:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 8007582:	441d      	add	r5, r3
        for (i = 0; i < count; i++)
 8007584:	d8e1      	bhi.n	800754a <encode_field+0x17a>
 8007586:	e77e      	b.n	8007486 <encode_field+0xb6>
                if (!func(stream, field, p))
 8007588:	462a      	mov	r2, r5
 800758a:	e7f0      	b.n	800756e <encode_field+0x19e>
    if (callback->funcs.encode != NULL)
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	f43f af79 	beq.w	8007486 <encode_field+0xb6>
        if (!callback->funcs.encode(stream, field, arg))
 8007594:	1d2a      	adds	r2, r5, #4
 8007596:	e76f      	b.n	8007478 <encode_field+0xa8>
 8007598:	080dc030 	.word	0x080dc030

0800759c <pb_encode>:
{
 800759c:	b530      	push	{r4, r5, lr}
 800759e:	b087      	sub	sp, #28
 80075a0:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 80075a2:	4668      	mov	r0, sp
 80075a4:	f7ff f8c2 	bl	800672c <pb_field_iter_begin>
 80075a8:	b910      	cbnz	r0, 80075b0 <pb_encode+0x14>
        return true; /* Empty message type */
 80075aa:	2001      	movs	r0, #1
}
 80075ac:	b007      	add	sp, #28
 80075ae:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 80075b0:	9901      	ldr	r1, [sp, #4]
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 80075b2:	9a04      	ldr	r2, [sp, #16]
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 80075b4:	788b      	ldrb	r3, [r1, #2]
 80075b6:	f003 030f 	and.w	r3, r3, #15
 80075ba:	2b08      	cmp	r3, #8
 80075bc:	d11c      	bne.n	80075f8 <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 80075be:	6814      	ldr	r4, [r2, #0]
    while (extension)
 80075c0:	b91c      	cbnz	r4, 80075ca <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 80075c2:	4668      	mov	r0, sp
 80075c4:	f7ff f8c3 	bl	800674e <pb_field_iter_next>
 80075c8:	e7ee      	b.n	80075a8 <pb_encode+0xc>
        if (extension->type->encode)
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	b12a      	cbz	r2, 80075dc <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 80075d0:	4621      	mov	r1, r4
 80075d2:	4628      	mov	r0, r5
 80075d4:	4790      	blx	r2
        if (!status)
 80075d6:	b968      	cbnz	r0, 80075f4 <pb_encode+0x58>
                return false;
 80075d8:	2000      	movs	r0, #0
 80075da:	e7e7      	b.n	80075ac <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80075dc:	6899      	ldr	r1, [r3, #8]
        return encode_field(stream, field, extension->dest);
 80075de:	4628      	mov	r0, r5
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80075e0:	788b      	ldrb	r3, [r1, #2]
 80075e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075e6:	2b80      	cmp	r3, #128	; 0x80
        return encode_field(stream, field, &extension->dest);
 80075e8:	bf0c      	ite	eq
 80075ea:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 80075ec:	6862      	ldrne	r2, [r4, #4]
 80075ee:	f7ff feef 	bl	80073d0 <encode_field>
 80075f2:	e7f0      	b.n	80075d6 <pb_encode+0x3a>
        extension = extension->next;
 80075f4:	68a4      	ldr	r4, [r4, #8]
 80075f6:	e7e3      	b.n	80075c0 <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 80075f8:	4628      	mov	r0, r5
 80075fa:	f7ff fee9 	bl	80073d0 <encode_field>
 80075fe:	2800      	cmp	r0, #0
 8007600:	d1df      	bne.n	80075c2 <pb_encode+0x26>
 8007602:	e7e9      	b.n	80075d8 <pb_encode+0x3c>

08007604 <pb_encode_string>:
{
 8007604:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8007606:	2300      	movs	r3, #0
{
 8007608:	4604      	mov	r4, r0
 800760a:	4615      	mov	r5, r2
 800760c:	9101      	str	r1, [sp, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800760e:	f7ff fe1c 	bl	800724a <pb_encode_varint>
 8007612:	b138      	cbz	r0, 8007624 <pb_encode_string+0x20>
    return pb_write(stream, buffer, size);
 8007614:	462a      	mov	r2, r5
 8007616:	9901      	ldr	r1, [sp, #4]
 8007618:	4620      	mov	r0, r4
}
 800761a:	b003      	add	sp, #12
 800761c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return pb_write(stream, buffer, size);
 8007620:	f7ff bdfe 	b.w	8007220 <pb_write>
}
 8007624:	b003      	add	sp, #12
 8007626:	bd30      	pop	{r4, r5, pc}

08007628 <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8007628:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 800762a:	890a      	ldrh	r2, [r1, #8]
 800762c:	4619      	mov	r1, r3
 800762e:	f7ff bfe9 	b.w	8007604 <pb_encode_string>

08007632 <pb_enc_string>:
    size_t max_size = field->data_size;
 8007632:	890b      	ldrh	r3, [r1, #8]
{
 8007634:	b410      	push	{r4}
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8007636:	7889      	ldrb	r1, [r1, #2]
 8007638:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    size_t max_size = field->data_size;
 800763c:	2980      	cmp	r1, #128	; 0x80
    if (src == NULL)
 800763e:	4611      	mov	r1, r2
    size_t max_size = field->data_size;
 8007640:	bf08      	it	eq
 8007642:	f04f 33ff 	moveq.w	r3, #4294967295
    if (src == NULL)
 8007646:	b122      	cbz	r2, 8007652 <pb_enc_string+0x20>
    size_t size = 0;
 8007648:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 800764a:	429a      	cmp	r2, r3
 800764c:	d001      	beq.n	8007652 <pb_enc_string+0x20>
 800764e:	5c8c      	ldrb	r4, [r1, r2]
 8007650:	b91c      	cbnz	r4, 800765a <pb_enc_string+0x28>
}
 8007652:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 8007656:	f7ff bfd5 	b.w	8007604 <pb_encode_string>
            size++;
 800765a:	3201      	adds	r2, #1
            p++;
 800765c:	e7f5      	b.n	800764a <pb_enc_string+0x18>

0800765e <pb_enc_bytes>:
{
 800765e:	b430      	push	{r4, r5}
 8007660:	460c      	mov	r4, r1
 8007662:	4605      	mov	r5, r0
    if (src == NULL)
 8007664:	4611      	mov	r1, r2
 8007666:	b912      	cbnz	r2, 800766e <pb_enc_bytes+0x10>
}
 8007668:	bc30      	pop	{r4, r5}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 800766a:	f7ff bfcb 	b.w	8007604 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800766e:	78a3      	ldrb	r3, [r4, #2]
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8007670:	8812      	ldrh	r2, [r2, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8007672:	f013 00c0 	ands.w	r0, r3, #192	; 0xc0
 8007676:	d103      	bne.n	8007680 <pb_enc_bytes+0x22>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8007678:	1c93      	adds	r3, r2, #2
 800767a:	8924      	ldrh	r4, [r4, #8]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800767c:	42a3      	cmp	r3, r4
 800767e:	d802      	bhi.n	8007686 <pb_enc_bytes+0x28>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8007680:	3102      	adds	r1, #2
 8007682:	4628      	mov	r0, r5
 8007684:	e7f0      	b.n	8007668 <pb_enc_bytes+0xa>
}
 8007686:	bc30      	pop	{r4, r5}
 8007688:	4770      	bx	lr

0800768a <pb_encode_submessage>:
{
 800768a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800768e:	460e      	mov	r6, r1
 8007690:	4617      	mov	r7, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8007692:	2100      	movs	r1, #0
 8007694:	2210      	movs	r2, #16
{
 8007696:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8007698:	4668      	mov	r0, sp
 800769a:	f003 ff66 	bl	800b56a <memset>
    if (!pb_encode(&substream, fields, src_struct))
 800769e:	463a      	mov	r2, r7
 80076a0:	4631      	mov	r1, r6
 80076a2:	4668      	mov	r0, sp
 80076a4:	f7ff ff7a 	bl	800759c <pb_encode>
 80076a8:	b348      	cbz	r0, 80076fe <pb_encode_submessage+0x74>
    size = substream.bytes_written;
 80076aa:	9d03      	ldr	r5, [sp, #12]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80076ac:	f04f 0800 	mov.w	r8, #0
 80076b0:	4620      	mov	r0, r4
 80076b2:	462a      	mov	r2, r5
 80076b4:	4643      	mov	r3, r8
 80076b6:	f7ff fdc8 	bl	800724a <pb_encode_varint>
 80076ba:	b300      	cbz	r0, 80076fe <pb_encode_submessage+0x74>
    if (stream->callback == NULL)
 80076bc:	6821      	ldr	r1, [r4, #0]
 80076be:	b931      	cbnz	r1, 80076ce <pb_encode_submessage+0x44>
        return pb_write(stream, NULL, size); /* Just sizing */
 80076c0:	462a      	mov	r2, r5
 80076c2:	4620      	mov	r0, r4
 80076c4:	f7ff fdac 	bl	8007220 <pb_write>
}
 80076c8:	b004      	add	sp, #16
 80076ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->bytes_written + size > stream->max_size)
 80076ce:	68e2      	ldr	r2, [r4, #12]
 80076d0:	68a3      	ldr	r3, [r4, #8]
 80076d2:	442a      	add	r2, r5
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d812      	bhi.n	80076fe <pb_encode_submessage+0x74>
    substream.state = stream->state;
 80076d8:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
 80076da:	463a      	mov	r2, r7
    substream.callback = stream->callback;
 80076dc:	9100      	str	r1, [sp, #0]
    status = pb_encode(&substream, fields, src_struct);
 80076de:	4668      	mov	r0, sp
 80076e0:	4631      	mov	r1, r6
    substream.bytes_written = 0;
 80076e2:	f8cd 800c 	str.w	r8, [sp, #12]
    substream.max_size = size;
 80076e6:	e9cd 3501 	strd	r3, r5, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
 80076ea:	f7ff ff57 	bl	800759c <pb_encode>
    stream->bytes_written += substream.bytes_written;
 80076ee:	9a03      	ldr	r2, [sp, #12]
 80076f0:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
 80076f2:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
 80076f4:	4413      	add	r3, r2
 80076f6:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
 80076f8:	9b01      	ldr	r3, [sp, #4]
 80076fa:	6063      	str	r3, [r4, #4]
    if (substream.bytes_written != size)
 80076fc:	d0e4      	beq.n	80076c8 <pb_encode_submessage+0x3e>
        PB_RETURN_ERROR(stream, "submsg size changed");
 80076fe:	2000      	movs	r0, #0
 8007700:	e7e2      	b.n	80076c8 <pb_encode_submessage+0x3e>

08007702 <pb_enc_submessage>:
    if (field->ptr == NULL)
 8007702:	68c9      	ldr	r1, [r1, #12]
 8007704:	b109      	cbz	r1, 800770a <pb_enc_submessage+0x8>
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 8007706:	f7ff bfc0 	b.w	800768a <pb_encode_submessage>
}
 800770a:	4608      	mov	r0, r1
 800770c:	4770      	bx	lr
	...

08007710 <stai_runtime_get_info>:
 8007710:	b430      	push	{r4, r5}
 8007712:	b160      	cbz	r0, 800772e <stai_runtime_get_info+0x1e>
 8007714:	4c08      	ldr	r4, [pc, #32]	; (8007738 <stai_runtime_get_info+0x28>)
 8007716:	4684      	mov	ip, r0
 8007718:	2500      	movs	r5, #0
 800771a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800771c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007720:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007724:	e88c 0003 	stmia.w	ip, {r0, r1}
 8007728:	4628      	mov	r0, r5
 800772a:	bc30      	pop	{r4, r5}
 800772c:	4770      	bx	lr
 800772e:	4d03      	ldr	r5, [pc, #12]	; (800773c <stai_runtime_get_info+0x2c>)
 8007730:	4628      	mov	r0, r5
 8007732:	bc30      	pop	{r4, r5}
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	080dc56c 	.word	0x080dc56c
 800773c:	00020001 	.word	0x00020001

08007740 <ai_version_get>:
 8007740:	0212      	lsls	r2, r2, #8
 8007742:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007746:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800774a:	4770      	bx	lr

0800774c <ai_platform_version_get>:
 800774c:	0e01      	lsrs	r1, r0, #24
 800774e:	2300      	movs	r3, #0
 8007750:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8007754:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007758:	f361 0307 	bfi	r3, r1, #0, #8
 800775c:	b082      	sub	sp, #8
 800775e:	f362 230f 	bfi	r3, r2, #8, #8
 8007762:	f360 4317 	bfi	r3, r0, #16, #8
 8007766:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 800776a:	b002      	add	sp, #8
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop

08007770 <get_tensor_size>:
 8007770:	b111      	cbz	r1, 8007778 <get_tensor_size+0x8>
 8007772:	6983      	ldr	r3, [r0, #24]
 8007774:	6858      	ldr	r0, [r3, #4]
 8007776:	4770      	bx	lr
 8007778:	6883      	ldr	r3, [r0, #8]
 800777a:	0a1b      	lsrs	r3, r3, #8
 800777c:	d00a      	beq.n	8007794 <get_tensor_size+0x24>
 800777e:	68c1      	ldr	r1, [r0, #12]
 8007780:	2001      	movs	r0, #1
 8007782:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007786:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800778a:	4299      	cmp	r1, r3
 800778c:	fb02 f000 	mul.w	r0, r2, r0
 8007790:	d1f9      	bne.n	8007786 <get_tensor_size+0x16>
 8007792:	4770      	bx	lr
 8007794:	2001      	movs	r0, #1
 8007796:	4770      	bx	lr

08007798 <get_tensor_byte_size>:
 8007798:	b430      	push	{r4, r5}
 800779a:	6985      	ldr	r5, [r0, #24]
 800779c:	68c4      	ldr	r4, [r0, #12]
 800779e:	6941      	ldr	r1, [r0, #20]
 80077a0:	4b06      	ldr	r3, [pc, #24]	; (80077bc <get_tensor_byte_size+0x24>)
 80077a2:	6828      	ldr	r0, [r5, #0]
 80077a4:	4a06      	ldr	r2, [pc, #24]	; (80077c0 <get_tensor_byte_size+0x28>)
 80077a6:	4003      	ands	r3, r0
 80077a8:	68c9      	ldr	r1, [r1, #12]
 80077aa:	68e0      	ldr	r0, [r4, #12]
 80077ac:	4293      	cmp	r3, r2
 80077ae:	fb01 f000 	mul.w	r0, r1, r0
 80077b2:	d101      	bne.n	80077b8 <get_tensor_byte_size+0x20>
 80077b4:	3007      	adds	r0, #7
 80077b6:	08c0      	lsrs	r0, r0, #3
 80077b8:	bc30      	pop	{r4, r5}
 80077ba:	4770      	bx	lr
 80077bc:	017fffff 	.word	0x017fffff
 80077c0:	000400c0 	.word	0x000400c0

080077c4 <ai_buffer_get_size>:
 80077c4:	b368      	cbz	r0, 8007822 <ai_buffer_get_size+0x5e>
 80077c6:	4b17      	ldr	r3, [pc, #92]	; (8007824 <ai_buffer_get_size+0x60>)
 80077c8:	4a17      	ldr	r2, [pc, #92]	; (8007828 <ai_buffer_get_size+0x64>)
 80077ca:	b410      	push	{r4}
 80077cc:	6804      	ldr	r4, [r0, #0]
 80077ce:	4023      	ands	r3, r4
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d123      	bne.n	800781c <ai_buffer_get_size+0x58>
 80077d4:	b311      	cbz	r1, 800781c <ai_buffer_get_size+0x58>
 80077d6:	6984      	ldr	r4, [r0, #24]
 80077d8:	6862      	ldr	r2, [r4, #4]
 80077da:	321f      	adds	r2, #31
 80077dc:	f022 021f 	bic.w	r2, r2, #31
 80077e0:	7d03      	ldrb	r3, [r0, #20]
 80077e2:	6941      	ldr	r1, [r0, #20]
 80077e4:	f1a3 0301 	sub.w	r3, r3, #1
 80077e8:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80077ec:	fab3 f383 	clz	r3, r3
 80077f0:	095b      	lsrs	r3, r3, #5
 80077f2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80077f6:	da0c      	bge.n	8007812 <ai_buffer_get_size+0x4e>
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d103      	bne.n	8007804 <ai_buffer_get_size+0x40>
 80077fc:	2802      	cmp	r0, #2
 80077fe:	f04f 0302 	mov.w	r3, #2
 8007802:	d006      	beq.n	8007812 <ai_buffer_get_size+0x4e>
 8007804:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8007808:	3301      	adds	r3, #1
 800780a:	4298      	cmp	r0, r3
 800780c:	fb01 f202 	mul.w	r2, r1, r2
 8007810:	d1f2      	bne.n	80077f8 <ai_buffer_get_size+0x34>
 8007812:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8007816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	6984      	ldr	r4, [r0, #24]
 800781e:	6862      	ldr	r2, [r4, #4]
 8007820:	e7de      	b.n	80077e0 <ai_buffer_get_size+0x1c>
 8007822:	4770      	bx	lr
 8007824:	017fffff 	.word	0x017fffff
 8007828:	000400c0 	.word	0x000400c0

0800782c <ai_buffer_get_byte_size>:
 800782c:	b128      	cbz	r0, 800783a <ai_buffer_get_byte_size+0xe>
 800782e:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8007832:	fb01 f000 	mul.w	r0, r1, r0
 8007836:	3007      	adds	r0, #7
 8007838:	08c0      	lsrs	r0, r0, #3
 800783a:	4770      	bx	lr

0800783c <ai_buffer_array_sane>:
 800783c:	b138      	cbz	r0, 800784e <ai_buffer_array_sane+0x12>
 800783e:	6843      	ldr	r3, [r0, #4]
 8007840:	b123      	cbz	r3, 800784c <ai_buffer_array_sane+0x10>
 8007842:	8840      	ldrh	r0, [r0, #2]
 8007844:	3800      	subs	r0, #0
 8007846:	bf18      	it	ne
 8007848:	2001      	movne	r0, #1
 800784a:	4770      	bx	lr
 800784c:	4618      	mov	r0, r3
 800784e:	4770      	bx	lr

08007850 <ai_buffer_array_item_set_address>:
 8007850:	b150      	cbz	r0, 8007868 <ai_buffer_array_item_set_address+0x18>
 8007852:	6843      	ldr	r3, [r0, #4]
 8007854:	b14b      	cbz	r3, 800786a <ai_buffer_array_item_set_address+0x1a>
 8007856:	8840      	ldrh	r0, [r0, #2]
 8007858:	b900      	cbnz	r0, 800785c <ai_buffer_array_item_set_address+0xc>
 800785a:	4770      	bx	lr
 800785c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007860:	2001      	movs	r0, #1
 8007862:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007866:	605a      	str	r2, [r3, #4]
 8007868:	4770      	bx	lr
 800786a:	4618      	mov	r0, r3
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop

08007870 <_platform_observer_node_exec_cb>:
 8007870:	2a00      	cmp	r2, #0
 8007872:	d04f      	beq.n	8007914 <_platform_observer_node_exec_cb+0xa4>
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	6815      	ldr	r5, [r2, #0]
 8007878:	b084      	sub	sp, #16
 800787a:	4614      	mov	r4, r2
 800787c:	2d00      	cmp	r5, #0
 800787e:	d04b      	beq.n	8007918 <_platform_observer_node_exec_cb+0xa8>
 8007880:	8992      	ldrh	r2, [r2, #12]
 8007882:	460e      	mov	r6, r1
 8007884:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
 8007888:	fab2 f382 	clz	r3, r2
 800788c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007890:	095b      	lsrs	r3, r3, #5
 8007892:	4594      	cmp	ip, r2
 8007894:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8007898:	bf08      	it	eq
 800789a:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800789e:	b140      	cbz	r0, 80078b2 <_platform_observer_node_exec_cb+0x42>
 80078a0:	2801      	cmp	r0, #1
 80078a2:	d03c      	beq.n	800791e <_platform_observer_node_exec_cb+0xae>
 80078a4:	2802      	cmp	r0, #2
 80078a6:	d01e      	beq.n	80078e6 <_platform_observer_node_exec_cb+0x76>
 80078a8:	2803      	cmp	r0, #3
 80078aa:	d03e      	beq.n	800792a <_platform_observer_node_exec_cb+0xba>
 80078ac:	2000      	movs	r0, #0
 80078ae:	b004      	add	sp, #16
 80078b0:	bd70      	pop	{r4, r5, r6, pc}
 80078b2:	68a1      	ldr	r1, [r4, #8]
 80078b4:	07c9      	lsls	r1, r1, #31
 80078b6:	d404      	bmi.n	80078c2 <_platform_observer_node_exec_cb+0x52>
 80078b8:	3201      	adds	r2, #1
 80078ba:	2000      	movs	r0, #0
 80078bc:	81a2      	strh	r2, [r4, #12]
 80078be:	b004      	add	sp, #16
 80078c0:	bd70      	pop	{r4, r5, r6, pc}
 80078c2:	f043 0101 	orr.w	r1, r3, #1
 80078c6:	8873      	ldrh	r3, [r6, #2]
 80078c8:	f8ad 2000 	strh.w	r2, [sp]
 80078cc:	466a      	mov	r2, sp
 80078ce:	f8ad 3004 	strh.w	r3, [sp, #4]
 80078d2:	8833      	ldrh	r3, [r6, #0]
 80078d4:	9002      	str	r0, [sp, #8]
 80078d6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80078da:	69b3      	ldr	r3, [r6, #24]
 80078dc:	6860      	ldr	r0, [r4, #4]
 80078de:	9303      	str	r3, [sp, #12]
 80078e0:	47a8      	blx	r5
 80078e2:	89a2      	ldrh	r2, [r4, #12]
 80078e4:	e7e8      	b.n	80078b8 <_platform_observer_node_exec_cb+0x48>
 80078e6:	6121      	str	r1, [r4, #16]
 80078e8:	68a1      	ldr	r1, [r4, #8]
 80078ea:	0788      	lsls	r0, r1, #30
 80078ec:	d5de      	bpl.n	80078ac <_platform_observer_node_exec_cb+0x3c>
 80078ee:	f043 0102 	orr.w	r1, r3, #2
 80078f2:	8873      	ldrh	r3, [r6, #2]
 80078f4:	6860      	ldr	r0, [r4, #4]
 80078f6:	2400      	movs	r4, #0
 80078f8:	f8ad 2000 	strh.w	r2, [sp]
 80078fc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8007900:	8832      	ldrh	r2, [r6, #0]
 8007902:	69b3      	ldr	r3, [r6, #24]
 8007904:	f8ad 2002 	strh.w	r2, [sp, #2]
 8007908:	466a      	mov	r2, sp
 800790a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800790e:	47a8      	blx	r5
 8007910:	4620      	mov	r0, r4
 8007912:	e7d4      	b.n	80078be <_platform_observer_node_exec_cb+0x4e>
 8007914:	2001      	movs	r0, #1
 8007916:	4770      	bx	lr
 8007918:	2001      	movs	r0, #1
 800791a:	b004      	add	sp, #16
 800791c:	bd70      	pop	{r4, r5, r6, pc}
 800791e:	2300      	movs	r3, #0
 8007920:	6121      	str	r1, [r4, #16]
 8007922:	4618      	mov	r0, r3
 8007924:	81a3      	strh	r3, [r4, #12]
 8007926:	b004      	add	sp, #16
 8007928:	bd70      	pop	{r4, r5, r6, pc}
 800792a:	68a1      	ldr	r1, [r4, #8]
 800792c:	0749      	lsls	r1, r1, #29
 800792e:	d5c3      	bpl.n	80078b8 <_platform_observer_node_exec_cb+0x48>
 8007930:	6920      	ldr	r0, [r4, #16]
 8007932:	f043 0104 	orr.w	r1, r3, #4
 8007936:	f8ad 2000 	strh.w	r2, [sp]
 800793a:	2200      	movs	r2, #0
 800793c:	8843      	ldrh	r3, [r0, #2]
 800793e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8007942:	8803      	ldrh	r3, [r0, #0]
 8007944:	f8ad 3002 	strh.w	r3, [sp, #2]
 8007948:	6983      	ldr	r3, [r0, #24]
 800794a:	9202      	str	r2, [sp, #8]
 800794c:	466a      	mov	r2, sp
 800794e:	6860      	ldr	r0, [r4, #4]
 8007950:	9303      	str	r3, [sp, #12]
 8007952:	47a8      	blx	r5
 8007954:	89a2      	ldrh	r2, [r4, #12]
 8007956:	e7af      	b.n	80078b8 <_platform_observer_node_exec_cb+0x48>

08007958 <ai_platform_get_weights_map>:
 8007958:	2900      	cmp	r1, #0
 800795a:	bf18      	it	ne
 800795c:	2800      	cmpne	r0, #0
 800795e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007960:	bf0c      	ite	eq
 8007962:	2401      	moveq	r4, #1
 8007964:	2400      	movne	r4, #0
 8007966:	2a00      	cmp	r2, #0
 8007968:	bf08      	it	eq
 800796a:	f044 0401 	orreq.w	r4, r4, #1
 800796e:	b114      	cbz	r4, 8007976 <ai_platform_get_weights_map+0x1e>
 8007970:	2400      	movs	r4, #0
 8007972:	4620      	mov	r0, r4
 8007974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007976:	4616      	mov	r6, r2
 8007978:	4b22      	ldr	r3, [pc, #136]	; (8007a04 <ai_platform_get_weights_map+0xac>)
 800797a:	6812      	ldr	r2, [r2, #0]
 800797c:	4605      	mov	r5, r0
 800797e:	460f      	mov	r7, r1
 8007980:	429a      	cmp	r2, r3
 8007982:	d022      	beq.n	80079ca <ai_platform_get_weights_map+0x72>
 8007984:	6870      	ldr	r0, [r6, #4]
 8007986:	2800      	cmp	r0, #0
 8007988:	d0f2      	beq.n	8007970 <ai_platform_get_weights_map+0x18>
 800798a:	6806      	ldr	r6, [r0, #0]
 800798c:	429e      	cmp	r6, r3
 800798e:	d006      	beq.n	800799e <ai_platform_get_weights_map+0x46>
 8007990:	f1a1 0401 	sub.w	r4, r1, #1
 8007994:	6028      	str	r0, [r5, #0]
 8007996:	fab4 f484 	clz	r4, r4
 800799a:	0964      	lsrs	r4, r4, #5
 800799c:	e7e9      	b.n	8007972 <ai_platform_get_weights_map+0x1a>
 800799e:	3d04      	subs	r5, #4
 80079a0:	4602      	mov	r2, r0
 80079a2:	4621      	mov	r1, r4
 80079a4:	e000      	b.n	80079a8 <ai_platform_get_weights_map+0x50>
 80079a6:	4619      	mov	r1, r3
 80079a8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80079ac:	42b3      	cmp	r3, r6
 80079ae:	d025      	beq.n	80079fc <ai_platform_get_weights_map+0xa4>
 80079b0:	f845 3f04 	str.w	r3, [r5, #4]!
 80079b4:	1c4b      	adds	r3, r1, #1
 80079b6:	429f      	cmp	r7, r3
 80079b8:	d8f5      	bhi.n	80079a6 <ai_platform_get_weights_map+0x4e>
 80079ba:	d1da      	bne.n	8007972 <ai_platform_get_weights_map+0x1a>
 80079bc:	3102      	adds	r1, #2
 80079be:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80079c2:	42b3      	cmp	r3, r6
 80079c4:	d1d5      	bne.n	8007972 <ai_platform_get_weights_map+0x1a>
 80079c6:	2401      	movs	r4, #1
 80079c8:	e7d3      	b.n	8007972 <ai_platform_get_weights_map+0x1a>
 80079ca:	1d30      	adds	r0, r6, #4
 80079cc:	f7ff ff36 	bl	800783c <ai_buffer_array_sane>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d0cd      	beq.n	8007970 <ai_platform_get_weights_map+0x18>
 80079d4:	88f3      	ldrh	r3, [r6, #6]
 80079d6:	429f      	cmp	r7, r3
 80079d8:	d1ca      	bne.n	8007970 <ai_platform_get_weights_map+0x18>
 80079da:	3d04      	subs	r5, #4
 80079dc:	4622      	mov	r2, r4
 80079de:	68b3      	ldr	r3, [r6, #8]
 80079e0:	4423      	add	r3, r4
 80079e2:	341c      	adds	r4, #28
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	b123      	cbz	r3, 80079f2 <ai_platform_get_weights_map+0x9a>
 80079e8:	3201      	adds	r2, #1
 80079ea:	f845 3f04 	str.w	r3, [r5, #4]!
 80079ee:	4297      	cmp	r7, r2
 80079f0:	d8f5      	bhi.n	80079de <ai_platform_get_weights_map+0x86>
 80079f2:	1abc      	subs	r4, r7, r2
 80079f4:	fab4 f484 	clz	r4, r4
 80079f8:	0964      	lsrs	r4, r4, #5
 80079fa:	e7ba      	b.n	8007972 <ai_platform_get_weights_map+0x1a>
 80079fc:	428f      	cmp	r7, r1
 80079fe:	d1b8      	bne.n	8007972 <ai_platform_get_weights_map+0x1a>
 8007a00:	e7e1      	b.n	80079c6 <ai_platform_get_weights_map+0x6e>
 8007a02:	bf00      	nop
 8007a04:	a1facade 	.word	0xa1facade

08007a08 <ai_platform_get_activations_map>:
 8007a08:	2900      	cmp	r1, #0
 8007a0a:	bf18      	it	ne
 8007a0c:	2800      	cmpne	r0, #0
 8007a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a10:	bf0c      	ite	eq
 8007a12:	2401      	moveq	r4, #1
 8007a14:	2400      	movne	r4, #0
 8007a16:	2a00      	cmp	r2, #0
 8007a18:	bf08      	it	eq
 8007a1a:	f044 0401 	orreq.w	r4, r4, #1
 8007a1e:	b114      	cbz	r4, 8007a26 <ai_platform_get_activations_map+0x1e>
 8007a20:	2400      	movs	r4, #0
 8007a22:	4620      	mov	r0, r4
 8007a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a26:	4616      	mov	r6, r2
 8007a28:	4b22      	ldr	r3, [pc, #136]	; (8007ab4 <ai_platform_get_activations_map+0xac>)
 8007a2a:	6812      	ldr	r2, [r2, #0]
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	460f      	mov	r7, r1
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d022      	beq.n	8007a7a <ai_platform_get_activations_map+0x72>
 8007a34:	6a30      	ldr	r0, [r6, #32]
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d0f2      	beq.n	8007a20 <ai_platform_get_activations_map+0x18>
 8007a3a:	6806      	ldr	r6, [r0, #0]
 8007a3c:	429e      	cmp	r6, r3
 8007a3e:	d006      	beq.n	8007a4e <ai_platform_get_activations_map+0x46>
 8007a40:	f1a1 0401 	sub.w	r4, r1, #1
 8007a44:	6028      	str	r0, [r5, #0]
 8007a46:	fab4 f484 	clz	r4, r4
 8007a4a:	0964      	lsrs	r4, r4, #5
 8007a4c:	e7e9      	b.n	8007a22 <ai_platform_get_activations_map+0x1a>
 8007a4e:	3d04      	subs	r5, #4
 8007a50:	4602      	mov	r2, r0
 8007a52:	4621      	mov	r1, r4
 8007a54:	e000      	b.n	8007a58 <ai_platform_get_activations_map+0x50>
 8007a56:	4619      	mov	r1, r3
 8007a58:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8007a5c:	42b3      	cmp	r3, r6
 8007a5e:	d026      	beq.n	8007aae <ai_platform_get_activations_map+0xa6>
 8007a60:	f845 3f04 	str.w	r3, [r5, #4]!
 8007a64:	1c4b      	adds	r3, r1, #1
 8007a66:	429f      	cmp	r7, r3
 8007a68:	d8f5      	bhi.n	8007a56 <ai_platform_get_activations_map+0x4e>
 8007a6a:	d1da      	bne.n	8007a22 <ai_platform_get_activations_map+0x1a>
 8007a6c:	3102      	adds	r1, #2
 8007a6e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8007a72:	42b3      	cmp	r3, r6
 8007a74:	d1d5      	bne.n	8007a22 <ai_platform_get_activations_map+0x1a>
 8007a76:	2401      	movs	r4, #1
 8007a78:	e7d3      	b.n	8007a22 <ai_platform_get_activations_map+0x1a>
 8007a7a:	f106 000c 	add.w	r0, r6, #12
 8007a7e:	f7ff fedd 	bl	800783c <ai_buffer_array_sane>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d0cc      	beq.n	8007a20 <ai_platform_get_activations_map+0x18>
 8007a86:	89f3      	ldrh	r3, [r6, #14]
 8007a88:	429f      	cmp	r7, r3
 8007a8a:	d1c9      	bne.n	8007a20 <ai_platform_get_activations_map+0x18>
 8007a8c:	3d04      	subs	r5, #4
 8007a8e:	4622      	mov	r2, r4
 8007a90:	6933      	ldr	r3, [r6, #16]
 8007a92:	4423      	add	r3, r4
 8007a94:	341c      	adds	r4, #28
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	b123      	cbz	r3, 8007aa4 <ai_platform_get_activations_map+0x9c>
 8007a9a:	3201      	adds	r2, #1
 8007a9c:	f845 3f04 	str.w	r3, [r5, #4]!
 8007aa0:	4297      	cmp	r7, r2
 8007aa2:	d8f5      	bhi.n	8007a90 <ai_platform_get_activations_map+0x88>
 8007aa4:	1abc      	subs	r4, r7, r2
 8007aa6:	fab4 f484 	clz	r4, r4
 8007aaa:	0964      	lsrs	r4, r4, #5
 8007aac:	e7b9      	b.n	8007a22 <ai_platform_get_activations_map+0x1a>
 8007aae:	428f      	cmp	r7, r1
 8007ab0:	d1b7      	bne.n	8007a22 <ai_platform_get_activations_map+0x1a>
 8007ab2:	e7e0      	b.n	8007a76 <ai_platform_get_activations_map+0x6e>
 8007ab4:	a1facade 	.word	0xa1facade

08007ab8 <ai_platform_bind_network_params>:
 8007ab8:	2a00      	cmp	r2, #0
 8007aba:	bf18      	it	ne
 8007abc:	2900      	cmpne	r1, #0
 8007abe:	d010      	beq.n	8007ae2 <ai_platform_bind_network_params+0x2a>
 8007ac0:	b178      	cbz	r0, 8007ae2 <ai_platform_bind_network_params+0x2a>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	4808      	ldr	r0, [pc, #32]	; (8007ae8 <ai_platform_bind_network_params+0x30>)
 8007ac6:	f103 0c0c 	add.w	ip, r3, #12
 8007aca:	f843 0b04 	str.w	r0, [r3], #4
 8007ace:	c903      	ldmia	r1, {r0, r1}
 8007ad0:	e883 0003 	stmia.w	r3, {r0, r1}
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ada:	e88c 0003 	stmia.w	ip, {r0, r1}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	4770      	bx	lr
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	4770      	bx	lr
 8007ae8:	a1facade 	.word	0xa1facade

08007aec <ai_platform_runtime_get_revision>:
 8007aec:	4800      	ldr	r0, [pc, #0]	; (8007af0 <ai_platform_runtime_get_revision+0x4>)
 8007aee:	4770      	bx	lr
 8007af0:	080dc584 	.word	0x080dc584

08007af4 <ai_platform_runtime_get_version>:
 8007af4:	4b0a      	ldr	r3, [pc, #40]	; (8007b20 <ai_platform_runtime_get_version+0x2c>)
 8007af6:	2000      	movs	r0, #0
 8007af8:	b082      	sub	sp, #8
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	fa5f fc83 	uxtb.w	ip, r3
 8007b00:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8007b04:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007b08:	0e1b      	lsrs	r3, r3, #24
 8007b0a:	f36c 0007 	bfi	r0, ip, #0, #8
 8007b0e:	f361 200f 	bfi	r0, r1, #8, #8
 8007b12:	f362 4017 	bfi	r0, r2, #16, #8
 8007b16:	f363 601f 	bfi	r0, r3, #24, #8
 8007b1a:	b002      	add	sp, #8
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	080dc588 	.word	0x080dc588

08007b24 <ai_platform_api_get_version>:
 8007b24:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <ai_platform_api_get_version+0x2c>)
 8007b26:	2000      	movs	r0, #0
 8007b28:	b082      	sub	sp, #8
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	fa5f fc83 	uxtb.w	ip, r3
 8007b30:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8007b34:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007b38:	0e1b      	lsrs	r3, r3, #24
 8007b3a:	f36c 0007 	bfi	r0, ip, #0, #8
 8007b3e:	f361 200f 	bfi	r0, r1, #8, #8
 8007b42:	f362 4017 	bfi	r0, r2, #16, #8
 8007b46:	f363 601f 	bfi	r0, r3, #24, #8
 8007b4a:	b002      	add	sp, #8
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	080dc58c 	.word	0x080dc58c

08007b54 <ai_platform_interface_api_get_version>:
 8007b54:	4b0a      	ldr	r3, [pc, #40]	; (8007b80 <ai_platform_interface_api_get_version+0x2c>)
 8007b56:	2000      	movs	r0, #0
 8007b58:	b082      	sub	sp, #8
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	fa5f fc83 	uxtb.w	ip, r3
 8007b60:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8007b64:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007b68:	0e1b      	lsrs	r3, r3, #24
 8007b6a:	f36c 0007 	bfi	r0, ip, #0, #8
 8007b6e:	f361 200f 	bfi	r0, r1, #8, #8
 8007b72:	f362 4017 	bfi	r0, r2, #16, #8
 8007b76:	f363 601f 	bfi	r0, r3, #24, #8
 8007b7a:	b002      	add	sp, #8
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	080dc590 	.word	0x080dc590

08007b84 <ai_platform_context_acquire>:
 8007b84:	6802      	ldr	r2, [r0, #0]
 8007b86:	4b02      	ldr	r3, [pc, #8]	; (8007b90 <ai_platform_context_acquire+0xc>)
 8007b88:	4393      	bics	r3, r2
 8007b8a:	bf18      	it	ne
 8007b8c:	2000      	movne	r0, #0
 8007b8e:	4770      	bx	lr
 8007b90:	a1c00100 	.word	0xa1c00100

08007b94 <ai_platform_network_get_error>:
 8007b94:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <ai_platform_network_get_error+0x14>)
 8007b96:	6802      	ldr	r2, [r0, #0]
 8007b98:	4393      	bics	r3, r2
 8007b9a:	d102      	bne.n	8007ba2 <ai_platform_network_get_error+0xe>
 8007b9c:	300c      	adds	r0, #12
 8007b9e:	f000 bdb1 	b.w	8008704 <core_get_error>
 8007ba2:	f241 0010 	movw	r0, #4112	; 0x1010
 8007ba6:	4770      	bx	lr
 8007ba8:	a1c00100 	.word	0xa1c00100

08007bac <ai_platform_network_set_error>:
 8007bac:	b110      	cbz	r0, 8007bb4 <ai_platform_network_set_error+0x8>
 8007bae:	300c      	adds	r0, #12
 8007bb0:	f000 bdae 	b.w	8008710 <core_set_error>
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop

08007bb8 <ai_platform_api_get_network_report>:
 8007bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	4ba3      	ldr	r3, [pc, #652]	; (8007e4c <ai_platform_api_get_network_report+0x294>)
 8007bbe:	b089      	sub	sp, #36	; 0x24
 8007bc0:	6802      	ldr	r2, [r0, #0]
 8007bc2:	9002      	str	r0, [sp, #8]
 8007bc4:	4393      	bics	r3, r2
 8007bc6:	d177      	bne.n	8007cb8 <ai_platform_api_get_network_report+0x100>
 8007bc8:	4688      	mov	r8, r1
 8007bca:	2900      	cmp	r1, #0
 8007bcc:	d074      	beq.n	8007cb8 <ai_platform_api_get_network_report+0x100>
 8007bce:	2400      	movs	r4, #0
 8007bd0:	67cc      	str	r4, [r1, #124]	; 0x7c
 8007bd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007bd4:	b14b      	cbz	r3, 8007bea <ai_platform_api_get_network_report+0x32>
 8007bd6:	3401      	adds	r4, #1
 8007bd8:	f8c8 407c 	str.w	r4, [r8, #124]	; 0x7c
 8007bdc:	691a      	ldr	r2, [r3, #16]
 8007bde:	b122      	cbz	r2, 8007bea <ai_platform_api_get_network_report+0x32>
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d002      	beq.n	8007bea <ai_platform_api_get_network_report+0x32>
 8007be4:	4613      	mov	r3, r2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1f5      	bne.n	8007bd6 <ai_platform_api_get_network_report+0x1e>
 8007bea:	2c00      	cmp	r4, #0
 8007bec:	f000 8161 	beq.w	8007eb2 <ai_platform_api_get_network_report+0x2fa>
 8007bf0:	9a02      	ldr	r2, [sp, #8]
 8007bf2:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d050      	beq.n	8007c9a <ai_platform_api_get_network_report+0xe2>
 8007bf8:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8007bfc:	f1ba 0f00 	cmp.w	sl, #0
 8007c00:	d04b      	beq.n	8007c9a <ai_platform_api_get_network_report+0xe2>
 8007c02:	f04f 0b00 	mov.w	fp, #0
 8007c06:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c0a:	465d      	mov	r5, fp
 8007c0c:	e015      	b.n	8007c3a <ai_platform_api_get_network_report+0x82>
 8007c0e:	00ea      	lsls	r2, r5, #3
 8007c10:	2101      	movs	r1, #1
 8007c12:	50b9      	str	r1, [r7, r2]
 8007c14:	69b2      	ldr	r2, [r6, #24]
 8007c16:	6856      	ldr	r6, [r2, #4]
 8007c18:	f04f 0201 	mov.w	r2, #1
 8007c1c:	60a3      	str	r3, [r4, #8]
 8007c1e:	3501      	adds	r5, #1
 8007c20:	7522      	strb	r2, [r4, #20]
 8007c22:	f10b 0b1c 	add.w	fp, fp, #28
 8007c26:	6963      	ldr	r3, [r4, #20]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f368 231f 	bfi	r3, r8, #8, #24
 8007c2e:	e9c4 0c00 	strd	r0, ip, [r4]
 8007c32:	e9c4 2603 	strd	r2, r6, [r4, #12]
 8007c36:	e9c4 3905 	strd	r3, r9, [r4, #20]
 8007c3a:	f8ba 3000 	ldrh.w	r3, [sl]
 8007c3e:	b2aa      	uxth	r2, r5
 8007c40:	429d      	cmp	r5, r3
 8007c42:	d23e      	bcs.n	8007cc2 <ai_platform_api_get_network_report+0x10a>
 8007c44:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d03a      	beq.n	8007cc2 <ai_platform_api_get_network_report+0x10a>
 8007c4c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8007c50:	2e00      	cmp	r6, #0
 8007c52:	d036      	beq.n	8007cc2 <ai_platform_api_get_network_report+0x10a>
 8007c54:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007c58:	00ea      	lsls	r2, r5, #3
 8007c5a:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8007c5e:	9201      	str	r2, [sp, #4]
 8007c60:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8007c64:	69b3      	ldr	r3, [r6, #24]
 8007c66:	445c      	add	r4, fp
 8007c68:	6818      	ldr	r0, [r3, #0]
 8007c6a:	68b3      	ldr	r3, [r6, #8]
 8007c6c:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8007c70:	f002 fdd2 	bl	800a818 <ai_array_to_buffer_fmt>
 8007c74:	69b2      	ldr	r2, [r6, #24]
 8007c76:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8007c7a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0c9      	beq.n	8007c16 <ai_platform_api_get_network_report+0x5e>
 8007c82:	2200      	movs	r2, #0
 8007c84:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 8007c88:	6832      	ldr	r2, [r6, #0]
 8007c8a:	605a      	str	r2, [r3, #4]
 8007c8c:	b112      	cbz	r2, 8007c94 <ai_platform_api_get_network_report+0xdc>
 8007c8e:	8852      	ldrh	r2, [r2, #2]
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	d1bc      	bne.n	8007c0e <ai_platform_api_get_network_report+0x56>
 8007c94:	69b2      	ldr	r2, [r6, #24]
 8007c96:	2300      	movs	r3, #0
 8007c98:	e7bd      	b.n	8007c16 <ai_platform_api_get_network_report+0x5e>
 8007c9a:	2400      	movs	r4, #0
 8007c9c:	9802      	ldr	r0, [sp, #8]
 8007c9e:	2218      	movs	r2, #24
 8007ca0:	2112      	movs	r1, #18
 8007ca2:	300c      	adds	r0, #12
 8007ca4:	f8c8 403c 	str.w	r4, [r8, #60]	; 0x3c
 8007ca8:	f8a8 4038 	strh.w	r4, [r8, #56]	; 0x38
 8007cac:	f000 fd30 	bl	8008710 <core_set_error>
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	b009      	add	sp, #36	; 0x24
 8007cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb8:	2400      	movs	r4, #0
 8007cba:	4620      	mov	r0, r4
 8007cbc:	b009      	add	sp, #36	; 0x24
 8007cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007cc6:	2a00      	cmp	r2, #0
 8007cc8:	d0e7      	beq.n	8007c9a <ai_platform_api_get_network_report+0xe2>
 8007cca:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f8a8 2038 	strh.w	r2, [r8, #56]	; 0x38
 8007cd4:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
 8007cd8:	9b02      	ldr	r3, [sp, #8]
 8007cda:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	f240 80a5 	bls.w	8007e2c <ai_platform_api_get_network_report+0x274>
 8007ce2:	f04f 0a00 	mov.w	sl, #0
 8007ce6:	9b02      	ldr	r3, [sp, #8]
 8007ce8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cec:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 8007cf0:	4655      	mov	r5, sl
 8007cf2:	e016      	b.n	8007d22 <ai_platform_api_get_network_report+0x16a>
 8007cf4:	00e9      	lsls	r1, r5, #3
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	507b      	str	r3, [r7, r1]
 8007cfa:	69b1      	ldr	r1, [r6, #24]
 8007cfc:	f04f 0301 	mov.w	r3, #1
 8007d00:	6849      	ldr	r1, [r1, #4]
 8007d02:	3501      	adds	r5, #1
 8007d04:	f10a 0a1c 	add.w	sl, sl, #28
 8007d08:	7523      	strb	r3, [r4, #20]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60a0      	str	r0, [r4, #8]
 8007d0e:	f8c4 b018 	str.w	fp, [r4, #24]
 8007d12:	e9c4 3103 	strd	r3, r1, [r4, #12]
 8007d16:	6961      	ldr	r1, [r4, #20]
 8007d18:	f368 211f 	bfi	r1, r8, #8, #24
 8007d1c:	e9c4 c200 	strd	ip, r2, [r4]
 8007d20:	6161      	str	r1, [r4, #20]
 8007d22:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007d26:	b2aa      	uxth	r2, r5
 8007d28:	42ab      	cmp	r3, r5
 8007d2a:	d928      	bls.n	8007d7e <ai_platform_api_get_network_report+0x1c6>
 8007d2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d30:	b32b      	cbz	r3, 8007d7e <ai_platform_api_get_network_report+0x1c6>
 8007d32:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8007d36:	b316      	cbz	r6, 8007d7e <ai_platform_api_get_network_report+0x1c6>
 8007d38:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007d3c:	00ea      	lsls	r2, r5, #3
 8007d3e:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8007d42:	9201      	str	r2, [sp, #4]
 8007d44:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8007d48:	69b3      	ldr	r3, [r6, #24]
 8007d4a:	4454      	add	r4, sl
 8007d4c:	6818      	ldr	r0, [r3, #0]
 8007d4e:	68b3      	ldr	r3, [r6, #8]
 8007d50:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8007d54:	f002 fd60 	bl	800a818 <ai_array_to_buffer_fmt>
 8007d58:	69b1      	ldr	r1, [r6, #24]
 8007d5a:	4684      	mov	ip, r0
 8007d5c:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8007d60:	688a      	ldr	r2, [r1, #8]
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d0ca      	beq.n	8007cfc <ai_platform_api_get_network_report+0x144>
 8007d66:	2100      	movs	r1, #0
 8007d68:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8007d6c:	6831      	ldr	r1, [r6, #0]
 8007d6e:	6041      	str	r1, [r0, #4]
 8007d70:	b111      	cbz	r1, 8007d78 <ai_platform_api_get_network_report+0x1c0>
 8007d72:	8849      	ldrh	r1, [r1, #2]
 8007d74:	2900      	cmp	r1, #0
 8007d76:	d1bd      	bne.n	8007cf4 <ai_platform_api_get_network_report+0x13c>
 8007d78:	69b1      	ldr	r1, [r6, #24]
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e7be      	b.n	8007cfc <ai_platform_api_get_network_report+0x144>
 8007d7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007d82:	2a00      	cmp	r2, #0
 8007d84:	d052      	beq.n	8007e2c <ai_platform_api_get_network_report+0x274>
 8007d86:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007d8a:	9902      	ldr	r1, [sp, #8]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f101 0628 	add.w	r6, r1, #40	; 0x28
 8007d92:	f8a8 203a 	strh.w	r2, [r8, #58]	; 0x3a
 8007d96:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	f7ff fd4e 	bl	800783c <ai_buffer_array_sane>
 8007da0:	4604      	mov	r4, r0
 8007da2:	b940      	cbnz	r0, 8007db6 <ai_platform_api_get_network_report+0x1fe>
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff fd49 	bl	800783c <ai_buffer_array_sane>
 8007daa:	b120      	cbz	r0, 8007db6 <ai_platform_api_get_network_report+0x1fe>
 8007dac:	9b02      	ldr	r3, [sp, #8]
 8007dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f040 8088 	bne.w	8007ec6 <ai_platform_api_get_network_report+0x30e>
 8007db6:	9d02      	ldr	r5, [sp, #8]
 8007db8:	f105 0720 	add.w	r7, r5, #32
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	f7ff fd3d 	bl	800783c <ai_buffer_array_sane>
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	b930      	cbnz	r0, 8007dd4 <ai_platform_api_get_network_report+0x21c>
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	f7ff fd38 	bl	800783c <ai_buffer_array_sane>
 8007dcc:	b110      	cbz	r0, 8007dd4 <ai_platform_api_get_network_report+0x21c>
 8007dce:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d17f      	bne.n	8007ed4 <ai_platform_api_get_network_report+0x31c>
 8007dd4:	9a02      	ldr	r2, [sp, #8]
 8007dd6:	f240 2401 	movw	r4, #513	; 0x201
 8007dda:	6853      	ldr	r3, [r2, #4]
 8007ddc:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80
 8007de0:	4b1b      	ldr	r3, [pc, #108]	; (8007e50 <ai_platform_api_get_network_report+0x298>)
 8007de2:	f8c8 3010 	str.w	r3, [r8, #16]
 8007de6:	f240 1309 	movw	r3, #265	; 0x109
 8007dea:	f8c8 3014 	str.w	r3, [r8, #20]
 8007dee:	f240 5301 	movw	r3, #1281	; 0x501
 8007df2:	e9c8 4309 	strd	r4, r3, [r8, #36]	; 0x24
 8007df6:	6890      	ldr	r0, [r2, #8]
 8007df8:	f7ff fca8 	bl	800774c <ai_platform_version_get>
 8007dfc:	4b15      	ldr	r3, [pc, #84]	; (8007e54 <ai_platform_api_get_network_report+0x29c>)
 8007dfe:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8007e02:	f8c8 0020 	str.w	r0, [r8, #32]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d126      	bne.n	8007e58 <ai_platform_api_get_network_report+0x2a0>
 8007e0a:	f108 0250 	add.w	r2, r8, #80	; 0x50
 8007e0e:	f108 0348 	add.w	r3, r8, #72	; 0x48
 8007e12:	2401      	movs	r4, #1
 8007e14:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007e18:	e882 0003 	stmia.w	r2, {r0, r1}
 8007e1c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8007e20:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e24:	4620      	mov	r0, r4
 8007e26:	b009      	add	sp, #36	; 0x24
 8007e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2c:	2400      	movs	r4, #0
 8007e2e:	9802      	ldr	r0, [sp, #8]
 8007e30:	2218      	movs	r2, #24
 8007e32:	2113      	movs	r1, #19
 8007e34:	f8c8 4040 	str.w	r4, [r8, #64]	; 0x40
 8007e38:	300c      	adds	r0, #12
 8007e3a:	f8a8 403a 	strh.w	r4, [r8, #58]	; 0x3a
 8007e3e:	f000 fc67 	bl	8008710 <core_set_error>
 8007e42:	4620      	mov	r0, r4
 8007e44:	b009      	add	sp, #36	; 0x24
 8007e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4a:	bf00      	nop
 8007e4c:	a1c00100 	.word	0xa1c00100
 8007e50:	080dc584 	.word	0x080dc584
 8007e54:	a1facade 	.word	0xa1facade
 8007e58:	2200      	movs	r2, #0
 8007e5a:	4b3a      	ldr	r3, [pc, #232]	; (8007f44 <ai_platform_api_get_network_report+0x38c>)
 8007e5c:	f108 0a44 	add.w	sl, r8, #68	; 0x44
 8007e60:	f10d 0c10 	add.w	ip, sp, #16
 8007e64:	f108 0960 	add.w	r9, r8, #96	; 0x60
 8007e68:	4655      	mov	r5, sl
 8007e6a:	f8c8 c05c 	str.w	ip, [r8, #92]	; 0x5c
 8007e6e:	464c      	mov	r4, r9
 8007e70:	e9c8 2212 	strd	r2, r2, [r8, #72]	; 0x48
 8007e74:	e9c8 2214 	strd	r2, r2, [r8, #80]	; 0x50
 8007e78:	4a33      	ldr	r2, [pc, #204]	; (8007f48 <ai_platform_api_get_network_report+0x390>)
 8007e7a:	f8c8 2044 	str.w	r2, [r8, #68]	; 0x44
 8007e7e:	f240 4201 	movw	r2, #1025	; 0x401
 8007e82:	f8c8 2058 	str.w	r2, [r8, #88]	; 0x58
 8007e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e88:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8007e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f7ff fccf 	bl	800783c <ai_buffer_array_sane>
 8007e9e:	bb78      	cbnz	r0, 8007f00 <ai_platform_api_get_network_report+0x348>
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f7ff fccb 	bl	800783c <ai_buffer_array_sane>
 8007ea6:	b9e0      	cbnz	r0, 8007ee2 <ai_platform_api_get_network_report+0x32a>
 8007ea8:	2401      	movs	r4, #1
 8007eaa:	4620      	mov	r0, r4
 8007eac:	b009      	add	sp, #36	; 0x24
 8007eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb2:	9802      	ldr	r0, [sp, #8]
 8007eb4:	2218      	movs	r2, #24
 8007eb6:	2111      	movs	r1, #17
 8007eb8:	300c      	adds	r0, #12
 8007eba:	f000 fc29 	bl	8008710 <core_set_error>
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	b009      	add	sp, #36	; 0x24
 8007ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec6:	9802      	ldr	r0, [sp, #8]
 8007ec8:	2213      	movs	r2, #19
 8007eca:	2111      	movs	r1, #17
 8007ecc:	300c      	adds	r0, #12
 8007ece:	f000 fc1f 	bl	8008710 <core_set_error>
 8007ed2:	e6ed      	b.n	8007cb0 <ai_platform_api_get_network_report+0xf8>
 8007ed4:	9802      	ldr	r0, [sp, #8]
 8007ed6:	2212      	movs	r2, #18
 8007ed8:	2111      	movs	r1, #17
 8007eda:	300c      	adds	r0, #12
 8007edc:	f000 fc18 	bl	8008710 <core_set_error>
 8007ee0:	e6e6      	b.n	8007cb0 <ai_platform_api_get_network_report+0xf8>
 8007ee2:	4638      	mov	r0, r7
 8007ee4:	f7ff fcaa 	bl	800783c <ai_buffer_array_sane>
 8007ee8:	b1c0      	cbz	r0, 8007f1c <ai_platform_api_get_network_report+0x364>
 8007eea:	9b02      	ldr	r3, [sp, #8]
 8007eec:	46d0      	mov	r8, sl
 8007eee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ef2:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8007ef6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007efa:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8007efe:	e7d3      	b.n	8007ea8 <ai_platform_api_get_network_report+0x2f0>
 8007f00:	4630      	mov	r0, r6
 8007f02:	f7ff fc9b 	bl	800783c <ai_buffer_array_sane>
 8007f06:	b198      	cbz	r0, 8007f30 <ai_platform_api_get_network_report+0x378>
 8007f08:	9b02      	ldr	r3, [sp, #8]
 8007f0a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8007f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f0e:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8007f12:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007f16:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8007f1a:	e7c1      	b.n	8007ea0 <ai_platform_api_get_network_report+0x2e8>
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	46d0      	mov	r8, sl
 8007f20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f22:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8007f26:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007f2a:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8007f2e:	deff      	udf	#255	; 0xff
 8007f30:	4604      	mov	r4, r0
 8007f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f34:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8007f38:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007f3c:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8007f40:	deff      	udf	#255	; 0xff
 8007f42:	bf00      	nop
 8007f44:	0800deb0 	.word	0x0800deb0
 8007f48:	00040440 	.word	0x00040440

08007f4c <ai_platform_network_create>:
 8007f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f50:	b083      	sub	sp, #12
 8007f52:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8007f56:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8007f5a:	b320      	cbz	r0, 8007fa6 <ai_platform_network_create+0x5a>
 8007f5c:	6002      	str	r2, [r0, #0]
 8007f5e:	4616      	mov	r6, r2
 8007f60:	461f      	mov	r7, r3
 8007f62:	4604      	mov	r4, r0
 8007f64:	f000 fbcc 	bl	8008700 <core_init>
 8007f68:	b970      	cbnz	r0, 8007f88 <ai_platform_network_create+0x3c>
 8007f6a:	2530      	movs	r5, #48	; 0x30
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	6023      	str	r3, [r4, #0]
 8007f70:	2410      	movs	r4, #16
 8007f72:	464a      	mov	r2, r9
 8007f74:	4641      	mov	r1, r8
 8007f76:	4638      	mov	r0, r7
 8007f78:	f7ff fbe2 	bl	8007740 <ai_version_get>
 8007f7c:	60b0      	str	r0, [r6, #8]
 8007f7e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8007f82:	b003      	add	sp, #12
 8007f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f88:	2200      	movs	r2, #0
 8007f8a:	4641      	mov	r1, r8
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	f7ff fbd7 	bl	8007740 <ai_version_get>
 8007f92:	4605      	mov	r5, r0
 8007f94:	2200      	movs	r2, #0
 8007f96:	2105      	movs	r1, #5
 8007f98:	2001      	movs	r0, #1
 8007f9a:	f7ff fbd1 	bl	8007740 <ai_version_get>
 8007f9e:	4285      	cmp	r5, r0
 8007fa0:	d008      	beq.n	8007fb4 <ai_platform_network_create+0x68>
 8007fa2:	2501      	movs	r5, #1
 8007fa4:	e7e2      	b.n	8007f6c <ai_platform_network_create+0x20>
 8007fa6:	2510      	movs	r5, #16
 8007fa8:	462c      	mov	r4, r5
 8007faa:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8007fae:	b003      	add	sp, #12
 8007fb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fb4:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <ai_platform_network_create+0x80>)
 8007fb6:	a801      	add	r0, sp, #4
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	f000 fbb5 	bl	8008728 <ai_check_custom_types>
 8007fbe:	b110      	cbz	r0, 8007fc6 <ai_platform_network_create+0x7a>
 8007fc0:	2400      	movs	r4, #0
 8007fc2:	4625      	mov	r5, r4
 8007fc4:	e7d5      	b.n	8007f72 <ai_platform_network_create+0x26>
 8007fc6:	2502      	movs	r5, #2
 8007fc8:	e7d0      	b.n	8007f6c <ai_platform_network_create+0x20>
 8007fca:	bf00      	nop
 8007fcc:	84048403 	.word	0x84048403

08007fd0 <ai_platform_network_destroy>:
 8007fd0:	4a07      	ldr	r2, [pc, #28]	; (8007ff0 <ai_platform_network_destroy+0x20>)
 8007fd2:	b508      	push	{r3, lr}
 8007fd4:	6801      	ldr	r1, [r0, #0]
 8007fd6:	ea01 0c02 	and.w	ip, r1, r2
 8007fda:	438a      	bics	r2, r1
 8007fdc:	d102      	bne.n	8007fe4 <ai_platform_network_destroy+0x14>
 8007fde:	4561      	cmp	r1, ip
 8007fe0:	d001      	beq.n	8007fe6 <ai_platform_network_destroy+0x16>
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	bd08      	pop	{r3, pc}
 8007fe6:	f000 fc31 	bl	800884c <ai_layers_destroy_all>
 8007fea:	2000      	movs	r0, #0
 8007fec:	bd08      	pop	{r3, pc}
 8007fee:	bf00      	nop
 8007ff0:	a1c00100 	.word	0xa1c00100

08007ff4 <ai_platform_network_init>:
 8007ff4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff8:	4a5c      	ldr	r2, [pc, #368]	; (800816c <ai_platform_network_init+0x178>)
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	6801      	ldr	r1, [r0, #0]
 8007ffe:	438a      	bics	r2, r1
 8008000:	d133      	bne.n	800806a <ai_platform_network_init+0x76>
 8008002:	4605      	mov	r5, r0
 8008004:	2c00      	cmp	r4, #0
 8008006:	f000 8093 	beq.w	8008130 <ai_platform_network_init+0x13c>
 800800a:	f8d4 b000 	ldr.w	fp, [r4]
 800800e:	4a58      	ldr	r2, [pc, #352]	; (8008170 <ai_platform_network_init+0x17c>)
 8008010:	4593      	cmp	fp, r2
 8008012:	d10f      	bne.n	8008034 <ai_platform_network_init+0x40>
 8008014:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 8008018:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800801c:	4b53      	ldr	r3, [pc, #332]	; (800816c <ai_platform_network_init+0x178>)
 800801e:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 8008022:	0c32      	lsrs	r2, r6, #16
 8008024:	4299      	cmp	r1, r3
 8008026:	d02c      	beq.n	8008082 <ai_platform_network_init+0x8e>
 8008028:	2303      	movs	r3, #3
 800802a:	462c      	mov	r4, r5
 800802c:	612b      	str	r3, [r5, #16]
 800802e:	4620      	mov	r0, r4
 8008030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008034:	4627      	mov	r7, r4
 8008036:	2101      	movs	r1, #1
 8008038:	6864      	ldr	r4, [r4, #4]
 800803a:	4638      	mov	r0, r7
 800803c:	f107 081c 	add.w	r8, r7, #28
 8008040:	f7ff fbc0 	bl	80077c4 <ai_buffer_get_size>
 8008044:	4606      	mov	r6, r0
 8008046:	2101      	movs	r1, #1
 8008048:	4640      	mov	r0, r8
 800804a:	f8d7 9020 	ldr.w	r9, [r7, #32]
 800804e:	f7ff fbb9 	bl	80077c4 <ai_buffer_get_size>
 8008052:	b976      	cbnz	r6, 8008072 <ai_platform_network_init+0x7e>
 8008054:	2800      	cmp	r0, #0
 8008056:	d150      	bne.n	80080fa <ai_platform_network_init+0x106>
 8008058:	4680      	mov	r8, r0
 800805a:	4686      	mov	lr, r0
 800805c:	4606      	mov	r6, r0
 800805e:	4607      	mov	r7, r0
 8008060:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8008064:	6829      	ldr	r1, [r5, #0]
 8008066:	0436      	lsls	r6, r6, #16
 8008068:	e7d8      	b.n	800801c <ai_platform_network_init+0x28>
 800806a:	2400      	movs	r4, #0
 800806c:	4620      	mov	r0, r4
 800806e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008072:	2800      	cmp	r0, #0
 8008074:	d13b      	bne.n	80080ee <ai_platform_network_init+0xfa>
 8008076:	4680      	mov	r8, r0
 8008078:	4686      	mov	lr, r0
 800807a:	2c00      	cmp	r4, #0
 800807c:	d05e      	beq.n	800813c <ai_platform_network_init+0x148>
 800807e:	2601      	movs	r6, #1
 8008080:	e7ee      	b.n	8008060 <ai_platform_network_init+0x6c>
 8008082:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8008084:	4293      	cmp	r3, r2
 8008086:	4b3a      	ldr	r3, [pc, #232]	; (8008170 <ai_platform_network_init+0x17c>)
 8008088:	d33e      	bcc.n	8008108 <ai_platform_network_init+0x114>
 800808a:	459b      	cmp	fp, r3
 800808c:	d03e      	beq.n	800810c <ai_platform_network_init+0x118>
 800808e:	b1a2      	cbz	r2, 80080ba <ai_platform_network_init+0xc6>
 8008090:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8008094:	f04f 0c00 	mov.w	ip, #0
 8008098:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800809c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800809e:	eb07 0b0c 	add.w	fp, r7, ip
 80080a2:	4464      	add	r4, ip
 80080a4:	f10c 0c1c 	add.w	ip, ip, #28
 80080a8:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80080ac:	45cc      	cmp	ip, r9
 80080ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080b0:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 80080b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80080b8:	d1f0      	bne.n	800809c <ai_platform_network_init+0xa8>
 80080ba:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80080bc:	622e      	str	r6, [r5, #32]
 80080be:	4553      	cmp	r3, sl
 80080c0:	d34b      	bcc.n	800815a <ai_platform_network_init+0x166>
 80080c2:	f1ba 0f00 	cmp.w	sl, #0
 80080c6:	d025      	beq.n	8008114 <ai_platform_network_init+0x120>
 80080c8:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 80080cc:	2700      	movs	r7, #0
 80080ce:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80080d2:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80080d4:	eb08 0607 	add.w	r6, r8, r7
 80080d8:	443c      	add	r4, r7
 80080da:	371c      	adds	r7, #28
 80080dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80080de:	4557      	cmp	r7, sl
 80080e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080e2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80080e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80080ea:	d1f2      	bne.n	80080d2 <ai_platform_network_init+0xde>
 80080ec:	e012      	b.n	8008114 <ai_platform_network_init+0x120>
 80080ee:	f1b9 0f00 	cmp.w	r9, #0
 80080f2:	d015      	beq.n	8008120 <ai_platform_network_init+0x12c>
 80080f4:	f04f 0e01 	mov.w	lr, #1
 80080f8:	e7bf      	b.n	800807a <ai_platform_network_init+0x86>
 80080fa:	f1b9 0f00 	cmp.w	r9, #0
 80080fe:	d00f      	beq.n	8008120 <ai_platform_network_init+0x12c>
 8008100:	f04f 0e01 	mov.w	lr, #1
 8008104:	4637      	mov	r7, r6
 8008106:	e7ab      	b.n	8008060 <ai_platform_network_init+0x6c>
 8008108:	459b      	cmp	fp, r3
 800810a:	d11e      	bne.n	800814a <ai_platform_network_init+0x156>
 800810c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8008110:	e9c5 6708 	strd	r6, r7, [r5, #32]
 8008114:	4628      	mov	r0, r5
 8008116:	f8c5 e028 	str.w	lr, [r5, #40]	; 0x28
 800811a:	f000 fb2d 	bl	8008778 <ai_layers_init_all>
 800811e:	e783      	b.n	8008028 <ai_platform_network_init+0x34>
 8008120:	2213      	movs	r2, #19
 8008122:	2110      	movs	r1, #16
 8008124:	f105 000c 	add.w	r0, r5, #12
 8008128:	2400      	movs	r4, #0
 800812a:	f000 faf1 	bl	8008710 <core_set_error>
 800812e:	e77e      	b.n	800802e <ai_platform_network_init+0x3a>
 8008130:	2211      	movs	r2, #17
 8008132:	2110      	movs	r1, #16
 8008134:	300c      	adds	r0, #12
 8008136:	f000 faeb 	bl	8008710 <core_set_error>
 800813a:	e778      	b.n	800802e <ai_platform_network_init+0x3a>
 800813c:	2212      	movs	r2, #18
 800813e:	2110      	movs	r1, #16
 8008140:	f105 000c 	add.w	r0, r5, #12
 8008144:	f000 fae4 	bl	8008710 <core_set_error>
 8008148:	e771      	b.n	800802e <ai_platform_network_init+0x3a>
 800814a:	2212      	movs	r2, #18
 800814c:	2116      	movs	r1, #22
 800814e:	f105 000c 	add.w	r0, r5, #12
 8008152:	2400      	movs	r4, #0
 8008154:	f000 fadc 	bl	8008710 <core_set_error>
 8008158:	e769      	b.n	800802e <ai_platform_network_init+0x3a>
 800815a:	2213      	movs	r2, #19
 800815c:	2116      	movs	r1, #22
 800815e:	f105 000c 	add.w	r0, r5, #12
 8008162:	2400      	movs	r4, #0
 8008164:	f000 fad4 	bl	8008710 <core_set_error>
 8008168:	e761      	b.n	800802e <ai_platform_network_init+0x3a>
 800816a:	bf00      	nop
 800816c:	a1c00100 	.word	0xa1c00100
 8008170:	a1facade 	.word	0xa1facade

08008174 <ai_platform_network_post_init>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4b16      	ldr	r3, [pc, #88]	; (80081d0 <ai_platform_network_post_init+0x5c>)
 8008178:	6802      	ldr	r2, [r0, #0]
 800817a:	ea02 0103 	and.w	r1, r2, r3
 800817e:	4393      	bics	r3, r2
 8008180:	d108      	bne.n	8008194 <ai_platform_network_post_init+0x20>
 8008182:	6903      	ldr	r3, [r0, #16]
 8008184:	4604      	mov	r4, r0
 8008186:	f013 0502 	ands.w	r5, r3, #2
 800818a:	d005      	beq.n	8008198 <ai_platform_network_post_init+0x24>
 800818c:	428a      	cmp	r2, r1
 800818e:	d00a      	beq.n	80081a6 <ai_platform_network_post_init+0x32>
 8008190:	2001      	movs	r0, #1
 8008192:	bd38      	pop	{r3, r4, r5, pc}
 8008194:	2000      	movs	r0, #0
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	2210      	movs	r2, #16
 800819a:	2111      	movs	r1, #17
 800819c:	300c      	adds	r0, #12
 800819e:	f000 fab7 	bl	8008710 <core_set_error>
 80081a2:	4628      	mov	r0, r5
 80081a4:	bd38      	pop	{r3, r4, r5, pc}
 80081a6:	f000 faf5 	bl	8008794 <ai_layers_post_init_all>
 80081aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0ef      	beq.n	8008190 <ai_platform_network_post_init+0x1c>
 80081b0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80081b2:	e008      	b.n	80081c6 <ai_platform_network_post_init+0x52>
 80081b4:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 80081b8:	4798      	blx	r3
 80081ba:	692b      	ldr	r3, [r5, #16]
 80081bc:	42ab      	cmp	r3, r5
 80081be:	461d      	mov	r5, r3
 80081c0:	d0e6      	beq.n	8008190 <ai_platform_network_post_init+0x1c>
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0e4      	beq.n	8008190 <ai_platform_network_post_init+0x1c>
 80081c6:	4629      	mov	r1, r5
 80081c8:	2000      	movs	r0, #0
 80081ca:	2d00      	cmp	r5, #0
 80081cc:	d1f2      	bne.n	80081b4 <ai_platform_network_post_init+0x40>
 80081ce:	e7df      	b.n	8008190 <ai_platform_network_post_init+0x1c>
 80081d0:	a1c00100 	.word	0xa1c00100

080081d4 <ai_platform_network_process>:
 80081d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d8:	b085      	sub	sp, #20
 80081da:	4bb7      	ldr	r3, [pc, #732]	; (80084b8 <ai_platform_network_process+0x2e4>)
 80081dc:	9202      	str	r2, [sp, #8]
 80081de:	6802      	ldr	r2, [r0, #0]
 80081e0:	4393      	bics	r3, r2
 80081e2:	f040 8142 	bne.w	800846a <ai_platform_network_process+0x296>
 80081e6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80081e8:	4605      	mov	r5, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 8126 	beq.w	800843c <ai_platform_network_process+0x268>
 80081f0:	6903      	ldr	r3, [r0, #16]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
 80081f8:	f003 0303 	and.w	r3, r3, #3
 80081fc:	6182      	str	r2, [r0, #24]
 80081fe:	2b03      	cmp	r3, #3
 8008200:	f040 8122 	bne.w	8008448 <ai_platform_network_process+0x274>
 8008204:	2900      	cmp	r1, #0
 8008206:	f000 8136 	beq.w	8008476 <ai_platform_network_process+0x2a2>
 800820a:	fab8 f788 	clz	r7, r8
 800820e:	097f      	lsrs	r7, r7, #5
 8008210:	f1b8 0f00 	cmp.w	r8, #0
 8008214:	f000 812f 	beq.w	8008476 <ai_platform_network_process+0x2a2>
 8008218:	f8b8 3000 	ldrh.w	r3, [r8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 812a 	beq.w	8008476 <ai_platform_network_process+0x2a2>
 8008222:	698b      	ldr	r3, [r1, #24]
 8008224:	460e      	mov	r6, r1
 8008226:	9003      	str	r0, [sp, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d072      	beq.n	800831a <ai_platform_network_process+0x146>
 8008234:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8008238:	2c00      	cmp	r4, #0
 800823a:	d06e      	beq.n	800831a <ai_platform_network_process+0x146>
 800823c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008240:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8008244:	f8d3 a000 	ldr.w	sl, [r3]
 8008248:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800824c:	f000 8112 	beq.w	8008474 <ai_platform_network_process+0x2a0>
 8008250:	69a3      	ldr	r3, [r4, #24]
 8008252:	2101      	movs	r1, #1
 8008254:	4630      	mov	r0, r6
 8008256:	685d      	ldr	r5, [r3, #4]
 8008258:	f7ff fab4 	bl	80077c4 <ai_buffer_get_size>
 800825c:	4285      	cmp	r5, r0
 800825e:	f0c0 8115 	bcc.w	800848c <ai_platform_network_process+0x2b8>
 8008262:	68e0      	ldr	r0, [r4, #12]
 8008264:	69b1      	ldr	r1, [r6, #24]
 8008266:	68c2      	ldr	r2, [r0, #12]
 8008268:	68cb      	ldr	r3, [r1, #12]
 800826a:	429a      	cmp	r2, r3
 800826c:	f040 810e 	bne.w	800848c <ai_platform_network_process+0x2b8>
 8008270:	6882      	ldr	r2, [r0, #8]
 8008272:	688b      	ldr	r3, [r1, #8]
 8008274:	429a      	cmp	r2, r3
 8008276:	f040 8109 	bne.w	800848c <ai_platform_network_process+0x2b8>
 800827a:	6842      	ldr	r2, [r0, #4]
 800827c:	684b      	ldr	r3, [r1, #4]
 800827e:	429a      	cmp	r2, r3
 8008280:	f040 8104 	bne.w	800848c <ai_platform_network_process+0x2b8>
 8008284:	69a3      	ldr	r3, [r4, #24]
 8008286:	e9d3 0100 	ldrd	r0, r1, [r3]
 800828a:	f002 fb35 	bl	800a8f8 <ai_array_get_data_byte_size>
 800828e:	4605      	mov	r5, r0
 8008290:	4620      	mov	r0, r4
 8008292:	f7ff fa81 	bl	8007798 <get_tensor_byte_size>
 8008296:	4285      	cmp	r5, r0
 8008298:	f0c0 80f8 	bcc.w	800848c <ai_platform_network_process+0x2b8>
 800829c:	69a3      	ldr	r3, [r4, #24]
 800829e:	6818      	ldr	r0, [r3, #0]
 80082a0:	f002 faba 	bl	800a818 <ai_array_to_buffer_fmt>
 80082a4:	6833      	ldr	r3, [r6, #0]
 80082a6:	4058      	eors	r0, r3
 80082a8:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80082ac:	f040 81a4 	bne.w	80085f8 <ai_platform_network_process+0x424>
 80082b0:	6873      	ldr	r3, [r6, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 80de 	beq.w	8008474 <ai_platform_network_process+0x2a0>
 80082b8:	69b3      	ldr	r3, [r6, #24]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 81a4 	beq.w	800860a <ai_platform_network_process+0x436>
 80082c2:	9a01      	ldr	r2, [sp, #4]
 80082c4:	4620      	mov	r0, r4
 80082c6:	3701      	adds	r7, #1
 80082c8:	361c      	adds	r6, #28
 80082ca:	429a      	cmp	r2, r3
 80082cc:	bf38      	it	cc
 80082ce:	461a      	movcc	r2, r3
 80082d0:	9201      	str	r2, [sp, #4]
 80082d2:	f7ff fa61 	bl	8007798 <get_tensor_byte_size>
 80082d6:	f8c9 0008 	str.w	r0, [r9, #8]
 80082da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	fb00 f303 	mul.w	r3, r0, r3
 80082e4:	f8c9 300c 	str.w	r3, [r9, #12]
 80082e8:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80082ec:	440b      	add	r3, r1
 80082ee:	f8c9 1004 	str.w	r1, [r9, #4]
 80082f2:	f84a 300b 	str.w	r3, [sl, fp]
 80082f6:	69a0      	ldr	r0, [r4, #24]
 80082f8:	6803      	ldr	r3, [r0, #0]
 80082fa:	009a      	lsls	r2, r3, #2
 80082fc:	f100 80af 	bmi.w	800845e <ai_platform_network_process+0x28a>
 8008300:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8008304:	1a9b      	subs	r3, r3, r2
 8008306:	4419      	add	r1, r3
 8008308:	6081      	str	r1, [r0, #8]
 800830a:	69a3      	ldr	r3, [r4, #24]
 800830c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8008310:	60da      	str	r2, [r3, #12]
 8008312:	f8b8 3000 	ldrh.w	r3, [r8]
 8008316:	42bb      	cmp	r3, r7
 8008318:	d888      	bhi.n	800822c <ai_platform_network_process+0x58>
 800831a:	9d03      	ldr	r5, [sp, #12]
 800831c:	9b02      	ldr	r3, [sp, #8]
 800831e:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 817b 	beq.w	800861c <ai_platform_network_process+0x448>
 8008326:	2a01      	cmp	r2, #1
 8008328:	f240 80bd 	bls.w	80084a6 <ai_platform_network_process+0x2d2>
 800832c:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
 8008330:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 80b6 	beq.w	80084a6 <ai_platform_network_process+0x2d2>
 800833a:	2700      	movs	r7, #0
 800833c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008340:	9502      	str	r5, [sp, #8]
 8008342:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 80bd 	beq.w	80084c6 <ai_platform_network_process+0x2f2>
 800834c:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8008350:	2e00      	cmp	r6, #0
 8008352:	f000 80b8 	beq.w	80084c6 <ai_platform_network_process+0x2f2>
 8008356:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800835a:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 800835e:	681c      	ldr	r4, [r3, #0]
 8008360:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 8008364:	f000 8170 	beq.w	8008648 <ai_platform_network_process+0x474>
 8008368:	69b3      	ldr	r3, [r6, #24]
 800836a:	2101      	movs	r1, #1
 800836c:	4658      	mov	r0, fp
 800836e:	685d      	ldr	r5, [r3, #4]
 8008370:	f7ff fa28 	bl	80077c4 <ai_buffer_get_size>
 8008374:	4285      	cmp	r5, r0
 8008376:	f0c0 8095 	bcc.w	80084a4 <ai_platform_network_process+0x2d0>
 800837a:	68f0      	ldr	r0, [r6, #12]
 800837c:	f8db 1018 	ldr.w	r1, [fp, #24]
 8008380:	68c2      	ldr	r2, [r0, #12]
 8008382:	68cb      	ldr	r3, [r1, #12]
 8008384:	429a      	cmp	r2, r3
 8008386:	f040 808d 	bne.w	80084a4 <ai_platform_network_process+0x2d0>
 800838a:	6882      	ldr	r2, [r0, #8]
 800838c:	688b      	ldr	r3, [r1, #8]
 800838e:	429a      	cmp	r2, r3
 8008390:	f040 8088 	bne.w	80084a4 <ai_platform_network_process+0x2d0>
 8008394:	6842      	ldr	r2, [r0, #4]
 8008396:	684b      	ldr	r3, [r1, #4]
 8008398:	429a      	cmp	r2, r3
 800839a:	f040 8083 	bne.w	80084a4 <ai_platform_network_process+0x2d0>
 800839e:	69b3      	ldr	r3, [r6, #24]
 80083a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80083a4:	f002 faa8 	bl	800a8f8 <ai_array_get_data_byte_size>
 80083a8:	9003      	str	r0, [sp, #12]
 80083aa:	4630      	mov	r0, r6
 80083ac:	f7ff f9f4 	bl	8007798 <get_tensor_byte_size>
 80083b0:	9b03      	ldr	r3, [sp, #12]
 80083b2:	4283      	cmp	r3, r0
 80083b4:	d376      	bcc.n	80084a4 <ai_platform_network_process+0x2d0>
 80083b6:	69b3      	ldr	r3, [r6, #24]
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	f002 fa2d 	bl	800a818 <ai_array_to_buffer_fmt>
 80083be:	f8db 3000 	ldr.w	r3, [fp]
 80083c2:	4058      	eors	r0, r3
 80083c4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80083c8:	f040 812c 	bne.w	8008624 <ai_platform_network_process+0x450>
 80083cc:	f8db 3004 	ldr.w	r3, [fp, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 8139 	beq.w	8008648 <ai_platform_network_process+0x474>
 80083d6:	f8db 3018 	ldr.w	r3, [fp, #24]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 812a 	beq.w	8008636 <ai_platform_network_process+0x462>
 80083e2:	9a01      	ldr	r2, [sp, #4]
 80083e4:	4630      	mov	r0, r6
 80083e6:	3701      	adds	r7, #1
 80083e8:	f10b 0b1c 	add.w	fp, fp, #28
 80083ec:	429a      	cmp	r2, r3
 80083ee:	bf38      	it	cc
 80083f0:	461a      	movcc	r2, r3
 80083f2:	9201      	str	r2, [sp, #4]
 80083f4:	f7ff f9d0 	bl	8007798 <get_tensor_byte_size>
 80083f8:	f8c8 0008 	str.w	r0, [r8, #8]
 80083fc:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	fb00 f303 	mul.w	r3, r0, r3
 8008406:	f8c8 300c 	str.w	r3, [r8, #12]
 800840a:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 800840e:	440b      	add	r3, r1
 8008410:	f8c8 1004 	str.w	r1, [r8, #4]
 8008414:	f844 300a 	str.w	r3, [r4, sl]
 8008418:	69b0      	ldr	r0, [r6, #24]
 800841a:	6803      	ldr	r3, [r0, #0]
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	d44d      	bmi.n	80084bc <ai_platform_network_process+0x2e8>
 8008420:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	4419      	add	r1, r3
 8008428:	6081      	str	r1, [r0, #8]
 800842a:	69b3      	ldr	r3, [r6, #24]
 800842c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008430:	60da      	str	r2, [r3, #12]
 8008432:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008436:	42bb      	cmp	r3, r7
 8008438:	d883      	bhi.n	8008342 <ai_platform_network_process+0x16e>
 800843a:	e044      	b.n	80084c6 <ai_platform_network_process+0x2f2>
 800843c:	6902      	ldr	r2, [r0, #16]
 800843e:	6183      	str	r3, [r0, #24]
 8008440:	f002 0203 	and.w	r2, r2, #3
 8008444:	2a03      	cmp	r2, #3
 8008446:	d016      	beq.n	8008476 <ai_platform_network_process+0x2a2>
 8008448:	2230      	movs	r2, #48	; 0x30
 800844a:	2111      	movs	r1, #17
 800844c:	f105 000c 	add.w	r0, r5, #12
 8008450:	2400      	movs	r4, #0
 8008452:	f000 f95d 	bl	8008710 <core_set_error>
 8008456:	4620      	mov	r0, r4
 8008458:	b005      	add	sp, #20
 800845a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845e:	f8b8 3000 	ldrh.w	r3, [r8]
 8008462:	429f      	cmp	r7, r3
 8008464:	f4ff aee2 	bcc.w	800822c <ai_platform_network_process+0x58>
 8008468:	e757      	b.n	800831a <ai_platform_network_process+0x146>
 800846a:	2400      	movs	r4, #0
 800846c:	4620      	mov	r0, r4
 800846e:	b005      	add	sp, #20
 8008470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008474:	9d03      	ldr	r5, [sp, #12]
 8008476:	2400      	movs	r4, #0
 8008478:	2217      	movs	r2, #23
 800847a:	2112      	movs	r1, #18
 800847c:	f105 000c 	add.w	r0, r5, #12
 8008480:	f000 f946 	bl	8008710 <core_set_error>
 8008484:	4620      	mov	r0, r4
 8008486:	b005      	add	sp, #20
 8008488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848c:	9d03      	ldr	r5, [sp, #12]
 800848e:	2400      	movs	r4, #0
 8008490:	2218      	movs	r2, #24
 8008492:	2112      	movs	r1, #18
 8008494:	f105 000c 	add.w	r0, r5, #12
 8008498:	f000 f93a 	bl	8008710 <core_set_error>
 800849c:	4620      	mov	r0, r4
 800849e:	b005      	add	sp, #20
 80084a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a4:	9d02      	ldr	r5, [sp, #8]
 80084a6:	2218      	movs	r2, #24
 80084a8:	2113      	movs	r1, #19
 80084aa:	f105 000c 	add.w	r0, r5, #12
 80084ae:	2400      	movs	r4, #0
 80084b0:	f000 f92e 	bl	8008710 <core_set_error>
 80084b4:	e7cf      	b.n	8008456 <ai_platform_network_process+0x282>
 80084b6:	bf00      	nop
 80084b8:	a1c00100 	.word	0xa1c00100
 80084bc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80084c0:	429f      	cmp	r7, r3
 80084c2:	f4ff af3e 	bcc.w	8008342 <ai_platform_network_process+0x16e>
 80084c6:	9d02      	ldr	r5, [sp, #8]
 80084c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80084cc:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 80084ce:	832b      	strh	r3, [r5, #24]
 80084d0:	2a00      	cmp	r2, #0
 80084d2:	f040 808b 	bne.w	80085ec <ai_platform_network_process+0x418>
 80084d6:	4616      	mov	r6, r2
 80084d8:	4617      	mov	r7, r2
 80084da:	8b6c      	ldrh	r4, [r5, #26]
 80084dc:	429c      	cmp	r4, r3
 80084de:	d2ba      	bcs.n	8008456 <ai_platform_network_process+0x282>
 80084e0:	46ab      	mov	fp, r5
 80084e2:	2e00      	cmp	r6, #0
 80084e4:	d030      	beq.n	8008548 <ai_platform_network_process+0x374>
 80084e6:	f04f 0800 	mov.w	r8, #0
 80084ea:	e014      	b.n	8008516 <ai_platform_network_process+0x342>
 80084ec:	6882      	ldr	r2, [r0, #8]
 80084ee:	68c5      	ldr	r5, [r0, #12]
 80084f0:	6863      	ldr	r3, [r4, #4]
 80084f2:	1b52      	subs	r2, r2, r5
 80084f4:	4413      	add	r3, r2
 80084f6:	6083      	str	r3, [r0, #8]
 80084f8:	698b      	ldr	r3, [r1, #24]
 80084fa:	6862      	ldr	r2, [r4, #4]
 80084fc:	60da      	str	r2, [r3, #12]
 80084fe:	f859 200a 	ldr.w	r2, [r9, sl]
 8008502:	f108 0801 	add.w	r8, r8, #1
 8008506:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800850a:	440b      	add	r3, r1
 800850c:	4293      	cmp	r3, r2
 800850e:	d301      	bcc.n	8008514 <ai_platform_network_process+0x340>
 8008510:	68e3      	ldr	r3, [r4, #12]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	6063      	str	r3, [r4, #4]
 8008516:	8833      	ldrh	r3, [r6, #0]
 8008518:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800851c:	4543      	cmp	r3, r8
 800851e:	d913      	bls.n	8008548 <ai_platform_network_process+0x374>
 8008520:	6873      	ldr	r3, [r6, #4]
 8008522:	b18b      	cbz	r3, 8008548 <ai_platform_network_process+0x374>
 8008524:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8008528:	b171      	cbz	r1, 8008548 <ai_platform_network_process+0x374>
 800852a:	6988      	ldr	r0, [r1, #24]
 800852c:	68b2      	ldr	r2, [r6, #8]
 800852e:	6803      	ldr	r3, [r0, #0]
 8008530:	f8d2 9000 	ldr.w	r9, [r2]
 8008534:	009d      	lsls	r5, r3, #2
 8008536:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800853a:	d5d7      	bpl.n	80084ec <ai_platform_network_process+0x318>
 800853c:	6881      	ldr	r1, [r0, #8]
 800853e:	68a2      	ldr	r2, [r4, #8]
 8008540:	6860      	ldr	r0, [r4, #4]
 8008542:	f002 f8e1 	bl	800a708 <st_int8_copy>
 8008546:	e7da      	b.n	80084fe <ai_platform_network_process+0x32a>
 8008548:	4658      	mov	r0, fp
 800854a:	f000 f937 	bl	80087bc <ai_layers_forward_all>
 800854e:	2f00      	cmp	r7, #0
 8008550:	d03d      	beq.n	80085ce <ai_platform_network_process+0x3fa>
 8008552:	2400      	movs	r4, #0
 8008554:	e016      	b.n	8008584 <ai_platform_network_process+0x3b0>
 8008556:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800855a:	f859 100a 	ldr.w	r1, [r9, sl]
 800855e:	4413      	add	r3, r2
 8008560:	428b      	cmp	r3, r1
 8008562:	d302      	bcc.n	800856a <ai_platform_network_process+0x396>
 8008564:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008568:	1acb      	subs	r3, r1, r3
 800856a:	f8c8 3004 	str.w	r3, [r8, #4]
 800856e:	6981      	ldr	r1, [r0, #24]
 8008570:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8008574:	1b52      	subs	r2, r2, r5
 8008576:	4413      	add	r3, r2
 8008578:	608b      	str	r3, [r1, #8]
 800857a:	6983      	ldr	r3, [r0, #24]
 800857c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008580:	60da      	str	r2, [r3, #12]
 8008582:	3401      	adds	r4, #1
 8008584:	883b      	ldrh	r3, [r7, #0]
 8008586:	42a3      	cmp	r3, r4
 8008588:	d921      	bls.n	80085ce <ai_platform_network_process+0x3fa>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	b1fb      	cbz	r3, 80085ce <ai_platform_network_process+0x3fa>
 800858e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008592:	b1e0      	cbz	r0, 80085ce <ai_platform_network_process+0x3fa>
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800859a:	6983      	ldr	r3, [r0, #24]
 800859c:	f8d2 9000 	ldr.w	r9, [r2]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80085a6:	0092      	lsls	r2, r2, #2
 80085a8:	d5d5      	bpl.n	8008556 <ai_platform_network_process+0x382>
 80085aa:	6898      	ldr	r0, [r3, #8]
 80085ac:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 80085b0:	f002 f8aa 	bl	800a708 <st_int8_copy>
 80085b4:	f859 200a 	ldr.w	r2, [r9, sl]
 80085b8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80085bc:	440b      	add	r3, r1
 80085be:	4293      	cmp	r3, r2
 80085c0:	d302      	bcc.n	80085c8 <ai_platform_network_process+0x3f4>
 80085c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	f8c8 3004 	str.w	r3, [r8, #4]
 80085cc:	e7d9      	b.n	8008582 <ai_platform_network_process+0x3ae>
 80085ce:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 80085d2:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80085d6:	3401      	adds	r4, #1
 80085d8:	b2a4      	uxth	r4, r4
 80085da:	42a3      	cmp	r3, r4
 80085dc:	f8ab 401a 	strh.w	r4, [fp, #26]
 80085e0:	f63f af7f 	bhi.w	80084e2 <ai_platform_network_process+0x30e>
 80085e4:	4620      	mov	r0, r4
 80085e6:	b005      	add	sp, #20
 80085e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ec:	2a01      	cmp	r2, #1
 80085ee:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80085f0:	d033      	beq.n	800865a <ai_platform_network_process+0x486>
 80085f2:	f106 070c 	add.w	r7, r6, #12
 80085f6:	e770      	b.n	80084da <ai_platform_network_process+0x306>
 80085f8:	9d03      	ldr	r5, [sp, #12]
 80085fa:	2219      	movs	r2, #25
 80085fc:	2112      	movs	r1, #18
 80085fe:	2400      	movs	r4, #0
 8008600:	f105 000c 	add.w	r0, r5, #12
 8008604:	f000 f884 	bl	8008710 <core_set_error>
 8008608:	e725      	b.n	8008456 <ai_platform_network_process+0x282>
 800860a:	9d03      	ldr	r5, [sp, #12]
 800860c:	4604      	mov	r4, r0
 800860e:	2221      	movs	r2, #33	; 0x21
 8008610:	2112      	movs	r1, #18
 8008612:	f105 000c 	add.w	r0, r5, #12
 8008616:	f000 f87b 	bl	8008710 <core_set_error>
 800861a:	e71c      	b.n	8008456 <ai_platform_network_process+0x282>
 800861c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008620:	832b      	strh	r3, [r5, #24]
 8008622:	e755      	b.n	80084d0 <ai_platform_network_process+0x2fc>
 8008624:	9d02      	ldr	r5, [sp, #8]
 8008626:	2219      	movs	r2, #25
 8008628:	2113      	movs	r1, #19
 800862a:	2400      	movs	r4, #0
 800862c:	f105 000c 	add.w	r0, r5, #12
 8008630:	f000 f86e 	bl	8008710 <core_set_error>
 8008634:	e70f      	b.n	8008456 <ai_platform_network_process+0x282>
 8008636:	9d02      	ldr	r5, [sp, #8]
 8008638:	4604      	mov	r4, r0
 800863a:	2221      	movs	r2, #33	; 0x21
 800863c:	2113      	movs	r1, #19
 800863e:	f105 000c 	add.w	r0, r5, #12
 8008642:	f000 f865 	bl	8008710 <core_set_error>
 8008646:	e706      	b.n	8008456 <ai_platform_network_process+0x282>
 8008648:	9d02      	ldr	r5, [sp, #8]
 800864a:	2217      	movs	r2, #23
 800864c:	2113      	movs	r1, #19
 800864e:	2400      	movs	r4, #0
 8008650:	f105 000c 	add.w	r0, r5, #12
 8008654:	f000 f85c 	bl	8008710 <core_set_error>
 8008658:	e6fd      	b.n	8008456 <ai_platform_network_process+0x282>
 800865a:	2700      	movs	r7, #0
 800865c:	e73d      	b.n	80084da <ai_platform_network_process+0x306>
 800865e:	bf00      	nop

08008660 <ai_platform_observer_register_s>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	4b18      	ldr	r3, [pc, #96]	; (80086c4 <ai_platform_observer_register_s+0x64>)
 8008664:	6802      	ldr	r2, [r0, #0]
 8008666:	4393      	bics	r3, r2
 8008668:	d12a      	bne.n	80086c0 <ai_platform_observer_register_s+0x60>
 800866a:	4684      	mov	ip, r0
 800866c:	460d      	mov	r5, r1
 800866e:	b301      	cbz	r1, 80086b2 <ai_platform_observer_register_s+0x52>
 8008670:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008672:	b9bb      	cbnz	r3, 80086a4 <ai_platform_observer_register_s+0x44>
 8008674:	81cb      	strh	r3, [r1, #14]
 8008676:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8008678:	e006      	b.n	8008688 <ai_platform_observer_register_s+0x28>
 800867a:	b29b      	uxth	r3, r3
 800867c:	81eb      	strh	r3, [r5, #14]
 800867e:	6914      	ldr	r4, [r2, #16]
 8008680:	4294      	cmp	r4, r2
 8008682:	4622      	mov	r2, r4
 8008684:	d003      	beq.n	800868e <ai_platform_observer_register_s+0x2e>
 8008686:	b114      	cbz	r4, 800868e <ai_platform_observer_register_s+0x2e>
 8008688:	3301      	adds	r3, #1
 800868a:	2a00      	cmp	r2, #0
 800868c:	d1f5      	bne.n	800867a <ai_platform_observer_register_s+0x1a>
 800868e:	7a2b      	ldrb	r3, [r5, #8]
 8008690:	2100      	movs	r1, #0
 8008692:	4a0d      	ldr	r2, [pc, #52]	; (80086c8 <ai_platform_observer_register_s+0x68>)
 8008694:	2001      	movs	r0, #1
 8008696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800869a:	81a9      	strh	r1, [r5, #12]
 800869c:	60ab      	str	r3, [r5, #8]
 800869e:	e9cc 2510 	strd	r2, r5, [ip, #64]	; 0x40
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	2240      	movs	r2, #64	; 0x40
 80086a6:	2111      	movs	r1, #17
 80086a8:	300c      	adds	r0, #12
 80086aa:	f000 f831 	bl	8008710 <core_set_error>
 80086ae:	2000      	movs	r0, #0
 80086b0:	bd38      	pop	{r3, r4, r5, pc}
 80086b2:	2211      	movs	r2, #17
 80086b4:	2110      	movs	r1, #16
 80086b6:	300c      	adds	r0, #12
 80086b8:	f000 f82a 	bl	8008710 <core_set_error>
 80086bc:	4628      	mov	r0, r5
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	2000      	movs	r0, #0
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	a1c00100 	.word	0xa1c00100
 80086c8:	08007871 	.word	0x08007871

080086cc <ai_platform_observer_unregister_s>:
 80086cc:	4b0b      	ldr	r3, [pc, #44]	; (80086fc <ai_platform_observer_unregister_s+0x30>)
 80086ce:	b510      	push	{r4, lr}
 80086d0:	6802      	ldr	r2, [r0, #0]
 80086d2:	4393      	bics	r3, r2
 80086d4:	d10e      	bne.n	80086f4 <ai_platform_observer_unregister_s+0x28>
 80086d6:	460c      	mov	r4, r1
 80086d8:	b129      	cbz	r1, 80086e6 <ai_platform_observer_unregister_s+0x1a>
 80086da:	2300      	movs	r3, #0
 80086dc:	2401      	movs	r4, #1
 80086de:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
 80086e2:	4620      	mov	r0, r4
 80086e4:	bd10      	pop	{r4, pc}
 80086e6:	2211      	movs	r2, #17
 80086e8:	2110      	movs	r1, #16
 80086ea:	300c      	adds	r0, #12
 80086ec:	f000 f810 	bl	8008710 <core_set_error>
 80086f0:	4620      	mov	r0, r4
 80086f2:	bd10      	pop	{r4, pc}
 80086f4:	2400      	movs	r4, #0
 80086f6:	4620      	mov	r0, r4
 80086f8:	bd10      	pop	{r4, pc}
 80086fa:	bf00      	nop
 80086fc:	a1c00100 	.word	0xa1c00100

08008700 <core_init>:
 8008700:	2001      	movs	r0, #1
 8008702:	4770      	bx	lr

08008704 <core_get_error>:
 8008704:	4603      	mov	r3, r0
 8008706:	2200      	movs	r2, #0
 8008708:	6800      	ldr	r0, [r0, #0]
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop

08008710 <core_set_error>:
 8008710:	4603      	mov	r3, r0
 8008712:	7800      	ldrb	r0, [r0, #0]
 8008714:	b108      	cbz	r0, 800871a <core_set_error+0xa>
 8008716:	2000      	movs	r0, #0
 8008718:	4770      	bx	lr
 800871a:	7019      	strb	r1, [r3, #0]
 800871c:	2001      	movs	r0, #1
 800871e:	6819      	ldr	r1, [r3, #0]
 8008720:	f362 211f 	bfi	r1, r2, #8, #24
 8008724:	6019      	str	r1, [r3, #0]
 8008726:	4770      	bx	lr

08008728 <ai_check_custom_types>:
 8008728:	b082      	sub	sp, #8
 800872a:	4b12      	ldr	r3, [pc, #72]	; (8008774 <ai_check_custom_types+0x4c>)
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	b118      	cbz	r0, 8008738 <ai_check_custom_types+0x10>
 8008730:	7803      	ldrb	r3, [r0, #0]
 8008732:	2b03      	cmp	r3, #3
 8008734:	d002      	beq.n	800873c <ai_check_custom_types+0x14>
 8008736:	2000      	movs	r0, #0
 8008738:	b002      	add	sp, #8
 800873a:	4770      	bx	lr
 800873c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008740:	4293      	cmp	r3, r2
 8008742:	d004      	beq.n	800874e <ai_check_custom_types+0x26>
 8008744:	2001      	movs	r0, #1
 8008746:	f080 0001 	eor.w	r0, r0, #1
 800874a:	b002      	add	sp, #8
 800874c:	4770      	bx	lr
 800874e:	7842      	ldrb	r2, [r0, #1]
 8008750:	3001      	adds	r0, #1
 8008752:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008756:	429a      	cmp	r2, r3
 8008758:	d1f4      	bne.n	8008744 <ai_check_custom_types+0x1c>
 800875a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800875e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008762:	429a      	cmp	r2, r3
 8008764:	d1ee      	bne.n	8008744 <ai_check_custom_types+0x1c>
 8008766:	7842      	ldrb	r2, [r0, #1]
 8008768:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800876c:	429a      	cmp	r2, r3
 800876e:	d1e9      	bne.n	8008744 <ai_check_custom_types+0x1c>
 8008770:	2000      	movs	r0, #0
 8008772:	e7e8      	b.n	8008746 <ai_check_custom_types+0x1e>
 8008774:	84048403 	.word	0x84048403

08008778 <ai_layers_init_all>:
 8008778:	2100      	movs	r1, #0
 800877a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800877c:	b13b      	cbz	r3, 800878e <ai_layers_init_all+0x16>
 800877e:	691a      	ldr	r2, [r3, #16]
 8008780:	3101      	adds	r1, #1
 8008782:	60d8      	str	r0, [r3, #12]
 8008784:	429a      	cmp	r2, r3
 8008786:	4613      	mov	r3, r2
 8008788:	d001      	beq.n	800878e <ai_layers_init_all+0x16>
 800878a:	2a00      	cmp	r2, #0
 800878c:	d1f6      	bne.n	800877c <ai_layers_init_all+0x4>
 800878e:	4608      	mov	r0, r1
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop

08008794 <ai_layers_post_init_all>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	2500      	movs	r5, #0
 8008798:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800879a:	b16c      	cbz	r4, 80087b8 <ai_layers_post_init_all+0x24>
 800879c:	6863      	ldr	r3, [r4, #4]
 800879e:	07db      	lsls	r3, r3, #31
 80087a0:	d504      	bpl.n	80087ac <ai_layers_post_init_all+0x18>
 80087a2:	6a23      	ldr	r3, [r4, #32]
 80087a4:	4620      	mov	r0, r4
 80087a6:	b10b      	cbz	r3, 80087ac <ai_layers_post_init_all+0x18>
 80087a8:	3501      	adds	r5, #1
 80087aa:	4798      	blx	r3
 80087ac:	6923      	ldr	r3, [r4, #16]
 80087ae:	42a3      	cmp	r3, r4
 80087b0:	461c      	mov	r4, r3
 80087b2:	d001      	beq.n	80087b8 <ai_layers_post_init_all+0x24>
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1f0      	bne.n	800879a <ai_layers_post_init_all+0x6>
 80087b8:	4628      	mov	r0, r5
 80087ba:	bd38      	pop	{r3, r4, r5, pc}

080087bc <ai_layers_forward_all>:
 80087bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c0:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 80087c4:	4604      	mov	r4, r0
 80087c6:	f1b8 0f00 	cmp.w	r8, #0
 80087ca:	d02a      	beq.n	8008822 <ai_layers_forward_all+0x66>
 80087cc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80087ce:	63c1      	str	r1, [r0, #60]	; 0x3c
 80087d0:	b319      	cbz	r1, 800881a <ai_layers_forward_all+0x5e>
 80087d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087d4:	2001      	movs	r0, #1
 80087d6:	47c0      	blx	r8
 80087d8:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 80087da:	b1f6      	cbz	r6, 800881a <ai_layers_forward_all+0x5e>
 80087dc:	2700      	movs	r7, #0
 80087de:	4631      	mov	r1, r6
 80087e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80087e2:	2002      	movs	r0, #2
 80087e4:	47c0      	blx	r8
 80087e6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80087e8:	4628      	mov	r0, r5
 80087ea:	696b      	ldr	r3, [r5, #20]
 80087ec:	4798      	blx	r3
 80087ee:	692e      	ldr	r6, [r5, #16]
 80087f0:	2003      	movs	r0, #3
 80087f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80087f4:	42b5      	cmp	r5, r6
 80087f6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80087f8:	d007      	beq.n	800880a <ai_layers_forward_all+0x4e>
 80087fa:	47c0      	blx	r8
 80087fc:	3701      	adds	r7, #1
 80087fe:	63e6      	str	r6, [r4, #60]	; 0x3c
 8008800:	2e00      	cmp	r6, #0
 8008802:	d1ec      	bne.n	80087de <ai_layers_forward_all+0x22>
 8008804:	4638      	mov	r0, r7
 8008806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800880a:	2003      	movs	r0, #3
 800880c:	3701      	adds	r7, #1
 800880e:	47c0      	blx	r8
 8008810:	2300      	movs	r3, #0
 8008812:	4638      	mov	r0, r7
 8008814:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800881a:	2700      	movs	r7, #0
 800881c:	4638      	mov	r0, r7
 800881e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008822:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8008824:	63c5      	str	r5, [r0, #60]	; 0x3c
 8008826:	2d00      	cmp	r5, #0
 8008828:	d0f7      	beq.n	800881a <ai_layers_forward_all+0x5e>
 800882a:	4647      	mov	r7, r8
 800882c:	696b      	ldr	r3, [r5, #20]
 800882e:	4628      	mov	r0, r5
 8008830:	4798      	blx	r3
 8008832:	462b      	mov	r3, r5
 8008834:	692d      	ldr	r5, [r5, #16]
 8008836:	429d      	cmp	r5, r3
 8008838:	d004      	beq.n	8008844 <ai_layers_forward_all+0x88>
 800883a:	3701      	adds	r7, #1
 800883c:	63e5      	str	r5, [r4, #60]	; 0x3c
 800883e:	2d00      	cmp	r5, #0
 8008840:	d1f4      	bne.n	800882c <ai_layers_forward_all+0x70>
 8008842:	e7df      	b.n	8008804 <ai_layers_forward_all+0x48>
 8008844:	2300      	movs	r3, #0
 8008846:	3701      	adds	r7, #1
 8008848:	63e3      	str	r3, [r4, #60]	; 0x3c
 800884a:	e7db      	b.n	8008804 <ai_layers_forward_all+0x48>

0800884c <ai_layers_destroy_all>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	2500      	movs	r5, #0
 8008850:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008852:	b16c      	cbz	r4, 8008870 <ai_layers_destroy_all+0x24>
 8008854:	6863      	ldr	r3, [r4, #4]
 8008856:	075b      	lsls	r3, r3, #29
 8008858:	d504      	bpl.n	8008864 <ai_layers_destroy_all+0x18>
 800885a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800885c:	4620      	mov	r0, r4
 800885e:	b10b      	cbz	r3, 8008864 <ai_layers_destroy_all+0x18>
 8008860:	3501      	adds	r5, #1
 8008862:	4798      	blx	r3
 8008864:	6923      	ldr	r3, [r4, #16]
 8008866:	42a3      	cmp	r3, r4
 8008868:	461c      	mov	r4, r3
 800886a:	d001      	beq.n	8008870 <ai_layers_destroy_all+0x24>
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1f0      	bne.n	8008852 <ai_layers_destroy_all+0x6>
 8008870:	4628      	mov	r0, r5
 8008872:	bd38      	pop	{r3, r4, r5, pc}

08008874 <forward_conv2d_if32of32wf32>:
 8008874:	6983      	ldr	r3, [r0, #24]
 8008876:	881a      	ldrh	r2, [r3, #0]
 8008878:	2a00      	cmp	r2, #0
 800887a:	f000 80b4 	beq.w	80089e6 <forward_conv2d_if32of32wf32+0x172>
 800887e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008882:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8008886:	b0a3      	sub	sp, #140	; 0x8c
 8008888:	4607      	mov	r7, r0
 800888a:	f8de 3004 	ldr.w	r3, [lr, #4]
 800888e:	b103      	cbz	r3, 8008892 <forward_conv2d_if32of32wf32+0x1e>
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2a01      	cmp	r2, #1
 8008894:	f000 80e1 	beq.w	8008a5a <forward_conv2d_if32of32wf32+0x1e6>
 8008898:	f8de 0010 	ldr.w	r0, [lr, #16]
 800889c:	b100      	cbz	r0, 80088a0 <forward_conv2d_if32of32wf32+0x2c>
 800889e:	6800      	ldr	r0, [r0, #0]
 80088a0:	2a02      	cmp	r2, #2
 80088a2:	f000 80a2 	beq.w	80089ea <forward_conv2d_if32of32wf32+0x176>
 80088a6:	f8de 501c 	ldr.w	r5, [lr, #28]
 80088aa:	2d00      	cmp	r5, #0
 80088ac:	f000 80ce 	beq.w	8008a4c <forward_conv2d_if32of32wf32+0x1d8>
 80088b0:	f8be 1018 	ldrh.w	r1, [lr, #24]
 80088b4:	682c      	ldr	r4, [r5, #0]
 80088b6:	2901      	cmp	r1, #1
 80088b8:	f240 80ca 	bls.w	8008a50 <forward_conv2d_if32of32wf32+0x1dc>
 80088bc:	686d      	ldr	r5, [r5, #4]
 80088be:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80088c2:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80088c6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80088ca:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 80088cc:	9113      	str	r1, [sp, #76]	; 0x4c
 80088ce:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	9115      	str	r1, [sp, #84]	; 0x54
 80088d6:	f8d9 100c 	ldr.w	r1, [r9, #12]
 80088da:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80088de:	9116      	str	r1, [sp, #88]	; 0x58
 80088e0:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80088e4:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80088e8:	9117      	str	r1, [sp, #92]	; 0x5c
 80088ea:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80088ee:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80088f2:	9118      	str	r1, [sp, #96]	; 0x60
 80088f4:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80088f8:	9119      	str	r1, [sp, #100]	; 0x64
 80088fa:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80088fc:	911a      	str	r1, [sp, #104]	; 0x68
 80088fe:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8008900:	911b      	str	r1, [sp, #108]	; 0x6c
 8008902:	69f9      	ldr	r1, [r7, #28]
 8008904:	9120      	str	r1, [sp, #128]	; 0x80
 8008906:	8831      	ldrh	r1, [r6, #0]
 8008908:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800890c:	911c      	str	r1, [sp, #112]	; 0x70
 800890e:	88b1      	ldrh	r1, [r6, #4]
 8008910:	911d      	str	r1, [sp, #116]	; 0x74
 8008912:	b299      	uxth	r1, r3
 8008914:	911e      	str	r1, [sp, #120]	; 0x78
 8008916:	b2a1      	uxth	r1, r4
 8008918:	911f      	str	r1, [sp, #124]	; 0x7c
 800891a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800891e:	e9da 7601 	ldrd	r7, r6, [sl, #4]
 8008922:	b10d      	cbz	r5, 8008928 <forward_conv2d_if32of32wf32+0xb4>
 8008924:	69ad      	ldr	r5, [r5, #24]
 8008926:	68ad      	ldr	r5, [r5, #8]
 8008928:	6980      	ldr	r0, [r0, #24]
 800892a:	b2a4      	uxth	r4, r4
 800892c:	b29b      	uxth	r3, r3
 800892e:	2a03      	cmp	r2, #3
 8008930:	f104 34ff 	add.w	r4, r4, #4294967295
 8008934:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8008938:	f106 30ff 	add.w	r0, r6, #4294967295
 800893c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008940:	fb00 6404 	mla	r4, r0, r4, r6
 8008944:	f107 30ff 	add.w	r0, r7, #4294967295
 8008948:	fb00 7303 	mla	r3, r0, r3, r7
 800894c:	9314      	str	r3, [sp, #80]	; 0x50
 800894e:	f000 8081 	beq.w	8008a54 <forward_conv2d_if32of32wf32+0x1e0>
 8008952:	f8de 3028 	ldr.w	r3, [lr, #40]	; 0x28
 8008956:	2b00      	cmp	r3, #0
 8008958:	d04a      	beq.n	80089f0 <forward_conv2d_if32of32wf32+0x17c>
 800895a:	f8d3 8000 	ldr.w	r8, [r3]
 800895e:	f1b8 0f00 	cmp.w	r8, #0
 8008962:	d003      	beq.n	800896c <forward_conv2d_if32of32wf32+0xf8>
 8008964:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8008968:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800896c:	6858      	ldr	r0, [r3, #4]
 800896e:	2800      	cmp	r0, #0
 8008970:	d03f      	beq.n	80089f2 <forward_conv2d_if32of32wf32+0x17e>
 8008972:	6983      	ldr	r3, [r0, #24]
 8008974:	f46f 7288 	mvn.w	r2, #272	; 0x110
 8008978:	f8dc e000 	ldr.w	lr, [ip]
 800897c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8008980:	f3ce 4343 	ubfx	r3, lr, #17, #4
 8008984:	fa42 f303 	asr.w	r3, r2, r3
 8008988:	07db      	lsls	r3, r3, #31
 800898a:	d553      	bpl.n	8008a34 <forward_conv2d_if32of32wf32+0x1c0>
 800898c:	f1b9 0f00 	cmp.w	r9, #0
 8008990:	bf18      	it	ne
 8008992:	4649      	movne	r1, r9
 8008994:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008996:	460a      	mov	r2, r1
 8008998:	940d      	str	r4, [sp, #52]	; 0x34
 800899a:	4651      	mov	r1, sl
 800899c:	930c      	str	r3, [sp, #48]	; 0x30
 800899e:	4658      	mov	r0, fp
 80089a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80089a2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80089a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80089a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80089a8:	9707      	str	r7, [sp, #28]
 80089aa:	930a      	str	r3, [sp, #40]	; 0x28
 80089ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089ae:	940e      	str	r4, [sp, #56]	; 0x38
 80089b0:	e9cd 6308 	strd	r6, r3, [sp, #32]
 80089b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80089b6:	9306      	str	r3, [sp, #24]
 80089b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089ba:	9305      	str	r3, [sp, #20]
 80089bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80089be:	9304      	str	r3, [sp, #16]
 80089c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089c2:	9303      	str	r3, [sp, #12]
 80089c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089c6:	9302      	str	r3, [sp, #8]
 80089c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089ca:	e9cd 8300 	strd	r8, r3, [sp]
 80089ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80089d0:	9311      	str	r3, [sp, #68]	; 0x44
 80089d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80089d4:	9310      	str	r3, [sp, #64]	; 0x40
 80089d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80089d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80089da:	462b      	mov	r3, r5
 80089dc:	f000 fb6a 	bl	80090b4 <forward_lite_conv2d_if32of32wf32>
 80089e0:	b023      	add	sp, #140	; 0x8c
 80089e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e6:	6853      	ldr	r3, [r2, #4]
 80089e8:	deff      	udf	#255	; 0xff
 80089ea:	2300      	movs	r3, #0
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	deff      	udf	#255	; 0xff
 80089f0:	4698      	mov	r8, r3
 80089f2:	f8dc e000 	ldr.w	lr, [ip]
 80089f6:	f46f 7088 	mvn.w	r0, #272	; 0x110
 80089fa:	f3ce 4343 	ubfx	r3, lr, #17, #4
 80089fe:	4118      	asrs	r0, r3
 8008a00:	f010 0001 	ands.w	r0, r0, #1
 8008a04:	d1c6      	bne.n	8008994 <forward_conv2d_if32of32wf32+0x120>
 8008a06:	f3ce 13c6 	ubfx	r3, lr, #7, #7
 8008a0a:	f3ce 5e41 	ubfx	lr, lr, #21, #2
 8008a0e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8008a12:	fa43 f30e 	asr.w	r3, r3, lr
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	2a00      	cmp	r2, #0
 8008a1a:	d0bb      	beq.n	8008994 <forward_conv2d_if32of32wf32+0x120>
 8008a1c:	4681      	mov	r9, r0
 8008a1e:	6980      	ldr	r0, [r0, #24]
 8008a20:	9121      	str	r1, [sp, #132]	; 0x84
 8008a22:	6840      	ldr	r0, [r0, #4]
 8008a24:	9001      	str	r0, [sp, #4]
 8008a26:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008a28:	9000      	str	r0, [sp, #0]
 8008a2a:	4648      	mov	r0, r9
 8008a2c:	f001 f8dc 	bl	8009be8 <lite_decompress_ilutof32>
 8008a30:	9921      	ldr	r1, [sp, #132]	; 0x84
 8008a32:	e7ab      	b.n	800898c <forward_conv2d_if32of32wf32+0x118>
 8008a34:	f3ce 13c6 	ubfx	r3, lr, #7, #7
 8008a38:	f3ce 5e41 	ubfx	lr, lr, #21, #2
 8008a3c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8008a40:	fa43 f30e 	asr.w	r3, r3, lr
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	2a00      	cmp	r2, #0
 8008a48:	d0a0      	beq.n	800898c <forward_conv2d_if32of32wf32+0x118>
 8008a4a:	e7e8      	b.n	8008a1e <forward_conv2d_if32of32wf32+0x1aa>
 8008a4c:	462c      	mov	r4, r5
 8008a4e:	e736      	b.n	80088be <forward_conv2d_if32of32wf32+0x4a>
 8008a50:	2500      	movs	r5, #0
 8008a52:	e734      	b.n	80088be <forward_conv2d_if32of32wf32+0x4a>
 8008a54:	2300      	movs	r3, #0
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	deff      	udf	#255	; 0xff
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	deff      	udf	#255	; 0xff

08008a60 <forward_dw_if32of32wf32>:
 8008a60:	6982      	ldr	r2, [r0, #24]
 8008a62:	8813      	ldrh	r3, [r2, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 809d 	beq.w	8008ba4 <forward_dw_if32of32wf32+0x144>
 8008a6a:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8008a6e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008a72:	b101      	cbz	r1, 8008a76 <forward_dw_if32of32wf32+0x16>
 8008a74:	6809      	ldr	r1, [r1, #0]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	f000 80b7 	beq.w	8008bea <forward_dw_if32of32wf32+0x18a>
 8008a7c:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8008a80:	b102      	cbz	r2, 8008a84 <forward_dw_if32of32wf32+0x24>
 8008a82:	6812      	ldr	r2, [r2, #0]
 8008a84:	2b02      	cmp	r3, #2
 8008a86:	f000 808f 	beq.w	8008ba8 <forward_dw_if32of32wf32+0x148>
 8008a8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8e:	f8dc 601c 	ldr.w	r6, [ip, #28]
 8008a92:	b0a1      	sub	sp, #132	; 0x84
 8008a94:	2e00      	cmp	r6, #0
 8008a96:	f000 80a2 	beq.w	8008bde <forward_dw_if32of32wf32+0x17e>
 8008a9a:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 8008a9e:	6834      	ldr	r4, [r6, #0]
 8008aa0:	2d01      	cmp	r5, #1
 8008aa2:	f240 809e 	bls.w	8008be2 <forward_dw_if32of32wf32+0x182>
 8008aa6:	6876      	ldr	r6, [r6, #4]
 8008aa8:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8008aac:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8008ab0:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008ab4:	6989      	ldr	r1, [r1, #24]
 8008ab6:	9713      	str	r7, [sp, #76]	; 0x4c
 8008ab8:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8008abc:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8008ac0:	9714      	str	r7, [sp, #80]	; 0x50
 8008ac2:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8008ac6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8008aca:	9715      	str	r7, [sp, #84]	; 0x54
 8008acc:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8008ad0:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8008ad4:	9716      	str	r7, [sp, #88]	; 0x58
 8008ad6:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8008ada:	69a1      	ldr	r1, [r4, #24]
 8008adc:	9717      	str	r7, [sp, #92]	; 0x5c
 8008ade:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8008ae2:	9718      	str	r7, [sp, #96]	; 0x60
 8008ae4:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 8008ae6:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 8008aea:	9719      	str	r7, [sp, #100]	; 0x64
 8008aec:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 8008aee:	69c0      	ldr	r0, [r0, #28]
 8008af0:	971a      	str	r7, [sp, #104]	; 0x68
 8008af2:	901f      	str	r0, [sp, #124]	; 0x7c
 8008af4:	f8be 0000 	ldrh.w	r0, [lr]
 8008af8:	901b      	str	r0, [sp, #108]	; 0x6c
 8008afa:	f8be 0004 	ldrh.w	r0, [lr, #4]
 8008afe:	901c      	str	r0, [sp, #112]	; 0x70
 8008b00:	b2a8      	uxth	r0, r5
 8008b02:	901d      	str	r0, [sp, #116]	; 0x74
 8008b04:	b2a0      	uxth	r0, r4
 8008b06:	901e      	str	r0, [sp, #120]	; 0x78
 8008b08:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8008b0c:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 8008b10:	b10e      	cbz	r6, 8008b16 <forward_dw_if32of32wf32+0xb6>
 8008b12:	69b0      	ldr	r0, [r6, #24]
 8008b14:	6886      	ldr	r6, [r0, #8]
 8008b16:	6992      	ldr	r2, [r2, #24]
 8008b18:	b2a4      	uxth	r4, r4
 8008b1a:	b2ad      	uxth	r5, r5
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b22:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8008b26:	f108 32ff 	add.w	r2, r8, #4294967295
 8008b2a:	f105 35ff 	add.w	r5, r5, #4294967295
 8008b2e:	fb02 8404 	mla	r4, r2, r4, r8
 8008b32:	f107 32ff 	add.w	r2, r7, #4294967295
 8008b36:	fb02 7505 	mla	r5, r2, r5, r7
 8008b3a:	d059      	beq.n	8008bf0 <forward_dw_if32of32wf32+0x190>
 8008b3c:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8008b40:	b102      	cbz	r2, 8008b44 <forward_dw_if32of32wf32+0xe4>
 8008b42:	6812      	ldr	r2, [r2, #0]
 8008b44:	6808      	ldr	r0, [r1, #0]
 8008b46:	f46f 7388 	mvn.w	r3, #272	; 0x110
 8008b4a:	f3c0 4c43 	ubfx	ip, r0, #17, #4
 8008b4e:	fa43 f30c 	asr.w	r3, r3, ip
 8008b52:	07db      	lsls	r3, r3, #31
 8008b54:	d52b      	bpl.n	8008bae <forward_dw_if32of32wf32+0x14e>
 8008b56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b58:	464a      	mov	r2, r9
 8008b5a:	940c      	str	r4, [sp, #48]	; 0x30
 8008b5c:	4651      	mov	r1, sl
 8008b5e:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8008b60:	4658      	mov	r0, fp
 8008b62:	9706      	str	r7, [sp, #24]
 8008b64:	940f      	str	r4, [sp, #60]	; 0x3c
 8008b66:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
 8008b6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008b6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b70:	930a      	str	r3, [sp, #40]	; 0x28
 8008b72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b74:	9309      	str	r3, [sp, #36]	; 0x24
 8008b76:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008b78:	e9cd 8307 	strd	r8, r3, [sp, #28]
 8008b7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b7e:	9305      	str	r3, [sp, #20]
 8008b80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b82:	9304      	str	r3, [sp, #16]
 8008b84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b86:	9303      	str	r3, [sp, #12]
 8008b88:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008b8a:	9302      	str	r3, [sp, #8]
 8008b8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008b96:	9310      	str	r3, [sp, #64]	; 0x40
 8008b98:	4633      	mov	r3, r6
 8008b9a:	f000 fd57 	bl	800964c <forward_lite_dw_if32of32wf32>
 8008b9e:	b021      	add	sp, #132	; 0x84
 8008ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	deff      	udf	#255	; 0xff
 8008ba8:	2300      	movs	r3, #0
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	deff      	udf	#255	; 0xff
 8008bae:	68cb      	ldr	r3, [r1, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d0d0      	beq.n	8008b56 <forward_dw_if32of32wf32+0xf6>
 8008bb4:	b1ba      	cbz	r2, 8008be6 <forward_dw_if32of32wf32+0x186>
 8008bb6:	6991      	ldr	r1, [r2, #24]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008bbe:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8008bc2:	4103      	asrs	r3, r0
 8008bc4:	e9d1 1001 	ldrd	r1, r0, [r1, #4]
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	9101      	str	r1, [sp, #4]
 8008bcc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008bce:	9100      	str	r1, [sp, #0]
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	bf18      	it	ne
 8008bd6:	4681      	movne	r9, r0
 8008bd8:	f001 f806 	bl	8009be8 <lite_decompress_ilutof32>
 8008bdc:	e7bb      	b.n	8008b56 <forward_dw_if32of32wf32+0xf6>
 8008bde:	4634      	mov	r4, r6
 8008be0:	e762      	b.n	8008aa8 <forward_dw_if32of32wf32+0x48>
 8008be2:	2600      	movs	r6, #0
 8008be4:	e760      	b.n	8008aa8 <forward_dw_if32of32wf32+0x48>
 8008be6:	6993      	ldr	r3, [r2, #24]
 8008be8:	deff      	udf	#255	; 0xff
 8008bea:	2300      	movs	r3, #0
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	deff      	udf	#255	; 0xff
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	deff      	udf	#255	; 0xff
 8008bf6:	bf00      	nop

08008bf8 <forward_dense>:
 8008bf8:	6982      	ldr	r2, [r0, #24]
 8008bfa:	8813      	ldrh	r3, [r2, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d043      	beq.n	8008c88 <forward_dense+0x90>
 8008c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c04:	6855      	ldr	r5, [r2, #4]
 8008c06:	b08e      	sub	sp, #56	; 0x38
 8008c08:	6869      	ldr	r1, [r5, #4]
 8008c0a:	b101      	cbz	r1, 8008c0e <forward_dense+0x16>
 8008c0c:	6809      	ldr	r1, [r1, #0]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d069      	beq.n	8008ce6 <forward_dense+0xee>
 8008c12:	692a      	ldr	r2, [r5, #16]
 8008c14:	b102      	cbz	r2, 8008c18 <forward_dense+0x20>
 8008c16:	6812      	ldr	r2, [r2, #0]
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d061      	beq.n	8008ce0 <forward_dense+0xe8>
 8008c1c:	69ec      	ldr	r4, [r5, #28]
 8008c1e:	2c00      	cmp	r4, #0
 8008c20:	d057      	beq.n	8008cd2 <forward_dense+0xda>
 8008c22:	8b2e      	ldrh	r6, [r5, #24]
 8008c24:	6820      	ldr	r0, [r4, #0]
 8008c26:	2e01      	cmp	r6, #1
 8008c28:	d955      	bls.n	8008cd6 <forward_dense+0xde>
 8008c2a:	6864      	ldr	r4, [r4, #4]
 8008c2c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	68d0      	ldr	r0, [r2, #12]
 8008c34:	68cf      	ldr	r7, [r1, #12]
 8008c36:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8008c3a:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8008c3e:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8008c42:	f8d9 0000 	ldr.w	r0, [r9]
 8008c46:	fb06 f807 	mul.w	r8, r6, r7
 8008c4a:	f020 4c7e 	bic.w	ip, r0, #4261412864	; 0xfe000000
 8008c4e:	d044      	beq.n	8008cda <forward_dense+0xe2>
 8008c50:	6aad      	ldr	r5, [r5, #40]	; 0x28
 8008c52:	b11d      	cbz	r5, 8008c5c <forward_dense+0x64>
 8008c54:	682d      	ldr	r5, [r5, #0]
 8008c56:	b10d      	cbz	r5, 8008c5c <forward_dense+0x64>
 8008c58:	69ab      	ldr	r3, [r5, #24]
 8008c5a:	689d      	ldr	r5, [r3, #8]
 8008c5c:	6992      	ldr	r2, [r2, #24]
 8008c5e:	698b      	ldr	r3, [r1, #24]
 8008c60:	6890      	ldr	r0, [r2, #8]
 8008c62:	6899      	ldr	r1, [r3, #8]
 8008c64:	b10c      	cbz	r4, 8008c6a <forward_dense+0x72>
 8008c66:	69a3      	ldr	r3, [r4, #24]
 8008c68:	689c      	ldr	r4, [r3, #8]
 8008c6a:	4b20      	ldr	r3, [pc, #128]	; (8008cec <forward_dense+0xf4>)
 8008c6c:	459c      	cmp	ip, r3
 8008c6e:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8008c72:	d023      	beq.n	8008cbc <forward_dense+0xc4>
 8008c74:	4e1e      	ldr	r6, [pc, #120]	; (8008cf0 <forward_dense+0xf8>)
 8008c76:	45b4      	cmp	ip, r6
 8008c78:	d015      	beq.n	8008ca6 <forward_dense+0xae>
 8008c7a:	f5a3 039c 	sub.w	r3, r3, #5111808	; 0x4e0000
 8008c7e:	459c      	cmp	ip, r3
 8008c80:	d004      	beq.n	8008c8c <forward_dense+0x94>
 8008c82:	b00e      	add	sp, #56	; 0x38
 8008c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	deff      	udf	#255	; 0xff
 8008c8c:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8008c90:	a807      	add	r0, sp, #28
 8008c92:	9209      	str	r2, [sp, #36]	; 0x24
 8008c94:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8008c98:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
 8008c9c:	f000 fffc 	bl	8009c98 <forward_lite_dense_if32of32wf32>
 8008ca0:	b00e      	add	sp, #56	; 0x38
 8008ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca6:	464b      	mov	r3, r9
 8008ca8:	9500      	str	r5, [sp, #0]
 8008caa:	e9cd e803 	strd	lr, r8, [sp, #12]
 8008cae:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8008cb2:	f001 f94f 	bl	8009f54 <forward_lite_dense_if32of32wf32_lut4>
 8008cb6:	b00e      	add	sp, #56	; 0x38
 8008cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cbc:	464b      	mov	r3, r9
 8008cbe:	9500      	str	r5, [sp, #0]
 8008cc0:	e9cd e803 	strd	lr, r8, [sp, #12]
 8008cc4:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8008cc8:	f001 fa6e 	bl	800a1a8 <forward_lite_dense_if32of32wf32_lut8>
 8008ccc:	b00e      	add	sp, #56	; 0x38
 8008cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	e7aa      	b.n	8008c2c <forward_dense+0x34>
 8008cd6:	2400      	movs	r4, #0
 8008cd8:	e7a8      	b.n	8008c2c <forward_dense+0x34>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	deff      	udf	#255	; 0xff
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	deff      	udf	#255	; 0xff
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	deff      	udf	#255	; 0xff
 8008cec:	01d01040 	.word	0x01d01040
 8008cf0:	01e81040 	.word	0x01e81040

08008cf4 <forward_relu>:
 8008cf4:	6982      	ldr	r2, [r0, #24]
 8008cf6:	8813      	ldrh	r3, [r2, #0]
 8008cf8:	b323      	cbz	r3, 8008d44 <forward_relu+0x50>
 8008cfa:	6851      	ldr	r1, [r2, #4]
 8008cfc:	684a      	ldr	r2, [r1, #4]
 8008cfe:	b102      	cbz	r2, 8008d02 <forward_relu+0xe>
 8008d00:	6812      	ldr	r2, [r2, #0]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	f000 8086 	beq.w	8008e14 <forward_relu+0x120>
 8008d08:	b470      	push	{r4, r5, r6}
 8008d0a:	690b      	ldr	r3, [r1, #16]
 8008d0c:	b103      	cbz	r3, 8008d10 <forward_relu+0x1c>
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	69c6      	ldr	r6, [r0, #28]
 8008d12:	b1ce      	cbz	r6, 8008d48 <forward_relu+0x54>
 8008d14:	6871      	ldr	r1, [r6, #4]
 8008d16:	6998      	ldr	r0, [r3, #24]
 8008d18:	2901      	cmp	r1, #1
 8008d1a:	d03f      	beq.n	8008d9c <forward_relu+0xa8>
 8008d1c:	6893      	ldr	r3, [r2, #8]
 8008d1e:	6991      	ldr	r1, [r2, #24]
 8008d20:	0a1b      	lsrs	r3, r3, #8
 8008d22:	6880      	ldr	r0, [r0, #8]
 8008d24:	6889      	ldr	r1, [r1, #8]
 8008d26:	d06c      	beq.n	8008e02 <forward_relu+0x10e>
 8008d28:	68d5      	ldr	r5, [r2, #12]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008d30:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8008d34:	429d      	cmp	r5, r3
 8008d36:	fb04 f202 	mul.w	r2, r4, r2
 8008d3a:	d1f9      	bne.n	8008d30 <forward_relu+0x3c>
 8008d3c:	68b3      	ldr	r3, [r6, #8]
 8008d3e:	bc70      	pop	{r4, r5, r6}
 8008d40:	f000 becc 	b.w	8009adc <forward_lite_nl_relu_generic_if32of32_kernel>
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	deff      	udf	#255	; 0xff
 8008d48:	6999      	ldr	r1, [r3, #24]
 8008d4a:	6893      	ldr	r3, [r2, #8]
 8008d4c:	6990      	ldr	r0, [r2, #24]
 8008d4e:	0a1b      	lsrs	r3, r3, #8
 8008d50:	6889      	ldr	r1, [r1, #8]
 8008d52:	6884      	ldr	r4, [r0, #8]
 8008d54:	d057      	beq.n	8008e06 <forward_relu+0x112>
 8008d56:	68d5      	ldr	r5, [r2, #12]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008d5e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8008d62:	429d      	cmp	r5, r3
 8008d64:	fb00 f202 	mul.w	r2, r0, r2
 8008d68:	d1f9      	bne.n	8008d5e <forward_relu+0x6a>
 8008d6a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008d6e:	4413      	add	r3, r2
 8008d70:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008d74:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008d78:	4294      	cmp	r4, r2
 8008d7a:	d80d      	bhi.n	8008d98 <forward_relu+0xa4>
 8008d7c:	3204      	adds	r2, #4
 8008d7e:	3104      	adds	r1, #4
 8008d80:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008e1c <forward_relu+0x128>
 8008d84:	4613      	mov	r3, r2
 8008d86:	ed72 7a01 	vldmdb	r2!, {s15}
 8008d8a:	3b08      	subs	r3, #8
 8008d8c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8008d90:	ed61 7a01 	vstmdb	r1!, {s15}
 8008d94:	429c      	cmp	r4, r3
 8008d96:	d9f5      	bls.n	8008d84 <forward_relu+0x90>
 8008d98:	bc70      	pop	{r4, r5, r6}
 8008d9a:	4770      	bx	lr
 8008d9c:	6993      	ldr	r3, [r2, #24]
 8008d9e:	6880      	ldr	r0, [r0, #8]
 8008da0:	689c      	ldr	r4, [r3, #8]
 8008da2:	6893      	ldr	r3, [r2, #8]
 8008da4:	0a1b      	lsrs	r3, r3, #8
 8008da6:	d030      	beq.n	8008e0a <forward_relu+0x116>
 8008da8:	68d5      	ldr	r5, [r2, #12]
 8008daa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008dae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008db2:	429d      	cmp	r5, r3
 8008db4:	fb02 f101 	mul.w	r1, r2, r1
 8008db8:	d1f9      	bne.n	8008dae <forward_relu+0xba>
 8008dba:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8008dbe:	68b3      	ldr	r3, [r6, #8]
 8008dc0:	440a      	add	r2, r1
 8008dc2:	ed93 7a00 	vldr	s14, [r3]
 8008dc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008dca:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008dce:	429c      	cmp	r4, r3
 8008dd0:	d8e2      	bhi.n	8008d98 <forward_relu+0xa4>
 8008dd2:	1d02      	adds	r2, r0, #4
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008ddc:	1f19      	subs	r1, r3, #4
 8008dde:	3b08      	subs	r3, #8
 8008de0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de8:	d405      	bmi.n	8008df6 <forward_relu+0x102>
 8008dea:	429c      	cmp	r4, r3
 8008dec:	f842 0d04 	str.w	r0, [r2, #-4]!
 8008df0:	d8d2      	bhi.n	8008d98 <forward_relu+0xa4>
 8008df2:	460b      	mov	r3, r1
 8008df4:	e7f0      	b.n	8008dd8 <forward_relu+0xe4>
 8008df6:	429c      	cmp	r4, r3
 8008df8:	ed62 7a01 	vstmdb	r2!, {s15}
 8008dfc:	d8cc      	bhi.n	8008d98 <forward_relu+0xa4>
 8008dfe:	460b      	mov	r3, r1
 8008e00:	e7ea      	b.n	8008dd8 <forward_relu+0xe4>
 8008e02:	2201      	movs	r2, #1
 8008e04:	e79a      	b.n	8008d3c <forward_relu+0x48>
 8008e06:	4622      	mov	r2, r4
 8008e08:	e7b8      	b.n	8008d7c <forward_relu+0x88>
 8008e0a:	68b2      	ldr	r2, [r6, #8]
 8008e0c:	4623      	mov	r3, r4
 8008e0e:	ed92 7a00 	vldr	s14, [r2]
 8008e12:	e7de      	b.n	8008dd2 <forward_relu+0xde>
 8008e14:	2300      	movs	r3, #0
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	deff      	udf	#255	; 0xff
 8008e1a:	bf00      	nop
 8008e1c:	00000000 	.word	0x00000000

08008e20 <forward_sm>:
 8008e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e24:	6982      	ldr	r2, [r0, #24]
 8008e26:	8813      	ldrh	r3, [r2, #0]
 8008e28:	b383      	cbz	r3, 8008e8c <forward_sm+0x6c>
 8008e2a:	6852      	ldr	r2, [r2, #4]
 8008e2c:	6855      	ldr	r5, [r2, #4]
 8008e2e:	b105      	cbz	r5, 8008e32 <forward_sm+0x12>
 8008e30:	682d      	ldr	r5, [r5, #0]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d029      	beq.n	8008e8a <forward_sm+0x6a>
 8008e36:	6913      	ldr	r3, [r2, #16]
 8008e38:	b363      	cbz	r3, 8008e94 <forward_sm+0x74>
 8008e3a:	681e      	ldr	r6, [r3, #0]
 8008e3c:	68a9      	ldr	r1, [r5, #8]
 8008e3e:	68ec      	ldr	r4, [r5, #12]
 8008e40:	68f3      	ldr	r3, [r6, #12]
 8008e42:	0a09      	lsrs	r1, r1, #8
 8008e44:	6867      	ldr	r7, [r4, #4]
 8008e46:	685a      	ldr	r2, [r3, #4]
 8008e48:	d022      	beq.n	8008e90 <forward_sm+0x70>
 8008e4a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008e4e:	2301      	movs	r3, #1
 8008e50:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8008e54:	428c      	cmp	r4, r1
 8008e56:	fb00 f303 	mul.w	r3, r0, r3
 8008e5a:	d1f9      	bne.n	8008e50 <forward_sm+0x30>
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	69a8      	ldr	r0, [r5, #24]
 8008e60:	69b1      	ldr	r1, [r6, #24]
 8008e62:	6884      	ldr	r4, [r0, #8]
 8008e64:	688e      	ldr	r6, [r1, #8]
 8008e66:	18e5      	adds	r5, r4, r3
 8008e68:	42ac      	cmp	r4, r5
 8008e6a:	d20c      	bcs.n	8008e86 <forward_sm+0x66>
 8008e6c:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8008e70:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8008e74:	4621      	mov	r1, r4
 8008e76:	444c      	add	r4, r9
 8008e78:	4630      	mov	r0, r6
 8008e7a:	463a      	mov	r2, r7
 8008e7c:	f000 fdea 	bl	8009a54 <forward_lite_nl_softmax_if32of32_kernel>
 8008e80:	42a5      	cmp	r5, r4
 8008e82:	4446      	add	r6, r8
 8008e84:	d8f6      	bhi.n	8008e74 <forward_sm+0x54>
 8008e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	deff      	udf	#255	; 0xff
 8008e90:	2304      	movs	r3, #4
 8008e92:	e7e4      	b.n	8008e5e <forward_sm+0x3e>
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	deff      	udf	#255	; 0xff

08008e98 <forward_ap>:
 8008e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9c:	6983      	ldr	r3, [r0, #24]
 8008e9e:	b09b      	sub	sp, #108	; 0x6c
 8008ea0:	881a      	ldrh	r2, [r3, #0]
 8008ea2:	900f      	str	r0, [sp, #60]	; 0x3c
 8008ea4:	2a00      	cmp	r2, #0
 8008ea6:	f000 80f4 	beq.w	8009092 <forward_ap+0x1fa>
 8008eaa:	6859      	ldr	r1, [r3, #4]
 8008eac:	684b      	ldr	r3, [r1, #4]
 8008eae:	b103      	cbz	r3, 8008eb2 <forward_ap+0x1a>
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2a01      	cmp	r2, #1
 8008eb4:	f000 80f8 	beq.w	80090a8 <forward_ap+0x210>
 8008eb8:	690a      	ldr	r2, [r1, #16]
 8008eba:	2a00      	cmp	r2, #0
 8008ebc:	f000 80f7 	beq.w	80090ae <forward_ap+0x216>
 8008ec0:	6811      	ldr	r1, [r2, #0]
 8008ec2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008ec4:	68ca      	ldr	r2, [r1, #12]
 8008ec6:	6989      	ldr	r1, [r1, #24]
 8008ec8:	68d4      	ldr	r4, [r2, #12]
 8008eca:	6895      	ldr	r5, [r2, #8]
 8008ecc:	688a      	ldr	r2, [r1, #8]
 8008ece:	68d9      	ldr	r1, [r3, #12]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	9204      	str	r2, [sp, #16]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8008ed8:	9315      	str	r3, [sp, #84]	; 0x54
 8008eda:	9410      	str	r4, [sp, #64]	; 0x40
 8008edc:	9509      	str	r5, [sp, #36]	; 0x24
 8008ede:	e9d2 3600 	ldrd	r3, r6, [r2]
 8008ee2:	e9d1 7c02 	ldrd	r7, ip, [r1, #8]
 8008ee6:	6a02      	ldr	r2, [r0, #32]
 8008ee8:	970a      	str	r7, [sp, #40]	; 0x28
 8008eea:	920b      	str	r2, [sp, #44]	; 0x2c
 8008eec:	684f      	ldr	r7, [r1, #4]
 8008eee:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008ef0:	69c1      	ldr	r1, [r0, #28]
 8008ef2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8008ef4:	9614      	str	r6, [sp, #80]	; 0x50
 8008ef6:	9013      	str	r0, [sp, #76]	; 0x4c
 8008ef8:	4258      	negs	r0, r3
 8008efa:	9111      	str	r1, [sp, #68]	; 0x44
 8008efc:	9212      	str	r2, [sp, #72]	; 0x48
 8008efe:	9003      	str	r0, [sp, #12]
 8008f00:	2c00      	cmp	r4, #0
 8008f02:	f000 80c3 	beq.w	800908c <forward_ap+0x1f4>
 8008f06:	eb0c 0003 	add.w	r0, ip, r3
 8008f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f0e:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 8008f12:	fb07 f303 	mul.w	r3, r7, r3
 8008f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f1a:	9005      	str	r0, [sp, #20]
 8008f1c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8008f20:	fb02 f301 	mul.w	r3, r2, r1
 8008f24:	9316      	str	r3, [sp, #88]	; 0x58
 8008f26:	4273      	negs	r3, r6
 8008f28:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f2a:	fb05 f30a 	mul.w	r3, r5, sl
 8008f2e:	463d      	mov	r5, r7
 8008f30:	9319      	str	r3, [sp, #100]	; 0x64
 8008f32:	2300      	movs	r3, #0
 8008f34:	930c      	str	r3, [sp, #48]	; 0x30
 8008f36:	9b03      	ldr	r3, [sp, #12]
 8008f38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f3a:	9805      	ldr	r0, [sp, #20]
 8008f3c:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8008f40:	4281      	cmp	r1, r0
 8008f42:	bf94      	ite	ls
 8008f44:	185b      	addls	r3, r3, r1
 8008f46:	181b      	addhi	r3, r3, r0
 8008f48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f4a:	920e      	str	r2, [sp, #56]	; 0x38
 8008f4c:	9301      	str	r3, [sp, #4]
 8008f4e:	2900      	cmp	r1, #0
 8008f50:	f000 808e 	beq.w	8009070 <forward_ap+0x1d8>
 8008f54:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	fb00 f102 	mul.w	r1, r0, r2
 8008f5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f5e:	9318      	str	r3, [sp, #96]	; 0x60
 8008f60:	1882      	adds	r2, r0, r2
 8008f62:	9b04      	ldr	r3, [sp, #16]
 8008f64:	9108      	str	r1, [sp, #32]
 8008f66:	4698      	mov	r8, r3
 8008f68:	eb03 010a 	add.w	r1, r3, sl
 8008f6c:	9207      	str	r2, [sp, #28]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f72:	930d      	str	r3, [sp, #52]	; 0x34
 8008f74:	2a00      	cmp	r2, #0
 8008f76:	9206      	str	r2, [sp, #24]
 8008f78:	f2c0 8093 	blt.w	80090a2 <forward_ap+0x20a>
 8008f7c:	9b08      	ldr	r3, [sp, #32]
 8008f7e:	189c      	adds	r4, r3, r2
 8008f80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f82:	9806      	ldr	r0, [sp, #24]
 8008f84:	fb04 340a 	mla	r4, r4, sl, r3
 8008f88:	9e07      	ldr	r6, [sp, #28]
 8008f8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f8c:	42b3      	cmp	r3, r6
 8008f8e:	bf94      	ite	ls
 8008f90:	18c0      	addls	r0, r0, r3
 8008f92:	1980      	addhi	r0, r0, r6
 8008f94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f96:	eba2 0e00 	sub.w	lr, r2, r0
 8008f9a:	1a82      	subs	r2, r0, r2
 8008f9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008fa0:	9200      	str	r2, [sp, #0]
 8008fa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008fa4:	fb02 fe0e 	mul.w	lr, r2, lr
 8008fa8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	bf08      	it	eq
 8008fae:	4672      	moveq	r2, lr
 8008fb0:	9b01      	ldr	r3, [sp, #4]
 8008fb2:	9202      	str	r2, [sp, #8]
 8008fb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	dd48      	ble.n	800904c <forward_ap+0x1b4>
 8008fba:	9b00      	ldr	r3, [sp, #0]
 8008fbc:	4694      	mov	ip, r2
 8008fbe:	2700      	movs	r7, #0
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	fb0a 4003 	mla	r0, sl, r3, r4
 8008fc6:	9b00      	ldr	r3, [sp, #0]
 8008fc8:	441f      	add	r7, r3
 8008fca:	45be      	cmp	lr, r7
 8008fcc:	d063      	beq.n	8009096 <forward_ap+0x1fe>
 8008fce:	42a0      	cmp	r0, r4
 8008fd0:	d933      	bls.n	800903a <forward_ap+0x1a2>
 8008fd2:	2600      	movs	r6, #0
 8008fd4:	4623      	mov	r3, r4
 8008fd6:	eb0a 0b04 	add.w	fp, sl, r4
 8008fda:	b145      	cbz	r5, 8008fee <forward_ap+0x156>
 8008fdc:	2a00      	cmp	r2, #0
 8008fde:	d05e      	beq.n	800909e <forward_ap+0x206>
 8008fe0:	4642      	mov	r2, r8
 8008fe2:	ecf3 7a01 	vldmia	r3!, {s15}
 8008fe6:	459b      	cmp	fp, r3
 8008fe8:	ece2 7a01 	vstmia	r2!, {s15}
 8008fec:	d1f9      	bne.n	8008fe2 <forward_ap+0x14a>
 8008fee:	46a3      	mov	fp, r4
 8008ff0:	44d3      	add	fp, sl
 8008ff2:	4558      	cmp	r0, fp
 8008ff4:	d910      	bls.n	8009018 <forward_ap+0x180>
 8008ff6:	2d00      	cmp	r5, #0
 8008ff8:	d0fa      	beq.n	8008ff0 <forward_ap+0x158>
 8008ffa:	4643      	mov	r3, r8
 8008ffc:	465a      	mov	r2, fp
 8008ffe:	ed93 7a00 	vldr	s14, [r3]
 8009002:	ecf2 7a01 	vldmia	r2!, {s15}
 8009006:	ee77 7a87 	vadd.f32	s15, s15, s14
 800900a:	ece3 7a01 	vstmia	r3!, {s15}
 800900e:	428b      	cmp	r3, r1
 8009010:	d1f5      	bne.n	8008ffe <forward_ap+0x166>
 8009012:	44d3      	add	fp, sl
 8009014:	4558      	cmp	r0, fp
 8009016:	d8ee      	bhi.n	8008ff6 <forward_ap+0x15e>
 8009018:	b17e      	cbz	r6, 800903a <forward_ap+0x1a2>
 800901a:	ee07 6a90 	vmov	s15, r6
 800901e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009026:	b145      	cbz	r5, 800903a <forward_ap+0x1a2>
 8009028:	4643      	mov	r3, r8
 800902a:	edd3 7a00 	vldr	s15, [r3]
 800902e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009032:	ece3 7a01 	vstmia	r3!, {s15}
 8009036:	4299      	cmp	r1, r3
 8009038:	d1f7      	bne.n	800902a <forward_ap+0x192>
 800903a:	f10c 0c01 	add.w	ip, ip, #1
 800903e:	9b01      	ldr	r3, [sp, #4]
 8009040:	444c      	add	r4, r9
 8009042:	4448      	add	r0, r9
 8009044:	4563      	cmp	r3, ip
 8009046:	f04f 0200 	mov.w	r2, #0
 800904a:	d1bc      	bne.n	8008fc6 <forward_ap+0x12e>
 800904c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800904e:	44d0      	add	r8, sl
 8009050:	9c07      	ldr	r4, [sp, #28]
 8009052:	4451      	add	r1, sl
 8009054:	9a06      	ldr	r2, [sp, #24]
 8009056:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009058:	4402      	add	r2, r0
 800905a:	1a20      	subs	r0, r4, r0
 800905c:	3301      	adds	r3, #1
 800905e:	9007      	str	r0, [sp, #28]
 8009060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009062:	930d      	str	r3, [sp, #52]	; 0x34
 8009064:	4298      	cmp	r0, r3
 8009066:	d185      	bne.n	8008f74 <forward_ap+0xdc>
 8009068:	9b04      	ldr	r3, [sp, #16]
 800906a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800906c:	4413      	add	r3, r2
 800906e:	9304      	str	r3, [sp, #16]
 8009070:	9a03      	ldr	r2, [sp, #12]
 8009072:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009074:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009076:	440a      	add	r2, r1
 8009078:	3301      	adds	r3, #1
 800907a:	9203      	str	r2, [sp, #12]
 800907c:	9a05      	ldr	r2, [sp, #20]
 800907e:	930c      	str	r3, [sp, #48]	; 0x30
 8009080:	1a52      	subs	r2, r2, r1
 8009082:	9205      	str	r2, [sp, #20]
 8009084:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009086:	429a      	cmp	r2, r3
 8009088:	f47f af55 	bne.w	8008f36 <forward_ap+0x9e>
 800908c:	b01b      	add	sp, #108	; 0x6c
 800908e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009092:	6853      	ldr	r3, [r2, #4]
 8009094:	deff      	udf	#255	; 0xff
 8009096:	42a0      	cmp	r0, r4
 8009098:	9e02      	ldr	r6, [sp, #8]
 800909a:	d89b      	bhi.n	8008fd4 <forward_ap+0x13c>
 800909c:	e7bc      	b.n	8009018 <forward_ap+0x180>
 800909e:	46a3      	mov	fp, r4
 80090a0:	e7ab      	b.n	8008ffa <forward_ap+0x162>
 80090a2:	9c08      	ldr	r4, [sp, #32]
 80090a4:	2200      	movs	r2, #0
 80090a6:	e76b      	b.n	8008f80 <forward_ap+0xe8>
 80090a8:	2300      	movs	r3, #0
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	deff      	udf	#255	; 0xff
 80090ae:	68d3      	ldr	r3, [r2, #12]
 80090b0:	deff      	udf	#255	; 0xff
 80090b2:	bf00      	nop

080090b4 <forward_lite_conv2d_if32of32wf32>:
 80090b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b8:	ed2d 8b0e 	vpush	{d8-d14}
 80090bc:	b0a1      	sub	sp, #132	; 0x84
 80090be:	4686      	mov	lr, r0
 80090c0:	4694      	mov	ip, r2
 80090c2:	910c      	str	r1, [sp, #48]	; 0x30
 80090c4:	f8bd 1108 	ldrh.w	r1, [sp, #264]	; 0x108
 80090c8:	f8bd 4104 	ldrh.w	r4, [sp, #260]	; 0x104
 80090cc:	f8bd 510c 	ldrh.w	r5, [sp, #268]	; 0x10c
 80090d0:	424f      	negs	r7, r1
 80090d2:	f8bd 6110 	ldrh.w	r6, [sp, #272]	; 0x110
 80090d6:	901e      	str	r0, [sp, #120]	; 0x78
 80090d8:	983e      	ldr	r0, [sp, #248]	; 0xf8
 80090da:	9217      	str	r2, [sp, #92]	; 0x5c
 80090dc:	930e      	str	r3, [sp, #56]	; 0x38
 80090de:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 80090e0:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80090e2:	9418      	str	r4, [sp, #96]	; 0x60
 80090e4:	9508      	str	r5, [sp, #32]
 80090e6:	961f      	str	r6, [sp, #124]	; 0x7c
 80090e8:	9711      	str	r7, [sp, #68]	; 0x44
 80090ea:	2800      	cmp	r0, #0
 80090ec:	f000 8175 	beq.w	80093da <forward_lite_conv2d_if32of32wf32+0x326>
 80090f0:	983f      	ldr	r0, [sp, #252]	; 0xfc
 80090f2:	910d      	str	r1, [sp, #52]	; 0x34
 80090f4:	fb00 f303 	mul.w	r3, r0, r3
 80090f8:	9939      	ldr	r1, [sp, #228]	; 0xe4
 80090fa:	ed9f 8abe 	vldr	s16, [pc, #760]	; 80093f4 <forward_lite_conv2d_if32of32wf32+0x340>
 80090fe:	fb01 f303 	mul.w	r3, r1, r3
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	930f      	str	r3, [sp, #60]	; 0x3c
 8009106:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8009108:	fb01 f303 	mul.w	r3, r1, r3
 800910c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800910e:	fb01 f102 	mul.w	r1, r1, r2
 8009112:	0092      	lsls	r2, r2, #2
 8009114:	9205      	str	r2, [sp, #20]
 8009116:	0089      	lsls	r1, r1, #2
 8009118:	fb06 f203 	mul.w	r2, r6, r3
 800911c:	fb07 f303 	mul.w	r3, r7, r3
 8009120:	911a      	str	r1, [sp, #104]	; 0x68
 8009122:	4261      	negs	r1, r4
 8009124:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8009128:	0094      	lsls	r4, r2, #2
 800912a:	f10c 4278 	add.w	r2, ip, #4160749568	; 0xf8000000
 800912e:	9312      	str	r3, [sp, #72]	; 0x48
 8009130:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8009132:	9219      	str	r2, [sp, #100]	; 0x64
 8009134:	2200      	movs	r2, #0
 8009136:	fb05 f303 	mul.w	r3, r5, r3
 800913a:	9115      	str	r1, [sp, #84]	; 0x54
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	941c      	str	r4, [sp, #112]	; 0x70
 8009140:	9214      	str	r2, [sp, #80]	; 0x50
 8009142:	9306      	str	r3, [sp, #24]
 8009144:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	9307      	str	r3, [sp, #28]
 800914a:	fb03 f301 	mul.w	r3, r3, r1
 800914e:	9316      	str	r3, [sp, #88]	; 0x58
 8009150:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009152:	2b00      	cmp	r3, #0
 8009154:	f2c0 8275 	blt.w	8009642 <forward_lite_conv2d_if32of32wf32+0x58e>
 8009158:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800915a:	930b      	str	r3, [sp, #44]	; 0x2c
 800915c:	2300      	movs	r3, #0
 800915e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009160:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8009162:	440a      	add	r2, r1
 8009164:	9945      	ldr	r1, [sp, #276]	; 0x114
 8009166:	428a      	cmp	r2, r1
 8009168:	bf94      	ite	ls
 800916a:	ebc3 0b02 	rsbls	fp, r3, r2
 800916e:	ebc3 0b01 	rsbhi	fp, r3, r1
 8009172:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8009174:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009176:	2a00      	cmp	r2, #0
 8009178:	f000 8144 	beq.w	8009404 <forward_lite_conv2d_if32of32wf32+0x350>
 800917c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800917e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8009182:	f0c0 813f 	bcc.w	8009404 <forward_lite_conv2d_if32of32wf32+0x350>
 8009186:	9a05      	ldr	r2, [sp, #20]
 8009188:	188a      	adds	r2, r1, r2
 800918a:	4291      	cmp	r1, r2
 800918c:	921b      	str	r2, [sp, #108]	; 0x6c
 800918e:	f080 810e 	bcs.w	80093ae <forward_lite_conv2d_if32of32wf32+0x2fa>
 8009192:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8009194:	fb02 f303 	mul.w	r3, r2, r3
 8009198:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800919a:	9309      	str	r3, [sp, #36]	; 0x24
 800919c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800919e:	4413      	add	r3, r2
 80091a0:	931d      	str	r3, [sp, #116]	; 0x74
 80091a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091a4:	9310      	str	r3, [sp, #64]	; 0x40
 80091a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80091aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091ac:	930a      	str	r3, [sp, #40]	; 0x28
 80091ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091b0:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80091b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80091b4:	f001 faa8 	bl	800a708 <st_int8_copy>
 80091b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 811f 	beq.w	80093fe <forward_lite_conv2d_if32of32wf32+0x34a>
 80091c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091c2:	ecf3 1a01 	vldmia	r3!, {s3}
 80091c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80091c8:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 80e4 	beq.w	8009398 <forward_lite_conv2d_if32of32wf32+0x2e4>
 80091d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80091d6:	9302      	str	r3, [sp, #8]
 80091d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091da:	9303      	str	r3, [sp, #12]
 80091dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091de:	9301      	str	r3, [sp, #4]
 80091e0:	2300      	movs	r3, #0
 80091e2:	9304      	str	r3, [sp, #16]
 80091e4:	9b01      	ldr	r3, [sp, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f2c0 80fe 	blt.w	80093e8 <forward_lite_conv2d_if32of32wf32+0x334>
 80091ec:	9902      	ldr	r1, [sp, #8]
 80091ee:	2600      	movs	r6, #0
 80091f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091f2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80091f4:	9807      	ldr	r0, [sp, #28]
 80091f6:	9c00      	ldr	r4, [sp, #0]
 80091f8:	fb00 3202 	mla	r2, r0, r2, r3
 80091fc:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80091fe:	4423      	add	r3, r4
 8009200:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 8009202:	42a3      	cmp	r3, r4
 8009204:	bf94      	ite	ls
 8009206:	ebc6 0603 	rsbls	r6, r6, r3
 800920a:	ebc6 0604 	rsbhi	r6, r6, r4
 800920e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8009210:	f1bb 0f00 	cmp.w	fp, #0
 8009214:	eba3 0a06 	sub.w	sl, r3, r6
 8009218:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800921a:	eba4 0906 	sub.w	r9, r4, r6
 800921e:	fb03 f606 	mul.w	r6, r3, r6
 8009222:	f340 80e9 	ble.w	80093f8 <forward_lite_conv2d_if32of32wf32+0x344>
 8009226:	f026 070f 	bic.w	r7, r6, #15
 800922a:	eeb0 7a61 	vmov.f32	s14, s3
 800922e:	fb00 fa0a 	mul.w	sl, r0, sl
 8009232:	f04f 0c00 	mov.w	ip, #0
 8009236:	f107 38ff 	add.w	r8, r7, #4294967295
 800923a:	fb00 f909 	mul.w	r9, r0, r9
 800923e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8009242:	f108 0801 	add.w	r8, r8, #1
 8009246:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800924a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800924e:	2f00      	cmp	r7, #0
 8009250:	f340 80c8 	ble.w	80093e4 <forward_lite_conv2d_if32of32wf32+0x330>
 8009254:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8009258:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800925c:	2400      	movs	r4, #0
 800925e:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8009262:	3410      	adds	r4, #16
 8009264:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8009268:	3340      	adds	r3, #64	; 0x40
 800926a:	ed50 4a10 	vldr	s9, [r0, #-64]	; 0xffffffc0
 800926e:	42bc      	cmp	r4, r7
 8009270:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009274:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8009278:	ed50 5a0e 	vldr	s11, [r0, #-56]	; 0xffffffc8
 800927c:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8009280:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 8009284:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009288:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 800928c:	ed10 ea1d 	vldr	s28, [r0, #-116]	; 0xffffff8c
 8009290:	ed50 da1c 	vldr	s27, [r0, #-112]	; 0xffffff90
 8009294:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 8009298:	ed50 ca1b 	vldr	s25, [r0, #-108]	; 0xffffff94
 800929c:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 80092a0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80092a4:	ed50 ba1a 	vldr	s23, [r0, #-104]	; 0xffffff98
 80092a8:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 80092ac:	ed50 aa19 	vldr	s21, [r0, #-100]	; 0xffffff9c
 80092b0:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 80092b4:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 80092b8:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 80092bc:	eeee 7a26 	vfma.f32	s15, s28, s13
 80092c0:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 80092c4:	ed13 0a17 	vldr	s0, [r3, #-92]	; 0xffffffa4
 80092c8:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 80092cc:	ed13 1a16 	vldr	s2, [r3, #-88]	; 0xffffffa8
 80092d0:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 80092d4:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 80092d8:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80092dc:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 80092e0:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80092e4:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 80092e8:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80092ec:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 80092f0:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80092f4:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80092f8:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 80092fc:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8009300:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009304:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009308:	eee9 7a89 	vfma.f32	s15, s19, s18
 800930c:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009310:	eee0 7a81 	vfma.f32	s15, s1, s2
 8009314:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009318:	eee3 7a23 	vfma.f32	s15, s6, s7
 800931c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009320:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009324:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009328:	ee37 7a27 	vadd.f32	s14, s14, s15
 800932c:	db97      	blt.n	800925e <forward_lite_conv2d_if32of32wf32+0x1aa>
 800932e:	4471      	add	r1, lr
 8009330:	4472      	add	r2, lr
 8009332:	4640      	mov	r0, r8
 8009334:	4286      	cmp	r6, r0
 8009336:	dd10      	ble.n	800935a <forward_lite_conv2d_if32of32wf32+0x2a6>
 8009338:	4603      	mov	r3, r0
 800933a:	460d      	mov	r5, r1
 800933c:	4614      	mov	r4, r2
 800933e:	3301      	adds	r3, #1
 8009340:	ecf4 6a01 	vldmia	r4!, {s13}
 8009344:	ecf5 7a01 	vldmia	r5!, {s15}
 8009348:	429e      	cmp	r6, r3
 800934a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800934e:	d1f6      	bne.n	800933e <forward_lite_conv2d_if32of32wf32+0x28a>
 8009350:	1a30      	subs	r0, r6, r0
 8009352:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8009356:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800935a:	f10c 0c01 	add.w	ip, ip, #1
 800935e:	4451      	add	r1, sl
 8009360:	444a      	add	r2, r9
 8009362:	45e3      	cmp	fp, ip
 8009364:	f47f af73 	bne.w	800924e <forward_lite_conv2d_if32of32wf32+0x19a>
 8009368:	9901      	ldr	r1, [sp, #4]
 800936a:	9808      	ldr	r0, [sp, #32]
 800936c:	9a03      	ldr	r2, [sp, #12]
 800936e:	4401      	add	r1, r0
 8009370:	9b04      	ldr	r3, [sp, #16]
 8009372:	ed82 7a00 	vstr	s14, [r2]
 8009376:	9101      	str	r1, [sp, #4]
 8009378:	3301      	adds	r3, #1
 800937a:	9905      	ldr	r1, [sp, #20]
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	440a      	add	r2, r1
 8009380:	9906      	ldr	r1, [sp, #24]
 8009382:	9203      	str	r2, [sp, #12]
 8009384:	9a00      	ldr	r2, [sp, #0]
 8009386:	1a12      	subs	r2, r2, r0
 8009388:	9200      	str	r2, [sp, #0]
 800938a:	9a02      	ldr	r2, [sp, #8]
 800938c:	440a      	add	r2, r1
 800938e:	9202      	str	r2, [sp, #8]
 8009390:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8009392:	429a      	cmp	r2, r3
 8009394:	f47f af26 	bne.w	80091e4 <forward_lite_conv2d_if32of32wf32+0x130>
 8009398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800939a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800939c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800939e:	440a      	add	r2, r1
 80093a0:	3304      	adds	r3, #4
 80093a2:	920a      	str	r2, [sp, #40]	; 0x28
 80093a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80093a6:	9310      	str	r3, [sp, #64]	; 0x40
 80093a8:	4293      	cmp	r3, r2
 80093aa:	f4ff af00 	bcc.w	80091ae <forward_lite_conv2d_if32of32wf32+0xfa>
 80093ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093b0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093b4:	440a      	add	r2, r1
 80093b6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80093b8:	3301      	adds	r3, #1
 80093ba:	920c      	str	r2, [sp, #48]	; 0x30
 80093bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80093be:	9314      	str	r3, [sp, #80]	; 0x50
 80093c0:	440a      	add	r2, r1
 80093c2:	9211      	str	r2, [sp, #68]	; 0x44
 80093c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093c6:	1a52      	subs	r2, r2, r1
 80093c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80093ca:	920d      	str	r2, [sp, #52]	; 0x34
 80093cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093ce:	440a      	add	r2, r1
 80093d0:	9212      	str	r2, [sp, #72]	; 0x48
 80093d2:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80093d4:	429a      	cmp	r2, r3
 80093d6:	f47f aebb 	bne.w	8009150 <forward_lite_conv2d_if32of32wf32+0x9c>
 80093da:	b021      	add	sp, #132	; 0x84
 80093dc:	ecbd 8b0e 	vpop	{d8-d14}
 80093e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e4:	2000      	movs	r0, #0
 80093e6:	e7a5      	b.n	8009334 <forward_lite_conv2d_if32of32wf32+0x280>
 80093e8:	9a00      	ldr	r2, [sp, #0]
 80093ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ec:	4616      	mov	r6, r2
 80093ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093f0:	189a      	adds	r2, r3, r2
 80093f2:	e6fe      	b.n	80091f2 <forward_lite_conv2d_if32of32wf32+0x13e>
 80093f4:	00000000 	.word	0x00000000
 80093f8:	eeb0 7a61 	vmov.f32	s14, s3
 80093fc:	e7b4      	b.n	8009368 <forward_lite_conv2d_if32of32wf32+0x2b4>
 80093fe:	eef0 1a48 	vmov.f32	s3, s16
 8009402:	e6e1      	b.n	80091c8 <forward_lite_conv2d_if32of32wf32+0x114>
 8009404:	9a05      	ldr	r2, [sp, #20]
 8009406:	188a      	adds	r2, r1, r2
 8009408:	4291      	cmp	r1, r2
 800940a:	921b      	str	r2, [sp, #108]	; 0x6c
 800940c:	d2cf      	bcs.n	80093ae <forward_lite_conv2d_if32of32wf32+0x2fa>
 800940e:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8009410:	fb02 f303 	mul.w	r3, r2, r3
 8009414:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009416:	930a      	str	r3, [sp, #40]	; 0x28
 8009418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800941a:	4413      	add	r3, r2
 800941c:	931d      	str	r3, [sp, #116]	; 0x74
 800941e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009420:	9310      	str	r3, [sp, #64]	; 0x40
 8009422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009424:	9313      	str	r3, [sp, #76]	; 0x4c
 8009426:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009428:	9309      	str	r3, [sp, #36]	; 0x24
 800942a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 80fa 	beq.w	8009626 <forward_lite_conv2d_if32of32wf32+0x572>
 8009432:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009434:	ecf3 1a01 	vldmia	r3!, {s3}
 8009438:	9313      	str	r3, [sp, #76]	; 0x4c
 800943a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 80e3 	beq.w	8009608 <forward_lite_conv2d_if32of32wf32+0x554>
 8009442:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009448:	9302      	str	r3, [sp, #8]
 800944a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800944c:	9303      	str	r3, [sp, #12]
 800944e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009450:	9301      	str	r3, [sp, #4]
 8009452:	2300      	movs	r3, #0
 8009454:	9304      	str	r3, [sp, #16]
 8009456:	9b01      	ldr	r3, [sp, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	f2c0 80e9 	blt.w	8009630 <forward_lite_conv2d_if32of32wf32+0x57c>
 800945e:	9a02      	ldr	r2, [sp, #8]
 8009460:	2400      	movs	r4, #0
 8009462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009464:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009466:	9807      	ldr	r0, [sp, #28]
 8009468:	9d00      	ldr	r5, [sp, #0]
 800946a:	fb03 1300 	mla	r3, r3, r0, r1
 800946e:	993b      	ldr	r1, [sp, #236]	; 0xec
 8009470:	4429      	add	r1, r5
 8009472:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8009474:	42a9      	cmp	r1, r5
 8009476:	bf94      	ite	ls
 8009478:	ebc4 0401 	rsbls	r4, r4, r1
 800947c:	ebc4 0405 	rsbhi	r4, r4, r5
 8009480:	993b      	ldr	r1, [sp, #236]	; 0xec
 8009482:	f1bb 0f00 	cmp.w	fp, #0
 8009486:	eba1 0a04 	sub.w	sl, r1, r4
 800948a:	9939      	ldr	r1, [sp, #228]	; 0xe4
 800948c:	eba5 0904 	sub.w	r9, r5, r4
 8009490:	fb01 f404 	mul.w	r4, r1, r4
 8009494:	f340 80d2 	ble.w	800963c <forward_lite_conv2d_if32of32wf32+0x588>
 8009498:	f024 0c0f 	bic.w	ip, r4, #15
 800949c:	eeb0 7a61 	vmov.f32	s14, s3
 80094a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80094a4:	2700      	movs	r7, #0
 80094a6:	f10c 38ff 	add.w	r8, ip, #4294967295
 80094aa:	fb00 f909 	mul.w	r9, r0, r9
 80094ae:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80094b2:	f108 0801 	add.w	r8, r8, #1
 80094b6:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 80094ba:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80094be:	f1bc 0f00 	cmp.w	ip, #0
 80094c2:	f340 80b3 	ble.w	800962c <forward_lite_conv2d_if32of32wf32+0x578>
 80094c6:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80094ca:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80094ce:	2500      	movs	r5, #0
 80094d0:	ed51 6a0f 	vldr	s13, [r1, #-60]	; 0xffffffc4
 80094d4:	3510      	adds	r5, #16
 80094d6:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80094da:	3140      	adds	r1, #64	; 0x40
 80094dc:	ed50 4a10 	vldr	s9, [r0, #-64]	; 0xffffffc0
 80094e0:	4565      	cmp	r5, ip
 80094e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80094e6:	ed11 5a20 	vldr	s10, [r1, #-128]	; 0xffffff80
 80094ea:	ed50 5a0e 	vldr	s11, [r0, #-56]	; 0xffffffc8
 80094ee:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80094f2:	ed11 6a1e 	vldr	s12, [r1, #-120]	; 0xffffff88
 80094f6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80094fa:	ed51 6a1d 	vldr	s13, [r1, #-116]	; 0xffffff8c
 80094fe:	ed10 ea1d 	vldr	s28, [r0, #-116]	; 0xffffff8c
 8009502:	ed50 da1c 	vldr	s27, [r0, #-112]	; 0xffffff90
 8009506:	ed11 da1c 	vldr	s26, [r1, #-112]	; 0xffffff90
 800950a:	ed50 ca1b 	vldr	s25, [r0, #-108]	; 0xffffff94
 800950e:	ed11 ca1b 	vldr	s24, [r1, #-108]	; 0xffffff94
 8009512:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009516:	ed50 ba1a 	vldr	s23, [r0, #-104]	; 0xffffff98
 800951a:	ed11 ba1a 	vldr	s22, [r1, #-104]	; 0xffffff98
 800951e:	ed50 aa19 	vldr	s21, [r0, #-100]	; 0xffffff9c
 8009522:	ed11 aa19 	vldr	s20, [r1, #-100]	; 0xffffff9c
 8009526:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 800952a:	ed11 9a18 	vldr	s18, [r1, #-96]	; 0xffffffa0
 800952e:	eeee 7a26 	vfma.f32	s15, s28, s13
 8009532:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 8009536:	ed11 0a17 	vldr	s0, [r1, #-92]	; 0xffffffa4
 800953a:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 800953e:	ed11 1a16 	vldr	s2, [r1, #-88]	; 0xffffffa8
 8009542:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 8009546:	ed51 2a15 	vldr	s5, [r1, #-84]	; 0xffffffac
 800954a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800954e:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 8009552:	ed51 3a14 	vldr	s7, [r1, #-80]	; 0xffffffb0
 8009556:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800955a:	ed51 4a13 	vldr	s9, [r1, #-76]	; 0xffffffb4
 800955e:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 8009562:	ed51 5a12 	vldr	s11, [r1, #-72]	; 0xffffffb8
 8009566:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800956a:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800956e:	ed51 6a11 	vldr	s13, [r1, #-68]	; 0xffffffbc
 8009572:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009576:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800957a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800957e:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009582:	eee0 7a81 	vfma.f32	s15, s1, s2
 8009586:	eee2 7a22 	vfma.f32	s15, s4, s5
 800958a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800958e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009592:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009596:	eee6 7a26 	vfma.f32	s15, s12, s13
 800959a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800959e:	db97      	blt.n	80094d0 <forward_lite_conv2d_if32of32wf32+0x41c>
 80095a0:	4472      	add	r2, lr
 80095a2:	4473      	add	r3, lr
 80095a4:	4641      	mov	r1, r8
 80095a6:	428c      	cmp	r4, r1
 80095a8:	dd10      	ble.n	80095cc <forward_lite_conv2d_if32of32wf32+0x518>
 80095aa:	4608      	mov	r0, r1
 80095ac:	4616      	mov	r6, r2
 80095ae:	461d      	mov	r5, r3
 80095b0:	3001      	adds	r0, #1
 80095b2:	ecf5 6a01 	vldmia	r5!, {s13}
 80095b6:	ecf6 7a01 	vldmia	r6!, {s15}
 80095ba:	4284      	cmp	r4, r0
 80095bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80095c0:	d1f6      	bne.n	80095b0 <forward_lite_conv2d_if32of32wf32+0x4fc>
 80095c2:	1a61      	subs	r1, r4, r1
 80095c4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80095c8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80095cc:	3701      	adds	r7, #1
 80095ce:	4452      	add	r2, sl
 80095d0:	444b      	add	r3, r9
 80095d2:	45bb      	cmp	fp, r7
 80095d4:	f47f af73 	bne.w	80094be <forward_lite_conv2d_if32of32wf32+0x40a>
 80095d8:	9901      	ldr	r1, [sp, #4]
 80095da:	9808      	ldr	r0, [sp, #32]
 80095dc:	9a03      	ldr	r2, [sp, #12]
 80095de:	4401      	add	r1, r0
 80095e0:	9b04      	ldr	r3, [sp, #16]
 80095e2:	ed82 7a00 	vstr	s14, [r2]
 80095e6:	9101      	str	r1, [sp, #4]
 80095e8:	3301      	adds	r3, #1
 80095ea:	9905      	ldr	r1, [sp, #20]
 80095ec:	9304      	str	r3, [sp, #16]
 80095ee:	440a      	add	r2, r1
 80095f0:	9906      	ldr	r1, [sp, #24]
 80095f2:	9203      	str	r2, [sp, #12]
 80095f4:	9a00      	ldr	r2, [sp, #0]
 80095f6:	1a12      	subs	r2, r2, r0
 80095f8:	9200      	str	r2, [sp, #0]
 80095fa:	9a02      	ldr	r2, [sp, #8]
 80095fc:	440a      	add	r2, r1
 80095fe:	9202      	str	r2, [sp, #8]
 8009600:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8009602:	429a      	cmp	r2, r3
 8009604:	f47f af27 	bne.w	8009456 <forward_lite_conv2d_if32of32wf32+0x3a2>
 8009608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800960a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800960c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800960e:	440a      	add	r2, r1
 8009610:	3304      	adds	r3, #4
 8009612:	9209      	str	r2, [sp, #36]	; 0x24
 8009614:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009616:	9310      	str	r3, [sp, #64]	; 0x40
 8009618:	4293      	cmp	r3, r2
 800961a:	f4bf aec8 	bcs.w	80093ae <forward_lite_conv2d_if32of32wf32+0x2fa>
 800961e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009620:	2b00      	cmp	r3, #0
 8009622:	f47f af06 	bne.w	8009432 <forward_lite_conv2d_if32of32wf32+0x37e>
 8009626:	eef0 1a48 	vmov.f32	s3, s16
 800962a:	e706      	b.n	800943a <forward_lite_conv2d_if32of32wf32+0x386>
 800962c:	2100      	movs	r1, #0
 800962e:	e7ba      	b.n	80095a6 <forward_lite_conv2d_if32of32wf32+0x4f2>
 8009630:	9a00      	ldr	r2, [sp, #0]
 8009632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009634:	4614      	mov	r4, r2
 8009636:	4413      	add	r3, r2
 8009638:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800963a:	e713      	b.n	8009464 <forward_lite_conv2d_if32of32wf32+0x3b0>
 800963c:	eeb0 7a61 	vmov.f32	s14, s3
 8009640:	e7ca      	b.n	80095d8 <forward_lite_conv2d_if32of32wf32+0x524>
 8009642:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009646:	920b      	str	r2, [sp, #44]	; 0x2c
 8009648:	e589      	b.n	800915e <forward_lite_conv2d_if32of32wf32+0xaa>
 800964a:	bf00      	nop

0800964c <forward_lite_dw_if32of32wf32>:
 800964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009650:	b0a5      	sub	sp, #148	; 0x94
 8009652:	9113      	str	r1, [sp, #76]	; 0x4c
 8009654:	931a      	str	r3, [sp, #104]	; 0x68
 8009656:	f8bd 10e0 	ldrh.w	r1, [sp, #224]	; 0xe0
 800965a:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	; 0xdc
 800965e:	9019      	str	r0, [sp, #100]	; 0x64
 8009660:	9220      	str	r2, [sp, #128]	; 0x80
 8009662:	4258      	negs	r0, r3
 8009664:	f8bd 20d8 	ldrh.w	r2, [sp, #216]	; 0xd8
 8009668:	9122      	str	r1, [sp, #136]	; 0x88
 800966a:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 800966c:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
 8009670:	9221      	str	r2, [sp, #132]	; 0x84
 8009672:	9123      	str	r1, [sp, #140]	; 0x8c
 8009674:	900e      	str	r0, [sp, #56]	; 0x38
 8009676:	2c00      	cmp	r4, #0
 8009678:	f000 8142 	beq.w	8009900 <forward_lite_dw_if32of32wf32+0x2b4>
 800967c:	4252      	negs	r2, r2
 800967e:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8009680:	9311      	str	r3, [sp, #68]	; 0x44
 8009682:	921d      	str	r2, [sp, #116]	; 0x74
 8009684:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8009688:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800968a:	0127      	lsls	r7, r4, #4
 800968c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800968e:	46c2      	mov	sl, r8
 8009690:	fb01 f202 	mul.w	r2, r1, r2
 8009694:	ed9f 3aa5 	vldr	s6, [pc, #660]	; 800992c <forward_lite_dw_if32of32wf32+0x2e0>
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	46bc      	mov	ip, r7
 800969c:	921f      	str	r2, [sp, #124]	; 0x7c
 800969e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80096a0:	931c      	str	r3, [sp, #112]	; 0x70
 80096a2:	fb02 f200 	mul.w	r2, r2, r0
 80096a6:	9212      	str	r2, [sp, #72]	; 0x48
 80096a8:	00e2      	lsls	r2, r4, #3
 80096aa:	9200      	str	r2, [sp, #0]
 80096ac:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80096ae:	fb02 f303 	mul.w	r3, r2, r3
 80096b2:	931e      	str	r3, [sp, #120]	; 0x78
 80096b4:	2300      	movs	r3, #0
 80096b6:	9314      	str	r3, [sp, #80]	; 0x50
 80096b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096ba:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80096bc:	2b00      	cmp	r3, #0
 80096be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096c0:	993a      	ldr	r1, [sp, #232]	; 0xe8
 80096c2:	441a      	add	r2, r3
 80096c4:	bfa8      	it	ge
 80096c6:	2300      	movge	r3, #0
 80096c8:	428a      	cmp	r2, r1
 80096ca:	bf28      	it	cs
 80096cc:	460a      	movcs	r2, r1
 80096ce:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80096d0:	2900      	cmp	r1, #0
 80096d2:	f000 8103 	beq.w	80098dc <forward_lite_dw_if32of32wf32+0x290>
 80096d6:	eba2 0e03 	sub.w	lr, r2, r3
 80096da:	e9dd 122e 	ldrd	r1, r2, [sp, #184]	; 0xb8
 80096de:	46f3      	mov	fp, lr
 80096e0:	fbb2 f2f1 	udiv	r2, r2, r1
 80096e4:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80096e6:	9207      	str	r2, [sp, #28]
 80096e8:	fb03 f101 	mul.w	r1, r3, r1
 80096ec:	9116      	str	r1, [sp, #88]	; 0x58
 80096ee:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80096f0:	fb03 f301 	mul.w	r3, r3, r1
 80096f4:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80096f6:	9318      	str	r3, [sp, #96]	; 0x60
 80096f8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80096fa:	eba3 030e 	sub.w	r3, r3, lr
 80096fe:	fb01 f303 	mul.w	r3, r1, r3
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	9308      	str	r3, [sp, #32]
 8009706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009708:	930d      	str	r3, [sp, #52]	; 0x34
 800970a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800970c:	930a      	str	r3, [sp, #40]	; 0x28
 800970e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009710:	9309      	str	r3, [sp, #36]	; 0x24
 8009712:	2300      	movs	r3, #0
 8009714:	9315      	str	r3, [sp, #84]	; 0x54
 8009716:	1e53      	subs	r3, r2, #1
 8009718:	931b      	str	r3, [sp, #108]	; 0x6c
 800971a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800971c:	2b00      	cmp	r3, #0
 800971e:	f2c0 80ff 	blt.w	8009920 <forward_lite_dw_if32of32wf32+0x2d4>
 8009722:	2200      	movs	r2, #0
 8009724:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009726:	4610      	mov	r0, r2
 8009728:	9920      	ldr	r1, [sp, #128]	; 0x80
 800972a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800972c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009730:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8009732:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009734:	4421      	add	r1, r4
 8009736:	9c3b      	ldr	r4, [sp, #236]	; 0xec
 8009738:	42a1      	cmp	r1, r4
 800973a:	bf94      	ite	ls
 800973c:	ebc0 0001 	rsbls	r0, r0, r1
 8009740:	ebc0 0004 	rsbhi	r0, r0, r4
 8009744:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009746:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009748:	190c      	adds	r4, r1, r4
 800974a:	4414      	add	r4, r2
 800974c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800974e:	1a11      	subs	r1, r2, r0
 8009750:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8009752:	1a12      	subs	r2, r2, r0
 8009754:	2d00      	cmp	r5, #0
 8009756:	f000 80d8 	beq.w	800990a <forward_lite_dw_if32of32wf32+0x2be>
 800975a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800975c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8009760:	442c      	add	r4, r5
 8009762:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009764:	fb0a 5404 	mla	r4, sl, r4, r5
 8009768:	9406      	str	r4, [sp, #24]
 800976a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800976c:	940f      	str	r4, [sp, #60]	; 0x3c
 800976e:	9c06      	ldr	r4, [sp, #24]
 8009770:	eb04 050a 	add.w	r5, r4, sl
 8009774:	42a5      	cmp	r5, r4
 8009776:	9517      	str	r5, [sp, #92]	; 0x5c
 8009778:	f240 809a 	bls.w	80098b0 <forward_lite_dw_if32of32wf32+0x264>
 800977c:	fb0a f101 	mul.w	r1, sl, r1
 8009780:	0092      	lsls	r2, r2, #2
 8009782:	f020 0803 	bic.w	r8, r0, #3
 8009786:	9101      	str	r1, [sp, #4]
 8009788:	9202      	str	r2, [sp, #8]
 800978a:	e9dd 212e 	ldrd	r2, r1, [sp, #184]	; 0xb8
 800978e:	428a      	cmp	r2, r1
 8009790:	f200 808e 	bhi.w	80098b0 <forward_lite_dw_if32of32wf32+0x264>
 8009794:	2a01      	cmp	r2, #1
 8009796:	f040 80cb 	bne.w	8009930 <forward_lite_dw_if32of32wf32+0x2e4>
 800979a:	f108 31ff 	add.w	r1, r8, #4294967295
 800979e:	2200      	movs	r2, #0
 80097a0:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80097a4:	0889      	lsrs	r1, r1, #2
 80097a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80097a8:	1c4a      	adds	r2, r1, #1
 80097aa:	fb01 c10c 	mla	r1, r1, ip, ip
 80097ae:	e9dd e901 	ldrd	lr, r9, [sp, #4]
 80097b2:	9105      	str	r1, [sp, #20]
 80097b4:	0111      	lsls	r1, r2, #4
 80097b6:	0092      	lsls	r2, r2, #2
 80097b8:	9104      	str	r1, [sp, #16]
 80097ba:	9203      	str	r2, [sp, #12]
 80097bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097be:	2700      	movs	r7, #0
 80097c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80097c2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80097c6:	9101      	str	r1, [sp, #4]
 80097c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097ca:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80097ce:	9202      	str	r2, [sp, #8]
 80097d0:	9a01      	ldr	r2, [sp, #4]
 80097d2:	f1bb 0f00 	cmp.w	fp, #0
 80097d6:	ecb2 7a01 	vldmia	r2!, {s14}
 80097da:	ee23 7a87 	vmul.f32	s14, s7, s14
 80097de:	9201      	str	r2, [sp, #4]
 80097e0:	dd4a      	ble.n	8009878 <forward_lite_dw_if32of32wf32+0x22c>
 80097e2:	9a06      	ldr	r2, [sp, #24]
 80097e4:	2600      	movs	r6, #0
 80097e6:	f1b8 0f00 	cmp.w	r8, #0
 80097ea:	f340 808c 	ble.w	8009906 <forward_lite_dw_if32of32wf32+0x2ba>
 80097ee:	9c00      	ldr	r4, [sp, #0]
 80097f0:	f103 0110 	add.w	r1, r3, #16
 80097f4:	f04f 0a00 	mov.w	sl, #0
 80097f8:	1915      	adds	r5, r2, r4
 80097fa:	4614      	mov	r4, r2
 80097fc:	ed51 6a03 	vldr	s13, [r1, #-12]
 8009800:	f10a 0a04 	add.w	sl, sl, #4
 8009804:	edd4 7a01 	vldr	s15, [r4, #4]
 8009808:	3110      	adds	r1, #16
 800980a:	ed94 4a00 	vldr	s8, [r4]
 800980e:	45c2      	cmp	sl, r8
 8009810:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009814:	ed51 4a08 	vldr	s9, [r1, #-32]	; 0xffffffe0
 8009818:	ed95 5a00 	vldr	s10, [r5]
 800981c:	4464      	add	r4, ip
 800981e:	ed51 5a06 	vldr	s11, [r1, #-24]	; 0xffffffe8
 8009822:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009826:	ed95 6a01 	vldr	s12, [r5, #4]
 800982a:	ed51 6a05 	vldr	s13, [r1, #-20]	; 0xffffffec
 800982e:	4465      	add	r5, ip
 8009830:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009834:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800983c:	dbde      	blt.n	80097fc <forward_lite_dw_if32of32wf32+0x1b0>
 800983e:	9905      	ldr	r1, [sp, #20]
 8009840:	440a      	add	r2, r1
 8009842:	9904      	ldr	r1, [sp, #16]
 8009844:	440b      	add	r3, r1
 8009846:	9903      	ldr	r1, [sp, #12]
 8009848:	4288      	cmp	r0, r1
 800984a:	dd10      	ble.n	800986e <forward_lite_dw_if32of32wf32+0x222>
 800984c:	460c      	mov	r4, r1
 800984e:	4692      	mov	sl, r2
 8009850:	461d      	mov	r5, r3
 8009852:	3401      	adds	r4, #1
 8009854:	ecfa 6a01 	vldmia	sl!, {s13}
 8009858:	ecf5 7a01 	vldmia	r5!, {s15}
 800985c:	42a0      	cmp	r0, r4
 800985e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009862:	d1f6      	bne.n	8009852 <forward_lite_dw_if32of32wf32+0x206>
 8009864:	1a41      	subs	r1, r0, r1
 8009866:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800986a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800986e:	3601      	adds	r6, #1
 8009870:	4472      	add	r2, lr
 8009872:	444b      	add	r3, r9
 8009874:	45b3      	cmp	fp, r6
 8009876:	d1b6      	bne.n	80097e6 <forward_lite_dw_if32of32wf32+0x19a>
 8009878:	9a02      	ldr	r2, [sp, #8]
 800987a:	3701      	adds	r7, #1
 800987c:	eca2 7a01 	vstmia	r2!, {s14}
 8009880:	9202      	str	r2, [sp, #8]
 8009882:	9a08      	ldr	r2, [sp, #32]
 8009884:	4413      	add	r3, r2
 8009886:	9a07      	ldr	r2, [sp, #28]
 8009888:	4297      	cmp	r7, r2
 800988a:	d3a1      	bcc.n	80097d0 <forward_lite_dw_if32of32wf32+0x184>
 800988c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800988e:	9906      	ldr	r1, [sp, #24]
 8009890:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
 8009894:	3104      	adds	r1, #4
 8009896:	42ac      	cmp	r4, r5
 8009898:	bf88      	it	hi
 800989a:	2200      	movhi	r2, #0
 800989c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800989e:	9106      	str	r1, [sp, #24]
 80098a0:	3201      	adds	r2, #1
 80098a2:	4414      	add	r4, r2
 80098a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80098a6:	4291      	cmp	r1, r2
 80098a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80098aa:	d387      	bcc.n	80097bc <forward_lite_dw_if32of32wf32+0x170>
 80098ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80098b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80098b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098b6:	440a      	add	r2, r1
 80098b8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80098ba:	3301      	adds	r3, #1
 80098bc:	9209      	str	r2, [sp, #36]	; 0x24
 80098be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098c0:	9315      	str	r3, [sp, #84]	; 0x54
 80098c2:	440a      	add	r2, r1
 80098c4:	920a      	str	r2, [sp, #40]	; 0x28
 80098c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098c8:	1a52      	subs	r2, r2, r1
 80098ca:	920d      	str	r2, [sp, #52]	; 0x34
 80098cc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80098ce:	429a      	cmp	r2, r3
 80098d0:	f47f af23 	bne.w	800971a <forward_lite_dw_if32of32wf32+0xce>
 80098d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80098d8:	4413      	add	r3, r2
 80098da:	9313      	str	r3, [sp, #76]	; 0x4c
 80098dc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80098de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098e2:	440a      	add	r2, r1
 80098e4:	3301      	adds	r3, #1
 80098e6:	920e      	str	r2, [sp, #56]	; 0x38
 80098e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80098ea:	9314      	str	r3, [sp, #80]	; 0x50
 80098ec:	1a52      	subs	r2, r2, r1
 80098ee:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80098f0:	9211      	str	r2, [sp, #68]	; 0x44
 80098f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098f4:	440a      	add	r2, r1
 80098f6:	9212      	str	r2, [sp, #72]	; 0x48
 80098f8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80098fa:	429a      	cmp	r2, r3
 80098fc:	f47f aedc 	bne.w	80096b8 <forward_lite_dw_if32of32wf32+0x6c>
 8009900:	b025      	add	sp, #148	; 0x94
 8009902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009906:	2100      	movs	r1, #0
 8009908:	e79e      	b.n	8009848 <forward_lite_dw_if32of32wf32+0x1fc>
 800990a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800990c:	eef0 3a43 	vmov.f32	s7, s6
 8009910:	442c      	add	r4, r5
 8009912:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009914:	fb0a 5404 	mla	r4, sl, r4, r5
 8009918:	9406      	str	r4, [sp, #24]
 800991a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800991c:	940f      	str	r4, [sp, #60]	; 0x3c
 800991e:	e726      	b.n	800976e <forward_lite_dw_if32of32wf32+0x122>
 8009920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009922:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009924:	4610      	mov	r0, r2
 8009926:	4413      	add	r3, r2
 8009928:	e6fe      	b.n	8009728 <forward_lite_dw_if32of32wf32+0xdc>
 800992a:	bf00      	nop
 800992c:	00000000 	.word	0x00000000
 8009930:	f108 31ff 	add.w	r1, r8, #4294967295
 8009934:	2200      	movs	r2, #0
 8009936:	0889      	lsrs	r1, r1, #2
 8009938:	9210      	str	r2, [sp, #64]	; 0x40
 800993a:	1c4a      	adds	r2, r1, #1
 800993c:	fb01 c10c 	mla	r1, r1, ip, ip
 8009940:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8009944:	9104      	str	r1, [sp, #16]
 8009946:	0111      	lsls	r1, r2, #4
 8009948:	9103      	str	r1, [sp, #12]
 800994a:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
 800994e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009952:	910b      	str	r1, [sp, #44]	; 0x2c
 8009954:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009956:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800995a:	920c      	str	r2, [sp, #48]	; 0x30
 800995c:	2200      	movs	r2, #0
 800995e:	9205      	str	r2, [sp, #20]
 8009960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009962:	f1bb 0f00 	cmp.w	fp, #0
 8009966:	ecb2 7a01 	vldmia	r2!, {s14}
 800996a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800996e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009970:	dd4f      	ble.n	8009a12 <forward_lite_dw_if32of32wf32+0x3c6>
 8009972:	9906      	ldr	r1, [sp, #24]
 8009974:	2700      	movs	r7, #0
 8009976:	f1b8 0f00 	cmp.w	r8, #0
 800997a:	dd68      	ble.n	8009a4e <forward_lite_dw_if32of32wf32+0x402>
 800997c:	9c00      	ldr	r4, [sp, #0]
 800997e:	f103 0210 	add.w	r2, r3, #16
 8009982:	2600      	movs	r6, #0
 8009984:	190d      	adds	r5, r1, r4
 8009986:	460c      	mov	r4, r1
 8009988:	eb04 0e0a 	add.w	lr, r4, sl
 800998c:	ed12 4a03 	vldr	s8, [r2, #-12]
 8009990:	ed52 4a04 	vldr	s9, [r2, #-16]
 8009994:	3604      	adds	r6, #4
 8009996:	edde 7a00 	vldr	s15, [lr]
 800999a:	eb05 0e0a 	add.w	lr, r5, sl
 800999e:	ed94 5a00 	vldr	s10, [r4]
 80099a2:	4546      	cmp	r6, r8
 80099a4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80099a8:	edd5 6a00 	vldr	s13, [r5]
 80099ac:	ed52 5a02 	vldr	s11, [r2, #-8]
 80099b0:	4464      	add	r4, ip
 80099b2:	ed12 6a01 	vldr	s12, [r2, #-4]
 80099b6:	4465      	add	r5, ip
 80099b8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80099bc:	f102 0210 	add.w	r2, r2, #16
 80099c0:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80099c4:	edde 6a00 	vldr	s13, [lr]
 80099c8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80099cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099d0:	dbda      	blt.n	8009988 <forward_lite_dw_if32of32wf32+0x33c>
 80099d2:	9a04      	ldr	r2, [sp, #16]
 80099d4:	4411      	add	r1, r2
 80099d6:	9a03      	ldr	r2, [sp, #12]
 80099d8:	4413      	add	r3, r2
 80099da:	464a      	mov	r2, r9
 80099dc:	4290      	cmp	r0, r2
 80099de:	dd11      	ble.n	8009a04 <forward_lite_dw_if32of32wf32+0x3b8>
 80099e0:	4615      	mov	r5, r2
 80099e2:	460c      	mov	r4, r1
 80099e4:	461e      	mov	r6, r3
 80099e6:	3501      	adds	r5, #1
 80099e8:	edd4 7a00 	vldr	s15, [r4]
 80099ec:	ecf6 6a01 	vldmia	r6!, {s13}
 80099f0:	4454      	add	r4, sl
 80099f2:	42a8      	cmp	r0, r5
 80099f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80099f8:	d1f5      	bne.n	80099e6 <forward_lite_dw_if32of32wf32+0x39a>
 80099fa:	1a82      	subs	r2, r0, r2
 80099fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009a00:	fb02 110a 	mla	r1, r2, sl, r1
 8009a04:	9a01      	ldr	r2, [sp, #4]
 8009a06:	3701      	adds	r7, #1
 8009a08:	4411      	add	r1, r2
 8009a0a:	45bb      	cmp	fp, r7
 8009a0c:	9a02      	ldr	r2, [sp, #8]
 8009a0e:	4413      	add	r3, r2
 8009a10:	d1b1      	bne.n	8009976 <forward_lite_dw_if32of32wf32+0x32a>
 8009a12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a14:	9a05      	ldr	r2, [sp, #20]
 8009a16:	eca1 7a01 	vstmia	r1!, {s14}
 8009a1a:	910c      	str	r1, [sp, #48]	; 0x30
 8009a1c:	3201      	adds	r2, #1
 8009a1e:	9908      	ldr	r1, [sp, #32]
 8009a20:	9205      	str	r2, [sp, #20]
 8009a22:	440b      	add	r3, r1
 8009a24:	9907      	ldr	r1, [sp, #28]
 8009a26:	4291      	cmp	r1, r2
 8009a28:	d89a      	bhi.n	8009960 <forward_lite_dw_if32of32wf32+0x314>
 8009a2a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009a2c:	9906      	ldr	r1, [sp, #24]
 8009a2e:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
 8009a32:	3104      	adds	r1, #4
 8009a34:	42ac      	cmp	r4, r5
 8009a36:	bf88      	it	hi
 8009a38:	2200      	movhi	r2, #0
 8009a3a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009a3c:	9106      	str	r1, [sp, #24]
 8009a3e:	3201      	adds	r2, #1
 8009a40:	4414      	add	r4, r2
 8009a42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a44:	428a      	cmp	r2, r1
 8009a46:	9410      	str	r4, [sp, #64]	; 0x40
 8009a48:	f63f af7f 	bhi.w	800994a <forward_lite_dw_if32of32wf32+0x2fe>
 8009a4c:	e730      	b.n	80098b0 <forward_lite_dw_if32of32wf32+0x264>
 8009a4e:	2200      	movs	r2, #0
 8009a50:	e7c4      	b.n	80099dc <forward_lite_dw_if32of32wf32+0x390>
 8009a52:	bf00      	nop

08009a54 <forward_lite_nl_softmax_if32of32_kernel>:
 8009a54:	2a01      	cmp	r2, #1
 8009a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a5a:	4617      	mov	r7, r2
 8009a5c:	ed2d 8b02 	vpush	{d8}
 8009a60:	ed91 8a00 	vldr	s16, [r1]
 8009a64:	d932      	bls.n	8009acc <forward_lite_nl_softmax_if32of32_kernel+0x78>
 8009a66:	1d0b      	adds	r3, r1, #4
 8009a68:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8009a6c:	ecf3 7a01 	vldmia	r3!, {s15}
 8009a70:	429a      	cmp	r2, r3
 8009a72:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8009a76:	d1f9      	bne.n	8009a6c <forward_lite_nl_softmax_if32of32_kernel+0x18>
 8009a78:	4606      	mov	r6, r0
 8009a7a:	460d      	mov	r5, r1
 8009a7c:	2400      	movs	r4, #0
 8009a7e:	eddf 8a16 	vldr	s17, [pc, #88]	; 8009ad8 <forward_lite_nl_softmax_if32of32_kernel+0x84>
 8009a82:	4680      	mov	r8, r0
 8009a84:	ecb5 0a01 	vldmia	r5!, {s0}
 8009a88:	3401      	adds	r4, #1
 8009a8a:	ee30 0a48 	vsub.f32	s0, s0, s16
 8009a8e:	f003 fc1d 	bl	800d2cc <expf>
 8009a92:	42a7      	cmp	r7, r4
 8009a94:	ee78 8a80 	vadd.f32	s17, s17, s0
 8009a98:	eca8 0a01 	vstmia	r8!, {s0}
 8009a9c:	d8f2      	bhi.n	8009a84 <forward_lite_nl_softmax_if32of32_kernel+0x30>
 8009a9e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa6:	d00d      	beq.n	8009ac4 <forward_lite_nl_softmax_if32of32_kernel+0x70>
 8009aa8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009aac:	2300      	movs	r3, #0
 8009aae:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8009ab2:	edd6 7a00 	vldr	s15, [r6]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	429f      	cmp	r7, r3
 8009aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009abe:	ece6 7a01 	vstmia	r6!, {s15}
 8009ac2:	d8f6      	bhi.n	8009ab2 <forward_lite_nl_softmax_if32of32_kernel+0x5e>
 8009ac4:	ecbd 8b02 	vpop	{d8}
 8009ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009acc:	2a00      	cmp	r2, #0
 8009ace:	d1d3      	bne.n	8009a78 <forward_lite_nl_softmax_if32of32_kernel+0x24>
 8009ad0:	ecbd 8b02 	vpop	{d8}
 8009ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad8:	00000000 	.word	0x00000000

08009adc <forward_lite_nl_relu_generic_if32of32_kernel>:
 8009adc:	edd3 6a02 	vldr	s13, [r3, #8]
 8009ae0:	ed93 7a00 	vldr	s14, [r3]
 8009ae4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8009ae8:	ed93 6a01 	vldr	s12, [r3, #4]
 8009aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009af0:	d42b      	bmi.n	8009b4a <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8009af2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009af6:	4413      	add	r3, r2
 8009af8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8009afc:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8009b00:	4291      	cmp	r1, r2
 8009b02:	d821      	bhi.n	8009b48 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8009b04:	f10c 0104 	add.w	r1, ip, #4
 8009b08:	1d13      	adds	r3, r2, #4
 8009b0a:	eba2 020c 	sub.w	r2, r2, ip
 8009b0e:	4408      	add	r0, r1
 8009b10:	e00c      	b.n	8009b2c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8009b12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b16:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8009b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1e:	db01      	blt.n	8009b24 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8009b20:	ee65 7a86 	vmul.f32	s15, s11, s12
 8009b24:	4293      	cmp	r3, r2
 8009b26:	ed60 7a01 	vstmdb	r0!, {s15}
 8009b2a:	d00c      	beq.n	8009b46 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8009b2c:	ed73 7a01 	vldmdb	r3!, {s15}
 8009b30:	eef4 6ae7 	vcmpe.f32	s13, s15
 8009b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b38:	daeb      	bge.n	8009b12 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8009b3a:	eef0 7a66 	vmov.f32	s15, s13
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	ed60 7a01 	vstmdb	r0!, {s15}
 8009b44:	d1f2      	bne.n	8009b2c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8009b46:	4770      	bx	lr
 8009b48:	4770      	bx	lr
 8009b4a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8009b4e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009b52:	4413      	add	r3, r2
 8009b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b58:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8009b5c:	b500      	push	{lr}
 8009b5e:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8009b62:	d019      	beq.n	8009b98 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8009b64:	4561      	cmp	r1, ip
 8009b66:	d815      	bhi.n	8009b94 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8009b68:	f10e 0204 	add.w	r2, lr, #4
 8009b6c:	f10c 0304 	add.w	r3, ip, #4
 8009b70:	ebac 010e 	sub.w	r1, ip, lr
 8009b74:	4402      	add	r2, r0
 8009b76:	ed73 7a01 	vldmdb	r3!, {s15}
 8009b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b7e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b86:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009b8a:	d827      	bhi.n	8009bdc <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 8009b8c:	428b      	cmp	r3, r1
 8009b8e:	ed62 6a01 	vstmdb	r2!, {s13}
 8009b92:	d1f0      	bne.n	8009b76 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8009b94:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b98:	4561      	cmp	r1, ip
 8009b9a:	d8fb      	bhi.n	8009b94 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8009b9c:	f10e 0204 	add.w	r2, lr, #4
 8009ba0:	f10c 0304 	add.w	r3, ip, #4
 8009ba4:	ebac 010e 	sub.w	r1, ip, lr
 8009ba8:	f04f 0c00 	mov.w	ip, #0
 8009bac:	4402      	add	r2, r0
 8009bae:	ed73 7a01 	vldmdb	r3!, {s15}
 8009bb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bba:	d40a      	bmi.n	8009bd2 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 8009bbc:	428b      	cmp	r3, r1
 8009bbe:	f842 cd04 	str.w	ip, [r2, #-4]!
 8009bc2:	d0e7      	beq.n	8009b94 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8009bc4:	ed73 7a01 	vldmdb	r3!, {s15}
 8009bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd0:	d5f4      	bpl.n	8009bbc <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8009bd2:	428b      	cmp	r3, r1
 8009bd4:	ed62 7a01 	vstmdb	r2!, {s15}
 8009bd8:	d1e9      	bne.n	8009bae <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 8009bda:	e7db      	b.n	8009b94 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8009bdc:	428b      	cmp	r3, r1
 8009bde:	ed62 7a01 	vstmdb	r2!, {s15}
 8009be2:	d1c8      	bne.n	8009b76 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8009be4:	e7d6      	b.n	8009b94 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8009be6:	bf00      	nop

08009be8 <lite_decompress_ilutof32>:
 8009be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bec:	9d08      	ldr	r5, [sp, #32]
 8009bee:	2b04      	cmp	r3, #4
 8009bf0:	ea4f 0685 	mov.w	r6, r5, lsl #2
 8009bf4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8009bf8:	d014      	beq.n	8009c24 <lite_decompress_ilutof32+0x3c>
 8009bfa:	2b08      	cmp	r3, #8
 8009bfc:	d10f      	bne.n	8009c1e <lite_decompress_ilutof32+0x36>
 8009bfe:	42a8      	cmp	r0, r5
 8009c00:	d20d      	bcs.n	8009c1e <lite_decompress_ilutof32+0x36>
 8009c02:	460c      	mov	r4, r1
 8009c04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f840 3b04 	str.w	r3, [r0], #4
 8009c12:	4285      	cmp	r5, r0
 8009c14:	d8f6      	bhi.n	8009c04 <lite_decompress_ilutof32+0x1c>
 8009c16:	3e01      	subs	r6, #1
 8009c18:	eb01 0696 	add.w	r6, r1, r6, lsr #2
 8009c1c:	1c71      	adds	r1, r6, #1
 8009c1e:	4608      	mov	r0, r1
 8009c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c24:	9b07      	ldr	r3, [sp, #28]
 8009c26:	085e      	lsrs	r6, r3, #1
 8009c28:	f003 0701 	and.w	r7, r3, #1
 8009c2c:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8009c30:	f106 38ff 	add.w	r8, r6, #4294967295
 8009c34:	42a8      	cmp	r0, r5
 8009c36:	d2f2      	bcs.n	8009c1e <lite_decompress_ilutof32+0x36>
 8009c38:	b33e      	cbz	r6, 8009c8a <lite_decompress_ilutof32+0xa2>
 8009c3a:	f100 0e08 	add.w	lr, r0, #8
 8009c3e:	f101 3cff 	add.w	ip, r1, #4294967295
 8009c42:	eb01 0408 	add.w	r4, r1, r8
 8009c46:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8009c4a:	f10e 0e08 	add.w	lr, lr, #8
 8009c4e:	091b      	lsrs	r3, r3, #4
 8009c50:	4564      	cmp	r4, ip
 8009c52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f84e 3c10 	str.w	r3, [lr, #-16]
 8009c5c:	f89c 3000 	ldrb.w	r3, [ip]
 8009c60:	f003 030f 	and.w	r3, r3, #15
 8009c64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8009c6e:	d1ea      	bne.n	8009c46 <lite_decompress_ilutof32+0x5e>
 8009c70:	4431      	add	r1, r6
 8009c72:	4448      	add	r0, r9
 8009c74:	2f00      	cmp	r7, #0
 8009c76:	d0dd      	beq.n	8009c34 <lite_decompress_ilutof32+0x4c>
 8009c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c7c:	091b      	lsrs	r3, r3, #4
 8009c7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f840 3b04 	str.w	r3, [r0], #4
 8009c88:	e7d4      	b.n	8009c34 <lite_decompress_ilutof32+0x4c>
 8009c8a:	2f00      	cmp	r7, #0
 8009c8c:	d1f4      	bne.n	8009c78 <lite_decompress_ilutof32+0x90>
 8009c8e:	42a8      	cmp	r0, r5
 8009c90:	d3fd      	bcc.n	8009c8e <lite_decompress_ilutof32+0xa6>
 8009c92:	4608      	mov	r0, r1
 8009c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009c98 <forward_lite_dense_if32of32wf32>:
 8009c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	ed2d 8b0c 	vpush	{d8-d13}
 8009ca0:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8009ca4:	6801      	ldr	r1, [r0, #0]
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	fb02 f303 	mul.w	r3, r2, r3
 8009cac:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8009cb0:	9100      	str	r1, [sp, #0]
 8009cb2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009cb6:	4299      	cmp	r1, r3
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	f080 811c 	bcs.w	8009ef6 <forward_lite_dense_if32of32wf32+0x25e>
 8009cbe:	4607      	mov	r7, r0
 8009cc0:	6904      	ldr	r4, [r0, #16]
 8009cc2:	0096      	lsls	r6, r2, #2
 8009cc4:	9b00      	ldr	r3, [sp, #0]
 8009cc6:	68bd      	ldr	r5, [r7, #8]
 8009cc8:	eb03 0e06 	add.w	lr, r3, r6
 8009ccc:	461e      	mov	r6, r3
 8009cce:	459e      	cmp	lr, r3
 8009cd0:	f240 8103 	bls.w	8009eda <forward_lite_dense_if32of32wf32+0x242>
 8009cd4:	f1a4 0c10 	sub.w	ip, r4, #16
 8009cd8:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8009cdc:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8009ce0:	f10c 0c01 	add.w	ip, ip, #1
 8009ce4:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8009ce8:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8009cec:	2c0f      	cmp	r4, #15
 8009cee:	f240 8107 	bls.w	8009f00 <forward_lite_dense_if32of32wf32+0x268>
 8009cf2:	f108 0240 	add.w	r2, r8, #64	; 0x40
 8009cf6:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8009cfa:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8009f50 <forward_lite_dense_if32of32wf32+0x2b8>
 8009cfe:	4621      	mov	r1, r4
 8009d00:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8009d04:	3910      	subs	r1, #16
 8009d06:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8009d0a:	3340      	adds	r3, #64	; 0x40
 8009d0c:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8009d10:	290f      	cmp	r1, #15
 8009d12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009d16:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8009d1a:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8009d1e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8009d22:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 8009d26:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009d2a:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 8009d2e:	ed12 da1d 	vldr	s26, [r2, #-116]	; 0xffffff8c
 8009d32:	ed52 ca1c 	vldr	s25, [r2, #-112]	; 0xffffff90
 8009d36:	ed13 ca1c 	vldr	s24, [r3, #-112]	; 0xffffff90
 8009d3a:	ed52 ba1b 	vldr	s23, [r2, #-108]	; 0xffffff94
 8009d3e:	ed13 ba1b 	vldr	s22, [r3, #-108]	; 0xffffff94
 8009d42:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009d46:	ed52 aa1a 	vldr	s21, [r2, #-104]	; 0xffffff98
 8009d4a:	ed13 aa1a 	vldr	s20, [r3, #-104]	; 0xffffff98
 8009d4e:	ed52 9a19 	vldr	s19, [r2, #-100]	; 0xffffff9c
 8009d52:	ed13 9a19 	vldr	s18, [r3, #-100]	; 0xffffff9c
 8009d56:	ed52 8a18 	vldr	s17, [r2, #-96]	; 0xffffffa0
 8009d5a:	ed13 8a18 	vldr	s16, [r3, #-96]	; 0xffffffa0
 8009d5e:	eeed 7a26 	vfma.f32	s15, s26, s13
 8009d62:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 8009d66:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 8009d6a:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 8009d6e:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 8009d72:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 8009d76:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 8009d7a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8009d7e:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8009d82:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8009d86:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8009d8a:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8009d8e:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8009d92:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8009d96:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009d9a:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8009d9e:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8009da2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009da6:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009daa:	eee8 7a88 	vfma.f32	s15, s17, s16
 8009dae:	eee0 7a20 	vfma.f32	s15, s0, s1
 8009db2:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009db6:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009dba:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009dbe:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009dc2:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009dc6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009dca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009dce:	d897      	bhi.n	8009d00 <forward_lite_dense_if32of32wf32+0x68>
 8009dd0:	eb05 020b 	add.w	r2, r5, fp
 8009dd4:	f004 010f 	and.w	r1, r4, #15
 8009dd8:	4663      	mov	r3, ip
 8009dda:	2903      	cmp	r1, #3
 8009ddc:	d95f      	bls.n	8009e9e <forward_lite_dense_if32of32wf32+0x206>
 8009dde:	edd2 6a01 	vldr	s13, [r2, #4]
 8009de2:	1f08      	subs	r0, r1, #4
 8009de4:	edd3 7a01 	vldr	s15, [r3, #4]
 8009de8:	ed93 4a00 	vldr	s8, [r3]
 8009dec:	2803      	cmp	r0, #3
 8009dee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009df2:	edd2 4a00 	vldr	s9, [r2]
 8009df6:	ed93 5a02 	vldr	s10, [r3, #8]
 8009dfa:	edd2 5a02 	vldr	s11, [r2, #8]
 8009dfe:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009e02:	ed93 6a03 	vldr	s12, [r3, #12]
 8009e06:	edd2 6a03 	vldr	s13, [r2, #12]
 8009e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e0e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009e12:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009e16:	eeb0 7a67 	vmov.f32	s14, s15
 8009e1a:	d938      	bls.n	8009e8e <forward_lite_dense_if32of32wf32+0x1f6>
 8009e1c:	edd2 6a05 	vldr	s13, [r2, #20]
 8009e20:	f1a1 0a08 	sub.w	sl, r1, #8
 8009e24:	edd3 7a05 	vldr	s15, [r3, #20]
 8009e28:	ed93 4a04 	vldr	s8, [r3, #16]
 8009e2c:	f1ba 0f03 	cmp.w	sl, #3
 8009e30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009e34:	edd2 4a04 	vldr	s9, [r2, #16]
 8009e38:	ed93 5a06 	vldr	s10, [r3, #24]
 8009e3c:	edd2 5a06 	vldr	s11, [r2, #24]
 8009e40:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009e44:	ed93 6a07 	vldr	s12, [r3, #28]
 8009e48:	edd2 6a07 	vldr	s13, [r2, #28]
 8009e4c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009e50:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009e54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e58:	d919      	bls.n	8009e8e <forward_lite_dense_if32of32wf32+0x1f6>
 8009e5a:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8009e5e:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8009e62:	ed92 4a08 	vldr	s8, [r2, #32]
 8009e66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009e6a:	edd3 4a08 	vldr	s9, [r3, #32]
 8009e6e:	ed92 5a0a 	vldr	s10, [r2, #40]	; 0x28
 8009e72:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 8009e76:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009e7a:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 8009e7e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8009e82:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009e86:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009e8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e8e:	0880      	lsrs	r0, r0, #2
 8009e90:	f001 0103 	and.w	r1, r1, #3
 8009e94:	3001      	adds	r0, #1
 8009e96:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8009e9a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8009e9e:	b1a9      	cbz	r1, 8009ecc <forward_lite_dense_if32of32wf32+0x234>
 8009ea0:	edd3 6a00 	vldr	s13, [r3]
 8009ea4:	3901      	subs	r1, #1
 8009ea6:	edd2 7a00 	vldr	s15, [r2]
 8009eaa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009eae:	d00d      	beq.n	8009ecc <forward_lite_dense_if32of32wf32+0x234>
 8009eb0:	edd3 6a01 	vldr	s13, [r3, #4]
 8009eb4:	2901      	cmp	r1, #1
 8009eb6:	edd2 7a01 	vldr	s15, [r2, #4]
 8009eba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009ebe:	d005      	beq.n	8009ecc <forward_lite_dense_if32of32wf32+0x234>
 8009ec0:	edd2 6a02 	vldr	s13, [r2, #8]
 8009ec4:	edd3 7a02 	vldr	s15, [r3, #8]
 8009ec8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009ecc:	eca6 7a01 	vstmia	r6!, {s14}
 8009ed0:	45b6      	cmp	lr, r6
 8009ed2:	444d      	add	r5, r9
 8009ed4:	f63f af0a 	bhi.w	8009cec <forward_lite_dense_if32of32wf32+0x54>
 8009ed8:	697a      	ldr	r2, [r7, #20]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	b9b3      	cbnz	r3, 8009f0c <forward_lite_dense_if32of32wf32+0x274>
 8009ede:	9b00      	ldr	r3, [sp, #0]
 8009ee0:	0096      	lsls	r6, r2, #2
 8009ee2:	9901      	ldr	r1, [sp, #4]
 8009ee4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009ee8:	693c      	ldr	r4, [r7, #16]
 8009eea:	4299      	cmp	r1, r3
 8009eec:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	f63f aee7 	bhi.w	8009cc4 <forward_lite_dense_if32of32wf32+0x2c>
 8009ef6:	b003      	add	sp, #12
 8009ef8:	ecbd 8b0c 	vpop	{d8-d13}
 8009efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f00:	4621      	mov	r1, r4
 8009f02:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8009f50 <forward_lite_dense_if32of32wf32+0x2b8>
 8009f06:	462a      	mov	r2, r5
 8009f08:	4643      	mov	r3, r8
 8009f0a:	e766      	b.n	8009dda <forward_lite_dense_if32of32wf32+0x142>
 8009f0c:	2a00      	cmp	r2, #0
 8009f0e:	d0e6      	beq.n	8009ede <forward_lite_dense_if32of32wf32+0x246>
 8009f10:	9a00      	ldr	r2, [sp, #0]
 8009f12:	ed93 7a00 	vldr	s14, [r3]
 8009f16:	edd2 7a00 	vldr	s15, [r2]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f20:	edc2 7a00 	vstr	s15, [r2]
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	2a01      	cmp	r2, #1
 8009f28:	d9d9      	bls.n	8009ede <forward_lite_dense_if32of32wf32+0x246>
 8009f2a:	1d19      	adds	r1, r3, #4
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	ed91 7a00 	vldr	s14, [r1]
 8009f34:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009f38:	3301      	adds	r3, #1
 8009f3a:	edd2 7a00 	vldr	s15, [r2]
 8009f3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f42:	ece1 7a01 	vstmia	r1!, {s15}
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d8f0      	bhi.n	8009f2e <forward_lite_dense_if32of32wf32+0x296>
 8009f4c:	e7c7      	b.n	8009ede <forward_lite_dense_if32of32wf32+0x246>
 8009f4e:	bf00      	nop
 8009f50:	00000000 	.word	0x00000000

08009f54 <forward_lite_dense_if32of32wf32_lut4>:
 8009f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f58:	b08d      	sub	sp, #52	; 0x34
 8009f5a:	4605      	mov	r5, r0
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	9005      	str	r0, [sp, #20]
 8009f60:	4618      	mov	r0, r3
 8009f62:	920a      	str	r2, [sp, #40]	; 0x28
 8009f64:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8009f66:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 8009f6a:	fb02 f303 	mul.w	r3, r2, r3
 8009f6e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009f72:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8009f74:	9308      	str	r3, [sp, #32]
 8009f76:	b126      	cbz	r6, 8009f82 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8009f78:	2240      	movs	r2, #64	; 0x40
 8009f7a:	4631      	mov	r1, r6
 8009f7c:	f000 fbc4 	bl	800a708 <st_int8_copy>
 8009f80:	4630      	mov	r0, r6
 8009f82:	9b05      	ldr	r3, [sp, #20]
 8009f84:	9a08      	ldr	r2, [sp, #32]
 8009f86:	4293      	cmp	r3, r2
 8009f88:	f080 80f7 	bcs.w	800a17a <forward_lite_dense_if32of32wf32_lut4+0x226>
 8009f8c:	08eb      	lsrs	r3, r5, #3
 8009f8e:	f005 0101 	and.w	r1, r5, #1
 8009f92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009f94:	f025 0801 	bic.w	r8, r5, #1
 8009f98:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8009f9c:	9301      	str	r3, [sp, #4]
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	9102      	str	r1, [sp, #8]
 8009fa2:	0092      	lsls	r2, r2, #2
 8009fa4:	f104 0b20 	add.w	fp, r4, #32
 8009fa8:	00a9      	lsls	r1, r5, #2
 8009faa:	9304      	str	r3, [sp, #16]
 8009fac:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8009fb0:	9b05      	ldr	r3, [sp, #20]
 8009fb2:	9207      	str	r2, [sp, #28]
 8009fb4:	9109      	str	r1, [sp, #36]	; 0x24
 8009fb6:	920b      	str	r2, [sp, #44]	; 0x2c
 8009fb8:	9a07      	ldr	r2, [sp, #28]
 8009fba:	eb03 0902 	add.w	r9, r3, r2
 8009fbe:	f1ab 0220 	sub.w	r2, fp, #32
 8009fc2:	4599      	cmp	r9, r3
 8009fc4:	9206      	str	r2, [sp, #24]
 8009fc6:	f240 80db 	bls.w	800a180 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8009fca:	469e      	mov	lr, r3
 8009fcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fce:	f108 33ff 	add.w	r3, r8, #4294967295
 8009fd2:	9303      	str	r3, [sp, #12]
 8009fd4:	9b01      	ldr	r3, [sp, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f000 80b4 	beq.w	800a144 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8009fdc:	9b04      	ldr	r3, [sp, #16]
 8009fde:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800a1a4 <forward_lite_dense_if32of32wf32_lut4+0x250>
 8009fe2:	18d4      	adds	r4, r2, r3
 8009fe4:	465b      	mov	r3, fp
 8009fe6:	7816      	ldrb	r6, [r2, #0]
 8009fe8:	3204      	adds	r2, #4
 8009fea:	ed53 2a07 	vldr	s5, [r3, #-28]	; 0xffffffe4
 8009fee:	3320      	adds	r3, #32
 8009ff0:	f006 070f 	and.w	r7, r6, #15
 8009ff4:	0936      	lsrs	r6, r6, #4
 8009ff6:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 8009ffa:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8009ffe:	ed13 4a10 	vldr	s8, [r3, #-64]	; 0xffffffc0
 800a002:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800a006:	ed53 3a0e 	vldr	s7, [r3, #-56]	; 0xffffffc8
 800a00a:	edd7 7a00 	vldr	s15, [r7]
 800a00e:	ed96 3a00 	vldr	s6, [r6]
 800a012:	092e      	lsrs	r6, r5, #4
 800a014:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800a018:	f005 050f 	and.w	r5, r5, #15
 800a01c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800a020:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800a024:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800a028:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 800a02c:	eee3 7a04 	vfma.f32	s15, s6, s8
 800a030:	ed96 3a00 	vldr	s6, [r6]
 800a034:	ed95 4a00 	vldr	s8, [r5]
 800a038:	090d      	lsrs	r5, r1, #4
 800a03a:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 800a03e:	f001 010f 	and.w	r1, r1, #15
 800a042:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800a046:	ed13 6a0b 	vldr	s12, [r3, #-44]	; 0xffffffd4
 800a04a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a04e:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 800a052:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 800a056:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a05a:	eee4 7a05 	vfma.f32	s15, s8, s10
 800a05e:	ed95 4a00 	vldr	s8, [r5]
 800a062:	ed91 5a00 	vldr	s10, [r1]
 800a066:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a06a:	42a2      	cmp	r2, r4
 800a06c:	ea4f 1511 	mov.w	r5, r1, lsr #4
 800a070:	f001 010f 	and.w	r1, r1, #15
 800a074:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a078:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800a07c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a080:	eee5 7a06 	vfma.f32	s15, s10, s12
 800a084:	ed95 5a00 	vldr	s10, [r5]
 800a088:	ed91 6a00 	vldr	s12, [r1]
 800a08c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a090:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a094:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a098:	d1a5      	bne.n	8009fe6 <forward_lite_dense_if32of32wf32_lut4+0x92>
 800a09a:	4656      	mov	r6, sl
 800a09c:	4546      	cmp	r6, r8
 800a09e:	d257      	bcs.n	800a150 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 800a0a0:	9b03      	ldr	r3, [sp, #12]
 800a0a2:	f106 0208 	add.w	r2, r6, #8
 800a0a6:	1e61      	subs	r1, r4, #1
 800a0a8:	1b9d      	subs	r5, r3, r6
 800a0aa:	08ef      	lsrs	r7, r5, #3
 800a0ac:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 800a0b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a0b4:	3208      	adds	r2, #8
 800a0b6:	ed52 5a03 	vldr	s11, [r2, #-12]
 800a0ba:	f003 0c0f 	and.w	ip, r3, #15
 800a0be:	091b      	lsrs	r3, r3, #4
 800a0c0:	ed52 6a04 	vldr	s13, [r2, #-16]
 800a0c4:	42a9      	cmp	r1, r5
 800a0c6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800a0ca:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a0ce:	eddc 7a00 	vldr	s15, [ip]
 800a0d2:	ed93 6a00 	vldr	s12, [r3]
 800a0d6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a0da:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a0de:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0e2:	d1e5      	bne.n	800a0b0 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 800a0e4:	3701      	adds	r7, #1
 800a0e6:	19e2      	adds	r2, r4, r7
 800a0e8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 800a0ec:	9b02      	ldr	r3, [sp, #8]
 800a0ee:	b30b      	cbz	r3, 800a134 <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 800a0f0:	f812 3b01 	ldrb.w	r3, [r2], #1
 800a0f4:	edd6 7a00 	vldr	s15, [r6]
 800a0f8:	091b      	lsrs	r3, r3, #4
 800a0fa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a0fe:	edd3 6a00 	vldr	s13, [r3]
 800a102:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a106:	ecae 7a01 	vstmia	lr!, {s14}
 800a10a:	45f1      	cmp	r9, lr
 800a10c:	f63f af62 	bhi.w	8009fd4 <forward_lite_dense_if32of32wf32_lut4+0x80>
 800a110:	9b05      	ldr	r3, [sp, #20]
 800a112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a114:	1899      	adds	r1, r3, r2
 800a116:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a118:	b9e3      	cbnz	r3, 800a154 <forward_lite_dense_if32of32wf32_lut4+0x200>
 800a11a:	9b08      	ldr	r3, [sp, #32]
 800a11c:	428b      	cmp	r3, r1
 800a11e:	d92c      	bls.n	800a17a <forward_lite_dense_if32of32wf32_lut4+0x226>
 800a120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a122:	4498      	add	r8, r3
 800a124:	449a      	add	sl, r3
 800a126:	449b      	add	fp, r3
 800a128:	9b05      	ldr	r3, [sp, #20]
 800a12a:	4599      	cmp	r9, r3
 800a12c:	d92a      	bls.n	800a184 <forward_lite_dense_if32of32wf32_lut4+0x230>
 800a12e:	460b      	mov	r3, r1
 800a130:	9105      	str	r1, [sp, #20]
 800a132:	e741      	b.n	8009fb8 <forward_lite_dense_if32of32wf32_lut4+0x64>
 800a134:	ecae 7a01 	vstmia	lr!, {s14}
 800a138:	45f1      	cmp	r9, lr
 800a13a:	d9e9      	bls.n	800a110 <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 800a13c:	9b01      	ldr	r3, [sp, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f47f af4c 	bne.w	8009fdc <forward_lite_dense_if32of32wf32_lut4+0x88>
 800a144:	9e06      	ldr	r6, [sp, #24]
 800a146:	4614      	mov	r4, r2
 800a148:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800a1a4 <forward_lite_dense_if32of32wf32_lut4+0x250>
 800a14c:	4546      	cmp	r6, r8
 800a14e:	d3a7      	bcc.n	800a0a0 <forward_lite_dense_if32of32wf32_lut4+0x14c>
 800a150:	4622      	mov	r2, r4
 800a152:	e7cb      	b.n	800a0ec <forward_lite_dense_if32of32wf32_lut4+0x198>
 800a154:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a156:	2b00      	cmp	r3, #0
 800a158:	d0df      	beq.n	800a11a <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 800a15a:	9b07      	ldr	r3, [sp, #28]
 800a15c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a15e:	1acb      	subs	r3, r1, r3
 800a160:	edd3 7a00 	vldr	s15, [r3]
 800a164:	ecb2 7a01 	vldmia	r2!, {s14}
 800a168:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a16c:	ece3 7a01 	vstmia	r3!, {s15}
 800a170:	428b      	cmp	r3, r1
 800a172:	d1f5      	bne.n	800a160 <forward_lite_dense_if32of32wf32_lut4+0x20c>
 800a174:	9b08      	ldr	r3, [sp, #32]
 800a176:	428b      	cmp	r3, r1
 800a178:	d8d2      	bhi.n	800a120 <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 800a17a:	b00d      	add	sp, #52	; 0x34
 800a17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a180:	4619      	mov	r1, r3
 800a182:	e7c8      	b.n	800a116 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800a184:	9b07      	ldr	r3, [sp, #28]
 800a186:	1acb      	subs	r3, r1, r3
 800a188:	461a      	mov	r2, r3
 800a18a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a18c:	ed92 7a00 	vldr	s14, [r2]
 800a190:	ecf0 7a01 	vldmia	r0!, {s15}
 800a194:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a198:	ece2 7a01 	vstmia	r2!, {s15}
 800a19c:	428a      	cmp	r2, r1
 800a19e:	d1f5      	bne.n	800a18c <forward_lite_dense_if32of32wf32_lut4+0x238>
 800a1a0:	e7f2      	b.n	800a188 <forward_lite_dense_if32of32wf32_lut4+0x234>
 800a1a2:	bf00      	nop
 800a1a4:	00000000 	.word	0x00000000

0800a1a8 <forward_lite_dense_if32of32wf32_lut8>:
 800a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ac:	b091      	sub	sp, #68	; 0x44
 800a1ae:	4699      	mov	r9, r3
 800a1b0:	468b      	mov	fp, r1
 800a1b2:	920e      	str	r2, [sp, #56]	; 0x38
 800a1b4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800a1b6:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800a1ba:	9003      	str	r0, [sp, #12]
 800a1bc:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	; 0x74
 800a1c0:	fb02 f303 	mul.w	r3, r2, r3
 800a1c4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a1c8:	930c      	str	r3, [sp, #48]	; 0x30
 800a1ca:	b134      	cbz	r4, 800a1da <forward_lite_dense_if32of32wf32_lut8+0x32>
 800a1cc:	4648      	mov	r0, r9
 800a1ce:	46a1      	mov	r9, r4
 800a1d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	f000 fa97 	bl	800a708 <st_int8_copy>
 800a1da:	9b03      	ldr	r3, [sp, #12]
 800a1dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	f080 8084 	bcs.w	800a2ec <forward_lite_dense_if32of32wf32_lut8+0x144>
 800a1e4:	4bb7      	ldr	r3, [pc, #732]	; (800a4c4 <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 800a1e6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a1e8:	4443      	add	r3, r8
 800a1ea:	9d03      	ldr	r5, [sp, #12]
 800a1ec:	0092      	lsls	r2, r2, #2
 800a1ee:	eddf 3ab6 	vldr	s7, [pc, #728]	; 800a4c8 <forward_lite_dense_if32of32wf32_lut8+0x320>
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	920b      	str	r2, [sp, #44]	; 0x2c
 800a1f6:	f103 0120 	add.w	r1, r3, #32
 800a1fa:	930d      	str	r3, [sp, #52]	; 0x34
 800a1fc:	445b      	add	r3, fp
 800a1fe:	920f      	str	r2, [sp, #60]	; 0x3c
 800a200:	9105      	str	r1, [sp, #20]
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	eb0b 0301 	add.w	r3, fp, r1
 800a208:	469a      	mov	sl, r3
 800a20a:	469e      	mov	lr, r3
 800a20c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a20e:	eb05 0c03 	add.w	ip, r5, r3
 800a212:	45ac      	cmp	ip, r5
 800a214:	d952      	bls.n	800a2bc <forward_lite_dense_if32of32wf32_lut8+0x114>
 800a216:	9800      	ldr	r0, [sp, #0]
 800a218:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a21a:	f100 011f 	add.w	r1, r0, #31
 800a21e:	eba0 020b 	sub.w	r2, r0, fp
 800a222:	445b      	add	r3, fp
 800a224:	9101      	str	r1, [sp, #4]
 800a226:	eba1 010b 	sub.w	r1, r1, fp
 800a22a:	0952      	lsrs	r2, r2, #5
 800a22c:	9306      	str	r3, [sp, #24]
 800a22e:	0889      	lsrs	r1, r1, #2
 800a230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a232:	3101      	adds	r1, #1
 800a234:	9102      	str	r1, [sp, #8]
 800a236:	1c51      	adds	r1, r2, #1
 800a238:	00d2      	lsls	r2, r2, #3
 800a23a:	3210      	adds	r2, #16
 800a23c:	920a      	str	r2, [sp, #40]	; 0x28
 800a23e:	00ca      	lsls	r2, r1, #3
 800a240:	9208      	str	r2, [sp, #32]
 800a242:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 800a246:	9209      	str	r2, [sp, #36]	; 0x24
 800a248:	1f02      	subs	r2, r0, #4
 800a24a:	9204      	str	r2, [sp, #16]
 800a24c:	f10b 0204 	add.w	r2, fp, #4
 800a250:	9207      	str	r2, [sp, #28]
 800a252:	f1b8 0f07 	cmp.w	r8, #7
 800a256:	d84c      	bhi.n	800a2f2 <forward_lite_dense_if32of32wf32_lut8+0x14a>
 800a258:	45d3      	cmp	fp, sl
 800a25a:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800a4c8 <forward_lite_dense_if32of32wf32_lut8+0x320>
 800a25e:	d20f      	bcs.n	800a280 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 800a260:	4659      	mov	r1, fp
 800a262:	4618      	mov	r0, r3
 800a264:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a268:	ecf1 7a01 	vldmia	r1!, {s15}
 800a26c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800a270:	4551      	cmp	r1, sl
 800a272:	edd2 6a00 	vldr	s13, [r2]
 800a276:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a27a:	d3f3      	bcc.n	800a264 <forward_lite_dense_if32of32wf32_lut8+0xbc>
 800a27c:	9a02      	ldr	r2, [sp, #8]
 800a27e:	4413      	add	r3, r2
 800a280:	eca5 7a01 	vstmia	r5!, {s14}
 800a284:	45ac      	cmp	ip, r5
 800a286:	d8e4      	bhi.n	800a252 <forward_lite_dense_if32of32wf32_lut8+0xaa>
 800a288:	9b03      	ldr	r3, [sp, #12]
 800a28a:	46f3      	mov	fp, lr
 800a28c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a28e:	1899      	adds	r1, r3, r2
 800a290:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a292:	b9c3      	cbnz	r3, 800a2c6 <forward_lite_dense_if32of32wf32_lut8+0x11e>
 800a294:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a296:	428b      	cmp	r3, r1
 800a298:	d928      	bls.n	800a2ec <forward_lite_dense_if32of32wf32_lut8+0x144>
 800a29a:	9b00      	ldr	r3, [sp, #0]
 800a29c:	9a05      	ldr	r2, [sp, #20]
 800a29e:	4413      	add	r3, r2
 800a2a0:	4492      	add	sl, r2
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	9b03      	ldr	r3, [sp, #12]
 800a2a6:	459c      	cmp	ip, r3
 800a2a8:	f240 821e 	bls.w	800a6e8 <forward_lite_dense_if32of32wf32_lut8+0x540>
 800a2ac:	460d      	mov	r5, r1
 800a2ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2b0:	4496      	add	lr, r2
 800a2b2:	9103      	str	r1, [sp, #12]
 800a2b4:	eb05 0c03 	add.w	ip, r5, r3
 800a2b8:	45ac      	cmp	ip, r5
 800a2ba:	d8ac      	bhi.n	800a216 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 800a2bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2be:	4629      	mov	r1, r5
 800a2c0:	46f3      	mov	fp, lr
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d0e6      	beq.n	800a294 <forward_lite_dense_if32of32wf32_lut8+0xec>
 800a2c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d0e3      	beq.n	800a294 <forward_lite_dense_if32of32wf32_lut8+0xec>
 800a2cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2ce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a2d0:	1acb      	subs	r3, r1, r3
 800a2d2:	edd3 7a00 	vldr	s15, [r3]
 800a2d6:	ecb2 7a01 	vldmia	r2!, {s14}
 800a2da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2de:	ece3 7a01 	vstmia	r3!, {s15}
 800a2e2:	428b      	cmp	r3, r1
 800a2e4:	d1f5      	bne.n	800a2d2 <forward_lite_dense_if32of32wf32_lut8+0x12a>
 800a2e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2e8:	428b      	cmp	r3, r1
 800a2ea:	d8d6      	bhi.n	800a29a <forward_lite_dense_if32of32wf32_lut8+0xf2>
 800a2ec:	b011      	add	sp, #68	; 0x44
 800a2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f2:	f003 0203 	and.w	r2, r3, #3
 800a2f6:	2a02      	cmp	r2, #2
 800a2f8:	f000 81ee 	beq.w	800a6d8 <forward_lite_dense_if32of32wf32_lut8+0x530>
 800a2fc:	2a03      	cmp	r2, #3
 800a2fe:	f000 80e5 	beq.w	800a4cc <forward_lite_dense_if32of32wf32_lut8+0x324>
 800a302:	2a01      	cmp	r2, #1
 800a304:	f000 81d2 	beq.w	800a6ac <forward_lite_dense_if32of32wf32_lut8+0x504>
 800a308:	9a06      	ldr	r2, [sp, #24]
 800a30a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800a4c8 <forward_lite_dense_if32of32wf32_lut8+0x320>
 800a30e:	4593      	cmp	fp, r2
 800a310:	f200 81e8 	bhi.w	800a6e4 <forward_lite_dense_if32of32wf32_lut8+0x53c>
 800a314:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a316:	f103 0208 	add.w	r2, r3, #8
 800a31a:	f10b 0120 	add.w	r1, fp, #32
 800a31e:	18c4      	adds	r4, r0, r3
 800a320:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 800a324:	3208      	adds	r2, #8
 800a326:	ed51 2a07 	vldr	s5, [r1, #-28]	; 0xffffffe4
 800a32a:	3120      	adds	r1, #32
 800a32c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800a330:	ed11 3a10 	vldr	s6, [r1, #-64]	; 0xffffffc0
 800a334:	ed11 4a0e 	vldr	s8, [r1, #-56]	; 0xffffffc8
 800a338:	edd0 7a00 	vldr	s15, [r0]
 800a33c:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 800a340:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800a344:	ed51 4a0d 	vldr	s9, [r1, #-52]	; 0xffffffcc
 800a348:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800a34c:	ed11 5a0c 	vldr	s10, [r1, #-48]	; 0xffffffd0
 800a350:	ed51 5a0b 	vldr	s11, [r1, #-44]	; 0xffffffd4
 800a354:	edd0 2a00 	vldr	s5, [r0]
 800a358:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 800a35c:	eee2 7a83 	vfma.f32	s15, s5, s6
 800a360:	ed11 6a0a 	vldr	s12, [r1, #-40]	; 0xffffffd8
 800a364:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800a368:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800a36c:	ed90 3a00 	vldr	s6, [r0]
 800a370:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 800a374:	eee3 7a04 	vfma.f32	s15, s6, s8
 800a378:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800a37c:	ed90 4a00 	vldr	s8, [r0]
 800a380:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 800a384:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800a388:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a38c:	edd0 4a00 	vldr	s9, [r0]
 800a390:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 800a394:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800a398:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a39c:	ed90 5a00 	vldr	s10, [r0]
 800a3a0:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 800a3a4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800a3a8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a3ac:	edd0 5a00 	vldr	s11, [r0]
 800a3b0:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 800a3b4:	42a2      	cmp	r2, r4
 800a3b6:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800a3ba:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a3be:	ed90 6a00 	vldr	s12, [r0]
 800a3c2:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a3c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a3ca:	d1a9      	bne.n	800a320 <forward_lite_dense_if32of32wf32_lut8+0x178>
 800a3cc:	9a08      	ldr	r2, [sp, #32]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3d2:	4572      	cmp	r2, lr
 800a3d4:	f4bf af54 	bcs.w	800a280 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 800a3d8:	7819      	ldrb	r1, [r3, #0]
 800a3da:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a3de:	edd1 7a00 	vldr	s15, [r1]
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	ecf1 6a01 	vldmia	r1!, {s13}
 800a3e8:	458a      	cmp	sl, r1
 800a3ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a3ee:	d963      	bls.n	800a4b8 <forward_lite_dense_if32of32wf32_lut8+0x310>
 800a3f0:	7859      	ldrb	r1, [r3, #1]
 800a3f2:	edd2 6a01 	vldr	s13, [r2, #4]
 800a3f6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a3fa:	edd1 7a00 	vldr	s15, [r1]
 800a3fe:	f102 0108 	add.w	r1, r2, #8
 800a402:	458a      	cmp	sl, r1
 800a404:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a408:	d956      	bls.n	800a4b8 <forward_lite_dense_if32of32wf32_lut8+0x310>
 800a40a:	7899      	ldrb	r1, [r3, #2]
 800a40c:	edd2 6a02 	vldr	s13, [r2, #8]
 800a410:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a414:	edd1 7a00 	vldr	s15, [r1]
 800a418:	f102 010c 	add.w	r1, r2, #12
 800a41c:	458a      	cmp	sl, r1
 800a41e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a422:	d949      	bls.n	800a4b8 <forward_lite_dense_if32of32wf32_lut8+0x310>
 800a424:	78d9      	ldrb	r1, [r3, #3]
 800a426:	edd2 6a03 	vldr	s13, [r2, #12]
 800a42a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a42e:	edd1 7a00 	vldr	s15, [r1]
 800a432:	f102 0110 	add.w	r1, r2, #16
 800a436:	458a      	cmp	sl, r1
 800a438:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a43c:	d93c      	bls.n	800a4b8 <forward_lite_dense_if32of32wf32_lut8+0x310>
 800a43e:	7919      	ldrb	r1, [r3, #4]
 800a440:	edd2 6a04 	vldr	s13, [r2, #16]
 800a444:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a448:	edd1 7a00 	vldr	s15, [r1]
 800a44c:	f102 0114 	add.w	r1, r2, #20
 800a450:	458a      	cmp	sl, r1
 800a452:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a456:	d92f      	bls.n	800a4b8 <forward_lite_dense_if32of32wf32_lut8+0x310>
 800a458:	7959      	ldrb	r1, [r3, #5]
 800a45a:	edd2 6a05 	vldr	s13, [r2, #20]
 800a45e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a462:	edd1 7a00 	vldr	s15, [r1]
 800a466:	f102 0118 	add.w	r1, r2, #24
 800a46a:	458a      	cmp	sl, r1
 800a46c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a470:	d922      	bls.n	800a4b8 <forward_lite_dense_if32of32wf32_lut8+0x310>
 800a472:	7999      	ldrb	r1, [r3, #6]
 800a474:	edd2 6a06 	vldr	s13, [r2, #24]
 800a478:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a47c:	edd1 7a00 	vldr	s15, [r1]
 800a480:	f102 011c 	add.w	r1, r2, #28
 800a484:	458a      	cmp	sl, r1
 800a486:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a48a:	d915      	bls.n	800a4b8 <forward_lite_dense_if32of32wf32_lut8+0x310>
 800a48c:	79d9      	ldrb	r1, [r3, #7]
 800a48e:	edd2 6a07 	vldr	s13, [r2, #28]
 800a492:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a496:	edd1 7a00 	vldr	s15, [r1]
 800a49a:	f102 0120 	add.w	r1, r2, #32
 800a49e:	458a      	cmp	sl, r1
 800a4a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a4a4:	d908      	bls.n	800a4b8 <forward_lite_dense_if32of32wf32_lut8+0x310>
 800a4a6:	7a19      	ldrb	r1, [r3, #8]
 800a4a8:	edd2 7a08 	vldr	s15, [r2, #32]
 800a4ac:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a4b0:	edd1 6a00 	vldr	s13, [r1]
 800a4b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a4b8:	9901      	ldr	r1, [sp, #4]
 800a4ba:	1a8a      	subs	r2, r1, r2
 800a4bc:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 800a4c0:	1c53      	adds	r3, r2, #1
 800a4c2:	e6dd      	b.n	800a280 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 800a4c4:	3ffffff8 	.word	0x3ffffff8
 800a4c8:	00000000 	.word	0x00000000
 800a4cc:	eeb0 7a63 	vmov.f32	s14, s7
 800a4d0:	465a      	mov	r2, fp
 800a4d2:	461f      	mov	r7, r3
 800a4d4:	4610      	mov	r0, r2
 800a4d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a4da:	ecf0 7a01 	vldmia	r0!, {s15}
 800a4de:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a4e2:	edd1 6a00 	vldr	s13, [r1]
 800a4e6:	9900      	ldr	r1, [sp, #0]
 800a4e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a4ec:	4288      	cmp	r0, r1
 800a4ee:	f200 80f7 	bhi.w	800a6e0 <forward_lite_dense_if32of32wf32_lut8+0x538>
 800a4f2:	9904      	ldr	r1, [sp, #16]
 800a4f4:	f103 0411 	add.w	r4, r3, #17
 800a4f8:	3309      	adds	r3, #9
 800a4fa:	1a8e      	subs	r6, r1, r2
 800a4fc:	3224      	adds	r2, #36	; 0x24
 800a4fe:	0976      	lsrs	r6, r6, #5
 800a500:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a504:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 800a508:	3308      	adds	r3, #8
 800a50a:	ed52 2a07 	vldr	s5, [r2, #-28]	; 0xffffffe4
 800a50e:	3220      	adds	r2, #32
 800a510:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a514:	ed12 3a10 	vldr	s6, [r2, #-64]	; 0xffffffc0
 800a518:	ed12 4a0e 	vldr	s8, [r2, #-56]	; 0xffffffc8
 800a51c:	edd1 7a00 	vldr	s15, [r1]
 800a520:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 800a524:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800a528:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 800a52c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a530:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 800a534:	ed52 5a0b 	vldr	s11, [r2, #-44]	; 0xffffffd4
 800a538:	edd1 2a00 	vldr	s5, [r1]
 800a53c:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 800a540:	eee2 7a83 	vfma.f32	s15, s5, s6
 800a544:	ed12 6a0a 	vldr	s12, [r2, #-40]	; 0xffffffd8
 800a548:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a54c:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 800a550:	ed91 3a00 	vldr	s6, [r1]
 800a554:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 800a558:	eee3 7a04 	vfma.f32	s15, s6, s8
 800a55c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a560:	ed91 4a00 	vldr	s8, [r1]
 800a564:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 800a568:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a56c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a570:	edd1 4a00 	vldr	s9, [r1]
 800a574:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 800a578:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a57c:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a580:	ed91 5a00 	vldr	s10, [r1]
 800a584:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 800a588:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a58c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a590:	edd1 5a00 	vldr	s11, [r1]
 800a594:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 800a598:	42a3      	cmp	r3, r4
 800a59a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a59e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a5a2:	ed91 6a00 	vldr	s12, [r1]
 800a5a6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a5aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5ae:	d1a9      	bne.n	800a504 <forward_lite_dense_if32of32wf32_lut8+0x35c>
 800a5b0:	3601      	adds	r6, #1
 800a5b2:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 800a5b6:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 800a5ba:	4550      	cmp	r0, sl
 800a5bc:	f4bf ae60 	bcs.w	800a280 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 800a5c0:	781a      	ldrb	r2, [r3, #0]
 800a5c2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800a5c6:	edd2 7a00 	vldr	s15, [r2]
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	ecf2 6a01 	vldmia	r2!, {s13}
 800a5d0:	4592      	cmp	sl, r2
 800a5d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a5d6:	d963      	bls.n	800a6a0 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800a5d8:	785a      	ldrb	r2, [r3, #1]
 800a5da:	edd0 6a01 	vldr	s13, [r0, #4]
 800a5de:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800a5e2:	edd2 7a00 	vldr	s15, [r2]
 800a5e6:	f100 0208 	add.w	r2, r0, #8
 800a5ea:	4592      	cmp	sl, r2
 800a5ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a5f0:	d956      	bls.n	800a6a0 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800a5f2:	789a      	ldrb	r2, [r3, #2]
 800a5f4:	edd0 6a02 	vldr	s13, [r0, #8]
 800a5f8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800a5fc:	edd2 7a00 	vldr	s15, [r2]
 800a600:	f100 020c 	add.w	r2, r0, #12
 800a604:	4592      	cmp	sl, r2
 800a606:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a60a:	d949      	bls.n	800a6a0 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800a60c:	78da      	ldrb	r2, [r3, #3]
 800a60e:	edd0 6a03 	vldr	s13, [r0, #12]
 800a612:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800a616:	edd2 7a00 	vldr	s15, [r2]
 800a61a:	f100 0210 	add.w	r2, r0, #16
 800a61e:	4592      	cmp	sl, r2
 800a620:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a624:	d93c      	bls.n	800a6a0 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800a626:	791a      	ldrb	r2, [r3, #4]
 800a628:	edd0 6a04 	vldr	s13, [r0, #16]
 800a62c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800a630:	edd2 7a00 	vldr	s15, [r2]
 800a634:	f100 0214 	add.w	r2, r0, #20
 800a638:	4592      	cmp	sl, r2
 800a63a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a63e:	d92f      	bls.n	800a6a0 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800a640:	795a      	ldrb	r2, [r3, #5]
 800a642:	edd0 6a05 	vldr	s13, [r0, #20]
 800a646:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800a64a:	edd2 7a00 	vldr	s15, [r2]
 800a64e:	f100 0218 	add.w	r2, r0, #24
 800a652:	4596      	cmp	lr, r2
 800a654:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a658:	d922      	bls.n	800a6a0 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800a65a:	799a      	ldrb	r2, [r3, #6]
 800a65c:	edd0 6a06 	vldr	s13, [r0, #24]
 800a660:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800a664:	edd2 7a00 	vldr	s15, [r2]
 800a668:	f100 021c 	add.w	r2, r0, #28
 800a66c:	4596      	cmp	lr, r2
 800a66e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a672:	d915      	bls.n	800a6a0 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800a674:	79da      	ldrb	r2, [r3, #7]
 800a676:	edd0 6a07 	vldr	s13, [r0, #28]
 800a67a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800a67e:	edd2 7a00 	vldr	s15, [r2]
 800a682:	f100 0220 	add.w	r2, r0, #32
 800a686:	4596      	cmp	lr, r2
 800a688:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a68c:	d908      	bls.n	800a6a0 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800a68e:	7a1a      	ldrb	r2, [r3, #8]
 800a690:	edd0 7a08 	vldr	s15, [r0, #32]
 800a694:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800a698:	edd2 6a00 	vldr	s13, [r2]
 800a69c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a6a0:	9a01      	ldr	r2, [sp, #4]
 800a6a2:	1a10      	subs	r0, r2, r0
 800a6a4:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 800a6a8:	1c43      	adds	r3, r0, #1
 800a6aa:	e5e9      	b.n	800a280 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 800a6ac:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a6b0:	eddb 7a00 	vldr	s15, [fp]
 800a6b4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a6b8:	9a07      	ldr	r2, [sp, #28]
 800a6ba:	ed91 7a00 	vldr	s14, [r1]
 800a6be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6c2:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a6c6:	ecf2 7a01 	vldmia	r2!, {s15}
 800a6ca:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a6ce:	edd1 6a00 	vldr	s13, [r1]
 800a6d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a6d6:	e6fc      	b.n	800a4d2 <forward_lite_dense_if32of32wf32_lut8+0x32a>
 800a6d8:	eeb0 7a63 	vmov.f32	s14, s7
 800a6dc:	465a      	mov	r2, fp
 800a6de:	e7f0      	b.n	800a6c2 <forward_lite_dense_if32of32wf32_lut8+0x51a>
 800a6e0:	463b      	mov	r3, r7
 800a6e2:	e76a      	b.n	800a5ba <forward_lite_dense_if32of32wf32_lut8+0x412>
 800a6e4:	465a      	mov	r2, fp
 800a6e6:	e674      	b.n	800a3d2 <forward_lite_dense_if32of32wf32_lut8+0x22a>
 800a6e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6ea:	1acb      	subs	r3, r1, r3
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a6f0:	ed92 7a00 	vldr	s14, [r2]
 800a6f4:	ecf0 7a01 	vldmia	r0!, {s15}
 800a6f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6fc:	ece2 7a01 	vstmia	r2!, {s15}
 800a700:	4291      	cmp	r1, r2
 800a702:	d1f5      	bne.n	800a6f0 <forward_lite_dense_if32of32wf32_lut8+0x548>
 800a704:	e7f2      	b.n	800a6ec <forward_lite_dense_if32of32wf32_lut8+0x544>
 800a706:	bf00      	nop

0800a708 <st_int8_copy>:
 800a708:	4288      	cmp	r0, r1
 800a70a:	d010      	beq.n	800a72e <st_int8_copy+0x26>
 800a70c:	b17a      	cbz	r2, 800a72e <st_int8_copy+0x26>
 800a70e:	4288      	cmp	r0, r1
 800a710:	eb00 0302 	add.w	r3, r0, r2
 800a714:	d20c      	bcs.n	800a730 <st_int8_copy+0x28>
 800a716:	428b      	cmp	r3, r1
 800a718:	d90a      	bls.n	800a730 <st_int8_copy+0x28>
 800a71a:	4283      	cmp	r3, r0
 800a71c:	440a      	add	r2, r1
 800a71e:	d906      	bls.n	800a72e <st_int8_copy+0x26>
 800a720:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800a724:	4283      	cmp	r3, r0
 800a726:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800a72a:	d1f9      	bne.n	800a720 <st_int8_copy+0x18>
 800a72c:	4770      	bx	lr
 800a72e:	4770      	bx	lr
 800a730:	078b      	lsls	r3, r1, #30
 800a732:	d102      	bne.n	800a73a <st_int8_copy+0x32>
 800a734:	e008      	b.n	800a748 <st_int8_copy+0x40>
 800a736:	2a00      	cmp	r2, #0
 800a738:	d04c      	beq.n	800a7d4 <st_int8_copy+0xcc>
 800a73a:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800a73e:	3a01      	subs	r2, #1
 800a740:	f801 3b01 	strb.w	r3, [r1], #1
 800a744:	078b      	lsls	r3, r1, #30
 800a746:	d1f6      	bne.n	800a736 <st_int8_copy+0x2e>
 800a748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a74c:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800a750:	d05d      	beq.n	800a80e <st_int8_copy+0x106>
 800a752:	ea41 0300 	orr.w	r3, r1, r0
 800a756:	075b      	lsls	r3, r3, #29
 800a758:	d13d      	bne.n	800a7d6 <st_int8_copy+0xce>
 800a75a:	f1be 0f01 	cmp.w	lr, #1
 800a75e:	d03a      	beq.n	800a7d6 <st_int8_copy+0xce>
 800a760:	f100 0310 	add.w	r3, r0, #16
 800a764:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800a768:	f101 0c10 	add.w	ip, r1, #16
 800a76c:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800a770:	3310      	adds	r3, #16
 800a772:	f10c 0c10 	add.w	ip, ip, #16
 800a776:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 800a77a:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 800a77e:	4573      	cmp	r3, lr
 800a780:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 800a784:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 800a788:	d1f2      	bne.n	800a770 <st_int8_copy+0x68>
 800a78a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800a78e:	4421      	add	r1, r4
 800a790:	4420      	add	r0, r4
 800a792:	f002 0203 	and.w	r2, r2, #3
 800a796:	b16b      	cbz	r3, 800a7b4 <st_int8_copy+0xac>
 800a798:	6804      	ldr	r4, [r0, #0]
 800a79a:	600c      	str	r4, [r1, #0]
 800a79c:	1e5c      	subs	r4, r3, #1
 800a79e:	d005      	beq.n	800a7ac <st_int8_copy+0xa4>
 800a7a0:	6845      	ldr	r5, [r0, #4]
 800a7a2:	2c01      	cmp	r4, #1
 800a7a4:	604d      	str	r5, [r1, #4]
 800a7a6:	d001      	beq.n	800a7ac <st_int8_copy+0xa4>
 800a7a8:	6884      	ldr	r4, [r0, #8]
 800a7aa:	608c      	str	r4, [r1, #8]
 800a7ac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a7b0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800a7b4:	b162      	cbz	r2, 800a7d0 <st_int8_copy+0xc8>
 800a7b6:	f990 3000 	ldrsb.w	r3, [r0]
 800a7ba:	3a01      	subs	r2, #1
 800a7bc:	700b      	strb	r3, [r1, #0]
 800a7be:	d007      	beq.n	800a7d0 <st_int8_copy+0xc8>
 800a7c0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800a7c4:	2a01      	cmp	r2, #1
 800a7c6:	704b      	strb	r3, [r1, #1]
 800a7c8:	d002      	beq.n	800a7d0 <st_int8_copy+0xc8>
 800a7ca:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800a7ce:	708b      	strb	r3, [r1, #2]
 800a7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d4:	4770      	bx	lr
 800a7d6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800a7da:	460b      	mov	r3, r1
 800a7dc:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800a7e0:	4684      	mov	ip, r0
 800a7e2:	f8dc 8000 	ldr.w	r8, [ip]
 800a7e6:	3310      	adds	r3, #16
 800a7e8:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800a7ec:	f10c 0c10 	add.w	ip, ip, #16
 800a7f0:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800a7f4:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 800a7f8:	f843 8c10 	str.w	r8, [r3, #-16]
 800a7fc:	f843 7c0c 	str.w	r7, [r3, #-12]
 800a800:	f843 6c08 	str.w	r6, [r3, #-8]
 800a804:	f843 5c04 	str.w	r5, [r3, #-4]
 800a808:	459e      	cmp	lr, r3
 800a80a:	d1ea      	bne.n	800a7e2 <st_int8_copy+0xda>
 800a80c:	e7bd      	b.n	800a78a <st_int8_copy+0x82>
 800a80e:	0893      	lsrs	r3, r2, #2
 800a810:	f002 0203 	and.w	r2, r2, #3
 800a814:	e7bf      	b.n	800a796 <st_int8_copy+0x8e>
 800a816:	bf00      	nop

0800a818 <ai_array_to_buffer_fmt>:
 800a818:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d053      	beq.n	800a8c8 <ai_array_to_buffer_fmt+0xb0>
 800a820:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800a824:	4a2b      	ldr	r2, [pc, #172]	; (800a8d4 <ai_array_to_buffer_fmt+0xbc>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d010      	beq.n	800a84c <ai_array_to_buffer_fmt+0x34>
 800a82a:	dc21      	bgt.n	800a870 <ai_array_to_buffer_fmt+0x58>
 800a82c:	4a2a      	ldr	r2, [pc, #168]	; (800a8d8 <ai_array_to_buffer_fmt+0xc0>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d00c      	beq.n	800a84c <ai_array_to_buffer_fmt+0x34>
 800a832:	dd0f      	ble.n	800a854 <ai_array_to_buffer_fmt+0x3c>
 800a834:	4a29      	ldr	r2, [pc, #164]	; (800a8dc <ai_array_to_buffer_fmt+0xc4>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d008      	beq.n	800a84c <ai_array_to_buffer_fmt+0x34>
 800a83a:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800a83e:	4293      	cmp	r3, r2
 800a840:	d004      	beq.n	800a84c <ai_array_to_buffer_fmt+0x34>
 800a842:	4a27      	ldr	r2, [pc, #156]	; (800a8e0 <ai_array_to_buffer_fmt+0xc8>)
 800a844:	4293      	cmp	r3, r2
 800a846:	bf0c      	ite	eq
 800a848:	4613      	moveq	r3, r2
 800a84a:	2340      	movne	r3, #64	; 0x40
 800a84c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a850:	4318      	orrs	r0, r3
 800a852:	4770      	bx	lr
 800a854:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800a858:	4293      	cmp	r3, r2
 800a85a:	d0f7      	beq.n	800a84c <ai_array_to_buffer_fmt+0x34>
 800a85c:	dd2a      	ble.n	800a8b4 <ai_array_to_buffer_fmt+0x9c>
 800a85e:	4a21      	ldr	r2, [pc, #132]	; (800a8e4 <ai_array_to_buffer_fmt+0xcc>)
 800a860:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a864:	4293      	cmp	r3, r2
 800a866:	bf0c      	ite	eq
 800a868:	4613      	moveq	r3, r2
 800a86a:	2340      	movne	r3, #64	; 0x40
 800a86c:	4318      	orrs	r0, r3
 800a86e:	4770      	bx	lr
 800a870:	4a1d      	ldr	r2, [pc, #116]	; (800a8e8 <ai_array_to_buffer_fmt+0xd0>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d0ea      	beq.n	800a84c <ai_array_to_buffer_fmt+0x34>
 800a876:	dd0f      	ble.n	800a898 <ai_array_to_buffer_fmt+0x80>
 800a878:	4a1c      	ldr	r2, [pc, #112]	; (800a8ec <ai_array_to_buffer_fmt+0xd4>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d0e6      	beq.n	800a84c <ai_array_to_buffer_fmt+0x34>
 800a87e:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800a882:	4293      	cmp	r3, r2
 800a884:	d0e2      	beq.n	800a84c <ai_array_to_buffer_fmt+0x34>
 800a886:	4a1a      	ldr	r2, [pc, #104]	; (800a8f0 <ai_array_to_buffer_fmt+0xd8>)
 800a888:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800a88c:	4293      	cmp	r3, r2
 800a88e:	bf0c      	ite	eq
 800a890:	4613      	moveq	r3, r2
 800a892:	2340      	movne	r3, #64	; 0x40
 800a894:	4318      	orrs	r0, r3
 800a896:	4770      	bx	lr
 800a898:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d0d5      	beq.n	800a84c <ai_array_to_buffer_fmt+0x34>
 800a8a0:	3207      	adds	r2, #7
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d0d2      	beq.n	800a84c <ai_array_to_buffer_fmt+0x34>
 800a8a6:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	bf0c      	ite	eq
 800a8ae:	4613      	moveq	r3, r2
 800a8b0:	2340      	movne	r3, #64	; 0x40
 800a8b2:	e7cb      	b.n	800a84c <ai_array_to_buffer_fmt+0x34>
 800a8b4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d0c7      	beq.n	800a84c <ai_array_to_buffer_fmt+0x34>
 800a8bc:	3280      	adds	r2, #128	; 0x80
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	bf0c      	ite	eq
 800a8c2:	4613      	moveq	r3, r2
 800a8c4:	2340      	movne	r3, #64	; 0x40
 800a8c6:	e7c1      	b.n	800a84c <ai_array_to_buffer_fmt+0x34>
 800a8c8:	4b0a      	ldr	r3, [pc, #40]	; (800a8f4 <ai_array_to_buffer_fmt+0xdc>)
 800a8ca:	4003      	ands	r3, r0
 800a8cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8d0:	e7bc      	b.n	800a84c <ai_array_to_buffer_fmt+0x34>
 800a8d2:	bf00      	nop
 800a8d4:	00840040 	.word	0x00840040
 800a8d8:	00040840 	.word	0x00040840
 800a8dc:	00041040 	.word	0x00041040
 800a8e0:	0004084f 	.word	0x0004084f
 800a8e4:	00040447 	.word	0x00040447
 800a8e8:	00840840 	.word	0x00840840
 800a8ec:	00841040 	.word	0x00841040
 800a8f0:	0084084f 	.word	0x0084084f
 800a8f4:	00803fff 	.word	0x00803fff

0800a8f8 <ai_array_get_data_byte_size>:
 800a8f8:	b169      	cbz	r1, 800a916 <ai_array_get_data_byte_size+0x1e>
 800a8fa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800a8fe:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800a902:	fb03 f101 	mul.w	r1, r3, r1
 800a906:	1dcb      	adds	r3, r1, #7
 800a908:	f023 0307 	bic.w	r3, r3, #7
 800a90c:	fa23 f000 	lsr.w	r0, r3, r0
 800a910:	3007      	adds	r0, #7
 800a912:	08c0      	lsrs	r0, r0, #3
 800a914:	4770      	bx	lr
 800a916:	4608      	mov	r0, r1
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop

0800a91c <malloc>:
 800a91c:	4b02      	ldr	r3, [pc, #8]	; (800a928 <malloc+0xc>)
 800a91e:	4601      	mov	r1, r0
 800a920:	6818      	ldr	r0, [r3, #0]
 800a922:	f000 b82b 	b.w	800a97c <_malloc_r>
 800a926:	bf00      	nop
 800a928:	20004204 	.word	0x20004204

0800a92c <free>:
 800a92c:	4b02      	ldr	r3, [pc, #8]	; (800a938 <free+0xc>)
 800a92e:	4601      	mov	r1, r0
 800a930:	6818      	ldr	r0, [r3, #0]
 800a932:	f001 bd47 	b.w	800c3c4 <_free_r>
 800a936:	bf00      	nop
 800a938:	20004204 	.word	0x20004204

0800a93c <sbrk_aligned>:
 800a93c:	b570      	push	{r4, r5, r6, lr}
 800a93e:	4e0e      	ldr	r6, [pc, #56]	; (800a978 <sbrk_aligned+0x3c>)
 800a940:	460c      	mov	r4, r1
 800a942:	6831      	ldr	r1, [r6, #0]
 800a944:	4605      	mov	r5, r0
 800a946:	b911      	cbnz	r1, 800a94e <sbrk_aligned+0x12>
 800a948:	f000 fe62 	bl	800b610 <_sbrk_r>
 800a94c:	6030      	str	r0, [r6, #0]
 800a94e:	4621      	mov	r1, r4
 800a950:	4628      	mov	r0, r5
 800a952:	f000 fe5d 	bl	800b610 <_sbrk_r>
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	d00a      	beq.n	800a970 <sbrk_aligned+0x34>
 800a95a:	1cc4      	adds	r4, r0, #3
 800a95c:	f024 0403 	bic.w	r4, r4, #3
 800a960:	42a0      	cmp	r0, r4
 800a962:	d007      	beq.n	800a974 <sbrk_aligned+0x38>
 800a964:	1a21      	subs	r1, r4, r0
 800a966:	4628      	mov	r0, r5
 800a968:	f000 fe52 	bl	800b610 <_sbrk_r>
 800a96c:	3001      	adds	r0, #1
 800a96e:	d101      	bne.n	800a974 <sbrk_aligned+0x38>
 800a970:	f04f 34ff 	mov.w	r4, #4294967295
 800a974:	4620      	mov	r0, r4
 800a976:	bd70      	pop	{r4, r5, r6, pc}
 800a978:	2002aa74 	.word	0x2002aa74

0800a97c <_malloc_r>:
 800a97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a980:	1ccd      	adds	r5, r1, #3
 800a982:	f025 0503 	bic.w	r5, r5, #3
 800a986:	3508      	adds	r5, #8
 800a988:	2d0c      	cmp	r5, #12
 800a98a:	bf38      	it	cc
 800a98c:	250c      	movcc	r5, #12
 800a98e:	2d00      	cmp	r5, #0
 800a990:	4607      	mov	r7, r0
 800a992:	db01      	blt.n	800a998 <_malloc_r+0x1c>
 800a994:	42a9      	cmp	r1, r5
 800a996:	d905      	bls.n	800a9a4 <_malloc_r+0x28>
 800a998:	230c      	movs	r3, #12
 800a99a:	603b      	str	r3, [r7, #0]
 800a99c:	2600      	movs	r6, #0
 800a99e:	4630      	mov	r0, r6
 800a9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aa78 <_malloc_r+0xfc>
 800a9a8:	f000 f868 	bl	800aa7c <__malloc_lock>
 800a9ac:	f8d8 3000 	ldr.w	r3, [r8]
 800a9b0:	461c      	mov	r4, r3
 800a9b2:	bb5c      	cbnz	r4, 800aa0c <_malloc_r+0x90>
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	f7ff ffc0 	bl	800a93c <sbrk_aligned>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	4604      	mov	r4, r0
 800a9c0:	d155      	bne.n	800aa6e <_malloc_r+0xf2>
 800a9c2:	f8d8 4000 	ldr.w	r4, [r8]
 800a9c6:	4626      	mov	r6, r4
 800a9c8:	2e00      	cmp	r6, #0
 800a9ca:	d145      	bne.n	800aa58 <_malloc_r+0xdc>
 800a9cc:	2c00      	cmp	r4, #0
 800a9ce:	d048      	beq.n	800aa62 <_malloc_r+0xe6>
 800a9d0:	6823      	ldr	r3, [r4, #0]
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	4638      	mov	r0, r7
 800a9d6:	eb04 0903 	add.w	r9, r4, r3
 800a9da:	f000 fe19 	bl	800b610 <_sbrk_r>
 800a9de:	4581      	cmp	r9, r0
 800a9e0:	d13f      	bne.n	800aa62 <_malloc_r+0xe6>
 800a9e2:	6821      	ldr	r1, [r4, #0]
 800a9e4:	1a6d      	subs	r5, r5, r1
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	4638      	mov	r0, r7
 800a9ea:	f7ff ffa7 	bl	800a93c <sbrk_aligned>
 800a9ee:	3001      	adds	r0, #1
 800a9f0:	d037      	beq.n	800aa62 <_malloc_r+0xe6>
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	442b      	add	r3, r5
 800a9f6:	6023      	str	r3, [r4, #0]
 800a9f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d038      	beq.n	800aa72 <_malloc_r+0xf6>
 800aa00:	685a      	ldr	r2, [r3, #4]
 800aa02:	42a2      	cmp	r2, r4
 800aa04:	d12b      	bne.n	800aa5e <_malloc_r+0xe2>
 800aa06:	2200      	movs	r2, #0
 800aa08:	605a      	str	r2, [r3, #4]
 800aa0a:	e00f      	b.n	800aa2c <_malloc_r+0xb0>
 800aa0c:	6822      	ldr	r2, [r4, #0]
 800aa0e:	1b52      	subs	r2, r2, r5
 800aa10:	d41f      	bmi.n	800aa52 <_malloc_r+0xd6>
 800aa12:	2a0b      	cmp	r2, #11
 800aa14:	d917      	bls.n	800aa46 <_malloc_r+0xca>
 800aa16:	1961      	adds	r1, r4, r5
 800aa18:	42a3      	cmp	r3, r4
 800aa1a:	6025      	str	r5, [r4, #0]
 800aa1c:	bf18      	it	ne
 800aa1e:	6059      	strne	r1, [r3, #4]
 800aa20:	6863      	ldr	r3, [r4, #4]
 800aa22:	bf08      	it	eq
 800aa24:	f8c8 1000 	streq.w	r1, [r8]
 800aa28:	5162      	str	r2, [r4, r5]
 800aa2a:	604b      	str	r3, [r1, #4]
 800aa2c:	4638      	mov	r0, r7
 800aa2e:	f104 060b 	add.w	r6, r4, #11
 800aa32:	f000 f829 	bl	800aa88 <__malloc_unlock>
 800aa36:	f026 0607 	bic.w	r6, r6, #7
 800aa3a:	1d23      	adds	r3, r4, #4
 800aa3c:	1af2      	subs	r2, r6, r3
 800aa3e:	d0ae      	beq.n	800a99e <_malloc_r+0x22>
 800aa40:	1b9b      	subs	r3, r3, r6
 800aa42:	50a3      	str	r3, [r4, r2]
 800aa44:	e7ab      	b.n	800a99e <_malloc_r+0x22>
 800aa46:	42a3      	cmp	r3, r4
 800aa48:	6862      	ldr	r2, [r4, #4]
 800aa4a:	d1dd      	bne.n	800aa08 <_malloc_r+0x8c>
 800aa4c:	f8c8 2000 	str.w	r2, [r8]
 800aa50:	e7ec      	b.n	800aa2c <_malloc_r+0xb0>
 800aa52:	4623      	mov	r3, r4
 800aa54:	6864      	ldr	r4, [r4, #4]
 800aa56:	e7ac      	b.n	800a9b2 <_malloc_r+0x36>
 800aa58:	4634      	mov	r4, r6
 800aa5a:	6876      	ldr	r6, [r6, #4]
 800aa5c:	e7b4      	b.n	800a9c8 <_malloc_r+0x4c>
 800aa5e:	4613      	mov	r3, r2
 800aa60:	e7cc      	b.n	800a9fc <_malloc_r+0x80>
 800aa62:	230c      	movs	r3, #12
 800aa64:	603b      	str	r3, [r7, #0]
 800aa66:	4638      	mov	r0, r7
 800aa68:	f000 f80e 	bl	800aa88 <__malloc_unlock>
 800aa6c:	e797      	b.n	800a99e <_malloc_r+0x22>
 800aa6e:	6025      	str	r5, [r4, #0]
 800aa70:	e7dc      	b.n	800aa2c <_malloc_r+0xb0>
 800aa72:	605b      	str	r3, [r3, #4]
 800aa74:	deff      	udf	#255	; 0xff
 800aa76:	bf00      	nop
 800aa78:	2002aa70 	.word	0x2002aa70

0800aa7c <__malloc_lock>:
 800aa7c:	4801      	ldr	r0, [pc, #4]	; (800aa84 <__malloc_lock+0x8>)
 800aa7e:	f000 be14 	b.w	800b6aa <__retarget_lock_acquire_recursive>
 800aa82:	bf00      	nop
 800aa84:	2002abb8 	.word	0x2002abb8

0800aa88 <__malloc_unlock>:
 800aa88:	4801      	ldr	r0, [pc, #4]	; (800aa90 <__malloc_unlock+0x8>)
 800aa8a:	f000 be0f 	b.w	800b6ac <__retarget_lock_release_recursive>
 800aa8e:	bf00      	nop
 800aa90:	2002abb8 	.word	0x2002abb8

0800aa94 <__cvt>:
 800aa94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa98:	ec55 4b10 	vmov	r4, r5, d0
 800aa9c:	2d00      	cmp	r5, #0
 800aa9e:	460e      	mov	r6, r1
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	462b      	mov	r3, r5
 800aaa4:	bfbb      	ittet	lt
 800aaa6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aaaa:	461d      	movlt	r5, r3
 800aaac:	2300      	movge	r3, #0
 800aaae:	232d      	movlt	r3, #45	; 0x2d
 800aab0:	700b      	strb	r3, [r1, #0]
 800aab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aab4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aab8:	4691      	mov	r9, r2
 800aaba:	f023 0820 	bic.w	r8, r3, #32
 800aabe:	bfbc      	itt	lt
 800aac0:	4622      	movlt	r2, r4
 800aac2:	4614      	movlt	r4, r2
 800aac4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aac8:	d005      	beq.n	800aad6 <__cvt+0x42>
 800aaca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aace:	d100      	bne.n	800aad2 <__cvt+0x3e>
 800aad0:	3601      	adds	r6, #1
 800aad2:	2102      	movs	r1, #2
 800aad4:	e000      	b.n	800aad8 <__cvt+0x44>
 800aad6:	2103      	movs	r1, #3
 800aad8:	ab03      	add	r3, sp, #12
 800aada:	9301      	str	r3, [sp, #4]
 800aadc:	ab02      	add	r3, sp, #8
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	ec45 4b10 	vmov	d0, r4, r5
 800aae4:	4653      	mov	r3, sl
 800aae6:	4632      	mov	r2, r6
 800aae8:	f000 fe7a 	bl	800b7e0 <_dtoa_r>
 800aaec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aaf0:	4607      	mov	r7, r0
 800aaf2:	d102      	bne.n	800aafa <__cvt+0x66>
 800aaf4:	f019 0f01 	tst.w	r9, #1
 800aaf8:	d022      	beq.n	800ab40 <__cvt+0xac>
 800aafa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aafe:	eb07 0906 	add.w	r9, r7, r6
 800ab02:	d110      	bne.n	800ab26 <__cvt+0x92>
 800ab04:	783b      	ldrb	r3, [r7, #0]
 800ab06:	2b30      	cmp	r3, #48	; 0x30
 800ab08:	d10a      	bne.n	800ab20 <__cvt+0x8c>
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	4620      	mov	r0, r4
 800ab10:	4629      	mov	r1, r5
 800ab12:	f7f5 fff9 	bl	8000b08 <__aeabi_dcmpeq>
 800ab16:	b918      	cbnz	r0, 800ab20 <__cvt+0x8c>
 800ab18:	f1c6 0601 	rsb	r6, r6, #1
 800ab1c:	f8ca 6000 	str.w	r6, [sl]
 800ab20:	f8da 3000 	ldr.w	r3, [sl]
 800ab24:	4499      	add	r9, r3
 800ab26:	2200      	movs	r2, #0
 800ab28:	2300      	movs	r3, #0
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	f7f5 ffeb 	bl	8000b08 <__aeabi_dcmpeq>
 800ab32:	b108      	cbz	r0, 800ab38 <__cvt+0xa4>
 800ab34:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab38:	2230      	movs	r2, #48	; 0x30
 800ab3a:	9b03      	ldr	r3, [sp, #12]
 800ab3c:	454b      	cmp	r3, r9
 800ab3e:	d307      	bcc.n	800ab50 <__cvt+0xbc>
 800ab40:	9b03      	ldr	r3, [sp, #12]
 800ab42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab44:	1bdb      	subs	r3, r3, r7
 800ab46:	4638      	mov	r0, r7
 800ab48:	6013      	str	r3, [r2, #0]
 800ab4a:	b004      	add	sp, #16
 800ab4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab50:	1c59      	adds	r1, r3, #1
 800ab52:	9103      	str	r1, [sp, #12]
 800ab54:	701a      	strb	r2, [r3, #0]
 800ab56:	e7f0      	b.n	800ab3a <__cvt+0xa6>

0800ab58 <__exponent>:
 800ab58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2900      	cmp	r1, #0
 800ab5e:	bfb8      	it	lt
 800ab60:	4249      	neglt	r1, r1
 800ab62:	f803 2b02 	strb.w	r2, [r3], #2
 800ab66:	bfb4      	ite	lt
 800ab68:	222d      	movlt	r2, #45	; 0x2d
 800ab6a:	222b      	movge	r2, #43	; 0x2b
 800ab6c:	2909      	cmp	r1, #9
 800ab6e:	7042      	strb	r2, [r0, #1]
 800ab70:	dd2a      	ble.n	800abc8 <__exponent+0x70>
 800ab72:	f10d 0207 	add.w	r2, sp, #7
 800ab76:	4617      	mov	r7, r2
 800ab78:	260a      	movs	r6, #10
 800ab7a:	4694      	mov	ip, r2
 800ab7c:	fb91 f5f6 	sdiv	r5, r1, r6
 800ab80:	fb06 1415 	mls	r4, r6, r5, r1
 800ab84:	3430      	adds	r4, #48	; 0x30
 800ab86:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	2c63      	cmp	r4, #99	; 0x63
 800ab8e:	f102 32ff 	add.w	r2, r2, #4294967295
 800ab92:	4629      	mov	r1, r5
 800ab94:	dcf1      	bgt.n	800ab7a <__exponent+0x22>
 800ab96:	3130      	adds	r1, #48	; 0x30
 800ab98:	f1ac 0402 	sub.w	r4, ip, #2
 800ab9c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aba0:	1c41      	adds	r1, r0, #1
 800aba2:	4622      	mov	r2, r4
 800aba4:	42ba      	cmp	r2, r7
 800aba6:	d30a      	bcc.n	800abbe <__exponent+0x66>
 800aba8:	f10d 0209 	add.w	r2, sp, #9
 800abac:	eba2 020c 	sub.w	r2, r2, ip
 800abb0:	42bc      	cmp	r4, r7
 800abb2:	bf88      	it	hi
 800abb4:	2200      	movhi	r2, #0
 800abb6:	4413      	add	r3, r2
 800abb8:	1a18      	subs	r0, r3, r0
 800abba:	b003      	add	sp, #12
 800abbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abbe:	f812 5b01 	ldrb.w	r5, [r2], #1
 800abc2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800abc6:	e7ed      	b.n	800aba4 <__exponent+0x4c>
 800abc8:	2330      	movs	r3, #48	; 0x30
 800abca:	3130      	adds	r1, #48	; 0x30
 800abcc:	7083      	strb	r3, [r0, #2]
 800abce:	70c1      	strb	r1, [r0, #3]
 800abd0:	1d03      	adds	r3, r0, #4
 800abd2:	e7f1      	b.n	800abb8 <__exponent+0x60>

0800abd4 <_printf_float>:
 800abd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd8:	ed2d 8b02 	vpush	{d8}
 800abdc:	b08d      	sub	sp, #52	; 0x34
 800abde:	460c      	mov	r4, r1
 800abe0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800abe4:	4616      	mov	r6, r2
 800abe6:	461f      	mov	r7, r3
 800abe8:	4605      	mov	r5, r0
 800abea:	f000 fcd9 	bl	800b5a0 <_localeconv_r>
 800abee:	f8d0 a000 	ldr.w	sl, [r0]
 800abf2:	4650      	mov	r0, sl
 800abf4:	f7f5 fb5c 	bl	80002b0 <strlen>
 800abf8:	2300      	movs	r3, #0
 800abfa:	930a      	str	r3, [sp, #40]	; 0x28
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	9305      	str	r3, [sp, #20]
 800ac00:	f8d8 3000 	ldr.w	r3, [r8]
 800ac04:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac08:	3307      	adds	r3, #7
 800ac0a:	f023 0307 	bic.w	r3, r3, #7
 800ac0e:	f103 0208 	add.w	r2, r3, #8
 800ac12:	f8c8 2000 	str.w	r2, [r8]
 800ac16:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac1e:	9307      	str	r3, [sp, #28]
 800ac20:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac24:	ee08 0a10 	vmov	s16, r0
 800ac28:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ac2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac30:	4b9e      	ldr	r3, [pc, #632]	; (800aeac <_printf_float+0x2d8>)
 800ac32:	f04f 32ff 	mov.w	r2, #4294967295
 800ac36:	f7f5 ff99 	bl	8000b6c <__aeabi_dcmpun>
 800ac3a:	bb88      	cbnz	r0, 800aca0 <_printf_float+0xcc>
 800ac3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac40:	4b9a      	ldr	r3, [pc, #616]	; (800aeac <_printf_float+0x2d8>)
 800ac42:	f04f 32ff 	mov.w	r2, #4294967295
 800ac46:	f7f5 ff73 	bl	8000b30 <__aeabi_dcmple>
 800ac4a:	bb48      	cbnz	r0, 800aca0 <_printf_float+0xcc>
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	2300      	movs	r3, #0
 800ac50:	4640      	mov	r0, r8
 800ac52:	4649      	mov	r1, r9
 800ac54:	f7f5 ff62 	bl	8000b1c <__aeabi_dcmplt>
 800ac58:	b110      	cbz	r0, 800ac60 <_printf_float+0x8c>
 800ac5a:	232d      	movs	r3, #45	; 0x2d
 800ac5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac60:	4a93      	ldr	r2, [pc, #588]	; (800aeb0 <_printf_float+0x2dc>)
 800ac62:	4b94      	ldr	r3, [pc, #592]	; (800aeb4 <_printf_float+0x2e0>)
 800ac64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ac68:	bf94      	ite	ls
 800ac6a:	4690      	movls	r8, r2
 800ac6c:	4698      	movhi	r8, r3
 800ac6e:	2303      	movs	r3, #3
 800ac70:	6123      	str	r3, [r4, #16]
 800ac72:	9b05      	ldr	r3, [sp, #20]
 800ac74:	f023 0304 	bic.w	r3, r3, #4
 800ac78:	6023      	str	r3, [r4, #0]
 800ac7a:	f04f 0900 	mov.w	r9, #0
 800ac7e:	9700      	str	r7, [sp, #0]
 800ac80:	4633      	mov	r3, r6
 800ac82:	aa0b      	add	r2, sp, #44	; 0x2c
 800ac84:	4621      	mov	r1, r4
 800ac86:	4628      	mov	r0, r5
 800ac88:	f000 f9da 	bl	800b040 <_printf_common>
 800ac8c:	3001      	adds	r0, #1
 800ac8e:	f040 8090 	bne.w	800adb2 <_printf_float+0x1de>
 800ac92:	f04f 30ff 	mov.w	r0, #4294967295
 800ac96:	b00d      	add	sp, #52	; 0x34
 800ac98:	ecbd 8b02 	vpop	{d8}
 800ac9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca0:	4642      	mov	r2, r8
 800aca2:	464b      	mov	r3, r9
 800aca4:	4640      	mov	r0, r8
 800aca6:	4649      	mov	r1, r9
 800aca8:	f7f5 ff60 	bl	8000b6c <__aeabi_dcmpun>
 800acac:	b140      	cbz	r0, 800acc0 <_printf_float+0xec>
 800acae:	464b      	mov	r3, r9
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	bfbc      	itt	lt
 800acb4:	232d      	movlt	r3, #45	; 0x2d
 800acb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800acba:	4a7f      	ldr	r2, [pc, #508]	; (800aeb8 <_printf_float+0x2e4>)
 800acbc:	4b7f      	ldr	r3, [pc, #508]	; (800aebc <_printf_float+0x2e8>)
 800acbe:	e7d1      	b.n	800ac64 <_printf_float+0x90>
 800acc0:	6863      	ldr	r3, [r4, #4]
 800acc2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800acc6:	9206      	str	r2, [sp, #24]
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	d13f      	bne.n	800ad4c <_printf_float+0x178>
 800accc:	2306      	movs	r3, #6
 800acce:	6063      	str	r3, [r4, #4]
 800acd0:	9b05      	ldr	r3, [sp, #20]
 800acd2:	6861      	ldr	r1, [r4, #4]
 800acd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800acd8:	2300      	movs	r3, #0
 800acda:	9303      	str	r3, [sp, #12]
 800acdc:	ab0a      	add	r3, sp, #40	; 0x28
 800acde:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ace2:	ab09      	add	r3, sp, #36	; 0x24
 800ace4:	ec49 8b10 	vmov	d0, r8, r9
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	6022      	str	r2, [r4, #0]
 800acec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800acf0:	4628      	mov	r0, r5
 800acf2:	f7ff fecf 	bl	800aa94 <__cvt>
 800acf6:	9b06      	ldr	r3, [sp, #24]
 800acf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acfa:	2b47      	cmp	r3, #71	; 0x47
 800acfc:	4680      	mov	r8, r0
 800acfe:	d108      	bne.n	800ad12 <_printf_float+0x13e>
 800ad00:	1cc8      	adds	r0, r1, #3
 800ad02:	db02      	blt.n	800ad0a <_printf_float+0x136>
 800ad04:	6863      	ldr	r3, [r4, #4]
 800ad06:	4299      	cmp	r1, r3
 800ad08:	dd41      	ble.n	800ad8e <_printf_float+0x1ba>
 800ad0a:	f1ab 0302 	sub.w	r3, fp, #2
 800ad0e:	fa5f fb83 	uxtb.w	fp, r3
 800ad12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad16:	d820      	bhi.n	800ad5a <_printf_float+0x186>
 800ad18:	3901      	subs	r1, #1
 800ad1a:	465a      	mov	r2, fp
 800ad1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad20:	9109      	str	r1, [sp, #36]	; 0x24
 800ad22:	f7ff ff19 	bl	800ab58 <__exponent>
 800ad26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad28:	1813      	adds	r3, r2, r0
 800ad2a:	2a01      	cmp	r2, #1
 800ad2c:	4681      	mov	r9, r0
 800ad2e:	6123      	str	r3, [r4, #16]
 800ad30:	dc02      	bgt.n	800ad38 <_printf_float+0x164>
 800ad32:	6822      	ldr	r2, [r4, #0]
 800ad34:	07d2      	lsls	r2, r2, #31
 800ad36:	d501      	bpl.n	800ad3c <_printf_float+0x168>
 800ad38:	3301      	adds	r3, #1
 800ad3a:	6123      	str	r3, [r4, #16]
 800ad3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d09c      	beq.n	800ac7e <_printf_float+0xaa>
 800ad44:	232d      	movs	r3, #45	; 0x2d
 800ad46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad4a:	e798      	b.n	800ac7e <_printf_float+0xaa>
 800ad4c:	9a06      	ldr	r2, [sp, #24]
 800ad4e:	2a47      	cmp	r2, #71	; 0x47
 800ad50:	d1be      	bne.n	800acd0 <_printf_float+0xfc>
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1bc      	bne.n	800acd0 <_printf_float+0xfc>
 800ad56:	2301      	movs	r3, #1
 800ad58:	e7b9      	b.n	800acce <_printf_float+0xfa>
 800ad5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ad5e:	d118      	bne.n	800ad92 <_printf_float+0x1be>
 800ad60:	2900      	cmp	r1, #0
 800ad62:	6863      	ldr	r3, [r4, #4]
 800ad64:	dd0b      	ble.n	800ad7e <_printf_float+0x1aa>
 800ad66:	6121      	str	r1, [r4, #16]
 800ad68:	b913      	cbnz	r3, 800ad70 <_printf_float+0x19c>
 800ad6a:	6822      	ldr	r2, [r4, #0]
 800ad6c:	07d0      	lsls	r0, r2, #31
 800ad6e:	d502      	bpl.n	800ad76 <_printf_float+0x1a2>
 800ad70:	3301      	adds	r3, #1
 800ad72:	440b      	add	r3, r1
 800ad74:	6123      	str	r3, [r4, #16]
 800ad76:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad78:	f04f 0900 	mov.w	r9, #0
 800ad7c:	e7de      	b.n	800ad3c <_printf_float+0x168>
 800ad7e:	b913      	cbnz	r3, 800ad86 <_printf_float+0x1b2>
 800ad80:	6822      	ldr	r2, [r4, #0]
 800ad82:	07d2      	lsls	r2, r2, #31
 800ad84:	d501      	bpl.n	800ad8a <_printf_float+0x1b6>
 800ad86:	3302      	adds	r3, #2
 800ad88:	e7f4      	b.n	800ad74 <_printf_float+0x1a0>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e7f2      	b.n	800ad74 <_printf_float+0x1a0>
 800ad8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ad92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad94:	4299      	cmp	r1, r3
 800ad96:	db05      	blt.n	800ada4 <_printf_float+0x1d0>
 800ad98:	6823      	ldr	r3, [r4, #0]
 800ad9a:	6121      	str	r1, [r4, #16]
 800ad9c:	07d8      	lsls	r0, r3, #31
 800ad9e:	d5ea      	bpl.n	800ad76 <_printf_float+0x1a2>
 800ada0:	1c4b      	adds	r3, r1, #1
 800ada2:	e7e7      	b.n	800ad74 <_printf_float+0x1a0>
 800ada4:	2900      	cmp	r1, #0
 800ada6:	bfd4      	ite	le
 800ada8:	f1c1 0202 	rsble	r2, r1, #2
 800adac:	2201      	movgt	r2, #1
 800adae:	4413      	add	r3, r2
 800adb0:	e7e0      	b.n	800ad74 <_printf_float+0x1a0>
 800adb2:	6823      	ldr	r3, [r4, #0]
 800adb4:	055a      	lsls	r2, r3, #21
 800adb6:	d407      	bmi.n	800adc8 <_printf_float+0x1f4>
 800adb8:	6923      	ldr	r3, [r4, #16]
 800adba:	4642      	mov	r2, r8
 800adbc:	4631      	mov	r1, r6
 800adbe:	4628      	mov	r0, r5
 800adc0:	47b8      	blx	r7
 800adc2:	3001      	adds	r0, #1
 800adc4:	d12c      	bne.n	800ae20 <_printf_float+0x24c>
 800adc6:	e764      	b.n	800ac92 <_printf_float+0xbe>
 800adc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800adcc:	f240 80e0 	bls.w	800af90 <_printf_float+0x3bc>
 800add0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800add4:	2200      	movs	r2, #0
 800add6:	2300      	movs	r3, #0
 800add8:	f7f5 fe96 	bl	8000b08 <__aeabi_dcmpeq>
 800addc:	2800      	cmp	r0, #0
 800adde:	d034      	beq.n	800ae4a <_printf_float+0x276>
 800ade0:	4a37      	ldr	r2, [pc, #220]	; (800aec0 <_printf_float+0x2ec>)
 800ade2:	2301      	movs	r3, #1
 800ade4:	4631      	mov	r1, r6
 800ade6:	4628      	mov	r0, r5
 800ade8:	47b8      	blx	r7
 800adea:	3001      	adds	r0, #1
 800adec:	f43f af51 	beq.w	800ac92 <_printf_float+0xbe>
 800adf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adf4:	429a      	cmp	r2, r3
 800adf6:	db02      	blt.n	800adfe <_printf_float+0x22a>
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	07d8      	lsls	r0, r3, #31
 800adfc:	d510      	bpl.n	800ae20 <_printf_float+0x24c>
 800adfe:	ee18 3a10 	vmov	r3, s16
 800ae02:	4652      	mov	r2, sl
 800ae04:	4631      	mov	r1, r6
 800ae06:	4628      	mov	r0, r5
 800ae08:	47b8      	blx	r7
 800ae0a:	3001      	adds	r0, #1
 800ae0c:	f43f af41 	beq.w	800ac92 <_printf_float+0xbe>
 800ae10:	f04f 0800 	mov.w	r8, #0
 800ae14:	f104 091a 	add.w	r9, r4, #26
 800ae18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	4543      	cmp	r3, r8
 800ae1e:	dc09      	bgt.n	800ae34 <_printf_float+0x260>
 800ae20:	6823      	ldr	r3, [r4, #0]
 800ae22:	079b      	lsls	r3, r3, #30
 800ae24:	f100 8107 	bmi.w	800b036 <_printf_float+0x462>
 800ae28:	68e0      	ldr	r0, [r4, #12]
 800ae2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae2c:	4298      	cmp	r0, r3
 800ae2e:	bfb8      	it	lt
 800ae30:	4618      	movlt	r0, r3
 800ae32:	e730      	b.n	800ac96 <_printf_float+0xc2>
 800ae34:	2301      	movs	r3, #1
 800ae36:	464a      	mov	r2, r9
 800ae38:	4631      	mov	r1, r6
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	47b8      	blx	r7
 800ae3e:	3001      	adds	r0, #1
 800ae40:	f43f af27 	beq.w	800ac92 <_printf_float+0xbe>
 800ae44:	f108 0801 	add.w	r8, r8, #1
 800ae48:	e7e6      	b.n	800ae18 <_printf_float+0x244>
 800ae4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	dc39      	bgt.n	800aec4 <_printf_float+0x2f0>
 800ae50:	4a1b      	ldr	r2, [pc, #108]	; (800aec0 <_printf_float+0x2ec>)
 800ae52:	2301      	movs	r3, #1
 800ae54:	4631      	mov	r1, r6
 800ae56:	4628      	mov	r0, r5
 800ae58:	47b8      	blx	r7
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	f43f af19 	beq.w	800ac92 <_printf_float+0xbe>
 800ae60:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ae64:	4313      	orrs	r3, r2
 800ae66:	d102      	bne.n	800ae6e <_printf_float+0x29a>
 800ae68:	6823      	ldr	r3, [r4, #0]
 800ae6a:	07d9      	lsls	r1, r3, #31
 800ae6c:	d5d8      	bpl.n	800ae20 <_printf_float+0x24c>
 800ae6e:	ee18 3a10 	vmov	r3, s16
 800ae72:	4652      	mov	r2, sl
 800ae74:	4631      	mov	r1, r6
 800ae76:	4628      	mov	r0, r5
 800ae78:	47b8      	blx	r7
 800ae7a:	3001      	adds	r0, #1
 800ae7c:	f43f af09 	beq.w	800ac92 <_printf_float+0xbe>
 800ae80:	f04f 0900 	mov.w	r9, #0
 800ae84:	f104 0a1a 	add.w	sl, r4, #26
 800ae88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae8a:	425b      	negs	r3, r3
 800ae8c:	454b      	cmp	r3, r9
 800ae8e:	dc01      	bgt.n	800ae94 <_printf_float+0x2c0>
 800ae90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae92:	e792      	b.n	800adba <_printf_float+0x1e6>
 800ae94:	2301      	movs	r3, #1
 800ae96:	4652      	mov	r2, sl
 800ae98:	4631      	mov	r1, r6
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	47b8      	blx	r7
 800ae9e:	3001      	adds	r0, #1
 800aea0:	f43f aef7 	beq.w	800ac92 <_printf_float+0xbe>
 800aea4:	f109 0901 	add.w	r9, r9, #1
 800aea8:	e7ee      	b.n	800ae88 <_printf_float+0x2b4>
 800aeaa:	bf00      	nop
 800aeac:	7fefffff 	.word	0x7fefffff
 800aeb0:	080dc594 	.word	0x080dc594
 800aeb4:	080dc598 	.word	0x080dc598
 800aeb8:	080dc59c 	.word	0x080dc59c
 800aebc:	080dc5a0 	.word	0x080dc5a0
 800aec0:	0800df91 	.word	0x0800df91
 800aec4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aec6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aec8:	429a      	cmp	r2, r3
 800aeca:	bfa8      	it	ge
 800aecc:	461a      	movge	r2, r3
 800aece:	2a00      	cmp	r2, #0
 800aed0:	4691      	mov	r9, r2
 800aed2:	dc37      	bgt.n	800af44 <_printf_float+0x370>
 800aed4:	f04f 0b00 	mov.w	fp, #0
 800aed8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aedc:	f104 021a 	add.w	r2, r4, #26
 800aee0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aee2:	9305      	str	r3, [sp, #20]
 800aee4:	eba3 0309 	sub.w	r3, r3, r9
 800aee8:	455b      	cmp	r3, fp
 800aeea:	dc33      	bgt.n	800af54 <_printf_float+0x380>
 800aeec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aef0:	429a      	cmp	r2, r3
 800aef2:	db3b      	blt.n	800af6c <_printf_float+0x398>
 800aef4:	6823      	ldr	r3, [r4, #0]
 800aef6:	07da      	lsls	r2, r3, #31
 800aef8:	d438      	bmi.n	800af6c <_printf_float+0x398>
 800aefa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aefe:	eba2 0903 	sub.w	r9, r2, r3
 800af02:	9b05      	ldr	r3, [sp, #20]
 800af04:	1ad2      	subs	r2, r2, r3
 800af06:	4591      	cmp	r9, r2
 800af08:	bfa8      	it	ge
 800af0a:	4691      	movge	r9, r2
 800af0c:	f1b9 0f00 	cmp.w	r9, #0
 800af10:	dc35      	bgt.n	800af7e <_printf_float+0x3aa>
 800af12:	f04f 0800 	mov.w	r8, #0
 800af16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af1a:	f104 0a1a 	add.w	sl, r4, #26
 800af1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af22:	1a9b      	subs	r3, r3, r2
 800af24:	eba3 0309 	sub.w	r3, r3, r9
 800af28:	4543      	cmp	r3, r8
 800af2a:	f77f af79 	ble.w	800ae20 <_printf_float+0x24c>
 800af2e:	2301      	movs	r3, #1
 800af30:	4652      	mov	r2, sl
 800af32:	4631      	mov	r1, r6
 800af34:	4628      	mov	r0, r5
 800af36:	47b8      	blx	r7
 800af38:	3001      	adds	r0, #1
 800af3a:	f43f aeaa 	beq.w	800ac92 <_printf_float+0xbe>
 800af3e:	f108 0801 	add.w	r8, r8, #1
 800af42:	e7ec      	b.n	800af1e <_printf_float+0x34a>
 800af44:	4613      	mov	r3, r2
 800af46:	4631      	mov	r1, r6
 800af48:	4642      	mov	r2, r8
 800af4a:	4628      	mov	r0, r5
 800af4c:	47b8      	blx	r7
 800af4e:	3001      	adds	r0, #1
 800af50:	d1c0      	bne.n	800aed4 <_printf_float+0x300>
 800af52:	e69e      	b.n	800ac92 <_printf_float+0xbe>
 800af54:	2301      	movs	r3, #1
 800af56:	4631      	mov	r1, r6
 800af58:	4628      	mov	r0, r5
 800af5a:	9205      	str	r2, [sp, #20]
 800af5c:	47b8      	blx	r7
 800af5e:	3001      	adds	r0, #1
 800af60:	f43f ae97 	beq.w	800ac92 <_printf_float+0xbe>
 800af64:	9a05      	ldr	r2, [sp, #20]
 800af66:	f10b 0b01 	add.w	fp, fp, #1
 800af6a:	e7b9      	b.n	800aee0 <_printf_float+0x30c>
 800af6c:	ee18 3a10 	vmov	r3, s16
 800af70:	4652      	mov	r2, sl
 800af72:	4631      	mov	r1, r6
 800af74:	4628      	mov	r0, r5
 800af76:	47b8      	blx	r7
 800af78:	3001      	adds	r0, #1
 800af7a:	d1be      	bne.n	800aefa <_printf_float+0x326>
 800af7c:	e689      	b.n	800ac92 <_printf_float+0xbe>
 800af7e:	9a05      	ldr	r2, [sp, #20]
 800af80:	464b      	mov	r3, r9
 800af82:	4442      	add	r2, r8
 800af84:	4631      	mov	r1, r6
 800af86:	4628      	mov	r0, r5
 800af88:	47b8      	blx	r7
 800af8a:	3001      	adds	r0, #1
 800af8c:	d1c1      	bne.n	800af12 <_printf_float+0x33e>
 800af8e:	e680      	b.n	800ac92 <_printf_float+0xbe>
 800af90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af92:	2a01      	cmp	r2, #1
 800af94:	dc01      	bgt.n	800af9a <_printf_float+0x3c6>
 800af96:	07db      	lsls	r3, r3, #31
 800af98:	d53a      	bpl.n	800b010 <_printf_float+0x43c>
 800af9a:	2301      	movs	r3, #1
 800af9c:	4642      	mov	r2, r8
 800af9e:	4631      	mov	r1, r6
 800afa0:	4628      	mov	r0, r5
 800afa2:	47b8      	blx	r7
 800afa4:	3001      	adds	r0, #1
 800afa6:	f43f ae74 	beq.w	800ac92 <_printf_float+0xbe>
 800afaa:	ee18 3a10 	vmov	r3, s16
 800afae:	4652      	mov	r2, sl
 800afb0:	4631      	mov	r1, r6
 800afb2:	4628      	mov	r0, r5
 800afb4:	47b8      	blx	r7
 800afb6:	3001      	adds	r0, #1
 800afb8:	f43f ae6b 	beq.w	800ac92 <_printf_float+0xbe>
 800afbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800afc0:	2200      	movs	r2, #0
 800afc2:	2300      	movs	r3, #0
 800afc4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800afc8:	f7f5 fd9e 	bl	8000b08 <__aeabi_dcmpeq>
 800afcc:	b9d8      	cbnz	r0, 800b006 <_printf_float+0x432>
 800afce:	f10a 33ff 	add.w	r3, sl, #4294967295
 800afd2:	f108 0201 	add.w	r2, r8, #1
 800afd6:	4631      	mov	r1, r6
 800afd8:	4628      	mov	r0, r5
 800afda:	47b8      	blx	r7
 800afdc:	3001      	adds	r0, #1
 800afde:	d10e      	bne.n	800affe <_printf_float+0x42a>
 800afe0:	e657      	b.n	800ac92 <_printf_float+0xbe>
 800afe2:	2301      	movs	r3, #1
 800afe4:	4652      	mov	r2, sl
 800afe6:	4631      	mov	r1, r6
 800afe8:	4628      	mov	r0, r5
 800afea:	47b8      	blx	r7
 800afec:	3001      	adds	r0, #1
 800afee:	f43f ae50 	beq.w	800ac92 <_printf_float+0xbe>
 800aff2:	f108 0801 	add.w	r8, r8, #1
 800aff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aff8:	3b01      	subs	r3, #1
 800affa:	4543      	cmp	r3, r8
 800affc:	dcf1      	bgt.n	800afe2 <_printf_float+0x40e>
 800affe:	464b      	mov	r3, r9
 800b000:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b004:	e6da      	b.n	800adbc <_printf_float+0x1e8>
 800b006:	f04f 0800 	mov.w	r8, #0
 800b00a:	f104 0a1a 	add.w	sl, r4, #26
 800b00e:	e7f2      	b.n	800aff6 <_printf_float+0x422>
 800b010:	2301      	movs	r3, #1
 800b012:	4642      	mov	r2, r8
 800b014:	e7df      	b.n	800afd6 <_printf_float+0x402>
 800b016:	2301      	movs	r3, #1
 800b018:	464a      	mov	r2, r9
 800b01a:	4631      	mov	r1, r6
 800b01c:	4628      	mov	r0, r5
 800b01e:	47b8      	blx	r7
 800b020:	3001      	adds	r0, #1
 800b022:	f43f ae36 	beq.w	800ac92 <_printf_float+0xbe>
 800b026:	f108 0801 	add.w	r8, r8, #1
 800b02a:	68e3      	ldr	r3, [r4, #12]
 800b02c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b02e:	1a5b      	subs	r3, r3, r1
 800b030:	4543      	cmp	r3, r8
 800b032:	dcf0      	bgt.n	800b016 <_printf_float+0x442>
 800b034:	e6f8      	b.n	800ae28 <_printf_float+0x254>
 800b036:	f04f 0800 	mov.w	r8, #0
 800b03a:	f104 0919 	add.w	r9, r4, #25
 800b03e:	e7f4      	b.n	800b02a <_printf_float+0x456>

0800b040 <_printf_common>:
 800b040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b044:	4616      	mov	r6, r2
 800b046:	4699      	mov	r9, r3
 800b048:	688a      	ldr	r2, [r1, #8]
 800b04a:	690b      	ldr	r3, [r1, #16]
 800b04c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b050:	4293      	cmp	r3, r2
 800b052:	bfb8      	it	lt
 800b054:	4613      	movlt	r3, r2
 800b056:	6033      	str	r3, [r6, #0]
 800b058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b05c:	4607      	mov	r7, r0
 800b05e:	460c      	mov	r4, r1
 800b060:	b10a      	cbz	r2, 800b066 <_printf_common+0x26>
 800b062:	3301      	adds	r3, #1
 800b064:	6033      	str	r3, [r6, #0]
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	0699      	lsls	r1, r3, #26
 800b06a:	bf42      	ittt	mi
 800b06c:	6833      	ldrmi	r3, [r6, #0]
 800b06e:	3302      	addmi	r3, #2
 800b070:	6033      	strmi	r3, [r6, #0]
 800b072:	6825      	ldr	r5, [r4, #0]
 800b074:	f015 0506 	ands.w	r5, r5, #6
 800b078:	d106      	bne.n	800b088 <_printf_common+0x48>
 800b07a:	f104 0a19 	add.w	sl, r4, #25
 800b07e:	68e3      	ldr	r3, [r4, #12]
 800b080:	6832      	ldr	r2, [r6, #0]
 800b082:	1a9b      	subs	r3, r3, r2
 800b084:	42ab      	cmp	r3, r5
 800b086:	dc26      	bgt.n	800b0d6 <_printf_common+0x96>
 800b088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b08c:	1e13      	subs	r3, r2, #0
 800b08e:	6822      	ldr	r2, [r4, #0]
 800b090:	bf18      	it	ne
 800b092:	2301      	movne	r3, #1
 800b094:	0692      	lsls	r2, r2, #26
 800b096:	d42b      	bmi.n	800b0f0 <_printf_common+0xb0>
 800b098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b09c:	4649      	mov	r1, r9
 800b09e:	4638      	mov	r0, r7
 800b0a0:	47c0      	blx	r8
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	d01e      	beq.n	800b0e4 <_printf_common+0xa4>
 800b0a6:	6823      	ldr	r3, [r4, #0]
 800b0a8:	6922      	ldr	r2, [r4, #16]
 800b0aa:	f003 0306 	and.w	r3, r3, #6
 800b0ae:	2b04      	cmp	r3, #4
 800b0b0:	bf02      	ittt	eq
 800b0b2:	68e5      	ldreq	r5, [r4, #12]
 800b0b4:	6833      	ldreq	r3, [r6, #0]
 800b0b6:	1aed      	subeq	r5, r5, r3
 800b0b8:	68a3      	ldr	r3, [r4, #8]
 800b0ba:	bf0c      	ite	eq
 800b0bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0c0:	2500      	movne	r5, #0
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	bfc4      	itt	gt
 800b0c6:	1a9b      	subgt	r3, r3, r2
 800b0c8:	18ed      	addgt	r5, r5, r3
 800b0ca:	2600      	movs	r6, #0
 800b0cc:	341a      	adds	r4, #26
 800b0ce:	42b5      	cmp	r5, r6
 800b0d0:	d11a      	bne.n	800b108 <_printf_common+0xc8>
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	e008      	b.n	800b0e8 <_printf_common+0xa8>
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	4652      	mov	r2, sl
 800b0da:	4649      	mov	r1, r9
 800b0dc:	4638      	mov	r0, r7
 800b0de:	47c0      	blx	r8
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	d103      	bne.n	800b0ec <_printf_common+0xac>
 800b0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ec:	3501      	adds	r5, #1
 800b0ee:	e7c6      	b.n	800b07e <_printf_common+0x3e>
 800b0f0:	18e1      	adds	r1, r4, r3
 800b0f2:	1c5a      	adds	r2, r3, #1
 800b0f4:	2030      	movs	r0, #48	; 0x30
 800b0f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0fa:	4422      	add	r2, r4
 800b0fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b104:	3302      	adds	r3, #2
 800b106:	e7c7      	b.n	800b098 <_printf_common+0x58>
 800b108:	2301      	movs	r3, #1
 800b10a:	4622      	mov	r2, r4
 800b10c:	4649      	mov	r1, r9
 800b10e:	4638      	mov	r0, r7
 800b110:	47c0      	blx	r8
 800b112:	3001      	adds	r0, #1
 800b114:	d0e6      	beq.n	800b0e4 <_printf_common+0xa4>
 800b116:	3601      	adds	r6, #1
 800b118:	e7d9      	b.n	800b0ce <_printf_common+0x8e>
	...

0800b11c <_printf_i>:
 800b11c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b120:	7e0f      	ldrb	r7, [r1, #24]
 800b122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b124:	2f78      	cmp	r7, #120	; 0x78
 800b126:	4691      	mov	r9, r2
 800b128:	4680      	mov	r8, r0
 800b12a:	460c      	mov	r4, r1
 800b12c:	469a      	mov	sl, r3
 800b12e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b132:	d807      	bhi.n	800b144 <_printf_i+0x28>
 800b134:	2f62      	cmp	r7, #98	; 0x62
 800b136:	d80a      	bhi.n	800b14e <_printf_i+0x32>
 800b138:	2f00      	cmp	r7, #0
 800b13a:	f000 80d4 	beq.w	800b2e6 <_printf_i+0x1ca>
 800b13e:	2f58      	cmp	r7, #88	; 0x58
 800b140:	f000 80c0 	beq.w	800b2c4 <_printf_i+0x1a8>
 800b144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b14c:	e03a      	b.n	800b1c4 <_printf_i+0xa8>
 800b14e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b152:	2b15      	cmp	r3, #21
 800b154:	d8f6      	bhi.n	800b144 <_printf_i+0x28>
 800b156:	a101      	add	r1, pc, #4	; (adr r1, 800b15c <_printf_i+0x40>)
 800b158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b15c:	0800b1b5 	.word	0x0800b1b5
 800b160:	0800b1c9 	.word	0x0800b1c9
 800b164:	0800b145 	.word	0x0800b145
 800b168:	0800b145 	.word	0x0800b145
 800b16c:	0800b145 	.word	0x0800b145
 800b170:	0800b145 	.word	0x0800b145
 800b174:	0800b1c9 	.word	0x0800b1c9
 800b178:	0800b145 	.word	0x0800b145
 800b17c:	0800b145 	.word	0x0800b145
 800b180:	0800b145 	.word	0x0800b145
 800b184:	0800b145 	.word	0x0800b145
 800b188:	0800b2cd 	.word	0x0800b2cd
 800b18c:	0800b1f5 	.word	0x0800b1f5
 800b190:	0800b287 	.word	0x0800b287
 800b194:	0800b145 	.word	0x0800b145
 800b198:	0800b145 	.word	0x0800b145
 800b19c:	0800b2ef 	.word	0x0800b2ef
 800b1a0:	0800b145 	.word	0x0800b145
 800b1a4:	0800b1f5 	.word	0x0800b1f5
 800b1a8:	0800b145 	.word	0x0800b145
 800b1ac:	0800b145 	.word	0x0800b145
 800b1b0:	0800b28f 	.word	0x0800b28f
 800b1b4:	682b      	ldr	r3, [r5, #0]
 800b1b6:	1d1a      	adds	r2, r3, #4
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	602a      	str	r2, [r5, #0]
 800b1bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e09f      	b.n	800b308 <_printf_i+0x1ec>
 800b1c8:	6820      	ldr	r0, [r4, #0]
 800b1ca:	682b      	ldr	r3, [r5, #0]
 800b1cc:	0607      	lsls	r7, r0, #24
 800b1ce:	f103 0104 	add.w	r1, r3, #4
 800b1d2:	6029      	str	r1, [r5, #0]
 800b1d4:	d501      	bpl.n	800b1da <_printf_i+0xbe>
 800b1d6:	681e      	ldr	r6, [r3, #0]
 800b1d8:	e003      	b.n	800b1e2 <_printf_i+0xc6>
 800b1da:	0646      	lsls	r6, r0, #25
 800b1dc:	d5fb      	bpl.n	800b1d6 <_printf_i+0xba>
 800b1de:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b1e2:	2e00      	cmp	r6, #0
 800b1e4:	da03      	bge.n	800b1ee <_printf_i+0xd2>
 800b1e6:	232d      	movs	r3, #45	; 0x2d
 800b1e8:	4276      	negs	r6, r6
 800b1ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1ee:	485a      	ldr	r0, [pc, #360]	; (800b358 <_printf_i+0x23c>)
 800b1f0:	230a      	movs	r3, #10
 800b1f2:	e012      	b.n	800b21a <_printf_i+0xfe>
 800b1f4:	682b      	ldr	r3, [r5, #0]
 800b1f6:	6820      	ldr	r0, [r4, #0]
 800b1f8:	1d19      	adds	r1, r3, #4
 800b1fa:	6029      	str	r1, [r5, #0]
 800b1fc:	0605      	lsls	r5, r0, #24
 800b1fe:	d501      	bpl.n	800b204 <_printf_i+0xe8>
 800b200:	681e      	ldr	r6, [r3, #0]
 800b202:	e002      	b.n	800b20a <_printf_i+0xee>
 800b204:	0641      	lsls	r1, r0, #25
 800b206:	d5fb      	bpl.n	800b200 <_printf_i+0xe4>
 800b208:	881e      	ldrh	r6, [r3, #0]
 800b20a:	4853      	ldr	r0, [pc, #332]	; (800b358 <_printf_i+0x23c>)
 800b20c:	2f6f      	cmp	r7, #111	; 0x6f
 800b20e:	bf0c      	ite	eq
 800b210:	2308      	moveq	r3, #8
 800b212:	230a      	movne	r3, #10
 800b214:	2100      	movs	r1, #0
 800b216:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b21a:	6865      	ldr	r5, [r4, #4]
 800b21c:	60a5      	str	r5, [r4, #8]
 800b21e:	2d00      	cmp	r5, #0
 800b220:	bfa2      	ittt	ge
 800b222:	6821      	ldrge	r1, [r4, #0]
 800b224:	f021 0104 	bicge.w	r1, r1, #4
 800b228:	6021      	strge	r1, [r4, #0]
 800b22a:	b90e      	cbnz	r6, 800b230 <_printf_i+0x114>
 800b22c:	2d00      	cmp	r5, #0
 800b22e:	d04b      	beq.n	800b2c8 <_printf_i+0x1ac>
 800b230:	4615      	mov	r5, r2
 800b232:	fbb6 f1f3 	udiv	r1, r6, r3
 800b236:	fb03 6711 	mls	r7, r3, r1, r6
 800b23a:	5dc7      	ldrb	r7, [r0, r7]
 800b23c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b240:	4637      	mov	r7, r6
 800b242:	42bb      	cmp	r3, r7
 800b244:	460e      	mov	r6, r1
 800b246:	d9f4      	bls.n	800b232 <_printf_i+0x116>
 800b248:	2b08      	cmp	r3, #8
 800b24a:	d10b      	bne.n	800b264 <_printf_i+0x148>
 800b24c:	6823      	ldr	r3, [r4, #0]
 800b24e:	07de      	lsls	r6, r3, #31
 800b250:	d508      	bpl.n	800b264 <_printf_i+0x148>
 800b252:	6923      	ldr	r3, [r4, #16]
 800b254:	6861      	ldr	r1, [r4, #4]
 800b256:	4299      	cmp	r1, r3
 800b258:	bfde      	ittt	le
 800b25a:	2330      	movle	r3, #48	; 0x30
 800b25c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b260:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b264:	1b52      	subs	r2, r2, r5
 800b266:	6122      	str	r2, [r4, #16]
 800b268:	f8cd a000 	str.w	sl, [sp]
 800b26c:	464b      	mov	r3, r9
 800b26e:	aa03      	add	r2, sp, #12
 800b270:	4621      	mov	r1, r4
 800b272:	4640      	mov	r0, r8
 800b274:	f7ff fee4 	bl	800b040 <_printf_common>
 800b278:	3001      	adds	r0, #1
 800b27a:	d14a      	bne.n	800b312 <_printf_i+0x1f6>
 800b27c:	f04f 30ff 	mov.w	r0, #4294967295
 800b280:	b004      	add	sp, #16
 800b282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b286:	6823      	ldr	r3, [r4, #0]
 800b288:	f043 0320 	orr.w	r3, r3, #32
 800b28c:	6023      	str	r3, [r4, #0]
 800b28e:	4833      	ldr	r0, [pc, #204]	; (800b35c <_printf_i+0x240>)
 800b290:	2778      	movs	r7, #120	; 0x78
 800b292:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b296:	6823      	ldr	r3, [r4, #0]
 800b298:	6829      	ldr	r1, [r5, #0]
 800b29a:	061f      	lsls	r7, r3, #24
 800b29c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2a0:	d402      	bmi.n	800b2a8 <_printf_i+0x18c>
 800b2a2:	065f      	lsls	r7, r3, #25
 800b2a4:	bf48      	it	mi
 800b2a6:	b2b6      	uxthmi	r6, r6
 800b2a8:	07df      	lsls	r7, r3, #31
 800b2aa:	bf48      	it	mi
 800b2ac:	f043 0320 	orrmi.w	r3, r3, #32
 800b2b0:	6029      	str	r1, [r5, #0]
 800b2b2:	bf48      	it	mi
 800b2b4:	6023      	strmi	r3, [r4, #0]
 800b2b6:	b91e      	cbnz	r6, 800b2c0 <_printf_i+0x1a4>
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	f023 0320 	bic.w	r3, r3, #32
 800b2be:	6023      	str	r3, [r4, #0]
 800b2c0:	2310      	movs	r3, #16
 800b2c2:	e7a7      	b.n	800b214 <_printf_i+0xf8>
 800b2c4:	4824      	ldr	r0, [pc, #144]	; (800b358 <_printf_i+0x23c>)
 800b2c6:	e7e4      	b.n	800b292 <_printf_i+0x176>
 800b2c8:	4615      	mov	r5, r2
 800b2ca:	e7bd      	b.n	800b248 <_printf_i+0x12c>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	6826      	ldr	r6, [r4, #0]
 800b2d0:	6961      	ldr	r1, [r4, #20]
 800b2d2:	1d18      	adds	r0, r3, #4
 800b2d4:	6028      	str	r0, [r5, #0]
 800b2d6:	0635      	lsls	r5, r6, #24
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	d501      	bpl.n	800b2e0 <_printf_i+0x1c4>
 800b2dc:	6019      	str	r1, [r3, #0]
 800b2de:	e002      	b.n	800b2e6 <_printf_i+0x1ca>
 800b2e0:	0670      	lsls	r0, r6, #25
 800b2e2:	d5fb      	bpl.n	800b2dc <_printf_i+0x1c0>
 800b2e4:	8019      	strh	r1, [r3, #0]
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	6123      	str	r3, [r4, #16]
 800b2ea:	4615      	mov	r5, r2
 800b2ec:	e7bc      	b.n	800b268 <_printf_i+0x14c>
 800b2ee:	682b      	ldr	r3, [r5, #0]
 800b2f0:	1d1a      	adds	r2, r3, #4
 800b2f2:	602a      	str	r2, [r5, #0]
 800b2f4:	681d      	ldr	r5, [r3, #0]
 800b2f6:	6862      	ldr	r2, [r4, #4]
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	f7f4 ff88 	bl	8000210 <memchr>
 800b300:	b108      	cbz	r0, 800b306 <_printf_i+0x1ea>
 800b302:	1b40      	subs	r0, r0, r5
 800b304:	6060      	str	r0, [r4, #4]
 800b306:	6863      	ldr	r3, [r4, #4]
 800b308:	6123      	str	r3, [r4, #16]
 800b30a:	2300      	movs	r3, #0
 800b30c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b310:	e7aa      	b.n	800b268 <_printf_i+0x14c>
 800b312:	6923      	ldr	r3, [r4, #16]
 800b314:	462a      	mov	r2, r5
 800b316:	4649      	mov	r1, r9
 800b318:	4640      	mov	r0, r8
 800b31a:	47d0      	blx	sl
 800b31c:	3001      	adds	r0, #1
 800b31e:	d0ad      	beq.n	800b27c <_printf_i+0x160>
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	079b      	lsls	r3, r3, #30
 800b324:	d413      	bmi.n	800b34e <_printf_i+0x232>
 800b326:	68e0      	ldr	r0, [r4, #12]
 800b328:	9b03      	ldr	r3, [sp, #12]
 800b32a:	4298      	cmp	r0, r3
 800b32c:	bfb8      	it	lt
 800b32e:	4618      	movlt	r0, r3
 800b330:	e7a6      	b.n	800b280 <_printf_i+0x164>
 800b332:	2301      	movs	r3, #1
 800b334:	4632      	mov	r2, r6
 800b336:	4649      	mov	r1, r9
 800b338:	4640      	mov	r0, r8
 800b33a:	47d0      	blx	sl
 800b33c:	3001      	adds	r0, #1
 800b33e:	d09d      	beq.n	800b27c <_printf_i+0x160>
 800b340:	3501      	adds	r5, #1
 800b342:	68e3      	ldr	r3, [r4, #12]
 800b344:	9903      	ldr	r1, [sp, #12]
 800b346:	1a5b      	subs	r3, r3, r1
 800b348:	42ab      	cmp	r3, r5
 800b34a:	dcf2      	bgt.n	800b332 <_printf_i+0x216>
 800b34c:	e7eb      	b.n	800b326 <_printf_i+0x20a>
 800b34e:	2500      	movs	r5, #0
 800b350:	f104 0619 	add.w	r6, r4, #25
 800b354:	e7f5      	b.n	800b342 <_printf_i+0x226>
 800b356:	bf00      	nop
 800b358:	080dc5a4 	.word	0x080dc5a4
 800b35c:	080dc5b5 	.word	0x080dc5b5

0800b360 <std>:
 800b360:	2300      	movs	r3, #0
 800b362:	b510      	push	{r4, lr}
 800b364:	4604      	mov	r4, r0
 800b366:	e9c0 3300 	strd	r3, r3, [r0]
 800b36a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b36e:	6083      	str	r3, [r0, #8]
 800b370:	8181      	strh	r1, [r0, #12]
 800b372:	6643      	str	r3, [r0, #100]	; 0x64
 800b374:	81c2      	strh	r2, [r0, #14]
 800b376:	6183      	str	r3, [r0, #24]
 800b378:	4619      	mov	r1, r3
 800b37a:	2208      	movs	r2, #8
 800b37c:	305c      	adds	r0, #92	; 0x5c
 800b37e:	f000 f8f4 	bl	800b56a <memset>
 800b382:	4b0d      	ldr	r3, [pc, #52]	; (800b3b8 <std+0x58>)
 800b384:	6263      	str	r3, [r4, #36]	; 0x24
 800b386:	4b0d      	ldr	r3, [pc, #52]	; (800b3bc <std+0x5c>)
 800b388:	62a3      	str	r3, [r4, #40]	; 0x28
 800b38a:	4b0d      	ldr	r3, [pc, #52]	; (800b3c0 <std+0x60>)
 800b38c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b38e:	4b0d      	ldr	r3, [pc, #52]	; (800b3c4 <std+0x64>)
 800b390:	6323      	str	r3, [r4, #48]	; 0x30
 800b392:	4b0d      	ldr	r3, [pc, #52]	; (800b3c8 <std+0x68>)
 800b394:	6224      	str	r4, [r4, #32]
 800b396:	429c      	cmp	r4, r3
 800b398:	d006      	beq.n	800b3a8 <std+0x48>
 800b39a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b39e:	4294      	cmp	r4, r2
 800b3a0:	d002      	beq.n	800b3a8 <std+0x48>
 800b3a2:	33d0      	adds	r3, #208	; 0xd0
 800b3a4:	429c      	cmp	r4, r3
 800b3a6:	d105      	bne.n	800b3b4 <std+0x54>
 800b3a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3b0:	f000 b97a 	b.w	800b6a8 <__retarget_lock_init_recursive>
 800b3b4:	bd10      	pop	{r4, pc}
 800b3b6:	bf00      	nop
 800b3b8:	0800b4e5 	.word	0x0800b4e5
 800b3bc:	0800b507 	.word	0x0800b507
 800b3c0:	0800b53f 	.word	0x0800b53f
 800b3c4:	0800b563 	.word	0x0800b563
 800b3c8:	2002aa78 	.word	0x2002aa78

0800b3cc <stdio_exit_handler>:
 800b3cc:	4a02      	ldr	r2, [pc, #8]	; (800b3d8 <stdio_exit_handler+0xc>)
 800b3ce:	4903      	ldr	r1, [pc, #12]	; (800b3dc <stdio_exit_handler+0x10>)
 800b3d0:	4803      	ldr	r0, [pc, #12]	; (800b3e0 <stdio_exit_handler+0x14>)
 800b3d2:	f000 b869 	b.w	800b4a8 <_fwalk_sglue>
 800b3d6:	bf00      	nop
 800b3d8:	200041ac 	.word	0x200041ac
 800b3dc:	0800cc61 	.word	0x0800cc61
 800b3e0:	200041b8 	.word	0x200041b8

0800b3e4 <cleanup_stdio>:
 800b3e4:	6841      	ldr	r1, [r0, #4]
 800b3e6:	4b0c      	ldr	r3, [pc, #48]	; (800b418 <cleanup_stdio+0x34>)
 800b3e8:	4299      	cmp	r1, r3
 800b3ea:	b510      	push	{r4, lr}
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	d001      	beq.n	800b3f4 <cleanup_stdio+0x10>
 800b3f0:	f001 fc36 	bl	800cc60 <_fflush_r>
 800b3f4:	68a1      	ldr	r1, [r4, #8]
 800b3f6:	4b09      	ldr	r3, [pc, #36]	; (800b41c <cleanup_stdio+0x38>)
 800b3f8:	4299      	cmp	r1, r3
 800b3fa:	d002      	beq.n	800b402 <cleanup_stdio+0x1e>
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	f001 fc2f 	bl	800cc60 <_fflush_r>
 800b402:	68e1      	ldr	r1, [r4, #12]
 800b404:	4b06      	ldr	r3, [pc, #24]	; (800b420 <cleanup_stdio+0x3c>)
 800b406:	4299      	cmp	r1, r3
 800b408:	d004      	beq.n	800b414 <cleanup_stdio+0x30>
 800b40a:	4620      	mov	r0, r4
 800b40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b410:	f001 bc26 	b.w	800cc60 <_fflush_r>
 800b414:	bd10      	pop	{r4, pc}
 800b416:	bf00      	nop
 800b418:	2002aa78 	.word	0x2002aa78
 800b41c:	2002aae0 	.word	0x2002aae0
 800b420:	2002ab48 	.word	0x2002ab48

0800b424 <global_stdio_init.part.0>:
 800b424:	b510      	push	{r4, lr}
 800b426:	4b0b      	ldr	r3, [pc, #44]	; (800b454 <global_stdio_init.part.0+0x30>)
 800b428:	4c0b      	ldr	r4, [pc, #44]	; (800b458 <global_stdio_init.part.0+0x34>)
 800b42a:	4a0c      	ldr	r2, [pc, #48]	; (800b45c <global_stdio_init.part.0+0x38>)
 800b42c:	601a      	str	r2, [r3, #0]
 800b42e:	4620      	mov	r0, r4
 800b430:	2200      	movs	r2, #0
 800b432:	2104      	movs	r1, #4
 800b434:	f7ff ff94 	bl	800b360 <std>
 800b438:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b43c:	2201      	movs	r2, #1
 800b43e:	2109      	movs	r1, #9
 800b440:	f7ff ff8e 	bl	800b360 <std>
 800b444:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b448:	2202      	movs	r2, #2
 800b44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b44e:	2112      	movs	r1, #18
 800b450:	f7ff bf86 	b.w	800b360 <std>
 800b454:	2002abb0 	.word	0x2002abb0
 800b458:	2002aa78 	.word	0x2002aa78
 800b45c:	0800b3cd 	.word	0x0800b3cd

0800b460 <__sfp_lock_acquire>:
 800b460:	4801      	ldr	r0, [pc, #4]	; (800b468 <__sfp_lock_acquire+0x8>)
 800b462:	f000 b922 	b.w	800b6aa <__retarget_lock_acquire_recursive>
 800b466:	bf00      	nop
 800b468:	2002abb9 	.word	0x2002abb9

0800b46c <__sfp_lock_release>:
 800b46c:	4801      	ldr	r0, [pc, #4]	; (800b474 <__sfp_lock_release+0x8>)
 800b46e:	f000 b91d 	b.w	800b6ac <__retarget_lock_release_recursive>
 800b472:	bf00      	nop
 800b474:	2002abb9 	.word	0x2002abb9

0800b478 <__sinit>:
 800b478:	b510      	push	{r4, lr}
 800b47a:	4604      	mov	r4, r0
 800b47c:	f7ff fff0 	bl	800b460 <__sfp_lock_acquire>
 800b480:	6a23      	ldr	r3, [r4, #32]
 800b482:	b11b      	cbz	r3, 800b48c <__sinit+0x14>
 800b484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b488:	f7ff bff0 	b.w	800b46c <__sfp_lock_release>
 800b48c:	4b04      	ldr	r3, [pc, #16]	; (800b4a0 <__sinit+0x28>)
 800b48e:	6223      	str	r3, [r4, #32]
 800b490:	4b04      	ldr	r3, [pc, #16]	; (800b4a4 <__sinit+0x2c>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1f5      	bne.n	800b484 <__sinit+0xc>
 800b498:	f7ff ffc4 	bl	800b424 <global_stdio_init.part.0>
 800b49c:	e7f2      	b.n	800b484 <__sinit+0xc>
 800b49e:	bf00      	nop
 800b4a0:	0800b3e5 	.word	0x0800b3e5
 800b4a4:	2002abb0 	.word	0x2002abb0

0800b4a8 <_fwalk_sglue>:
 800b4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4ac:	4607      	mov	r7, r0
 800b4ae:	4688      	mov	r8, r1
 800b4b0:	4614      	mov	r4, r2
 800b4b2:	2600      	movs	r6, #0
 800b4b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4b8:	f1b9 0901 	subs.w	r9, r9, #1
 800b4bc:	d505      	bpl.n	800b4ca <_fwalk_sglue+0x22>
 800b4be:	6824      	ldr	r4, [r4, #0]
 800b4c0:	2c00      	cmp	r4, #0
 800b4c2:	d1f7      	bne.n	800b4b4 <_fwalk_sglue+0xc>
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ca:	89ab      	ldrh	r3, [r5, #12]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d907      	bls.n	800b4e0 <_fwalk_sglue+0x38>
 800b4d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	d003      	beq.n	800b4e0 <_fwalk_sglue+0x38>
 800b4d8:	4629      	mov	r1, r5
 800b4da:	4638      	mov	r0, r7
 800b4dc:	47c0      	blx	r8
 800b4de:	4306      	orrs	r6, r0
 800b4e0:	3568      	adds	r5, #104	; 0x68
 800b4e2:	e7e9      	b.n	800b4b8 <_fwalk_sglue+0x10>

0800b4e4 <__sread>:
 800b4e4:	b510      	push	{r4, lr}
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ec:	f000 f87e 	bl	800b5ec <_read_r>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	bfab      	itete	ge
 800b4f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b4f8:	181b      	addge	r3, r3, r0
 800b4fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4fe:	bfac      	ite	ge
 800b500:	6563      	strge	r3, [r4, #84]	; 0x54
 800b502:	81a3      	strhlt	r3, [r4, #12]
 800b504:	bd10      	pop	{r4, pc}

0800b506 <__swrite>:
 800b506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b50a:	461f      	mov	r7, r3
 800b50c:	898b      	ldrh	r3, [r1, #12]
 800b50e:	05db      	lsls	r3, r3, #23
 800b510:	4605      	mov	r5, r0
 800b512:	460c      	mov	r4, r1
 800b514:	4616      	mov	r6, r2
 800b516:	d505      	bpl.n	800b524 <__swrite+0x1e>
 800b518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b51c:	2302      	movs	r3, #2
 800b51e:	2200      	movs	r2, #0
 800b520:	f000 f852 	bl	800b5c8 <_lseek_r>
 800b524:	89a3      	ldrh	r3, [r4, #12]
 800b526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b52a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b52e:	81a3      	strh	r3, [r4, #12]
 800b530:	4632      	mov	r2, r6
 800b532:	463b      	mov	r3, r7
 800b534:	4628      	mov	r0, r5
 800b536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b53a:	f000 b879 	b.w	800b630 <_write_r>

0800b53e <__sseek>:
 800b53e:	b510      	push	{r4, lr}
 800b540:	460c      	mov	r4, r1
 800b542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b546:	f000 f83f 	bl	800b5c8 <_lseek_r>
 800b54a:	1c43      	adds	r3, r0, #1
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	bf15      	itete	ne
 800b550:	6560      	strne	r0, [r4, #84]	; 0x54
 800b552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b55a:	81a3      	strheq	r3, [r4, #12]
 800b55c:	bf18      	it	ne
 800b55e:	81a3      	strhne	r3, [r4, #12]
 800b560:	bd10      	pop	{r4, pc}

0800b562 <__sclose>:
 800b562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b566:	f000 b81f 	b.w	800b5a8 <_close_r>

0800b56a <memset>:
 800b56a:	4402      	add	r2, r0
 800b56c:	4603      	mov	r3, r0
 800b56e:	4293      	cmp	r3, r2
 800b570:	d100      	bne.n	800b574 <memset+0xa>
 800b572:	4770      	bx	lr
 800b574:	f803 1b01 	strb.w	r1, [r3], #1
 800b578:	e7f9      	b.n	800b56e <memset+0x4>

0800b57a <strncmp>:
 800b57a:	b510      	push	{r4, lr}
 800b57c:	b16a      	cbz	r2, 800b59a <strncmp+0x20>
 800b57e:	3901      	subs	r1, #1
 800b580:	1884      	adds	r4, r0, r2
 800b582:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b586:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d103      	bne.n	800b596 <strncmp+0x1c>
 800b58e:	42a0      	cmp	r0, r4
 800b590:	d001      	beq.n	800b596 <strncmp+0x1c>
 800b592:	2a00      	cmp	r2, #0
 800b594:	d1f5      	bne.n	800b582 <strncmp+0x8>
 800b596:	1ad0      	subs	r0, r2, r3
 800b598:	bd10      	pop	{r4, pc}
 800b59a:	4610      	mov	r0, r2
 800b59c:	e7fc      	b.n	800b598 <strncmp+0x1e>
	...

0800b5a0 <_localeconv_r>:
 800b5a0:	4800      	ldr	r0, [pc, #0]	; (800b5a4 <_localeconv_r+0x4>)
 800b5a2:	4770      	bx	lr
 800b5a4:	200042f8 	.word	0x200042f8

0800b5a8 <_close_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d06      	ldr	r5, [pc, #24]	; (800b5c4 <_close_r+0x1c>)
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	602b      	str	r3, [r5, #0]
 800b5b4:	f001 ffbe 	bl	800d534 <_close>
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d102      	bne.n	800b5c2 <_close_r+0x1a>
 800b5bc:	682b      	ldr	r3, [r5, #0]
 800b5be:	b103      	cbz	r3, 800b5c2 <_close_r+0x1a>
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	2002abb4 	.word	0x2002abb4

0800b5c8 <_lseek_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4d07      	ldr	r5, [pc, #28]	; (800b5e8 <_lseek_r+0x20>)
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	4608      	mov	r0, r1
 800b5d0:	4611      	mov	r1, r2
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	602a      	str	r2, [r5, #0]
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	f001 ffd4 	bl	800d584 <_lseek>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	d102      	bne.n	800b5e6 <_lseek_r+0x1e>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	b103      	cbz	r3, 800b5e6 <_lseek_r+0x1e>
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	2002abb4 	.word	0x2002abb4

0800b5ec <_read_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	4d07      	ldr	r5, [pc, #28]	; (800b60c <_read_r+0x20>)
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	4608      	mov	r0, r1
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	602a      	str	r2, [r5, #0]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	f001 ffca 	bl	800d594 <_read>
 800b600:	1c43      	adds	r3, r0, #1
 800b602:	d102      	bne.n	800b60a <_read_r+0x1e>
 800b604:	682b      	ldr	r3, [r5, #0]
 800b606:	b103      	cbz	r3, 800b60a <_read_r+0x1e>
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
 800b60c:	2002abb4 	.word	0x2002abb4

0800b610 <_sbrk_r>:
 800b610:	b538      	push	{r3, r4, r5, lr}
 800b612:	4d06      	ldr	r5, [pc, #24]	; (800b62c <_sbrk_r+0x1c>)
 800b614:	2300      	movs	r3, #0
 800b616:	4604      	mov	r4, r0
 800b618:	4608      	mov	r0, r1
 800b61a:	602b      	str	r3, [r5, #0]
 800b61c:	f7f6 f8fe 	bl	800181c <_sbrk>
 800b620:	1c43      	adds	r3, r0, #1
 800b622:	d102      	bne.n	800b62a <_sbrk_r+0x1a>
 800b624:	682b      	ldr	r3, [r5, #0]
 800b626:	b103      	cbz	r3, 800b62a <_sbrk_r+0x1a>
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	2002abb4 	.word	0x2002abb4

0800b630 <_write_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	4d07      	ldr	r5, [pc, #28]	; (800b650 <_write_r+0x20>)
 800b634:	4604      	mov	r4, r0
 800b636:	4608      	mov	r0, r1
 800b638:	4611      	mov	r1, r2
 800b63a:	2200      	movs	r2, #0
 800b63c:	602a      	str	r2, [r5, #0]
 800b63e:	461a      	mov	r2, r3
 800b640:	f7f8 febe 	bl	80043c0 <_write>
 800b644:	1c43      	adds	r3, r0, #1
 800b646:	d102      	bne.n	800b64e <_write_r+0x1e>
 800b648:	682b      	ldr	r3, [r5, #0]
 800b64a:	b103      	cbz	r3, 800b64e <_write_r+0x1e>
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
 800b650:	2002abb4 	.word	0x2002abb4

0800b654 <__errno>:
 800b654:	4b01      	ldr	r3, [pc, #4]	; (800b65c <__errno+0x8>)
 800b656:	6818      	ldr	r0, [r3, #0]
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	20004204 	.word	0x20004204

0800b660 <__libc_init_array>:
 800b660:	b570      	push	{r4, r5, r6, lr}
 800b662:	4d0d      	ldr	r5, [pc, #52]	; (800b698 <__libc_init_array+0x38>)
 800b664:	4c0d      	ldr	r4, [pc, #52]	; (800b69c <__libc_init_array+0x3c>)
 800b666:	1b64      	subs	r4, r4, r5
 800b668:	10a4      	asrs	r4, r4, #2
 800b66a:	2600      	movs	r6, #0
 800b66c:	42a6      	cmp	r6, r4
 800b66e:	d109      	bne.n	800b684 <__libc_init_array+0x24>
 800b670:	4d0b      	ldr	r5, [pc, #44]	; (800b6a0 <__libc_init_array+0x40>)
 800b672:	4c0c      	ldr	r4, [pc, #48]	; (800b6a4 <__libc_init_array+0x44>)
 800b674:	f001 ff98 	bl	800d5a8 <_init>
 800b678:	1b64      	subs	r4, r4, r5
 800b67a:	10a4      	asrs	r4, r4, #2
 800b67c:	2600      	movs	r6, #0
 800b67e:	42a6      	cmp	r6, r4
 800b680:	d105      	bne.n	800b68e <__libc_init_array+0x2e>
 800b682:	bd70      	pop	{r4, r5, r6, pc}
 800b684:	f855 3b04 	ldr.w	r3, [r5], #4
 800b688:	4798      	blx	r3
 800b68a:	3601      	adds	r6, #1
 800b68c:	e7ee      	b.n	800b66c <__libc_init_array+0xc>
 800b68e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b692:	4798      	blx	r3
 800b694:	3601      	adds	r6, #1
 800b696:	e7f2      	b.n	800b67e <__libc_init_array+0x1e>
 800b698:	080dc924 	.word	0x080dc924
 800b69c:	080dc924 	.word	0x080dc924
 800b6a0:	080dc924 	.word	0x080dc924
 800b6a4:	080dc928 	.word	0x080dc928

0800b6a8 <__retarget_lock_init_recursive>:
 800b6a8:	4770      	bx	lr

0800b6aa <__retarget_lock_acquire_recursive>:
 800b6aa:	4770      	bx	lr

0800b6ac <__retarget_lock_release_recursive>:
 800b6ac:	4770      	bx	lr

0800b6ae <memcpy>:
 800b6ae:	440a      	add	r2, r1
 800b6b0:	4291      	cmp	r1, r2
 800b6b2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6b6:	d100      	bne.n	800b6ba <memcpy+0xc>
 800b6b8:	4770      	bx	lr
 800b6ba:	b510      	push	{r4, lr}
 800b6bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6c4:	4291      	cmp	r1, r2
 800b6c6:	d1f9      	bne.n	800b6bc <memcpy+0xe>
 800b6c8:	bd10      	pop	{r4, pc}

0800b6ca <quorem>:
 800b6ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ce:	6903      	ldr	r3, [r0, #16]
 800b6d0:	690c      	ldr	r4, [r1, #16]
 800b6d2:	42a3      	cmp	r3, r4
 800b6d4:	4607      	mov	r7, r0
 800b6d6:	db7e      	blt.n	800b7d6 <quorem+0x10c>
 800b6d8:	3c01      	subs	r4, #1
 800b6da:	f101 0814 	add.w	r8, r1, #20
 800b6de:	f100 0514 	add.w	r5, r0, #20
 800b6e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6e6:	9301      	str	r3, [sp, #4]
 800b6e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b6f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b6fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b700:	d331      	bcc.n	800b766 <quorem+0x9c>
 800b702:	f04f 0e00 	mov.w	lr, #0
 800b706:	4640      	mov	r0, r8
 800b708:	46ac      	mov	ip, r5
 800b70a:	46f2      	mov	sl, lr
 800b70c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b710:	b293      	uxth	r3, r2
 800b712:	fb06 e303 	mla	r3, r6, r3, lr
 800b716:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b71a:	0c1a      	lsrs	r2, r3, #16
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	ebaa 0303 	sub.w	r3, sl, r3
 800b722:	f8dc a000 	ldr.w	sl, [ip]
 800b726:	fa13 f38a 	uxtah	r3, r3, sl
 800b72a:	fb06 220e 	mla	r2, r6, lr, r2
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	9b00      	ldr	r3, [sp, #0]
 800b732:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b736:	b292      	uxth	r2, r2
 800b738:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b73c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b740:	f8bd 3000 	ldrh.w	r3, [sp]
 800b744:	4581      	cmp	r9, r0
 800b746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b74a:	f84c 3b04 	str.w	r3, [ip], #4
 800b74e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b752:	d2db      	bcs.n	800b70c <quorem+0x42>
 800b754:	f855 300b 	ldr.w	r3, [r5, fp]
 800b758:	b92b      	cbnz	r3, 800b766 <quorem+0x9c>
 800b75a:	9b01      	ldr	r3, [sp, #4]
 800b75c:	3b04      	subs	r3, #4
 800b75e:	429d      	cmp	r5, r3
 800b760:	461a      	mov	r2, r3
 800b762:	d32c      	bcc.n	800b7be <quorem+0xf4>
 800b764:	613c      	str	r4, [r7, #16]
 800b766:	4638      	mov	r0, r7
 800b768:	f001 f8f4 	bl	800c954 <__mcmp>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	db22      	blt.n	800b7b6 <quorem+0xec>
 800b770:	3601      	adds	r6, #1
 800b772:	4629      	mov	r1, r5
 800b774:	2000      	movs	r0, #0
 800b776:	f858 2b04 	ldr.w	r2, [r8], #4
 800b77a:	f8d1 c000 	ldr.w	ip, [r1]
 800b77e:	b293      	uxth	r3, r2
 800b780:	1ac3      	subs	r3, r0, r3
 800b782:	0c12      	lsrs	r2, r2, #16
 800b784:	fa13 f38c 	uxtah	r3, r3, ip
 800b788:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b78c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b790:	b29b      	uxth	r3, r3
 800b792:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b796:	45c1      	cmp	r9, r8
 800b798:	f841 3b04 	str.w	r3, [r1], #4
 800b79c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b7a0:	d2e9      	bcs.n	800b776 <quorem+0xac>
 800b7a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7aa:	b922      	cbnz	r2, 800b7b6 <quorem+0xec>
 800b7ac:	3b04      	subs	r3, #4
 800b7ae:	429d      	cmp	r5, r3
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	d30a      	bcc.n	800b7ca <quorem+0x100>
 800b7b4:	613c      	str	r4, [r7, #16]
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	b003      	add	sp, #12
 800b7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7be:	6812      	ldr	r2, [r2, #0]
 800b7c0:	3b04      	subs	r3, #4
 800b7c2:	2a00      	cmp	r2, #0
 800b7c4:	d1ce      	bne.n	800b764 <quorem+0x9a>
 800b7c6:	3c01      	subs	r4, #1
 800b7c8:	e7c9      	b.n	800b75e <quorem+0x94>
 800b7ca:	6812      	ldr	r2, [r2, #0]
 800b7cc:	3b04      	subs	r3, #4
 800b7ce:	2a00      	cmp	r2, #0
 800b7d0:	d1f0      	bne.n	800b7b4 <quorem+0xea>
 800b7d2:	3c01      	subs	r4, #1
 800b7d4:	e7eb      	b.n	800b7ae <quorem+0xe4>
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	e7ee      	b.n	800b7b8 <quorem+0xee>
 800b7da:	0000      	movs	r0, r0
 800b7dc:	0000      	movs	r0, r0
	...

0800b7e0 <_dtoa_r>:
 800b7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e4:	ed2d 8b04 	vpush	{d8-d9}
 800b7e8:	69c5      	ldr	r5, [r0, #28]
 800b7ea:	b093      	sub	sp, #76	; 0x4c
 800b7ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b7f0:	ec57 6b10 	vmov	r6, r7, d0
 800b7f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b7f8:	9107      	str	r1, [sp, #28]
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	920a      	str	r2, [sp, #40]	; 0x28
 800b7fe:	930d      	str	r3, [sp, #52]	; 0x34
 800b800:	b975      	cbnz	r5, 800b820 <_dtoa_r+0x40>
 800b802:	2010      	movs	r0, #16
 800b804:	f7f8 fe36 	bl	8004474 <__wrap_malloc>
 800b808:	4602      	mov	r2, r0
 800b80a:	61e0      	str	r0, [r4, #28]
 800b80c:	b920      	cbnz	r0, 800b818 <_dtoa_r+0x38>
 800b80e:	4bae      	ldr	r3, [pc, #696]	; (800bac8 <_dtoa_r+0x2e8>)
 800b810:	21ef      	movs	r1, #239	; 0xef
 800b812:	48ae      	ldr	r0, [pc, #696]	; (800bacc <_dtoa_r+0x2ec>)
 800b814:	f001 fa4c 	bl	800ccb0 <__assert_func>
 800b818:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b81c:	6005      	str	r5, [r0, #0]
 800b81e:	60c5      	str	r5, [r0, #12]
 800b820:	69e3      	ldr	r3, [r4, #28]
 800b822:	6819      	ldr	r1, [r3, #0]
 800b824:	b151      	cbz	r1, 800b83c <_dtoa_r+0x5c>
 800b826:	685a      	ldr	r2, [r3, #4]
 800b828:	604a      	str	r2, [r1, #4]
 800b82a:	2301      	movs	r3, #1
 800b82c:	4093      	lsls	r3, r2
 800b82e:	608b      	str	r3, [r1, #8]
 800b830:	4620      	mov	r0, r4
 800b832:	f000 fe53 	bl	800c4dc <_Bfree>
 800b836:	69e3      	ldr	r3, [r4, #28]
 800b838:	2200      	movs	r2, #0
 800b83a:	601a      	str	r2, [r3, #0]
 800b83c:	1e3b      	subs	r3, r7, #0
 800b83e:	bfbb      	ittet	lt
 800b840:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b844:	9303      	strlt	r3, [sp, #12]
 800b846:	2300      	movge	r3, #0
 800b848:	2201      	movlt	r2, #1
 800b84a:	bfac      	ite	ge
 800b84c:	f8c8 3000 	strge.w	r3, [r8]
 800b850:	f8c8 2000 	strlt.w	r2, [r8]
 800b854:	4b9e      	ldr	r3, [pc, #632]	; (800bad0 <_dtoa_r+0x2f0>)
 800b856:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b85a:	ea33 0308 	bics.w	r3, r3, r8
 800b85e:	d11b      	bne.n	800b898 <_dtoa_r+0xb8>
 800b860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b862:	f242 730f 	movw	r3, #9999	; 0x270f
 800b866:	6013      	str	r3, [r2, #0]
 800b868:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b86c:	4333      	orrs	r3, r6
 800b86e:	f000 8593 	beq.w	800c398 <_dtoa_r+0xbb8>
 800b872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b874:	b963      	cbnz	r3, 800b890 <_dtoa_r+0xb0>
 800b876:	4b97      	ldr	r3, [pc, #604]	; (800bad4 <_dtoa_r+0x2f4>)
 800b878:	e027      	b.n	800b8ca <_dtoa_r+0xea>
 800b87a:	4b97      	ldr	r3, [pc, #604]	; (800bad8 <_dtoa_r+0x2f8>)
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	3308      	adds	r3, #8
 800b880:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b882:	6013      	str	r3, [r2, #0]
 800b884:	9800      	ldr	r0, [sp, #0]
 800b886:	b013      	add	sp, #76	; 0x4c
 800b888:	ecbd 8b04 	vpop	{d8-d9}
 800b88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b890:	4b90      	ldr	r3, [pc, #576]	; (800bad4 <_dtoa_r+0x2f4>)
 800b892:	9300      	str	r3, [sp, #0]
 800b894:	3303      	adds	r3, #3
 800b896:	e7f3      	b.n	800b880 <_dtoa_r+0xa0>
 800b898:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b89c:	2200      	movs	r2, #0
 800b89e:	ec51 0b17 	vmov	r0, r1, d7
 800b8a2:	eeb0 8a47 	vmov.f32	s16, s14
 800b8a6:	eef0 8a67 	vmov.f32	s17, s15
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	f7f5 f92c 	bl	8000b08 <__aeabi_dcmpeq>
 800b8b0:	4681      	mov	r9, r0
 800b8b2:	b160      	cbz	r0, 800b8ce <_dtoa_r+0xee>
 800b8b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	6013      	str	r3, [r2, #0]
 800b8ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f000 8568 	beq.w	800c392 <_dtoa_r+0xbb2>
 800b8c2:	4b86      	ldr	r3, [pc, #536]	; (800badc <_dtoa_r+0x2fc>)
 800b8c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8c6:	6013      	str	r3, [r2, #0]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	e7da      	b.n	800b884 <_dtoa_r+0xa4>
 800b8ce:	aa10      	add	r2, sp, #64	; 0x40
 800b8d0:	a911      	add	r1, sp, #68	; 0x44
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	eeb0 0a48 	vmov.f32	s0, s16
 800b8d8:	eef0 0a68 	vmov.f32	s1, s17
 800b8dc:	f001 f8e0 	bl	800caa0 <__d2b>
 800b8e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b8e4:	4682      	mov	sl, r0
 800b8e6:	2d00      	cmp	r5, #0
 800b8e8:	d07f      	beq.n	800b9ea <_dtoa_r+0x20a>
 800b8ea:	ee18 3a90 	vmov	r3, s17
 800b8ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b8f6:	ec51 0b18 	vmov	r0, r1, d8
 800b8fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b8fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b902:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b906:	4619      	mov	r1, r3
 800b908:	2200      	movs	r2, #0
 800b90a:	4b75      	ldr	r3, [pc, #468]	; (800bae0 <_dtoa_r+0x300>)
 800b90c:	f7f4 fcdc 	bl	80002c8 <__aeabi_dsub>
 800b910:	a367      	add	r3, pc, #412	; (adr r3, 800bab0 <_dtoa_r+0x2d0>)
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	f7f4 fe8f 	bl	8000638 <__aeabi_dmul>
 800b91a:	a367      	add	r3, pc, #412	; (adr r3, 800bab8 <_dtoa_r+0x2d8>)
 800b91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b920:	f7f4 fcd4 	bl	80002cc <__adddf3>
 800b924:	4606      	mov	r6, r0
 800b926:	4628      	mov	r0, r5
 800b928:	460f      	mov	r7, r1
 800b92a:	f7f4 fe1b 	bl	8000564 <__aeabi_i2d>
 800b92e:	a364      	add	r3, pc, #400	; (adr r3, 800bac0 <_dtoa_r+0x2e0>)
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	f7f4 fe80 	bl	8000638 <__aeabi_dmul>
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	4630      	mov	r0, r6
 800b93e:	4639      	mov	r1, r7
 800b940:	f7f4 fcc4 	bl	80002cc <__adddf3>
 800b944:	4606      	mov	r6, r0
 800b946:	460f      	mov	r7, r1
 800b948:	f7f5 f926 	bl	8000b98 <__aeabi_d2iz>
 800b94c:	2200      	movs	r2, #0
 800b94e:	4683      	mov	fp, r0
 800b950:	2300      	movs	r3, #0
 800b952:	4630      	mov	r0, r6
 800b954:	4639      	mov	r1, r7
 800b956:	f7f5 f8e1 	bl	8000b1c <__aeabi_dcmplt>
 800b95a:	b148      	cbz	r0, 800b970 <_dtoa_r+0x190>
 800b95c:	4658      	mov	r0, fp
 800b95e:	f7f4 fe01 	bl	8000564 <__aeabi_i2d>
 800b962:	4632      	mov	r2, r6
 800b964:	463b      	mov	r3, r7
 800b966:	f7f5 f8cf 	bl	8000b08 <__aeabi_dcmpeq>
 800b96a:	b908      	cbnz	r0, 800b970 <_dtoa_r+0x190>
 800b96c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b970:	f1bb 0f16 	cmp.w	fp, #22
 800b974:	d857      	bhi.n	800ba26 <_dtoa_r+0x246>
 800b976:	4b5b      	ldr	r3, [pc, #364]	; (800bae4 <_dtoa_r+0x304>)
 800b978:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b980:	ec51 0b18 	vmov	r0, r1, d8
 800b984:	f7f5 f8ca 	bl	8000b1c <__aeabi_dcmplt>
 800b988:	2800      	cmp	r0, #0
 800b98a:	d04e      	beq.n	800ba2a <_dtoa_r+0x24a>
 800b98c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b990:	2300      	movs	r3, #0
 800b992:	930c      	str	r3, [sp, #48]	; 0x30
 800b994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b996:	1b5b      	subs	r3, r3, r5
 800b998:	1e5a      	subs	r2, r3, #1
 800b99a:	bf45      	ittet	mi
 800b99c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b9a0:	9305      	strmi	r3, [sp, #20]
 800b9a2:	2300      	movpl	r3, #0
 800b9a4:	2300      	movmi	r3, #0
 800b9a6:	9206      	str	r2, [sp, #24]
 800b9a8:	bf54      	ite	pl
 800b9aa:	9305      	strpl	r3, [sp, #20]
 800b9ac:	9306      	strmi	r3, [sp, #24]
 800b9ae:	f1bb 0f00 	cmp.w	fp, #0
 800b9b2:	db3c      	blt.n	800ba2e <_dtoa_r+0x24e>
 800b9b4:	9b06      	ldr	r3, [sp, #24]
 800b9b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b9ba:	445b      	add	r3, fp
 800b9bc:	9306      	str	r3, [sp, #24]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	9308      	str	r3, [sp, #32]
 800b9c2:	9b07      	ldr	r3, [sp, #28]
 800b9c4:	2b09      	cmp	r3, #9
 800b9c6:	d868      	bhi.n	800ba9a <_dtoa_r+0x2ba>
 800b9c8:	2b05      	cmp	r3, #5
 800b9ca:	bfc4      	itt	gt
 800b9cc:	3b04      	subgt	r3, #4
 800b9ce:	9307      	strgt	r3, [sp, #28]
 800b9d0:	9b07      	ldr	r3, [sp, #28]
 800b9d2:	f1a3 0302 	sub.w	r3, r3, #2
 800b9d6:	bfcc      	ite	gt
 800b9d8:	2500      	movgt	r5, #0
 800b9da:	2501      	movle	r5, #1
 800b9dc:	2b03      	cmp	r3, #3
 800b9de:	f200 8085 	bhi.w	800baec <_dtoa_r+0x30c>
 800b9e2:	e8df f003 	tbb	[pc, r3]
 800b9e6:	3b2e      	.short	0x3b2e
 800b9e8:	5839      	.short	0x5839
 800b9ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b9ee:	441d      	add	r5, r3
 800b9f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b9f4:	2b20      	cmp	r3, #32
 800b9f6:	bfc1      	itttt	gt
 800b9f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b9fc:	fa08 f803 	lslgt.w	r8, r8, r3
 800ba00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ba04:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ba08:	bfd6      	itet	le
 800ba0a:	f1c3 0320 	rsble	r3, r3, #32
 800ba0e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ba12:	fa06 f003 	lslle.w	r0, r6, r3
 800ba16:	f7f4 fd95 	bl	8000544 <__aeabi_ui2d>
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ba20:	3d01      	subs	r5, #1
 800ba22:	920e      	str	r2, [sp, #56]	; 0x38
 800ba24:	e76f      	b.n	800b906 <_dtoa_r+0x126>
 800ba26:	2301      	movs	r3, #1
 800ba28:	e7b3      	b.n	800b992 <_dtoa_r+0x1b2>
 800ba2a:	900c      	str	r0, [sp, #48]	; 0x30
 800ba2c:	e7b2      	b.n	800b994 <_dtoa_r+0x1b4>
 800ba2e:	9b05      	ldr	r3, [sp, #20]
 800ba30:	eba3 030b 	sub.w	r3, r3, fp
 800ba34:	9305      	str	r3, [sp, #20]
 800ba36:	f1cb 0300 	rsb	r3, fp, #0
 800ba3a:	9308      	str	r3, [sp, #32]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba40:	e7bf      	b.n	800b9c2 <_dtoa_r+0x1e2>
 800ba42:	2300      	movs	r3, #0
 800ba44:	9309      	str	r3, [sp, #36]	; 0x24
 800ba46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	dc52      	bgt.n	800baf2 <_dtoa_r+0x312>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	9301      	str	r3, [sp, #4]
 800ba50:	9304      	str	r3, [sp, #16]
 800ba52:	461a      	mov	r2, r3
 800ba54:	920a      	str	r2, [sp, #40]	; 0x28
 800ba56:	e00b      	b.n	800ba70 <_dtoa_r+0x290>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e7f3      	b.n	800ba44 <_dtoa_r+0x264>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba62:	445b      	add	r3, fp
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	3301      	adds	r3, #1
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	9304      	str	r3, [sp, #16]
 800ba6c:	bfb8      	it	lt
 800ba6e:	2301      	movlt	r3, #1
 800ba70:	69e0      	ldr	r0, [r4, #28]
 800ba72:	2100      	movs	r1, #0
 800ba74:	2204      	movs	r2, #4
 800ba76:	f102 0614 	add.w	r6, r2, #20
 800ba7a:	429e      	cmp	r6, r3
 800ba7c:	d93d      	bls.n	800bafa <_dtoa_r+0x31a>
 800ba7e:	6041      	str	r1, [r0, #4]
 800ba80:	4620      	mov	r0, r4
 800ba82:	f000 fceb 	bl	800c45c <_Balloc>
 800ba86:	9000      	str	r0, [sp, #0]
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d139      	bne.n	800bb00 <_dtoa_r+0x320>
 800ba8c:	4b16      	ldr	r3, [pc, #88]	; (800bae8 <_dtoa_r+0x308>)
 800ba8e:	4602      	mov	r2, r0
 800ba90:	f240 11af 	movw	r1, #431	; 0x1af
 800ba94:	e6bd      	b.n	800b812 <_dtoa_r+0x32>
 800ba96:	2301      	movs	r3, #1
 800ba98:	e7e1      	b.n	800ba5e <_dtoa_r+0x27e>
 800ba9a:	2501      	movs	r5, #1
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9307      	str	r3, [sp, #28]
 800baa0:	9509      	str	r5, [sp, #36]	; 0x24
 800baa2:	f04f 33ff 	mov.w	r3, #4294967295
 800baa6:	9301      	str	r3, [sp, #4]
 800baa8:	9304      	str	r3, [sp, #16]
 800baaa:	2200      	movs	r2, #0
 800baac:	2312      	movs	r3, #18
 800baae:	e7d1      	b.n	800ba54 <_dtoa_r+0x274>
 800bab0:	636f4361 	.word	0x636f4361
 800bab4:	3fd287a7 	.word	0x3fd287a7
 800bab8:	8b60c8b3 	.word	0x8b60c8b3
 800babc:	3fc68a28 	.word	0x3fc68a28
 800bac0:	509f79fb 	.word	0x509f79fb
 800bac4:	3fd34413 	.word	0x3fd34413
 800bac8:	080dc5d3 	.word	0x080dc5d3
 800bacc:	080dc5ea 	.word	0x080dc5ea
 800bad0:	7ff00000 	.word	0x7ff00000
 800bad4:	080dc5cf 	.word	0x080dc5cf
 800bad8:	080dc5c6 	.word	0x080dc5c6
 800badc:	0800df92 	.word	0x0800df92
 800bae0:	3ff80000 	.word	0x3ff80000
 800bae4:	080dc6d8 	.word	0x080dc6d8
 800bae8:	080dc642 	.word	0x080dc642
 800baec:	2301      	movs	r3, #1
 800baee:	9309      	str	r3, [sp, #36]	; 0x24
 800baf0:	e7d7      	b.n	800baa2 <_dtoa_r+0x2c2>
 800baf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baf4:	9301      	str	r3, [sp, #4]
 800baf6:	9304      	str	r3, [sp, #16]
 800baf8:	e7ba      	b.n	800ba70 <_dtoa_r+0x290>
 800bafa:	3101      	adds	r1, #1
 800bafc:	0052      	lsls	r2, r2, #1
 800bafe:	e7ba      	b.n	800ba76 <_dtoa_r+0x296>
 800bb00:	69e3      	ldr	r3, [r4, #28]
 800bb02:	9a00      	ldr	r2, [sp, #0]
 800bb04:	601a      	str	r2, [r3, #0]
 800bb06:	9b04      	ldr	r3, [sp, #16]
 800bb08:	2b0e      	cmp	r3, #14
 800bb0a:	f200 80a8 	bhi.w	800bc5e <_dtoa_r+0x47e>
 800bb0e:	2d00      	cmp	r5, #0
 800bb10:	f000 80a5 	beq.w	800bc5e <_dtoa_r+0x47e>
 800bb14:	f1bb 0f00 	cmp.w	fp, #0
 800bb18:	dd38      	ble.n	800bb8c <_dtoa_r+0x3ac>
 800bb1a:	4bc0      	ldr	r3, [pc, #768]	; (800be1c <_dtoa_r+0x63c>)
 800bb1c:	f00b 020f 	and.w	r2, fp, #15
 800bb20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bb28:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bb2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bb30:	d019      	beq.n	800bb66 <_dtoa_r+0x386>
 800bb32:	4bbb      	ldr	r3, [pc, #748]	; (800be20 <_dtoa_r+0x640>)
 800bb34:	ec51 0b18 	vmov	r0, r1, d8
 800bb38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb3c:	f7f4 fea6 	bl	800088c <__aeabi_ddiv>
 800bb40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb44:	f008 080f 	and.w	r8, r8, #15
 800bb48:	2503      	movs	r5, #3
 800bb4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800be20 <_dtoa_r+0x640>
 800bb4e:	f1b8 0f00 	cmp.w	r8, #0
 800bb52:	d10a      	bne.n	800bb6a <_dtoa_r+0x38a>
 800bb54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb58:	4632      	mov	r2, r6
 800bb5a:	463b      	mov	r3, r7
 800bb5c:	f7f4 fe96 	bl	800088c <__aeabi_ddiv>
 800bb60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb64:	e02b      	b.n	800bbbe <_dtoa_r+0x3de>
 800bb66:	2502      	movs	r5, #2
 800bb68:	e7ef      	b.n	800bb4a <_dtoa_r+0x36a>
 800bb6a:	f018 0f01 	tst.w	r8, #1
 800bb6e:	d008      	beq.n	800bb82 <_dtoa_r+0x3a2>
 800bb70:	4630      	mov	r0, r6
 800bb72:	4639      	mov	r1, r7
 800bb74:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bb78:	f7f4 fd5e 	bl	8000638 <__aeabi_dmul>
 800bb7c:	3501      	adds	r5, #1
 800bb7e:	4606      	mov	r6, r0
 800bb80:	460f      	mov	r7, r1
 800bb82:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bb86:	f109 0908 	add.w	r9, r9, #8
 800bb8a:	e7e0      	b.n	800bb4e <_dtoa_r+0x36e>
 800bb8c:	f000 809f 	beq.w	800bcce <_dtoa_r+0x4ee>
 800bb90:	f1cb 0600 	rsb	r6, fp, #0
 800bb94:	4ba1      	ldr	r3, [pc, #644]	; (800be1c <_dtoa_r+0x63c>)
 800bb96:	4fa2      	ldr	r7, [pc, #648]	; (800be20 <_dtoa_r+0x640>)
 800bb98:	f006 020f 	and.w	r2, r6, #15
 800bb9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba4:	ec51 0b18 	vmov	r0, r1, d8
 800bba8:	f7f4 fd46 	bl	8000638 <__aeabi_dmul>
 800bbac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbb0:	1136      	asrs	r6, r6, #4
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	2502      	movs	r5, #2
 800bbb6:	2e00      	cmp	r6, #0
 800bbb8:	d17e      	bne.n	800bcb8 <_dtoa_r+0x4d8>
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1d0      	bne.n	800bb60 <_dtoa_r+0x380>
 800bbbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f000 8084 	beq.w	800bcd2 <_dtoa_r+0x4f2>
 800bbca:	4b96      	ldr	r3, [pc, #600]	; (800be24 <_dtoa_r+0x644>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	4640      	mov	r0, r8
 800bbd0:	4649      	mov	r1, r9
 800bbd2:	f7f4 ffa3 	bl	8000b1c <__aeabi_dcmplt>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d07b      	beq.n	800bcd2 <_dtoa_r+0x4f2>
 800bbda:	9b04      	ldr	r3, [sp, #16]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d078      	beq.n	800bcd2 <_dtoa_r+0x4f2>
 800bbe0:	9b01      	ldr	r3, [sp, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	dd39      	ble.n	800bc5a <_dtoa_r+0x47a>
 800bbe6:	4b90      	ldr	r3, [pc, #576]	; (800be28 <_dtoa_r+0x648>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	4640      	mov	r0, r8
 800bbec:	4649      	mov	r1, r9
 800bbee:	f7f4 fd23 	bl	8000638 <__aeabi_dmul>
 800bbf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbf6:	9e01      	ldr	r6, [sp, #4]
 800bbf8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bbfc:	3501      	adds	r5, #1
 800bbfe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bc02:	4628      	mov	r0, r5
 800bc04:	f7f4 fcae 	bl	8000564 <__aeabi_i2d>
 800bc08:	4642      	mov	r2, r8
 800bc0a:	464b      	mov	r3, r9
 800bc0c:	f7f4 fd14 	bl	8000638 <__aeabi_dmul>
 800bc10:	4b86      	ldr	r3, [pc, #536]	; (800be2c <_dtoa_r+0x64c>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	f7f4 fb5a 	bl	80002cc <__adddf3>
 800bc18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bc1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc20:	9303      	str	r3, [sp, #12]
 800bc22:	2e00      	cmp	r6, #0
 800bc24:	d158      	bne.n	800bcd8 <_dtoa_r+0x4f8>
 800bc26:	4b82      	ldr	r3, [pc, #520]	; (800be30 <_dtoa_r+0x650>)
 800bc28:	2200      	movs	r2, #0
 800bc2a:	4640      	mov	r0, r8
 800bc2c:	4649      	mov	r1, r9
 800bc2e:	f7f4 fb4b 	bl	80002c8 <__aeabi_dsub>
 800bc32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc36:	4680      	mov	r8, r0
 800bc38:	4689      	mov	r9, r1
 800bc3a:	f7f4 ff8d 	bl	8000b58 <__aeabi_dcmpgt>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	f040 8296 	bne.w	800c170 <_dtoa_r+0x990>
 800bc44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bc48:	4640      	mov	r0, r8
 800bc4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc4e:	4649      	mov	r1, r9
 800bc50:	f7f4 ff64 	bl	8000b1c <__aeabi_dcmplt>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	f040 8289 	bne.w	800c16c <_dtoa_r+0x98c>
 800bc5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bc5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f2c0 814e 	blt.w	800bf02 <_dtoa_r+0x722>
 800bc66:	f1bb 0f0e 	cmp.w	fp, #14
 800bc6a:	f300 814a 	bgt.w	800bf02 <_dtoa_r+0x722>
 800bc6e:	4b6b      	ldr	r3, [pc, #428]	; (800be1c <_dtoa_r+0x63c>)
 800bc70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f280 80dc 	bge.w	800be38 <_dtoa_r+0x658>
 800bc80:	9b04      	ldr	r3, [sp, #16]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	f300 80d8 	bgt.w	800be38 <_dtoa_r+0x658>
 800bc88:	f040 826f 	bne.w	800c16a <_dtoa_r+0x98a>
 800bc8c:	4b68      	ldr	r3, [pc, #416]	; (800be30 <_dtoa_r+0x650>)
 800bc8e:	2200      	movs	r2, #0
 800bc90:	4640      	mov	r0, r8
 800bc92:	4649      	mov	r1, r9
 800bc94:	f7f4 fcd0 	bl	8000638 <__aeabi_dmul>
 800bc98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc9c:	f7f4 ff52 	bl	8000b44 <__aeabi_dcmpge>
 800bca0:	9e04      	ldr	r6, [sp, #16]
 800bca2:	4637      	mov	r7, r6
 800bca4:	2800      	cmp	r0, #0
 800bca6:	f040 8245 	bne.w	800c134 <_dtoa_r+0x954>
 800bcaa:	9d00      	ldr	r5, [sp, #0]
 800bcac:	2331      	movs	r3, #49	; 0x31
 800bcae:	f805 3b01 	strb.w	r3, [r5], #1
 800bcb2:	f10b 0b01 	add.w	fp, fp, #1
 800bcb6:	e241      	b.n	800c13c <_dtoa_r+0x95c>
 800bcb8:	07f2      	lsls	r2, r6, #31
 800bcba:	d505      	bpl.n	800bcc8 <_dtoa_r+0x4e8>
 800bcbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcc0:	f7f4 fcba 	bl	8000638 <__aeabi_dmul>
 800bcc4:	3501      	adds	r5, #1
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	1076      	asrs	r6, r6, #1
 800bcca:	3708      	adds	r7, #8
 800bccc:	e773      	b.n	800bbb6 <_dtoa_r+0x3d6>
 800bcce:	2502      	movs	r5, #2
 800bcd0:	e775      	b.n	800bbbe <_dtoa_r+0x3de>
 800bcd2:	9e04      	ldr	r6, [sp, #16]
 800bcd4:	465f      	mov	r7, fp
 800bcd6:	e792      	b.n	800bbfe <_dtoa_r+0x41e>
 800bcd8:	9900      	ldr	r1, [sp, #0]
 800bcda:	4b50      	ldr	r3, [pc, #320]	; (800be1c <_dtoa_r+0x63c>)
 800bcdc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bce0:	4431      	add	r1, r6
 800bce2:	9102      	str	r1, [sp, #8]
 800bce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bce6:	eeb0 9a47 	vmov.f32	s18, s14
 800bcea:	eef0 9a67 	vmov.f32	s19, s15
 800bcee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bcf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bcf6:	2900      	cmp	r1, #0
 800bcf8:	d044      	beq.n	800bd84 <_dtoa_r+0x5a4>
 800bcfa:	494e      	ldr	r1, [pc, #312]	; (800be34 <_dtoa_r+0x654>)
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	f7f4 fdc5 	bl	800088c <__aeabi_ddiv>
 800bd02:	ec53 2b19 	vmov	r2, r3, d9
 800bd06:	f7f4 fadf 	bl	80002c8 <__aeabi_dsub>
 800bd0a:	9d00      	ldr	r5, [sp, #0]
 800bd0c:	ec41 0b19 	vmov	d9, r0, r1
 800bd10:	4649      	mov	r1, r9
 800bd12:	4640      	mov	r0, r8
 800bd14:	f7f4 ff40 	bl	8000b98 <__aeabi_d2iz>
 800bd18:	4606      	mov	r6, r0
 800bd1a:	f7f4 fc23 	bl	8000564 <__aeabi_i2d>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	460b      	mov	r3, r1
 800bd22:	4640      	mov	r0, r8
 800bd24:	4649      	mov	r1, r9
 800bd26:	f7f4 facf 	bl	80002c8 <__aeabi_dsub>
 800bd2a:	3630      	adds	r6, #48	; 0x30
 800bd2c:	f805 6b01 	strb.w	r6, [r5], #1
 800bd30:	ec53 2b19 	vmov	r2, r3, d9
 800bd34:	4680      	mov	r8, r0
 800bd36:	4689      	mov	r9, r1
 800bd38:	f7f4 fef0 	bl	8000b1c <__aeabi_dcmplt>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d164      	bne.n	800be0a <_dtoa_r+0x62a>
 800bd40:	4642      	mov	r2, r8
 800bd42:	464b      	mov	r3, r9
 800bd44:	4937      	ldr	r1, [pc, #220]	; (800be24 <_dtoa_r+0x644>)
 800bd46:	2000      	movs	r0, #0
 800bd48:	f7f4 fabe 	bl	80002c8 <__aeabi_dsub>
 800bd4c:	ec53 2b19 	vmov	r2, r3, d9
 800bd50:	f7f4 fee4 	bl	8000b1c <__aeabi_dcmplt>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	f040 80b6 	bne.w	800bec6 <_dtoa_r+0x6e6>
 800bd5a:	9b02      	ldr	r3, [sp, #8]
 800bd5c:	429d      	cmp	r5, r3
 800bd5e:	f43f af7c 	beq.w	800bc5a <_dtoa_r+0x47a>
 800bd62:	4b31      	ldr	r3, [pc, #196]	; (800be28 <_dtoa_r+0x648>)
 800bd64:	ec51 0b19 	vmov	r0, r1, d9
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f7f4 fc65 	bl	8000638 <__aeabi_dmul>
 800bd6e:	4b2e      	ldr	r3, [pc, #184]	; (800be28 <_dtoa_r+0x648>)
 800bd70:	ec41 0b19 	vmov	d9, r0, r1
 800bd74:	2200      	movs	r2, #0
 800bd76:	4640      	mov	r0, r8
 800bd78:	4649      	mov	r1, r9
 800bd7a:	f7f4 fc5d 	bl	8000638 <__aeabi_dmul>
 800bd7e:	4680      	mov	r8, r0
 800bd80:	4689      	mov	r9, r1
 800bd82:	e7c5      	b.n	800bd10 <_dtoa_r+0x530>
 800bd84:	ec51 0b17 	vmov	r0, r1, d7
 800bd88:	f7f4 fc56 	bl	8000638 <__aeabi_dmul>
 800bd8c:	9b02      	ldr	r3, [sp, #8]
 800bd8e:	9d00      	ldr	r5, [sp, #0]
 800bd90:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd92:	ec41 0b19 	vmov	d9, r0, r1
 800bd96:	4649      	mov	r1, r9
 800bd98:	4640      	mov	r0, r8
 800bd9a:	f7f4 fefd 	bl	8000b98 <__aeabi_d2iz>
 800bd9e:	4606      	mov	r6, r0
 800bda0:	f7f4 fbe0 	bl	8000564 <__aeabi_i2d>
 800bda4:	3630      	adds	r6, #48	; 0x30
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4640      	mov	r0, r8
 800bdac:	4649      	mov	r1, r9
 800bdae:	f7f4 fa8b 	bl	80002c8 <__aeabi_dsub>
 800bdb2:	f805 6b01 	strb.w	r6, [r5], #1
 800bdb6:	9b02      	ldr	r3, [sp, #8]
 800bdb8:	429d      	cmp	r5, r3
 800bdba:	4680      	mov	r8, r0
 800bdbc:	4689      	mov	r9, r1
 800bdbe:	f04f 0200 	mov.w	r2, #0
 800bdc2:	d124      	bne.n	800be0e <_dtoa_r+0x62e>
 800bdc4:	4b1b      	ldr	r3, [pc, #108]	; (800be34 <_dtoa_r+0x654>)
 800bdc6:	ec51 0b19 	vmov	r0, r1, d9
 800bdca:	f7f4 fa7f 	bl	80002cc <__adddf3>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	4640      	mov	r0, r8
 800bdd4:	4649      	mov	r1, r9
 800bdd6:	f7f4 febf 	bl	8000b58 <__aeabi_dcmpgt>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d173      	bne.n	800bec6 <_dtoa_r+0x6e6>
 800bdde:	ec53 2b19 	vmov	r2, r3, d9
 800bde2:	4914      	ldr	r1, [pc, #80]	; (800be34 <_dtoa_r+0x654>)
 800bde4:	2000      	movs	r0, #0
 800bde6:	f7f4 fa6f 	bl	80002c8 <__aeabi_dsub>
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	4640      	mov	r0, r8
 800bdf0:	4649      	mov	r1, r9
 800bdf2:	f7f4 fe93 	bl	8000b1c <__aeabi_dcmplt>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	f43f af2f 	beq.w	800bc5a <_dtoa_r+0x47a>
 800bdfc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bdfe:	1e6b      	subs	r3, r5, #1
 800be00:	930f      	str	r3, [sp, #60]	; 0x3c
 800be02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be06:	2b30      	cmp	r3, #48	; 0x30
 800be08:	d0f8      	beq.n	800bdfc <_dtoa_r+0x61c>
 800be0a:	46bb      	mov	fp, r7
 800be0c:	e04a      	b.n	800bea4 <_dtoa_r+0x6c4>
 800be0e:	4b06      	ldr	r3, [pc, #24]	; (800be28 <_dtoa_r+0x648>)
 800be10:	f7f4 fc12 	bl	8000638 <__aeabi_dmul>
 800be14:	4680      	mov	r8, r0
 800be16:	4689      	mov	r9, r1
 800be18:	e7bd      	b.n	800bd96 <_dtoa_r+0x5b6>
 800be1a:	bf00      	nop
 800be1c:	080dc6d8 	.word	0x080dc6d8
 800be20:	080dc6b0 	.word	0x080dc6b0
 800be24:	3ff00000 	.word	0x3ff00000
 800be28:	40240000 	.word	0x40240000
 800be2c:	401c0000 	.word	0x401c0000
 800be30:	40140000 	.word	0x40140000
 800be34:	3fe00000 	.word	0x3fe00000
 800be38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800be3c:	9d00      	ldr	r5, [sp, #0]
 800be3e:	4642      	mov	r2, r8
 800be40:	464b      	mov	r3, r9
 800be42:	4630      	mov	r0, r6
 800be44:	4639      	mov	r1, r7
 800be46:	f7f4 fd21 	bl	800088c <__aeabi_ddiv>
 800be4a:	f7f4 fea5 	bl	8000b98 <__aeabi_d2iz>
 800be4e:	9001      	str	r0, [sp, #4]
 800be50:	f7f4 fb88 	bl	8000564 <__aeabi_i2d>
 800be54:	4642      	mov	r2, r8
 800be56:	464b      	mov	r3, r9
 800be58:	f7f4 fbee 	bl	8000638 <__aeabi_dmul>
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	4630      	mov	r0, r6
 800be62:	4639      	mov	r1, r7
 800be64:	f7f4 fa30 	bl	80002c8 <__aeabi_dsub>
 800be68:	9e01      	ldr	r6, [sp, #4]
 800be6a:	9f04      	ldr	r7, [sp, #16]
 800be6c:	3630      	adds	r6, #48	; 0x30
 800be6e:	f805 6b01 	strb.w	r6, [r5], #1
 800be72:	9e00      	ldr	r6, [sp, #0]
 800be74:	1bae      	subs	r6, r5, r6
 800be76:	42b7      	cmp	r7, r6
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	d134      	bne.n	800bee8 <_dtoa_r+0x708>
 800be7e:	f7f4 fa25 	bl	80002cc <__adddf3>
 800be82:	4642      	mov	r2, r8
 800be84:	464b      	mov	r3, r9
 800be86:	4606      	mov	r6, r0
 800be88:	460f      	mov	r7, r1
 800be8a:	f7f4 fe65 	bl	8000b58 <__aeabi_dcmpgt>
 800be8e:	b9c8      	cbnz	r0, 800bec4 <_dtoa_r+0x6e4>
 800be90:	4642      	mov	r2, r8
 800be92:	464b      	mov	r3, r9
 800be94:	4630      	mov	r0, r6
 800be96:	4639      	mov	r1, r7
 800be98:	f7f4 fe36 	bl	8000b08 <__aeabi_dcmpeq>
 800be9c:	b110      	cbz	r0, 800bea4 <_dtoa_r+0x6c4>
 800be9e:	9b01      	ldr	r3, [sp, #4]
 800bea0:	07db      	lsls	r3, r3, #31
 800bea2:	d40f      	bmi.n	800bec4 <_dtoa_r+0x6e4>
 800bea4:	4651      	mov	r1, sl
 800bea6:	4620      	mov	r0, r4
 800bea8:	f000 fb18 	bl	800c4dc <_Bfree>
 800beac:	2300      	movs	r3, #0
 800beae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800beb0:	702b      	strb	r3, [r5, #0]
 800beb2:	f10b 0301 	add.w	r3, fp, #1
 800beb6:	6013      	str	r3, [r2, #0]
 800beb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f43f ace2 	beq.w	800b884 <_dtoa_r+0xa4>
 800bec0:	601d      	str	r5, [r3, #0]
 800bec2:	e4df      	b.n	800b884 <_dtoa_r+0xa4>
 800bec4:	465f      	mov	r7, fp
 800bec6:	462b      	mov	r3, r5
 800bec8:	461d      	mov	r5, r3
 800beca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bece:	2a39      	cmp	r2, #57	; 0x39
 800bed0:	d106      	bne.n	800bee0 <_dtoa_r+0x700>
 800bed2:	9a00      	ldr	r2, [sp, #0]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d1f7      	bne.n	800bec8 <_dtoa_r+0x6e8>
 800bed8:	9900      	ldr	r1, [sp, #0]
 800beda:	2230      	movs	r2, #48	; 0x30
 800bedc:	3701      	adds	r7, #1
 800bede:	700a      	strb	r2, [r1, #0]
 800bee0:	781a      	ldrb	r2, [r3, #0]
 800bee2:	3201      	adds	r2, #1
 800bee4:	701a      	strb	r2, [r3, #0]
 800bee6:	e790      	b.n	800be0a <_dtoa_r+0x62a>
 800bee8:	4ba3      	ldr	r3, [pc, #652]	; (800c178 <_dtoa_r+0x998>)
 800beea:	2200      	movs	r2, #0
 800beec:	f7f4 fba4 	bl	8000638 <__aeabi_dmul>
 800bef0:	2200      	movs	r2, #0
 800bef2:	2300      	movs	r3, #0
 800bef4:	4606      	mov	r6, r0
 800bef6:	460f      	mov	r7, r1
 800bef8:	f7f4 fe06 	bl	8000b08 <__aeabi_dcmpeq>
 800befc:	2800      	cmp	r0, #0
 800befe:	d09e      	beq.n	800be3e <_dtoa_r+0x65e>
 800bf00:	e7d0      	b.n	800bea4 <_dtoa_r+0x6c4>
 800bf02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf04:	2a00      	cmp	r2, #0
 800bf06:	f000 80ca 	beq.w	800c09e <_dtoa_r+0x8be>
 800bf0a:	9a07      	ldr	r2, [sp, #28]
 800bf0c:	2a01      	cmp	r2, #1
 800bf0e:	f300 80ad 	bgt.w	800c06c <_dtoa_r+0x88c>
 800bf12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf14:	2a00      	cmp	r2, #0
 800bf16:	f000 80a5 	beq.w	800c064 <_dtoa_r+0x884>
 800bf1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf1e:	9e08      	ldr	r6, [sp, #32]
 800bf20:	9d05      	ldr	r5, [sp, #20]
 800bf22:	9a05      	ldr	r2, [sp, #20]
 800bf24:	441a      	add	r2, r3
 800bf26:	9205      	str	r2, [sp, #20]
 800bf28:	9a06      	ldr	r2, [sp, #24]
 800bf2a:	2101      	movs	r1, #1
 800bf2c:	441a      	add	r2, r3
 800bf2e:	4620      	mov	r0, r4
 800bf30:	9206      	str	r2, [sp, #24]
 800bf32:	f000 fb89 	bl	800c648 <__i2b>
 800bf36:	4607      	mov	r7, r0
 800bf38:	b165      	cbz	r5, 800bf54 <_dtoa_r+0x774>
 800bf3a:	9b06      	ldr	r3, [sp, #24]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	dd09      	ble.n	800bf54 <_dtoa_r+0x774>
 800bf40:	42ab      	cmp	r3, r5
 800bf42:	9a05      	ldr	r2, [sp, #20]
 800bf44:	bfa8      	it	ge
 800bf46:	462b      	movge	r3, r5
 800bf48:	1ad2      	subs	r2, r2, r3
 800bf4a:	9205      	str	r2, [sp, #20]
 800bf4c:	9a06      	ldr	r2, [sp, #24]
 800bf4e:	1aed      	subs	r5, r5, r3
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	9306      	str	r3, [sp, #24]
 800bf54:	9b08      	ldr	r3, [sp, #32]
 800bf56:	b1f3      	cbz	r3, 800bf96 <_dtoa_r+0x7b6>
 800bf58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f000 80a3 	beq.w	800c0a6 <_dtoa_r+0x8c6>
 800bf60:	2e00      	cmp	r6, #0
 800bf62:	dd10      	ble.n	800bf86 <_dtoa_r+0x7a6>
 800bf64:	4639      	mov	r1, r7
 800bf66:	4632      	mov	r2, r6
 800bf68:	4620      	mov	r0, r4
 800bf6a:	f000 fc2d 	bl	800c7c8 <__pow5mult>
 800bf6e:	4652      	mov	r2, sl
 800bf70:	4601      	mov	r1, r0
 800bf72:	4607      	mov	r7, r0
 800bf74:	4620      	mov	r0, r4
 800bf76:	f000 fb7d 	bl	800c674 <__multiply>
 800bf7a:	4651      	mov	r1, sl
 800bf7c:	4680      	mov	r8, r0
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f000 faac 	bl	800c4dc <_Bfree>
 800bf84:	46c2      	mov	sl, r8
 800bf86:	9b08      	ldr	r3, [sp, #32]
 800bf88:	1b9a      	subs	r2, r3, r6
 800bf8a:	d004      	beq.n	800bf96 <_dtoa_r+0x7b6>
 800bf8c:	4651      	mov	r1, sl
 800bf8e:	4620      	mov	r0, r4
 800bf90:	f000 fc1a 	bl	800c7c8 <__pow5mult>
 800bf94:	4682      	mov	sl, r0
 800bf96:	2101      	movs	r1, #1
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f000 fb55 	bl	800c648 <__i2b>
 800bf9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	4606      	mov	r6, r0
 800bfa4:	f340 8081 	ble.w	800c0aa <_dtoa_r+0x8ca>
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	4601      	mov	r1, r0
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 fc0b 	bl	800c7c8 <__pow5mult>
 800bfb2:	9b07      	ldr	r3, [sp, #28]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	dd7a      	ble.n	800c0b0 <_dtoa_r+0x8d0>
 800bfba:	f04f 0800 	mov.w	r8, #0
 800bfbe:	6933      	ldr	r3, [r6, #16]
 800bfc0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bfc4:	6918      	ldr	r0, [r3, #16]
 800bfc6:	f000 faf1 	bl	800c5ac <__hi0bits>
 800bfca:	f1c0 0020 	rsb	r0, r0, #32
 800bfce:	9b06      	ldr	r3, [sp, #24]
 800bfd0:	4418      	add	r0, r3
 800bfd2:	f010 001f 	ands.w	r0, r0, #31
 800bfd6:	f000 8094 	beq.w	800c102 <_dtoa_r+0x922>
 800bfda:	f1c0 0320 	rsb	r3, r0, #32
 800bfde:	2b04      	cmp	r3, #4
 800bfe0:	f340 8085 	ble.w	800c0ee <_dtoa_r+0x90e>
 800bfe4:	9b05      	ldr	r3, [sp, #20]
 800bfe6:	f1c0 001c 	rsb	r0, r0, #28
 800bfea:	4403      	add	r3, r0
 800bfec:	9305      	str	r3, [sp, #20]
 800bfee:	9b06      	ldr	r3, [sp, #24]
 800bff0:	4403      	add	r3, r0
 800bff2:	4405      	add	r5, r0
 800bff4:	9306      	str	r3, [sp, #24]
 800bff6:	9b05      	ldr	r3, [sp, #20]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	dd05      	ble.n	800c008 <_dtoa_r+0x828>
 800bffc:	4651      	mov	r1, sl
 800bffe:	461a      	mov	r2, r3
 800c000:	4620      	mov	r0, r4
 800c002:	f000 fc3b 	bl	800c87c <__lshift>
 800c006:	4682      	mov	sl, r0
 800c008:	9b06      	ldr	r3, [sp, #24]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	dd05      	ble.n	800c01a <_dtoa_r+0x83a>
 800c00e:	4631      	mov	r1, r6
 800c010:	461a      	mov	r2, r3
 800c012:	4620      	mov	r0, r4
 800c014:	f000 fc32 	bl	800c87c <__lshift>
 800c018:	4606      	mov	r6, r0
 800c01a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d072      	beq.n	800c106 <_dtoa_r+0x926>
 800c020:	4631      	mov	r1, r6
 800c022:	4650      	mov	r0, sl
 800c024:	f000 fc96 	bl	800c954 <__mcmp>
 800c028:	2800      	cmp	r0, #0
 800c02a:	da6c      	bge.n	800c106 <_dtoa_r+0x926>
 800c02c:	2300      	movs	r3, #0
 800c02e:	4651      	mov	r1, sl
 800c030:	220a      	movs	r2, #10
 800c032:	4620      	mov	r0, r4
 800c034:	f000 fa74 	bl	800c520 <__multadd>
 800c038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c03a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c03e:	4682      	mov	sl, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	f000 81b0 	beq.w	800c3a6 <_dtoa_r+0xbc6>
 800c046:	2300      	movs	r3, #0
 800c048:	4639      	mov	r1, r7
 800c04a:	220a      	movs	r2, #10
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 fa67 	bl	800c520 <__multadd>
 800c052:	9b01      	ldr	r3, [sp, #4]
 800c054:	2b00      	cmp	r3, #0
 800c056:	4607      	mov	r7, r0
 800c058:	f300 8096 	bgt.w	800c188 <_dtoa_r+0x9a8>
 800c05c:	9b07      	ldr	r3, [sp, #28]
 800c05e:	2b02      	cmp	r3, #2
 800c060:	dc59      	bgt.n	800c116 <_dtoa_r+0x936>
 800c062:	e091      	b.n	800c188 <_dtoa_r+0x9a8>
 800c064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c066:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c06a:	e758      	b.n	800bf1e <_dtoa_r+0x73e>
 800c06c:	9b04      	ldr	r3, [sp, #16]
 800c06e:	1e5e      	subs	r6, r3, #1
 800c070:	9b08      	ldr	r3, [sp, #32]
 800c072:	42b3      	cmp	r3, r6
 800c074:	bfbf      	itttt	lt
 800c076:	9b08      	ldrlt	r3, [sp, #32]
 800c078:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c07a:	9608      	strlt	r6, [sp, #32]
 800c07c:	1af3      	sublt	r3, r6, r3
 800c07e:	bfb4      	ite	lt
 800c080:	18d2      	addlt	r2, r2, r3
 800c082:	1b9e      	subge	r6, r3, r6
 800c084:	9b04      	ldr	r3, [sp, #16]
 800c086:	bfbc      	itt	lt
 800c088:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c08a:	2600      	movlt	r6, #0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	bfb7      	itett	lt
 800c090:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c094:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c098:	1a9d      	sublt	r5, r3, r2
 800c09a:	2300      	movlt	r3, #0
 800c09c:	e741      	b.n	800bf22 <_dtoa_r+0x742>
 800c09e:	9e08      	ldr	r6, [sp, #32]
 800c0a0:	9d05      	ldr	r5, [sp, #20]
 800c0a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c0a4:	e748      	b.n	800bf38 <_dtoa_r+0x758>
 800c0a6:	9a08      	ldr	r2, [sp, #32]
 800c0a8:	e770      	b.n	800bf8c <_dtoa_r+0x7ac>
 800c0aa:	9b07      	ldr	r3, [sp, #28]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	dc19      	bgt.n	800c0e4 <_dtoa_r+0x904>
 800c0b0:	9b02      	ldr	r3, [sp, #8]
 800c0b2:	b9bb      	cbnz	r3, 800c0e4 <_dtoa_r+0x904>
 800c0b4:	9b03      	ldr	r3, [sp, #12]
 800c0b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0ba:	b99b      	cbnz	r3, 800c0e4 <_dtoa_r+0x904>
 800c0bc:	9b03      	ldr	r3, [sp, #12]
 800c0be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0c2:	0d1b      	lsrs	r3, r3, #20
 800c0c4:	051b      	lsls	r3, r3, #20
 800c0c6:	b183      	cbz	r3, 800c0ea <_dtoa_r+0x90a>
 800c0c8:	9b05      	ldr	r3, [sp, #20]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	9305      	str	r3, [sp, #20]
 800c0ce:	9b06      	ldr	r3, [sp, #24]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	9306      	str	r3, [sp, #24]
 800c0d4:	f04f 0801 	mov.w	r8, #1
 800c0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f47f af6f 	bne.w	800bfbe <_dtoa_r+0x7de>
 800c0e0:	2001      	movs	r0, #1
 800c0e2:	e774      	b.n	800bfce <_dtoa_r+0x7ee>
 800c0e4:	f04f 0800 	mov.w	r8, #0
 800c0e8:	e7f6      	b.n	800c0d8 <_dtoa_r+0x8f8>
 800c0ea:	4698      	mov	r8, r3
 800c0ec:	e7f4      	b.n	800c0d8 <_dtoa_r+0x8f8>
 800c0ee:	d082      	beq.n	800bff6 <_dtoa_r+0x816>
 800c0f0:	9a05      	ldr	r2, [sp, #20]
 800c0f2:	331c      	adds	r3, #28
 800c0f4:	441a      	add	r2, r3
 800c0f6:	9205      	str	r2, [sp, #20]
 800c0f8:	9a06      	ldr	r2, [sp, #24]
 800c0fa:	441a      	add	r2, r3
 800c0fc:	441d      	add	r5, r3
 800c0fe:	9206      	str	r2, [sp, #24]
 800c100:	e779      	b.n	800bff6 <_dtoa_r+0x816>
 800c102:	4603      	mov	r3, r0
 800c104:	e7f4      	b.n	800c0f0 <_dtoa_r+0x910>
 800c106:	9b04      	ldr	r3, [sp, #16]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	dc37      	bgt.n	800c17c <_dtoa_r+0x99c>
 800c10c:	9b07      	ldr	r3, [sp, #28]
 800c10e:	2b02      	cmp	r3, #2
 800c110:	dd34      	ble.n	800c17c <_dtoa_r+0x99c>
 800c112:	9b04      	ldr	r3, [sp, #16]
 800c114:	9301      	str	r3, [sp, #4]
 800c116:	9b01      	ldr	r3, [sp, #4]
 800c118:	b963      	cbnz	r3, 800c134 <_dtoa_r+0x954>
 800c11a:	4631      	mov	r1, r6
 800c11c:	2205      	movs	r2, #5
 800c11e:	4620      	mov	r0, r4
 800c120:	f000 f9fe 	bl	800c520 <__multadd>
 800c124:	4601      	mov	r1, r0
 800c126:	4606      	mov	r6, r0
 800c128:	4650      	mov	r0, sl
 800c12a:	f000 fc13 	bl	800c954 <__mcmp>
 800c12e:	2800      	cmp	r0, #0
 800c130:	f73f adbb 	bgt.w	800bcaa <_dtoa_r+0x4ca>
 800c134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c136:	9d00      	ldr	r5, [sp, #0]
 800c138:	ea6f 0b03 	mvn.w	fp, r3
 800c13c:	f04f 0800 	mov.w	r8, #0
 800c140:	4631      	mov	r1, r6
 800c142:	4620      	mov	r0, r4
 800c144:	f000 f9ca 	bl	800c4dc <_Bfree>
 800c148:	2f00      	cmp	r7, #0
 800c14a:	f43f aeab 	beq.w	800bea4 <_dtoa_r+0x6c4>
 800c14e:	f1b8 0f00 	cmp.w	r8, #0
 800c152:	d005      	beq.n	800c160 <_dtoa_r+0x980>
 800c154:	45b8      	cmp	r8, r7
 800c156:	d003      	beq.n	800c160 <_dtoa_r+0x980>
 800c158:	4641      	mov	r1, r8
 800c15a:	4620      	mov	r0, r4
 800c15c:	f000 f9be 	bl	800c4dc <_Bfree>
 800c160:	4639      	mov	r1, r7
 800c162:	4620      	mov	r0, r4
 800c164:	f000 f9ba 	bl	800c4dc <_Bfree>
 800c168:	e69c      	b.n	800bea4 <_dtoa_r+0x6c4>
 800c16a:	2600      	movs	r6, #0
 800c16c:	4637      	mov	r7, r6
 800c16e:	e7e1      	b.n	800c134 <_dtoa_r+0x954>
 800c170:	46bb      	mov	fp, r7
 800c172:	4637      	mov	r7, r6
 800c174:	e599      	b.n	800bcaa <_dtoa_r+0x4ca>
 800c176:	bf00      	nop
 800c178:	40240000 	.word	0x40240000
 800c17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f000 80c8 	beq.w	800c314 <_dtoa_r+0xb34>
 800c184:	9b04      	ldr	r3, [sp, #16]
 800c186:	9301      	str	r3, [sp, #4]
 800c188:	2d00      	cmp	r5, #0
 800c18a:	dd05      	ble.n	800c198 <_dtoa_r+0x9b8>
 800c18c:	4639      	mov	r1, r7
 800c18e:	462a      	mov	r2, r5
 800c190:	4620      	mov	r0, r4
 800c192:	f000 fb73 	bl	800c87c <__lshift>
 800c196:	4607      	mov	r7, r0
 800c198:	f1b8 0f00 	cmp.w	r8, #0
 800c19c:	d05b      	beq.n	800c256 <_dtoa_r+0xa76>
 800c19e:	6879      	ldr	r1, [r7, #4]
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f000 f95b 	bl	800c45c <_Balloc>
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	b928      	cbnz	r0, 800c1b6 <_dtoa_r+0x9d6>
 800c1aa:	4b83      	ldr	r3, [pc, #524]	; (800c3b8 <_dtoa_r+0xbd8>)
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c1b2:	f7ff bb2e 	b.w	800b812 <_dtoa_r+0x32>
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	3202      	adds	r2, #2
 800c1ba:	0092      	lsls	r2, r2, #2
 800c1bc:	f107 010c 	add.w	r1, r7, #12
 800c1c0:	300c      	adds	r0, #12
 800c1c2:	f7ff fa74 	bl	800b6ae <memcpy>
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f000 fb56 	bl	800c87c <__lshift>
 800c1d0:	9b00      	ldr	r3, [sp, #0]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	9304      	str	r3, [sp, #16]
 800c1d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1da:	4413      	add	r3, r2
 800c1dc:	9308      	str	r3, [sp, #32]
 800c1de:	9b02      	ldr	r3, [sp, #8]
 800c1e0:	f003 0301 	and.w	r3, r3, #1
 800c1e4:	46b8      	mov	r8, r7
 800c1e6:	9306      	str	r3, [sp, #24]
 800c1e8:	4607      	mov	r7, r0
 800c1ea:	9b04      	ldr	r3, [sp, #16]
 800c1ec:	4631      	mov	r1, r6
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	4650      	mov	r0, sl
 800c1f2:	9301      	str	r3, [sp, #4]
 800c1f4:	f7ff fa69 	bl	800b6ca <quorem>
 800c1f8:	4641      	mov	r1, r8
 800c1fa:	9002      	str	r0, [sp, #8]
 800c1fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c200:	4650      	mov	r0, sl
 800c202:	f000 fba7 	bl	800c954 <__mcmp>
 800c206:	463a      	mov	r2, r7
 800c208:	9005      	str	r0, [sp, #20]
 800c20a:	4631      	mov	r1, r6
 800c20c:	4620      	mov	r0, r4
 800c20e:	f000 fbbd 	bl	800c98c <__mdiff>
 800c212:	68c2      	ldr	r2, [r0, #12]
 800c214:	4605      	mov	r5, r0
 800c216:	bb02      	cbnz	r2, 800c25a <_dtoa_r+0xa7a>
 800c218:	4601      	mov	r1, r0
 800c21a:	4650      	mov	r0, sl
 800c21c:	f000 fb9a 	bl	800c954 <__mcmp>
 800c220:	4602      	mov	r2, r0
 800c222:	4629      	mov	r1, r5
 800c224:	4620      	mov	r0, r4
 800c226:	9209      	str	r2, [sp, #36]	; 0x24
 800c228:	f000 f958 	bl	800c4dc <_Bfree>
 800c22c:	9b07      	ldr	r3, [sp, #28]
 800c22e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c230:	9d04      	ldr	r5, [sp, #16]
 800c232:	ea43 0102 	orr.w	r1, r3, r2
 800c236:	9b06      	ldr	r3, [sp, #24]
 800c238:	4319      	orrs	r1, r3
 800c23a:	d110      	bne.n	800c25e <_dtoa_r+0xa7e>
 800c23c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c240:	d029      	beq.n	800c296 <_dtoa_r+0xab6>
 800c242:	9b05      	ldr	r3, [sp, #20]
 800c244:	2b00      	cmp	r3, #0
 800c246:	dd02      	ble.n	800c24e <_dtoa_r+0xa6e>
 800c248:	9b02      	ldr	r3, [sp, #8]
 800c24a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c24e:	9b01      	ldr	r3, [sp, #4]
 800c250:	f883 9000 	strb.w	r9, [r3]
 800c254:	e774      	b.n	800c140 <_dtoa_r+0x960>
 800c256:	4638      	mov	r0, r7
 800c258:	e7ba      	b.n	800c1d0 <_dtoa_r+0x9f0>
 800c25a:	2201      	movs	r2, #1
 800c25c:	e7e1      	b.n	800c222 <_dtoa_r+0xa42>
 800c25e:	9b05      	ldr	r3, [sp, #20]
 800c260:	2b00      	cmp	r3, #0
 800c262:	db04      	blt.n	800c26e <_dtoa_r+0xa8e>
 800c264:	9907      	ldr	r1, [sp, #28]
 800c266:	430b      	orrs	r3, r1
 800c268:	9906      	ldr	r1, [sp, #24]
 800c26a:	430b      	orrs	r3, r1
 800c26c:	d120      	bne.n	800c2b0 <_dtoa_r+0xad0>
 800c26e:	2a00      	cmp	r2, #0
 800c270:	dded      	ble.n	800c24e <_dtoa_r+0xa6e>
 800c272:	4651      	mov	r1, sl
 800c274:	2201      	movs	r2, #1
 800c276:	4620      	mov	r0, r4
 800c278:	f000 fb00 	bl	800c87c <__lshift>
 800c27c:	4631      	mov	r1, r6
 800c27e:	4682      	mov	sl, r0
 800c280:	f000 fb68 	bl	800c954 <__mcmp>
 800c284:	2800      	cmp	r0, #0
 800c286:	dc03      	bgt.n	800c290 <_dtoa_r+0xab0>
 800c288:	d1e1      	bne.n	800c24e <_dtoa_r+0xa6e>
 800c28a:	f019 0f01 	tst.w	r9, #1
 800c28e:	d0de      	beq.n	800c24e <_dtoa_r+0xa6e>
 800c290:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c294:	d1d8      	bne.n	800c248 <_dtoa_r+0xa68>
 800c296:	9a01      	ldr	r2, [sp, #4]
 800c298:	2339      	movs	r3, #57	; 0x39
 800c29a:	7013      	strb	r3, [r2, #0]
 800c29c:	462b      	mov	r3, r5
 800c29e:	461d      	mov	r5, r3
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2a6:	2a39      	cmp	r2, #57	; 0x39
 800c2a8:	d06c      	beq.n	800c384 <_dtoa_r+0xba4>
 800c2aa:	3201      	adds	r2, #1
 800c2ac:	701a      	strb	r2, [r3, #0]
 800c2ae:	e747      	b.n	800c140 <_dtoa_r+0x960>
 800c2b0:	2a00      	cmp	r2, #0
 800c2b2:	dd07      	ble.n	800c2c4 <_dtoa_r+0xae4>
 800c2b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c2b8:	d0ed      	beq.n	800c296 <_dtoa_r+0xab6>
 800c2ba:	9a01      	ldr	r2, [sp, #4]
 800c2bc:	f109 0301 	add.w	r3, r9, #1
 800c2c0:	7013      	strb	r3, [r2, #0]
 800c2c2:	e73d      	b.n	800c140 <_dtoa_r+0x960>
 800c2c4:	9b04      	ldr	r3, [sp, #16]
 800c2c6:	9a08      	ldr	r2, [sp, #32]
 800c2c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d043      	beq.n	800c358 <_dtoa_r+0xb78>
 800c2d0:	4651      	mov	r1, sl
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	220a      	movs	r2, #10
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	f000 f922 	bl	800c520 <__multadd>
 800c2dc:	45b8      	cmp	r8, r7
 800c2de:	4682      	mov	sl, r0
 800c2e0:	f04f 0300 	mov.w	r3, #0
 800c2e4:	f04f 020a 	mov.w	r2, #10
 800c2e8:	4641      	mov	r1, r8
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	d107      	bne.n	800c2fe <_dtoa_r+0xb1e>
 800c2ee:	f000 f917 	bl	800c520 <__multadd>
 800c2f2:	4680      	mov	r8, r0
 800c2f4:	4607      	mov	r7, r0
 800c2f6:	9b04      	ldr	r3, [sp, #16]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	9304      	str	r3, [sp, #16]
 800c2fc:	e775      	b.n	800c1ea <_dtoa_r+0xa0a>
 800c2fe:	f000 f90f 	bl	800c520 <__multadd>
 800c302:	4639      	mov	r1, r7
 800c304:	4680      	mov	r8, r0
 800c306:	2300      	movs	r3, #0
 800c308:	220a      	movs	r2, #10
 800c30a:	4620      	mov	r0, r4
 800c30c:	f000 f908 	bl	800c520 <__multadd>
 800c310:	4607      	mov	r7, r0
 800c312:	e7f0      	b.n	800c2f6 <_dtoa_r+0xb16>
 800c314:	9b04      	ldr	r3, [sp, #16]
 800c316:	9301      	str	r3, [sp, #4]
 800c318:	9d00      	ldr	r5, [sp, #0]
 800c31a:	4631      	mov	r1, r6
 800c31c:	4650      	mov	r0, sl
 800c31e:	f7ff f9d4 	bl	800b6ca <quorem>
 800c322:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c326:	9b00      	ldr	r3, [sp, #0]
 800c328:	f805 9b01 	strb.w	r9, [r5], #1
 800c32c:	1aea      	subs	r2, r5, r3
 800c32e:	9b01      	ldr	r3, [sp, #4]
 800c330:	4293      	cmp	r3, r2
 800c332:	dd07      	ble.n	800c344 <_dtoa_r+0xb64>
 800c334:	4651      	mov	r1, sl
 800c336:	2300      	movs	r3, #0
 800c338:	220a      	movs	r2, #10
 800c33a:	4620      	mov	r0, r4
 800c33c:	f000 f8f0 	bl	800c520 <__multadd>
 800c340:	4682      	mov	sl, r0
 800c342:	e7ea      	b.n	800c31a <_dtoa_r+0xb3a>
 800c344:	9b01      	ldr	r3, [sp, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	bfc8      	it	gt
 800c34a:	461d      	movgt	r5, r3
 800c34c:	9b00      	ldr	r3, [sp, #0]
 800c34e:	bfd8      	it	le
 800c350:	2501      	movle	r5, #1
 800c352:	441d      	add	r5, r3
 800c354:	f04f 0800 	mov.w	r8, #0
 800c358:	4651      	mov	r1, sl
 800c35a:	2201      	movs	r2, #1
 800c35c:	4620      	mov	r0, r4
 800c35e:	f000 fa8d 	bl	800c87c <__lshift>
 800c362:	4631      	mov	r1, r6
 800c364:	4682      	mov	sl, r0
 800c366:	f000 faf5 	bl	800c954 <__mcmp>
 800c36a:	2800      	cmp	r0, #0
 800c36c:	dc96      	bgt.n	800c29c <_dtoa_r+0xabc>
 800c36e:	d102      	bne.n	800c376 <_dtoa_r+0xb96>
 800c370:	f019 0f01 	tst.w	r9, #1
 800c374:	d192      	bne.n	800c29c <_dtoa_r+0xabc>
 800c376:	462b      	mov	r3, r5
 800c378:	461d      	mov	r5, r3
 800c37a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c37e:	2a30      	cmp	r2, #48	; 0x30
 800c380:	d0fa      	beq.n	800c378 <_dtoa_r+0xb98>
 800c382:	e6dd      	b.n	800c140 <_dtoa_r+0x960>
 800c384:	9a00      	ldr	r2, [sp, #0]
 800c386:	429a      	cmp	r2, r3
 800c388:	d189      	bne.n	800c29e <_dtoa_r+0xabe>
 800c38a:	f10b 0b01 	add.w	fp, fp, #1
 800c38e:	2331      	movs	r3, #49	; 0x31
 800c390:	e796      	b.n	800c2c0 <_dtoa_r+0xae0>
 800c392:	4b0a      	ldr	r3, [pc, #40]	; (800c3bc <_dtoa_r+0xbdc>)
 800c394:	f7ff ba99 	b.w	800b8ca <_dtoa_r+0xea>
 800c398:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f47f aa6d 	bne.w	800b87a <_dtoa_r+0x9a>
 800c3a0:	4b07      	ldr	r3, [pc, #28]	; (800c3c0 <_dtoa_r+0xbe0>)
 800c3a2:	f7ff ba92 	b.w	800b8ca <_dtoa_r+0xea>
 800c3a6:	9b01      	ldr	r3, [sp, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	dcb5      	bgt.n	800c318 <_dtoa_r+0xb38>
 800c3ac:	9b07      	ldr	r3, [sp, #28]
 800c3ae:	2b02      	cmp	r3, #2
 800c3b0:	f73f aeb1 	bgt.w	800c116 <_dtoa_r+0x936>
 800c3b4:	e7b0      	b.n	800c318 <_dtoa_r+0xb38>
 800c3b6:	bf00      	nop
 800c3b8:	080dc642 	.word	0x080dc642
 800c3bc:	0800df91 	.word	0x0800df91
 800c3c0:	080dc5c6 	.word	0x080dc5c6

0800c3c4 <_free_r>:
 800c3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3c6:	2900      	cmp	r1, #0
 800c3c8:	d044      	beq.n	800c454 <_free_r+0x90>
 800c3ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3ce:	9001      	str	r0, [sp, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f1a1 0404 	sub.w	r4, r1, #4
 800c3d6:	bfb8      	it	lt
 800c3d8:	18e4      	addlt	r4, r4, r3
 800c3da:	f7fe fb4f 	bl	800aa7c <__malloc_lock>
 800c3de:	4a1e      	ldr	r2, [pc, #120]	; (800c458 <_free_r+0x94>)
 800c3e0:	9801      	ldr	r0, [sp, #4]
 800c3e2:	6813      	ldr	r3, [r2, #0]
 800c3e4:	b933      	cbnz	r3, 800c3f4 <_free_r+0x30>
 800c3e6:	6063      	str	r3, [r4, #4]
 800c3e8:	6014      	str	r4, [r2, #0]
 800c3ea:	b003      	add	sp, #12
 800c3ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3f0:	f7fe bb4a 	b.w	800aa88 <__malloc_unlock>
 800c3f4:	42a3      	cmp	r3, r4
 800c3f6:	d908      	bls.n	800c40a <_free_r+0x46>
 800c3f8:	6825      	ldr	r5, [r4, #0]
 800c3fa:	1961      	adds	r1, r4, r5
 800c3fc:	428b      	cmp	r3, r1
 800c3fe:	bf01      	itttt	eq
 800c400:	6819      	ldreq	r1, [r3, #0]
 800c402:	685b      	ldreq	r3, [r3, #4]
 800c404:	1949      	addeq	r1, r1, r5
 800c406:	6021      	streq	r1, [r4, #0]
 800c408:	e7ed      	b.n	800c3e6 <_free_r+0x22>
 800c40a:	461a      	mov	r2, r3
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	b10b      	cbz	r3, 800c414 <_free_r+0x50>
 800c410:	42a3      	cmp	r3, r4
 800c412:	d9fa      	bls.n	800c40a <_free_r+0x46>
 800c414:	6811      	ldr	r1, [r2, #0]
 800c416:	1855      	adds	r5, r2, r1
 800c418:	42a5      	cmp	r5, r4
 800c41a:	d10b      	bne.n	800c434 <_free_r+0x70>
 800c41c:	6824      	ldr	r4, [r4, #0]
 800c41e:	4421      	add	r1, r4
 800c420:	1854      	adds	r4, r2, r1
 800c422:	42a3      	cmp	r3, r4
 800c424:	6011      	str	r1, [r2, #0]
 800c426:	d1e0      	bne.n	800c3ea <_free_r+0x26>
 800c428:	681c      	ldr	r4, [r3, #0]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	6053      	str	r3, [r2, #4]
 800c42e:	440c      	add	r4, r1
 800c430:	6014      	str	r4, [r2, #0]
 800c432:	e7da      	b.n	800c3ea <_free_r+0x26>
 800c434:	d902      	bls.n	800c43c <_free_r+0x78>
 800c436:	230c      	movs	r3, #12
 800c438:	6003      	str	r3, [r0, #0]
 800c43a:	e7d6      	b.n	800c3ea <_free_r+0x26>
 800c43c:	6825      	ldr	r5, [r4, #0]
 800c43e:	1961      	adds	r1, r4, r5
 800c440:	428b      	cmp	r3, r1
 800c442:	bf04      	itt	eq
 800c444:	6819      	ldreq	r1, [r3, #0]
 800c446:	685b      	ldreq	r3, [r3, #4]
 800c448:	6063      	str	r3, [r4, #4]
 800c44a:	bf04      	itt	eq
 800c44c:	1949      	addeq	r1, r1, r5
 800c44e:	6021      	streq	r1, [r4, #0]
 800c450:	6054      	str	r4, [r2, #4]
 800c452:	e7ca      	b.n	800c3ea <_free_r+0x26>
 800c454:	b003      	add	sp, #12
 800c456:	bd30      	pop	{r4, r5, pc}
 800c458:	2002aa70 	.word	0x2002aa70

0800c45c <_Balloc>:
 800c45c:	b570      	push	{r4, r5, r6, lr}
 800c45e:	69c6      	ldr	r6, [r0, #28]
 800c460:	4604      	mov	r4, r0
 800c462:	460d      	mov	r5, r1
 800c464:	b976      	cbnz	r6, 800c484 <_Balloc+0x28>
 800c466:	2010      	movs	r0, #16
 800c468:	f7f8 f804 	bl	8004474 <__wrap_malloc>
 800c46c:	4602      	mov	r2, r0
 800c46e:	61e0      	str	r0, [r4, #28]
 800c470:	b920      	cbnz	r0, 800c47c <_Balloc+0x20>
 800c472:	4b18      	ldr	r3, [pc, #96]	; (800c4d4 <_Balloc+0x78>)
 800c474:	4818      	ldr	r0, [pc, #96]	; (800c4d8 <_Balloc+0x7c>)
 800c476:	216b      	movs	r1, #107	; 0x6b
 800c478:	f000 fc1a 	bl	800ccb0 <__assert_func>
 800c47c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c480:	6006      	str	r6, [r0, #0]
 800c482:	60c6      	str	r6, [r0, #12]
 800c484:	69e6      	ldr	r6, [r4, #28]
 800c486:	68f3      	ldr	r3, [r6, #12]
 800c488:	b183      	cbz	r3, 800c4ac <_Balloc+0x50>
 800c48a:	69e3      	ldr	r3, [r4, #28]
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c492:	b9b8      	cbnz	r0, 800c4c4 <_Balloc+0x68>
 800c494:	2101      	movs	r1, #1
 800c496:	fa01 f605 	lsl.w	r6, r1, r5
 800c49a:	1d72      	adds	r2, r6, #5
 800c49c:	0092      	lsls	r2, r2, #2
 800c49e:	4620      	mov	r0, r4
 800c4a0:	f000 fc24 	bl	800ccec <_calloc_r>
 800c4a4:	b160      	cbz	r0, 800c4c0 <_Balloc+0x64>
 800c4a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4aa:	e00e      	b.n	800c4ca <_Balloc+0x6e>
 800c4ac:	2221      	movs	r2, #33	; 0x21
 800c4ae:	2104      	movs	r1, #4
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f000 fc1b 	bl	800ccec <_calloc_r>
 800c4b6:	69e3      	ldr	r3, [r4, #28]
 800c4b8:	60f0      	str	r0, [r6, #12]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1e4      	bne.n	800c48a <_Balloc+0x2e>
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	bd70      	pop	{r4, r5, r6, pc}
 800c4c4:	6802      	ldr	r2, [r0, #0]
 800c4c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4d0:	e7f7      	b.n	800c4c2 <_Balloc+0x66>
 800c4d2:	bf00      	nop
 800c4d4:	080dc5d3 	.word	0x080dc5d3
 800c4d8:	080dc653 	.word	0x080dc653

0800c4dc <_Bfree>:
 800c4dc:	b570      	push	{r4, r5, r6, lr}
 800c4de:	69c6      	ldr	r6, [r0, #28]
 800c4e0:	4605      	mov	r5, r0
 800c4e2:	460c      	mov	r4, r1
 800c4e4:	b976      	cbnz	r6, 800c504 <_Bfree+0x28>
 800c4e6:	2010      	movs	r0, #16
 800c4e8:	f7f7 ffc4 	bl	8004474 <__wrap_malloc>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	61e8      	str	r0, [r5, #28]
 800c4f0:	b920      	cbnz	r0, 800c4fc <_Bfree+0x20>
 800c4f2:	4b09      	ldr	r3, [pc, #36]	; (800c518 <_Bfree+0x3c>)
 800c4f4:	4809      	ldr	r0, [pc, #36]	; (800c51c <_Bfree+0x40>)
 800c4f6:	218f      	movs	r1, #143	; 0x8f
 800c4f8:	f000 fbda 	bl	800ccb0 <__assert_func>
 800c4fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c500:	6006      	str	r6, [r0, #0]
 800c502:	60c6      	str	r6, [r0, #12]
 800c504:	b13c      	cbz	r4, 800c516 <_Bfree+0x3a>
 800c506:	69eb      	ldr	r3, [r5, #28]
 800c508:	6862      	ldr	r2, [r4, #4]
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c510:	6021      	str	r1, [r4, #0]
 800c512:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c516:	bd70      	pop	{r4, r5, r6, pc}
 800c518:	080dc5d3 	.word	0x080dc5d3
 800c51c:	080dc653 	.word	0x080dc653

0800c520 <__multadd>:
 800c520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c524:	690d      	ldr	r5, [r1, #16]
 800c526:	4607      	mov	r7, r0
 800c528:	460c      	mov	r4, r1
 800c52a:	461e      	mov	r6, r3
 800c52c:	f101 0c14 	add.w	ip, r1, #20
 800c530:	2000      	movs	r0, #0
 800c532:	f8dc 3000 	ldr.w	r3, [ip]
 800c536:	b299      	uxth	r1, r3
 800c538:	fb02 6101 	mla	r1, r2, r1, r6
 800c53c:	0c1e      	lsrs	r6, r3, #16
 800c53e:	0c0b      	lsrs	r3, r1, #16
 800c540:	fb02 3306 	mla	r3, r2, r6, r3
 800c544:	b289      	uxth	r1, r1
 800c546:	3001      	adds	r0, #1
 800c548:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c54c:	4285      	cmp	r5, r0
 800c54e:	f84c 1b04 	str.w	r1, [ip], #4
 800c552:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c556:	dcec      	bgt.n	800c532 <__multadd+0x12>
 800c558:	b30e      	cbz	r6, 800c59e <__multadd+0x7e>
 800c55a:	68a3      	ldr	r3, [r4, #8]
 800c55c:	42ab      	cmp	r3, r5
 800c55e:	dc19      	bgt.n	800c594 <__multadd+0x74>
 800c560:	6861      	ldr	r1, [r4, #4]
 800c562:	4638      	mov	r0, r7
 800c564:	3101      	adds	r1, #1
 800c566:	f7ff ff79 	bl	800c45c <_Balloc>
 800c56a:	4680      	mov	r8, r0
 800c56c:	b928      	cbnz	r0, 800c57a <__multadd+0x5a>
 800c56e:	4602      	mov	r2, r0
 800c570:	4b0c      	ldr	r3, [pc, #48]	; (800c5a4 <__multadd+0x84>)
 800c572:	480d      	ldr	r0, [pc, #52]	; (800c5a8 <__multadd+0x88>)
 800c574:	21ba      	movs	r1, #186	; 0xba
 800c576:	f000 fb9b 	bl	800ccb0 <__assert_func>
 800c57a:	6922      	ldr	r2, [r4, #16]
 800c57c:	3202      	adds	r2, #2
 800c57e:	f104 010c 	add.w	r1, r4, #12
 800c582:	0092      	lsls	r2, r2, #2
 800c584:	300c      	adds	r0, #12
 800c586:	f7ff f892 	bl	800b6ae <memcpy>
 800c58a:	4621      	mov	r1, r4
 800c58c:	4638      	mov	r0, r7
 800c58e:	f7ff ffa5 	bl	800c4dc <_Bfree>
 800c592:	4644      	mov	r4, r8
 800c594:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c598:	3501      	adds	r5, #1
 800c59a:	615e      	str	r6, [r3, #20]
 800c59c:	6125      	str	r5, [r4, #16]
 800c59e:	4620      	mov	r0, r4
 800c5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5a4:	080dc642 	.word	0x080dc642
 800c5a8:	080dc653 	.word	0x080dc653

0800c5ac <__hi0bits>:
 800c5ac:	0c03      	lsrs	r3, r0, #16
 800c5ae:	041b      	lsls	r3, r3, #16
 800c5b0:	b9d3      	cbnz	r3, 800c5e8 <__hi0bits+0x3c>
 800c5b2:	0400      	lsls	r0, r0, #16
 800c5b4:	2310      	movs	r3, #16
 800c5b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c5ba:	bf04      	itt	eq
 800c5bc:	0200      	lsleq	r0, r0, #8
 800c5be:	3308      	addeq	r3, #8
 800c5c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c5c4:	bf04      	itt	eq
 800c5c6:	0100      	lsleq	r0, r0, #4
 800c5c8:	3304      	addeq	r3, #4
 800c5ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c5ce:	bf04      	itt	eq
 800c5d0:	0080      	lsleq	r0, r0, #2
 800c5d2:	3302      	addeq	r3, #2
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	db05      	blt.n	800c5e4 <__hi0bits+0x38>
 800c5d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c5dc:	f103 0301 	add.w	r3, r3, #1
 800c5e0:	bf08      	it	eq
 800c5e2:	2320      	moveq	r3, #32
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	4770      	bx	lr
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	e7e4      	b.n	800c5b6 <__hi0bits+0xa>

0800c5ec <__lo0bits>:
 800c5ec:	6803      	ldr	r3, [r0, #0]
 800c5ee:	f013 0207 	ands.w	r2, r3, #7
 800c5f2:	d00c      	beq.n	800c60e <__lo0bits+0x22>
 800c5f4:	07d9      	lsls	r1, r3, #31
 800c5f6:	d422      	bmi.n	800c63e <__lo0bits+0x52>
 800c5f8:	079a      	lsls	r2, r3, #30
 800c5fa:	bf49      	itett	mi
 800c5fc:	085b      	lsrmi	r3, r3, #1
 800c5fe:	089b      	lsrpl	r3, r3, #2
 800c600:	6003      	strmi	r3, [r0, #0]
 800c602:	2201      	movmi	r2, #1
 800c604:	bf5c      	itt	pl
 800c606:	6003      	strpl	r3, [r0, #0]
 800c608:	2202      	movpl	r2, #2
 800c60a:	4610      	mov	r0, r2
 800c60c:	4770      	bx	lr
 800c60e:	b299      	uxth	r1, r3
 800c610:	b909      	cbnz	r1, 800c616 <__lo0bits+0x2a>
 800c612:	0c1b      	lsrs	r3, r3, #16
 800c614:	2210      	movs	r2, #16
 800c616:	b2d9      	uxtb	r1, r3
 800c618:	b909      	cbnz	r1, 800c61e <__lo0bits+0x32>
 800c61a:	3208      	adds	r2, #8
 800c61c:	0a1b      	lsrs	r3, r3, #8
 800c61e:	0719      	lsls	r1, r3, #28
 800c620:	bf04      	itt	eq
 800c622:	091b      	lsreq	r3, r3, #4
 800c624:	3204      	addeq	r2, #4
 800c626:	0799      	lsls	r1, r3, #30
 800c628:	bf04      	itt	eq
 800c62a:	089b      	lsreq	r3, r3, #2
 800c62c:	3202      	addeq	r2, #2
 800c62e:	07d9      	lsls	r1, r3, #31
 800c630:	d403      	bmi.n	800c63a <__lo0bits+0x4e>
 800c632:	085b      	lsrs	r3, r3, #1
 800c634:	f102 0201 	add.w	r2, r2, #1
 800c638:	d003      	beq.n	800c642 <__lo0bits+0x56>
 800c63a:	6003      	str	r3, [r0, #0]
 800c63c:	e7e5      	b.n	800c60a <__lo0bits+0x1e>
 800c63e:	2200      	movs	r2, #0
 800c640:	e7e3      	b.n	800c60a <__lo0bits+0x1e>
 800c642:	2220      	movs	r2, #32
 800c644:	e7e1      	b.n	800c60a <__lo0bits+0x1e>
	...

0800c648 <__i2b>:
 800c648:	b510      	push	{r4, lr}
 800c64a:	460c      	mov	r4, r1
 800c64c:	2101      	movs	r1, #1
 800c64e:	f7ff ff05 	bl	800c45c <_Balloc>
 800c652:	4602      	mov	r2, r0
 800c654:	b928      	cbnz	r0, 800c662 <__i2b+0x1a>
 800c656:	4b05      	ldr	r3, [pc, #20]	; (800c66c <__i2b+0x24>)
 800c658:	4805      	ldr	r0, [pc, #20]	; (800c670 <__i2b+0x28>)
 800c65a:	f240 1145 	movw	r1, #325	; 0x145
 800c65e:	f000 fb27 	bl	800ccb0 <__assert_func>
 800c662:	2301      	movs	r3, #1
 800c664:	6144      	str	r4, [r0, #20]
 800c666:	6103      	str	r3, [r0, #16]
 800c668:	bd10      	pop	{r4, pc}
 800c66a:	bf00      	nop
 800c66c:	080dc642 	.word	0x080dc642
 800c670:	080dc653 	.word	0x080dc653

0800c674 <__multiply>:
 800c674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c678:	4691      	mov	r9, r2
 800c67a:	690a      	ldr	r2, [r1, #16]
 800c67c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c680:	429a      	cmp	r2, r3
 800c682:	bfb8      	it	lt
 800c684:	460b      	movlt	r3, r1
 800c686:	460c      	mov	r4, r1
 800c688:	bfbc      	itt	lt
 800c68a:	464c      	movlt	r4, r9
 800c68c:	4699      	movlt	r9, r3
 800c68e:	6927      	ldr	r7, [r4, #16]
 800c690:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c694:	68a3      	ldr	r3, [r4, #8]
 800c696:	6861      	ldr	r1, [r4, #4]
 800c698:	eb07 060a 	add.w	r6, r7, sl
 800c69c:	42b3      	cmp	r3, r6
 800c69e:	b085      	sub	sp, #20
 800c6a0:	bfb8      	it	lt
 800c6a2:	3101      	addlt	r1, #1
 800c6a4:	f7ff feda 	bl	800c45c <_Balloc>
 800c6a8:	b930      	cbnz	r0, 800c6b8 <__multiply+0x44>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	4b44      	ldr	r3, [pc, #272]	; (800c7c0 <__multiply+0x14c>)
 800c6ae:	4845      	ldr	r0, [pc, #276]	; (800c7c4 <__multiply+0x150>)
 800c6b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c6b4:	f000 fafc 	bl	800ccb0 <__assert_func>
 800c6b8:	f100 0514 	add.w	r5, r0, #20
 800c6bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c6c0:	462b      	mov	r3, r5
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	4543      	cmp	r3, r8
 800c6c6:	d321      	bcc.n	800c70c <__multiply+0x98>
 800c6c8:	f104 0314 	add.w	r3, r4, #20
 800c6cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c6d0:	f109 0314 	add.w	r3, r9, #20
 800c6d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c6d8:	9202      	str	r2, [sp, #8]
 800c6da:	1b3a      	subs	r2, r7, r4
 800c6dc:	3a15      	subs	r2, #21
 800c6de:	f022 0203 	bic.w	r2, r2, #3
 800c6e2:	3204      	adds	r2, #4
 800c6e4:	f104 0115 	add.w	r1, r4, #21
 800c6e8:	428f      	cmp	r7, r1
 800c6ea:	bf38      	it	cc
 800c6ec:	2204      	movcc	r2, #4
 800c6ee:	9201      	str	r2, [sp, #4]
 800c6f0:	9a02      	ldr	r2, [sp, #8]
 800c6f2:	9303      	str	r3, [sp, #12]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d80c      	bhi.n	800c712 <__multiply+0x9e>
 800c6f8:	2e00      	cmp	r6, #0
 800c6fa:	dd03      	ble.n	800c704 <__multiply+0x90>
 800c6fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c700:	2b00      	cmp	r3, #0
 800c702:	d05b      	beq.n	800c7bc <__multiply+0x148>
 800c704:	6106      	str	r6, [r0, #16]
 800c706:	b005      	add	sp, #20
 800c708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c70c:	f843 2b04 	str.w	r2, [r3], #4
 800c710:	e7d8      	b.n	800c6c4 <__multiply+0x50>
 800c712:	f8b3 a000 	ldrh.w	sl, [r3]
 800c716:	f1ba 0f00 	cmp.w	sl, #0
 800c71a:	d024      	beq.n	800c766 <__multiply+0xf2>
 800c71c:	f104 0e14 	add.w	lr, r4, #20
 800c720:	46a9      	mov	r9, r5
 800c722:	f04f 0c00 	mov.w	ip, #0
 800c726:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c72a:	f8d9 1000 	ldr.w	r1, [r9]
 800c72e:	fa1f fb82 	uxth.w	fp, r2
 800c732:	b289      	uxth	r1, r1
 800c734:	fb0a 110b 	mla	r1, sl, fp, r1
 800c738:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c73c:	f8d9 2000 	ldr.w	r2, [r9]
 800c740:	4461      	add	r1, ip
 800c742:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c746:	fb0a c20b 	mla	r2, sl, fp, ip
 800c74a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c74e:	b289      	uxth	r1, r1
 800c750:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c754:	4577      	cmp	r7, lr
 800c756:	f849 1b04 	str.w	r1, [r9], #4
 800c75a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c75e:	d8e2      	bhi.n	800c726 <__multiply+0xb2>
 800c760:	9a01      	ldr	r2, [sp, #4]
 800c762:	f845 c002 	str.w	ip, [r5, r2]
 800c766:	9a03      	ldr	r2, [sp, #12]
 800c768:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c76c:	3304      	adds	r3, #4
 800c76e:	f1b9 0f00 	cmp.w	r9, #0
 800c772:	d021      	beq.n	800c7b8 <__multiply+0x144>
 800c774:	6829      	ldr	r1, [r5, #0]
 800c776:	f104 0c14 	add.w	ip, r4, #20
 800c77a:	46ae      	mov	lr, r5
 800c77c:	f04f 0a00 	mov.w	sl, #0
 800c780:	f8bc b000 	ldrh.w	fp, [ip]
 800c784:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c788:	fb09 220b 	mla	r2, r9, fp, r2
 800c78c:	4452      	add	r2, sl
 800c78e:	b289      	uxth	r1, r1
 800c790:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c794:	f84e 1b04 	str.w	r1, [lr], #4
 800c798:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c79c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7a0:	f8be 1000 	ldrh.w	r1, [lr]
 800c7a4:	fb09 110a 	mla	r1, r9, sl, r1
 800c7a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c7ac:	4567      	cmp	r7, ip
 800c7ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7b2:	d8e5      	bhi.n	800c780 <__multiply+0x10c>
 800c7b4:	9a01      	ldr	r2, [sp, #4]
 800c7b6:	50a9      	str	r1, [r5, r2]
 800c7b8:	3504      	adds	r5, #4
 800c7ba:	e799      	b.n	800c6f0 <__multiply+0x7c>
 800c7bc:	3e01      	subs	r6, #1
 800c7be:	e79b      	b.n	800c6f8 <__multiply+0x84>
 800c7c0:	080dc642 	.word	0x080dc642
 800c7c4:	080dc653 	.word	0x080dc653

0800c7c8 <__pow5mult>:
 800c7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7cc:	4615      	mov	r5, r2
 800c7ce:	f012 0203 	ands.w	r2, r2, #3
 800c7d2:	4606      	mov	r6, r0
 800c7d4:	460f      	mov	r7, r1
 800c7d6:	d007      	beq.n	800c7e8 <__pow5mult+0x20>
 800c7d8:	4c25      	ldr	r4, [pc, #148]	; (800c870 <__pow5mult+0xa8>)
 800c7da:	3a01      	subs	r2, #1
 800c7dc:	2300      	movs	r3, #0
 800c7de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7e2:	f7ff fe9d 	bl	800c520 <__multadd>
 800c7e6:	4607      	mov	r7, r0
 800c7e8:	10ad      	asrs	r5, r5, #2
 800c7ea:	d03d      	beq.n	800c868 <__pow5mult+0xa0>
 800c7ec:	69f4      	ldr	r4, [r6, #28]
 800c7ee:	b97c      	cbnz	r4, 800c810 <__pow5mult+0x48>
 800c7f0:	2010      	movs	r0, #16
 800c7f2:	f7f7 fe3f 	bl	8004474 <__wrap_malloc>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	61f0      	str	r0, [r6, #28]
 800c7fa:	b928      	cbnz	r0, 800c808 <__pow5mult+0x40>
 800c7fc:	4b1d      	ldr	r3, [pc, #116]	; (800c874 <__pow5mult+0xac>)
 800c7fe:	481e      	ldr	r0, [pc, #120]	; (800c878 <__pow5mult+0xb0>)
 800c800:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c804:	f000 fa54 	bl	800ccb0 <__assert_func>
 800c808:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c80c:	6004      	str	r4, [r0, #0]
 800c80e:	60c4      	str	r4, [r0, #12]
 800c810:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c814:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c818:	b94c      	cbnz	r4, 800c82e <__pow5mult+0x66>
 800c81a:	f240 2171 	movw	r1, #625	; 0x271
 800c81e:	4630      	mov	r0, r6
 800c820:	f7ff ff12 	bl	800c648 <__i2b>
 800c824:	2300      	movs	r3, #0
 800c826:	f8c8 0008 	str.w	r0, [r8, #8]
 800c82a:	4604      	mov	r4, r0
 800c82c:	6003      	str	r3, [r0, #0]
 800c82e:	f04f 0900 	mov.w	r9, #0
 800c832:	07eb      	lsls	r3, r5, #31
 800c834:	d50a      	bpl.n	800c84c <__pow5mult+0x84>
 800c836:	4639      	mov	r1, r7
 800c838:	4622      	mov	r2, r4
 800c83a:	4630      	mov	r0, r6
 800c83c:	f7ff ff1a 	bl	800c674 <__multiply>
 800c840:	4639      	mov	r1, r7
 800c842:	4680      	mov	r8, r0
 800c844:	4630      	mov	r0, r6
 800c846:	f7ff fe49 	bl	800c4dc <_Bfree>
 800c84a:	4647      	mov	r7, r8
 800c84c:	106d      	asrs	r5, r5, #1
 800c84e:	d00b      	beq.n	800c868 <__pow5mult+0xa0>
 800c850:	6820      	ldr	r0, [r4, #0]
 800c852:	b938      	cbnz	r0, 800c864 <__pow5mult+0x9c>
 800c854:	4622      	mov	r2, r4
 800c856:	4621      	mov	r1, r4
 800c858:	4630      	mov	r0, r6
 800c85a:	f7ff ff0b 	bl	800c674 <__multiply>
 800c85e:	6020      	str	r0, [r4, #0]
 800c860:	f8c0 9000 	str.w	r9, [r0]
 800c864:	4604      	mov	r4, r0
 800c866:	e7e4      	b.n	800c832 <__pow5mult+0x6a>
 800c868:	4638      	mov	r0, r7
 800c86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c86e:	bf00      	nop
 800c870:	080dc7a0 	.word	0x080dc7a0
 800c874:	080dc5d3 	.word	0x080dc5d3
 800c878:	080dc653 	.word	0x080dc653

0800c87c <__lshift>:
 800c87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c880:	460c      	mov	r4, r1
 800c882:	6849      	ldr	r1, [r1, #4]
 800c884:	6923      	ldr	r3, [r4, #16]
 800c886:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c88a:	68a3      	ldr	r3, [r4, #8]
 800c88c:	4607      	mov	r7, r0
 800c88e:	4691      	mov	r9, r2
 800c890:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c894:	f108 0601 	add.w	r6, r8, #1
 800c898:	42b3      	cmp	r3, r6
 800c89a:	db0b      	blt.n	800c8b4 <__lshift+0x38>
 800c89c:	4638      	mov	r0, r7
 800c89e:	f7ff fddd 	bl	800c45c <_Balloc>
 800c8a2:	4605      	mov	r5, r0
 800c8a4:	b948      	cbnz	r0, 800c8ba <__lshift+0x3e>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	4b28      	ldr	r3, [pc, #160]	; (800c94c <__lshift+0xd0>)
 800c8aa:	4829      	ldr	r0, [pc, #164]	; (800c950 <__lshift+0xd4>)
 800c8ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c8b0:	f000 f9fe 	bl	800ccb0 <__assert_func>
 800c8b4:	3101      	adds	r1, #1
 800c8b6:	005b      	lsls	r3, r3, #1
 800c8b8:	e7ee      	b.n	800c898 <__lshift+0x1c>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f100 0114 	add.w	r1, r0, #20
 800c8c0:	f100 0210 	add.w	r2, r0, #16
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	4553      	cmp	r3, sl
 800c8c8:	db33      	blt.n	800c932 <__lshift+0xb6>
 800c8ca:	6920      	ldr	r0, [r4, #16]
 800c8cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8d0:	f104 0314 	add.w	r3, r4, #20
 800c8d4:	f019 091f 	ands.w	r9, r9, #31
 800c8d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c8e0:	d02b      	beq.n	800c93a <__lshift+0xbe>
 800c8e2:	f1c9 0e20 	rsb	lr, r9, #32
 800c8e6:	468a      	mov	sl, r1
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	6818      	ldr	r0, [r3, #0]
 800c8ec:	fa00 f009 	lsl.w	r0, r0, r9
 800c8f0:	4310      	orrs	r0, r2
 800c8f2:	f84a 0b04 	str.w	r0, [sl], #4
 800c8f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8fa:	459c      	cmp	ip, r3
 800c8fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c900:	d8f3      	bhi.n	800c8ea <__lshift+0x6e>
 800c902:	ebac 0304 	sub.w	r3, ip, r4
 800c906:	3b15      	subs	r3, #21
 800c908:	f023 0303 	bic.w	r3, r3, #3
 800c90c:	3304      	adds	r3, #4
 800c90e:	f104 0015 	add.w	r0, r4, #21
 800c912:	4584      	cmp	ip, r0
 800c914:	bf38      	it	cc
 800c916:	2304      	movcc	r3, #4
 800c918:	50ca      	str	r2, [r1, r3]
 800c91a:	b10a      	cbz	r2, 800c920 <__lshift+0xa4>
 800c91c:	f108 0602 	add.w	r6, r8, #2
 800c920:	3e01      	subs	r6, #1
 800c922:	4638      	mov	r0, r7
 800c924:	612e      	str	r6, [r5, #16]
 800c926:	4621      	mov	r1, r4
 800c928:	f7ff fdd8 	bl	800c4dc <_Bfree>
 800c92c:	4628      	mov	r0, r5
 800c92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c932:	f842 0f04 	str.w	r0, [r2, #4]!
 800c936:	3301      	adds	r3, #1
 800c938:	e7c5      	b.n	800c8c6 <__lshift+0x4a>
 800c93a:	3904      	subs	r1, #4
 800c93c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c940:	f841 2f04 	str.w	r2, [r1, #4]!
 800c944:	459c      	cmp	ip, r3
 800c946:	d8f9      	bhi.n	800c93c <__lshift+0xc0>
 800c948:	e7ea      	b.n	800c920 <__lshift+0xa4>
 800c94a:	bf00      	nop
 800c94c:	080dc642 	.word	0x080dc642
 800c950:	080dc653 	.word	0x080dc653

0800c954 <__mcmp>:
 800c954:	b530      	push	{r4, r5, lr}
 800c956:	6902      	ldr	r2, [r0, #16]
 800c958:	690c      	ldr	r4, [r1, #16]
 800c95a:	1b12      	subs	r2, r2, r4
 800c95c:	d10e      	bne.n	800c97c <__mcmp+0x28>
 800c95e:	f100 0314 	add.w	r3, r0, #20
 800c962:	3114      	adds	r1, #20
 800c964:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c968:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c96c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c970:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c974:	42a5      	cmp	r5, r4
 800c976:	d003      	beq.n	800c980 <__mcmp+0x2c>
 800c978:	d305      	bcc.n	800c986 <__mcmp+0x32>
 800c97a:	2201      	movs	r2, #1
 800c97c:	4610      	mov	r0, r2
 800c97e:	bd30      	pop	{r4, r5, pc}
 800c980:	4283      	cmp	r3, r0
 800c982:	d3f3      	bcc.n	800c96c <__mcmp+0x18>
 800c984:	e7fa      	b.n	800c97c <__mcmp+0x28>
 800c986:	f04f 32ff 	mov.w	r2, #4294967295
 800c98a:	e7f7      	b.n	800c97c <__mcmp+0x28>

0800c98c <__mdiff>:
 800c98c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c990:	460c      	mov	r4, r1
 800c992:	4606      	mov	r6, r0
 800c994:	4611      	mov	r1, r2
 800c996:	4620      	mov	r0, r4
 800c998:	4690      	mov	r8, r2
 800c99a:	f7ff ffdb 	bl	800c954 <__mcmp>
 800c99e:	1e05      	subs	r5, r0, #0
 800c9a0:	d110      	bne.n	800c9c4 <__mdiff+0x38>
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f7ff fd59 	bl	800c45c <_Balloc>
 800c9aa:	b930      	cbnz	r0, 800c9ba <__mdiff+0x2e>
 800c9ac:	4b3a      	ldr	r3, [pc, #232]	; (800ca98 <__mdiff+0x10c>)
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	f240 2137 	movw	r1, #567	; 0x237
 800c9b4:	4839      	ldr	r0, [pc, #228]	; (800ca9c <__mdiff+0x110>)
 800c9b6:	f000 f97b 	bl	800ccb0 <__assert_func>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c4:	bfa4      	itt	ge
 800c9c6:	4643      	movge	r3, r8
 800c9c8:	46a0      	movge	r8, r4
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c9d0:	bfa6      	itte	ge
 800c9d2:	461c      	movge	r4, r3
 800c9d4:	2500      	movge	r5, #0
 800c9d6:	2501      	movlt	r5, #1
 800c9d8:	f7ff fd40 	bl	800c45c <_Balloc>
 800c9dc:	b920      	cbnz	r0, 800c9e8 <__mdiff+0x5c>
 800c9de:	4b2e      	ldr	r3, [pc, #184]	; (800ca98 <__mdiff+0x10c>)
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	f240 2145 	movw	r1, #581	; 0x245
 800c9e6:	e7e5      	b.n	800c9b4 <__mdiff+0x28>
 800c9e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c9ec:	6926      	ldr	r6, [r4, #16]
 800c9ee:	60c5      	str	r5, [r0, #12]
 800c9f0:	f104 0914 	add.w	r9, r4, #20
 800c9f4:	f108 0514 	add.w	r5, r8, #20
 800c9f8:	f100 0e14 	add.w	lr, r0, #20
 800c9fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca04:	f108 0210 	add.w	r2, r8, #16
 800ca08:	46f2      	mov	sl, lr
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca14:	fa11 f88b 	uxtah	r8, r1, fp
 800ca18:	b299      	uxth	r1, r3
 800ca1a:	0c1b      	lsrs	r3, r3, #16
 800ca1c:	eba8 0801 	sub.w	r8, r8, r1
 800ca20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca24:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca28:	fa1f f888 	uxth.w	r8, r8
 800ca2c:	1419      	asrs	r1, r3, #16
 800ca2e:	454e      	cmp	r6, r9
 800ca30:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca34:	f84a 3b04 	str.w	r3, [sl], #4
 800ca38:	d8e8      	bhi.n	800ca0c <__mdiff+0x80>
 800ca3a:	1b33      	subs	r3, r6, r4
 800ca3c:	3b15      	subs	r3, #21
 800ca3e:	f023 0303 	bic.w	r3, r3, #3
 800ca42:	3304      	adds	r3, #4
 800ca44:	3415      	adds	r4, #21
 800ca46:	42a6      	cmp	r6, r4
 800ca48:	bf38      	it	cc
 800ca4a:	2304      	movcc	r3, #4
 800ca4c:	441d      	add	r5, r3
 800ca4e:	4473      	add	r3, lr
 800ca50:	469e      	mov	lr, r3
 800ca52:	462e      	mov	r6, r5
 800ca54:	4566      	cmp	r6, ip
 800ca56:	d30e      	bcc.n	800ca76 <__mdiff+0xea>
 800ca58:	f10c 0203 	add.w	r2, ip, #3
 800ca5c:	1b52      	subs	r2, r2, r5
 800ca5e:	f022 0203 	bic.w	r2, r2, #3
 800ca62:	3d03      	subs	r5, #3
 800ca64:	45ac      	cmp	ip, r5
 800ca66:	bf38      	it	cc
 800ca68:	2200      	movcc	r2, #0
 800ca6a:	4413      	add	r3, r2
 800ca6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ca70:	b17a      	cbz	r2, 800ca92 <__mdiff+0x106>
 800ca72:	6107      	str	r7, [r0, #16]
 800ca74:	e7a4      	b.n	800c9c0 <__mdiff+0x34>
 800ca76:	f856 8b04 	ldr.w	r8, [r6], #4
 800ca7a:	fa11 f288 	uxtah	r2, r1, r8
 800ca7e:	1414      	asrs	r4, r2, #16
 800ca80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca84:	b292      	uxth	r2, r2
 800ca86:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ca8a:	f84e 2b04 	str.w	r2, [lr], #4
 800ca8e:	1421      	asrs	r1, r4, #16
 800ca90:	e7e0      	b.n	800ca54 <__mdiff+0xc8>
 800ca92:	3f01      	subs	r7, #1
 800ca94:	e7ea      	b.n	800ca6c <__mdiff+0xe0>
 800ca96:	bf00      	nop
 800ca98:	080dc642 	.word	0x080dc642
 800ca9c:	080dc653 	.word	0x080dc653

0800caa0 <__d2b>:
 800caa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800caa4:	460f      	mov	r7, r1
 800caa6:	2101      	movs	r1, #1
 800caa8:	ec59 8b10 	vmov	r8, r9, d0
 800caac:	4616      	mov	r6, r2
 800caae:	f7ff fcd5 	bl	800c45c <_Balloc>
 800cab2:	4604      	mov	r4, r0
 800cab4:	b930      	cbnz	r0, 800cac4 <__d2b+0x24>
 800cab6:	4602      	mov	r2, r0
 800cab8:	4b24      	ldr	r3, [pc, #144]	; (800cb4c <__d2b+0xac>)
 800caba:	4825      	ldr	r0, [pc, #148]	; (800cb50 <__d2b+0xb0>)
 800cabc:	f240 310f 	movw	r1, #783	; 0x30f
 800cac0:	f000 f8f6 	bl	800ccb0 <__assert_func>
 800cac4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cac8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cacc:	bb2d      	cbnz	r5, 800cb1a <__d2b+0x7a>
 800cace:	9301      	str	r3, [sp, #4]
 800cad0:	f1b8 0300 	subs.w	r3, r8, #0
 800cad4:	d026      	beq.n	800cb24 <__d2b+0x84>
 800cad6:	4668      	mov	r0, sp
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	f7ff fd87 	bl	800c5ec <__lo0bits>
 800cade:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cae2:	b1e8      	cbz	r0, 800cb20 <__d2b+0x80>
 800cae4:	f1c0 0320 	rsb	r3, r0, #32
 800cae8:	fa02 f303 	lsl.w	r3, r2, r3
 800caec:	430b      	orrs	r3, r1
 800caee:	40c2      	lsrs	r2, r0
 800caf0:	6163      	str	r3, [r4, #20]
 800caf2:	9201      	str	r2, [sp, #4]
 800caf4:	9b01      	ldr	r3, [sp, #4]
 800caf6:	61a3      	str	r3, [r4, #24]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	bf14      	ite	ne
 800cafc:	2202      	movne	r2, #2
 800cafe:	2201      	moveq	r2, #1
 800cb00:	6122      	str	r2, [r4, #16]
 800cb02:	b1bd      	cbz	r5, 800cb34 <__d2b+0x94>
 800cb04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb08:	4405      	add	r5, r0
 800cb0a:	603d      	str	r5, [r7, #0]
 800cb0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb10:	6030      	str	r0, [r6, #0]
 800cb12:	4620      	mov	r0, r4
 800cb14:	b003      	add	sp, #12
 800cb16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb1e:	e7d6      	b.n	800cace <__d2b+0x2e>
 800cb20:	6161      	str	r1, [r4, #20]
 800cb22:	e7e7      	b.n	800caf4 <__d2b+0x54>
 800cb24:	a801      	add	r0, sp, #4
 800cb26:	f7ff fd61 	bl	800c5ec <__lo0bits>
 800cb2a:	9b01      	ldr	r3, [sp, #4]
 800cb2c:	6163      	str	r3, [r4, #20]
 800cb2e:	3020      	adds	r0, #32
 800cb30:	2201      	movs	r2, #1
 800cb32:	e7e5      	b.n	800cb00 <__d2b+0x60>
 800cb34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb3c:	6038      	str	r0, [r7, #0]
 800cb3e:	6918      	ldr	r0, [r3, #16]
 800cb40:	f7ff fd34 	bl	800c5ac <__hi0bits>
 800cb44:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb48:	e7e2      	b.n	800cb10 <__d2b+0x70>
 800cb4a:	bf00      	nop
 800cb4c:	080dc642 	.word	0x080dc642
 800cb50:	080dc653 	.word	0x080dc653

0800cb54 <__sflush_r>:
 800cb54:	898a      	ldrh	r2, [r1, #12]
 800cb56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	0710      	lsls	r0, r2, #28
 800cb5e:	460c      	mov	r4, r1
 800cb60:	d458      	bmi.n	800cc14 <__sflush_r+0xc0>
 800cb62:	684b      	ldr	r3, [r1, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	dc05      	bgt.n	800cb74 <__sflush_r+0x20>
 800cb68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	dc02      	bgt.n	800cb74 <__sflush_r+0x20>
 800cb6e:	2000      	movs	r0, #0
 800cb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb76:	2e00      	cmp	r6, #0
 800cb78:	d0f9      	beq.n	800cb6e <__sflush_r+0x1a>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb80:	682f      	ldr	r7, [r5, #0]
 800cb82:	6a21      	ldr	r1, [r4, #32]
 800cb84:	602b      	str	r3, [r5, #0]
 800cb86:	d032      	beq.n	800cbee <__sflush_r+0x9a>
 800cb88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb8a:	89a3      	ldrh	r3, [r4, #12]
 800cb8c:	075a      	lsls	r2, r3, #29
 800cb8e:	d505      	bpl.n	800cb9c <__sflush_r+0x48>
 800cb90:	6863      	ldr	r3, [r4, #4]
 800cb92:	1ac0      	subs	r0, r0, r3
 800cb94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb96:	b10b      	cbz	r3, 800cb9c <__sflush_r+0x48>
 800cb98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb9a:	1ac0      	subs	r0, r0, r3
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	4602      	mov	r2, r0
 800cba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cba2:	6a21      	ldr	r1, [r4, #32]
 800cba4:	4628      	mov	r0, r5
 800cba6:	47b0      	blx	r6
 800cba8:	1c43      	adds	r3, r0, #1
 800cbaa:	89a3      	ldrh	r3, [r4, #12]
 800cbac:	d106      	bne.n	800cbbc <__sflush_r+0x68>
 800cbae:	6829      	ldr	r1, [r5, #0]
 800cbb0:	291d      	cmp	r1, #29
 800cbb2:	d82b      	bhi.n	800cc0c <__sflush_r+0xb8>
 800cbb4:	4a29      	ldr	r2, [pc, #164]	; (800cc5c <__sflush_r+0x108>)
 800cbb6:	410a      	asrs	r2, r1
 800cbb8:	07d6      	lsls	r6, r2, #31
 800cbba:	d427      	bmi.n	800cc0c <__sflush_r+0xb8>
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	6062      	str	r2, [r4, #4]
 800cbc0:	04d9      	lsls	r1, r3, #19
 800cbc2:	6922      	ldr	r2, [r4, #16]
 800cbc4:	6022      	str	r2, [r4, #0]
 800cbc6:	d504      	bpl.n	800cbd2 <__sflush_r+0x7e>
 800cbc8:	1c42      	adds	r2, r0, #1
 800cbca:	d101      	bne.n	800cbd0 <__sflush_r+0x7c>
 800cbcc:	682b      	ldr	r3, [r5, #0]
 800cbce:	b903      	cbnz	r3, 800cbd2 <__sflush_r+0x7e>
 800cbd0:	6560      	str	r0, [r4, #84]	; 0x54
 800cbd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbd4:	602f      	str	r7, [r5, #0]
 800cbd6:	2900      	cmp	r1, #0
 800cbd8:	d0c9      	beq.n	800cb6e <__sflush_r+0x1a>
 800cbda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbde:	4299      	cmp	r1, r3
 800cbe0:	d002      	beq.n	800cbe8 <__sflush_r+0x94>
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	f7ff fbee 	bl	800c3c4 <_free_r>
 800cbe8:	2000      	movs	r0, #0
 800cbea:	6360      	str	r0, [r4, #52]	; 0x34
 800cbec:	e7c0      	b.n	800cb70 <__sflush_r+0x1c>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	47b0      	blx	r6
 800cbf4:	1c41      	adds	r1, r0, #1
 800cbf6:	d1c8      	bne.n	800cb8a <__sflush_r+0x36>
 800cbf8:	682b      	ldr	r3, [r5, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d0c5      	beq.n	800cb8a <__sflush_r+0x36>
 800cbfe:	2b1d      	cmp	r3, #29
 800cc00:	d001      	beq.n	800cc06 <__sflush_r+0xb2>
 800cc02:	2b16      	cmp	r3, #22
 800cc04:	d101      	bne.n	800cc0a <__sflush_r+0xb6>
 800cc06:	602f      	str	r7, [r5, #0]
 800cc08:	e7b1      	b.n	800cb6e <__sflush_r+0x1a>
 800cc0a:	89a3      	ldrh	r3, [r4, #12]
 800cc0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc10:	81a3      	strh	r3, [r4, #12]
 800cc12:	e7ad      	b.n	800cb70 <__sflush_r+0x1c>
 800cc14:	690f      	ldr	r7, [r1, #16]
 800cc16:	2f00      	cmp	r7, #0
 800cc18:	d0a9      	beq.n	800cb6e <__sflush_r+0x1a>
 800cc1a:	0793      	lsls	r3, r2, #30
 800cc1c:	680e      	ldr	r6, [r1, #0]
 800cc1e:	bf08      	it	eq
 800cc20:	694b      	ldreq	r3, [r1, #20]
 800cc22:	600f      	str	r7, [r1, #0]
 800cc24:	bf18      	it	ne
 800cc26:	2300      	movne	r3, #0
 800cc28:	eba6 0807 	sub.w	r8, r6, r7
 800cc2c:	608b      	str	r3, [r1, #8]
 800cc2e:	f1b8 0f00 	cmp.w	r8, #0
 800cc32:	dd9c      	ble.n	800cb6e <__sflush_r+0x1a>
 800cc34:	6a21      	ldr	r1, [r4, #32]
 800cc36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc38:	4643      	mov	r3, r8
 800cc3a:	463a      	mov	r2, r7
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	47b0      	blx	r6
 800cc40:	2800      	cmp	r0, #0
 800cc42:	dc06      	bgt.n	800cc52 <__sflush_r+0xfe>
 800cc44:	89a3      	ldrh	r3, [r4, #12]
 800cc46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc4a:	81a3      	strh	r3, [r4, #12]
 800cc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc50:	e78e      	b.n	800cb70 <__sflush_r+0x1c>
 800cc52:	4407      	add	r7, r0
 800cc54:	eba8 0800 	sub.w	r8, r8, r0
 800cc58:	e7e9      	b.n	800cc2e <__sflush_r+0xda>
 800cc5a:	bf00      	nop
 800cc5c:	dfbffffe 	.word	0xdfbffffe

0800cc60 <_fflush_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	690b      	ldr	r3, [r1, #16]
 800cc64:	4605      	mov	r5, r0
 800cc66:	460c      	mov	r4, r1
 800cc68:	b913      	cbnz	r3, 800cc70 <_fflush_r+0x10>
 800cc6a:	2500      	movs	r5, #0
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	bd38      	pop	{r3, r4, r5, pc}
 800cc70:	b118      	cbz	r0, 800cc7a <_fflush_r+0x1a>
 800cc72:	6a03      	ldr	r3, [r0, #32]
 800cc74:	b90b      	cbnz	r3, 800cc7a <_fflush_r+0x1a>
 800cc76:	f7fe fbff 	bl	800b478 <__sinit>
 800cc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d0f3      	beq.n	800cc6a <_fflush_r+0xa>
 800cc82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc84:	07d0      	lsls	r0, r2, #31
 800cc86:	d404      	bmi.n	800cc92 <_fflush_r+0x32>
 800cc88:	0599      	lsls	r1, r3, #22
 800cc8a:	d402      	bmi.n	800cc92 <_fflush_r+0x32>
 800cc8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc8e:	f7fe fd0c 	bl	800b6aa <__retarget_lock_acquire_recursive>
 800cc92:	4628      	mov	r0, r5
 800cc94:	4621      	mov	r1, r4
 800cc96:	f7ff ff5d 	bl	800cb54 <__sflush_r>
 800cc9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc9c:	07da      	lsls	r2, r3, #31
 800cc9e:	4605      	mov	r5, r0
 800cca0:	d4e4      	bmi.n	800cc6c <_fflush_r+0xc>
 800cca2:	89a3      	ldrh	r3, [r4, #12]
 800cca4:	059b      	lsls	r3, r3, #22
 800cca6:	d4e1      	bmi.n	800cc6c <_fflush_r+0xc>
 800cca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccaa:	f7fe fcff 	bl	800b6ac <__retarget_lock_release_recursive>
 800ccae:	e7dd      	b.n	800cc6c <_fflush_r+0xc>

0800ccb0 <__assert_func>:
 800ccb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccb2:	4614      	mov	r4, r2
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	4b09      	ldr	r3, [pc, #36]	; (800ccdc <__assert_func+0x2c>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4605      	mov	r5, r0
 800ccbc:	68d8      	ldr	r0, [r3, #12]
 800ccbe:	b14c      	cbz	r4, 800ccd4 <__assert_func+0x24>
 800ccc0:	4b07      	ldr	r3, [pc, #28]	; (800cce0 <__assert_func+0x30>)
 800ccc2:	9100      	str	r1, [sp, #0]
 800ccc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ccc8:	4906      	ldr	r1, [pc, #24]	; (800cce4 <__assert_func+0x34>)
 800ccca:	462b      	mov	r3, r5
 800cccc:	f000 f844 	bl	800cd58 <fiprintf>
 800ccd0:	f000 f854 	bl	800cd7c <abort>
 800ccd4:	4b04      	ldr	r3, [pc, #16]	; (800cce8 <__assert_func+0x38>)
 800ccd6:	461c      	mov	r4, r3
 800ccd8:	e7f3      	b.n	800ccc2 <__assert_func+0x12>
 800ccda:	bf00      	nop
 800ccdc:	20004204 	.word	0x20004204
 800cce0:	080dc7b6 	.word	0x080dc7b6
 800cce4:	080dc7c3 	.word	0x080dc7c3
 800cce8:	080dc7f1 	.word	0x080dc7f1

0800ccec <_calloc_r>:
 800ccec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccee:	fba1 2402 	umull	r2, r4, r1, r2
 800ccf2:	b94c      	cbnz	r4, 800cd08 <_calloc_r+0x1c>
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	9201      	str	r2, [sp, #4]
 800ccf8:	f7fd fe40 	bl	800a97c <_malloc_r>
 800ccfc:	9a01      	ldr	r2, [sp, #4]
 800ccfe:	4605      	mov	r5, r0
 800cd00:	b930      	cbnz	r0, 800cd10 <_calloc_r+0x24>
 800cd02:	4628      	mov	r0, r5
 800cd04:	b003      	add	sp, #12
 800cd06:	bd30      	pop	{r4, r5, pc}
 800cd08:	220c      	movs	r2, #12
 800cd0a:	6002      	str	r2, [r0, #0]
 800cd0c:	2500      	movs	r5, #0
 800cd0e:	e7f8      	b.n	800cd02 <_calloc_r+0x16>
 800cd10:	4621      	mov	r1, r4
 800cd12:	f7fe fc2a 	bl	800b56a <memset>
 800cd16:	e7f4      	b.n	800cd02 <_calloc_r+0x16>

0800cd18 <__ascii_mbtowc>:
 800cd18:	b082      	sub	sp, #8
 800cd1a:	b901      	cbnz	r1, 800cd1e <__ascii_mbtowc+0x6>
 800cd1c:	a901      	add	r1, sp, #4
 800cd1e:	b142      	cbz	r2, 800cd32 <__ascii_mbtowc+0x1a>
 800cd20:	b14b      	cbz	r3, 800cd36 <__ascii_mbtowc+0x1e>
 800cd22:	7813      	ldrb	r3, [r2, #0]
 800cd24:	600b      	str	r3, [r1, #0]
 800cd26:	7812      	ldrb	r2, [r2, #0]
 800cd28:	1e10      	subs	r0, r2, #0
 800cd2a:	bf18      	it	ne
 800cd2c:	2001      	movne	r0, #1
 800cd2e:	b002      	add	sp, #8
 800cd30:	4770      	bx	lr
 800cd32:	4610      	mov	r0, r2
 800cd34:	e7fb      	b.n	800cd2e <__ascii_mbtowc+0x16>
 800cd36:	f06f 0001 	mvn.w	r0, #1
 800cd3a:	e7f8      	b.n	800cd2e <__ascii_mbtowc+0x16>

0800cd3c <__ascii_wctomb>:
 800cd3c:	b149      	cbz	r1, 800cd52 <__ascii_wctomb+0x16>
 800cd3e:	2aff      	cmp	r2, #255	; 0xff
 800cd40:	bf85      	ittet	hi
 800cd42:	238a      	movhi	r3, #138	; 0x8a
 800cd44:	6003      	strhi	r3, [r0, #0]
 800cd46:	700a      	strbls	r2, [r1, #0]
 800cd48:	f04f 30ff 	movhi.w	r0, #4294967295
 800cd4c:	bf98      	it	ls
 800cd4e:	2001      	movls	r0, #1
 800cd50:	4770      	bx	lr
 800cd52:	4608      	mov	r0, r1
 800cd54:	4770      	bx	lr
	...

0800cd58 <fiprintf>:
 800cd58:	b40e      	push	{r1, r2, r3}
 800cd5a:	b503      	push	{r0, r1, lr}
 800cd5c:	4601      	mov	r1, r0
 800cd5e:	ab03      	add	r3, sp, #12
 800cd60:	4805      	ldr	r0, [pc, #20]	; (800cd78 <fiprintf+0x20>)
 800cd62:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd66:	6800      	ldr	r0, [r0, #0]
 800cd68:	9301      	str	r3, [sp, #4]
 800cd6a:	f000 f837 	bl	800cddc <_vfiprintf_r>
 800cd6e:	b002      	add	sp, #8
 800cd70:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd74:	b003      	add	sp, #12
 800cd76:	4770      	bx	lr
 800cd78:	20004204 	.word	0x20004204

0800cd7c <abort>:
 800cd7c:	b508      	push	{r3, lr}
 800cd7e:	2006      	movs	r0, #6
 800cd80:	f000 fa04 	bl	800d18c <raise>
 800cd84:	2001      	movs	r0, #1
 800cd86:	f000 fc0d 	bl	800d5a4 <_exit>

0800cd8a <__sfputc_r>:
 800cd8a:	6893      	ldr	r3, [r2, #8]
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	b410      	push	{r4}
 800cd92:	6093      	str	r3, [r2, #8]
 800cd94:	da08      	bge.n	800cda8 <__sfputc_r+0x1e>
 800cd96:	6994      	ldr	r4, [r2, #24]
 800cd98:	42a3      	cmp	r3, r4
 800cd9a:	db01      	blt.n	800cda0 <__sfputc_r+0x16>
 800cd9c:	290a      	cmp	r1, #10
 800cd9e:	d103      	bne.n	800cda8 <__sfputc_r+0x1e>
 800cda0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cda4:	f000 b934 	b.w	800d010 <__swbuf_r>
 800cda8:	6813      	ldr	r3, [r2, #0]
 800cdaa:	1c58      	adds	r0, r3, #1
 800cdac:	6010      	str	r0, [r2, #0]
 800cdae:	7019      	strb	r1, [r3, #0]
 800cdb0:	4608      	mov	r0, r1
 800cdb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <__sfputs_r>:
 800cdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdba:	4606      	mov	r6, r0
 800cdbc:	460f      	mov	r7, r1
 800cdbe:	4614      	mov	r4, r2
 800cdc0:	18d5      	adds	r5, r2, r3
 800cdc2:	42ac      	cmp	r4, r5
 800cdc4:	d101      	bne.n	800cdca <__sfputs_r+0x12>
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	e007      	b.n	800cdda <__sfputs_r+0x22>
 800cdca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdce:	463a      	mov	r2, r7
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	f7ff ffda 	bl	800cd8a <__sfputc_r>
 800cdd6:	1c43      	adds	r3, r0, #1
 800cdd8:	d1f3      	bne.n	800cdc2 <__sfputs_r+0xa>
 800cdda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cddc <_vfiprintf_r>:
 800cddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde0:	460d      	mov	r5, r1
 800cde2:	b09d      	sub	sp, #116	; 0x74
 800cde4:	4614      	mov	r4, r2
 800cde6:	4698      	mov	r8, r3
 800cde8:	4606      	mov	r6, r0
 800cdea:	b118      	cbz	r0, 800cdf4 <_vfiprintf_r+0x18>
 800cdec:	6a03      	ldr	r3, [r0, #32]
 800cdee:	b90b      	cbnz	r3, 800cdf4 <_vfiprintf_r+0x18>
 800cdf0:	f7fe fb42 	bl	800b478 <__sinit>
 800cdf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdf6:	07d9      	lsls	r1, r3, #31
 800cdf8:	d405      	bmi.n	800ce06 <_vfiprintf_r+0x2a>
 800cdfa:	89ab      	ldrh	r3, [r5, #12]
 800cdfc:	059a      	lsls	r2, r3, #22
 800cdfe:	d402      	bmi.n	800ce06 <_vfiprintf_r+0x2a>
 800ce00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce02:	f7fe fc52 	bl	800b6aa <__retarget_lock_acquire_recursive>
 800ce06:	89ab      	ldrh	r3, [r5, #12]
 800ce08:	071b      	lsls	r3, r3, #28
 800ce0a:	d501      	bpl.n	800ce10 <_vfiprintf_r+0x34>
 800ce0c:	692b      	ldr	r3, [r5, #16]
 800ce0e:	b99b      	cbnz	r3, 800ce38 <_vfiprintf_r+0x5c>
 800ce10:	4629      	mov	r1, r5
 800ce12:	4630      	mov	r0, r6
 800ce14:	f000 f93a 	bl	800d08c <__swsetup_r>
 800ce18:	b170      	cbz	r0, 800ce38 <_vfiprintf_r+0x5c>
 800ce1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce1c:	07dc      	lsls	r4, r3, #31
 800ce1e:	d504      	bpl.n	800ce2a <_vfiprintf_r+0x4e>
 800ce20:	f04f 30ff 	mov.w	r0, #4294967295
 800ce24:	b01d      	add	sp, #116	; 0x74
 800ce26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce2a:	89ab      	ldrh	r3, [r5, #12]
 800ce2c:	0598      	lsls	r0, r3, #22
 800ce2e:	d4f7      	bmi.n	800ce20 <_vfiprintf_r+0x44>
 800ce30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce32:	f7fe fc3b 	bl	800b6ac <__retarget_lock_release_recursive>
 800ce36:	e7f3      	b.n	800ce20 <_vfiprintf_r+0x44>
 800ce38:	2300      	movs	r3, #0
 800ce3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce3c:	2320      	movs	r3, #32
 800ce3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce42:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce46:	2330      	movs	r3, #48	; 0x30
 800ce48:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cffc <_vfiprintf_r+0x220>
 800ce4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce50:	f04f 0901 	mov.w	r9, #1
 800ce54:	4623      	mov	r3, r4
 800ce56:	469a      	mov	sl, r3
 800ce58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce5c:	b10a      	cbz	r2, 800ce62 <_vfiprintf_r+0x86>
 800ce5e:	2a25      	cmp	r2, #37	; 0x25
 800ce60:	d1f9      	bne.n	800ce56 <_vfiprintf_r+0x7a>
 800ce62:	ebba 0b04 	subs.w	fp, sl, r4
 800ce66:	d00b      	beq.n	800ce80 <_vfiprintf_r+0xa4>
 800ce68:	465b      	mov	r3, fp
 800ce6a:	4622      	mov	r2, r4
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f7ff ffa2 	bl	800cdb8 <__sfputs_r>
 800ce74:	3001      	adds	r0, #1
 800ce76:	f000 80a9 	beq.w	800cfcc <_vfiprintf_r+0x1f0>
 800ce7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce7c:	445a      	add	r2, fp
 800ce7e:	9209      	str	r2, [sp, #36]	; 0x24
 800ce80:	f89a 3000 	ldrb.w	r3, [sl]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	f000 80a1 	beq.w	800cfcc <_vfiprintf_r+0x1f0>
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce94:	f10a 0a01 	add.w	sl, sl, #1
 800ce98:	9304      	str	r3, [sp, #16]
 800ce9a:	9307      	str	r3, [sp, #28]
 800ce9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cea0:	931a      	str	r3, [sp, #104]	; 0x68
 800cea2:	4654      	mov	r4, sl
 800cea4:	2205      	movs	r2, #5
 800cea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceaa:	4854      	ldr	r0, [pc, #336]	; (800cffc <_vfiprintf_r+0x220>)
 800ceac:	f7f3 f9b0 	bl	8000210 <memchr>
 800ceb0:	9a04      	ldr	r2, [sp, #16]
 800ceb2:	b9d8      	cbnz	r0, 800ceec <_vfiprintf_r+0x110>
 800ceb4:	06d1      	lsls	r1, r2, #27
 800ceb6:	bf44      	itt	mi
 800ceb8:	2320      	movmi	r3, #32
 800ceba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cebe:	0713      	lsls	r3, r2, #28
 800cec0:	bf44      	itt	mi
 800cec2:	232b      	movmi	r3, #43	; 0x2b
 800cec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cec8:	f89a 3000 	ldrb.w	r3, [sl]
 800cecc:	2b2a      	cmp	r3, #42	; 0x2a
 800cece:	d015      	beq.n	800cefc <_vfiprintf_r+0x120>
 800ced0:	9a07      	ldr	r2, [sp, #28]
 800ced2:	4654      	mov	r4, sl
 800ced4:	2000      	movs	r0, #0
 800ced6:	f04f 0c0a 	mov.w	ip, #10
 800ceda:	4621      	mov	r1, r4
 800cedc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cee0:	3b30      	subs	r3, #48	; 0x30
 800cee2:	2b09      	cmp	r3, #9
 800cee4:	d94d      	bls.n	800cf82 <_vfiprintf_r+0x1a6>
 800cee6:	b1b0      	cbz	r0, 800cf16 <_vfiprintf_r+0x13a>
 800cee8:	9207      	str	r2, [sp, #28]
 800ceea:	e014      	b.n	800cf16 <_vfiprintf_r+0x13a>
 800ceec:	eba0 0308 	sub.w	r3, r0, r8
 800cef0:	fa09 f303 	lsl.w	r3, r9, r3
 800cef4:	4313      	orrs	r3, r2
 800cef6:	9304      	str	r3, [sp, #16]
 800cef8:	46a2      	mov	sl, r4
 800cefa:	e7d2      	b.n	800cea2 <_vfiprintf_r+0xc6>
 800cefc:	9b03      	ldr	r3, [sp, #12]
 800cefe:	1d19      	adds	r1, r3, #4
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	9103      	str	r1, [sp, #12]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	bfbb      	ittet	lt
 800cf08:	425b      	neglt	r3, r3
 800cf0a:	f042 0202 	orrlt.w	r2, r2, #2
 800cf0e:	9307      	strge	r3, [sp, #28]
 800cf10:	9307      	strlt	r3, [sp, #28]
 800cf12:	bfb8      	it	lt
 800cf14:	9204      	strlt	r2, [sp, #16]
 800cf16:	7823      	ldrb	r3, [r4, #0]
 800cf18:	2b2e      	cmp	r3, #46	; 0x2e
 800cf1a:	d10c      	bne.n	800cf36 <_vfiprintf_r+0x15a>
 800cf1c:	7863      	ldrb	r3, [r4, #1]
 800cf1e:	2b2a      	cmp	r3, #42	; 0x2a
 800cf20:	d134      	bne.n	800cf8c <_vfiprintf_r+0x1b0>
 800cf22:	9b03      	ldr	r3, [sp, #12]
 800cf24:	1d1a      	adds	r2, r3, #4
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	9203      	str	r2, [sp, #12]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	bfb8      	it	lt
 800cf2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf32:	3402      	adds	r4, #2
 800cf34:	9305      	str	r3, [sp, #20]
 800cf36:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d00c <_vfiprintf_r+0x230>
 800cf3a:	7821      	ldrb	r1, [r4, #0]
 800cf3c:	2203      	movs	r2, #3
 800cf3e:	4650      	mov	r0, sl
 800cf40:	f7f3 f966 	bl	8000210 <memchr>
 800cf44:	b138      	cbz	r0, 800cf56 <_vfiprintf_r+0x17a>
 800cf46:	9b04      	ldr	r3, [sp, #16]
 800cf48:	eba0 000a 	sub.w	r0, r0, sl
 800cf4c:	2240      	movs	r2, #64	; 0x40
 800cf4e:	4082      	lsls	r2, r0
 800cf50:	4313      	orrs	r3, r2
 800cf52:	3401      	adds	r4, #1
 800cf54:	9304      	str	r3, [sp, #16]
 800cf56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf5a:	4829      	ldr	r0, [pc, #164]	; (800d000 <_vfiprintf_r+0x224>)
 800cf5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf60:	2206      	movs	r2, #6
 800cf62:	f7f3 f955 	bl	8000210 <memchr>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	d03f      	beq.n	800cfea <_vfiprintf_r+0x20e>
 800cf6a:	4b26      	ldr	r3, [pc, #152]	; (800d004 <_vfiprintf_r+0x228>)
 800cf6c:	bb1b      	cbnz	r3, 800cfb6 <_vfiprintf_r+0x1da>
 800cf6e:	9b03      	ldr	r3, [sp, #12]
 800cf70:	3307      	adds	r3, #7
 800cf72:	f023 0307 	bic.w	r3, r3, #7
 800cf76:	3308      	adds	r3, #8
 800cf78:	9303      	str	r3, [sp, #12]
 800cf7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf7c:	443b      	add	r3, r7
 800cf7e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf80:	e768      	b.n	800ce54 <_vfiprintf_r+0x78>
 800cf82:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf86:	460c      	mov	r4, r1
 800cf88:	2001      	movs	r0, #1
 800cf8a:	e7a6      	b.n	800ceda <_vfiprintf_r+0xfe>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	3401      	adds	r4, #1
 800cf90:	9305      	str	r3, [sp, #20]
 800cf92:	4619      	mov	r1, r3
 800cf94:	f04f 0c0a 	mov.w	ip, #10
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf9e:	3a30      	subs	r2, #48	; 0x30
 800cfa0:	2a09      	cmp	r2, #9
 800cfa2:	d903      	bls.n	800cfac <_vfiprintf_r+0x1d0>
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d0c6      	beq.n	800cf36 <_vfiprintf_r+0x15a>
 800cfa8:	9105      	str	r1, [sp, #20]
 800cfaa:	e7c4      	b.n	800cf36 <_vfiprintf_r+0x15a>
 800cfac:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfb0:	4604      	mov	r4, r0
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e7f0      	b.n	800cf98 <_vfiprintf_r+0x1bc>
 800cfb6:	ab03      	add	r3, sp, #12
 800cfb8:	9300      	str	r3, [sp, #0]
 800cfba:	462a      	mov	r2, r5
 800cfbc:	4b12      	ldr	r3, [pc, #72]	; (800d008 <_vfiprintf_r+0x22c>)
 800cfbe:	a904      	add	r1, sp, #16
 800cfc0:	4630      	mov	r0, r6
 800cfc2:	f7fd fe07 	bl	800abd4 <_printf_float>
 800cfc6:	4607      	mov	r7, r0
 800cfc8:	1c78      	adds	r0, r7, #1
 800cfca:	d1d6      	bne.n	800cf7a <_vfiprintf_r+0x19e>
 800cfcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfce:	07d9      	lsls	r1, r3, #31
 800cfd0:	d405      	bmi.n	800cfde <_vfiprintf_r+0x202>
 800cfd2:	89ab      	ldrh	r3, [r5, #12]
 800cfd4:	059a      	lsls	r2, r3, #22
 800cfd6:	d402      	bmi.n	800cfde <_vfiprintf_r+0x202>
 800cfd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfda:	f7fe fb67 	bl	800b6ac <__retarget_lock_release_recursive>
 800cfde:	89ab      	ldrh	r3, [r5, #12]
 800cfe0:	065b      	lsls	r3, r3, #25
 800cfe2:	f53f af1d 	bmi.w	800ce20 <_vfiprintf_r+0x44>
 800cfe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfe8:	e71c      	b.n	800ce24 <_vfiprintf_r+0x48>
 800cfea:	ab03      	add	r3, sp, #12
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	462a      	mov	r2, r5
 800cff0:	4b05      	ldr	r3, [pc, #20]	; (800d008 <_vfiprintf_r+0x22c>)
 800cff2:	a904      	add	r1, sp, #16
 800cff4:	4630      	mov	r0, r6
 800cff6:	f7fe f891 	bl	800b11c <_printf_i>
 800cffa:	e7e4      	b.n	800cfc6 <_vfiprintf_r+0x1ea>
 800cffc:	080dc8f3 	.word	0x080dc8f3
 800d000:	080dc8fd 	.word	0x080dc8fd
 800d004:	0800abd5 	.word	0x0800abd5
 800d008:	0800cdb9 	.word	0x0800cdb9
 800d00c:	080dc8f9 	.word	0x080dc8f9

0800d010 <__swbuf_r>:
 800d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d012:	460e      	mov	r6, r1
 800d014:	4614      	mov	r4, r2
 800d016:	4605      	mov	r5, r0
 800d018:	b118      	cbz	r0, 800d022 <__swbuf_r+0x12>
 800d01a:	6a03      	ldr	r3, [r0, #32]
 800d01c:	b90b      	cbnz	r3, 800d022 <__swbuf_r+0x12>
 800d01e:	f7fe fa2b 	bl	800b478 <__sinit>
 800d022:	69a3      	ldr	r3, [r4, #24]
 800d024:	60a3      	str	r3, [r4, #8]
 800d026:	89a3      	ldrh	r3, [r4, #12]
 800d028:	071a      	lsls	r2, r3, #28
 800d02a:	d525      	bpl.n	800d078 <__swbuf_r+0x68>
 800d02c:	6923      	ldr	r3, [r4, #16]
 800d02e:	b31b      	cbz	r3, 800d078 <__swbuf_r+0x68>
 800d030:	6823      	ldr	r3, [r4, #0]
 800d032:	6922      	ldr	r2, [r4, #16]
 800d034:	1a98      	subs	r0, r3, r2
 800d036:	6963      	ldr	r3, [r4, #20]
 800d038:	b2f6      	uxtb	r6, r6
 800d03a:	4283      	cmp	r3, r0
 800d03c:	4637      	mov	r7, r6
 800d03e:	dc04      	bgt.n	800d04a <__swbuf_r+0x3a>
 800d040:	4621      	mov	r1, r4
 800d042:	4628      	mov	r0, r5
 800d044:	f7ff fe0c 	bl	800cc60 <_fflush_r>
 800d048:	b9e0      	cbnz	r0, 800d084 <__swbuf_r+0x74>
 800d04a:	68a3      	ldr	r3, [r4, #8]
 800d04c:	3b01      	subs	r3, #1
 800d04e:	60a3      	str	r3, [r4, #8]
 800d050:	6823      	ldr	r3, [r4, #0]
 800d052:	1c5a      	adds	r2, r3, #1
 800d054:	6022      	str	r2, [r4, #0]
 800d056:	701e      	strb	r6, [r3, #0]
 800d058:	6962      	ldr	r2, [r4, #20]
 800d05a:	1c43      	adds	r3, r0, #1
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d004      	beq.n	800d06a <__swbuf_r+0x5a>
 800d060:	89a3      	ldrh	r3, [r4, #12]
 800d062:	07db      	lsls	r3, r3, #31
 800d064:	d506      	bpl.n	800d074 <__swbuf_r+0x64>
 800d066:	2e0a      	cmp	r6, #10
 800d068:	d104      	bne.n	800d074 <__swbuf_r+0x64>
 800d06a:	4621      	mov	r1, r4
 800d06c:	4628      	mov	r0, r5
 800d06e:	f7ff fdf7 	bl	800cc60 <_fflush_r>
 800d072:	b938      	cbnz	r0, 800d084 <__swbuf_r+0x74>
 800d074:	4638      	mov	r0, r7
 800d076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d078:	4621      	mov	r1, r4
 800d07a:	4628      	mov	r0, r5
 800d07c:	f000 f806 	bl	800d08c <__swsetup_r>
 800d080:	2800      	cmp	r0, #0
 800d082:	d0d5      	beq.n	800d030 <__swbuf_r+0x20>
 800d084:	f04f 37ff 	mov.w	r7, #4294967295
 800d088:	e7f4      	b.n	800d074 <__swbuf_r+0x64>
	...

0800d08c <__swsetup_r>:
 800d08c:	b538      	push	{r3, r4, r5, lr}
 800d08e:	4b2a      	ldr	r3, [pc, #168]	; (800d138 <__swsetup_r+0xac>)
 800d090:	4605      	mov	r5, r0
 800d092:	6818      	ldr	r0, [r3, #0]
 800d094:	460c      	mov	r4, r1
 800d096:	b118      	cbz	r0, 800d0a0 <__swsetup_r+0x14>
 800d098:	6a03      	ldr	r3, [r0, #32]
 800d09a:	b90b      	cbnz	r3, 800d0a0 <__swsetup_r+0x14>
 800d09c:	f7fe f9ec 	bl	800b478 <__sinit>
 800d0a0:	89a3      	ldrh	r3, [r4, #12]
 800d0a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0a6:	0718      	lsls	r0, r3, #28
 800d0a8:	d422      	bmi.n	800d0f0 <__swsetup_r+0x64>
 800d0aa:	06d9      	lsls	r1, r3, #27
 800d0ac:	d407      	bmi.n	800d0be <__swsetup_r+0x32>
 800d0ae:	2309      	movs	r3, #9
 800d0b0:	602b      	str	r3, [r5, #0]
 800d0b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d0b6:	81a3      	strh	r3, [r4, #12]
 800d0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0bc:	e034      	b.n	800d128 <__swsetup_r+0x9c>
 800d0be:	0758      	lsls	r0, r3, #29
 800d0c0:	d512      	bpl.n	800d0e8 <__swsetup_r+0x5c>
 800d0c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0c4:	b141      	cbz	r1, 800d0d8 <__swsetup_r+0x4c>
 800d0c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0ca:	4299      	cmp	r1, r3
 800d0cc:	d002      	beq.n	800d0d4 <__swsetup_r+0x48>
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	f7ff f978 	bl	800c3c4 <_free_r>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	6363      	str	r3, [r4, #52]	; 0x34
 800d0d8:	89a3      	ldrh	r3, [r4, #12]
 800d0da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d0de:	81a3      	strh	r3, [r4, #12]
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	6063      	str	r3, [r4, #4]
 800d0e4:	6923      	ldr	r3, [r4, #16]
 800d0e6:	6023      	str	r3, [r4, #0]
 800d0e8:	89a3      	ldrh	r3, [r4, #12]
 800d0ea:	f043 0308 	orr.w	r3, r3, #8
 800d0ee:	81a3      	strh	r3, [r4, #12]
 800d0f0:	6923      	ldr	r3, [r4, #16]
 800d0f2:	b94b      	cbnz	r3, 800d108 <__swsetup_r+0x7c>
 800d0f4:	89a3      	ldrh	r3, [r4, #12]
 800d0f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d0fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0fe:	d003      	beq.n	800d108 <__swsetup_r+0x7c>
 800d100:	4621      	mov	r1, r4
 800d102:	4628      	mov	r0, r5
 800d104:	f000 f884 	bl	800d210 <__smakebuf_r>
 800d108:	89a0      	ldrh	r0, [r4, #12]
 800d10a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d10e:	f010 0301 	ands.w	r3, r0, #1
 800d112:	d00a      	beq.n	800d12a <__swsetup_r+0x9e>
 800d114:	2300      	movs	r3, #0
 800d116:	60a3      	str	r3, [r4, #8]
 800d118:	6963      	ldr	r3, [r4, #20]
 800d11a:	425b      	negs	r3, r3
 800d11c:	61a3      	str	r3, [r4, #24]
 800d11e:	6923      	ldr	r3, [r4, #16]
 800d120:	b943      	cbnz	r3, 800d134 <__swsetup_r+0xa8>
 800d122:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d126:	d1c4      	bne.n	800d0b2 <__swsetup_r+0x26>
 800d128:	bd38      	pop	{r3, r4, r5, pc}
 800d12a:	0781      	lsls	r1, r0, #30
 800d12c:	bf58      	it	pl
 800d12e:	6963      	ldrpl	r3, [r4, #20]
 800d130:	60a3      	str	r3, [r4, #8]
 800d132:	e7f4      	b.n	800d11e <__swsetup_r+0x92>
 800d134:	2000      	movs	r0, #0
 800d136:	e7f7      	b.n	800d128 <__swsetup_r+0x9c>
 800d138:	20004204 	.word	0x20004204

0800d13c <_raise_r>:
 800d13c:	291f      	cmp	r1, #31
 800d13e:	b538      	push	{r3, r4, r5, lr}
 800d140:	4604      	mov	r4, r0
 800d142:	460d      	mov	r5, r1
 800d144:	d904      	bls.n	800d150 <_raise_r+0x14>
 800d146:	2316      	movs	r3, #22
 800d148:	6003      	str	r3, [r0, #0]
 800d14a:	f04f 30ff 	mov.w	r0, #4294967295
 800d14e:	bd38      	pop	{r3, r4, r5, pc}
 800d150:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d152:	b112      	cbz	r2, 800d15a <_raise_r+0x1e>
 800d154:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d158:	b94b      	cbnz	r3, 800d16e <_raise_r+0x32>
 800d15a:	4620      	mov	r0, r4
 800d15c:	f000 f830 	bl	800d1c0 <_getpid_r>
 800d160:	462a      	mov	r2, r5
 800d162:	4601      	mov	r1, r0
 800d164:	4620      	mov	r0, r4
 800d166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d16a:	f000 b817 	b.w	800d19c <_kill_r>
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d00a      	beq.n	800d188 <_raise_r+0x4c>
 800d172:	1c59      	adds	r1, r3, #1
 800d174:	d103      	bne.n	800d17e <_raise_r+0x42>
 800d176:	2316      	movs	r3, #22
 800d178:	6003      	str	r3, [r0, #0]
 800d17a:	2001      	movs	r0, #1
 800d17c:	e7e7      	b.n	800d14e <_raise_r+0x12>
 800d17e:	2400      	movs	r4, #0
 800d180:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d184:	4628      	mov	r0, r5
 800d186:	4798      	blx	r3
 800d188:	2000      	movs	r0, #0
 800d18a:	e7e0      	b.n	800d14e <_raise_r+0x12>

0800d18c <raise>:
 800d18c:	4b02      	ldr	r3, [pc, #8]	; (800d198 <raise+0xc>)
 800d18e:	4601      	mov	r1, r0
 800d190:	6818      	ldr	r0, [r3, #0]
 800d192:	f7ff bfd3 	b.w	800d13c <_raise_r>
 800d196:	bf00      	nop
 800d198:	20004204 	.word	0x20004204

0800d19c <_kill_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4d07      	ldr	r5, [pc, #28]	; (800d1bc <_kill_r+0x20>)
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	4611      	mov	r1, r2
 800d1a8:	602b      	str	r3, [r5, #0]
 800d1aa:	f000 f9e3 	bl	800d574 <_kill>
 800d1ae:	1c43      	adds	r3, r0, #1
 800d1b0:	d102      	bne.n	800d1b8 <_kill_r+0x1c>
 800d1b2:	682b      	ldr	r3, [r5, #0]
 800d1b4:	b103      	cbz	r3, 800d1b8 <_kill_r+0x1c>
 800d1b6:	6023      	str	r3, [r4, #0]
 800d1b8:	bd38      	pop	{r3, r4, r5, pc}
 800d1ba:	bf00      	nop
 800d1bc:	2002abb4 	.word	0x2002abb4

0800d1c0 <_getpid_r>:
 800d1c0:	f000 b9c8 	b.w	800d554 <_getpid>

0800d1c4 <__swhatbuf_r>:
 800d1c4:	b570      	push	{r4, r5, r6, lr}
 800d1c6:	460c      	mov	r4, r1
 800d1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1cc:	2900      	cmp	r1, #0
 800d1ce:	b096      	sub	sp, #88	; 0x58
 800d1d0:	4615      	mov	r5, r2
 800d1d2:	461e      	mov	r6, r3
 800d1d4:	da0d      	bge.n	800d1f2 <__swhatbuf_r+0x2e>
 800d1d6:	89a3      	ldrh	r3, [r4, #12]
 800d1d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d1dc:	f04f 0100 	mov.w	r1, #0
 800d1e0:	bf0c      	ite	eq
 800d1e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d1e6:	2340      	movne	r3, #64	; 0x40
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	6031      	str	r1, [r6, #0]
 800d1ec:	602b      	str	r3, [r5, #0]
 800d1ee:	b016      	add	sp, #88	; 0x58
 800d1f0:	bd70      	pop	{r4, r5, r6, pc}
 800d1f2:	466a      	mov	r2, sp
 800d1f4:	f000 f848 	bl	800d288 <_fstat_r>
 800d1f8:	2800      	cmp	r0, #0
 800d1fa:	dbec      	blt.n	800d1d6 <__swhatbuf_r+0x12>
 800d1fc:	9901      	ldr	r1, [sp, #4]
 800d1fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d202:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d206:	4259      	negs	r1, r3
 800d208:	4159      	adcs	r1, r3
 800d20a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d20e:	e7eb      	b.n	800d1e8 <__swhatbuf_r+0x24>

0800d210 <__smakebuf_r>:
 800d210:	898b      	ldrh	r3, [r1, #12]
 800d212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d214:	079d      	lsls	r5, r3, #30
 800d216:	4606      	mov	r6, r0
 800d218:	460c      	mov	r4, r1
 800d21a:	d507      	bpl.n	800d22c <__smakebuf_r+0x1c>
 800d21c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d220:	6023      	str	r3, [r4, #0]
 800d222:	6123      	str	r3, [r4, #16]
 800d224:	2301      	movs	r3, #1
 800d226:	6163      	str	r3, [r4, #20]
 800d228:	b002      	add	sp, #8
 800d22a:	bd70      	pop	{r4, r5, r6, pc}
 800d22c:	ab01      	add	r3, sp, #4
 800d22e:	466a      	mov	r2, sp
 800d230:	f7ff ffc8 	bl	800d1c4 <__swhatbuf_r>
 800d234:	9900      	ldr	r1, [sp, #0]
 800d236:	4605      	mov	r5, r0
 800d238:	4630      	mov	r0, r6
 800d23a:	f7fd fb9f 	bl	800a97c <_malloc_r>
 800d23e:	b948      	cbnz	r0, 800d254 <__smakebuf_r+0x44>
 800d240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d244:	059a      	lsls	r2, r3, #22
 800d246:	d4ef      	bmi.n	800d228 <__smakebuf_r+0x18>
 800d248:	f023 0303 	bic.w	r3, r3, #3
 800d24c:	f043 0302 	orr.w	r3, r3, #2
 800d250:	81a3      	strh	r3, [r4, #12]
 800d252:	e7e3      	b.n	800d21c <__smakebuf_r+0xc>
 800d254:	89a3      	ldrh	r3, [r4, #12]
 800d256:	6020      	str	r0, [r4, #0]
 800d258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d25c:	81a3      	strh	r3, [r4, #12]
 800d25e:	9b00      	ldr	r3, [sp, #0]
 800d260:	6163      	str	r3, [r4, #20]
 800d262:	9b01      	ldr	r3, [sp, #4]
 800d264:	6120      	str	r0, [r4, #16]
 800d266:	b15b      	cbz	r3, 800d280 <__smakebuf_r+0x70>
 800d268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d26c:	4630      	mov	r0, r6
 800d26e:	f000 f81d 	bl	800d2ac <_isatty_r>
 800d272:	b128      	cbz	r0, 800d280 <__smakebuf_r+0x70>
 800d274:	89a3      	ldrh	r3, [r4, #12]
 800d276:	f023 0303 	bic.w	r3, r3, #3
 800d27a:	f043 0301 	orr.w	r3, r3, #1
 800d27e:	81a3      	strh	r3, [r4, #12]
 800d280:	89a3      	ldrh	r3, [r4, #12]
 800d282:	431d      	orrs	r5, r3
 800d284:	81a5      	strh	r5, [r4, #12]
 800d286:	e7cf      	b.n	800d228 <__smakebuf_r+0x18>

0800d288 <_fstat_r>:
 800d288:	b538      	push	{r3, r4, r5, lr}
 800d28a:	4d07      	ldr	r5, [pc, #28]	; (800d2a8 <_fstat_r+0x20>)
 800d28c:	2300      	movs	r3, #0
 800d28e:	4604      	mov	r4, r0
 800d290:	4608      	mov	r0, r1
 800d292:	4611      	mov	r1, r2
 800d294:	602b      	str	r3, [r5, #0]
 800d296:	f000 f955 	bl	800d544 <_fstat>
 800d29a:	1c43      	adds	r3, r0, #1
 800d29c:	d102      	bne.n	800d2a4 <_fstat_r+0x1c>
 800d29e:	682b      	ldr	r3, [r5, #0]
 800d2a0:	b103      	cbz	r3, 800d2a4 <_fstat_r+0x1c>
 800d2a2:	6023      	str	r3, [r4, #0]
 800d2a4:	bd38      	pop	{r3, r4, r5, pc}
 800d2a6:	bf00      	nop
 800d2a8:	2002abb4 	.word	0x2002abb4

0800d2ac <_isatty_r>:
 800d2ac:	b538      	push	{r3, r4, r5, lr}
 800d2ae:	4d06      	ldr	r5, [pc, #24]	; (800d2c8 <_isatty_r+0x1c>)
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	4608      	mov	r0, r1
 800d2b6:	602b      	str	r3, [r5, #0]
 800d2b8:	f000 f954 	bl	800d564 <_isatty>
 800d2bc:	1c43      	adds	r3, r0, #1
 800d2be:	d102      	bne.n	800d2c6 <_isatty_r+0x1a>
 800d2c0:	682b      	ldr	r3, [r5, #0]
 800d2c2:	b103      	cbz	r3, 800d2c6 <_isatty_r+0x1a>
 800d2c4:	6023      	str	r3, [r4, #0]
 800d2c6:	bd38      	pop	{r3, r4, r5, pc}
 800d2c8:	2002abb4 	.word	0x2002abb4

0800d2cc <expf>:
 800d2cc:	b508      	push	{r3, lr}
 800d2ce:	ed2d 8b02 	vpush	{d8}
 800d2d2:	eef0 8a40 	vmov.f32	s17, s0
 800d2d6:	f000 f85f 	bl	800d398 <__ieee754_expf>
 800d2da:	eeb0 8a40 	vmov.f32	s16, s0
 800d2de:	eeb0 0a68 	vmov.f32	s0, s17
 800d2e2:	f000 f829 	bl	800d338 <finitef>
 800d2e6:	b160      	cbz	r0, 800d302 <expf+0x36>
 800d2e8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800d328 <expf+0x5c>
 800d2ec:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2f4:	dd0a      	ble.n	800d30c <expf+0x40>
 800d2f6:	f7fe f9ad 	bl	800b654 <__errno>
 800d2fa:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800d32c <expf+0x60>
 800d2fe:	2322      	movs	r3, #34	; 0x22
 800d300:	6003      	str	r3, [r0, #0]
 800d302:	eeb0 0a48 	vmov.f32	s0, s16
 800d306:	ecbd 8b02 	vpop	{d8}
 800d30a:	bd08      	pop	{r3, pc}
 800d30c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d330 <expf+0x64>
 800d310:	eef4 8ae7 	vcmpe.f32	s17, s15
 800d314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d318:	d5f3      	bpl.n	800d302 <expf+0x36>
 800d31a:	f7fe f99b 	bl	800b654 <__errno>
 800d31e:	2322      	movs	r3, #34	; 0x22
 800d320:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800d334 <expf+0x68>
 800d324:	6003      	str	r3, [r0, #0]
 800d326:	e7ec      	b.n	800d302 <expf+0x36>
 800d328:	42b17217 	.word	0x42b17217
 800d32c:	7f800000 	.word	0x7f800000
 800d330:	c2cff1b5 	.word	0xc2cff1b5
 800d334:	00000000 	.word	0x00000000

0800d338 <finitef>:
 800d338:	b082      	sub	sp, #8
 800d33a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d33e:	9801      	ldr	r0, [sp, #4]
 800d340:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d344:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d348:	bfac      	ite	ge
 800d34a:	2000      	movge	r0, #0
 800d34c:	2001      	movlt	r0, #1
 800d34e:	b002      	add	sp, #8
 800d350:	4770      	bx	lr

0800d352 <with_errnof>:
 800d352:	b513      	push	{r0, r1, r4, lr}
 800d354:	4604      	mov	r4, r0
 800d356:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d35a:	f7fe f97b 	bl	800b654 <__errno>
 800d35e:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d362:	6004      	str	r4, [r0, #0]
 800d364:	b002      	add	sp, #8
 800d366:	bd10      	pop	{r4, pc}

0800d368 <xflowf>:
 800d368:	b130      	cbz	r0, 800d378 <xflowf+0x10>
 800d36a:	eef1 7a40 	vneg.f32	s15, s0
 800d36e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d372:	2022      	movs	r0, #34	; 0x22
 800d374:	f7ff bfed 	b.w	800d352 <with_errnof>
 800d378:	eef0 7a40 	vmov.f32	s15, s0
 800d37c:	e7f7      	b.n	800d36e <xflowf+0x6>
	...

0800d380 <__math_uflowf>:
 800d380:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d388 <__math_uflowf+0x8>
 800d384:	f7ff bff0 	b.w	800d368 <xflowf>
 800d388:	10000000 	.word	0x10000000

0800d38c <__math_oflowf>:
 800d38c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d394 <__math_oflowf+0x8>
 800d390:	f7ff bfea 	b.w	800d368 <xflowf>
 800d394:	70000000 	.word	0x70000000

0800d398 <__ieee754_expf>:
 800d398:	ee10 2a10 	vmov	r2, s0
 800d39c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d3a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d3a4:	d902      	bls.n	800d3ac <__ieee754_expf+0x14>
 800d3a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d3aa:	4770      	bx	lr
 800d3ac:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800d3b0:	d106      	bne.n	800d3c0 <__ieee754_expf+0x28>
 800d3b2:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800d4ec <__ieee754_expf+0x154>
 800d3b6:	2900      	cmp	r1, #0
 800d3b8:	bf18      	it	ne
 800d3ba:	eeb0 0a67 	vmovne.f32	s0, s15
 800d3be:	4770      	bx	lr
 800d3c0:	484b      	ldr	r0, [pc, #300]	; (800d4f0 <__ieee754_expf+0x158>)
 800d3c2:	4282      	cmp	r2, r0
 800d3c4:	dd02      	ble.n	800d3cc <__ieee754_expf+0x34>
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	f7ff bfe0 	b.w	800d38c <__math_oflowf>
 800d3cc:	2a00      	cmp	r2, #0
 800d3ce:	da05      	bge.n	800d3dc <__ieee754_expf+0x44>
 800d3d0:	4a48      	ldr	r2, [pc, #288]	; (800d4f4 <__ieee754_expf+0x15c>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d902      	bls.n	800d3dc <__ieee754_expf+0x44>
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	f7ff bfd2 	b.w	800d380 <__math_uflowf>
 800d3dc:	4a46      	ldr	r2, [pc, #280]	; (800d4f8 <__ieee754_expf+0x160>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d3e4:	d952      	bls.n	800d48c <__ieee754_expf+0xf4>
 800d3e6:	4a45      	ldr	r2, [pc, #276]	; (800d4fc <__ieee754_expf+0x164>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800d3ee:	d834      	bhi.n	800d45a <__ieee754_expf+0xc2>
 800d3f0:	4b43      	ldr	r3, [pc, #268]	; (800d500 <__ieee754_expf+0x168>)
 800d3f2:	4413      	add	r3, r2
 800d3f4:	ed93 7a00 	vldr	s14, [r3]
 800d3f8:	4b42      	ldr	r3, [pc, #264]	; (800d504 <__ieee754_expf+0x16c>)
 800d3fa:	4413      	add	r3, r2
 800d3fc:	ee30 7a47 	vsub.f32	s14, s0, s14
 800d400:	f1c1 0201 	rsb	r2, r1, #1
 800d404:	edd3 7a00 	vldr	s15, [r3]
 800d408:	1a52      	subs	r2, r2, r1
 800d40a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800d40e:	ee20 6a00 	vmul.f32	s12, s0, s0
 800d412:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800d508 <__ieee754_expf+0x170>
 800d416:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d50c <__ieee754_expf+0x174>
 800d41a:	eee6 6a05 	vfma.f32	s13, s12, s10
 800d41e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800d510 <__ieee754_expf+0x178>
 800d422:	eea6 5a86 	vfma.f32	s10, s13, s12
 800d426:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d514 <__ieee754_expf+0x17c>
 800d42a:	eee5 6a06 	vfma.f32	s13, s10, s12
 800d42e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800d518 <__ieee754_expf+0x180>
 800d432:	eea6 5a86 	vfma.f32	s10, s13, s12
 800d436:	eef0 6a40 	vmov.f32	s13, s0
 800d43a:	eee5 6a46 	vfms.f32	s13, s10, s12
 800d43e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800d442:	ee20 5a26 	vmul.f32	s10, s0, s13
 800d446:	bb92      	cbnz	r2, 800d4ae <__ieee754_expf+0x116>
 800d448:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800d44c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800d450:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d454:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800d458:	4770      	bx	lr
 800d45a:	4b30      	ldr	r3, [pc, #192]	; (800d51c <__ieee754_expf+0x184>)
 800d45c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800d520 <__ieee754_expf+0x188>
 800d460:	eddf 6a30 	vldr	s13, [pc, #192]	; 800d524 <__ieee754_expf+0x18c>
 800d464:	4413      	add	r3, r2
 800d466:	edd3 7a00 	vldr	s15, [r3]
 800d46a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d46e:	eeb0 7a40 	vmov.f32	s14, s0
 800d472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d476:	ee17 2a90 	vmov	r2, s15
 800d47a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d47e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d482:	eddf 6a29 	vldr	s13, [pc, #164]	; 800d528 <__ieee754_expf+0x190>
 800d486:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d48a:	e7be      	b.n	800d40a <__ieee754_expf+0x72>
 800d48c:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800d490:	d20b      	bcs.n	800d4aa <__ieee754_expf+0x112>
 800d492:	eddf 6a26 	vldr	s13, [pc, #152]	; 800d52c <__ieee754_expf+0x194>
 800d496:	ee70 6a26 	vadd.f32	s13, s0, s13
 800d49a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800d49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a2:	dd02      	ble.n	800d4aa <__ieee754_expf+0x112>
 800d4a4:	ee30 0a25 	vadd.f32	s0, s0, s11
 800d4a8:	4770      	bx	lr
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	e7af      	b.n	800d40e <__ieee754_expf+0x76>
 800d4ae:	ee36 6a66 	vsub.f32	s12, s12, s13
 800d4b2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800d4b6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800d4ba:	bfb8      	it	lt
 800d4bc:	3264      	addlt	r2, #100	; 0x64
 800d4be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d4c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4c6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800d4ca:	ee17 3a90 	vmov	r3, s15
 800d4ce:	bfab      	itete	ge
 800d4d0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800d4d4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800d4d8:	ee00 3a10 	vmovge	s0, r3
 800d4dc:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800d530 <__ieee754_expf+0x198>
 800d4e0:	bfbc      	itt	lt
 800d4e2:	ee00 3a10 	vmovlt	s0, r3
 800d4e6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800d4ea:	4770      	bx	lr
 800d4ec:	00000000 	.word	0x00000000
 800d4f0:	42b17217 	.word	0x42b17217
 800d4f4:	42cff1b5 	.word	0x42cff1b5
 800d4f8:	3eb17218 	.word	0x3eb17218
 800d4fc:	3f851591 	.word	0x3f851591
 800d500:	080dc90c 	.word	0x080dc90c
 800d504:	080dc914 	.word	0x080dc914
 800d508:	3331bb4c 	.word	0x3331bb4c
 800d50c:	b5ddea0e 	.word	0xb5ddea0e
 800d510:	388ab355 	.word	0x388ab355
 800d514:	bb360b61 	.word	0xbb360b61
 800d518:	3e2aaaab 	.word	0x3e2aaaab
 800d51c:	080dc904 	.word	0x080dc904
 800d520:	3fb8aa3b 	.word	0x3fb8aa3b
 800d524:	3f317180 	.word	0x3f317180
 800d528:	3717f7d1 	.word	0x3717f7d1
 800d52c:	7149f2ca 	.word	0x7149f2ca
 800d530:	0d800000 	.word	0x0d800000

0800d534 <_close>:
 800d534:	4b02      	ldr	r3, [pc, #8]	; (800d540 <_close+0xc>)
 800d536:	2258      	movs	r2, #88	; 0x58
 800d538:	601a      	str	r2, [r3, #0]
 800d53a:	f04f 30ff 	mov.w	r0, #4294967295
 800d53e:	4770      	bx	lr
 800d540:	2002abb4 	.word	0x2002abb4

0800d544 <_fstat>:
 800d544:	4b02      	ldr	r3, [pc, #8]	; (800d550 <_fstat+0xc>)
 800d546:	2258      	movs	r2, #88	; 0x58
 800d548:	601a      	str	r2, [r3, #0]
 800d54a:	f04f 30ff 	mov.w	r0, #4294967295
 800d54e:	4770      	bx	lr
 800d550:	2002abb4 	.word	0x2002abb4

0800d554 <_getpid>:
 800d554:	4b02      	ldr	r3, [pc, #8]	; (800d560 <_getpid+0xc>)
 800d556:	2258      	movs	r2, #88	; 0x58
 800d558:	601a      	str	r2, [r3, #0]
 800d55a:	f04f 30ff 	mov.w	r0, #4294967295
 800d55e:	4770      	bx	lr
 800d560:	2002abb4 	.word	0x2002abb4

0800d564 <_isatty>:
 800d564:	4b02      	ldr	r3, [pc, #8]	; (800d570 <_isatty+0xc>)
 800d566:	2258      	movs	r2, #88	; 0x58
 800d568:	601a      	str	r2, [r3, #0]
 800d56a:	2000      	movs	r0, #0
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	2002abb4 	.word	0x2002abb4

0800d574 <_kill>:
 800d574:	4b02      	ldr	r3, [pc, #8]	; (800d580 <_kill+0xc>)
 800d576:	2258      	movs	r2, #88	; 0x58
 800d578:	601a      	str	r2, [r3, #0]
 800d57a:	f04f 30ff 	mov.w	r0, #4294967295
 800d57e:	4770      	bx	lr
 800d580:	2002abb4 	.word	0x2002abb4

0800d584 <_lseek>:
 800d584:	4b02      	ldr	r3, [pc, #8]	; (800d590 <_lseek+0xc>)
 800d586:	2258      	movs	r2, #88	; 0x58
 800d588:	601a      	str	r2, [r3, #0]
 800d58a:	f04f 30ff 	mov.w	r0, #4294967295
 800d58e:	4770      	bx	lr
 800d590:	2002abb4 	.word	0x2002abb4

0800d594 <_read>:
 800d594:	4b02      	ldr	r3, [pc, #8]	; (800d5a0 <_read+0xc>)
 800d596:	2258      	movs	r2, #88	; 0x58
 800d598:	601a      	str	r2, [r3, #0]
 800d59a:	f04f 30ff 	mov.w	r0, #4294967295
 800d59e:	4770      	bx	lr
 800d5a0:	2002abb4 	.word	0x2002abb4

0800d5a4 <_exit>:
 800d5a4:	e7fe      	b.n	800d5a4 <_exit>
	...

0800d5a8 <_init>:
 800d5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5aa:	bf00      	nop
 800d5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ae:	bc08      	pop	{r3}
 800d5b0:	469e      	mov	lr, r3
 800d5b2:	4770      	bx	lr

0800d5b4 <_fini>:
 800d5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5b6:	bf00      	nop
 800d5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ba:	bc08      	pop	{r3}
 800d5bc:	469e      	mov	lr, r3
 800d5be:	4770      	bx	lr
