
NUCLEO-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010aac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d2bc  08010cc0  08010cc0  00020cc0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801df7c  0801df7c  00034248  2**0
                  CONTENTS
  4 .ARM          00000008  0801df7c  0801df7c  0002df7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801df84  0801df84  00034248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801df84  0801df84  0002df84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801df88  0801df88  0002df88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004248  20000000  0801df8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aac4  20004260  080221d4  00034260  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  2000ed24  080221d4  0003ed24  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00034248  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00034276  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021dc9  00000000  00000000  000342b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000567f  00000000  00000000  00056082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00009d2b  00000000  00000000  0005b701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d90  00000000  00000000  00065430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010c9  00000000  00000000  000661c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e1cd  00000000  00000000  00067289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d03a  00000000  00000000  00095456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010dae7  00000000  00000000  000b2490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000035b0  00000000  00000000  001bff78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  001c3528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20004260 	.word	0x20004260
 800021c:	00000000 	.word	0x00000000
 8000220:	08010c94 	.word	0x08010c94

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20004264 	.word	0x20004264
 800023c:	08010c94 	.word	0x08010c94

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_frsub>:
 80002f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__addsf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_fsub>:
 80002f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002fc <__addsf3>:
 80002fc:	0042      	lsls	r2, r0, #1
 80002fe:	bf1f      	itttt	ne
 8000300:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000304:	ea92 0f03 	teqne	r2, r3
 8000308:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800030c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000310:	d06a      	beq.n	80003e8 <__addsf3+0xec>
 8000312:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000316:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800031a:	bfc1      	itttt	gt
 800031c:	18d2      	addgt	r2, r2, r3
 800031e:	4041      	eorgt	r1, r0
 8000320:	4048      	eorgt	r0, r1
 8000322:	4041      	eorgt	r1, r0
 8000324:	bfb8      	it	lt
 8000326:	425b      	neglt	r3, r3
 8000328:	2b19      	cmp	r3, #25
 800032a:	bf88      	it	hi
 800032c:	4770      	bxhi	lr
 800032e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000332:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000336:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800033a:	bf18      	it	ne
 800033c:	4240      	negne	r0, r0
 800033e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000342:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000346:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800034a:	bf18      	it	ne
 800034c:	4249      	negne	r1, r1
 800034e:	ea92 0f03 	teq	r2, r3
 8000352:	d03f      	beq.n	80003d4 <__addsf3+0xd8>
 8000354:	f1a2 0201 	sub.w	r2, r2, #1
 8000358:	fa41 fc03 	asr.w	ip, r1, r3
 800035c:	eb10 000c 	adds.w	r0, r0, ip
 8000360:	f1c3 0320 	rsb	r3, r3, #32
 8000364:	fa01 f103 	lsl.w	r1, r1, r3
 8000368:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800036c:	d502      	bpl.n	8000374 <__addsf3+0x78>
 800036e:	4249      	negs	r1, r1
 8000370:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000374:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000378:	d313      	bcc.n	80003a2 <__addsf3+0xa6>
 800037a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800037e:	d306      	bcc.n	800038e <__addsf3+0x92>
 8000380:	0840      	lsrs	r0, r0, #1
 8000382:	ea4f 0131 	mov.w	r1, r1, rrx
 8000386:	f102 0201 	add.w	r2, r2, #1
 800038a:	2afe      	cmp	r2, #254	; 0xfe
 800038c:	d251      	bcs.n	8000432 <__addsf3+0x136>
 800038e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000392:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000396:	bf08      	it	eq
 8000398:	f020 0001 	biceq.w	r0, r0, #1
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	4770      	bx	lr
 80003a2:	0049      	lsls	r1, r1, #1
 80003a4:	eb40 0000 	adc.w	r0, r0, r0
 80003a8:	3a01      	subs	r2, #1
 80003aa:	bf28      	it	cs
 80003ac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003b0:	d2ed      	bcs.n	800038e <__addsf3+0x92>
 80003b2:	fab0 fc80 	clz	ip, r0
 80003b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80003ba:	ebb2 020c 	subs.w	r2, r2, ip
 80003be:	fa00 f00c 	lsl.w	r0, r0, ip
 80003c2:	bfaa      	itet	ge
 80003c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003c8:	4252      	neglt	r2, r2
 80003ca:	4318      	orrge	r0, r3
 80003cc:	bfbc      	itt	lt
 80003ce:	40d0      	lsrlt	r0, r2
 80003d0:	4318      	orrlt	r0, r3
 80003d2:	4770      	bx	lr
 80003d4:	f092 0f00 	teq	r2, #0
 80003d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003dc:	bf06      	itte	eq
 80003de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003e2:	3201      	addeq	r2, #1
 80003e4:	3b01      	subne	r3, #1
 80003e6:	e7b5      	b.n	8000354 <__addsf3+0x58>
 80003e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003f0:	bf18      	it	ne
 80003f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003f6:	d021      	beq.n	800043c <__addsf3+0x140>
 80003f8:	ea92 0f03 	teq	r2, r3
 80003fc:	d004      	beq.n	8000408 <__addsf3+0x10c>
 80003fe:	f092 0f00 	teq	r2, #0
 8000402:	bf08      	it	eq
 8000404:	4608      	moveq	r0, r1
 8000406:	4770      	bx	lr
 8000408:	ea90 0f01 	teq	r0, r1
 800040c:	bf1c      	itt	ne
 800040e:	2000      	movne	r0, #0
 8000410:	4770      	bxne	lr
 8000412:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000416:	d104      	bne.n	8000422 <__addsf3+0x126>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	bf28      	it	cs
 800041c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000420:	4770      	bx	lr
 8000422:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000426:	bf3c      	itt	cc
 8000428:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800042c:	4770      	bxcc	lr
 800042e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000432:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000436:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800043a:	4770      	bx	lr
 800043c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000440:	bf16      	itet	ne
 8000442:	4608      	movne	r0, r1
 8000444:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000448:	4601      	movne	r1, r0
 800044a:	0242      	lsls	r2, r0, #9
 800044c:	bf06      	itte	eq
 800044e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000452:	ea90 0f01 	teqeq	r0, r1
 8000456:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800045a:	4770      	bx	lr

0800045c <__aeabi_ui2f>:
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e004      	b.n	800046c <__aeabi_i2f+0x8>
 8000462:	bf00      	nop

08000464 <__aeabi_i2f>:
 8000464:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000468:	bf48      	it	mi
 800046a:	4240      	negmi	r0, r0
 800046c:	ea5f 0c00 	movs.w	ip, r0
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000478:	4601      	mov	r1, r0
 800047a:	f04f 0000 	mov.w	r0, #0
 800047e:	e01c      	b.n	80004ba <__aeabi_l2f+0x2a>

08000480 <__aeabi_ul2f>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	f04f 0300 	mov.w	r3, #0
 800048c:	e00a      	b.n	80004a4 <__aeabi_l2f+0x14>
 800048e:	bf00      	nop

08000490 <__aeabi_l2f>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800049c:	d502      	bpl.n	80004a4 <__aeabi_l2f+0x14>
 800049e:	4240      	negs	r0, r0
 80004a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a4:	ea5f 0c01 	movs.w	ip, r1
 80004a8:	bf02      	ittt	eq
 80004aa:	4684      	moveq	ip, r0
 80004ac:	4601      	moveq	r1, r0
 80004ae:	2000      	moveq	r0, #0
 80004b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004b4:	bf08      	it	eq
 80004b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004be:	fabc f28c 	clz	r2, ip
 80004c2:	3a08      	subs	r2, #8
 80004c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004c8:	db10      	blt.n	80004ec <__aeabi_l2f+0x5c>
 80004ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80004ce:	4463      	add	r3, ip
 80004d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004d4:	f1c2 0220 	rsb	r2, r2, #32
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	fa20 f202 	lsr.w	r2, r0, r2
 80004e0:	eb43 0002 	adc.w	r0, r3, r2
 80004e4:	bf08      	it	eq
 80004e6:	f020 0001 	biceq.w	r0, r0, #1
 80004ea:	4770      	bx	lr
 80004ec:	f102 0220 	add.w	r2, r2, #32
 80004f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004f4:	f1c2 0220 	rsb	r2, r2, #32
 80004f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004fc:	fa21 f202 	lsr.w	r2, r1, r2
 8000500:	eb43 0002 	adc.w	r0, r3, r2
 8000504:	bf08      	it	eq
 8000506:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800050a:	4770      	bx	lr

0800050c <__aeabi_uldivmod>:
 800050c:	b953      	cbnz	r3, 8000524 <__aeabi_uldivmod+0x18>
 800050e:	b94a      	cbnz	r2, 8000524 <__aeabi_uldivmod+0x18>
 8000510:	2900      	cmp	r1, #0
 8000512:	bf08      	it	eq
 8000514:	2800      	cmpeq	r0, #0
 8000516:	bf1c      	itt	ne
 8000518:	f04f 31ff 	movne.w	r1, #4294967295
 800051c:	f04f 30ff 	movne.w	r0, #4294967295
 8000520:	f000 b9c6 	b.w	80008b0 <__aeabi_idiv0>
 8000524:	f1ad 0c08 	sub.w	ip, sp, #8
 8000528:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800052c:	f000 f85c 	bl	80005e8 <__udivmoddi4>
 8000530:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000538:	b004      	add	sp, #16
 800053a:	4770      	bx	lr

0800053c <__aeabi_f2lz>:
 800053c:	ee07 0a90 	vmov	s15, r0
 8000540:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000548:	d401      	bmi.n	800054e <__aeabi_f2lz+0x12>
 800054a:	f000 b80d 	b.w	8000568 <__aeabi_f2ulz>
 800054e:	eef1 7a67 	vneg.f32	s15, s15
 8000552:	b508      	push	{r3, lr}
 8000554:	ee17 0a90 	vmov	r0, s15
 8000558:	f000 f806 	bl	8000568 <__aeabi_f2ulz>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	bd08      	pop	{r3, pc}
 8000564:	0000      	movs	r0, r0
	...

08000568 <__aeabi_f2ulz>:
 8000568:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000598 <__aeabi_f2ulz+0x30>
 800056c:	ee07 0a90 	vmov	s15, r0
 8000570:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80005a0 <__aeabi_f2ulz+0x38>
 8000574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000578:	ee27 6b06 	vmul.f64	d6, d7, d6
 800057c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000580:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000584:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000588:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800058c:	ee16 1a10 	vmov	r1, s12
 8000590:	ee17 0a90 	vmov	r0, s15
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	00000000 	.word	0x00000000
 800059c:	3df00000 	.word	0x3df00000
 80005a0:	00000000 	.word	0x00000000
 80005a4:	41f00000 	.word	0x41f00000

080005a8 <__aeabi_d2ulz>:
 80005a8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80005d8 <__aeabi_d2ulz+0x30>
 80005ac:	ec41 0b17 	vmov	d7, r0, r1
 80005b0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80005e0 <__aeabi_d2ulz+0x38>
 80005b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80005b8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80005bc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80005c0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80005c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80005c8:	ee16 1a10 	vmov	r1, s12
 80005cc:	ee17 0a90 	vmov	r0, s15
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	f3af 8000 	nop.w
 80005d8:	00000000 	.word	0x00000000
 80005dc:	3df00000 	.word	0x3df00000
 80005e0:	00000000 	.word	0x00000000
 80005e4:	41f00000 	.word	0x41f00000

080005e8 <__udivmoddi4>:
 80005e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005ec:	9e08      	ldr	r6, [sp, #32]
 80005ee:	460d      	mov	r5, r1
 80005f0:	4604      	mov	r4, r0
 80005f2:	460f      	mov	r7, r1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d14a      	bne.n	800068e <__udivmoddi4+0xa6>
 80005f8:	428a      	cmp	r2, r1
 80005fa:	4694      	mov	ip, r2
 80005fc:	d965      	bls.n	80006ca <__udivmoddi4+0xe2>
 80005fe:	fab2 f382 	clz	r3, r2
 8000602:	b143      	cbz	r3, 8000616 <__udivmoddi4+0x2e>
 8000604:	fa02 fc03 	lsl.w	ip, r2, r3
 8000608:	f1c3 0220 	rsb	r2, r3, #32
 800060c:	409f      	lsls	r7, r3
 800060e:	fa20 f202 	lsr.w	r2, r0, r2
 8000612:	4317      	orrs	r7, r2
 8000614:	409c      	lsls	r4, r3
 8000616:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800061a:	fa1f f58c 	uxth.w	r5, ip
 800061e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000622:	0c22      	lsrs	r2, r4, #16
 8000624:	fb0e 7711 	mls	r7, lr, r1, r7
 8000628:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800062c:	fb01 f005 	mul.w	r0, r1, r5
 8000630:	4290      	cmp	r0, r2
 8000632:	d90a      	bls.n	800064a <__udivmoddi4+0x62>
 8000634:	eb1c 0202 	adds.w	r2, ip, r2
 8000638:	f101 37ff 	add.w	r7, r1, #4294967295
 800063c:	f080 811c 	bcs.w	8000878 <__udivmoddi4+0x290>
 8000640:	4290      	cmp	r0, r2
 8000642:	f240 8119 	bls.w	8000878 <__udivmoddi4+0x290>
 8000646:	3902      	subs	r1, #2
 8000648:	4462      	add	r2, ip
 800064a:	1a12      	subs	r2, r2, r0
 800064c:	b2a4      	uxth	r4, r4
 800064e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000652:	fb0e 2210 	mls	r2, lr, r0, r2
 8000656:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800065a:	fb00 f505 	mul.w	r5, r0, r5
 800065e:	42a5      	cmp	r5, r4
 8000660:	d90a      	bls.n	8000678 <__udivmoddi4+0x90>
 8000662:	eb1c 0404 	adds.w	r4, ip, r4
 8000666:	f100 32ff 	add.w	r2, r0, #4294967295
 800066a:	f080 8107 	bcs.w	800087c <__udivmoddi4+0x294>
 800066e:	42a5      	cmp	r5, r4
 8000670:	f240 8104 	bls.w	800087c <__udivmoddi4+0x294>
 8000674:	4464      	add	r4, ip
 8000676:	3802      	subs	r0, #2
 8000678:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800067c:	1b64      	subs	r4, r4, r5
 800067e:	2100      	movs	r1, #0
 8000680:	b11e      	cbz	r6, 800068a <__udivmoddi4+0xa2>
 8000682:	40dc      	lsrs	r4, r3
 8000684:	2300      	movs	r3, #0
 8000686:	e9c6 4300 	strd	r4, r3, [r6]
 800068a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068e:	428b      	cmp	r3, r1
 8000690:	d908      	bls.n	80006a4 <__udivmoddi4+0xbc>
 8000692:	2e00      	cmp	r6, #0
 8000694:	f000 80ed 	beq.w	8000872 <__udivmoddi4+0x28a>
 8000698:	2100      	movs	r1, #0
 800069a:	e9c6 0500 	strd	r0, r5, [r6]
 800069e:	4608      	mov	r0, r1
 80006a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a4:	fab3 f183 	clz	r1, r3
 80006a8:	2900      	cmp	r1, #0
 80006aa:	d149      	bne.n	8000740 <__udivmoddi4+0x158>
 80006ac:	42ab      	cmp	r3, r5
 80006ae:	d302      	bcc.n	80006b6 <__udivmoddi4+0xce>
 80006b0:	4282      	cmp	r2, r0
 80006b2:	f200 80f8 	bhi.w	80008a6 <__udivmoddi4+0x2be>
 80006b6:	1a84      	subs	r4, r0, r2
 80006b8:	eb65 0203 	sbc.w	r2, r5, r3
 80006bc:	2001      	movs	r0, #1
 80006be:	4617      	mov	r7, r2
 80006c0:	2e00      	cmp	r6, #0
 80006c2:	d0e2      	beq.n	800068a <__udivmoddi4+0xa2>
 80006c4:	e9c6 4700 	strd	r4, r7, [r6]
 80006c8:	e7df      	b.n	800068a <__udivmoddi4+0xa2>
 80006ca:	b902      	cbnz	r2, 80006ce <__udivmoddi4+0xe6>
 80006cc:	deff      	udf	#255	; 0xff
 80006ce:	fab2 f382 	clz	r3, r2
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	f040 8090 	bne.w	80007f8 <__udivmoddi4+0x210>
 80006d8:	1a8a      	subs	r2, r1, r2
 80006da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006de:	fa1f fe8c 	uxth.w	lr, ip
 80006e2:	2101      	movs	r1, #1
 80006e4:	fbb2 f5f7 	udiv	r5, r2, r7
 80006e8:	fb07 2015 	mls	r0, r7, r5, r2
 80006ec:	0c22      	lsrs	r2, r4, #16
 80006ee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80006f2:	fb0e f005 	mul.w	r0, lr, r5
 80006f6:	4290      	cmp	r0, r2
 80006f8:	d908      	bls.n	800070c <__udivmoddi4+0x124>
 80006fa:	eb1c 0202 	adds.w	r2, ip, r2
 80006fe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000702:	d202      	bcs.n	800070a <__udivmoddi4+0x122>
 8000704:	4290      	cmp	r0, r2
 8000706:	f200 80cb 	bhi.w	80008a0 <__udivmoddi4+0x2b8>
 800070a:	4645      	mov	r5, r8
 800070c:	1a12      	subs	r2, r2, r0
 800070e:	b2a4      	uxth	r4, r4
 8000710:	fbb2 f0f7 	udiv	r0, r2, r7
 8000714:	fb07 2210 	mls	r2, r7, r0, r2
 8000718:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800071c:	fb0e fe00 	mul.w	lr, lr, r0
 8000720:	45a6      	cmp	lr, r4
 8000722:	d908      	bls.n	8000736 <__udivmoddi4+0x14e>
 8000724:	eb1c 0404 	adds.w	r4, ip, r4
 8000728:	f100 32ff 	add.w	r2, r0, #4294967295
 800072c:	d202      	bcs.n	8000734 <__udivmoddi4+0x14c>
 800072e:	45a6      	cmp	lr, r4
 8000730:	f200 80bb 	bhi.w	80008aa <__udivmoddi4+0x2c2>
 8000734:	4610      	mov	r0, r2
 8000736:	eba4 040e 	sub.w	r4, r4, lr
 800073a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800073e:	e79f      	b.n	8000680 <__udivmoddi4+0x98>
 8000740:	f1c1 0720 	rsb	r7, r1, #32
 8000744:	408b      	lsls	r3, r1
 8000746:	fa22 fc07 	lsr.w	ip, r2, r7
 800074a:	ea4c 0c03 	orr.w	ip, ip, r3
 800074e:	fa05 f401 	lsl.w	r4, r5, r1
 8000752:	fa20 f307 	lsr.w	r3, r0, r7
 8000756:	40fd      	lsrs	r5, r7
 8000758:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800075c:	4323      	orrs	r3, r4
 800075e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000762:	fa1f fe8c 	uxth.w	lr, ip
 8000766:	fb09 5518 	mls	r5, r9, r8, r5
 800076a:	0c1c      	lsrs	r4, r3, #16
 800076c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000770:	fb08 f50e 	mul.w	r5, r8, lr
 8000774:	42a5      	cmp	r5, r4
 8000776:	fa02 f201 	lsl.w	r2, r2, r1
 800077a:	fa00 f001 	lsl.w	r0, r0, r1
 800077e:	d90b      	bls.n	8000798 <__udivmoddi4+0x1b0>
 8000780:	eb1c 0404 	adds.w	r4, ip, r4
 8000784:	f108 3aff 	add.w	sl, r8, #4294967295
 8000788:	f080 8088 	bcs.w	800089c <__udivmoddi4+0x2b4>
 800078c:	42a5      	cmp	r5, r4
 800078e:	f240 8085 	bls.w	800089c <__udivmoddi4+0x2b4>
 8000792:	f1a8 0802 	sub.w	r8, r8, #2
 8000796:	4464      	add	r4, ip
 8000798:	1b64      	subs	r4, r4, r5
 800079a:	b29d      	uxth	r5, r3
 800079c:	fbb4 f3f9 	udiv	r3, r4, r9
 80007a0:	fb09 4413 	mls	r4, r9, r3, r4
 80007a4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007a8:	fb03 fe0e 	mul.w	lr, r3, lr
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	d908      	bls.n	80007c2 <__udivmoddi4+0x1da>
 80007b0:	eb1c 0404 	adds.w	r4, ip, r4
 80007b4:	f103 35ff 	add.w	r5, r3, #4294967295
 80007b8:	d26c      	bcs.n	8000894 <__udivmoddi4+0x2ac>
 80007ba:	45a6      	cmp	lr, r4
 80007bc:	d96a      	bls.n	8000894 <__udivmoddi4+0x2ac>
 80007be:	3b02      	subs	r3, #2
 80007c0:	4464      	add	r4, ip
 80007c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007c6:	fba3 9502 	umull	r9, r5, r3, r2
 80007ca:	eba4 040e 	sub.w	r4, r4, lr
 80007ce:	42ac      	cmp	r4, r5
 80007d0:	46c8      	mov	r8, r9
 80007d2:	46ae      	mov	lr, r5
 80007d4:	d356      	bcc.n	8000884 <__udivmoddi4+0x29c>
 80007d6:	d053      	beq.n	8000880 <__udivmoddi4+0x298>
 80007d8:	b156      	cbz	r6, 80007f0 <__udivmoddi4+0x208>
 80007da:	ebb0 0208 	subs.w	r2, r0, r8
 80007de:	eb64 040e 	sbc.w	r4, r4, lr
 80007e2:	fa04 f707 	lsl.w	r7, r4, r7
 80007e6:	40ca      	lsrs	r2, r1
 80007e8:	40cc      	lsrs	r4, r1
 80007ea:	4317      	orrs	r7, r2
 80007ec:	e9c6 7400 	strd	r7, r4, [r6]
 80007f0:	4618      	mov	r0, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f8:	f1c3 0120 	rsb	r1, r3, #32
 80007fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000800:	fa20 f201 	lsr.w	r2, r0, r1
 8000804:	fa25 f101 	lsr.w	r1, r5, r1
 8000808:	409d      	lsls	r5, r3
 800080a:	432a      	orrs	r2, r5
 800080c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000810:	fa1f fe8c 	uxth.w	lr, ip
 8000814:	fbb1 f0f7 	udiv	r0, r1, r7
 8000818:	fb07 1510 	mls	r5, r7, r0, r1
 800081c:	0c11      	lsrs	r1, r2, #16
 800081e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000822:	fb00 f50e 	mul.w	r5, r0, lr
 8000826:	428d      	cmp	r5, r1
 8000828:	fa04 f403 	lsl.w	r4, r4, r3
 800082c:	d908      	bls.n	8000840 <__udivmoddi4+0x258>
 800082e:	eb1c 0101 	adds.w	r1, ip, r1
 8000832:	f100 38ff 	add.w	r8, r0, #4294967295
 8000836:	d22f      	bcs.n	8000898 <__udivmoddi4+0x2b0>
 8000838:	428d      	cmp	r5, r1
 800083a:	d92d      	bls.n	8000898 <__udivmoddi4+0x2b0>
 800083c:	3802      	subs	r0, #2
 800083e:	4461      	add	r1, ip
 8000840:	1b49      	subs	r1, r1, r5
 8000842:	b292      	uxth	r2, r2
 8000844:	fbb1 f5f7 	udiv	r5, r1, r7
 8000848:	fb07 1115 	mls	r1, r7, r5, r1
 800084c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000850:	fb05 f10e 	mul.w	r1, r5, lr
 8000854:	4291      	cmp	r1, r2
 8000856:	d908      	bls.n	800086a <__udivmoddi4+0x282>
 8000858:	eb1c 0202 	adds.w	r2, ip, r2
 800085c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000860:	d216      	bcs.n	8000890 <__udivmoddi4+0x2a8>
 8000862:	4291      	cmp	r1, r2
 8000864:	d914      	bls.n	8000890 <__udivmoddi4+0x2a8>
 8000866:	3d02      	subs	r5, #2
 8000868:	4462      	add	r2, ip
 800086a:	1a52      	subs	r2, r2, r1
 800086c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000870:	e738      	b.n	80006e4 <__udivmoddi4+0xfc>
 8000872:	4631      	mov	r1, r6
 8000874:	4630      	mov	r0, r6
 8000876:	e708      	b.n	800068a <__udivmoddi4+0xa2>
 8000878:	4639      	mov	r1, r7
 800087a:	e6e6      	b.n	800064a <__udivmoddi4+0x62>
 800087c:	4610      	mov	r0, r2
 800087e:	e6fb      	b.n	8000678 <__udivmoddi4+0x90>
 8000880:	4548      	cmp	r0, r9
 8000882:	d2a9      	bcs.n	80007d8 <__udivmoddi4+0x1f0>
 8000884:	ebb9 0802 	subs.w	r8, r9, r2
 8000888:	eb65 0e0c 	sbc.w	lr, r5, ip
 800088c:	3b01      	subs	r3, #1
 800088e:	e7a3      	b.n	80007d8 <__udivmoddi4+0x1f0>
 8000890:	4645      	mov	r5, r8
 8000892:	e7ea      	b.n	800086a <__udivmoddi4+0x282>
 8000894:	462b      	mov	r3, r5
 8000896:	e794      	b.n	80007c2 <__udivmoddi4+0x1da>
 8000898:	4640      	mov	r0, r8
 800089a:	e7d1      	b.n	8000840 <__udivmoddi4+0x258>
 800089c:	46d0      	mov	r8, sl
 800089e:	e77b      	b.n	8000798 <__udivmoddi4+0x1b0>
 80008a0:	3d02      	subs	r5, #2
 80008a2:	4462      	add	r2, ip
 80008a4:	e732      	b.n	800070c <__udivmoddi4+0x124>
 80008a6:	4608      	mov	r0, r1
 80008a8:	e70a      	b.n	80006c0 <__udivmoddi4+0xd8>
 80008aa:	4464      	add	r4, ip
 80008ac:	3802      	subs	r0, #2
 80008ae:	e742      	b.n	8000736 <__udivmoddi4+0x14e>

080008b0 <__aeabi_idiv0>:
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop

080008b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_InitTick+0x3c>)
{
 80008b8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80008c4:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <HAL_InitTick+0x40>)
 80008c6:	6810      	ldr	r0, [r2, #0]
 80008c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80008cc:	f000 f89c 	bl	8000a08 <HAL_SYSTICK_Config>
 80008d0:	4604      	mov	r4, r0
 80008d2:	b958      	cbnz	r0, 80008ec <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d4:	2d0f      	cmp	r5, #15
 80008d6:	d809      	bhi.n	80008ec <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	4602      	mov	r2, r0
 80008da:	4629      	mov	r1, r5
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f000 f860 	bl	80009a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <HAL_InitTick+0x44>)
 80008e6:	4620      	mov	r0, r4
 80008e8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80008ea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80008ec:	2001      	movs	r0, #1
 80008ee:	e7fc      	b.n	80008ea <HAL_InitTick+0x36>
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000318 	.word	0x20000318
 80008f8:	20000004 	.word	0x20000004

080008fc <HAL_Init>:
{
 80008fc:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fe:	2003      	movs	r0, #3
 8000900:	f000 f83e 	bl	8000980 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff ffd5 	bl	80008b4 <HAL_InitTick>
  HAL_MspInit();
 800090a:	f004 fecb 	bl	80056a4 <HAL_MspInit>
}
 800090e:	2000      	movs	r0, #0
 8000910:	bd08      	pop	{r3, pc}
	...

08000914 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000914:	4a03      	ldr	r2, [pc, #12]	; (8000924 <HAL_IncTick+0x10>)
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <HAL_IncTick+0x14>)
 8000918:	6811      	ldr	r1, [r2, #0]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	440b      	add	r3, r1
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	2000427c 	.word	0x2000427c
 8000928:	20000000 	.word	0x20000000

0800092c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800092c:	4b01      	ldr	r3, [pc, #4]	; (8000934 <HAL_GetTick+0x8>)
 800092e:	6818      	ldr	r0, [r3, #0]
}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	2000427c 	.word	0x2000427c

08000938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000938:	b538      	push	{r3, r4, r5, lr}
 800093a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800093c:	f7ff fff6 	bl	800092c <HAL_GetTick>
 8000940:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000942:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000944:	bf1e      	ittt	ne
 8000946:	4b04      	ldrne	r3, [pc, #16]	; (8000958 <HAL_Delay+0x20>)
 8000948:	781b      	ldrbne	r3, [r3, #0]
 800094a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800094c:	f7ff ffee 	bl	800092c <HAL_GetTick>
 8000950:	1b43      	subs	r3, r0, r5
 8000952:	42a3      	cmp	r3, r4
 8000954:	d3fa      	bcc.n	800094c <HAL_Delay+0x14>
  {
  }
}
 8000956:	bd38      	pop	{r3, r4, r5, pc}
 8000958:	20000000 	.word	0x20000000

0800095c <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F7xx_HAL_VERSION;
}
 800095c:	4800      	ldr	r0, [pc, #0]	; (8000960 <HAL_GetHalVersion+0x4>)
 800095e:	4770      	bx	lr
 8000960:	01030100 	.word	0x01030100

08000964 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 8000964:	4b01      	ldr	r3, [pc, #4]	; (800096c <HAL_GetREVID+0x8>)
 8000966:	6818      	ldr	r0, [r3, #0]
}
 8000968:	0c00      	lsrs	r0, r0, #16
 800096a:	4770      	bx	lr
 800096c:	e0042000 	.word	0xe0042000

08000970 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000970:	4b02      	ldr	r3, [pc, #8]	; (800097c <HAL_GetDEVID+0xc>)
 8000972:	6818      	ldr	r0, [r3, #0]
}
 8000974:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e0042000 	.word	0xe0042000

08000980 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000980:	4907      	ldr	r1, [pc, #28]	; (80009a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000982:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000984:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000986:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800098e:	0412      	lsls	r2, r2, #16
 8000990:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800099c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a6:	b530      	push	{r4, r5, lr}
 80009a8:	68dc      	ldr	r4, [r3, #12]
 80009aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b4:	2b04      	cmp	r3, #4
 80009b6:	bf28      	it	cs
 80009b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c0:	bf8c      	ite	hi
 80009c2:	3c03      	subhi	r4, #3
 80009c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80009ca:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009cc:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	fa03 f304 	lsl.w	r3, r3, r4
 80009dc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80009e4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80009e6:	db06      	blt.n	80009f6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80009ec:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80009f0:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80009f4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	f000 000f 	and.w	r0, r0, #15
 80009fa:	4a02      	ldr	r2, [pc, #8]	; (8000a04 <HAL_NVIC_SetPriority+0x60>)
 80009fc:	5413      	strb	r3, [r2, r0]
 80009fe:	e7f9      	b.n	80009f4 <HAL_NVIC_SetPriority+0x50>
 8000a00:	e000ed00 	.word	0xe000ed00
 8000a04:	e000ed14 	.word	0xe000ed14

08000a08 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a08:	3801      	subs	r0, #1
 8000a0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a0e:	d20b      	bcs.n	8000a28 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <HAL_SYSTICK_Config+0x24>)
 8000a16:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a18:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a1a:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a20:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a22:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a24:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a26:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a28:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000a30:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000a32:	4604      	mov	r4, r0
 8000a34:	b908      	cbnz	r0, 8000a3a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8000a36:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000a38:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000a3a:	7f43      	ldrb	r3, [r0, #29]
 8000a3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a40:	b913      	cbnz	r3, 8000a48 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8000a42:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8000a44:	f004 fe46 	bl	80056d4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000a4c:	7923      	ldrb	r3, [r4, #4]
 8000a4e:	b9e3      	cbnz	r3, 8000a8a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <HAL_CRC_Init+0x70>)
 8000a54:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000a56:	689a      	ldr	r2, [r3, #8]
 8000a58:	f022 0218 	bic.w	r2, r2, #24
 8000a5c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000a5e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000a60:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000a62:	b9d2      	cbnz	r2, 8000a9a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000a68:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8000a6a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	6961      	ldr	r1, [r4, #20]
 8000a70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000a74:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000a76:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000a78:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000a7a:	689a      	ldr	r2, [r3, #8]
 8000a7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a80:	430a      	orrs	r2, r1
 8000a82:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8000a84:	2301      	movs	r3, #1
 8000a86:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8000a88:	e7d6      	b.n	8000a38 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000a8a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8000a8e:	4620      	mov	r0, r4
 8000a90:	f000 f808 	bl	8000aa4 <HAL_CRCEx_Polynomial_Set>
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d0e2      	beq.n	8000a5e <HAL_CRC_Init+0x2e>
 8000a98:	e7cd      	b.n	8000a36 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000a9a:	6922      	ldr	r2, [r4, #16]
 8000a9c:	e7e4      	b.n	8000a68 <HAL_CRC_Init+0x38>
 8000a9e:	bf00      	nop
 8000aa0:	04c11db7 	.word	0x04c11db7

08000aa4 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000aa4:	07cb      	lsls	r3, r1, #31
{
 8000aa6:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000aa8:	d50c      	bpl.n	8000ac4 <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000aaa:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000aac:	3b01      	subs	r3, #1
 8000aae:	d31c      	bcc.n	8000aea <HAL_CRCEx_Polynomial_Set+0x46>
 8000ab0:	fa21 f403 	lsr.w	r4, r1, r3
 8000ab4:	07e4      	lsls	r4, r4, #31
 8000ab6:	d5f9      	bpl.n	8000aac <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8000ab8:	2a10      	cmp	r2, #16
 8000aba:	d012      	beq.n	8000ae2 <HAL_CRCEx_Polynomial_Set+0x3e>
 8000abc:	d804      	bhi.n	8000ac8 <HAL_CRCEx_Polynomial_Set+0x24>
 8000abe:	b13a      	cbz	r2, 8000ad0 <HAL_CRCEx_Polynomial_Set+0x2c>
 8000ac0:	2a08      	cmp	r2, #8
 8000ac2:	d010      	beq.n	8000ae6 <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 8000ac4:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8000ac6:	e00b      	b.n	8000ae0 <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 8000ac8:	2a18      	cmp	r2, #24
 8000aca:	d1fb      	bne.n	8000ac4 <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 8000acc:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8000ace:	d8f9      	bhi.n	8000ac4 <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000ad0:	6800      	ldr	r0, [r0, #0]
 8000ad2:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000ad4:	6883      	ldr	r3, [r0, #8]
 8000ad6:	f023 0318 	bic.w	r3, r3, #24
 8000ada:	4313      	orrs	r3, r2
 8000adc:	6083      	str	r3, [r0, #8]
 8000ade:	2000      	movs	r0, #0
}
 8000ae0:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8000ae2:	2b07      	cmp	r3, #7
 8000ae4:	e7f3      	b.n	8000ace <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 8000ae6:	2b0f      	cmp	r3, #15
 8000ae8:	e7f1      	b.n	8000ace <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d1ea      	bne.n	8000ac4 <HAL_CRCEx_Polynomial_Set+0x20>
 8000aee:	e7ef      	b.n	8000ad0 <HAL_CRCEx_Polynomial_Set+0x2c>

08000af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000af4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8000cb0 <HAL_GPIO_Init+0x1c0>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000afa:	4a6b      	ldr	r2, [pc, #428]	; (8000ca8 <HAL_GPIO_Init+0x1b8>)
    ioposition = ((uint32_t)0x01) << position;
 8000afc:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000afe:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000b00:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b02:	ea04 0c05 	and.w	ip, r4, r5
    if (iocurrent == ioposition)
 8000b06:	43ac      	bics	r4, r5
 8000b08:	f040 80b4 	bne.w	8000c74 <HAL_GPIO_Init+0x184>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b0c:	684d      	ldr	r5, [r1, #4]
 8000b0e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b12:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b14:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b18:	fa06 f608 	lsl.w	r6, r6, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b1c:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b1e:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b20:	2f01      	cmp	r7, #1
 8000b22:	d834      	bhi.n	8000b8e <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 8000b24:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b26:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b2a:	68cf      	ldr	r7, [r1, #12]
 8000b2c:	fa07 f708 	lsl.w	r7, r7, r8
 8000b30:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000b34:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b36:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b38:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b3c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000b40:	409f      	lsls	r7, r3
 8000b42:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000b46:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000b48:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b4a:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b4c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b50:	688f      	ldr	r7, [r1, #8]
 8000b52:	fa07 f708 	lsl.w	r7, r7, r8
 8000b56:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8000b5a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b5c:	d119      	bne.n	8000b92 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8000b5e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b62:	f003 0b07 	and.w	fp, r3, #7
 8000b66:	f04f 0e0f 	mov.w	lr, #15
 8000b6a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000b6e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000b72:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b76:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000b7a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b7e:	690f      	ldr	r7, [r1, #16]
 8000b80:	fa07 f70b 	lsl.w	r7, r7, fp
 8000b84:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8000b88:	f8ca 7020 	str.w	r7, [sl, #32]
 8000b8c:	e001      	b.n	8000b92 <HAL_GPIO_Init+0xa2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b8e:	2c03      	cmp	r4, #3
 8000b90:	d1da      	bne.n	8000b48 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8000b92:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b94:	fa04 f408 	lsl.w	r4, r4, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b98:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b9c:	ea07 0706 	and.w	r7, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ba0:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8000ba4:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ba6:	d065      	beq.n	8000c74 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba8:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8000bac:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bb0:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000bb8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bbc:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8000bc2:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8000bc6:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8000bca:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8000bce:	9401      	str	r4, [sp, #4]
 8000bd0:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bd2:	240f      	movs	r4, #15
        temp = SYSCFG->EXTICR[position >> 2];
 8000bd4:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000bd8:	40bc      	lsls	r4, r7
 8000bda:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bde:	4c33      	ldr	r4, [pc, #204]	; (8000cac <HAL_GPIO_Init+0x1bc>)
 8000be0:	42a0      	cmp	r0, r4
 8000be2:	d04e      	beq.n	8000c82 <HAL_GPIO_Init+0x192>
 8000be4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000be8:	42a0      	cmp	r0, r4
 8000bea:	d04c      	beq.n	8000c86 <HAL_GPIO_Init+0x196>
 8000bec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bf0:	42a0      	cmp	r0, r4
 8000bf2:	d04a      	beq.n	8000c8a <HAL_GPIO_Init+0x19a>
 8000bf4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bf8:	42a0      	cmp	r0, r4
 8000bfa:	d048      	beq.n	8000c8e <HAL_GPIO_Init+0x19e>
 8000bfc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c00:	42a0      	cmp	r0, r4
 8000c02:	d046      	beq.n	8000c92 <HAL_GPIO_Init+0x1a2>
 8000c04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c08:	42a0      	cmp	r0, r4
 8000c0a:	d044      	beq.n	8000c96 <HAL_GPIO_Init+0x1a6>
 8000c0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c10:	42a0      	cmp	r0, r4
 8000c12:	d042      	beq.n	8000c9a <HAL_GPIO_Init+0x1aa>
 8000c14:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c18:	42a0      	cmp	r0, r4
 8000c1a:	d040      	beq.n	8000c9e <HAL_GPIO_Init+0x1ae>
 8000c1c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c20:	42a0      	cmp	r0, r4
 8000c22:	d03e      	beq.n	8000ca2 <HAL_GPIO_Init+0x1b2>
 8000c24:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c28:	42a0      	cmp	r0, r4
 8000c2a:	bf0c      	ite	eq
 8000c2c:	2409      	moveq	r4, #9
 8000c2e:	240a      	movne	r4, #10
 8000c30:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c32:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c34:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c38:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c3a:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8000c3e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c40:	bf54      	ite	pl
 8000c42:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000c44:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c48:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8000c4a:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8000c4c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c4e:	bf54      	ite	pl
 8000c50:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000c52:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c56:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8000c58:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8000c5a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c5c:	bf54      	ite	pl
 8000c5e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000c60:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c64:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8000c66:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8000c68:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c6a:	bf54      	ite	pl
 8000c6c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000c6e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000c72:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000c74:	3301      	adds	r3, #1
 8000c76:	2b10      	cmp	r3, #16
 8000c78:	f47f af40 	bne.w	8000afc <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000c7c:	b003      	add	sp, #12
 8000c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c82:	2400      	movs	r4, #0
 8000c84:	e7d4      	b.n	8000c30 <HAL_GPIO_Init+0x140>
 8000c86:	2401      	movs	r4, #1
 8000c88:	e7d2      	b.n	8000c30 <HAL_GPIO_Init+0x140>
 8000c8a:	2402      	movs	r4, #2
 8000c8c:	e7d0      	b.n	8000c30 <HAL_GPIO_Init+0x140>
 8000c8e:	2403      	movs	r4, #3
 8000c90:	e7ce      	b.n	8000c30 <HAL_GPIO_Init+0x140>
 8000c92:	2404      	movs	r4, #4
 8000c94:	e7cc      	b.n	8000c30 <HAL_GPIO_Init+0x140>
 8000c96:	2405      	movs	r4, #5
 8000c98:	e7ca      	b.n	8000c30 <HAL_GPIO_Init+0x140>
 8000c9a:	2406      	movs	r4, #6
 8000c9c:	e7c8      	b.n	8000c30 <HAL_GPIO_Init+0x140>
 8000c9e:	2407      	movs	r4, #7
 8000ca0:	e7c6      	b.n	8000c30 <HAL_GPIO_Init+0x140>
 8000ca2:	2408      	movs	r4, #8
 8000ca4:	e7c4      	b.n	8000c30 <HAL_GPIO_Init+0x140>
 8000ca6:	bf00      	nop
 8000ca8:	40013c00 	.word	0x40013c00
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cb4:	b10a      	cbz	r2, 8000cba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000cb6:	6181      	str	r1, [r0, #24]
  }
}
 8000cb8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000cba:	0409      	lsls	r1, r1, #16
 8000cbc:	e7fb      	b.n	8000cb6 <HAL_GPIO_WritePin+0x2>
	...

08000cc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cc4:	4604      	mov	r4, r0
 8000cc6:	b340      	cbz	r0, 8000d1a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc8:	6803      	ldr	r3, [r0, #0]
 8000cca:	07db      	lsls	r3, r3, #31
 8000ccc:	d410      	bmi.n	8000cf0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cce:	6823      	ldr	r3, [r4, #0]
 8000cd0:	079f      	lsls	r7, r3, #30
 8000cd2:	d461      	bmi.n	8000d98 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cd4:	6823      	ldr	r3, [r4, #0]
 8000cd6:	0719      	lsls	r1, r3, #28
 8000cd8:	f100 80a6 	bmi.w	8000e28 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cdc:	6823      	ldr	r3, [r4, #0]
 8000cde:	075a      	lsls	r2, r3, #29
 8000ce0:	f100 80c7 	bmi.w	8000e72 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ce4:	69a2      	ldr	r2, [r4, #24]
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8130 	bne.w	8000f4c <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000cec:	2000      	movs	r0, #0
 8000cee:	e02c      	b.n	8000d4a <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf0:	4b94      	ldr	r3, [pc, #592]	; (8000f44 <HAL_RCC_OscConfig+0x284>)
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	f002 020c 	and.w	r2, r2, #12
 8000cf8:	2a04      	cmp	r2, #4
 8000cfa:	d007      	beq.n	8000d0c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	f002 020c 	and.w	r2, r2, #12
 8000d02:	2a08      	cmp	r2, #8
 8000d04:	d10b      	bne.n	8000d1e <HAL_RCC_OscConfig+0x5e>
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	025e      	lsls	r6, r3, #9
 8000d0a:	d508      	bpl.n	8000d1e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d0c:	4b8d      	ldr	r3, [pc, #564]	; (8000f44 <HAL_RCC_OscConfig+0x284>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	039d      	lsls	r5, r3, #14
 8000d12:	d5dc      	bpl.n	8000cce <HAL_RCC_OscConfig+0xe>
 8000d14:	6863      	ldr	r3, [r4, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1d9      	bne.n	8000cce <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	e015      	b.n	8000d4a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d1e:	6863      	ldr	r3, [r4, #4]
 8000d20:	4d88      	ldr	r5, [pc, #544]	; (8000f44 <HAL_RCC_OscConfig+0x284>)
 8000d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d26:	d113      	bne.n	8000d50 <HAL_RCC_OscConfig+0x90>
 8000d28:	682b      	ldr	r3, [r5, #0]
 8000d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d30:	f7ff fdfc 	bl	800092c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d34:	4e83      	ldr	r6, [pc, #524]	; (8000f44 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8000d36:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d38:	6833      	ldr	r3, [r6, #0]
 8000d3a:	0398      	lsls	r0, r3, #14
 8000d3c:	d4c7      	bmi.n	8000cce <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d3e:	f7ff fdf5 	bl	800092c <HAL_GetTick>
 8000d42:	1b40      	subs	r0, r0, r5
 8000d44:	2864      	cmp	r0, #100	; 0x64
 8000d46:	d9f7      	bls.n	8000d38 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8000d48:	2003      	movs	r0, #3
}
 8000d4a:	b002      	add	sp, #8
 8000d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d50:	b99b      	cbnz	r3, 8000d7a <HAL_RCC_OscConfig+0xba>
 8000d52:	682b      	ldr	r3, [r5, #0]
 8000d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d58:	602b      	str	r3, [r5, #0]
 8000d5a:	682b      	ldr	r3, [r5, #0]
 8000d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d60:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d62:	f7ff fde3 	bl	800092c <HAL_GetTick>
 8000d66:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d68:	682b      	ldr	r3, [r5, #0]
 8000d6a:	0399      	lsls	r1, r3, #14
 8000d6c:	d5af      	bpl.n	8000cce <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d6e:	f7ff fddd 	bl	800092c <HAL_GetTick>
 8000d72:	1b80      	subs	r0, r0, r6
 8000d74:	2864      	cmp	r0, #100	; 0x64
 8000d76:	d9f7      	bls.n	8000d68 <HAL_RCC_OscConfig+0xa8>
 8000d78:	e7e6      	b.n	8000d48 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d7e:	682b      	ldr	r3, [r5, #0]
 8000d80:	d103      	bne.n	8000d8a <HAL_RCC_OscConfig+0xca>
 8000d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d86:	602b      	str	r3, [r5, #0]
 8000d88:	e7ce      	b.n	8000d28 <HAL_RCC_OscConfig+0x68>
 8000d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d8e:	602b      	str	r3, [r5, #0]
 8000d90:	682b      	ldr	r3, [r5, #0]
 8000d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d96:	e7ca      	b.n	8000d2e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d98:	4b6a      	ldr	r3, [pc, #424]	; (8000f44 <HAL_RCC_OscConfig+0x284>)
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	f012 0f0c 	tst.w	r2, #12
 8000da0:	d007      	beq.n	8000db2 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	f002 020c 	and.w	r2, r2, #12
 8000da8:	2a08      	cmp	r2, #8
 8000daa:	d111      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x110>
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	025a      	lsls	r2, r3, #9
 8000db0:	d40e      	bmi.n	8000dd0 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db2:	4a64      	ldr	r2, [pc, #400]	; (8000f44 <HAL_RCC_OscConfig+0x284>)
 8000db4:	6813      	ldr	r3, [r2, #0]
 8000db6:	079b      	lsls	r3, r3, #30
 8000db8:	d502      	bpl.n	8000dc0 <HAL_RCC_OscConfig+0x100>
 8000dba:	68e3      	ldr	r3, [r4, #12]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d1ac      	bne.n	8000d1a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc0:	6813      	ldr	r3, [r2, #0]
 8000dc2:	6921      	ldr	r1, [r4, #16]
 8000dc4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000dc8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000dcc:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dce:	e781      	b.n	8000cd4 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000dd0:	68e3      	ldr	r3, [r4, #12]
 8000dd2:	4d5c      	ldr	r5, [pc, #368]	; (8000f44 <HAL_RCC_OscConfig+0x284>)
 8000dd4:	b1bb      	cbz	r3, 8000e06 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8000dd6:	682b      	ldr	r3, [r5, #0]
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000dde:	f7ff fda5 	bl	800092c <HAL_GetTick>
 8000de2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de4:	682b      	ldr	r3, [r5, #0]
 8000de6:	079f      	lsls	r7, r3, #30
 8000de8:	d507      	bpl.n	8000dfa <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dea:	682b      	ldr	r3, [r5, #0]
 8000dec:	6922      	ldr	r2, [r4, #16]
 8000dee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000df2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000df6:	602b      	str	r3, [r5, #0]
 8000df8:	e76c      	b.n	8000cd4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dfa:	f7ff fd97 	bl	800092c <HAL_GetTick>
 8000dfe:	1b80      	subs	r0, r0, r6
 8000e00:	2802      	cmp	r0, #2
 8000e02:	d9ef      	bls.n	8000de4 <HAL_RCC_OscConfig+0x124>
 8000e04:	e7a0      	b.n	8000d48 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8000e06:	682b      	ldr	r3, [r5, #0]
 8000e08:	f023 0301 	bic.w	r3, r3, #1
 8000e0c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e0e:	f7ff fd8d 	bl	800092c <HAL_GetTick>
 8000e12:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e14:	682b      	ldr	r3, [r5, #0]
 8000e16:	0798      	lsls	r0, r3, #30
 8000e18:	f57f af5c 	bpl.w	8000cd4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fd86 	bl	800092c <HAL_GetTick>
 8000e20:	1b80      	subs	r0, r0, r6
 8000e22:	2802      	cmp	r0, #2
 8000e24:	d9f6      	bls.n	8000e14 <HAL_RCC_OscConfig+0x154>
 8000e26:	e78f      	b.n	8000d48 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e28:	6963      	ldr	r3, [r4, #20]
 8000e2a:	4d46      	ldr	r5, [pc, #280]	; (8000f44 <HAL_RCC_OscConfig+0x284>)
 8000e2c:	b183      	cbz	r3, 8000e50 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8000e2e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000e36:	f7ff fd79 	bl	800092c <HAL_GetTick>
 8000e3a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e3c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e3e:	079b      	lsls	r3, r3, #30
 8000e40:	f53f af4c 	bmi.w	8000cdc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e44:	f7ff fd72 	bl	800092c <HAL_GetTick>
 8000e48:	1b80      	subs	r0, r0, r6
 8000e4a:	2802      	cmp	r0, #2
 8000e4c:	d9f6      	bls.n	8000e3c <HAL_RCC_OscConfig+0x17c>
 8000e4e:	e77b      	b.n	8000d48 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8000e50:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e52:	f023 0301 	bic.w	r3, r3, #1
 8000e56:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000e58:	f7ff fd68 	bl	800092c <HAL_GetTick>
 8000e5c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e5e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e60:	079f      	lsls	r7, r3, #30
 8000e62:	f57f af3b 	bpl.w	8000cdc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e66:	f7ff fd61 	bl	800092c <HAL_GetTick>
 8000e6a:	1b80      	subs	r0, r0, r6
 8000e6c:	2802      	cmp	r0, #2
 8000e6e:	d9f6      	bls.n	8000e5e <HAL_RCC_OscConfig+0x19e>
 8000e70:	e76a      	b.n	8000d48 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e72:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <HAL_RCC_OscConfig+0x284>)
 8000e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e76:	00d0      	lsls	r0, r2, #3
 8000e78:	d427      	bmi.n	8000eca <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000e7c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e82:	641a      	str	r2, [r3, #64]	; 0x40
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e8e:	4d2e      	ldr	r5, [pc, #184]	; (8000f48 <HAL_RCC_OscConfig+0x288>)
 8000e90:	682b      	ldr	r3, [r5, #0]
 8000e92:	05d9      	lsls	r1, r3, #23
 8000e94:	d51b      	bpl.n	8000ece <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e96:	68a3      	ldr	r3, [r4, #8]
 8000e98:	4d2a      	ldr	r5, [pc, #168]	; (8000f44 <HAL_RCC_OscConfig+0x284>)
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d127      	bne.n	8000eee <HAL_RCC_OscConfig+0x22e>
 8000e9e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ea6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fd3f 	bl	800092c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eae:	4e25      	ldr	r6, [pc, #148]	; (8000f44 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8000eb0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000eb4:	079b      	lsls	r3, r3, #30
 8000eb6:	d53f      	bpl.n	8000f38 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8000eb8:	2f00      	cmp	r7, #0
 8000eba:	f43f af13 	beq.w	8000ce4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ebe:	4a21      	ldr	r2, [pc, #132]	; (8000f44 <HAL_RCC_OscConfig+0x284>)
 8000ec0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec8:	e70c      	b.n	8000ce4 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8000eca:	2700      	movs	r7, #0
 8000ecc:	e7df      	b.n	8000e8e <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 8000ece:	682b      	ldr	r3, [r5, #0]
 8000ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fd29 	bl	800092c <HAL_GetTick>
 8000eda:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000edc:	682b      	ldr	r3, [r5, #0]
 8000ede:	05da      	lsls	r2, r3, #23
 8000ee0:	d4d9      	bmi.n	8000e96 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee2:	f7ff fd23 	bl	800092c <HAL_GetTick>
 8000ee6:	1b80      	subs	r0, r0, r6
 8000ee8:	2864      	cmp	r0, #100	; 0x64
 8000eea:	d9f7      	bls.n	8000edc <HAL_RCC_OscConfig+0x21c>
 8000eec:	e72c      	b.n	8000d48 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eee:	b9ab      	cbnz	r3, 8000f1c <HAL_RCC_OscConfig+0x25c>
 8000ef0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ef2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef6:	f023 0301 	bic.w	r3, r3, #1
 8000efa:	672b      	str	r3, [r5, #112]	; 0x70
 8000efc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000efe:	f023 0304 	bic.w	r3, r3, #4
 8000f02:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000f04:	f7ff fd12 	bl	800092c <HAL_GetTick>
 8000f08:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f0a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f0c:	0798      	lsls	r0, r3, #30
 8000f0e:	d5d3      	bpl.n	8000eb8 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f10:	f7ff fd0c 	bl	800092c <HAL_GetTick>
 8000f14:	1b80      	subs	r0, r0, r6
 8000f16:	4540      	cmp	r0, r8
 8000f18:	d9f7      	bls.n	8000f0a <HAL_RCC_OscConfig+0x24a>
 8000f1a:	e715      	b.n	8000d48 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f1c:	2b05      	cmp	r3, #5
 8000f1e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f20:	d103      	bne.n	8000f2a <HAL_RCC_OscConfig+0x26a>
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	672b      	str	r3, [r5, #112]	; 0x70
 8000f28:	e7b9      	b.n	8000e9e <HAL_RCC_OscConfig+0x1de>
 8000f2a:	f023 0301 	bic.w	r3, r3, #1
 8000f2e:	672b      	str	r3, [r5, #112]	; 0x70
 8000f30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f32:	f023 0304 	bic.w	r3, r3, #4
 8000f36:	e7b5      	b.n	8000ea4 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f38:	f7ff fcf8 	bl	800092c <HAL_GetTick>
 8000f3c:	1b40      	subs	r0, r0, r5
 8000f3e:	4540      	cmp	r0, r8
 8000f40:	d9b7      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x1f2>
 8000f42:	e701      	b.n	8000d48 <HAL_RCC_OscConfig+0x88>
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f4c:	4d3c      	ldr	r5, [pc, #240]	; (8001040 <HAL_RCC_OscConfig+0x380>)
 8000f4e:	68ab      	ldr	r3, [r5, #8]
 8000f50:	f003 030c 	and.w	r3, r3, #12
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d042      	beq.n	8000fde <HAL_RCC_OscConfig+0x31e>
        __HAL_RCC_PLL_DISABLE();
 8000f58:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f5a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f60:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f62:	d12f      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x304>
        tickstart = HAL_GetTick();
 8000f64:	f7ff fce2 	bl	800092c <HAL_GetTick>
 8000f68:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f6a:	682b      	ldr	r3, [r5, #0]
 8000f6c:	0199      	lsls	r1, r3, #6
 8000f6e:	d423      	bmi.n	8000fb8 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f70:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f78:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000f7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f82:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f84:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000f88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f8a:	0852      	lsrs	r2, r2, #1
 8000f8c:	3a01      	subs	r2, #1
 8000f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f92:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f94:	682b      	ldr	r3, [r5, #0]
 8000f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f9a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fcc6 	bl	800092c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa0:	4d27      	ldr	r5, [pc, #156]	; (8001040 <HAL_RCC_OscConfig+0x380>)
        tickstart = HAL_GetTick();
 8000fa2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa4:	682b      	ldr	r3, [r5, #0]
 8000fa6:	019a      	lsls	r2, r3, #6
 8000fa8:	f53f aea0 	bmi.w	8000cec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fac:	f7ff fcbe 	bl	800092c <HAL_GetTick>
 8000fb0:	1b00      	subs	r0, r0, r4
 8000fb2:	2802      	cmp	r0, #2
 8000fb4:	d9f6      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x2e4>
 8000fb6:	e6c7      	b.n	8000d48 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fb8:	f7ff fcb8 	bl	800092c <HAL_GetTick>
 8000fbc:	1b80      	subs	r0, r0, r6
 8000fbe:	2802      	cmp	r0, #2
 8000fc0:	d9d3      	bls.n	8000f6a <HAL_RCC_OscConfig+0x2aa>
 8000fc2:	e6c1      	b.n	8000d48 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fcb2 	bl	800092c <HAL_GetTick>
 8000fc8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fca:	682b      	ldr	r3, [r5, #0]
 8000fcc:	019b      	lsls	r3, r3, #6
 8000fce:	f57f ae8d 	bpl.w	8000cec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fd2:	f7ff fcab 	bl	800092c <HAL_GetTick>
 8000fd6:	1b00      	subs	r0, r0, r4
 8000fd8:	2802      	cmp	r0, #2
 8000fda:	d9f6      	bls.n	8000fca <HAL_RCC_OscConfig+0x30a>
 8000fdc:	e6b4      	b.n	8000d48 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fde:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8000fe0:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fe2:	f43f ae9a 	beq.w	8000d1a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fe6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fea:	69e1      	ldr	r1, [r4, #28]
 8000fec:	428a      	cmp	r2, r1
 8000fee:	f47f ae94 	bne.w	8000d1a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ff6:	6a21      	ldr	r1, [r4, #32]
 8000ff8:	428a      	cmp	r2, r1
 8000ffa:	f47f ae8e 	bne.w	8000d1a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ffe:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001002:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001004:	401a      	ands	r2, r3
 8001006:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800100a:	f47f ae86 	bne.w	8000d1a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800100e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001010:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001014:	0852      	lsrs	r2, r2, #1
 8001016:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001018:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800101c:	f47f ae7d 	bne.w	8000d1a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001020:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001024:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001026:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 800102a:	f47f ae76 	bne.w	8000d1a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800102e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001032:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001034:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8001038:	f43f ae58 	beq.w	8000cec <HAL_RCC_OscConfig+0x2c>
 800103c:	e66d      	b.n	8000d1a <HAL_RCC_OscConfig+0x5a>
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800

08001044 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001044:	4913      	ldr	r1, [pc, #76]	; (8001094 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001046:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001048:	688b      	ldr	r3, [r1, #8]
 800104a:	f003 030c 	and.w	r3, r3, #12
 800104e:	2b04      	cmp	r3, #4
 8001050:	d01b      	beq.n	800108a <HAL_RCC_GetSysClockFreq+0x46>
 8001052:	2b08      	cmp	r3, #8
 8001054:	d11b      	bne.n	800108e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001056:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001058:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800105a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800105c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001060:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001064:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001068:	bf1a      	itte	ne
 800106a:	480b      	ldrne	r0, [pc, #44]	; (8001098 <HAL_RCC_GetSysClockFreq+0x54>)
 800106c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800106e:	480b      	ldreq	r0, [pc, #44]	; (800109c <HAL_RCC_GetSysClockFreq+0x58>)
 8001070:	fba1 0100 	umull	r0, r1, r1, r0
 8001074:	f7ff fa4a 	bl	800050c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_RCC_GetSysClockFreq+0x50>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001080:	3301      	adds	r3, #1
 8001082:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001084:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001088:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <HAL_RCC_GetSysClockFreq+0x54>)
 800108c:	e7fc      	b.n	8001088 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001090:	e7fa      	b.n	8001088 <HAL_RCC_GetSysClockFreq+0x44>
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800
 8001098:	007a1200 	.word	0x007a1200
 800109c:	00f42400 	.word	0x00f42400

080010a0 <HAL_RCC_ClockConfig>:
{
 80010a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80010a6:	4604      	mov	r4, r0
 80010a8:	b910      	cbnz	r0, 80010b0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80010aa:	2001      	movs	r0, #1
}
 80010ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010b0:	4a45      	ldr	r2, [pc, #276]	; (80011c8 <HAL_RCC_ClockConfig+0x128>)
 80010b2:	6813      	ldr	r3, [r2, #0]
 80010b4:	f003 030f 	and.w	r3, r3, #15
 80010b8:	428b      	cmp	r3, r1
 80010ba:	d328      	bcc.n	800110e <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010bc:	6821      	ldr	r1, [r4, #0]
 80010be:	078f      	lsls	r7, r1, #30
 80010c0:	d430      	bmi.n	8001124 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010c2:	07c8      	lsls	r0, r1, #31
 80010c4:	d443      	bmi.n	800114e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010c6:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <HAL_RCC_ClockConfig+0x128>)
 80010c8:	6813      	ldr	r3, [r2, #0]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	42ab      	cmp	r3, r5
 80010d0:	d866      	bhi.n	80011a0 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d2:	6822      	ldr	r2, [r4, #0]
 80010d4:	0751      	lsls	r1, r2, #29
 80010d6:	d46f      	bmi.n	80011b8 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d8:	0713      	lsls	r3, r2, #28
 80010da:	d507      	bpl.n	80010ec <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010dc:	4a3b      	ldr	r2, [pc, #236]	; (80011cc <HAL_RCC_ClockConfig+0x12c>)
 80010de:	6921      	ldr	r1, [r4, #16]
 80010e0:	6893      	ldr	r3, [r2, #8]
 80010e2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010ea:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010ec:	f7ff ffaa 	bl	8001044 <HAL_RCC_GetSysClockFreq>
 80010f0:	4b36      	ldr	r3, [pc, #216]	; (80011cc <HAL_RCC_ClockConfig+0x12c>)
 80010f2:	4a37      	ldr	r2, [pc, #220]	; (80011d0 <HAL_RCC_ClockConfig+0x130>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010fa:	5cd3      	ldrb	r3, [r2, r3]
 80010fc:	40d8      	lsrs	r0, r3
 80010fe:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <HAL_RCC_ClockConfig+0x134>)
 8001100:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001102:	4b35      	ldr	r3, [pc, #212]	; (80011d8 <HAL_RCC_ClockConfig+0x138>)
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	f7ff fbd5 	bl	80008b4 <HAL_InitTick>
  return HAL_OK;
 800110a:	2000      	movs	r0, #0
 800110c:	e7ce      	b.n	80010ac <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110e:	6813      	ldr	r3, [r2, #0]
 8001110:	f023 030f 	bic.w	r3, r3, #15
 8001114:	430b      	orrs	r3, r1
 8001116:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001118:	6813      	ldr	r3, [r2, #0]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	428b      	cmp	r3, r1
 8001120:	d1c3      	bne.n	80010aa <HAL_RCC_ClockConfig+0xa>
 8001122:	e7cb      	b.n	80010bc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001124:	f011 0f04 	tst.w	r1, #4
 8001128:	4b28      	ldr	r3, [pc, #160]	; (80011cc <HAL_RCC_ClockConfig+0x12c>)
 800112a:	d003      	beq.n	8001134 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001132:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001134:	070e      	lsls	r6, r1, #28
 8001136:	d503      	bpl.n	8001140 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800113e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	68a0      	ldr	r0, [r4, #8]
 8001144:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001148:	4302      	orrs	r2, r0
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	e7b9      	b.n	80010c2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800114e:	6861      	ldr	r1, [r4, #4]
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <HAL_RCC_ClockConfig+0x12c>)
 8001152:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001154:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001156:	d11b      	bne.n	8001190 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001158:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115c:	d0a5      	beq.n	80010aa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800115e:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001160:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001164:	4f19      	ldr	r7, [pc, #100]	; (80011cc <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001166:	f022 0203 	bic.w	r2, r2, #3
 800116a:	430a      	orrs	r2, r1
 800116c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800116e:	f7ff fbdd 	bl	800092c <HAL_GetTick>
 8001172:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	6862      	ldr	r2, [r4, #4]
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001180:	d0a1      	beq.n	80010c6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001182:	f7ff fbd3 	bl	800092c <HAL_GetTick>
 8001186:	1b80      	subs	r0, r0, r6
 8001188:	4540      	cmp	r0, r8
 800118a:	d9f3      	bls.n	8001174 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800118c:	2003      	movs	r0, #3
 800118e:	e78d      	b.n	80010ac <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001190:	2902      	cmp	r1, #2
 8001192:	d102      	bne.n	800119a <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001194:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001198:	e7e0      	b.n	800115c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119a:	f012 0f02 	tst.w	r2, #2
 800119e:	e7dd      	b.n	800115c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a0:	6813      	ldr	r3, [r2, #0]
 80011a2:	f023 030f 	bic.w	r3, r3, #15
 80011a6:	432b      	orrs	r3, r5
 80011a8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011aa:	6813      	ldr	r3, [r2, #0]
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	42ab      	cmp	r3, r5
 80011b2:	f47f af7a 	bne.w	80010aa <HAL_RCC_ClockConfig+0xa>
 80011b6:	e78c      	b.n	80010d2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b8:	4904      	ldr	r1, [pc, #16]	; (80011cc <HAL_RCC_ClockConfig+0x12c>)
 80011ba:	68e0      	ldr	r0, [r4, #12]
 80011bc:	688b      	ldr	r3, [r1, #8]
 80011be:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80011c2:	4303      	orrs	r3, r0
 80011c4:	608b      	str	r3, [r1, #8]
 80011c6:	e787      	b.n	80010d8 <HAL_RCC_ClockConfig+0x38>
 80011c8:	40023c00 	.word	0x40023c00
 80011cc:	40023800 	.word	0x40023800
 80011d0:	08011c40 	.word	0x08011c40
 80011d4:	20000318 	.word	0x20000318
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80011dc:	4b01      	ldr	r3, [pc, #4]	; (80011e4 <HAL_RCC_GetHCLKFreq+0x8>)
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000318 	.word	0x20000318

080011e8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_RCC_GetPCLK1Freq+0x14>)
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <HAL_RCC_GetPCLK1Freq+0x18>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80011f2:	5cd3      	ldrb	r3, [r2, r3]
 80011f4:	4a03      	ldr	r2, [pc, #12]	; (8001204 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80011f6:	6810      	ldr	r0, [r2, #0]
}
 80011f8:	40d8      	lsrs	r0, r3
 80011fa:	4770      	bx	lr
 80011fc:	40023800 	.word	0x40023800
 8001200:	08011c50 	.word	0x08011c50
 8001204:	20000318 	.word	0x20000318

08001208 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <HAL_RCC_GetPCLK2Freq+0x14>)
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <HAL_RCC_GetPCLK2Freq+0x18>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001212:	5cd3      	ldrb	r3, [r2, r3]
 8001214:	4a03      	ldr	r2, [pc, #12]	; (8001224 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001216:	6810      	ldr	r0, [r2, #0]
}
 8001218:	40d8      	lsrs	r0, r3
 800121a:	4770      	bx	lr
 800121c:	40023800 	.word	0x40023800
 8001220:	08011c50 	.word	0x08011c50
 8001224:	20000318 	.word	0x20000318

08001228 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001228:	6803      	ldr	r3, [r0, #0]
{
 800122a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800122e:	f013 0601 	ands.w	r6, r3, #1
{
 8001232:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001234:	d00b      	beq.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001236:	4ab1      	ldr	r2, [pc, #708]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001238:	6891      	ldr	r1, [r2, #8]
 800123a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800123e:	6091      	str	r1, [r2, #8]
 8001240:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001242:	6891      	ldr	r1, [r2, #8]
 8001244:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001246:	fab6 f686 	clz	r6, r6
 800124a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800124c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800124e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001252:	d012      	beq.n	800127a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001254:	49a9      	ldr	r1, [pc, #676]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001256:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001258:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800125c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001260:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001264:	bf08      	it	eq
 8001266:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001268:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800126c:	bf16      	itet	ne
 800126e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001272:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001274:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001276:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800127a:	02d9      	lsls	r1, r3, #11
 800127c:	d510      	bpl.n	80012a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800127e:	489f      	ldr	r0, [pc, #636]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001280:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001282:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001286:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800128a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800128e:	ea42 0201 	orr.w	r2, r2, r1
 8001292:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001296:	f000 81aa 	beq.w	80015ee <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800129a:	2900      	cmp	r1, #0
 800129c:	bf08      	it	eq
 800129e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80012a0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80012a4:	bf18      	it	ne
 80012a6:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80012a8:	069a      	lsls	r2, r3, #26
 80012aa:	d532      	bpl.n	8001312 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80012ac:	4b93      	ldr	r3, [pc, #588]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80012ae:	4f94      	ldr	r7, [pc, #592]	; (8001500 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80012b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c8:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012ca:	f7ff fb2f 	bl	800092c <HAL_GetTick>
 80012ce:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	05db      	lsls	r3, r3, #23
 80012d4:	f140 818d 	bpl.w	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80012d8:	4f88      	ldr	r7, [pc, #544]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012da:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80012dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012de:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80012e2:	f040 8191 	bne.w	8001608 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80012e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012e8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80012ec:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80012f0:	4a82      	ldr	r2, [pc, #520]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80012f2:	f040 81ae 	bne.w	8001652 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80012f6:	6891      	ldr	r1, [r2, #8]
 80012f8:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80012fc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001300:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001304:	4301      	orrs	r1, r0
 8001306:	6091      	str	r1, [r2, #8]
 8001308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800130c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800130e:	430b      	orrs	r3, r1
 8001310:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	06da      	lsls	r2, r3, #27
 8001316:	d50c      	bpl.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001318:	4a78      	ldr	r2, [pc, #480]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800131a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800131e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001322:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001326:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800132a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800132c:	4301      	orrs	r1, r0
 800132e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001332:	045f      	lsls	r7, r3, #17
 8001334:	d508      	bpl.n	8001348 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001336:	4971      	ldr	r1, [pc, #452]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001338:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800133a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800133e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001342:	4302      	orrs	r2, r0
 8001344:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001348:	0418      	lsls	r0, r3, #16
 800134a:	d508      	bpl.n	800135e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800134c:	496b      	ldr	r1, [pc, #428]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800134e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001350:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001354:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001358:	4302      	orrs	r2, r0
 800135a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800135e:	03d9      	lsls	r1, r3, #15
 8001360:	d508      	bpl.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001362:	4966      	ldr	r1, [pc, #408]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001364:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001366:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800136a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800136e:	4302      	orrs	r2, r0
 8001370:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001374:	039a      	lsls	r2, r3, #14
 8001376:	d508      	bpl.n	800138a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001378:	4960      	ldr	r1, [pc, #384]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800137a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800137c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001380:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001384:	4302      	orrs	r2, r0
 8001386:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800138a:	065f      	lsls	r7, r3, #25
 800138c:	d508      	bpl.n	80013a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800138e:	495b      	ldr	r1, [pc, #364]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001390:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001392:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001396:	f022 0203 	bic.w	r2, r2, #3
 800139a:	4302      	orrs	r2, r0
 800139c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80013a0:	0618      	lsls	r0, r3, #24
 80013a2:	d508      	bpl.n	80013b6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80013a4:	4955      	ldr	r1, [pc, #340]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80013a6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80013a8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013ac:	f022 020c 	bic.w	r2, r2, #12
 80013b0:	4302      	orrs	r2, r0
 80013b2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80013b6:	05d9      	lsls	r1, r3, #23
 80013b8:	d508      	bpl.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80013ba:	4950      	ldr	r1, [pc, #320]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80013bc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80013be:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013c2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80013c6:	4302      	orrs	r2, r0
 80013c8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80013cc:	059a      	lsls	r2, r3, #22
 80013ce:	d508      	bpl.n	80013e2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80013d0:	494a      	ldr	r1, [pc, #296]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80013d2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80013d4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013d8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80013dc:	4302      	orrs	r2, r0
 80013de:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80013e2:	055f      	lsls	r7, r3, #21
 80013e4:	d508      	bpl.n	80013f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80013e6:	4945      	ldr	r1, [pc, #276]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80013e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80013ea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013f2:	4302      	orrs	r2, r0
 80013f4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80013f8:	0518      	lsls	r0, r3, #20
 80013fa:	d508      	bpl.n	800140e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80013fc:	493f      	ldr	r1, [pc, #252]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80013fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001400:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001404:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001408:	4302      	orrs	r2, r0
 800140a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800140e:	04d9      	lsls	r1, r3, #19
 8001410:	d508      	bpl.n	8001424 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001412:	493a      	ldr	r1, [pc, #232]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001414:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001416:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800141a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800141e:	4302      	orrs	r2, r0
 8001420:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001424:	049a      	lsls	r2, r3, #18
 8001426:	d508      	bpl.n	800143a <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001428:	4934      	ldr	r1, [pc, #208]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800142a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800142c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001430:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001434:	4302      	orrs	r2, r0
 8001436:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800143a:	025f      	lsls	r7, r3, #9
 800143c:	d508      	bpl.n	8001450 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800143e:	492f      	ldr	r1, [pc, #188]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001440:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001442:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001446:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800144a:	4302      	orrs	r2, r0
 800144c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001450:	0298      	lsls	r0, r3, #10
 8001452:	d50c      	bpl.n	800146e <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001454:	4829      	ldr	r0, [pc, #164]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001456:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001458:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800145c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001460:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001464:	bf08      	it	eq
 8001466:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001468:	430a      	orrs	r2, r1
 800146a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800146e:	f013 0f08 	tst.w	r3, #8
 8001472:	bf18      	it	ne
 8001474:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001476:	0359      	lsls	r1, r3, #13
 8001478:	d508      	bpl.n	800148c <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800147a:	4920      	ldr	r1, [pc, #128]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800147c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800147e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001482:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001486:	4302      	orrs	r2, r0
 8001488:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800148c:	021a      	lsls	r2, r3, #8
 800148e:	d509      	bpl.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001490:	491a      	ldr	r1, [pc, #104]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001492:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001496:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800149a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800149e:	4302      	orrs	r2, r0
 80014a0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80014a4:	015f      	lsls	r7, r3, #5
 80014a6:	d509      	bpl.n	80014bc <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80014a8:	4914      	ldr	r1, [pc, #80]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80014aa:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80014ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80014b2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80014b6:	4302      	orrs	r2, r0
 80014b8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80014bc:	0118      	lsls	r0, r3, #4
 80014be:	d509      	bpl.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80014c0:	490e      	ldr	r1, [pc, #56]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80014c2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80014c6:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80014ca:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80014ce:	4302      	orrs	r2, r0
 80014d0:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80014d4:	00d9      	lsls	r1, r3, #3
 80014d6:	d509      	bpl.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80014d8:	4908      	ldr	r1, [pc, #32]	; (80014fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80014da:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80014de:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80014e2:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80014e6:	4302      	orrs	r2, r0
 80014e8:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80014ec:	2e01      	cmp	r6, #1
 80014ee:	f000 80b4 	beq.w	800165a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80014f2:	019a      	lsls	r2, r3, #6
 80014f4:	f100 80b1 	bmi.w	800165a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80014f8:	e004      	b.n	8001504 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001504:	2d01      	cmp	r5, #1
 8001506:	d170      	bne.n	80015ea <HAL_RCCEx_PeriphCLKConfig+0x3c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001508:	4d9d      	ldr	r5, [pc, #628]	; (8001780 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800150a:	682b      	ldr	r3, [r5, #0]
 800150c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001510:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001512:	f7ff fa0b 	bl	800092c <HAL_GetTick>
 8001516:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001518:	682b      	ldr	r3, [r5, #0]
 800151a:	009f      	lsls	r7, r3, #2
 800151c:	f100 8121 	bmi.w	8001762 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001520:	6821      	ldr	r1, [r4, #0]
 8001522:	030e      	lsls	r6, r1, #12
 8001524:	d501      	bpl.n	800152a <HAL_RCCEx_PeriphCLKConfig+0x302>
 8001526:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001528:	b11b      	cbz	r3, 8001532 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800152a:	02cd      	lsls	r5, r1, #11
 800152c:	d51d      	bpl.n	800156a <HAL_RCCEx_PeriphCLKConfig+0x342>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800152e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001530:	b9db      	cbnz	r3, 800156a <HAL_RCCEx_PeriphCLKConfig+0x342>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001532:	4a93      	ldr	r2, [pc, #588]	; (8001780 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001534:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001538:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800153c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001540:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001544:	4303      	orrs	r3, r0
 8001546:	6960      	ldr	r0, [r4, #20]
 8001548:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800154c:	69a0      	ldr	r0, [r4, #24]
 800154e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001552:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001556:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800155a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800155c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001560:	3801      	subs	r0, #1
 8001562:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001566:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800156a:	0288      	lsls	r0, r1, #10
 800156c:	d515      	bpl.n	800159a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800156e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001574:	d111      	bne.n	800159a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001576:	4a82      	ldr	r2, [pc, #520]	; (8001780 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001578:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800157c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001580:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001584:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001588:	4303      	orrs	r3, r0
 800158a:	6960      	ldr	r0, [r4, #20]
 800158c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001590:	6a20      	ldr	r0, [r4, #32]
 8001592:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001596:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800159a:	070a      	lsls	r2, r1, #28
 800159c:	d519      	bpl.n	80015d2 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800159e:	4a78      	ldr	r2, [pc, #480]	; (8001780 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80015a0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80015a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80015a8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80015ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b0:	430b      	orrs	r3, r1
 80015b2:	6961      	ldr	r1, [r4, #20]
 80015b4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80015b8:	69e1      	ldr	r1, [r4, #28]
 80015ba:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80015be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80015c2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80015c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80015c8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80015cc:	430b      	orrs	r3, r1
 80015ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80015d2:	4c6b      	ldr	r4, [pc, #428]	; (8001780 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015da:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015dc:	f7ff f9a6 	bl	800092c <HAL_GetTick>
 80015e0:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	f140 80c3 	bpl.w	8001770 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80015ea:	2000      	movs	r0, #0
 80015ec:	e009      	b.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      plli2sused = 1;
 80015ee:	2601      	movs	r6, #1
 80015f0:	e656      	b.n	80012a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f2:	f7ff f99b 	bl	800092c <HAL_GetTick>
 80015f6:	eba0 0008 	sub.w	r0, r0, r8
 80015fa:	2864      	cmp	r0, #100	; 0x64
 80015fc:	f67f ae68 	bls.w	80012d0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001600:	2003      	movs	r0, #3
}
 8001602:	b003      	add	sp, #12
 8001604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001608:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800160c:	429a      	cmp	r2, r3
 800160e:	f43f ae6a 	beq.w	80012e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001614:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800161a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800161e:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001620:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001622:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001626:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001628:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800162a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800162c:	07d8      	lsls	r0, r3, #31
 800162e:	f57f ae5a 	bpl.w	80012e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8001632:	f7ff f97b 	bl	800092c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001636:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800163a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800163e:	0799      	lsls	r1, r3, #30
 8001640:	f53f ae51 	bmi.w	80012e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f7ff f972 	bl	800092c <HAL_GetTick>
 8001648:	eba0 0008 	sub.w	r0, r0, r8
 800164c:	4548      	cmp	r0, r9
 800164e:	d9f5      	bls.n	800163c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001650:	e7d6      	b.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001652:	6891      	ldr	r1, [r2, #8]
 8001654:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001658:	e655      	b.n	8001306 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 800165a:	4e49      	ldr	r6, [pc, #292]	; (8001780 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800165c:	6833      	ldr	r3, [r6, #0]
 800165e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001662:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001664:	f7ff f962 	bl	800092c <HAL_GetTick>
 8001668:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800166a:	6833      	ldr	r3, [r6, #0]
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	d472      	bmi.n	8001756 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001670:	6822      	ldr	r2, [r4, #0]
 8001672:	07d7      	lsls	r7, r2, #31
 8001674:	d512      	bpl.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001678:	b983      	cbnz	r3, 800169c <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800167a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800167e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001682:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001686:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800168a:	430b      	orrs	r3, r1
 800168c:	6861      	ldr	r1, [r4, #4]
 800168e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001692:	68a1      	ldr	r1, [r4, #8]
 8001694:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001698:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800169c:	0316      	lsls	r6, r2, #12
 800169e:	d503      	bpl.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80016a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016a6:	d005      	beq.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80016a8:	02d0      	lsls	r0, r2, #11
 80016aa:	d51e      	bpl.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80016ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016b2:	d11a      	bne.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80016b4:	4932      	ldr	r1, [pc, #200]	; (8001780 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80016b6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80016ba:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80016be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016c2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80016c6:	4303      	orrs	r3, r0
 80016c8:	6860      	ldr	r0, [r4, #4]
 80016ca:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80016ce:	68e0      	ldr	r0, [r4, #12]
 80016d0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80016d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80016d8:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80016dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016de:	f020 001f 	bic.w	r0, r0, #31
 80016e2:	3b01      	subs	r3, #1
 80016e4:	4303      	orrs	r3, r0
 80016e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80016ea:	01d1      	lsls	r1, r2, #7
 80016ec:	d511      	bpl.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80016ee:	4924      	ldr	r1, [pc, #144]	; (8001780 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80016f0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80016f4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80016f8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80016fc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001700:	4303      	orrs	r3, r0
 8001702:	6860      	ldr	r0, [r4, #4]
 8001704:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001708:	6920      	ldr	r0, [r4, #16]
 800170a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800170e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001712:	0192      	lsls	r2, r2, #6
 8001714:	d50d      	bpl.n	8001732 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001716:	6923      	ldr	r3, [r4, #16]
 8001718:	6862      	ldr	r2, [r4, #4]
 800171a:	041b      	lsls	r3, r3, #16
 800171c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001720:	68e2      	ldr	r2, [r4, #12]
 8001722:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001726:	68a2      	ldr	r2, [r4, #8]
 8001728:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800172e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001732:	4e13      	ldr	r6, [pc, #76]	; (8001780 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001734:	6833      	ldr	r3, [r6, #0]
 8001736:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800173a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800173c:	f7ff f8f6 	bl	800092c <HAL_GetTick>
 8001740:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001742:	6833      	ldr	r3, [r6, #0]
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	f53f aedd 	bmi.w	8001504 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800174a:	f7ff f8ef 	bl	800092c <HAL_GetTick>
 800174e:	1bc0      	subs	r0, r0, r7
 8001750:	2864      	cmp	r0, #100	; 0x64
 8001752:	d9f6      	bls.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001754:	e754      	b.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001756:	f7ff f8e9 	bl	800092c <HAL_GetTick>
 800175a:	1bc0      	subs	r0, r0, r7
 800175c:	2864      	cmp	r0, #100	; 0x64
 800175e:	d984      	bls.n	800166a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001760:	e74e      	b.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001762:	f7ff f8e3 	bl	800092c <HAL_GetTick>
 8001766:	1b80      	subs	r0, r0, r6
 8001768:	2864      	cmp	r0, #100	; 0x64
 800176a:	f67f aed5 	bls.w	8001518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800176e:	e747      	b.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001770:	f7ff f8dc 	bl	800092c <HAL_GetTick>
 8001774:	1b40      	subs	r0, r0, r5
 8001776:	2864      	cmp	r0, #100	; 0x64
 8001778:	f67f af33 	bls.w	80015e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800177c:	e740      	b.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001784:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001786:	e852 3f00 	ldrex	r3, [r2]
 800178a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800178e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8001792:	6802      	ldr	r2, [r0, #0]
 8001794:	2900      	cmp	r1, #0
 8001796:	d1f5      	bne.n	8001784 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001798:	f102 0308 	add.w	r3, r2, #8
 800179c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017a0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017a4:	f102 0c08 	add.w	ip, r2, #8
 80017a8:	e84c 3100 	strex	r1, r3, [ip]
 80017ac:	2900      	cmp	r1, #0
 80017ae:	d1f3      	bne.n	8001798 <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80017b0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d107      	bne.n	80017c6 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017b6:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017ba:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017be:	e842 3100 	strex	r1, r3, [r2]
 80017c2:	2900      	cmp	r1, #0
 80017c4:	d1f7      	bne.n	80017b6 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80017c6:	2320      	movs	r3, #32
 80017c8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017cc:	2300      	movs	r3, #0
 80017ce:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80017d0:	6683      	str	r3, [r0, #104]	; 0x68
}
 80017d2:	4770      	bx	lr

080017d4 <UART_SetConfig>:
{
 80017d4:	b538      	push	{r3, r4, r5, lr}
 80017d6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017d8:	69c0      	ldr	r0, [r0, #28]
 80017da:	6921      	ldr	r1, [r4, #16]
 80017dc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017de:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017e0:	430a      	orrs	r2, r1
 80017e2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017e4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017e6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017e8:	498e      	ldr	r1, [pc, #568]	; (8001a24 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80017ea:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017ec:	4029      	ands	r1, r5
  tmpreg |= huart->Init.OneBitSampling;
 80017ee:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017f0:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017f2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80017f4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80017fc:	430a      	orrs	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001800:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001802:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001804:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001806:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800180a:	430a      	orrs	r2, r1
 800180c:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800180e:	4a86      	ldr	r2, [pc, #536]	; (8001a28 <UART_SetConfig+0x254>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d117      	bne.n	8001844 <UART_SetConfig+0x70>
 8001814:	4b85      	ldr	r3, [pc, #532]	; (8001a2c <UART_SetConfig+0x258>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	3b01      	subs	r3, #1
 8001820:	2b02      	cmp	r3, #2
 8001822:	f200 80e2 	bhi.w	80019ea <UART_SetConfig+0x216>
 8001826:	4a82      	ldr	r2, [pc, #520]	; (8001a30 <UART_SetConfig+0x25c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001828:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800182c:	5cd3      	ldrb	r3, [r2, r3]
 800182e:	f040 80b3 	bne.w	8001998 <UART_SetConfig+0x1c4>
    switch (clocksource)
 8001832:	2b08      	cmp	r3, #8
 8001834:	d822      	bhi.n	800187c <UART_SetConfig+0xa8>
 8001836:	e8df f003 	tbb	[pc, r3]
 800183a:	db90      	.short	0xdb90
 800183c:	21d52198 	.word	0x21d52198
 8001840:	2121      	.short	0x2121
 8001842:	99          	.byte	0x99
 8001843:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001844:	4a7b      	ldr	r2, [pc, #492]	; (8001a34 <UART_SetConfig+0x260>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d106      	bne.n	8001858 <UART_SetConfig+0x84>
 800184a:	4b78      	ldr	r3, [pc, #480]	; (8001a2c <UART_SetConfig+0x258>)
 800184c:	4a7a      	ldr	r2, [pc, #488]	; (8001a38 <UART_SetConfig+0x264>)
 800184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	e7e7      	b.n	8001828 <UART_SetConfig+0x54>
 8001858:	4a78      	ldr	r2, [pc, #480]	; (8001a3c <UART_SetConfig+0x268>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d118      	bne.n	8001890 <UART_SetConfig+0xbc>
 800185e:	4b73      	ldr	r3, [pc, #460]	; (8001a2c <UART_SetConfig+0x258>)
 8001860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001864:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001868:	2b20      	cmp	r3, #32
 800186a:	f000 80b3 	beq.w	80019d4 <UART_SetConfig+0x200>
 800186e:	d807      	bhi.n	8001880 <UART_SetConfig+0xac>
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80c0 	beq.w	80019f6 <UART_SetConfig+0x222>
 8001876:	2b10      	cmp	r3, #16
 8001878:	f000 80b1 	beq.w	80019de <UART_SetConfig+0x20a>
    switch (clocksource)
 800187c:	2001      	movs	r0, #1
 800187e:	e070      	b.n	8001962 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001880:	2b30      	cmp	r3, #48	; 0x30
 8001882:	d1fb      	bne.n	800187c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001884:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001888:	d070      	beq.n	800196c <UART_SetConfig+0x198>
        pclk = (uint32_t) LSE_VALUE;
 800188a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800188e:	e0b9      	b.n	8001a04 <UART_SetConfig+0x230>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001890:	4a6b      	ldr	r2, [pc, #428]	; (8001a40 <UART_SetConfig+0x26c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d10f      	bne.n	80018b6 <UART_SetConfig+0xe2>
 8001896:	4b65      	ldr	r3, [pc, #404]	; (8001a2c <UART_SetConfig+0x258>)
 8001898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80018a0:	2b80      	cmp	r3, #128	; 0x80
 80018a2:	f000 8097 	beq.w	80019d4 <UART_SetConfig+0x200>
 80018a6:	d804      	bhi.n	80018b2 <UART_SetConfig+0xde>
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80a4 	beq.w	80019f6 <UART_SetConfig+0x222>
 80018ae:	2b40      	cmp	r3, #64	; 0x40
 80018b0:	e7e2      	b.n	8001878 <UART_SetConfig+0xa4>
 80018b2:	2bc0      	cmp	r3, #192	; 0xc0
 80018b4:	e7e5      	b.n	8001882 <UART_SetConfig+0xae>
 80018b6:	4a63      	ldr	r2, [pc, #396]	; (8001a44 <UART_SetConfig+0x270>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d112      	bne.n	80018e2 <UART_SetConfig+0x10e>
 80018bc:	4b5b      	ldr	r3, [pc, #364]	; (8001a2c <UART_SetConfig+0x258>)
 80018be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ca:	f000 8083 	beq.w	80019d4 <UART_SetConfig+0x200>
 80018ce:	d805      	bhi.n	80018dc <UART_SetConfig+0x108>
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 8090 	beq.w	80019f6 <UART_SetConfig+0x222>
 80018d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018da:	e7cd      	b.n	8001878 <UART_SetConfig+0xa4>
 80018dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018e0:	e7cf      	b.n	8001882 <UART_SetConfig+0xae>
 80018e2:	4a59      	ldr	r2, [pc, #356]	; (8001a48 <UART_SetConfig+0x274>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d110      	bne.n	800190a <UART_SetConfig+0x136>
 80018e8:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <UART_SetConfig+0x258>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018f6:	d06d      	beq.n	80019d4 <UART_SetConfig+0x200>
 80018f8:	d804      	bhi.n	8001904 <UART_SetConfig+0x130>
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d075      	beq.n	80019ea <UART_SetConfig+0x216>
 80018fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001902:	e7b9      	b.n	8001878 <UART_SetConfig+0xa4>
 8001904:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001908:	e7bb      	b.n	8001882 <UART_SetConfig+0xae>
 800190a:	4a50      	ldr	r2, [pc, #320]	; (8001a4c <UART_SetConfig+0x278>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d110      	bne.n	8001932 <UART_SetConfig+0x15e>
 8001910:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <UART_SetConfig+0x258>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800191a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800191e:	d059      	beq.n	80019d4 <UART_SetConfig+0x200>
 8001920:	d804      	bhi.n	800192c <UART_SetConfig+0x158>
 8001922:	2b00      	cmp	r3, #0
 8001924:	d067      	beq.n	80019f6 <UART_SetConfig+0x222>
 8001926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800192a:	e7a5      	b.n	8001878 <UART_SetConfig+0xa4>
 800192c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001930:	e7a7      	b.n	8001882 <UART_SetConfig+0xae>
 8001932:	4a47      	ldr	r2, [pc, #284]	; (8001a50 <UART_SetConfig+0x27c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d1a1      	bne.n	800187c <UART_SetConfig+0xa8>
 8001938:	4b3c      	ldr	r3, [pc, #240]	; (8001a2c <UART_SetConfig+0x258>)
 800193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001946:	d045      	beq.n	80019d4 <UART_SetConfig+0x200>
 8001948:	d804      	bhi.n	8001954 <UART_SetConfig+0x180>
 800194a:	2b00      	cmp	r3, #0
 800194c:	d053      	beq.n	80019f6 <UART_SetConfig+0x222>
 800194e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001952:	e791      	b.n	8001878 <UART_SetConfig+0xa4>
 8001954:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001958:	e793      	b.n	8001882 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetPCLK1Freq();
 800195a:	f7ff fc45 	bl	80011e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800195e:	b928      	cbnz	r0, 800196c <UART_SetConfig+0x198>
 8001960:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8001962:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8001964:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8001968:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 800196a:	483a      	ldr	r0, [pc, #232]	; (8001a54 <UART_SetConfig+0x280>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800196c:	6862      	ldr	r2, [r4, #4]
 800196e:	0853      	lsrs	r3, r2, #1
 8001970:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001974:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001978:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800197c:	f1a3 0110 	sub.w	r1, r3, #16
 8001980:	4291      	cmp	r1, r2
 8001982:	f63f af7b 	bhi.w	800187c <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001986:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800198a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800198e:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001990:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8001992:	4313      	orrs	r3, r2
 8001994:	60cb      	str	r3, [r1, #12]
 8001996:	e7e3      	b.n	8001960 <UART_SetConfig+0x18c>
    switch (clocksource)
 8001998:	2b08      	cmp	r3, #8
 800199a:	f63f af6f 	bhi.w	800187c <UART_SetConfig+0xa8>
 800199e:	a201      	add	r2, pc, #4	; (adr r2, 80019a4 <UART_SetConfig+0x1d0>)
 80019a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a4:	080019fd 	.word	0x080019fd
 80019a8:	080019c9 	.word	0x080019c9
 80019ac:	080019db 	.word	0x080019db
 80019b0:	0800187d 	.word	0x0800187d
 80019b4:	080019cf 	.word	0x080019cf
 80019b8:	0800187d 	.word	0x0800187d
 80019bc:	0800187d 	.word	0x0800187d
 80019c0:	0800187d 	.word	0x0800187d
 80019c4:	0800188b 	.word	0x0800188b
        pclk = HAL_RCC_GetPCLK2Freq();
 80019c8:	f7ff fc1e 	bl	8001208 <HAL_RCC_GetPCLK2Freq>
        break;
 80019cc:	e018      	b.n	8001a00 <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetSysClockFreq();
 80019ce:	f7ff fb39 	bl	8001044 <HAL_RCC_GetSysClockFreq>
        break;
 80019d2:	e015      	b.n	8001a00 <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019d4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80019d8:	d0c7      	beq.n	800196a <UART_SetConfig+0x196>
        pclk = (uint32_t) HSI_VALUE;
 80019da:	481e      	ldr	r0, [pc, #120]	; (8001a54 <UART_SetConfig+0x280>)
 80019dc:	e012      	b.n	8001a04 <UART_SetConfig+0x230>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019de:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80019e2:	d1f4      	bne.n	80019ce <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 80019e4:	f7ff fb2e 	bl	8001044 <HAL_RCC_GetSysClockFreq>
        break;
 80019e8:	e7b9      	b.n	800195e <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019ea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80019ee:	d1eb      	bne.n	80019c8 <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 80019f0:	f7ff fc0a 	bl	8001208 <HAL_RCC_GetPCLK2Freq>
        break;
 80019f4:	e7b3      	b.n	800195e <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019f6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80019fa:	d0ae      	beq.n	800195a <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK1Freq();
 80019fc:	f7ff fbf4 	bl	80011e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001a00:	2800      	cmp	r0, #0
 8001a02:	d0ad      	beq.n	8001960 <UART_SetConfig+0x18c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001a04:	6862      	ldr	r2, [r4, #4]
 8001a06:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001a0a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a0e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001a12:	f1a3 0110 	sub.w	r1, r3, #16
 8001a16:	4291      	cmp	r1, r2
 8001a18:	f63f af30 	bhi.w	800187c <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001a1c:	6822      	ldr	r2, [r4, #0]
 8001a1e:	60d3      	str	r3, [r2, #12]
 8001a20:	e79e      	b.n	8001960 <UART_SetConfig+0x18c>
 8001a22:	bf00      	nop
 8001a24:	efff69f3 	.word	0xefff69f3
 8001a28:	40011000 	.word	0x40011000
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	080115d0 	.word	0x080115d0
 8001a34:	40004400 	.word	0x40004400
 8001a38:	080115d3 	.word	0x080115d3
 8001a3c:	40004800 	.word	0x40004800
 8001a40:	40004c00 	.word	0x40004c00
 8001a44:	40005000 	.word	0x40005000
 8001a48:	40011400 	.word	0x40011400
 8001a4c:	40007800 	.word	0x40007800
 8001a50:	40007c00 	.word	0x40007c00
 8001a54:	00f42400 	.word	0x00f42400

08001a58 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001a58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a5a:	071a      	lsls	r2, r3, #28
{
 8001a5c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001a5e:	d506      	bpl.n	8001a6e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001a60:	6801      	ldr	r1, [r0, #0]
 8001a62:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001a64:	684a      	ldr	r2, [r1, #4]
 8001a66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a6a:	4322      	orrs	r2, r4
 8001a6c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a6e:	07dc      	lsls	r4, r3, #31
 8001a70:	d506      	bpl.n	8001a80 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a72:	6801      	ldr	r1, [r0, #0]
 8001a74:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001a76:	684a      	ldr	r2, [r1, #4]
 8001a78:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001a7c:	4322      	orrs	r2, r4
 8001a7e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001a80:	0799      	lsls	r1, r3, #30
 8001a82:	d506      	bpl.n	8001a92 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001a84:	6801      	ldr	r1, [r0, #0]
 8001a86:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001a88:	684a      	ldr	r2, [r1, #4]
 8001a8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a8e:	4322      	orrs	r2, r4
 8001a90:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001a92:	075a      	lsls	r2, r3, #29
 8001a94:	d506      	bpl.n	8001aa4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001a96:	6801      	ldr	r1, [r0, #0]
 8001a98:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001a9a:	684a      	ldr	r2, [r1, #4]
 8001a9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aa0:	4322      	orrs	r2, r4
 8001aa2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001aa4:	06dc      	lsls	r4, r3, #27
 8001aa6:	d506      	bpl.n	8001ab6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001aa8:	6801      	ldr	r1, [r0, #0]
 8001aaa:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001aac:	688a      	ldr	r2, [r1, #8]
 8001aae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ab2:	4322      	orrs	r2, r4
 8001ab4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001ab6:	0699      	lsls	r1, r3, #26
 8001ab8:	d506      	bpl.n	8001ac8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001aba:	6801      	ldr	r1, [r0, #0]
 8001abc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001abe:	688a      	ldr	r2, [r1, #8]
 8001ac0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ac4:	4322      	orrs	r2, r4
 8001ac6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ac8:	065a      	lsls	r2, r3, #25
 8001aca:	d510      	bpl.n	8001aee <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001acc:	6801      	ldr	r1, [r0, #0]
 8001ace:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001ad0:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001ad2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ad6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001ada:	ea42 0204 	orr.w	r2, r2, r4
 8001ade:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001ae0:	d105      	bne.n	8001aee <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001ae2:	684a      	ldr	r2, [r1, #4]
 8001ae4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001ae6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001aea:	4322      	orrs	r2, r4
 8001aec:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001aee:	061b      	lsls	r3, r3, #24
 8001af0:	d506      	bpl.n	8001b00 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001af2:	6802      	ldr	r2, [r0, #0]
 8001af4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001af6:	6853      	ldr	r3, [r2, #4]
 8001af8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001afc:	430b      	orrs	r3, r1
 8001afe:	6053      	str	r3, [r2, #4]
}
 8001b00:	bd10      	pop	{r4, pc}

08001b02 <UART_WaitOnFlagUntilTimeout>:
{
 8001b02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b06:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	460d      	mov	r5, r1
 8001b0e:	4617      	mov	r7, r2
 8001b10:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b12:	6822      	ldr	r2, [r4, #0]
 8001b14:	69d3      	ldr	r3, [r2, #28]
 8001b16:	ea35 0303 	bics.w	r3, r5, r3
 8001b1a:	bf0c      	ite	eq
 8001b1c:	2301      	moveq	r3, #1
 8001b1e:	2300      	movne	r3, #0
 8001b20:	42bb      	cmp	r3, r7
 8001b22:	d001      	beq.n	8001b28 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001b24:	2000      	movs	r0, #0
 8001b26:	e022      	b.n	8001b6e <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8001b28:	f1b9 3fff 	cmp.w	r9, #4294967295
 8001b2c:	d0f2      	beq.n	8001b14 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2e:	f7fe fefd 	bl	800092c <HAL_GetTick>
 8001b32:	eba0 0008 	sub.w	r0, r0, r8
 8001b36:	4548      	cmp	r0, r9
 8001b38:	d829      	bhi.n	8001b8e <UART_WaitOnFlagUntilTimeout+0x8c>
 8001b3a:	f1b9 0f00 	cmp.w	r9, #0
 8001b3e:	d026      	beq.n	8001b8e <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001b40:	6821      	ldr	r1, [r4, #0]
 8001b42:	680b      	ldr	r3, [r1, #0]
 8001b44:	075a      	lsls	r2, r3, #29
 8001b46:	d5e4      	bpl.n	8001b12 <UART_WaitOnFlagUntilTimeout+0x10>
 8001b48:	2d80      	cmp	r5, #128	; 0x80
 8001b4a:	d0e2      	beq.n	8001b12 <UART_WaitOnFlagUntilTimeout+0x10>
 8001b4c:	2d40      	cmp	r5, #64	; 0x40
 8001b4e:	d0e0      	beq.n	8001b12 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b50:	69ce      	ldr	r6, [r1, #28]
 8001b52:	f016 0608 	ands.w	r6, r6, #8
 8001b56:	d00c      	beq.n	8001b72 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001b58:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8001b5a:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001b5c:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8001b5e:	f7ff fe11 	bl	8001784 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8001b62:	2300      	movs	r3, #0
          return HAL_ERROR;
 8001b64:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b66:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8001b6a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8001b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b72:	69cb      	ldr	r3, [r1, #28]
 8001b74:	051b      	lsls	r3, r3, #20
 8001b76:	d5cc      	bpl.n	8001b12 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b78:	f44f 6300 	mov.w	r3, #2048	; 0x800
          UART_EndRxTransfer(huart);
 8001b7c:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b7e:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8001b80:	f7ff fe00 	bl	8001784 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001b84:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8001b86:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001b8a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_TIMEOUT;
 8001b8e:	2003      	movs	r0, #3
 8001b90:	e7ed      	b.n	8001b6e <UART_WaitOnFlagUntilTimeout+0x6c>

08001b92 <HAL_UART_Transmit>:
{
 8001b92:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001b96:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001b98:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8001b9a:	4604      	mov	r4, r0
 8001b9c:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8001b9e:	2b20      	cmp	r3, #32
{
 8001ba0:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001ba2:	d144      	bne.n	8001c2e <HAL_UART_Transmit+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8001ba4:	2900      	cmp	r1, #0
 8001ba6:	d044      	beq.n	8001c32 <HAL_UART_Transmit+0xa0>
 8001ba8:	2a00      	cmp	r2, #0
 8001baa:	d042      	beq.n	8001c32 <HAL_UART_Transmit+0xa0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bac:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bae:	2500      	movs	r5, #0
 8001bb0:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bb4:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8001bb6:	f7fe feb9 	bl	800092c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bba:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001bbc:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 8001bbe:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bc2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8001bc6:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bca:	d103      	bne.n	8001bd4 <HAL_UART_Transmit+0x42>
 8001bcc:	6922      	ldr	r2, [r4, #16]
 8001bce:	b90a      	cbnz	r2, 8001bd4 <HAL_UART_Transmit+0x42>
 8001bd0:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001bd2:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 8001bd4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bd8:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8001bdc:	b292      	uxth	r2, r2
 8001bde:	b94a      	cbnz	r2, 8001bf4 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001be0:	2140      	movs	r1, #64	; 0x40
 8001be2:	4620      	mov	r0, r4
 8001be4:	f7ff ff8d 	bl	8001b02 <UART_WaitOnFlagUntilTimeout>
 8001be8:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8001bea:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bec:	b960      	cbnz	r0, 8001c08 <HAL_UART_Transmit+0x76>
}
 8001bee:	b004      	add	sp, #16
 8001bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2180      	movs	r1, #128	; 0x80
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	9303      	str	r3, [sp, #12]
 8001bfc:	f7ff ff81 	bl	8001b02 <UART_WaitOnFlagUntilTimeout>
 8001c00:	9b03      	ldr	r3, [sp, #12]
 8001c02:	b118      	cbz	r0, 8001c0c <HAL_UART_Transmit+0x7a>
        huart->gState = HAL_UART_STATE_READY;
 8001c04:	2320      	movs	r3, #32
 8001c06:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8001c08:	2003      	movs	r0, #3
 8001c0a:	e7f0      	b.n	8001bee <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c0c:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8001c0e:	b95e      	cbnz	r6, 8001c28 <HAL_UART_Transmit+0x96>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c10:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c18:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8001c1a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001c1e:	3a01      	subs	r2, #1
 8001c20:	b292      	uxth	r2, r2
 8001c22:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8001c26:	e7d5      	b.n	8001bd4 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c28:	f816 2b01 	ldrb.w	r2, [r6], #1
 8001c2c:	e7f4      	b.n	8001c18 <HAL_UART_Transmit+0x86>
    return HAL_BUSY;
 8001c2e:	2002      	movs	r0, #2
 8001c30:	e7dd      	b.n	8001bee <HAL_UART_Transmit+0x5c>
      return  HAL_ERROR;
 8001c32:	2001      	movs	r0, #1
 8001c34:	e7db      	b.n	8001bee <HAL_UART_Transmit+0x5c>

08001c36 <HAL_UART_Receive>:
{
 8001c36:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001c3a:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c3c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8001c40:	4604      	mov	r4, r0
 8001c42:	460e      	mov	r6, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c44:	2b20      	cmp	r3, #32
{
 8001c46:	4617      	mov	r7, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c48:	d15e      	bne.n	8001d08 <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 8001c4a:	2900      	cmp	r1, #0
 8001c4c:	d05e      	beq.n	8001d0c <HAL_UART_Receive+0xd6>
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	d05c      	beq.n	8001d0c <HAL_UART_Receive+0xd6>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c52:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c54:	2500      	movs	r5, #0
 8001c56:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c5a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c5e:	6605      	str	r5, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 8001c60:	f7fe fe64 	bl	800092c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8001c64:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001c66:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 8001c68:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8001c70:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001c74:	d116      	bne.n	8001ca4 <HAL_UART_Receive+0x6e>
 8001c76:	6922      	ldr	r2, [r4, #16]
 8001c78:	42aa      	cmp	r2, r5
 8001c7a:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001c7e:	bf18      	it	ne
 8001c80:	25ff      	movne	r5, #255	; 0xff
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    UART_MASK_COMPUTATION(huart);
 8001c86:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c8a:	d11b      	bne.n	8001cc4 <HAL_UART_Receive+0x8e>
 8001c8c:	6923      	ldr	r3, [r4, #16]
 8001c8e:	b9cb      	cbnz	r3, 8001cc4 <HAL_UART_Receive+0x8e>
 8001c90:	4637      	mov	r7, r6
      pdata8bits  = NULL;
 8001c92:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 8001c94:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8001c98:	b290      	uxth	r0, r2
 8001c9a:	b9a8      	cbnz	r0, 8001cc8 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 8001ca2:	e01e      	b.n	8001ce2 <HAL_UART_Receive+0xac>
    UART_MASK_COMPUTATION(huart);
 8001ca4:	b92b      	cbnz	r3, 8001cb2 <HAL_UART_Receive+0x7c>
 8001ca6:	6922      	ldr	r2, [r4, #16]
 8001ca8:	2a00      	cmp	r2, #0
 8001caa:	bf14      	ite	ne
 8001cac:	257f      	movne	r5, #127	; 0x7f
 8001cae:	25ff      	moveq	r5, #255	; 0xff
 8001cb0:	e7e7      	b.n	8001c82 <HAL_UART_Receive+0x4c>
 8001cb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cb6:	d1e4      	bne.n	8001c82 <HAL_UART_Receive+0x4c>
 8001cb8:	6922      	ldr	r2, [r4, #16]
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	bf0c      	ite	eq
 8001cbe:	257f      	moveq	r5, #127	; 0x7f
 8001cc0:	253f      	movne	r5, #63	; 0x3f
 8001cc2:	e7de      	b.n	8001c82 <HAL_UART_Receive+0x4c>
      pdata16bits = NULL;
 8001cc4:	2700      	movs	r7, #0
 8001cc6:	e7e5      	b.n	8001c94 <HAL_UART_Receive+0x5e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cc8:	464b      	mov	r3, r9
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2120      	movs	r1, #32
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f8cd 8000 	str.w	r8, [sp]
 8001cd4:	f7ff ff15 	bl	8001b02 <UART_WaitOnFlagUntilTimeout>
 8001cd8:	b130      	cbz	r0, 8001ce8 <HAL_UART_Receive+0xb2>
        huart->RxState = HAL_UART_STATE_READY;
 8001cda:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8001cdc:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8001cde:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8001ce2:	b003      	add	sp, #12
 8001ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	402b      	ands	r3, r5
      if (pdata8bits == NULL)
 8001cee:	b946      	cbnz	r6, 8001d02 <HAL_UART_Receive+0xcc>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001cf0:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 8001cf4:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8001cf8:	3a01      	subs	r2, #1
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8001d00:	e7c8      	b.n	8001c94 <HAL_UART_Receive+0x5e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001d02:	f806 3b01 	strb.w	r3, [r6], #1
        pdata8bits++;
 8001d06:	e7f5      	b.n	8001cf4 <HAL_UART_Receive+0xbe>
    return HAL_BUSY;
 8001d08:	2002      	movs	r0, #2
 8001d0a:	e7ea      	b.n	8001ce2 <HAL_UART_Receive+0xac>
      return  HAL_ERROR;
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	e7e8      	b.n	8001ce2 <HAL_UART_Receive+0xac>

08001d10 <UART_CheckIdleState>:
{
 8001d10:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d12:	2500      	movs	r5, #0
{
 8001d14:	4604      	mov	r4, r0
 8001d16:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d18:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8001d1c:	f7fe fe06 	bl	800092c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d20:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8001d22:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	0711      	lsls	r1, r2, #28
 8001d28:	d51c      	bpl.n	8001d64 <UART_CheckIdleState+0x54>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d2a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001d2e:	9003      	str	r0, [sp, #12]
 8001d30:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001d34:	4620      	mov	r0, r4
 8001d36:	9200      	str	r2, [sp, #0]
 8001d38:	462a      	mov	r2, r5
 8001d3a:	f7ff fee2 	bl	8001b02 <UART_WaitOnFlagUntilTimeout>
 8001d3e:	9b03      	ldr	r3, [sp, #12]
 8001d40:	b180      	cbz	r0, 8001d64 <UART_CheckIdleState+0x54>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001d42:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d44:	e852 3f00 	ldrex	r3, [r2]
 8001d48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d4c:	e842 3100 	strex	r1, r3, [r2]
 8001d50:	2900      	cmp	r1, #0
 8001d52:	d1f6      	bne.n	8001d42 <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 8001d54:	2320      	movs	r3, #32
 8001d56:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8001d58:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8001d60:	b005      	add	sp, #20
 8001d62:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001d64:	6822      	ldr	r2, [r4, #0]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	0752      	lsls	r2, r2, #29
 8001d6a:	d523      	bpl.n	8001db4 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d6c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001d70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001d74:	4620      	mov	r0, r4
 8001d76:	9200      	str	r2, [sp, #0]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f7ff fec2 	bl	8001b02 <UART_WaitOnFlagUntilTimeout>
 8001d7e:	b1c8      	cbz	r0, 8001db4 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d80:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d82:	e852 3f00 	ldrex	r3, [r2]
 8001d86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d8a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8001d8e:	6822      	ldr	r2, [r4, #0]
 8001d90:	2900      	cmp	r1, #0
 8001d92:	d1f5      	bne.n	8001d80 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d94:	f102 0308 	add.w	r3, r2, #8
 8001d98:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001da0:	f102 0008 	add.w	r0, r2, #8
 8001da4:	e840 3100 	strex	r1, r3, [r0]
 8001da8:	2900      	cmp	r1, #0
 8001daa:	d1f3      	bne.n	8001d94 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8001dac:	2320      	movs	r3, #32
 8001dae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8001db2:	e7d1      	b.n	8001d58 <UART_CheckIdleState+0x48>
  huart->gState = HAL_UART_STATE_READY;
 8001db4:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001db6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001db8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001dba:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dbe:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001dc0:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 8001dc2:	e7ca      	b.n	8001d5a <UART_CheckIdleState+0x4a>

08001dc4 <HAL_UART_Init>:
{
 8001dc4:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	b340      	cbz	r0, 8001e1c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001dca:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8001dcc:	b91b      	cbnz	r3, 8001dd6 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8001dce:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8001dd2:	f003 fc95 	bl	8005700 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001dd6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001dd8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001dda:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8001ddc:	6813      	ldr	r3, [r2, #0]
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001de6:	b113      	cbz	r3, 8001dee <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8001de8:	4620      	mov	r0, r4
 8001dea:	f7ff fe35 	bl	8001a58 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dee:	4620      	mov	r0, r4
 8001df0:	f7ff fcf0 	bl	80017d4 <UART_SetConfig>
 8001df4:	2801      	cmp	r0, #1
 8001df6:	d011      	beq.n	8001e1c <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001df8:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001dfa:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e0a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
}
 8001e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8001e16:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001e18:	f7ff bf7a 	b.w	8001d10 <UART_CheckIdleState>
}
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	bd10      	pop	{r4, pc}

08001e20 <write_callback>:
  o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 8001e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool res = true;
 8001e22:	2001      	movs	r0, #1
{
 8001e24:	460e      	mov	r6, r1
 8001e26:	4614      	mov	r4, r2
  uint8_t *pr = (uint8_t *)buf;

  UNUSED(stream);

  while (count) {
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8001e28:	4d0c      	ldr	r5, [pc, #48]	; (8001e5c <write_callback+0x3c>)
      pr++;
      count--;
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
      res = write_packet();
      o_packet.pw = 0;
 8001e2a:	2700      	movs	r7, #0
  while (count) {
 8001e2c:	b93c      	cbnz	r4, 8001e3e <write_callback+0x1e>
 8001e2e:	e00b      	b.n	8001e48 <write_callback+0x28>
      o_packet.payload[o_packet.pw] = *pr;
 8001e30:	f816 1b01 	ldrb.w	r1, [r6], #1
 8001e34:	18ea      	adds	r2, r5, r3
      count--;
 8001e36:	3c01      	subs	r4, #1
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8001e38:	3301      	adds	r3, #1
      o_packet.payload[o_packet.pw] = *pr;
 8001e3a:	7051      	strb	r1, [r2, #1]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8001e3c:	702b      	strb	r3, [r5, #0]
 8001e3e:	782b      	ldrb	r3, [r5, #0]
 8001e40:	2b1f      	cmp	r3, #31
 8001e42:	d802      	bhi.n	8001e4a <write_callback+0x2a>
 8001e44:	2c00      	cmp	r4, #0
 8001e46:	d1f3      	bne.n	8001e30 <write_callback+0x10>
    }
  }
  return res;
}
 8001e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d1ee      	bne.n	8001e2c <write_callback+0xc>
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8001e4e:	2121      	movs	r1, #33	; 0x21
 8001e50:	4628      	mov	r0, r5
 8001e52:	f000 fc95 	bl	8002780 <ioRawWriteBuffer>
      o_packet.pw = 0;
 8001e56:	702f      	strb	r7, [r5, #0]
 8001e58:	e7e8      	b.n	8001e2c <write_callback+0xc>
 8001e5a:	bf00      	nop
 8001e5c:	200042a8 	.word	0x200042a8

08001e60 <read_callback>:
  i_packet.pr = 0xFF;
  i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 8001e60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001e64:	460c      	mov	r4, r1
  bool res = true;
  uint8_t *pw = (uint8_t *)buf;

  UNUSED(stream);

  if (count == 0)
 8001e66:	4615      	mov	r5, r2
 8001e68:	b35a      	cbz	r2, 8001ec2 <read_callback+0x62>
    return true;

  if (i_packet.pr == 0xFF)
 8001e6a:	4e20      	ldr	r6, [pc, #128]	; (8001eec <read_callback+0x8c>)
 8001e6c:	4f20      	ldr	r7, [pc, #128]	; (8001ef0 <read_callback+0x90>)
 8001e6e:	7833      	ldrb	r3, [r6, #0]
 8001e70:	2bff      	cmp	r3, #255	; 0xff
 8001e72:	d008      	beq.n	8001e86 <read_callback+0x26>

  if (res == false)
    return res;

  while (count) {
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8001e74:	f04f 0900 	mov.w	r9, #0
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8001e78:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8001eec <read_callback+0x8c>
 8001e7c:	683b      	ldr	r3, [r7, #0]
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8001e7e:	2200      	movs	r2, #0
 8001e80:	18f0      	adds	r0, r6, r3
 8001e82:	1b1b      	subs	r3, r3, r4
 8001e84:	e013      	b.n	8001eae <read_callback+0x4e>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8001e86:	2121      	movs	r1, #33	; 0x21
 8001e88:	4630      	mov	r0, r6
 8001e8a:	f000 fc87 	bl	800279c <ioRawReadBuffer>
  i_ridx = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	603b      	str	r3, [r7, #0]
  if (res == false)
 8001e92:	2800      	cmp	r0, #0
 8001e94:	d1ee      	bne.n	8001e74 <read_callback+0x14>
      read_packet();
    }
  }

  return res;
}
 8001e96:	b003      	add	sp, #12
 8001e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *pw = i_packet.payload[i_ridx];
 8001e9c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
      count--;
 8001ea0:	3d01      	subs	r5, #1
      *pw = i_packet.payload[i_ridx];
 8001ea2:	f804 2b01 	strb.w	r2, [r4], #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8001ea6:	7832      	ldrb	r2, [r6, #0]
 8001ea8:	3a01      	subs	r2, #1
 8001eaa:	7032      	strb	r2, [r6, #0]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f896 c000 	ldrb.w	ip, [r6]
 8001eb2:	18e1      	adds	r1, r4, r3
 8001eb4:	f1bc 0f00 	cmp.w	ip, #0
 8001eb8:	d005      	beq.n	8001ec6 <read_callback+0x66>
 8001eba:	2d00      	cmp	r5, #0
 8001ebc:	d1ee      	bne.n	8001e9c <read_callback+0x3c>
 8001ebe:	b102      	cbz	r2, 8001ec2 <read_callback+0x62>
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	e7e7      	b.n	8001e96 <read_callback+0x36>
 8001ec6:	b102      	cbz	r2, 8001eca <read_callback+0x6a>
 8001ec8:	6039      	str	r1, [r7, #0]
    if (count && i_packet.pr == 0) {
 8001eca:	2d00      	cmp	r5, #0
 8001ecc:	d0f9      	beq.n	8001ec2 <read_callback+0x62>
      uint8_t sync = 0xAA;
 8001ece:	23aa      	movs	r3, #170	; 0xaa
      ioRawWriteBuffer(&sync, 1);
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	f10d 0007 	add.w	r0, sp, #7
      uint8_t sync = 0xAA;
 8001ed6:	f88d 3007 	strb.w	r3, [sp, #7]
      ioRawWriteBuffer(&sync, 1);
 8001eda:	f000 fc51 	bl	8002780 <ioRawWriteBuffer>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8001ede:	2121      	movs	r1, #33	; 0x21
 8001ee0:	4640      	mov	r0, r8
 8001ee2:	f000 fc5b 	bl	800279c <ioRawReadBuffer>
  i_ridx = 0;
 8001ee6:	f8c7 9000 	str.w	r9, [r7]
  while (count) {
 8001eea:	e7c7      	b.n	8001e7c <read_callback+0x1c>
 8001eec:	20004280 	.word	0x20004280
 8001ef0:	200042a4 	.word	0x200042a4

08001ef4 <pb_io_flush_ostream>:
{
 8001ef4:	b510      	push	{r4, lr}
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8001ef6:	4c06      	ldr	r4, [pc, #24]	; (8001f10 <pb_io_flush_ostream+0x1c>)
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8001ef8:	2121      	movs	r1, #33	; 0x21
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8001efa:	7823      	ldrb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8001efc:	4620      	mov	r0, r4
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8001efe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f02:	7023      	strb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8001f04:	f000 fc3c 	bl	8002780 <ioRawWriteBuffer>
  o_packet.pw = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	7023      	strb	r3, [r4, #0]
}
 8001f0c:	bd10      	pop	{r4, pc}
 8001f0e:	bf00      	nop
 8001f10:	200042a8 	.word	0x200042a8

08001f14 <pb_io_flush_istream>:
  i_packet.pr = 0xFF;
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <pb_io_flush_istream+0x10>)
 8001f16:	22ff      	movs	r2, #255	; 0xff
 8001f18:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	4b02      	ldr	r3, [pc, #8]	; (8001f28 <pb_io_flush_istream+0x14>)
 8001f1e:	601a      	str	r2, [r3, #0]
}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20004280 	.word	0x20004280
 8001f28:	200042a4 	.word	0x200042a4

08001f2c <pb_io_ostream>:
#ifndef PB_NO_ERRMSG
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0, NULL};
#else
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
#endif
  return stream;
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <pb_io_ostream+0x14>)
 8001f2e:	e9c0 2100 	strd	r2, r1, [r0]
 8001f32:	f04f 31ff 	mov.w	r1, #4294967295
 8001f36:	2200      	movs	r2, #0
 8001f38:	e9c0 1202 	strd	r1, r2, [r0, #8]
}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	08001e21 	.word	0x08001e21

08001f44 <pb_io_istream>:
#ifndef PB_NO_ERRMSG
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX, NULL};
#else
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
#endif
  return stream;
 8001f44:	4a03      	ldr	r2, [pc, #12]	; (8001f54 <pb_io_istream+0x10>)
 8001f46:	e9c0 2100 	strd	r2, r1, [r0]
 8001f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4e:	6082      	str	r2, [r0, #8]
}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	08001e61 	.word	0x08001e61

08001f58 <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 8001f58:	b508      	push	{r3, lr}
  ioRawDisableLLWrite();
 8001f5a:	f000 fc2d 	bl	80027b8 <ioRawDisableLLWrite>
  return 0;
}
 8001f5e:	2000      	movs	r0, #0
 8001f60:	bd08      	pop	{r3, pc}

08001f62 <encode_uint32>:
/*
 * Callback function to encode array of uint32
 */
bool encode_uint32(pb_ostream_t *stream, const pb_field_t *field,
                   void * const *arg)
{
 8001f62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct _encode_uint32* array = (struct _encode_uint32 *)*arg;
 8001f66:	f8d2 8000 	ldr.w	r8, [r2]
  int offset = (array->offset == 0)?4:array->offset;
  for (size_t i = 0; i < array->size; i++)
 8001f6a:	2600      	movs	r6, #0
{
 8001f6c:	4607      	mov	r7, r0
 8001f6e:	4689      	mov	r9, r1
  int offset = (array->offset == 0)?4:array->offset;
 8001f70:	f8d8 4008 	ldr.w	r4, [r8, #8]
  for (size_t i = 0; i < array->size; i++)
 8001f74:	4635      	mov	r5, r6
 8001f76:	2c00      	cmp	r4, #0
 8001f78:	bf08      	it	eq
 8001f7a:	2404      	moveq	r4, #4
 8001f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8001f80:	42ab      	cmp	r3, r5
 8001f82:	d801      	bhi.n	8001f88 <encode_uint32+0x26>
    else
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
      return false;
  }
  return true;
 8001f84:	2001      	movs	r0, #1
 8001f86:	e005      	b.n	8001f94 <encode_uint32+0x32>
    if (!pb_encode_tag_for_field(stream, field))
 8001f88:	4649      	mov	r1, r9
 8001f8a:	4638      	mov	r0, r7
 8001f8c:	f003 f9d0 	bl	8005330 <pb_encode_tag_for_field>
 8001f90:	b910      	cbnz	r0, 8001f98 <encode_uint32+0x36>
      return false;
 8001f92:	2000      	movs	r0, #0
}
 8001f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8001f98:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (offset == 2)
 8001f9c:	2c02      	cmp	r4, #2
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8001f9e:	4638      	mov	r0, r7
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
 8001fa0:	bf18      	it	ne
 8001fa2:	599a      	ldrne	r2, [r3, r6]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8001fa4:	4426      	add	r6, r4
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8001fa6:	bf08      	it	eq
 8001fa8:	f833 2015 	ldrheq.w	r2, [r3, r5, lsl #1]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8001fac:	17d3      	asrs	r3, r2, #31
 8001fae:	f003 f916 	bl	80051de <pb_encode_varint>
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	d0ed      	beq.n	8001f92 <encode_uint32+0x30>
  for (size_t i = 0; i < array->size; i++)
 8001fb6:	3501      	adds	r5, #1
 8001fb8:	e7e0      	b.n	8001f7c <encode_uint32+0x1a>

08001fba <encode_data_cb>:
/*
 * Local callback function to encode datas field from aiDataMsg msg
 */
bool encode_data_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 8001fba:	b570      	push	{r4, r5, r6, lr}
  aiPbData *data = (aiPbData *)*arg;
 8001fbc:	6815      	ldr	r5, [r2, #0]
{
 8001fbe:	4604      	mov	r4, r0

  pb_byte_t *pr = (pb_byte_t *)data->addr;
 8001fc0:	68ae      	ldr	r6, [r5, #8]

  if (!pb_encode_tag_for_field(stream, field))
 8001fc2:	f003 f9b5 	bl	8005330 <pb_encode_tag_for_field>
 8001fc6:	b130      	cbz	r0, 8001fd6 <encode_data_cb+0x1c>
    return false;

  if (!pb_encode_string(stream, pr, data->size))
 8001fc8:	686a      	ldr	r2, [r5, #4]
 8001fca:	4631      	mov	r1, r6
 8001fcc:	4620      	mov	r0, r4
    return false;

  return true;
}
 8001fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (!pb_encode_string(stream, pr, data->size))
 8001fd2:	f003 bae1 	b.w	8005598 <pb_encode_string>
}
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}

08001fd8 <decode_data_cb>:
{
 8001fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  aiPbData *data = (aiPbData *)*arg;
 8001fda:	6814      	ldr	r4, [r2, #0]
{
 8001fdc:	4605      	mov	r5, r0
  data->nb_read = 0;
 8001fde:	2300      	movs	r3, #0
  uint8_t *pw = (uint8_t *)data->addr;
 8001fe0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
    data->nb_read += itsize;
 8001fe4:	60e3      	str	r3, [r4, #12]
  while (stream->bytes_left) {
 8001fe6:	68ab      	ldr	r3, [r5, #8]
 8001fe8:	b913      	cbnz	r3, 8001ff0 <decode_data_cb+0x18>
  return true;
 8001fea:	2001      	movs	r0, #1
}
 8001fec:	b003      	add	sp, #12
 8001fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4669      	mov	r1, sp
 8001ff4:	4628      	mov	r0, r5
 8001ff6:	f002 fc97 	bl	8004928 <pb_read>
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	d0f6      	beq.n	8001fec <decode_data_cb+0x14>
    if ((pw) && (maxr > 0)) /* additional data are skipped */
 8001ffe:	b13f      	cbz	r7, 8002010 <decode_data_cb+0x38>
 8002000:	2e00      	cmp	r6, #0
      *pw = *(uint8_t *)&number;
 8002002:	bfc2      	ittt	gt
 8002004:	f89d 3000 	ldrbgt.w	r3, [sp]
      maxr--;
 8002008:	f106 36ff 	addgt.w	r6, r6, #4294967295
      *pw = *(uint8_t *)&number;
 800200c:	f807 3b01 	strbgt.w	r3, [r7], #1
    data->nb_read += itsize;
 8002010:	68e3      	ldr	r3, [r4, #12]
 8002012:	3301      	adds	r3, #1
 8002014:	e7e6      	b.n	8001fe4 <decode_data_cb+0xc>
	...

08002018 <aiPbMgrInit>:
{
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	b089      	sub	sp, #36	; 0x24
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 800201c:	4c1a      	ldr	r4, [pc, #104]	; (8002088 <aiPbMgrInit+0x70>)
 800201e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8002022:	2100      	movs	r1, #0
  pbContextMgr.input = pb_io_istream(0);
 8002024:	ae04      	add	r6, sp, #16
{
 8002026:	4605      	mov	r5, r0
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8002028:	4620      	mov	r0, r4
  pbContextMgr.output = pb_io_ostream(0);
 800202a:	f104 070c 	add.w	r7, r4, #12
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 800202e:	f00c ffce 	bl	800efce <memset>
  pb_io_stream_init();
 8002032:	f7ff ff91 	bl	8001f58 <pb_io_stream_init>
  pbContextMgr.input = pb_io_istream(0);
 8002036:	4630      	mov	r0, r6
 8002038:	2100      	movs	r1, #0
 800203a:	f7ff ff83 	bl	8001f44 <pb_io_istream>
 800203e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  pbContextMgr.output = pb_io_ostream(0);
 8002042:	466e      	mov	r6, sp
  pbContextMgr.input = pb_io_istream(0);
 8002044:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pbContextMgr.output = pb_io_ostream(0);
 8002048:	2100      	movs	r1, #0
 800204a:	4630      	mov	r0, r6
 800204c:	f7ff ff6e 	bl	8001f2c <pb_io_ostream>
 8002050:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002054:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  pbContextMgr.n_func = 0;
 8002058:	2300      	movs	r3, #0
  pbContextMgr.funcs = NULL;
 800205a:	e9c4 3307 	strd	r3, r3, [r4, #28]
  if (funcs) {
 800205e:	b97d      	cbnz	r5, 8002080 <aiPbMgrInit+0x68>
  pbContextMgr.state = PB_MGR_READY;
 8002060:	2301      	movs	r3, #1
 8002062:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
}
 8002066:	b009      	add	sp, #36	; 0x24
 8002068:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cfunc++;
 800206a:	320c      	adds	r2, #12
 800206c:	4633      	mov	r3, r6
 800206e:	2101      	movs	r1, #1
    while (cfunc->process) {
 8002070:	6850      	ldr	r0, [r2, #4]
 8002072:	1c5e      	adds	r6, r3, #1
 8002074:	2800      	cmp	r0, #0
 8002076:	d1f8      	bne.n	800206a <aiPbMgrInit+0x52>
 8002078:	b101      	cbz	r1, 800207c <aiPbMgrInit+0x64>
 800207a:	6223      	str	r3, [r4, #32]
    pbContextMgr.funcs = funcs;
 800207c:	61e5      	str	r5, [r4, #28]
 800207e:	e7ef      	b.n	8002060 <aiPbMgrInit+0x48>
 8002080:	462a      	mov	r2, r5
 8002082:	4619      	mov	r1, r3
 8002084:	e7f4      	b.n	8002070 <aiPbMgrInit+0x58>
 8002086:	bf00      	nop
 8002088:	200042d0 	.word	0x200042d0

0800208c <aiPbStrCopy>:
{
 800208c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800208e:	4616      	mov	r6, r2
  const char undef[] = "UNDEFINED";
 8002090:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <aiPbStrCopy+0x48>)
{
 8002092:	4605      	mov	r5, r0
 8002094:	460c      	mov	r4, r1
  const char undef[] = "UNDEFINED";
 8002096:	6810      	ldr	r0, [r2, #0]
 8002098:	ab01      	add	r3, sp, #4
 800209a:	6851      	ldr	r1, [r2, #4]
 800209c:	8912      	ldrh	r2, [r2, #8]
 800209e:	c303      	stmia	r3!, {r0, r1}
  size_t l = strlen(src);
 80020a0:	4628      	mov	r0, r5
  const char undef[] = "UNDEFINED";
 80020a2:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 80020a4:	f7fe f91c 	bl	80002e0 <strlen>
  if (l > max)
 80020a8:	42b0      	cmp	r0, r6
    l = max-1;
 80020aa:	bf88      	it	hi
 80020ac:	f106 30ff 	addhi.w	r0, r6, #4294967295
  if (!dst)
 80020b0:	b174      	cbz	r4, 80020d0 <aiPbStrCopy+0x44>
  if (src && l)
 80020b2:	b138      	cbz	r0, 80020c4 <aiPbStrCopy+0x38>
    memcpy(dst, src, l+1);
 80020b4:	1c42      	adds	r2, r0, #1
 80020b6:	4629      	mov	r1, r5
 80020b8:	4620      	mov	r0, r4
}
 80020ba:	b004      	add	sp, #16
 80020bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(dst, src, l+1);
 80020c0:	f00d b827 	b.w	800f112 <memcpy>
    memcpy(dst, undef, strlen(undef)+1);
 80020c4:	ab01      	add	r3, sp, #4
 80020c6:	cb03      	ldmia	r3!, {r0, r1}
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	6020      	str	r0, [r4, #0]
 80020cc:	6061      	str	r1, [r4, #4]
 80020ce:	8123      	strh	r3, [r4, #8]
}
 80020d0:	b004      	add	sp, #16
 80020d2:	bd70      	pop	{r4, r5, r6, pc}
 80020d4:	080115e0 	.word	0x080115e0

080020d8 <encode_tensor_desc>:
{
 80020d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020dc:	4605      	mov	r5, r0
 80020de:	b09c      	sub	sp, #112	; 0x70
 80020e0:	4688      	mov	r8, r1
  struct _encode_tensor_desc* tensors = (struct _encode_tensor_desc *)*arg;
 80020e2:	6816      	ldr	r6, [r2, #0]
  for (size_t i = 0; i < tensors->size; i++)
 80020e4:	2400      	movs	r4, #0
    msg.dims.funcs.encode = encode_uint32;
 80020e6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8002138 <encode_tensor_desc+0x60>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 80020ea:	f8df a050 	ldr.w	sl, [pc, #80]	; 800213c <encode_tensor_desc+0x64>
  for (size_t i = 0; i < tensors->size; i++)
 80020ee:	6873      	ldr	r3, [r6, #4]
 80020f0:	42a3      	cmp	r3, r4
 80020f2:	d801      	bhi.n	80020f8 <encode_tensor_desc+0x20>
  return true;
 80020f4:	2001      	movs	r0, #1
 80020f6:	e01c      	b.n	8002132 <encode_tensor_desc+0x5a>
    aiTensorDescMsg msg = aiTensorDescMsg_init_zero;
 80020f8:	2264      	movs	r2, #100	; 0x64
 80020fa:	2100      	movs	r1, #0
 80020fc:	a803      	add	r0, sp, #12
 80020fe:	f00c ff66 	bl	800efce <memset>
    tensors->cb(i, tensors->data, &msg, &array_u32);
 8002102:	68b1      	ldr	r1, [r6, #8]
 8002104:	4620      	mov	r0, r4
 8002106:	466b      	mov	r3, sp
 8002108:	aa03      	add	r2, sp, #12
 800210a:	6837      	ldr	r7, [r6, #0]
 800210c:	47b8      	blx	r7
    if (!pb_encode_tag_for_field(stream, field))
 800210e:	4641      	mov	r1, r8
 8002110:	4628      	mov	r0, r5
    msg.dims.funcs.encode = encode_uint32;
 8002112:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
    msg.dims.arg = &array_u32;
 8002116:	f8cd d05c 	str.w	sp, [sp, #92]	; 0x5c
    if (!pb_encode_tag_for_field(stream, field))
 800211a:	f003 f909 	bl	8005330 <pb_encode_tag_for_field>
 800211e:	b138      	cbz	r0, 8002130 <encode_tensor_desc+0x58>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 8002120:	aa03      	add	r2, sp, #12
 8002122:	4651      	mov	r1, sl
 8002124:	4628      	mov	r0, r5
 8002126:	f003 fa7a 	bl	800561e <pb_encode_submessage>
 800212a:	b108      	cbz	r0, 8002130 <encode_tensor_desc+0x58>
  for (size_t i = 0; i < tensors->size; i++)
 800212c:	3401      	adds	r4, #1
 800212e:	e7de      	b.n	80020ee <encode_tensor_desc+0x16>
      return false;
 8002130:	2000      	movs	r0, #0
}
 8002132:	b01c      	add	sp, #112	; 0x70
 8002134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002138:	08001f63 	.word	0x08001f63
 800213c:	08011974 	.word	0x08011974

08002140 <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
    EnumState state)
{
 8002140:	b508      	push	{r3, lr}
  resp->reqid = req->reqid;
 8002142:	6803      	ldr	r3, [r0, #0]
  resp->state = state;
 8002144:	710a      	strb	r2, [r1, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8002146:	460a      	mov	r2, r1
  resp->reqid = req->reqid;
 8002148:	600b      	str	r3, [r1, #0]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 800214a:	4804      	ldr	r0, [pc, #16]	; (800215c <aiPbMgrSendResp+0x1c>)
 800214c:	4904      	ldr	r1, [pc, #16]	; (8002160 <aiPbMgrSendResp+0x20>)
 800214e:	f003 f9ef 	bl	8005530 <pb_encode>
  pb_io_flush_ostream();
}
 8002152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pb_io_flush_ostream();
 8002156:	f7ff becd 	b.w	8001ef4 <pb_io_flush_ostream>
 800215a:	bf00      	nop
 800215c:	200042dc 	.word	0x200042dc
 8002160:	08011af0 	.word	0x08011af0

08002164 <aiPbMgrWaitAndProcess>:
{
 8002164:	b570      	push	{r4, r5, r6, lr}
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8002166:	4c1d      	ldr	r4, [pc, #116]	; (80021dc <aiPbMgrWaitAndProcess+0x78>)
  pb_io_flush_istream();
 8002168:	f7ff fed4 	bl	8001f14 <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 800216c:	491c      	ldr	r1, [pc, #112]	; (80021e0 <aiPbMgrWaitAndProcess+0x7c>)
 800216e:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8002172:	4620      	mov	r0, r4
 8002174:	f002 ff5d 	bl	8005032 <pb_decode_delimited>
 8002178:	b348      	cbz	r0, 80021ce <aiPbMgrWaitAndProcess+0x6a>
    pb_io_flush_istream();
 800217a:	f7ff fecb 	bl	8001f14 <pb_io_flush_istream>
    pbContextMgr.state = PB_MGR_ON_GOING;
 800217e:	2302      	movs	r3, #2
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002180:	6a21      	ldr	r1, [r4, #32]
 8002182:	2500      	movs	r5, #0
    pbContextMgr.state = PB_MGR_ON_GOING;
 8002184:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8002188:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 800218c:	69e3      	ldr	r3, [r4, #28]
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 800218e:	42a9      	cmp	r1, r5
 8002190:	d00d      	beq.n	80021ae <aiPbMgrWaitAndProcess+0x4a>
      cfunc = &pbContextMgr.funcs[idx];
 8002192:	461a      	mov	r2, r3
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8002194:	f813 6b0c 	ldrb.w	r6, [r3], #12
 8002198:	4286      	cmp	r6, r0
 800219a:	d11c      	bne.n	80021d6 <aiPbMgrWaitAndProcess+0x72>
        cfunc->process(&(pbContextMgr.req), &(pbContextMgr.resp), cfunc->param);
 800219c:	4911      	ldr	r1, [pc, #68]	; (80021e4 <aiPbMgrWaitAndProcess+0x80>)
 800219e:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
 80021a2:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
 80021a6:	4798      	blx	r3
    if (idx == pbContextMgr.n_func) {
 80021a8:	6a23      	ldr	r3, [r4, #32]
 80021aa:	42ab      	cmp	r3, r5
 80021ac:	d10c      	bne.n	80021c8 <aiPbMgrWaitAndProcess+0x64>
    EnumState state, uint32_t param, EnumError error)
{
  resp->which_payload = respMsg_ack_tag;
  resp->payload.ack.param = param;
  resp->payload.ack.error = error;
  aiPbMgrSendResp(req, resp, state);
 80021ae:	490d      	ldr	r1, [pc, #52]	; (80021e4 <aiPbMgrWaitAndProcess+0x80>)
  resp->payload.ack.param = param;
 80021b0:	2204      	movs	r2, #4
  resp->which_payload = respMsg_ack_tag;
 80021b2:	230c      	movs	r3, #12
  aiPbMgrSendResp(req, resp, state);
 80021b4:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
  resp->payload.ack.param = param;
 80021b8:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  resp->which_payload = respMsg_ack_tag;
 80021bc:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
  resp->payload.ack.error = error;
 80021c0:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  aiPbMgrSendResp(req, resp, state);
 80021c4:	f7ff ffbc 	bl	8002140 <aiPbMgrSendResp>
    pbContextMgr.state = PB_MGR_READY;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
  pb_io_flush_istream();
 80021ce:	f7ff fea1 	bl	8001f14 <pb_io_flush_istream>
}
 80021d2:	2000      	movs	r0, #0
 80021d4:	bd70      	pop	{r4, r5, r6, pc}
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 80021d6:	3501      	adds	r5, #1
 80021d8:	e7d9      	b.n	800218e <aiPbMgrWaitAndProcess+0x2a>
 80021da:	bf00      	nop
 80021dc:	200042d0 	.word	0x200042d0
 80021e0:	08011a90 	.word	0x08011a90
 80021e4:	20004348 	.word	0x20004348

080021e8 <aiPbMgrSendAck>:
{
 80021e8:	b470      	push	{r4, r5, r6}
  resp->which_payload = respMsg_ack_tag;
 80021ea:	260c      	movs	r6, #12
{
 80021ec:	f89d 500c 	ldrb.w	r5, [sp, #12]
  resp->payload.ack.param = param;
 80021f0:	608b      	str	r3, [r1, #8]
  resp->which_payload = respMsg_ack_tag;
 80021f2:	80ce      	strh	r6, [r1, #6]
  resp->payload.ack.error = error;
 80021f4:	730d      	strb	r5, [r1, #12]
}
 80021f6:	bc70      	pop	{r4, r5, r6}
  aiPbMgrSendResp(req, resp, state);
 80021f8:	f7ff bfa2 	b.w	8002140 <aiPbMgrSendResp>

080021fc <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 80021fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;
 80021fe:	2300      	movs	r3, #0
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002200:	aa02      	add	r2, sp, #8
 8002202:	4907      	ldr	r1, [pc, #28]	; (8002220 <aiPbMgrWaitAck+0x24>)
 8002204:	4807      	ldr	r0, [pc, #28]	; (8002224 <aiPbMgrWaitAck+0x28>)
  ackMsg ack = ackMsg_init_default;
 8002206:	9302      	str	r3, [sp, #8]
 8002208:	f88d 300c 	strb.w	r3, [sp, #12]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 800220c:	f002 ff11 	bl	8005032 <pb_decode_delimited>
 8002210:	9001      	str	r0, [sp, #4]
  pb_io_flush_istream();
 8002212:	f7ff fe7f 	bl	8001f14 <pb_io_flush_istream>
  return res;
}
 8002216:	9801      	ldr	r0, [sp, #4]
 8002218:	b005      	add	sp, #20
 800221a:	f85d fb04 	ldr.w	pc, [sp], #4
 800221e:	bf00      	nop
 8002220:	08011738 	.word	0x08011738
 8002224:	200042d0 	.word	0x200042d0

08002228 <aiPbMgrSendLogV2>:
  pb_io_flush_istream();
  return res;
}

bool aiPbMgrSendLogV2(EnumState state, uint32_t lvl, const char *str)
{
 8002228:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;

  if (pbContextMgr.state != PB_MGR_ON_GOING)
 800222a:	4c19      	ldr	r4, [pc, #100]	; (8002290 <aiPbMgrSendLogV2+0x68>)
{
 800222c:	460e      	mov	r6, r1
 800222e:	4611      	mov	r1, r2
  ackMsg ack = ackMsg_init_default;
 8002230:	2300      	movs	r3, #0
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8002232:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
{
 8002236:	4605      	mov	r5, r0
  ackMsg ack = ackMsg_init_default;
 8002238:	9302      	str	r3, [sp, #8]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 800223a:	2a02      	cmp	r2, #2
  ackMsg ack = ackMsg_init_default;
 800223c:	f88d 300c 	strb.w	r3, [sp, #12]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8002240:	d124      	bne.n	800228c <aiPbMgrSendLogV2+0x64>
    return false;

  size_t len = strlen(str);
 8002242:	4608      	mov	r0, r1
 8002244:	9101      	str	r1, [sp, #4]
 8002246:	f7fe f84b 	bl	80002e0 <strlen>
  pbContextMgr.resp.which_payload = respMsg_log_tag;
  pbContextMgr.resp.payload.log.level = lvl;
  if (len >= sizeof(pbContextMgr.resp.payload.log.str))
    len = sizeof(pbContextMgr.resp.payload.log.str) - 1;

  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 800224a:	287f      	cmp	r0, #127	; 0x7f
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 800224c:	f04f 030d 	mov.w	r3, #13
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8002250:	9901      	ldr	r1, [sp, #4]
 8002252:	bf28      	it	cs
 8002254:	207f      	movcs	r0, #127	; 0x7f
  pbContextMgr.resp.payload.log.level = lvl;
 8002256:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 800225a:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 800225e:	1c42      	adds	r2, r0, #1
 8002260:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8002264:	f00c ff55 	bl	800f112 <memcpy>

  aiPbMgrSendResp(&(pbContextMgr.req), &(pbContextMgr.resp), state);
 8002268:	f104 0178 	add.w	r1, r4, #120	; 0x78
 800226c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002270:	462a      	mov	r2, r5
 8002272:	f7ff ff65 	bl	8002140 <aiPbMgrSendResp>

  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002276:	4620      	mov	r0, r4
 8002278:	aa02      	add	r2, sp, #8
 800227a:	4906      	ldr	r1, [pc, #24]	; (8002294 <aiPbMgrSendLogV2+0x6c>)
 800227c:	f002 fed9 	bl	8005032 <pb_decode_delimited>
 8002280:	4604      	mov	r4, r0
  pb_io_flush_istream();
 8002282:	f7ff fe47 	bl	8001f14 <pb_io_flush_istream>
  return res;
}
 8002286:	4620      	mov	r0, r4
 8002288:	b004      	add	sp, #16
 800228a:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 800228c:	461c      	mov	r4, r3
 800228e:	e7fa      	b.n	8002286 <aiPbMgrSendLogV2+0x5e>
 8002290:	200042d0 	.word	0x200042d0
 8002294:	08011738 	.word	0x08011738

08002298 <aiPbMgrReceiveData>:

bool aiPbMgrReceiveData(aiPbData *data)
{
 8002298:	b510      	push	{r4, lr}
  aiDataMsg msg;

  msg.datas.funcs.decode = &decode_data_cb;
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <aiPbMgrReceiveData+0x28>)
{
 800229c:	b086      	sub	sp, #24
 800229e:	4604      	mov	r4, r0
  msg.datas.arg = (void *)data;

  /* Waiting and decoding aiDataMsg message */
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 80022a0:	4908      	ldr	r1, [pc, #32]	; (80022c4 <aiPbMgrReceiveData+0x2c>)
 80022a2:	aa01      	add	r2, sp, #4
  msg.datas.arg = (void *)data;
 80022a4:	e9cd 3004 	strd	r3, r0, [sp, #16]
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 80022a8:	4807      	ldr	r0, [pc, #28]	; (80022c8 <aiPbMgrReceiveData+0x30>)
 80022aa:	f002 fec2 	bl	8005032 <pb_decode_delimited>
  pb_io_flush_istream();
 80022ae:	f7ff fe31 	bl	8001f14 <pb_io_flush_istream>

  data->type = msg.type;
 80022b2:	9b01      	ldr	r3, [sp, #4]
  data->addr = msg.addr;

  return true;
}
 80022b4:	2001      	movs	r0, #1
  data->type = msg.type;
 80022b6:	6023      	str	r3, [r4, #0]
  data->addr = msg.addr;
 80022b8:	9b03      	ldr	r3, [sp, #12]
 80022ba:	60a3      	str	r3, [r4, #8]
}
 80022bc:	b006      	add	sp, #24
 80022be:	bd10      	pop	{r4, pc}
 80022c0:	08001fd9 	.word	0x08001fd9
 80022c4:	0801176c 	.word	0x0801176c
 80022c8:	200042d0 	.word	0x200042d0

080022cc <aiPbMgrSendOperator>:


bool aiPbMgrSendOperator(const reqMsg *req, respMsg *resp,
    EnumState state, const char *name, const uint32_t type, const uint32_t id,
    aiOpPerf *perf)
{
 80022cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ce:	4617      	mov	r7, r2
 80022d0:	b085      	sub	sp, #20
  struct _encode_uint32 array;
  resp->which_payload = respMsg_op_tag;
 80022d2:	2210      	movs	r2, #16
{
 80022d4:	4606      	mov	r6, r0
 80022d6:	460c      	mov	r4, r1
 80022d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (name)
 80022da:	4618      	mov	r0, r3
  resp->which_payload = respMsg_op_tag;
 80022dc:	80ca      	strh	r2, [r1, #6]
  if (name)
 80022de:	b31b      	cbz	r3, 8002328 <aiPbMgrSendOperator+0x5c>
    aiPbStrCopy(name, &resp->payload.op.name[0], sizeof(resp->payload.op.name));
 80022e0:	2240      	movs	r2, #64	; 0x40
 80022e2:	3108      	adds	r1, #8
 80022e4:	f7ff fed2 	bl	800208c <aiPbStrCopy>
  else
    resp->payload.op.name[0] = 0;
  resp->payload.op.type = type;
 80022e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022ea:	64a3      	str	r3, [r4, #72]	; 0x48
  resp->payload.op.id = id;
 80022ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80022ee:	64e3      	str	r3, [r4, #76]	; 0x4c

  if (perf) {
 80022f0:	b1f5      	cbz	r5, 8002330 <aiPbMgrSendOperator+0x64>
    resp->payload.op.stack_used = perf->stack_usage;
 80022f2:	692b      	ldr	r3, [r5, #16]
 80022f4:	6623      	str	r3, [r4, #96]	; 0x60
    resp->payload.op.heap_used = perf->heap_usage;
 80022f6:	696b      	ldr	r3, [r5, #20]
 80022f8:	6663      	str	r3, [r4, #100]	; 0x64
    resp->payload.op.duration = perf->duration;
 80022fa:	682b      	ldr	r3, [r5, #0]
 80022fc:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = perf->counter_type;
 80022fe:	686b      	ldr	r3, [r5, #4]
 8002300:	6563      	str	r3, [r4, #84]	; 0x54
    if (perf->counters) {
 8002302:	68eb      	ldr	r3, [r5, #12]
 8002304:	b193      	cbz	r3, 800232c <aiPbMgrSendOperator+0x60>
      array.size = perf->counter_n;
 8002306:	68aa      	ldr	r2, [r5, #8]
	  array.data = (void *)perf->counters;
 8002308:	e9cd 2301 	strd	r2, r3, [sp, #4]
	  array.offset = 4;
 800230c:	2304      	movs	r3, #4
 800230e:	9303      	str	r3, [sp, #12]
      resp->payload.op.counters.funcs.encode = encode_uint32;
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <aiPbMgrSendOperator+0x70>)
 8002312:	65a3      	str	r3, [r4, #88]	; 0x58
      resp->payload.op.counters.arg = &array;
 8002314:	ab01      	add	r3, sp, #4
 8002316:	65e3      	str	r3, [r4, #92]	; 0x5c
    resp->payload.op.duration = 0.0f;
    resp->payload.op.counter_type = 0;
    resp->payload.op.counters.funcs.encode = NULL;
  }

  aiPbMgrSendResp(req, resp, state);
 8002318:	4630      	mov	r0, r6
 800231a:	463a      	mov	r2, r7
 800231c:	4621      	mov	r1, r4
 800231e:	f7ff ff0f 	bl	8002140 <aiPbMgrSendResp>
  // aiPbMgrWaitAck();

  return true;
}
 8002322:	2001      	movs	r0, #1
 8002324:	b005      	add	sp, #20
 8002326:	bdf0      	pop	{r4, r5, r6, r7, pc}
    resp->payload.op.name[0] = 0;
 8002328:	720b      	strb	r3, [r1, #8]
 800232a:	e7dd      	b.n	80022e8 <aiPbMgrSendOperator+0x1c>
      resp->payload.op.counters.funcs.encode = NULL;
 800232c:	65a3      	str	r3, [r4, #88]	; 0x58
 800232e:	e7f3      	b.n	8002318 <aiPbMgrSendOperator+0x4c>
    resp->payload.op.duration = 0.0f;
 8002330:	2300      	movs	r3, #0
    resp->payload.op.counters.funcs.encode = NULL;
 8002332:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
    resp->payload.op.duration = 0.0f;
 8002336:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = 0;
 8002338:	e7ee      	b.n	8002318 <aiPbMgrSendOperator+0x4c>
 800233a:	bf00      	nop
 800233c:	08001f63 	.word	0x08001f63

08002340 <aiPbCmdSync>:
#if defined(_IS_GHS_COMPILER) && _IS_GHS_COMPILER
#define _ARM_TOOLS_ID       EnumTools_AI_GHS
#endif

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 8002340:	b410      	push	{r4}
  resp->which_payload = respMsg_sync_tag;
 8002342:	240a      	movs	r4, #10
 8002344:	80cc      	strh	r4, [r1, #6]
  resp->payload.sync.version =
 8002346:	f240 3401 	movw	r4, #769	; 0x301
 800234a:	608c      	str	r4, [r1, #8]
   *  b15..b8  8b : API variant (EnumAiApiRuntime value)
   *  b23..b16 8b : TOOL-CHAIN ID (EnumTools value)
   */

  resp->payload.sync.rtid = ((uint32_t)param >> 16) & 0xFFFF;
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 800234c:	b294      	uxth	r4, r2
  resp->payload.sync.rtid = ((uint32_t)param >> 16) & 0xFFFF;
 800234e:	0c12      	lsrs	r2, r2, #16
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8002350:	60cc      	str	r4, [r1, #12]

  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << EnumTools_AI_TOOLS_POS);
 8002352:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
}
 8002356:	f85d 4b04 	ldr.w	r4, [sp], #4
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << EnumTools_AI_TOOLS_POS);
 800235a:	610a      	str	r2, [r1, #16]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800235c:	2200      	movs	r2, #0
 800235e:	f7ff beef 	b.w	8002140 <aiPbMgrSendResp>
	...

08002364 <_aiPrintDataInfo>:
    );
}


static void _aiPrintDataInfo(const int idx, const ai_buffer *buffer)
{
 8002364:	b537      	push	{r0, r1, r2, r4, r5, lr}
  const ai_buffer_format fmt = buffer->format;
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 8002366:	e9d1 5200 	ldrd	r5, r2, [r1]
{
 800236a:	4604      	mov	r4, r0
 800236c:	4608      	mov	r0, r1
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 800236e:	2101      	movs	r1, #1
 8002370:	9201      	str	r2, [sp, #4]
 8002372:	f003 ffef 	bl	8006354 <ai_buffer_get_size>
 8002376:	4629      	mov	r1, r5
 8002378:	f004 f820 	bl	80063bc <ai_buffer_get_byte_size>
 800237c:	9a01      	ldr	r2, [sp, #4]
 800237e:	4603      	mov	r3, r0
 8002380:	4621      	mov	r1, r4
 8002382:	4803      	ldr	r0, [pc, #12]	; (8002390 <_aiPrintDataInfo+0x2c>)
      idx,
      (int)buffer->data,
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
  );
}
 8002384:	b003      	add	sp, #12
 8002386:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 800238a:	f000 ba53 	b.w	8002834 <lc_print>
 800238e:	bf00      	nop
 8002390:	08010cc0 	.word	0x08010cc0

08002394 <aiPlatformVersion>:
{
 8002394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 8002396:	f004 f975 	bl	8006684 <ai_platform_runtime_get_version>
  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 800239a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800239e:	2201      	movs	r2, #1
 80023a0:	9302      	str	r3, [sp, #8]
 80023a2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80023a6:	b2c0      	uxtb	r0, r0
 80023a8:	4611      	mov	r1, r2
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	2300      	movs	r3, #0
 80023ae:	9000      	str	r0, [sp, #0]
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <aiPlatformVersion+0x28>)
 80023b2:	f000 fa3f 	bl	8002834 <lc_print>
}
 80023b6:	b007      	add	sp, #28
 80023b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80023bc:	08010cd3 	.word	0x08010cd3

080023c0 <aiLogErr>:
{
 80023c0:	b410      	push	{r4}
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80023c2:	f3c0 2317 	ubfx	r3, r0, #8, #24
 80023c6:	b2c4      	uxtb	r4, r0
  if (fct)
 80023c8:	b129      	cbz	r1, 80023d6 <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80023ca:	4622      	mov	r2, r4
 80023cc:	4805      	ldr	r0, [pc, #20]	; (80023e4 <aiLogErr+0x24>)
}
 80023ce:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80023d2:	f000 ba2f 	b.w	8002834 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80023d6:	4621      	mov	r1, r4
 80023d8:	461a      	mov	r2, r3
 80023da:	4803      	ldr	r0, [pc, #12]	; (80023e8 <aiLogErr+0x28>)
}
 80023dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80023e0:	f000 ba28 	b.w	8002834 <lc_print>
 80023e4:	08010d05 	.word	0x08010d05
 80023e8:	08010d32 	.word	0x08010d32

080023ec <aiPrintBufferInfo>:
  LC_PRINT("(%d,%d,%d,",
 80023ec:	6981      	ldr	r1, [r0, #24]
{
 80023ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023f2:	4604      	mov	r4, r0
  const ai_buffer_format fmt = buffer->format;
 80023f4:	6806      	ldr	r6, [r0, #0]
  LC_PRINT("(%d,%d,%d,",
 80023f6:	4870      	ldr	r0, [pc, #448]	; (80025b8 <aiPrintBufferInfo+0x1cc>)
 80023f8:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
{
 80023fc:	ed2d 8b02 	vpush	{d8}
  LC_PRINT("(%d,%d,%d,",
 8002400:	6809      	ldr	r1, [r1, #0]
{
 8002402:	b083      	sub	sp, #12
  LC_PRINT("(%d,%d,%d,",
 8002404:	f000 fa16 	bl	8002834 <lc_print>
  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 8002408:	6962      	ldr	r2, [r4, #20]
 800240a:	69a0      	ldr	r0, [r4, #24]
 800240c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002410:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8002414:	d119      	bne.n	800244a <aiPrintBufferInfo+0x5e>
    LC_PRINT("%d,%d)",
 8002416:	6842      	ldr	r2, [r0, #4]
 8002418:	6901      	ldr	r1, [r0, #16]
 800241a:	4868      	ldr	r0, [pc, #416]	; (80025bc <aiPrintBufferInfo+0x1d0>)
 800241c:	f000 fa0a 	bl	8002834 <lc_print>
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8002420:	2101      	movs	r1, #1
 8002422:	4620      	mov	r0, r4
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8002424:	f3c6 4743 	ubfx	r7, r6, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8002428:	f003 ff94 	bl	8006354 <ai_buffer_get_size>
 800242c:	4601      	mov	r1, r0
 800242e:	4864      	ldr	r0, [pc, #400]	; (80025c0 <aiPrintBufferInfo+0x1d4>)
 8002430:	f000 fa00 	bl	8002834 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8002434:	2f01      	cmp	r7, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8002436:	ea4f 18e6 	mov.w	r8, r6, asr #7
 800243a:	f3c6 15c6 	ubfx	r5, r6, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800243e:	d113      	bne.n	8002468 <aiPrintBufferInfo+0x7c>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8002440:	4629      	mov	r1, r5
 8002442:	4860      	ldr	r0, [pc, #384]	; (80025c4 <aiPrintBufferInfo+0x1d8>)
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8002444:	f000 f9f6 	bl	8002834 <lc_print>
 8002448:	e044      	b.n	80024d4 <aiPrintBufferInfo+0xe8>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 800244a:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 800244e:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8002450:	d105      	bne.n	800245e <aiPrintBufferInfo+0x72>
    LC_PRINT("%d,%d,%d)",
 8002452:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8002456:	485c      	ldr	r0, [pc, #368]	; (80025c8 <aiPrintBufferInfo+0x1dc>)
 8002458:	f000 f9ec 	bl	8002834 <lc_print>
 800245c:	e7e0      	b.n	8002420 <aiPrintBufferInfo+0x34>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 800245e:	4619      	mov	r1, r3
 8002460:	485a      	ldr	r0, [pc, #360]	; (80025cc <aiPrintBufferInfo+0x1e0>)
 8002462:	f000 f9e7 	bl	8002834 <lc_print>
 8002466:	e7db      	b.n	8002420 <aiPrintBufferInfo+0x34>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8002468:	2f03      	cmp	r7, #3
 800246a:	d102      	bne.n	8002472 <aiPrintBufferInfo+0x86>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800246c:	4629      	mov	r1, r5
 800246e:	4858      	ldr	r0, [pc, #352]	; (80025d0 <aiPrintBufferInfo+0x1e4>)
 8002470:	e7e8      	b.n	8002444 <aiPrintBufferInfo+0x58>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 8002472:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80025ec <aiPrintBufferInfo+0x200>
 8002476:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
 800247a:	462a      	mov	r2, r5
 800247c:	f109 0102 	add.w	r1, r9, #2
 8002480:	f109 003b 	add.w	r0, r9, #59	; 0x3b
 8002484:	bf18      	it	ne
 8002486:	4649      	movne	r1, r9
 8002488:	f000 f9d4 	bl	8002834 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 800248c:	2f02      	cmp	r7, #2
 800248e:	d121      	bne.n	80024d4 <aiPrintBufferInfo+0xe8>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8002490:	68a3      	ldr	r3, [r4, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d06a      	beq.n	800256c <aiPrintBufferInfo+0x180>
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	07d2      	lsls	r2, r2, #31
 800249a:	d567      	bpl.n	800256c <aiPrintBufferInfo+0x180>
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d064      	beq.n	800256c <aiPrintBufferInfo+0x180>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 80024a2:	f8b3 8002 	ldrh.w	r8, [r3, #2]
      LC_PRINT(" %d:", s_);
 80024a6:	f109 0040 	add.w	r0, r9, #64	; 0x40
      for (int idx=0; idx<max_; idx++) {
 80024aa:	2500      	movs	r5, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80024ac:	ed9f 8a49 	vldr	s16, [pc, #292]	; 80025d4 <aiPrintBufferInfo+0x1e8>
      const int max_ = s_> 4?4:s_;
 80024b0:	4647      	mov	r7, r8
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 80024b2:	f109 0945 	add.w	r9, r9, #69	; 0x45
      LC_PRINT(" %d:", s_);
 80024b6:	4641      	mov	r1, r8
      const int max_ = s_> 4?4:s_;
 80024b8:	2f04      	cmp	r7, #4
 80024ba:	bf28      	it	cs
 80024bc:	2704      	movcs	r7, #4
      LC_PRINT(" %d:", s_);
 80024be:	f000 f9b9 	bl	8002834 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 80024c2:	42bd      	cmp	r5, r7
 80024c4:	db1a      	blt.n	80024fc <aiPrintBufferInfo+0x110>
      LC_PRINT((s_ > max_)?"..":"");
 80024c6:	4b44      	ldr	r3, [pc, #272]	; (80025d8 <aiPrintBufferInfo+0x1ec>)
 80024c8:	1cd8      	adds	r0, r3, #3
 80024ca:	4547      	cmp	r7, r8
 80024cc:	bf38      	it	cc
 80024ce:	4618      	movcc	r0, r3
 80024d0:	f000 f9b0 	bl	8002834 <lc_print>
  if (buffer->data)
 80024d4:	6865      	ldr	r5, [r4, #4]
    LC_PRINT(" @0x%X/%d",
 80024d6:	2101      	movs	r1, #1
 80024d8:	4620      	mov	r0, r4
  if (buffer->data)
 80024da:	2d00      	cmp	r5, #0
 80024dc:	d057      	beq.n	800258e <aiPrintBufferInfo+0x1a2>
    LC_PRINT(" @0x%X/%d",
 80024de:	f003 ff39 	bl	8006354 <ai_buffer_get_size>
 80024e2:	4631      	mov	r1, r6
 80024e4:	f003 ff6a 	bl	80063bc <ai_buffer_get_byte_size>
 80024e8:	4629      	mov	r1, r5
 80024ea:	4602      	mov	r2, r0
 80024ec:	483b      	ldr	r0, [pc, #236]	; (80025dc <aiPrintBufferInfo+0x1f0>)
}
 80024ee:	b003      	add	sp, #12
 80024f0:	ecbd 8b02 	vpop	{d8}
 80024f4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" @0x%X/%d",
 80024f8:	f000 b99c 	b.w	8002834 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80024fc:	68a2      	ldr	r2, [r4, #8]
 80024fe:	2a00      	cmp	r2, #0
 8002500:	d053      	beq.n	80025aa <aiPrintBufferInfo+0x1be>
 8002502:	6813      	ldr	r3, [r2, #0]
 8002504:	f013 0301 	ands.w	r3, r3, #1
 8002508:	d02b      	beq.n	8002562 <aiPrintBufferInfo+0x176>
 800250a:	6852      	ldr	r2, [r2, #4]
 800250c:	2a00      	cmp	r2, #0
 800250e:	d04c      	beq.n	80025aa <aiPrintBufferInfo+0x1be>
 8002510:	6853      	ldr	r3, [r2, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d04d      	beq.n	80025b2 <aiPrintBufferInfo+0x1c6>
 8002516:	8851      	ldrh	r1, [r2, #2]
 8002518:	42a9      	cmp	r1, r5
 800251a:	dd4a      	ble.n	80025b2 <aiPrintBufferInfo+0x1c6>
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002522:	edd3 7a00 	vldr	s15, [r3]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8002526:	2a00      	cmp	r2, #0
 8002528:	d041      	beq.n	80025ae <aiPrintBufferInfo+0x1c2>
 800252a:	8813      	ldrh	r3, [r2, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800252c:	6851      	ldr	r1, [r2, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800252e:	f013 0302 	ands.w	r3, r3, #2
 8002532:	d00f      	beq.n	8002554 <aiPrintBufferInfo+0x168>
 8002534:	b1c1      	cbz	r1, 8002568 <aiPrintBufferInfo+0x17c>
 8002536:	8853      	ldrh	r3, [r2, #2]
 8002538:	42ab      	cmp	r3, r5
 800253a:	dd38      	ble.n	80025ae <aiPrintBufferInfo+0x1c2>
 800253c:	684b      	ldr	r3, [r1, #4]
 800253e:	5d5b      	ldrb	r3, [r3, r5]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8002540:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	4648      	mov	r0, r9
      for (int idx=0; idx<max_; idx++) {
 8002548:	3501      	adds	r5, #1
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 800254a:	ec53 2b17 	vmov	r2, r3, d7
 800254e:	f000 f971 	bl	8002834 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8002552:	e7b6      	b.n	80024c2 <aiPrintBufferInfo+0xd6>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8002554:	b141      	cbz	r1, 8002568 <aiPrintBufferInfo+0x17c>
 8002556:	8852      	ldrh	r2, [r2, #2]
 8002558:	42aa      	cmp	r2, r5
 800255a:	ddf1      	ble.n	8002540 <aiPrintBufferInfo+0x154>
 800255c:	684b      	ldr	r3, [r1, #4]
 800255e:	575b      	ldrsb	r3, [r3, r5]
 8002560:	e7ee      	b.n	8002540 <aiPrintBufferInfo+0x154>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8002562:	eef0 7a48 	vmov.f32	s15, s16
 8002566:	e7eb      	b.n	8002540 <aiPrintBufferInfo+0x154>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8002568:	460b      	mov	r3, r1
 800256a:	e7e9      	b.n	8002540 <aiPrintBufferInfo+0x154>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 800256c:	f018 0f78 	tst.w	r8, #120	; 0x78
 8002570:	d102      	bne.n	8002578 <aiPrintBufferInfo+0x18c>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8002572:	4629      	mov	r1, r5
 8002574:	481a      	ldr	r0, [pc, #104]	; (80025e0 <aiPrintBufferInfo+0x1f4>)
 8002576:	e765      	b.n	8002444 <aiPrintBufferInfo+0x58>
      LC_PRINT(" Q%d.%d",
 8002578:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 800257c:	f3c6 51c0 	ubfx	r1, r6, #23, #1
 8002580:	4818      	ldr	r0, [pc, #96]	; (80025e4 <aiPrintBufferInfo+0x1f8>)
 8002582:	3a40      	subs	r2, #64	; 0x40
 8002584:	4411      	add	r1, r2
 8002586:	1a69      	subs	r1, r5, r1
 8002588:	f000 f954 	bl	8002834 <lc_print>
 800258c:	e7a2      	b.n	80024d4 <aiPrintBufferInfo+0xe8>
    LC_PRINT(" (User Domain)/%d",
 800258e:	f003 fee1 	bl	8006354 <ai_buffer_get_size>
 8002592:	4631      	mov	r1, r6
 8002594:	f003 ff12 	bl	80063bc <ai_buffer_get_byte_size>
 8002598:	4601      	mov	r1, r0
 800259a:	4813      	ldr	r0, [pc, #76]	; (80025e8 <aiPrintBufferInfo+0x1fc>)
}
 800259c:	b003      	add	sp, #12
 800259e:	ecbd 8b02 	vpop	{d8}
 80025a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" (User Domain)/%d",
 80025a6:	f000 b945 	b.w	8002834 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80025aa:	eef0 7a48 	vmov.f32	s15, s16
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80025ae:	2300      	movs	r3, #0
 80025b0:	e7c6      	b.n	8002540 <aiPrintBufferInfo+0x154>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80025b2:	eef0 7a48 	vmov.f32	s15, s16
 80025b6:	e7b6      	b.n	8002526 <aiPrintBufferInfo+0x13a>
 80025b8:	08010d62 	.word	0x08010d62
 80025bc:	08010d6d 	.word	0x08010d6d
 80025c0:	08010d82 	.word	0x08010d82
 80025c4:	08010d86 	.word	0x08010d86
 80025c8:	08010d74 	.word	0x08010d74
 80025cc:	08010d7e 	.word	0x08010d7e
 80025d0:	08010d8e 	.word	0x08010d8e
 80025d4:	00000000 	.word	0x00000000
 80025d8:	08010d5e 	.word	0x08010d5e
 80025dc:	08010dbb 	.word	0x08010dbb
 80025e0:	08010da8 	.word	0x08010da8
 80025e4:	08010db3 	.word	0x08010db3
 80025e8:	08010dc5 	.word	0x08010dc5
 80025ec:	08010d5a 	.word	0x08010d5a

080025f0 <aiPrintNetworkInfo>:


void aiPrintNetworkInfo(const ai_network_report* report)
{
 80025f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025f4:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 80025f6:	4842      	ldr	r0, [pc, #264]	; (8002700 <aiPrintNetworkInfo+0x110>)
 80025f8:	f000 f91c 	bl	8002834 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 80025fc:	4841      	ldr	r0, [pc, #260]	; (8002704 <aiPrintNetworkInfo+0x114>)
 80025fe:	6821      	ldr	r1, [r4, #0]
 8002600:	f000 f918 	bl	8002834 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8002604:	6861      	ldr	r1, [r4, #4]
 8002606:	4840      	ldr	r0, [pc, #256]	; (8002708 <aiPrintNetworkInfo+0x118>)
 8002608:	f000 f914 	bl	8002834 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 800260c:	68a1      	ldr	r1, [r4, #8]
 800260e:	483f      	ldr	r0, [pc, #252]	; (800270c <aiPrintNetworkInfo+0x11c>)
 8002610:	f000 f910 	bl	8002834 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8002614:	68e1      	ldr	r1, [r4, #12]
 8002616:	483e      	ldr	r0, [pc, #248]	; (8002710 <aiPrintNetworkInfo+0x120>)
 8002618:	f000 f90c 	bl	8002834 <lc_print>

  if (report->tool_revision[0])
 800261c:	69a1      	ldr	r1, [r4, #24]
 800261e:	780b      	ldrb	r3, [r1, #0]
 8002620:	b113      	cbz	r3, 8002628 <aiPrintNetworkInfo+0x38>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8002622:	483c      	ldr	r0, [pc, #240]	; (8002714 <aiPrintNetworkInfo+0x124>)
 8002624:	f000 f906 	bl	8002834 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8002628:	7fa3      	ldrb	r3, [r4, #30]
      report->tool_version.micro);
  LC_PRINT(" complexity         : %s MACC\r\n", uint64ToDecimal(report->n_macc));
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
 800262a:	2500      	movs	r5, #0
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 800262c:	7f62      	ldrb	r2, [r4, #29]
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 800262e:	261c      	movs	r6, #28
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8002630:	7f21      	ldrb	r1, [r4, #28]
 8002632:	4839      	ldr	r0, [pc, #228]	; (8002718 <aiPrintNetworkInfo+0x128>)
 8002634:	f000 f8fe 	bl	8002834 <lc_print>
  LC_PRINT(" complexity         : %s MACC\r\n", uint64ToDecimal(report->n_macc));
 8002638:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 800263c:	f000 f8e2 	bl	8002804 <uint64ToDecimal>
 8002640:	4601      	mov	r1, r0
 8002642:	4836      	ldr	r0, [pc, #216]	; (800271c <aiPrintNetworkInfo+0x12c>)
 8002644:	f000 f8f6 	bl	8002834 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8002648:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800264a:	4835      	ldr	r0, [pc, #212]	; (8002720 <aiPrintNetworkInfo+0x130>)
 800264c:	f000 f8f2 	bl	8002834 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8002650:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 8002654:	4833      	ldr	r0, [pc, #204]	; (8002724 <aiPrintNetworkInfo+0x134>)
 8002656:	f000 f8ed 	bl	8002834 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 800265a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800265e:	42ab      	cmp	r3, r5
 8002660:	dc21      	bgt.n	80026a6 <aiPrintNetworkInfo+0xb6>
      _aiPrintDataInfo(idx, buffer);
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8002662:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8002664:	261c      	movs	r6, #28
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8002666:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800266a:	482f      	ldr	r0, [pc, #188]	; (8002728 <aiPrintNetworkInfo+0x138>)
 800266c:	f000 f8e2 	bl	8002834 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8002670:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8002674:	42ab      	cmp	r3, r5
 8002676:	dc1e      	bgt.n	80026b6 <aiPrintNetworkInfo+0xc6>

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    LC_PRINT("  I[%d] ", i);
 8002678:	4e2c      	ldr	r6, [pc, #176]	; (800272c <aiPrintNetworkInfo+0x13c>)
  for (int i=0; i<report->n_inputs; i++) {
 800267a:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 800267c:	271c      	movs	r7, #28
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 800267e:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    LC_PRINT("\r\n");
 8002680:	f106 0809 	add.w	r8, r6, #9
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8002684:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8002686:	482a      	ldr	r0, [pc, #168]	; (8002730 <aiPrintNetworkInfo+0x140>)
 8002688:	f000 f8d4 	bl	8002834 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 800268c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800268e:	42ab      	cmp	r3, r5
 8002690:	dc19      	bgt.n	80026c6 <aiPrintNetworkInfo+0xd6>
  }

  for (int i=0; i<report->n_outputs; i++) {
    LC_PRINT("  O[%d] ", i);
 8002692:	4e28      	ldr	r6, [pc, #160]	; (8002734 <aiPrintNetworkInfo+0x144>)
  for (int i=0; i<report->n_outputs; i++) {
 8002694:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 8002696:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8002698:	f1a6 0803 	sub.w	r8, r6, #3
  for (int i=0; i<report->n_outputs; i++) {
 800269c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800269e:	42ab      	cmp	r3, r5
 80026a0:	dc1f      	bgt.n	80026e2 <aiPrintNetworkInfo+0xf2>
  }
}
 80026a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80026a6:	6d61      	ldr	r1, [r4, #84]	; 0x54
      _aiPrintDataInfo(idx, buffer);
 80026a8:	4628      	mov	r0, r5
 80026aa:	fb06 1105 	mla	r1, r6, r5, r1
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80026ae:	3501      	adds	r5, #1
      _aiPrintDataInfo(idx, buffer);
 80026b0:	f7ff fe58 	bl	8002364 <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80026b4:	e7d1      	b.n	800265a <aiPrintNetworkInfo+0x6a>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80026b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      _aiPrintDataInfo(idx, buffer);
 80026b8:	4628      	mov	r0, r5
 80026ba:	fb06 1105 	mla	r1, r6, r5, r1
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80026be:	3501      	adds	r5, #1
      _aiPrintDataInfo(idx, buffer);
 80026c0:	f7ff fe50 	bl	8002364 <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80026c4:	e7d4      	b.n	8002670 <aiPrintNetworkInfo+0x80>
    LC_PRINT("  I[%d] ", i);
 80026c6:	4629      	mov	r1, r5
 80026c8:	4630      	mov	r0, r6
 80026ca:	f000 f8b3 	bl	8002834 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 80026ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80026d0:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_inputs; i++) {
 80026d4:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->inputs[i]);
 80026d6:	f7ff fe89 	bl	80023ec <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 80026da:	4640      	mov	r0, r8
 80026dc:	f000 f8aa 	bl	8002834 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 80026e0:	e7d4      	b.n	800268c <aiPrintNetworkInfo+0x9c>
    LC_PRINT("  O[%d] ", i);
 80026e2:	4629      	mov	r1, r5
 80026e4:	4630      	mov	r0, r6
 80026e6:	f000 f8a5 	bl	8002834 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 80026ea:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80026ec:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_outputs; i++) {
 80026f0:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->outputs[i]);
 80026f2:	f7ff fe7b 	bl	80023ec <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 80026f6:	4640      	mov	r0, r8
 80026f8:	f000 f89c 	bl	8002834 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 80026fc:	e7ce      	b.n	800269c <aiPrintNetworkInfo+0xac>
 80026fe:	bf00      	nop
 8002700:	08010dd7 	.word	0x08010dd7
 8002704:	08010df1 	.word	0x08010df1
 8002708:	08010e0c 	.word	0x08010e0c
 800270c:	08010e27 	.word	0x08010e27
 8002710:	08010e42 	.word	0x08010e42
 8002714:	08010e5d 	.word	0x08010e5d
 8002718:	08010e78 	.word	0x08010e78
 800271c:	08010e99 	.word	0x08010e99
 8002720:	08010eb9 	.word	0x08010eb9
 8002724:	08010ed4 	.word	0x08010ed4
 8002728:	08010eef 	.word	0x08010eef
 800272c:	08010f28 	.word	0x08010f28
 8002730:	08010f0a 	.word	0x08010f0a
 8002734:	08010f34 	.word	0x08010f34

08002738 <_put_c_buffer_cb>:
};

static void _put_c_buffer_cb(void *user, const char c)
{
  struct _buffer *buffer = (struct _buffer *)user;
  if (buffer->pos < (buffer->size - 1)) {
 8002738:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800273c:	3b01      	subs	r3, #1
 800273e:	429a      	cmp	r2, r3
 8002740:	d207      	bcs.n	8002752 <_put_c_buffer_cb+0x1a>
    buffer->buffer[buffer->pos] = c;
 8002742:	6803      	ldr	r3, [r0, #0]
 8002744:	5499      	strb	r1, [r3, r2]
    buffer->pos++;
    buffer->buffer[buffer->pos] = 0;
 8002746:	2100      	movs	r1, #0
    buffer->pos++;
 8002748:	6883      	ldr	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 800274a:	6802      	ldr	r2, [r0, #0]
    buffer->pos++;
 800274c:	3301      	adds	r3, #1
 800274e:	6083      	str	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 8002750:	54d1      	strb	r1, [r2, r3]
  }
}
 8002752:	4770      	bx	lr

08002754 <_put_c_driver>:
  if (_ioWriteAllowed)
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <_put_c_driver+0x24>)
 8002756:	781b      	ldrb	r3, [r3, #0]
{
 8002758:	b507      	push	{r0, r1, r2, lr}
 800275a:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 800275e:	b13b      	cbz	r3, 8002770 <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8002760:	f04f 33ff 	mov.w	r3, #4294967295
 8002764:	2201      	movs	r2, #1
 8002766:	f10d 0107 	add.w	r1, sp, #7
 800276a:	4804      	ldr	r0, [pc, #16]	; (800277c <_put_c_driver+0x28>)
 800276c:	f7ff fa11 	bl	8001b92 <HAL_UART_Transmit>
}
 8002770:	b003      	add	sp, #12
 8002772:	f85d fb04 	ldr.w	pc, [sp], #4
 8002776:	bf00      	nop
 8002778:	20000008 	.word	0x20000008
 800277c:	2000e8b8 	.word	0x2000e8b8

08002780 <ioRawWriteBuffer>:
 8002780:	b28a      	uxth	r2, r1
 8002782:	4601      	mov	r1, r0
 8002784:	4804      	ldr	r0, [pc, #16]	; (8002798 <ioRawWriteBuffer+0x18>)
{
 8002786:	b508      	push	{r3, lr}
 8002788:	f04f 33ff 	mov.w	r3, #4294967295
 800278c:	f7ff fa01 	bl	8001b92 <HAL_UART_Transmit>
}
 8002790:	fab0 f080 	clz	r0, r0
 8002794:	0940      	lsrs	r0, r0, #5
 8002796:	bd08      	pop	{r3, pc}
 8002798:	2000e8b8 	.word	0x2000e8b8

0800279c <ioRawReadBuffer>:

__STATIC_INLINE bool port_io_read(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 800279c:	b28a      	uxth	r2, r1
 800279e:	4601      	mov	r1, r0
 80027a0:	4804      	ldr	r0, [pc, #16]	; (80027b4 <ioRawReadBuffer+0x18>)
{
 80027a2:	b508      	push	{r3, lr}
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295
 80027a8:	f7ff fa45 	bl	8001c36 <HAL_UART_Receive>
}
 80027ac:	fab0 f080 	clz	r0, r0
 80027b0:	0940      	lsrs	r0, r0, #5
 80027b2:	bd08      	pop	{r3, pc}
 80027b4:	2000e8b8 	.word	0x2000e8b8

080027b8 <ioRawDisableLLWrite>:
  _ioWriteAllowed = false;
 80027b8:	4b01      	ldr	r3, [pc, #4]	; (80027c0 <ioRawDisableLLWrite+0x8>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
}
 80027be:	4770      	bx	lr
 80027c0:	20000008 	.word	0x20000008

080027c4 <_write>:
{
 80027c4:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 80027c6:	1e14      	subs	r4, r2, #0
 80027c8:	da0a      	bge.n	80027e0 <_write+0x1c>
 80027ca:	3801      	subs	r0, #1
 80027cc:	2801      	cmp	r0, #1
 80027ce:	d907      	bls.n	80027e0 <_write+0x1c>
    errno = EBADF;
 80027d0:	f00c fc72 	bl	800f0b8 <__errno>
    return -1;
 80027d4:	f04f 34ff 	mov.w	r4, #4294967295
    errno = EBADF;
 80027d8:	2309      	movs	r3, #9
 80027da:	6003      	str	r3, [r0, #0]
}
 80027dc:	4620      	mov	r0, r4
 80027de:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <_write+0x38>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f9      	beq.n	80027dc <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80027e8:	b2a2      	uxth	r2, r4
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	4804      	ldr	r0, [pc, #16]	; (8002800 <_write+0x3c>)
 80027f0:	f7ff f9cf 	bl	8001b92 <HAL_UART_Transmit>
  return (status ? count : 0);
 80027f4:	2800      	cmp	r0, #0
 80027f6:	bf18      	it	ne
 80027f8:	2400      	movne	r4, #0
 80027fa:	e7ef      	b.n	80027dc <_write+0x18>
 80027fc:	20000008 	.word	0x20000008
 8002800:	2000e8b8 	.word	0x2000e8b8

08002804 <uint64ToDecimal>:
  *(--p) = '\0';
 8002804:	2300      	movs	r3, #0
{ /* see https://www.eevblog.com/forum/microcontrollers/printf-uint64_t-with-arm-gcc/ */
 8002806:	b510      	push	{r4, lr}
  *(--p) = '\0';
 8002808:	4c09      	ldr	r4, [pc, #36]	; (8002830 <uint64ToDecimal+0x2c>)
 800280a:	f804 3f14 	strb.w	r3, [r4, #20]!
  for (bool first = true; v || first; first = false) {
 800280e:	2301      	movs	r3, #1
 8002810:	ea50 0201 	orrs.w	r2, r0, r1
 8002814:	d102      	bne.n	800281c <uint64ToDecimal+0x18>
 8002816:	b90b      	cbnz	r3, 800281c <uint64ToDecimal+0x18>
}
 8002818:	4620      	mov	r0, r4
 800281a:	bd10      	pop	{r4, pc}
    const uint32_t digit = v % 10;
 800281c:	220a      	movs	r2, #10
 800281e:	2300      	movs	r3, #0
 8002820:	f7fd fe74 	bl	800050c <__aeabi_uldivmod>
    const char c = '0' + digit;
 8002824:	3230      	adds	r2, #48	; 0x30
  for (bool first = true; v || first; first = false) {
 8002826:	2300      	movs	r3, #0
    *(--p) = c;
 8002828:	f804 2d01 	strb.w	r2, [r4, #-1]!
  for (bool first = true; v || first; first = false) {
 800282c:	e7f0      	b.n	8002810 <uint64ToDecimal+0xc>
 800282e:	bf00      	nop
 8002830:	200044a8 	.word	0x200044a8

08002834 <lc_print>:
{
 8002834:	b40f      	push	{r0, r1, r2, r3}
 8002836:	b507      	push	{r0, r1, r2, lr}
 8002838:	ab04      	add	r3, sp, #16
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 800283a:	2100      	movs	r1, #0
 800283c:	4805      	ldr	r0, [pc, #20]	; (8002854 <lc_print+0x20>)
{
 800283e:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8002842:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8002844:	f001 fa76 	bl	8003d34 <vlc_print>
}
 8002848:	b003      	add	sp, #12
 800284a:	f85d eb04 	ldr.w	lr, [sp], #4
 800284e:	b004      	add	sp, #16
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	08002755 	.word	0x08002755

08002858 <lc_vsnprint>:

size_t lc_vsnprint(char *buff, size_t size, const char* fmt, va_list vlist)
{
 8002858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  struct _buffer buffer = {buff, size, 0};
 800285a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800285e:	2100      	movs	r1, #0
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 8002860:	4804      	ldr	r0, [pc, #16]	; (8002874 <lc_vsnprint+0x1c>)
  struct _buffer buffer = {buff, size, 0};
 8002862:	9103      	str	r1, [sp, #12]
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 8002864:	a901      	add	r1, sp, #4
 8002866:	f001 fa65 	bl	8003d34 <vlc_print>
  return buffer.pos - 1;
}
 800286a:	9803      	ldr	r0, [sp, #12]
 800286c:	3801      	subs	r0, #1
 800286e:	b005      	add	sp, #20
 8002870:	f85d fb04 	ldr.w	pc, [sp], #4
 8002874:	08002739 	.word	0x08002739

08002878 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8002878:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 800287a:	4d11      	ldr	r5, [pc, #68]	; (80028c0 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 800287c:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 800287e:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8002880:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8002884:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8002888:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 800288c:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 800288e:	f00b fda1 	bl	800e3d4 <malloc>

  /* remember size */
  if (ptr) {
 8002892:	b1a0      	cbz	r0, 80028be <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8002894:	1903      	adds	r3, r0, r4
 8002896:	4a0b      	ldr	r2, [pc, #44]	; (80028c4 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8002898:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 800289a:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 800289c:	682b      	ldr	r3, [r5, #0]
 800289e:	07db      	lsls	r3, r3, #31
 80028a0:	d50c      	bpl.n	80028bc <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 80028a2:	68eb      	ldr	r3, [r5, #12]
 80028a4:	3301      	adds	r3, #1
 80028a6:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 80028a8:	686b      	ldr	r3, [r5, #4]
 80028aa:	4423      	add	r3, r4
 80028ac:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 80028ae:	69ab      	ldr	r3, [r5, #24]
 80028b0:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 80028b2:	696b      	ldr	r3, [r5, #20]
 80028b4:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 80028b6:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 80028b8:	bf88      	it	hi
 80028ba:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 80028bc:	3004      	adds	r0, #4
}
 80028be:	bd38      	pop	{r3, r4, r5, pc}
 80028c0:	200044cc 	.word	0x200044cc
 80028c4:	efdcba98 	.word	0xefdcba98

080028c8 <__wrap_free>:
void __wrap_free(void *ptr)
{
  uint8_t* p;
  uint32_t bytes;

  io_malloc.cfg |= 1 << 2;
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <__wrap_free+0x44>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	f042 0204 	orr.w	r2, r2, #4
{
 80028d0:	b430      	push	{r4, r5}
  io_malloc.cfg |= 1 << 2;
 80028d2:	601a      	str	r2, [r3, #0]

  if (!ptr)
 80028d4:	4602      	mov	r2, r0
 80028d6:	b1b8      	cbz	r0, 8002908 <__wrap_free+0x40>
    return;

  p = (uint8_t*)ptr - 4;
  bytes = *((uint32_t*)p);
 80028d8:	f852 1c04 	ldr.w	r1, [r2, #-4]
  p = (uint8_t*)ptr - 4;
 80028dc:	3804      	subs	r0, #4

  if (*((uint32_t*)(p + 4 + bytes)) == MAGIC_MALLOC_NUMBER) {
 80028de:	4c0c      	ldr	r4, [pc, #48]	; (8002910 <__wrap_free+0x48>)
 80028e0:	5855      	ldr	r5, [r2, r1]
 80028e2:	42a5      	cmp	r5, r4
    *((uint32_t*)(p + 4 + bytes)) = 0;
 80028e4:	bf04      	itt	eq
 80028e6:	2400      	moveq	r4, #0
 80028e8:	5054      	streq	r4, [r2, r1]
  }

  if (io_malloc.cfg & 1UL) {
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	07d2      	lsls	r2, r2, #31
 80028ee:	d508      	bpl.n	8002902 <__wrap_free+0x3a>
    io_malloc.free_req++;
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	3201      	adds	r2, #1
 80028f4:	611a      	str	r2, [r3, #16]
    io_malloc.free += bytes;
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	440a      	add	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]
    io_malloc.used -= bytes;
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	1a52      	subs	r2, r2, r1
 8002900:	619a      	str	r2, [r3, #24]
    if (io_malloc.f_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.f_idx = 0;
#endif
  }
  __real_free(p);
}
 8002902:	bc30      	pop	{r4, r5}
  __real_free(p);
 8002904:	f00b bd6e 	b.w	800e3e4 <free>
}
 8002908:	bc30      	pop	{r4, r5}
 800290a:	4770      	bx	lr
 800290c:	200044cc 	.word	0x200044cc
 8002910:	efdcba98 	.word	0xefdcba98

08002914 <stackMonInit>:
#endif

struct io_stack io_stack;

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 8002914:	b538      	push	{r3, r4, r5, lr}
  memset(&io_stack, 0, sizeof(struct io_stack));
 8002916:	4c11      	ldr	r4, [pc, #68]	; (800295c <stackMonInit+0x48>)
 8002918:	2500      	movs	r5, #0
  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
  io_stack.cstack = cstack;

#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  io_stack.estack = (uint32_t)_estack;
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <stackMonInit+0x4c>)
  memset(&io_stack, 0, sizeof(struct io_stack));
 800291c:	60e5      	str	r5, [r4, #12]
  io_stack.estack = (uint32_t)_estack;
 800291e:	6123      	str	r3, [r4, #16]
  io_stack.bstack = io_stack.estack - msize;
 8002920:	1a9b      	subs	r3, r3, r2
  io_stack.ctrl = ctrl;
 8002922:	6020      	str	r0, [r4, #0]
  io_stack.bstack = io_stack.estack - msize;
 8002924:	61e3      	str	r3, [r4, #28]
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  (void)msize;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8002926:	0783      	lsls	r3, r0, #30
  io_stack.cstack = cstack;
 8002928:	61a1      	str	r1, [r4, #24]
  io_stack.mstack_size = msize;
 800292a:	6162      	str	r2, [r4, #20]
  memset(&io_stack, 0, sizeof(struct io_stack));
 800292c:	e9c4 5501 	strd	r5, r5, [r4, #4]
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8002930:	d511      	bpl.n	8002956 <stackMonInit+0x42>
    LC_PRINT("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 8002932:	480c      	ldr	r0, [pc, #48]	; (8002964 <stackMonInit+0x50>)
 8002934:	f7ff ff7e 	bl	8002834 <lc_print>
    io_stack.stack_mon = false;
  } else
    io_stack.stack_mon = true;

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8002938:	6921      	ldr	r1, [r4, #16]
 800293a:	69a3      	ldr	r3, [r4, #24]
    io_stack.stack_mon = false;
 800293c:	7125      	strb	r5, [r4, #4]
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 800293e:	1ac9      	subs	r1, r1, r3
 8002940:	60e1      	str	r1, [r4, #12]

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 8002942:	b13d      	cbz	r5, 8002954 <stackMonInit+0x40>
 8002944:	6962      	ldr	r2, [r4, #20]
 8002946:	4291      	cmp	r1, r2
 8002948:	d904      	bls.n	8002954 <stackMonInit+0x40>
    LC_PRINT("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 800294a:	4807      	ldr	r0, [pc, #28]	; (8002968 <stackMonInit+0x54>)
 800294c:	f7ff ff72 	bl	8002834 <lc_print>
        (int)io_stack.mstack_size);
    io_stack.stack_mon = false;
 8002950:	2300      	movs	r3, #0
 8002952:	7123      	strb	r3, [r4, #4]
  }
}
 8002954:	bd38      	pop	{r3, r4, r5, pc}
 8002956:	2501      	movs	r5, #1
 8002958:	e7ee      	b.n	8002938 <stackMonInit+0x24>
 800295a:	bf00      	nop
 800295c:	200044e8 	.word	0x200044e8
 8002960:	20080000 	.word	0x20080000
 8002964:	08010f3d 	.word	0x08010f3d
 8002968:	08010f7d 	.word	0x08010f7d

0800296c <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 800296c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002970:	4604      	mov	r4, r0
 8002972:	468a      	mov	sl, r1
  if (!t)
 8002974:	4617      	mov	r7, r2
 8002976:	b382      	cbz	r2, 80029da <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
  uint64_t s  = clks / fcpu;
  uint64_t ms = (clks * 1000) / fcpu;
 8002978:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint32_t fcpu = port_hal_get_cpu_freq();
 800297c:	f7fe fc2e 	bl	80011dc <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 8002980:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 8002982:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8002984:	9001      	str	r0, [sp, #4]
 8002986:	4651      	mov	r1, sl
 8002988:	4620      	mov	r0, r4
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800298a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80029e0 <dwtCyclesToTime+0x74>
  uint64_t s  = clks / fcpu;
 800298e:	f7fd fdbd 	bl	800050c <__aeabi_uldivmod>
 8002992:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8002994:	fba4 0106 	umull	r0, r1, r4, r6
 8002998:	9a01      	ldr	r2, [sp, #4]
 800299a:	2300      	movs	r3, #0
 800299c:	fb06 110a 	mla	r1, r6, sl, r1
 80029a0:	f7fd fdb4 	bl	800050c <__aeabi_uldivmod>
  ms -= (s * 1000);
 80029a4:	fbab 3106 	umull	r3, r1, fp, r6
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80029a8:	9a01      	ldr	r2, [sp, #4]
  ms -= (s * 1000);
 80029aa:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80029ac:	fba4 0109 	umull	r0, r1, r4, r9
 80029b0:	2300      	movs	r3, #0
 80029b2:	fb09 110a 	mla	r1, r9, sl, r1
  us -= (ms * 1000 + s * 1000000);
 80029b6:	fbab 8909 	umull	r8, r9, fp, r9
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80029ba:	f7fd fda7 	bl	800050c <__aeabi_uldivmod>
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 80029be:	60bd      	str	r5, [r7, #8]
 80029c0:	eba0 0008 	sub.w	r0, r0, r8
  us -= (ms * 1000 + s * 1000000);
 80029c4:	fba5 5606 	umull	r5, r6, r5, r6
  t->fcpu = fcpu;
 80029c8:	9a01      	ldr	r2, [sp, #4]
  us -= (ms * 1000 + s * 1000000);
 80029ca:	1b40      	subs	r0, r0, r5
  t->us = us;
 80029cc:	60f8      	str	r0, [r7, #12]
  return 0;
 80029ce:	2000      	movs	r0, #0
  t->s = s;
 80029d0:	e9c7 2b00 	strd	r2, fp, [r7]
}
 80029d4:	b003      	add	sp, #12
 80029d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 80029da:	f04f 30ff 	mov.w	r0, #4294967295
 80029de:	e7f9      	b.n	80029d4 <dwtCyclesToTime+0x68>
 80029e0:	000f4240 	.word	0x000f4240

080029e4 <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 80029e4:	b510      	push	{r4, lr}
 80029e6:	4604      	mov	r4, r0
 80029e8:	ed2d 8b02 	vpush	{d8}
 80029ec:	b082      	sub	sp, #8
 80029ee:	9101      	str	r1, [sp, #4]
  float res;
  float fcpu = (float)port_hal_get_cpu_freq();
 80029f0:	f7fe fbf4 	bl	80011dc <HAL_RCC_GetHCLKFreq>
  res = ((float)clks * (float)1000.0) / fcpu;
 80029f4:	9901      	ldr	r1, [sp, #4]
  float fcpu = (float)port_hal_get_cpu_freq();
 80029f6:	ee08 0a10 	vmov	s16, r0
  res = ((float)clks * (float)1000.0) / fcpu;
 80029fa:	4620      	mov	r0, r4
 80029fc:	f7fd fd40 	bl	8000480 <__aeabi_ul2f>
 8002a00:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002a1c <dwtCyclesToFloatMs+0x38>
 8002a04:	ee07 0a10 	vmov	s14, r0
  float fcpu = (float)port_hal_get_cpu_freq();
 8002a08:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  res = ((float)clks * (float)1000.0) / fcpu;
 8002a0c:	ee27 0a27 	vmul.f32	s0, s14, s15
  return res;
}
 8002a10:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8002a14:	b002      	add	sp, #8
 8002a16:	ecbd 8b02 	vpop	{d8}
 8002a1a:	bd10      	pop	{r4, pc}
 8002a1c:	447a0000 	.word	0x447a0000

08002a20 <getFlashCacheConf>:

#if defined(STM32F7)

  mconf |= MCONF_F7;

  __I uint32_t acr = FLASH->ACR;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <getFlashCacheConf+0x48>)
{
 8002a22:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR;
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	9300      	str	r3, [sp, #0]
  __I uint32_t ccr = SCB->CCR;
 8002a28:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <getFlashCacheConf+0x4c>)
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8002a2e:	9800      	ldr	r0, [sp, #0]
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8002a30:	9b00      	ldr	r3, [sp, #0]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8002a32:	f000 000f 	and.w	r0, r0, #15
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8002a36:	05db      	lsls	r3, r3, #23
    mconf |= MCONF_ART_PREF;
  if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 8002a38:	9b00      	ldr	r3, [sp, #0]
    mconf |= MCONF_ART_PREF;
 8002a3a:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8002a3e:	bf48      	it	mi
 8002a40:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 8002a44:	0599      	lsls	r1, r3, #22
    mconf |= MCONF_ART_EN;

  if (ccr & SCB_CCR_IC_Msk)
 8002a46:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_EN;
 8002a48:	bf48      	it	mi
 8002a4a:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if (ccr & SCB_CCR_IC_Msk)
 8002a4e:	039a      	lsls	r2, r3, #14
    mconf |= MCONF_CORE_ICACHE;
  if (ccr & SCB_CCR_DC_Msk)
 8002a50:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_CORE_ICACHE;
 8002a52:	bf48      	it	mi
 8002a54:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
  if (ccr & SCB_CCR_DC_Msk)
 8002a58:	03db      	lsls	r3, r3, #15
    mconf |= MCONF_CORE_DCACHE;
 8002a5a:	bf48      	it	mi
 8002a5c:	f440 6000 	orrmi.w	r0, r0, #2048	; 0x800
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 8002a60:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8002a64:	b002      	add	sp, #8
 8002a66:	4770      	bx	lr
 8002a68:	40023c00 	.word	0x40023c00
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 8002a70:	b510      	push	{r4, lr}
 8002a72:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 8002a74:	f7fe fbb2 	bl	80011dc <HAL_RCC_GetHCLKFreq>
 8002a78:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 8002a7a:	f7fe fbaf 	bl	80011dc <HAL_RCC_GetHCLKFreq>
 8002a7e:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8002a80:	f7ff ffce 	bl	8002a20 <getFlashCacheConf>
 8002a84:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 8002a86:	f7fd ff73 	bl	8000970 <HAL_GetDEVID>
 8002a8a:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8002a8c:	f7fd ff6a 	bl	8000964 <HAL_GetREVID>
 8002a90:	6120      	str	r0, [r4, #16]
}
 8002a92:	bd10      	pop	{r4, pc}

08002a94 <getSysConf>:
  if (!conf)
 8002a94:	b108      	cbz	r0, 8002a9a <getSysConf+0x6>
 8002a96:	f7ff bfeb 	b.w	8002a70 <getSysConf.part.0>
}
 8002a9a:	4770      	bx	lr

08002a9c <systemSettingLog>:

void systemSettingLog(void)
{
 8002a9c:	b570      	push	{r4, r5, r6, lr}
 8002a9e:	b088      	sub	sp, #32
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	210b      	movs	r1, #11
 8002aa6:	482d      	ldr	r0, [pc, #180]	; (8002b5c <systemSettingLog+0xc0>)
 8002aa8:	f7ff fec4 	bl	8002834 <lc_print>
  if (!conf)
 8002aac:	a803      	add	r0, sp, #12
 8002aae:	f7ff ffdf 	bl	8002a70 <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 8002ab2:	482b      	ldr	r0, [pc, #172]	; (8002b60 <systemSettingLog+0xc4>)
 8002ab4:	f7ff febe 	bl	8002834 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8002ab8:	9906      	ldr	r1, [sp, #24]
  switch (dev_id) {
 8002aba:	f46f 6389 	mvn.w	r3, #1096	; 0x448
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8002abe:	4829      	ldr	r0, [pc, #164]	; (8002b64 <systemSettingLog+0xc8>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8002ac0:	4c29      	ldr	r4, [pc, #164]	; (8002b68 <systemSettingLog+0xcc>)
 8002ac2:	18cb      	adds	r3, r1, r3
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b09      	cmp	r3, #9
 8002ac8:	bf96      	itet	ls
 8002aca:	4a28      	ldrls	r2, [pc, #160]	; (8002b6c <systemSettingLog+0xd0>)
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8002acc:	4a28      	ldrhi	r2, [pc, #160]	; (8002b70 <systemSettingLog+0xd4>)
 8002ace:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 8002ad2:	9b07      	ldr	r3, [sp, #28]
 8002ad4:	f7ff feae 	bl	8002834 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 8002ad8:	4b26      	ldr	r3, [pc, #152]	; (8002b74 <systemSettingLog+0xd8>)
 8002ada:	2107      	movs	r1, #7
 8002adc:	1d5a      	adds	r2, r3, #5
 8002ade:	f103 000a 	add.w	r0, r3, #10
 8002ae2:	f7ff fea7 	bl	8002834 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 8002ae6:	f7fd ff39 	bl	800095c <HAL_GetHalVersion>
 8002aea:	4601      	mov	r1, r0
 8002aec:	4822      	ldr	r0, [pc, #136]	; (8002b78 <systemSettingLog+0xdc>)
 8002aee:	f7ff fea1 	bl	8002834 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8002af2:	9903      	ldr	r1, [sp, #12]
 8002af4:	4821      	ldr	r0, [pc, #132]	; (8002b7c <systemSettingLog+0xe0>)
 8002af6:	fb91 f1f4 	sdiv	r1, r1, r4
 8002afa:	f7ff fe9b 	bl	8002834 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 8002afe:	9904      	ldr	r1, [sp, #16]
 8002b00:	481f      	ldr	r0, [pc, #124]	; (8002b80 <systemSettingLog+0xe4>)
 8002b02:	fb91 f1f4 	sdiv	r1, r1, r4
 8002b06:	f7ff fe95 	bl	8002834 <lc_print>

#if defined(STM32F7)
  uint32_t acr = FLASH->ACR;
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <systemSettingLog+0xe8>)
    return "False";
 8002b0c:	4c1e      	ldr	r4, [pc, #120]	; (8002b88 <systemSettingLog+0xec>)
  uint32_t acr = FLASH->ACR;
 8002b0e:	6819      	ldr	r1, [r3, #0]
    return "False";
 8002b10:	1d65      	adds	r5, r4, #5
  uint32_t ccr = SCB->CCR;
 8002b12:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <systemSettingLog+0xf0>)
    return "False";
 8002b14:	f411 7f80 	tst.w	r1, #256	; 0x100
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8002b18:	f104 00ec 	add.w	r0, r4, #236	; 0xec
  uint32_t ccr = SCB->CCR;
 8002b1c:	695e      	ldr	r6, [r3, #20]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8002b1e:	f001 030f 	and.w	r3, r1, #15
    return "False";
 8002b22:	bf14      	ite	ne
 8002b24:	4622      	movne	r2, r4
 8002b26:	462a      	moveq	r2, r5
 8002b28:	f411 7f00 	tst.w	r1, #512	; 0x200
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	bf14      	ite	ne
 8002b30:	4623      	movne	r3, r4
 8002b32:	462b      	moveq	r3, r5
 8002b34:	f7ff fe7e 	bl	8002834 <lc_print>
    return "False";
 8002b38:	f416 3f00 	tst.w	r6, #131072	; 0x20000
      (int)acr,
      bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
      bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8002b3c:	f204 1029 	addw	r0, r4, #297	; 0x129
    return "False";
 8002b40:	bf14      	ite	ne
 8002b42:	4621      	movne	r1, r4
 8002b44:	4629      	moveq	r1, r5
 8002b46:	f416 3f80 	tst.w	r6, #65536	; 0x10000
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8002b4a:	bf14      	ite	ne
 8002b4c:	4622      	movne	r2, r4
 8002b4e:	462a      	moveq	r2, r5
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8002b50:	b008      	add	sp, #32
 8002b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8002b56:	f7ff be6d 	b.w	8002834 <lc_print>
 8002b5a:	bf00      	nop
 8002b5c:	08010fb6 	.word	0x08010fb6
 8002b60:	08010fd3 	.word	0x08010fd3
 8002b64:	08010ff3 	.word	0x08010ff3
 8002b68:	000f4240 	.word	0x000f4240
 8002b6c:	080115ec 	.word	0x080115ec
 8002b70:	08010fa3 	.word	0x08010fa3
 8002b74:	08011024 	.word	0x08011024
 8002b78:	0801104c 	.word	0x0801104c
 8002b7c:	08011065 	.word	0x08011065
 8002b80:	0801107e 	.word	0x0801107e
 8002b84:	40023c00 	.word	0x40023c00
 8002b88:	08010fab 	.word	0x08010fab
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <_mon_alloc_reset>:

#include <stdlib.h>

#pragma GCC push_options
#pragma GCC optimize ("O0")
static inline void _mon_alloc_reset(void) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
    memset((void *)&io_malloc, 0, sizeof(struct io_malloc));
 8002b94:	221c      	movs	r2, #28
 8002b96:	2100      	movs	r1, #0
 8002b98:	4805      	ldr	r0, [pc, #20]	; (8002bb0 <_mon_alloc_reset+0x20>)
 8002b9a:	f00c fa18 	bl	800efce <memset>
    /* force a call of wrap functions */\
    free(malloc(10));
 8002b9e:	200a      	movs	r0, #10
 8002ba0:	f7ff fe6a 	bl	8002878 <__wrap_malloc>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fe8e 	bl	80028c8 <__wrap_free>
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	200044cc 	.word	0x200044cc

08002bb4 <aiPbCmdSysInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8002bb4:	b530      	push	{r4, r5, lr}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	4605      	mov	r5, r0
 8002bba:	460c      	mov	r4, r1
  UNUSED(param);
  struct mcu_conf conf;
  struct _encode_uint32 array_u32;

  getSysConf(&conf);
 8002bbc:	a803      	add	r0, sp, #12
 8002bbe:	f7ff ff69 	bl	8002a94 <getSysConf>

  resp->which_payload = respMsg_sinfo_tag;
 8002bc2:	230b      	movs	r3, #11
#if defined(HAS_EXTRA_CONF) && HAS_EXTRA_CONF > 0
  array_u32.size = HAS_EXTRA_CONF;
  array_u32.offset = 4;
  array_u32.data = &conf.extra[0];
#else
  array_u32.size = 0;
 8002bc4:	2200      	movs	r2, #0
#endif

  resp->payload.sinfo.extra.funcs.encode = encode_uint32;
  resp->payload.sinfo.extra.arg = &array_u32;

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8002bc6:	4621      	mov	r1, r4
  resp->which_payload = respMsg_sinfo_tag;
 8002bc8:	80e3      	strh	r3, [r4, #6]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8002bca:	4628      	mov	r0, r5
  resp->payload.sinfo.devid = conf.devid;
 8002bcc:	9b06      	ldr	r3, [sp, #24]
  resp->payload.sinfo.extra.arg = &array_u32;
 8002bce:	f8c4 d01c 	str.w	sp, [r4, #28]
  resp->payload.sinfo.devid = conf.devid;
 8002bd2:	60a3      	str	r3, [r4, #8]
  resp->payload.sinfo.sclock = conf.sclk;
 8002bd4:	9b03      	ldr	r3, [sp, #12]
  array_u32.size = 0;
 8002bd6:	9200      	str	r2, [sp, #0]
  resp->payload.sinfo.sclock = conf.sclk;
 8002bd8:	60e3      	str	r3, [r4, #12]
  resp->payload.sinfo.hclock = conf.hclk;
 8002bda:	9b04      	ldr	r3, [sp, #16]
 8002bdc:	6123      	str	r3, [r4, #16]
  resp->payload.sinfo.cache = conf.conf;
 8002bde:	9b05      	ldr	r3, [sp, #20]
 8002be0:	6163      	str	r3, [r4, #20]
  array_u32.offset = 4;
 8002be2:	2304      	movs	r3, #4
  array_u32.data = NULL;
 8002be4:	e9cd 2301 	strd	r2, r3, [sp, #4]
  resp->payload.sinfo.extra.funcs.encode = encode_uint32;
 8002be8:	4b02      	ldr	r3, [pc, #8]	; (8002bf4 <aiPbCmdSysInfo+0x40>)
 8002bea:	61a3      	str	r3, [r4, #24]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8002bec:	f7ff faa8 	bl	8002140 <aiPbMgrSendResp>
}
 8002bf0:	b009      	add	sp, #36	; 0x24
 8002bf2:	bd30      	pop	{r4, r5, pc}
 8002bf4:	08001f63 	.word	0x08001f63

08002bf8 <encode_mempool_to_tensor_desc>:
{
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	461e      	mov	r6, r3
  array_u32->size = 1;
 8002bfc:	2301      	movs	r3, #1
  if (info->name)
 8002bfe:	6808      	ldr	r0, [r1, #0]
{
 8002c00:	460d      	mov	r5, r1
  array_u32->size = 1;
 8002c02:	6033      	str	r3, [r6, #0]
  array_u32->data = (void *)&info->size;
 8002c04:	1d0b      	adds	r3, r1, #4
{
 8002c06:	4614      	mov	r4, r2
  array_u32->data = (void *)&info->size;
 8002c08:	6073      	str	r3, [r6, #4]
  array_u32->offset = 4;
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	60b3      	str	r3, [r6, #8]
  if (info->name)
 8002c0e:	b1a0      	cbz	r0, 8002c3a <encode_mempool_to_tensor_desc+0x42>
    aiPbStrCopy(info->name, &msg->name[0],
 8002c10:	2240      	movs	r2, #64	; 0x40
 8002c12:	4621      	mov	r1, r4
 8002c14:	f7ff fa3a 	bl	800208c <aiPbStrCopy>
  msg->format = AI_BUFFER_FORMAT_U8;
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <encode_mempool_to_tensor_desc+0x48>)
 8002c1a:	6423      	str	r3, [r4, #64]	; 0x40
  msg->size = info->size;
 8002c1c:	686b      	ldr	r3, [r5, #4]
 8002c1e:	6463      	str	r3, [r4, #68]	; 0x44
  msg->n_dims = EnumShapeFmt_F_SHAPE_FMT_BCWH << EnumShapeFmt_F_SHAPE_FMT_POS | array_u32->size;
 8002c20:	6833      	ldr	r3, [r6, #0]
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c26:	64a3      	str	r3, [r4, #72]	; 0x48
  msg->scale = 0.0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	6563      	str	r3, [r4, #84]	; 0x54
  msg->zeropoint = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	65a3      	str	r3, [r4, #88]	; 0x58
  msg->addr = (uint32_t)info->addr;
 8002c30:	68ab      	ldr	r3, [r5, #8]
 8002c32:	65e3      	str	r3, [r4, #92]	; 0x5c
  msg->flags = EnumTensorFlag_TENSOR_FLAG_MEMPOOL;
 8002c34:	2308      	movs	r3, #8
 8002c36:	6623      	str	r3, [r4, #96]	; 0x60
}
 8002c38:	bd70      	pop	{r4, r5, r6, pc}
    msg->name[0] = 0;
 8002c3a:	7010      	strb	r0, [r2, #0]
 8002c3c:	e7ec      	b.n	8002c18 <encode_mempool_to_tensor_desc+0x20>
 8002c3e:	bf00      	nop
 8002c40:	00040440 	.word	0x00040440

08002c44 <fill_tensor_desc_msg>:
{
 8002c44:	b570      	push	{r4, r5, r6, lr}
 8002c46:	460c      	mov	r4, r1
  array_u32->size = buff->shape.size;
 8002c48:	6941      	ldr	r1, [r0, #20]
  array_u32->data = (uint32_t *)buff->shape.data;
 8002c4a:	6986      	ldr	r6, [r0, #24]
  array_u32->offset = sizeof(buff->shape.data[0]);
 8002c4c:	f04f 0c04 	mov.w	ip, #4
  array_u32->size = buff->shape.size;
 8002c50:	f3c1 2117 	ubfx	r1, r1, #8, #24
{
 8002c54:	4605      	mov	r5, r0
 8002c56:	ed2d 8b02 	vpush	{d8}
  array_u32->offset = sizeof(buff->shape.data[0]);
 8002c5a:	f8c2 c008 	str.w	ip, [r2, #8]
{
 8002c5e:	eeb0 8a40 	vmov.f32	s16, s0
  array_u32->size = buff->shape.size;
 8002c62:	6011      	str	r1, [r2, #0]
  array_u32->data = (uint32_t *)buff->shape.data;
 8002c64:	6056      	str	r6, [r2, #4]
  msg->name[0] = 0;
 8002c66:	2200      	movs	r2, #0
 8002c68:	7022      	strb	r2, [r4, #0]
  msg->format = (uint32_t)buff->format;
 8002c6a:	6802      	ldr	r2, [r0, #0]
  msg->flags = flags;
 8002c6c:	6623      	str	r3, [r4, #96]	; 0x60
  if (buff->shape.type == AI_SHAPE_BCWH)
 8002c6e:	7d03      	ldrb	r3, [r0, #20]
  msg->format = (uint32_t)buff->format;
 8002c70:	6422      	str	r2, [r4, #64]	; 0x40
  if (buff->shape.type == AI_SHAPE_BCWH)
 8002c72:	f103 3cff 	add.w	ip, r3, #4294967295
 8002c76:	f1dc 0300 	rsbs	r3, ip, #0
 8002c7a:	eb43 030c 	adc.w	r3, r3, ip
  n_dims = shape_fmt << EnumShapeFmt_F_SHAPE_FMT_POS | buff->shape.size;
 8002c7e:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  msg->n_dims = _shape_to_n_dims(buff);
 8002c82:	64a1      	str	r1, [r4, #72]	; 0x48
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8002c84:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8002c86:	6836      	ldr	r6, [r6, #0]
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8002c88:	f003 fb64 	bl	8006354 <ai_buffer_get_size>
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buff);
 8002c8c:	68ab      	ldr	r3, [r5, #8]
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8002c8e:	4370      	muls	r0, r6
  msg->zeropoint = zero_point;
 8002c90:	9a06      	ldr	r2, [sp, #24]
  msg->scale = scale;
 8002c92:	ed84 8a15 	vstr	s16, [r4, #84]	; 0x54
  msg->size = _get_buffer_element_size(buff);
 8002c96:	6460      	str	r0, [r4, #68]	; 0x44
  msg->zeropoint = zero_point;
 8002c98:	65a2      	str	r2, [r4, #88]	; 0x58
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 8002c9a:	b1a3      	cbz	r3, 8002cc6 <fill_tensor_desc_msg+0x82>
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	07d0      	lsls	r0, r2, #31
 8002ca0:	d511      	bpl.n	8002cc6 <fill_tensor_desc_msg+0x82>
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	b17b      	cbz	r3, 8002cc6 <fill_tensor_desc_msg+0x82>
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	b192      	cbz	r2, 8002cd0 <fill_tensor_desc_msg+0x8c>
 8002caa:	8859      	ldrh	r1, [r3, #2]
 8002cac:	b181      	cbz	r1, 8002cd0 <fill_tensor_desc_msg+0x8c>
 8002cae:	6811      	ldr	r1, [r2, #0]
 8002cb0:	6809      	ldr	r1, [r1, #0]
 8002cb2:	6561      	str	r1, [r4, #84]	; 0x54
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 8002cb4:	8819      	ldrh	r1, [r3, #0]
 8002cb6:	0789      	lsls	r1, r1, #30
 8002cb8:	d50c      	bpl.n	8002cd4 <fill_tensor_desc_msg+0x90>
 8002cba:	b19a      	cbz	r2, 8002ce4 <fill_tensor_desc_msg+0xa0>
 8002cbc:	885b      	ldrh	r3, [r3, #2]
 8002cbe:	b10b      	cbz	r3, 8002cc4 <fill_tensor_desc_msg+0x80>
 8002cc0:	6853      	ldr	r3, [r2, #4]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	65a3      	str	r3, [r4, #88]	; 0x58
  msg->addr = (uint32_t)buff->data;
 8002cc6:	686b      	ldr	r3, [r5, #4]
}
 8002cc8:	ecbd 8b02 	vpop	{d8}
  msg->addr = (uint32_t)buff->data;
 8002ccc:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8002cce:	bd70      	pop	{r4, r5, r6, pc}
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	e7ee      	b.n	8002cb2 <fill_tensor_desc_msg+0x6e>
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 8002cd4:	b132      	cbz	r2, 8002ce4 <fill_tensor_desc_msg+0xa0>
 8002cd6:	885b      	ldrh	r3, [r3, #2]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f3      	beq.n	8002cc4 <fill_tensor_desc_msg+0x80>
 8002cdc:	6853      	ldr	r3, [r2, #4]
 8002cde:	f993 3000 	ldrsb.w	r3, [r3]
 8002ce2:	e7ef      	b.n	8002cc4 <fill_tensor_desc_msg+0x80>
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	e7ed      	b.n	8002cc4 <fill_tensor_desc_msg+0x80>

08002ce8 <encode_ai_buffer_to_tensor_desc>:
{
 8002ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cea:	460c      	mov	r4, r1
 8002cec:	4611      	mov	r1, r2
 8002cee:	461a      	mov	r2, r3
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8002cf0:	68e3      	ldr	r3, [r4, #12]
  ai_buffer *buff = &((ai_buffer *)(info->buffer))[index];
 8002cf2:	6825      	ldr	r5, [r4, #0]
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	ed94 0a02 	vldr	s0, [r4, #8]
 8002cfa:	6863      	ldr	r3, [r4, #4]
 8002cfc:	241c      	movs	r4, #28
 8002cfe:	fb04 5000 	mla	r0, r4, r0, r5
 8002d02:	f7ff ff9f 	bl	8002c44 <fill_tensor_desc_msg>
}
 8002d06:	b003      	add	sp, #12
 8002d08:	bd30      	pop	{r4, r5, pc}
	...

08002d0c <cyclesCounterStart>:
  port_dwt_init();
#endif /* !USE_SYSTICK_ONLY */
}

__STATIC_INLINE void cyclesCounterStart(void)
{
 8002d0c:	b508      	push	{r3, lr}
#else
#if USE_CORE_CLOCK_ONLY == 1
  port_dwt_reset();
  cyclesCount.dwt_start = port_dwt_get_cycles();
#else
  cyclesCount.tick_start = port_hal_get_tick();
 8002d0e:	f7fd fe0d 	bl	800092c <HAL_GetTick>
 8002d12:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <cyclesCounterStart+0x18>)
  port_dwt_reset();
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <cyclesCounterStart+0x1c>)
 8002d16:	2100      	movs	r1, #0
  cyclesCount.tick_start = port_hal_get_tick();
 8002d18:	6098      	str	r0, [r3, #8]
  port_dwt_reset();
 8002d1a:	6051      	str	r1, [r2, #4]
  cyclesCount.dwt_start = port_dwt_get_cycles();
 8002d1c:	6852      	ldr	r2, [r2, #4]
 8002d1e:	605a      	str	r2, [r3, #4]
#endif
#endif
}
 8002d20:	bd08      	pop	{r3, pc}
 8002d22:	bf00      	nop
 8002d24:	200044c0 	.word	0x200044c0
 8002d28:	e0001000 	.word	0xe0001000

08002d2c <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8002d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(port_dwt_get_cycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <cyclesCounterEnd+0x44>)
 8002d30:	4d10      	ldr	r5, [pc, #64]	; (8002d74 <cyclesCounterEnd+0x48>)
 8002d32:	685c      	ldr	r4, [r3, #4]
 8002d34:	686b      	ldr	r3, [r5, #4]
 8002d36:	1ae4      	subs	r4, r4, r3
 8002d38:	2300      	movs	r3, #0
 8002d3a:	9301      	str	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8002d3c:	f7fd fdf6 	bl	800092c <HAL_GetTick>
 8002d40:	68aa      	ldr	r2, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 8002d42:	9b01      	ldr	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8002d44:	1a80      	subs	r0, r0, r2
  if (tick_e > cyclesCount.dwt_max) {
 8002d46:	682a      	ldr	r2, [r5, #0]
 8002d48:	4290      	cmp	r0, r2
 8002d4a:	d90c      	bls.n	8002d66 <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f7fd fbdd 	bl	800050c <__aeabi_uldivmod>
 8002d52:	f04f 33ff 	mov.w	r3, #4294967295
 8002d56:	fba0 0303 	umull	r0, r3, r0, r3
 8002d5a:	1900      	adds	r0, r0, r4
 8002d5c:	eba3 0301 	sub.w	r3, r3, r1
 8002d60:	4604      	mov	r4, r0
 8002d62:	f143 0300 	adc.w	r3, r3, #0
  }
  return dwt_e;
#endif
#endif
}
 8002d66:	4620      	mov	r0, r4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	b003      	add	sp, #12
 8002d6c:	bd30      	pop	{r4, r5, pc}
 8002d6e:	bf00      	nop
 8002d70:	e0001000 	.word	0xe0001000
 8002d74:	200044c0 	.word	0x200044c0

08002d78 <_get_buffer_size>:
{
 8002d78:	b538      	push	{r3, r4, r5, lr}
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8002d7a:	6983      	ldr	r3, [r0, #24]
{
 8002d7c:	4604      	mov	r4, r0
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8002d7e:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8002d80:	681d      	ldr	r5, [r3, #0]
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8002d82:	f003 fae7 	bl	8006354 <ai_buffer_get_size>
 8002d86:	6821      	ldr	r1, [r4, #0]
 8002d88:	4368      	muls	r0, r5
}
 8002d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 8002d8e:	f003 bb15 	b.w	80063bc <ai_buffer_get_byte_size>
	...

08002d94 <aiExecCtx>:
{
 8002d94:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 8002d98:	4606      	mov	r6, r0
  if (!nn_name[0]) {
 8002d9a:	7800      	ldrb	r0, [r0, #0]
 8002d9c:	b958      	cbnz	r0, 8002db6 <aiExecCtx+0x22>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 8002d9e:	2901      	cmp	r1, #1
 8002da0:	d807      	bhi.n	8002db2 <aiExecCtx+0x1e>
 8002da2:	22a0      	movs	r2, #160	; 0xa0
 8002da4:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <aiExecCtx+0x6c>)
 8002da6:	4351      	muls	r1, r2
 8002da8:	5858      	ldr	r0, [r3, r1]
 8002daa:	185a      	adds	r2, r3, r1
      cur = &net_exec_ctx[pos];
 8002dac:	2800      	cmp	r0, #0
 8002dae:	bf18      	it	ne
 8002db0:	4610      	movne	r0, r2
}
 8002db2:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
 8002db6:	4d12      	ldr	r5, [pc, #72]	; (8002e00 <aiExecCtx+0x6c>)
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 8002db8:	f04f 0900 	mov.w	r9, #0
 8002dbc:	462c      	mov	r4, r5
      if (cur->handle &&
 8002dbe:	682b      	ldr	r3, [r5, #0]
 8002dc0:	b1bb      	cbz	r3, 8002df2 <aiExecCtx+0x5e>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8002dc2:	f8d5 a008 	ldr.w	sl, [r5, #8]
 8002dc6:	4650      	mov	r0, sl
 8002dc8:	f7fd fa8a 	bl	80002e0 <strlen>
 8002dcc:	4680      	mov	r8, r0
 8002dce:	4630      	mov	r0, r6
 8002dd0:	f7fd fa86 	bl	80002e0 <strlen>
      if (cur->handle &&
 8002dd4:	4580      	cmp	r8, r0
 8002dd6:	d10c      	bne.n	8002df2 <aiExecCtx+0x5e>
          (strncmp(cur->report.model_name, nn_name,
 8002dd8:	4642      	mov	r2, r8
 8002dda:	4631      	mov	r1, r6
 8002ddc:	4650      	mov	r0, sl
 8002dde:	f00c f8fe 	bl	800efde <strncmp>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8002de2:	b930      	cbnz	r0, 8002df2 <aiExecCtx+0x5e>
      cur = &net_exec_ctx[idx];
 8002de4:	23a0      	movs	r3, #160	; 0xa0
 8002de6:	fb03 4009 	mla	r0, r3, r9, r4
 8002dea:	e7e2      	b.n	8002db2 <aiExecCtx+0x1e>
 8002dec:	f04f 0901 	mov.w	r9, #1
 8002df0:	e7e5      	b.n	8002dbe <aiExecCtx+0x2a>
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 8002df2:	35a0      	adds	r5, #160	; 0xa0
 8002df4:	f1b9 0f00 	cmp.w	r9, #0
 8002df8:	d0f8      	beq.n	8002dec <aiExecCtx+0x58>
  struct ai_network_exec_ctx *cur = NULL;
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	e7d9      	b.n	8002db2 <aiExecCtx+0x1e>
 8002dfe:	bf00      	nop
 8002e00:	20004558 	.word	0x20004558

08002e04 <send_ai_io_tensor.isra.0>:
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8002e04:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8002e08:	461d      	mov	r5, r3
 8002e0a:	b08b      	sub	sp, #44	; 0x2c
  resp->which_payload = respMsg_tensor_tag;
 8002e0c:	2311      	movs	r3, #17
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8002e0e:	460c      	mov	r4, r1
 8002e10:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8002e14:	f10d 0a0c 	add.w	sl, sp, #12
  resp->which_payload = respMsg_tensor_tag;
 8002e18:	80cb      	strh	r3, [r1, #6]
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8002e1a:	4606      	mov	r6, r0
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8002e1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8002e1e:	4690      	mov	r8, r2
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8002e20:	3108      	adds	r1, #8
 8002e22:	4652      	mov	r2, sl
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	4628      	mov	r0, r5
 8002e28:	464b      	mov	r3, r9
 8002e2a:	f7ff ff0b 	bl	8002c44 <fill_tensor_desc_msg>
  resp->payload.tensor.desc.dims.funcs.encode = encode_uint32;
 8002e2e:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <send_ai_io_tensor.isra.0+0x6c>)
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 8002e30:	f419 7f00 	tst.w	r9, #512	; 0x200
  resp->payload.tensor.desc.dims.arg = &array_u32;
 8002e34:	e9c4 3a15 	strd	r3, sl, [r4, #84]	; 0x54
  resp->payload.tensor.data.addr = (uint32_t)buffer->data;
 8002e38:	686b      	ldr	r3, [r5, #4]
 8002e3a:	6763      	str	r3, [r4, #116]	; 0x74
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 8002e3c:	d115      	bne.n	8002e6a <send_ai_io_tensor.isra.0+0x66>
    resp->payload.tensor.data.size = _get_buffer_size(buffer);
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f7ff ff9a 	bl	8002d78 <_get_buffer_size>
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8002e44:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002e46:	2200      	movs	r2, #0
    resp->payload.tensor.data.size = 0;
 8002e48:	6720      	str	r0, [r4, #112]	; 0x70
  aiPbMgrSendResp(req, resp, state);
 8002e4a:	4621      	mov	r1, r4
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8002e4c:	e9cd 3208 	strd	r3, r2, [sp, #32]
  resp->payload.tensor.data.datas.funcs.encode = &encode_data_cb;
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <send_ai_io_tensor.isra.0+0x70>)
 8002e52:	67a3      	str	r3, [r4, #120]	; 0x78
  resp->payload.tensor.data.datas.arg = (void *)&data;
 8002e54:	ab06      	add	r3, sp, #24
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 8002e56:	e9cd 2006 	strd	r2, r0, [sp, #24]
  aiPbMgrSendResp(req, resp, state);
 8002e5a:	4642      	mov	r2, r8
 8002e5c:	4630      	mov	r0, r6
  resp->payload.tensor.data.datas.arg = (void *)&data;
 8002e5e:	67e3      	str	r3, [r4, #124]	; 0x7c
  aiPbMgrSendResp(req, resp, state);
 8002e60:	f7ff f96e 	bl	8002140 <aiPbMgrSendResp>
}
 8002e64:	b00b      	add	sp, #44	; 0x2c
 8002e66:	e8bd 8770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, pc}
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	e7ea      	b.n	8002e44 <send_ai_io_tensor.isra.0+0x40>
 8002e6e:	bf00      	nop
 8002e70:	08001f63 	.word	0x08001f63
 8002e74:	08001fbb 	.word	0x08001fbb

08002e78 <aiOnExecNode_cb>:
    const ai_observer_node *node) {
 8002e78:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8002e7c:	4688      	mov	r8, r1
 8002e7e:	4615      	mov	r5, r2
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8002e80:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
    const ai_observer_node *node) {
 8002e84:	ed2d 8b02 	vpush	{d8}
 8002e88:	b095      	sub	sp, #84	; 0x54
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 8002e8a:	f7ff ff4f 	bl	8002d2c <cyclesCounterEnd>
  if (flags & AI_OBSERVER_PRE_EVT) {
 8002e8e:	f018 0602 	ands.w	r6, r8, #2
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 8002e92:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if (flags & AI_OBSERVER_PRE_EVT) {
 8002e96:	d012      	beq.n	8002ebe <aiOnExecNode_cb+0x46>
    obs_ctx->n_cb_in++;
 8002e98:	6863      	ldr	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8002e9a:	f418 7f80 	tst.w	r8, #256	; 0x100
    obs_ctx->n_cb_in++;
 8002e9e:	f103 0301 	add.w	r3, r3, #1
 8002ea2:	6063      	str	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8002ea4:	d003      	beq.n	8002eae <aiOnExecNode_cb+0x36>
      obs_ctx->tnodes = ts;
 8002ea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002eaa:	e9c4 2308 	strd	r2, r3, [r4, #32]
  cyclesCounterStart();
 8002eae:	f7ff ff2d 	bl	8002d0c <cyclesCounterStart>
}
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	b015      	add	sp, #84	; 0x54
 8002eb6:	ecbd 8b02 	vpop	{d8}
 8002eba:	e8bd 8770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, pc}
  } else if (flags & AI_OBSERVER_POST_EVT) {
 8002ebe:	f018 0f04 	tst.w	r8, #4
 8002ec2:	d0f4      	beq.n	8002eae <aiOnExecNode_cb+0x36>
    cyclesCounterStart();
 8002ec4:	f7ff ff22 	bl	8002d0c <cyclesCounterStart>
    obs_ctx->tnodes += ts;
 8002ec8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002ecc:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8002ed0:	181b      	adds	r3, r3, r0
 8002ed2:	eb42 0201 	adc.w	r2, r2, r1
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 8002ed6:	f418 7f00 	tst.w	r8, #512	; 0x200
    type |= (node->type & (ai_u16)0x7FFF);
 8002eda:	f8b5 8002 	ldrh.w	r8, [r5, #2]
    obs_ctx->tnodes += ts;
 8002ede:	e9c4 3208 	strd	r3, r2, [r4, #32]
    obs_ctx->n_cb_out++;
 8002ee2:	68a3      	ldr	r3, [r4, #8]
    type |= (node->type & (ai_u16)0x7FFF);
 8002ee4:	f3c8 080e 	ubfx	r8, r8, #0, #15
    obs_ctx->n_cb_out++;
 8002ee8:	f103 0301 	add.w	r3, r3, #1
 8002eec:	60a3      	str	r3, [r4, #8]
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 8002eee:	bf0c      	ite	eq
 8002ef0:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8002ef4:	f04f 7340 	movne.w	r3, #50331648	; 0x3000000
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8002ef8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    type |= (node->type & (ai_u16)0x7FFF);
 8002efc:	ea48 0803 	orr.w	r8, r8, r3
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8002f00:	f7ff fd70 	bl	80029e4 <dwtCyclesToFloatMs>
 8002f04:	ab04      	add	r3, sp, #16
 8002f06:	2202      	movs	r2, #2
 8002f08:	ed8d 0a07 	vstr	s0, [sp, #28]
 8002f0c:	930a      	str	r3, [sp, #40]	; 0x28
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	9209      	str	r2, [sp, #36]	; 0x24
 8002f14:	9608      	str	r6, [sp, #32]
 8002f16:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8002f1a:	ab07      	add	r3, sp, #28
 8002f1c:	9302      	str	r3, [sp, #8]
 8002f1e:	88ab      	ldrh	r3, [r5, #4]
 8002f20:	e9cd 8300 	strd	r8, r3, [sp]
 8002f24:	4633      	mov	r3, r6
 8002f26:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8002f2a:	f7ff f9cf 	bl	80022cc <aiPbMgrSendOperator>
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 8002f2e:	68eb      	ldr	r3, [r5, #12]
 8002f30:	881a      	ldrh	r2, [r3, #0]
 8002f32:	2a01      	cmp	r2, #1
 8002f34:	d910      	bls.n	8002f58 <aiOnExecNode_cb+0xe0>
 8002f36:	f8d3 9004 	ldr.w	r9, [r3, #4]
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8002f3a:	46b2      	mov	sl, r6
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8002f3c:	eddf 8a3c 	vldr	s17, [pc, #240]	; 8003030 <aiOnExecNode_cb+0x1b8>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8002f40:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8002f44:	429e      	cmp	r6, r3
 8002f46:	d207      	bcs.n	8002f58 <aiOnExecNode_cb+0xe0>
 8002f48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8002f4c:	b123      	cbz	r3, 8002f58 <aiOnExecNode_cb+0xe0>
 8002f4e:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 8002f52:	f1b8 0f00 	cmp.w	r8, #0
 8002f56:	d109      	bne.n	8002f6c <aiOnExecNode_cb+0xf4>
    obs_ctx->tcom += cyclesCounterEnd();
 8002f58:	f7ff fee8 	bl	8002d2c <cyclesCounterEnd>
 8002f5c:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8002f60:	1818      	adds	r0, r3, r0
 8002f62:	eb42 0101 	adc.w	r1, r2, r1
 8002f66:	e9c4 0106 	strd	r0, r1, [r4, #24]
 8002f6a:	e7a0      	b.n	8002eae <aiOnExecNode_cb+0x36>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8002f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d04a      	beq.n	800300a <aiOnExecNode_cb+0x192>
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	2a00      	cmp	r2, #0
 8002f78:	d047      	beq.n	800300a <aiOnExecNode_cb+0x192>
 8002f7a:	8859      	ldrh	r1, [r3, #2]
 8002f7c:	2900      	cmp	r1, #0
 8002f7e:	d044      	beq.n	800300a <aiOnExecNode_cb+0x192>
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	ed92 8a00 	vldr	s16, [r2]
      if (AI_TENSOR_FMT_GET_SIGN(t))
 8002f86:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8002f8a:	6802      	ldr	r2, [r0, #0]
 8002f8c:	f412 0500 	ands.w	r5, r2, #8388608	; 0x800000
 8002f90:	d03e      	beq.n	8003010 <aiOnExecNode_cb+0x198>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d047      	beq.n	8003026 <aiOnExecNode_cb+0x1ae>
 8002f96:	6859      	ldr	r1, [r3, #4]
 8002f98:	2900      	cmp	r1, #0
 8002f9a:	d046      	beq.n	800302a <aiOnExecNode_cb+0x1b2>
 8002f9c:	885d      	ldrh	r5, [r3, #2]
 8002f9e:	b115      	cbz	r5, 8002fa6 <aiOnExecNode_cb+0x12e>
 8002fa0:	684b      	ldr	r3, [r1, #4]
 8002fa2:	f993 5000 	ldrsb.w	r5, [r3]
      ai_buffer buffer =
 8002fa6:	68c3      	ldr	r3, [r0, #12]
          AI_BUFFER_INIT(
 8002fa8:	2101      	movs	r1, #1
 8002faa:	4640      	mov	r0, r8
      ai_buffer buffer =
 8002fac:	920d      	str	r2, [sp, #52]	; 0x34
 8002fae:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8002fb2:	e9cd 3a0e 	strd	r3, sl, [sp, #56]	; 0x38
          AI_BUFFER_INIT(
 8002fb6:	f003 f9a3 	bl	8006300 <get_tensor_size>
      ai_buffer buffer =
 8002fba:	f898 3008 	ldrb.w	r3, [r8, #8]
 8002fbe:	9011      	str	r0, [sp, #68]	; 0x44
 8002fc0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
          AI_BUFFER_INIT(
 8002fc4:	f8d8 3008 	ldr.w	r3, [r8, #8]
      ai_buffer buffer =
 8002fc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
          AI_BUFFER_INIT(
 8002fca:	f3c3 2317 	ubfx	r3, r3, #8, #24
      ai_buffer buffer =
 8002fce:	f363 221f 	bfi	r2, r3, #8, #24
 8002fd2:	9212      	str	r2, [sp, #72]	; 0x48
 8002fd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
      if (obs_ctx->no_data)
 8002fd8:	7d22      	ldrb	r2, [r4, #20]
      ai_buffer buffer =
 8002fda:	9313      	str	r3, [sp, #76]	; 0x4c
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1U))
 8002fdc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8002fe0:	3b01      	subs	r3, #1
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8002fe2:	429e      	cmp	r6, r3
 8002fe4:	bf14      	ite	ne
 8002fe6:	2304      	movne	r3, #4
 8002fe8:	f44f 7382 	moveq.w	r3, #260	; 0x104
      if (obs_ctx->no_data)
 8002fec:	b10a      	cbz	r2, 8002ff2 <aiOnExecNode_cb+0x17a>
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8002fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8002ff2:	eeb0 0a48 	vmov.f32	s0, s16
 8002ff6:	2202      	movs	r2, #2
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8002ff8:	3601      	adds	r6, #1
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8002ffa:	e9cd 3500 	strd	r3, r5, [sp]
 8002ffe:	ab0d      	add	r3, sp, #52	; 0x34
 8003000:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8003004:	f7ff fefe 	bl	8002e04 <send_ai_io_tensor.isra.0>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8003008:	e79a      	b.n	8002f40 <aiOnExecNode_cb+0xc8>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 800300a:	eeb0 8a68 	vmov.f32	s16, s17
 800300e:	e7ba      	b.n	8002f86 <aiOnExecNode_cb+0x10e>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0c8      	beq.n	8002fa6 <aiOnExecNode_cb+0x12e>
 8003014:	6859      	ldr	r1, [r3, #4]
 8003016:	2900      	cmp	r1, #0
 8003018:	d0c5      	beq.n	8002fa6 <aiOnExecNode_cb+0x12e>
 800301a:	885b      	ldrh	r3, [r3, #2]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0c2      	beq.n	8002fa6 <aiOnExecNode_cb+0x12e>
 8003020:	684b      	ldr	r3, [r1, #4]
 8003022:	781d      	ldrb	r5, [r3, #0]
 8003024:	e7bf      	b.n	8002fa6 <aiOnExecNode_cb+0x12e>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003026:	461d      	mov	r5, r3
 8003028:	e7bd      	b.n	8002fa6 <aiOnExecNode_cb+0x12e>
 800302a:	460d      	mov	r5, r1
 800302c:	e7bb      	b.n	8002fa6 <aiOnExecNode_cb+0x12e>
 800302e:	bf00      	nop
 8003030:	00000000 	.word	0x00000000

08003034 <aiPbCmdNNInfo>:

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8003034:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8003038:	4606      	mov	r6, r0
 800303a:	b0a2      	sub	sp, #136	; 0x88
 800303c:	460c      	mov	r4, r1
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 800303e:	300c      	adds	r0, #12
 8003040:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8003044:	f7ff fea6 	bl	8002d94 <aiExecCtx>
  if (ctx)
 8003048:	4605      	mov	r5, r0
 800304a:	2800      	cmp	r0, #0
 800304c:	f000 80d6 	beq.w	80031fc <aiPbCmdNNInfo+0x1c8>
  resp->which_payload = respMsg_minfo_tag;
 8003050:	2316      	movs	r3, #22
    send_model_info(req, resp, EnumState_S_IDLE, &ctx->report,
 8003052:	f890 9090 	ldrb.w	r9, [r0, #144]	; 0x90
 8003056:	f890 8091 	ldrb.w	r8, [r0, #145]	; 0x91
  stai_runtime_get_info(&rt_info);
 800305a:	a81c      	add	r0, sp, #112	; 0x70
  resp->which_payload = respMsg_minfo_tag;
 800305c:	80e3      	strh	r3, [r4, #6]
  stai_runtime_get_info(&rt_info);
 800305e:	f003 f91f 	bl	80062a0 <stai_runtime_get_info>
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 8003062:	2240      	movs	r2, #64	; 0x40
 8003064:	f104 0108 	add.w	r1, r4, #8
 8003068:	68a8      	ldr	r0, [r5, #8]
 800306a:	f7ff f80f 	bl	800208c <aiPbStrCopy>
  aiPbStrCopy(nn->model_signature, &resp->payload.minfo.signature[0],
 800306e:	2240      	movs	r2, #64	; 0x40
 8003070:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8003074:	68e8      	ldr	r0, [r5, #12]
 8003076:	f7ff f809 	bl	800208c <aiPbStrCopy>
  aiPbStrCopy(nn->compile_datetime, &resp->payload.minfo.compile_datetime[0],
 800307a:	2240      	movs	r2, #64	; 0x40
 800307c:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 8003080:	6968      	ldr	r0, [r5, #20]
 8003082:	f7ff f803 	bl	800208c <aiPbStrCopy>
  resp->payload.minfo.runtime_version = _ai_version_to_uint32((const ai_platform_version *)&rt_info.runtime_version);
 8003086:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003088:	ba1b      	rev	r3, r3
 800308a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 800308e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003090:	ba1b      	rev	r3, r3
 8003092:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 8003096:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
  if (id == STAI_COMPILER_ID_GCC) {
 800309a:	2b01      	cmp	r3, #1
 800309c:	d00f      	beq.n	80030be <aiPbCmdNNInfo+0x8a>
  else if (id == STAI_COMPILER_ID_GHS) {
 800309e:	2b10      	cmp	r3, #16
 80030a0:	f000 80a0 	beq.w	80031e4 <aiPbCmdNNInfo+0x1b0>
  else if  (id == STAI_COMPILER_ID_HIGHTECH) {
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	f000 809f 	beq.w	80031e8 <aiPbCmdNNInfo+0x1b4>
  else if  (id == STAI_COMPILER_ID_IAR) {
 80030aa:	2b30      	cmp	r3, #48	; 0x30
 80030ac:	f000 809e 	beq.w	80031ec <aiPbCmdNNInfo+0x1b8>
  else if  (id == STAI_COMPILER_ID_KEIL_AC6) {
 80030b0:	2b50      	cmp	r3, #80	; 0x50
 80030b2:	f000 809d 	beq.w	80031f0 <aiPbCmdNNInfo+0x1bc>
    return EnumTools_AI_MDK_5;
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	bf14      	ite	ne
 80030ba:	2300      	movne	r3, #0
 80030bc:	2303      	moveq	r3, #3
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 80030be:	041b      	lsls	r3, r3, #16
  aiPbStrCopy(rt_info.compiler_desc, &resp->payload.minfo.runtime_desc[0],
 80030c0:	2240      	movs	r2, #64	; 0x40
 80030c2:	f504 718a 	add.w	r1, r4, #276	; 0x114
 80030c6:	9821      	ldr	r0, [sp, #132]	; 0x84
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	64a3      	str	r3, [r4, #72]	; 0x48
  aiPbStrCopy(rt_info.compiler_desc, &resp->payload.minfo.runtime_desc[0],
 80030ce:	f7fe ffdd 	bl	800208c <aiPbStrCopy>
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 80030d2:	f1b9 0f00 	cmp.w	r9, #0
  struct _encode_tensor_desc tensor_ins = {
 80030d6:	a914      	add	r1, sp, #80	; 0x50
 80030d8:	484c      	ldr	r0, [pc, #304]	; (800320c <aiPbCmdNNInfo+0x1d8>)
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 80030da:	f04f 0e00 	mov.w	lr, #0
  struct _encode_tensor_desc tensor_ins = {
 80030de:	9104      	str	r1, [sp, #16]
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 80030e0:	494b      	ldr	r1, [pc, #300]	; (8003210 <aiPbCmdNNInfo+0x1dc>)
  struct _encode_tensor_desc tensor_ins = {
 80030e2:	9002      	str	r0, [sp, #8]
  struct _encode_tensor_desc tensor_outs = {
 80030e4:	9005      	str	r0, [sp, #20]
 80030e6:	a818      	add	r0, sp, #96	; 0x60
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 80030e8:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 80030ec:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
  struct _encode_tensor_desc tensor_outs = {
 80030f0:	9007      	str	r0, [sp, #28]
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 80030f2:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
 80030f6:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8
  resp->payload.minfo.n_nodes = nn->n_nodes;
 80030fa:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 80030fe:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8003100:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003104:	f240 4301 	movw	r3, #1025	; 0x401
 8003108:	bf08      	it	eq
 800310a:	2301      	moveq	r3, #1
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 800310c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
      &encode_ai_buffer_to_tensor_desc, nn->n_inputs, &tensor_desc_ins };
 8003110:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003114:	2300      	movs	r3, #0
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 8003116:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
  struct _encode_tensor_desc tensor_ins = {
 800311a:	9203      	str	r2, [sp, #12]
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 800311c:	4598      	cmp	r8, r3
  resp->payload.minfo.n_inputs = nn->n_inputs;
 800311e:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8003122:	aa02      	add	r2, sp, #8
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003124:	bf08      	it	eq
 8003126:	f04f 0c02 	moveq.w	ip, #2
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 800312a:	9317      	str	r3, [sp, #92]	; 0x5c
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 800312c:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003130:	f240 4202 	movw	r2, #1026	; 0x402
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8003134:	931b      	str	r3, [sp, #108]	; 0x6c
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003136:	bf18      	it	ne
 8003138:	4694      	movne	ip, r2
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 800313a:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800313c:	e9cd 2c18 	strd	r2, ip, [sp, #96]	; 0x60
      &encode_ai_buffer_to_tensor_desc, nn->n_outputs, &tensor_desc_outs };
 8003140:	f8b5 2042 	ldrh.w	r2, [r5, #66]	; 0x42
  if (nn->map_activations.size) {
 8003144:	f8b5 c05a 	ldrh.w	ip, [r5, #90]	; 0x5a
  struct _encode_tensor_desc tensor_outs = {
 8003148:	9206      	str	r2, [sp, #24]
  resp->payload.minfo.outputs.funcs.encode = encode_tensor_desc;
 800314a:	e9c4 213c 	strd	r2, r1, [r4, #240]	; 0xf0
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 800314e:	aa05      	add	r2, sp, #20
 8003150:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
  if (nn->map_activations.size) {
 8003154:	f1bc 0f00 	cmp.w	ip, #0
 8003158:	d04c      	beq.n	80031f4 <aiPbCmdNNInfo+0x1c0>
      size_acts += nn->map_activations.buffer[i].size;
 800315a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    for (int i=0; i<nn->map_activations.size; i++)
 800315c:	4618      	mov	r0, r3
      size_acts += nn->map_activations.buffer[i].size;
 800315e:	f04f 081c 	mov.w	r8, #28
 8003162:	3210      	adds	r2, #16
 8003164:	fb08 fe00 	mul.w	lr, r8, r0
    for (int i=0; i<nn->map_activations.size; i++)
 8003168:	3001      	adds	r0, #1
      size_acts += nn->map_activations.buffer[i].size;
 800316a:	f852 e00e 	ldr.w	lr, [r2, lr]
    for (int i=0; i<nn->map_activations.size; i++)
 800316e:	4560      	cmp	r0, ip
      size_acts += nn->map_activations.buffer[i].size;
 8003170:	4473      	add	r3, lr
    for (int i=0; i<nn->map_activations.size; i++)
 8003172:	dbf7      	blt.n	8003164 <aiPbCmdNNInfo+0x130>
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003174:	4a27      	ldr	r2, [pc, #156]	; (8003214 <aiPbCmdNNInfo+0x1e0>)
  struct _encode_tensor_desc tensor_acts = {
 8003176:	a808      	add	r0, sp, #32
 8003178:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800321c <aiPbCmdNNInfo+0x1e8>
 800317c:	900d      	str	r0, [sp, #52]	; 0x34
  if (nn->map_weights.size) {
 800317e:	f8b5 0052 	ldrh.w	r0, [r5, #82]	; 0x52
  struct _encode_tensor_desc tensor_acts = {
 8003182:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003186:	e9cd 2308 	strd	r2, r3, [sp, #32]
  struct _encode_tensor_desc tensor_acts = {
 800318a:	2201      	movs	r2, #1
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 800318c:	2300      	movs	r3, #0
  struct _encode_tensor_desc tensor_acts = {
 800318e:	920c      	str	r2, [sp, #48]	; 0x30
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003190:	930a      	str	r3, [sp, #40]	; 0x28
  resp->payload.minfo.activations.funcs.encode = encode_tensor_desc;
 8003192:	e9c4 213f 	strd	r2, r1, [r4, #252]	; 0xfc
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 8003196:	aa0b      	add	r2, sp, #44	; 0x2c
 8003198:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
  if (nn->map_weights.size) {
 800319c:	b360      	cbz	r0, 80031f8 <aiPbCmdNNInfo+0x1c4>
      size_params += nn->map_weights.buffer[i].size;
 800319e:	6d6d      	ldr	r5, [r5, #84]	; 0x54
    for (int i=0; i<nn->map_weights.size; i++)
 80031a0:	461a      	mov	r2, r3
      size_params += nn->map_weights.buffer[i].size;
 80031a2:	f04f 081c 	mov.w	r8, #28
 80031a6:	3510      	adds	r5, #16
 80031a8:	fb08 fe02 	mul.w	lr, r8, r2
    for (int i=0; i<nn->map_weights.size; i++)
 80031ac:	3201      	adds	r2, #1
      size_params += nn->map_weights.buffer[i].size;
 80031ae:	f855 e00e 	ldr.w	lr, [r5, lr]
    for (int i=0; i<nn->map_weights.size; i++)
 80031b2:	4282      	cmp	r2, r0
      size_params += nn->map_weights.buffer[i].size;
 80031b4:	4473      	add	r3, lr
    for (int i=0; i<nn->map_weights.size; i++)
 80031b6:	dbf7      	blt.n	80031a8 <aiPbCmdNNInfo+0x174>
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 80031b8:	4a17      	ldr	r2, [pc, #92]	; (8003218 <aiPbCmdNNInfo+0x1e4>)
  struct _encode_tensor_desc tensor_w = {
 80031ba:	a80e      	add	r0, sp, #56	; 0x38
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 80031bc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  struct _encode_tensor_desc tensor_w = {
 80031c0:	2301      	movs	r3, #1
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 80031c2:	2200      	movs	r2, #0
  struct _encode_tensor_desc tensor_w = {
 80031c4:	9013      	str	r0, [sp, #76]	; 0x4c
  aiPbMgrSendResp(req, resp, state);
 80031c6:	4630      	mov	r0, r6
  struct _encode_tensor_desc tensor_w = {
 80031c8:	9312      	str	r3, [sp, #72]	; 0x48
  resp->payload.minfo.params.funcs.encode = encode_tensor_desc;
 80031ca:	e9c4 3142 	strd	r3, r1, [r4, #264]	; 0x108
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 80031ce:	ab11      	add	r3, sp, #68	; 0x44
  aiPbMgrSendResp(req, resp, state);
 80031d0:	4621      	mov	r1, r4
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 80031d2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  struct _encode_tensor_desc tensor_w = {
 80031d6:	e9cd 2c10 	strd	r2, ip, [sp, #64]	; 0x40
  aiPbMgrSendResp(req, resp, state);
 80031da:	f7fe ffb1 	bl	8002140 <aiPbMgrSendResp>
        ctx->inputs_in_activations, ctx->outputs_in_activations);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 80031de:	b022      	add	sp, #136	; 0x88
 80031e0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    return EnumTools_AI_GHS;
 80031e4:	2306      	movs	r3, #6
 80031e6:	e76a      	b.n	80030be <aiPbCmdNNInfo+0x8a>
    return EnumTools_AI_HTC;
 80031e8:	2305      	movs	r3, #5
 80031ea:	e768      	b.n	80030be <aiPbCmdNNInfo+0x8a>
    return EnumTools_AI_IAR;
 80031ec:	2302      	movs	r3, #2
 80031ee:	e766      	b.n	80030be <aiPbCmdNNInfo+0x8a>
    return EnumTools_AI_MDK_6;
 80031f0:	2304      	movs	r3, #4
 80031f2:	e764      	b.n	80030be <aiPbCmdNNInfo+0x8a>
  ai_size size_acts = 0;
 80031f4:	4663      	mov	r3, ip
 80031f6:	e7bd      	b.n	8003174 <aiPbCmdNNInfo+0x140>
  ai_size size_params = 0;
 80031f8:	4603      	mov	r3, r0
 80031fa:	e7dd      	b.n	80031b8 <aiPbCmdNNInfo+0x184>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80031fc:	2304      	movs	r3, #4
 80031fe:	4621      	mov	r1, r4
 8003200:	4630      	mov	r0, r6
 8003202:	461a      	mov	r2, r3
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	f7fe ffef 	bl	80021e8 <aiPbMgrSendAck>
}
 800320a:	e7e8      	b.n	80031de <aiPbCmdNNInfo+0x1aa>
 800320c:	08002ce9 	.word	0x08002ce9
 8003210:	080020d9 	.word	0x080020d9
 8003214:	0801111c 	.word	0x0801111c
 8003218:	08011121 	.word	0x08011121
 800321c:	08002bf9 	.word	0x08002bf9

08003220 <_print_debug>:
{
 8003220:	b40e      	push	{r1, r2, r3}
 8003222:	b517      	push	{r0, r1, r2, r4, lr}
  if (!debug)
 8003224:	b178      	cbz	r0, 8003246 <_print_debug+0x26>
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8003226:	4c0f      	ldr	r4, [pc, #60]	; (8003264 <_print_debug+0x44>)
  va_start(ap, fmt);
 8003228:	ab06      	add	r3, sp, #24
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 800322a:	2150      	movs	r1, #80	; 0x50
 800322c:	9a05      	ldr	r2, [sp, #20]
 800322e:	4620      	mov	r0, r4
  va_start(ap, fmt);
 8003230:	9301      	str	r3, [sp, #4]
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8003232:	f7ff fb11 	bl	8002858 <lc_vsnprint>
      _print_buffer[s] = 0;
 8003236:	2100      	movs	r1, #0
 8003238:	1823      	adds	r3, r4, r0
  while (s) {
 800323a:	b948      	cbnz	r0, 8003250 <_print_debug+0x30>
  aiPbMgrSendLogV2(EnumState_S_WAITING, 1, &_print_buffer[0]);
 800323c:	2101      	movs	r1, #1
 800323e:	4a09      	ldr	r2, [pc, #36]	; (8003264 <_print_debug+0x44>)
 8003240:	4608      	mov	r0, r1
 8003242:	f7fe fff1 	bl	8002228 <aiPbMgrSendLogV2>
}
 8003246:	b003      	add	sp, #12
 8003248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800324c:	b003      	add	sp, #12
 800324e:	4770      	bx	lr
    if ((_print_buffer[s] == '\n') || (_print_buffer[s] == '\r'))
 8003250:	781a      	ldrb	r2, [r3, #0]
 8003252:	2a0a      	cmp	r2, #10
 8003254:	d001      	beq.n	800325a <_print_debug+0x3a>
 8003256:	2a0d      	cmp	r2, #13
 8003258:	d100      	bne.n	800325c <_print_debug+0x3c>
      _print_buffer[s] = 0;
 800325a:	7019      	strb	r1, [r3, #0]
    s--;
 800325c:	3801      	subs	r0, #1
 800325e:	3b01      	subs	r3, #1
 8003260:	e7eb      	b.n	800323a <_print_debug+0x1a>
 8003262:	bf00      	nop
 8003264:	20004508 	.word	0x20004508

08003268 <aiPbCmdNNRun>:
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
}


void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 8003268:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 800326c:	4605      	mov	r5, r0
 800326e:	460e      	mov	r6, r1
 8003270:	ed2d 8b02 	vpush	{d8}
 8003274:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003276:	f3ef 8014 	mrs	r0, CONTROL
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 800327a:	f3ef 8108 	mrs	r1, MSP
  ai_buffer *ai_input;
  ai_buffer *ai_output;

  UNUSED(param);

  MON_STACK_INIT();
 800327e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003282:	f7ff fb47 	bl	8002914 <stackMonInit>

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 8003286:	f04f 31ff 	mov.w	r1, #4294967295
 800328a:	f105 000c 	add.w	r0, r5, #12
 800328e:	f7ff fd81 	bl	8002d94 <aiExecCtx>
  if (!ctx) {
 8003292:	4604      	mov	r4, r0
 8003294:	b910      	cbnz	r0, 800329c <aiPbCmdNNRun+0x34>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003296:	2304      	movs	r3, #4

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
  if (batch != 1) {
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	e1a4      	b.n	80035e6 <aiPbCmdNNRun+0x37e>
  _set_context(req, ctx);
 800329c:	68a8      	ldr	r0, [r5, #8]
  ctx->emit_intermediate_data = false;
 800329e:	2300      	movs	r3, #0
  net_obs_ctx.no_data = true;
 80032a0:	2201      	movs	r2, #1
  ctx->emit_intermediate_data = false;
 80032a2:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER_WITH_DATA) ==
 80032a6:	0743      	lsls	r3, r0, #29
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER) ==
 80032a8:	bf55      	itete	pl
 80032aa:	f3c0 0340 	ubfxpl	r3, r0, #1, #1
    ctx->observer_is_enabled = true;
 80032ae:	f240 1301 	movwmi	r3, #257	; 0x101
 80032b2:	f884 3092 	strbpl.w	r3, [r4, #146]	; 0x92
 80032b6:	f8a4 3092 	strhmi.w	r3, [r4, #146]	; 0x92
  ctx->direct_write = req->param & EnumRunParam_P_RUN_CONF_DIRECT_WRITE?true:false;
 80032ba:	f3c0 2380 	ubfx	r3, r0, #10, #1
 80032be:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
 80032c2:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  ctx->simple_value = req->param & EnumRunParam_P_RUN_CONF_CONST_VALUE?true:false;
 80032c6:	f3c0 2340 	ubfx	r3, r0, #9, #1
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 80032ca:	f3c0 2000 	ubfx	r0, r0, #8, #1
  ctx->simple_value = req->param & EnumRunParam_P_RUN_CONF_CONST_VALUE?true:false;
 80032ce:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
  net_obs_ctx.no_data = true;
 80032d2:	4bcb      	ldr	r3, [pc, #812]	; (8003600 <aiPbCmdNNRun+0x398>)
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 80032d4:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
  net_obs_ctx.no_data = true;
 80032d8:	7019      	strb	r1, [r3, #0]
  if (ctx->emit_intermediate_data) {
 80032da:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
  net_obs_ctx.no_data = true;
 80032de:	751a      	strb	r2, [r3, #20]
  if (ctx->emit_intermediate_data) {
 80032e0:	b111      	cbz	r1, 80032e8 <aiPbCmdNNRun+0x80>
    net_obs_ctx.is_enabled = true;
 80032e2:	701a      	strb	r2, [r3, #0]
    net_obs_ctx.no_data = false;
 80032e4:	2200      	movs	r2, #0
 80032e6:	751a      	strb	r2, [r3, #20]
  net_obs_ctx.tcom = 0ULL;
 80032e8:	f04f 0800 	mov.w	r8, #0
 80032ec:	f04f 0900 	mov.w	r9, #0
  net_obs_ctx.n_cb_in  = 0;
 80032f0:	f04f 0a00 	mov.w	sl, #0
  ctx->obs_ctx = &net_obs_ctx;
 80032f4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  PB_LC_PRINT(ctx->debug, "RUN: c-model=%s rtid=%d\r\n", ctx->report.model_name, _AI_RUNTIME_ID);
 80032f8:	68a2      	ldr	r2, [r4, #8]
 80032fa:	49c2      	ldr	r1, [pc, #776]	; (8003604 <aiPbCmdNNRun+0x39c>)
  net_obs_ctx.tcom = 0ULL;
 80032fc:	e9c3 8906 	strd	r8, r9, [r3, #24]
  net_obs_ctx.tnodes = 0ULL;
 8003300:	e9c3 8908 	strd	r8, r9, [r3, #32]
  net_obs_ctx.n_cb_out = 0;
 8003304:	e9c3 aa01 	strd	sl, sl, [r3, #4]
  ai_output = ctx->report.outputs;
 8003308:	e9d4 9311 	ldrd	r9, r3, [r4, #68]	; 0x44
 800330c:	9306      	str	r3, [sp, #24]
  PB_LC_PRINT(ctx->debug, "RUN: c-model=%s rtid=%d\r\n", ctx->report.model_name, _AI_RUNTIME_ID);
 800330e:	2301      	movs	r3, #1
 8003310:	f7ff ff86 	bl	8003220 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN:  observer=%d/%d, simple_value=%d, direct_write=%d\r\n",
 8003314:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
 8003318:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
 800331c:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
 8003320:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 8003324:	9101      	str	r1, [sp, #4]
 8003326:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
 800332a:	9100      	str	r1, [sp, #0]
 800332c:	49b6      	ldr	r1, [pc, #728]	; (8003608 <aiPbCmdNNRun+0x3a0>)
 800332e:	f7ff ff77 	bl	8003220 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data (%d bytes).. opt=0x%x, param=0x%x\r\n",
 8003332:	4648      	mov	r0, r9
 8003334:	f894 8096 	ldrb.w	r8, [r4, #150]	; 0x96
 8003338:	f7ff fd1e 	bl	8002d78 <_get_buffer_size>
 800333c:	68ab      	ldr	r3, [r5, #8]
 800333e:	4602      	mov	r2, r0
 8003340:	49b2      	ldr	r1, [pc, #712]	; (800360c <aiPbCmdNNRun+0x3a4>)
 8003342:	4640      	mov	r0, r8
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	46c8      	mov	r8, r9
 8003348:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800334a:	f7ff ff69 	bl	8003220 <_print_debug>
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 800334e:	4648      	mov	r0, r9
 8003350:	f7ff fd12 	bl	8002d78 <_get_buffer_size>
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 8003354:	2201      	movs	r2, #1
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 8003356:	4603      	mov	r3, r0
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 8003358:	4631      	mov	r1, r6
 800335a:	4628      	mov	r0, r5
 800335c:	f8cd a000 	str.w	sl, [sp]
 8003360:	f7fe ff42 	bl	80021e8 <aiPbMgrSendAck>
  tick = port_hal_get_tick();
 8003364:	f7fd fae2 	bl	800092c <HAL_GetTick>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8003368:	f8cd a014 	str.w	sl, [sp, #20]
  tick = port_hal_get_tick();
 800336c:	9007      	str	r0, [sp, #28]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 800336e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8003372:	9a05      	ldr	r2, [sp, #20]
 8003374:	4293      	cmp	r3, r2
 8003376:	f300 80fa 	bgt.w	800356e <aiPbCmdNNRun+0x306>
  tick = port_hal_get_tick() - tick;
 800337a:	f7fd fad7 	bl	800092c <HAL_GetTick>
  PB_LC_PRINT(ctx->debug, "RUN: %d ticks to download %d input(s)\r\n", tick, ctx->report.n_inputs);
 800337e:	9a07      	ldr	r2, [sp, #28]
 8003380:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8003384:	1a82      	subs	r2, r0, r2
 8003386:	49a2      	ldr	r1, [pc, #648]	; (8003610 <aiPbCmdNNRun+0x3a8>)
 8003388:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 800338c:	f7ff ff48 	bl	8003220 <_print_debug>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8003390:	f8d4 8098 	ldr.w	r8, [r4, #152]	; 0x98
  if (obs_ctx->is_enabled == false)
 8003394:	f898 3000 	ldrb.w	r3, [r8]
 8003398:	b193      	cbz	r3, 80033c0 <aiPbCmdNNRun+0x158>
  if (ctx->handle == AI_HANDLE_NULL)
 800339a:	6820      	ldr	r0, [r4, #0]
 800339c:	b180      	cbz	r0, 80033c0 <aiPbCmdNNRun+0x158>
  ai_mnetwork_get_private_handle(ctx->handle,
 800339e:	a90e      	add	r1, sp, #56	; 0x38
 80033a0:	aa14      	add	r2, sp, #80	; 0x50
  obs_ctx->cresp = cresp;
 80033a2:	e9c8 5603 	strd	r5, r6, [r8, #12]
  ai_mnetwork_get_private_handle(ctx->handle,
 80033a6:	f000 fc15 	bl	8003bd4 <ai_mnetwork_get_private_handle>
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 80033aa:	4b9a      	ldr	r3, [pc, #616]	; (8003614 <aiPbCmdNNRun+0x3ac>)
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 80033ac:	f108 0128 	add.w	r1, r8, #40	; 0x28
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 80033b0:	e9c8 340a 	strd	r3, r4, [r8, #40]	; 0x28
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 80033b4:	2306      	movs	r3, #6
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 80033b6:	980e      	ldr	r0, [sp, #56]	; 0x38
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 80033b8:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 80033bc:	f003 ff18 	bl	80071f0 <ai_platform_observer_register_s>
  MON_ALLOC_ENABLE();
 80033c0:	f8df a270 	ldr.w	sl, [pc, #624]	; 8003634 <aiPbCmdNNRun+0x3cc>
  MON_ALLOC_RESET();
 80033c4:	f7ff fbe4 	bl	8002b90 <_mon_alloc_reset>
  PB_LC_PRINT(ctx->debug, "RUN: Processing.. current tick=%lu\r\n", (uint32_t)port_hal_get_tick());
 80033c8:	f894 8096 	ldrb.w	r8, [r4, #150]	; 0x96
  MON_ALLOC_ENABLE();
 80033cc:	f8da 3000 	ldr.w	r3, [sl]
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	f8ca 3000 	str.w	r3, [sl]
  PB_LC_PRINT(ctx->debug, "RUN: Processing.. current tick=%lu\r\n", (uint32_t)port_hal_get_tick());
 80033d8:	f7fd faa8 	bl	800092c <HAL_GetTick>
 80033dc:	498e      	ldr	r1, [pc, #568]	; (8003618 <aiPbCmdNNRun+0x3b0>)
 80033de:	4602      	mov	r2, r0
 80033e0:	4640      	mov	r0, r8
 80033e2:	f7ff ff1d 	bl	8003220 <_print_debug>
 80033e6:	f3ef 8308 	mrs	r3, MSP
  MON_STACK_CHECK0();
 80033ea:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8003638 <aiPbCmdNNRun+0x3d0>
 80033ee:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d004      	beq.n	8003400 <aiPbCmdNNRun+0x198>
 80033f6:	f3ef 8108 	mrs	r1, MSP
 80033fa:	4888      	ldr	r0, [pc, #544]	; (800361c <aiPbCmdNNRun+0x3b4>)
 80033fc:	f7ff fa1a 	bl	8002834 <lc_print>
  MON_STACK_MARK();
 8003400:	f898 3004 	ldrb.w	r3, [r8, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 8149 	bne.w	800369c <aiPbCmdNNRun+0x434>
  tick = port_hal_get_tick();
 800340a:	f7fd fa8f 	bl	800092c <HAL_GetTick>
 800340e:	4683      	mov	fp, r0
  cyclesCounterStart();
 8003410:	f7ff fc7c 	bl	8002d0c <cyclesCounterStart>
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 8003414:	9a06      	ldr	r2, [sp, #24]
 8003416:	4649      	mov	r1, r9
 8003418:	6820      	ldr	r0, [r4, #0]
 800341a:	f000 fbca 	bl	8003bb2 <ai_mnetwork_run>
  if (batch != 1) {
 800341e:	2801      	cmp	r0, #1
 8003420:	f040 814b 	bne.w	80036ba <aiPbCmdNNRun+0x452>
        EnumError_E_GENERIC, EnumError_E_GENERIC);
    return;
  }
  tend = cyclesCounterEnd();
 8003424:	f7ff fc82 	bl	8002d2c <cyclesCounterEnd>
 8003428:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  tick = port_hal_get_tick() - tick;
 800342c:	f7fd fa7e 	bl	800092c <HAL_GetTick>

  MON_ALLOC_DISABLE();
 8003430:	f8da 3000 	ldr.w	r3, [sl]
  tick = port_hal_get_tick() - tick;
 8003434:	eba0 020b 	sub.w	r2, r0, fp
  MON_STACK_EVALUATE();
 8003438:	f898 c004 	ldrb.w	ip, [r8, #4]
  MON_ALLOC_DISABLE();
 800343c:	f023 0301 	bic.w	r3, r3, #1
  MON_STACK_EVALUATE();
 8003440:	2000      	movs	r0, #0
  MON_ALLOC_DISABLE();
 8003442:	f8ca 3000 	str.w	r3, [sl]
  MON_STACK_EVALUATE();
 8003446:	f8c8 0008 	str.w	r0, [r8, #8]
 800344a:	f1bc 0f00 	cmp.w	ip, #0
 800344e:	d029      	beq.n	80034a4 <aiPbCmdNNRun+0x23c>
 8003450:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003454:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8003458:	eba1 0b03 	sub.w	fp, r1, r3
 800345c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8003460:	3303      	adds	r3, #3
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	f103 0e20 	add.w	lr, r3, #32
 800346a:	f853 9b04 	ldr.w	r9, [r3], #4
 800346e:	f1b9 3fde 	cmp.w	r9, #3739147998	; 0xdededede
 8003472:	bf18      	it	ne
 8003474:	4660      	movne	r0, ip
 8003476:	4573      	cmp	r3, lr
 8003478:	d1f7      	bne.n	800346a <aiPbCmdNNRun+0x202>
 800347a:	2800      	cmp	r0, #0
 800347c:	f040 812a 	bne.w	80036d4 <aiPbCmdNNRun+0x46c>
 8003480:	2020      	movs	r0, #32
 8003482:	f8d8 e018 	ldr.w	lr, [r8, #24]
 8003486:	f8c8 0008 	str.w	r0, [r8, #8]
 800348a:	6819      	ldr	r1, [r3, #0]
 800348c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003490:	f1b1 3fde 	cmp.w	r1, #3739147998	; 0xdededede
 8003494:	d102      	bne.n	800349c <aiPbCmdNNRun+0x234>
 8003496:	4573      	cmp	r3, lr
 8003498:	f0c0 8117 	bcc.w	80036ca <aiPbCmdNNRun+0x462>
 800349c:	ebab 0100 	sub.w	r1, fp, r0
 80034a0:	f8c8 1008 	str.w	r1, [r8, #8]

  tend = aiObserverAdjustInferenceTime(ctx, tend);
 80034a4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98

  /* 4 - Send basic report (optional) ------------------------------ */

#if defined(_APP_STACK_MONITOR_) && _APP_STACK_MONITOR_ == 1 && defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  PB_LC_PRINT(ctx->debug, "RUN:  used stack/heap=%d/%d\r\n", (int)io_stack.susage, (int)io_malloc.used);
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 80034a8:	f04f 0900 	mov.w	r9, #0
    }
    if ((i + 1) == ctx->report.n_outputs) {
      state = EnumState_S_DONE;
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
    }
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 80034ac:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8003620 <aiPbCmdNNRun+0x3b8>
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 80034b0:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 80034b4:	e9d0 c008 	ldrd	ip, r0, [r0, #32]
 80034b8:	eb13 030c 	adds.w	r3, r3, ip
 80034bc:	eb41 0100 	adc.w	r1, r1, r0
 80034c0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80034c2:	18c0      	adds	r0, r0, r3
 80034c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034c6:	eb41 0303 	adc.w	r3, r1, r3
  PB_LC_PRINT(ctx->debug, "RUN: Processing done. delta_tick=%lu\r\n", tick);
 80034ca:	4956      	ldr	r1, [pc, #344]	; (8003624 <aiPbCmdNNRun+0x3bc>)
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 80034cc:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
  PB_LC_PRINT(ctx->debug, "RUN: Processing done. delta_tick=%lu\r\n", tick);
 80034d0:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 80034d4:	f7ff fea4 	bl	8003220 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN:  used stack/heap=%d/%d\r\n", (int)io_stack.susage, (int)io_malloc.used);
 80034d8:	f8da 3018 	ldr.w	r3, [sl, #24]
 80034dc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80034e0:	4951      	ldr	r1, [pc, #324]	; (8003628 <aiPbCmdNNRun+0x3c0>)
 80034e2:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 80034e6:	f7ff fe9b 	bl	8003220 <_print_debug>
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 80034ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80034ee:	f7ff fa79 	bl	80029e4 <dwtCyclesToFloatMs>
 80034f2:	f8da 1018 	ldr.w	r1, [sl, #24]
 80034f6:	ab0c      	add	r3, sp, #48	; 0x30
 80034f8:	2202      	movs	r2, #2
 80034fa:	9113      	str	r1, [sp, #76]	; 0x4c
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 80034fc:	4628      	mov	r0, r5
  if (ctx->observer_is_enabled)
 80034fe:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 8003502:	9311      	str	r3, [sp, #68]	; 0x44
    perf.stack_usage = -1;
 8003504:	4549      	cmp	r1, r9
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 8003506:	f8d8 3008 	ldr.w	r3, [r8, #8]
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 800350a:	4631      	mov	r1, r6
 800350c:	f8cd 9000 	str.w	r9, [sp]
    perf.stack_usage = -1;
 8003510:	bf18      	it	ne
 8003512:	f04f 33ff 	movne.w	r3, #4294967295
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 8003516:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800351a:	46c8      	mov	r8, r9
 800351c:	9312      	str	r3, [sp, #72]	; 0x48
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 800351e:	ab0e      	add	r3, sp, #56	; 0x38
 8003520:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8003524:	68a3      	ldr	r3, [r4, #8]
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 8003526:	e9cd 920f 	strd	r9, r2, [sp, #60]	; 0x3c
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 800352a:	f7fe fecf 	bl	80022cc <aiPbMgrSendOperator>
  PB_LC_PRINT(ctx->debug, "RUN: send %d output tensors\r\n", ctx->report.n_outputs);
 800352e:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8003532:	493e      	ldr	r1, [pc, #248]	; (800362c <aiPbCmdNNRun+0x3c4>)
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8003534:	f240 2902 	movw	r9, #514	; 0x202
  PB_LC_PRINT(ctx->debug, "RUN: send %d output tensors\r\n", ctx->report.n_outputs);
 8003538:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 800353c:	f7ff fe70 	bl	8003220 <_print_debug>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003540:	f8dd a018 	ldr.w	sl, [sp, #24]
 8003544:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8003548:	4542      	cmp	r2, r8
 800354a:	f300 80d1 	bgt.w	80036f0 <aiPbCmdNNRun+0x488>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 800354e:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
  if (obs_ctx->is_enabled == false)
 8003552:	782b      	ldrb	r3, [r5, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d04b      	beq.n	80035f0 <aiPbCmdNNRun+0x388>
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 8003558:	a90b      	add	r1, sp, #44	; 0x2c
 800355a:	aa14      	add	r2, sp, #80	; 0x50
 800355c:	6820      	ldr	r0, [r4, #0]
 800355e:	f000 fb39 	bl	8003bd4 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 8003562:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8003566:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003568:	f003 fe78 	bl	800725c <ai_platform_observer_unregister_s>
  return 0;
 800356c:	e040      	b.n	80035f0 <aiPbCmdNNRun+0x388>
    if ((i + 1) == ctx->report.n_inputs)
 800356e:	9a05      	ldr	r2, [sp, #20]
    batch += _get_buffer_size(&ai_input[i]);
 8003570:	4640      	mov	r0, r8
    if ((i + 1) == ctx->report.n_inputs)
 8003572:	3201      	adds	r2, #1
      state = EnumState_S_PROCESSING;
 8003574:	429a      	cmp	r2, r3
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2302      	moveq	r3, #2
    if ((i + 1) == ctx->report.n_inputs)
 800357c:	9205      	str	r2, [sp, #20]
      state = EnumState_S_PROCESSING;
 800357e:	ee08 3a10 	vmov	s16, r3
    batch += _get_buffer_size(&ai_input[i]);
 8003582:	f7ff fbf9 	bl	8002d78 <_get_buffer_size>
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8003586:	2300      	movs	r3, #0
 8003588:	4640      	mov	r0, r8
    res = receive_ai_data(req, resp, state, &ai_input[i], ctx->simple_value, ctx->direct_write);
 800358a:	f894 b094 	ldrb.w	fp, [r4, #148]	; 0x94
 800358e:	f894 a095 	ldrb.w	sl, [r4, #149]	; 0x95
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8003592:	9314      	str	r3, [sp, #80]	; 0x50
 8003594:	f7ff fbf0 	bl	8002d78 <_get_buffer_size>
 8003598:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800359c:	9015      	str	r0, [sp, #84]	; 0x54
 800359e:	9316      	str	r3, [sp, #88]	; 0x58
 80035a0:	2300      	movs	r3, #0
 80035a2:	9317      	str	r3, [sp, #92]	; 0x5c
  if ((simple_value) || (direct_write))
 80035a4:	f1bb 0f00 	cmp.w	fp, #0
 80035a8:	d102      	bne.n	80035b0 <aiPbCmdNNRun+0x348>
 80035aa:	f1ba 0f00 	cmp.w	sl, #0
 80035ae:	d011      	beq.n	80035d4 <aiPbCmdNNRun+0x36c>
    data.size = _get_element_size(buffer);
 80035b0:	f8d8 1000 	ldr.w	r1, [r8]
  if (is_binary)
 80035b4:	4a1e      	ldr	r2, [pc, #120]	; (8003630 <aiPbCmdNNRun+0x3c8>)
 80035b6:	f021 437e 	bic.w	r3, r1, #4261412864	; 0xfe000000
 80035ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01b      	beq.n	80035fa <aiPbCmdNNRun+0x392>
  return (size_t)AI_BUFFER_BYTE_SIZE(1, buffer->format);
 80035c2:	2001      	movs	r0, #1
 80035c4:	f002 fefa 	bl	80063bc <ai_buffer_get_byte_size>
    data.size = _get_element_size(buffer);
 80035c8:	9015      	str	r0, [sp, #84]	; 0x54
  if (direct_write)
 80035ca:	f1ba 0f00 	cmp.w	sl, #0
 80035ce:	d001      	beq.n	80035d4 <aiPbCmdNNRun+0x36c>
    data.addr = (uintptr_t)&temp;
 80035d0:	ab0e      	add	r3, sp, #56	; 0x38
 80035d2:	9316      	str	r3, [sp, #88]	; 0x58
  aiPbMgrReceiveData(&data);
 80035d4:	a814      	add	r0, sp, #80	; 0x50
 80035d6:	f7fe fe5f 	bl	8002298 <aiPbMgrReceiveData>
  if (data.nb_read != data.size) {
 80035da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80035dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80035de:	4293      	cmp	r3, r2
 80035e0:	d02c      	beq.n	800363c <aiPbCmdNNRun+0x3d4>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80035e2:	2201      	movs	r2, #1
 80035e4:	9200      	str	r2, [sp, #0]
 80035e6:	2204      	movs	r2, #4
 80035e8:	4631      	mov	r1, r6
 80035ea:	4628      	mov	r0, r5
 80035ec:	f7fe fdfc 	bl	80021e8 <aiPbMgrSendAck>
  }

  aiObserverUnbind(ctx);
}
 80035f0:	b022      	add	sp, #136	; 0x88
 80035f2:	ecbd 8b02 	vpop	{d8}
 80035f6:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    return 4;
 80035fa:	2004      	movs	r0, #4
 80035fc:	e7e4      	b.n	80035c8 <aiPbCmdNNRun+0x360>
 80035fe:	bf00      	nop
 8003600:	20004698 	.word	0x20004698
 8003604:	08011128 	.word	0x08011128
 8003608:	08011142 	.word	0x08011142
 800360c:	0801117b 	.word	0x0801117b
 8003610:	080111b1 	.word	0x080111b1
 8003614:	08002e79 	.word	0x08002e79
 8003618:	080111d9 	.word	0x080111d9
 800361c:	080111fe 	.word	0x080111fe
 8003620:	00000000 	.word	0x00000000
 8003624:	080112cf 	.word	0x080112cf
 8003628:	080112f6 	.word	0x080112f6
 800362c:	08011314 	.word	0x08011314
 8003630:	000400c0 	.word	0x000400c0
 8003634:	200044cc 	.word	0x200044cc
 8003638:	200044e8 	.word	0x200044e8
  if ((simple_value) && (!direct_write))/* broadcast the value */
 800363c:	f1bb 0f00 	cmp.w	fp, #0
 8003640:	d10d      	bne.n	800365e <aiPbCmdNNRun+0x3f6>
    aiPbMgrSendAck(req, resp, state, data.size, EnumError_E_NONE);
 8003642:	2300      	movs	r3, #0
 8003644:	ee18 2a10 	vmov	r2, s16
 8003648:	4631      	mov	r1, r6
 800364a:	4628      	mov	r0, r5
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	f108 081c 	add.w	r8, r8, #28
 8003652:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003654:	f7fe fdc8 	bl	80021e8 <aiPbMgrSendAck>
      aiPbMgrWaitAck();
 8003658:	f7fe fdd0 	bl	80021fc <aiPbMgrWaitAck>
    if (res != true)
 800365c:	e687      	b.n	800336e <aiPbCmdNNRun+0x106>
  if ((simple_value) && (!direct_write))/* broadcast the value */
 800365e:	f1ba 0f00 	cmp.w	sl, #0
 8003662:	d1ee      	bne.n	8003642 <aiPbCmdNNRun+0x3da>
      const uintptr_t r_ptr = (uintptr_t)buffer->data;
 8003664:	f8d8 1004 	ldr.w	r1, [r8, #4]
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 8003668:	f04f 0a01 	mov.w	sl, #1
      uintptr_t w_ptr = r_ptr + el_s;
 800366c:	eb01 0b02 	add.w	fp, r1, r2
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 8003670:	4640      	mov	r0, r8
 8003672:	e9cd 2108 	strd	r2, r1, [sp, #32]
 8003676:	f7ff fb7f 	bl	8002d78 <_get_buffer_size>
 800367a:	9a08      	ldr	r2, [sp, #32]
 800367c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800367e:	fbb0 f0f2 	udiv	r0, r0, r2
 8003682:	4582      	cmp	sl, r0
 8003684:	d2dd      	bcs.n	8003642 <aiPbCmdNNRun+0x3da>
        memcpy((void *)w_ptr, (void *)r_ptr, el_s);
 8003686:	4658      	mov	r0, fp
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 8003688:	f10a 0a01 	add.w	sl, sl, #1
        memcpy((void *)w_ptr, (void *)r_ptr, el_s);
 800368c:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8003690:	f00b fd3f 	bl	800f112 <memcpy>
        w_ptr += el_s;
 8003694:	9a09      	ldr	r2, [sp, #36]	; 0x24
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 8003696:	9908      	ldr	r1, [sp, #32]
        w_ptr += el_s;
 8003698:	4493      	add	fp, r2
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 800369a:	e7e9      	b.n	8003670 <aiPbCmdNNRun+0x408>
  MON_STACK_MARK();
 800369c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80036a0:	f04f 31de 	mov.w	r1, #3739147998	; 0xdededede
 80036a4:	3303      	adds	r3, #3
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80036ae:	4293      	cmp	r3, r2
 80036b0:	f4bf aeab 	bcs.w	800340a <aiPbCmdNNRun+0x1a2>
 80036b4:	f843 1b04 	str.w	r1, [r3], #4
 80036b8:	e7f7      	b.n	80036aa <aiPbCmdNNRun+0x442>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 80036ba:	6820      	ldr	r0, [r4, #0]
 80036bc:	f000 fa4d 	bl	8003b5a <ai_mnetwork_get_error>
 80036c0:	4919      	ldr	r1, [pc, #100]	; (8003728 <aiPbCmdNNRun+0x4c0>)
 80036c2:	f7fe fe7d 	bl	80023c0 <aiLogErr>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80036c6:	230a      	movs	r3, #10
 80036c8:	e5e6      	b.n	8003298 <aiPbCmdNNRun+0x30>
  MON_STACK_EVALUATE();
 80036ca:	3004      	adds	r0, #4
 80036cc:	3304      	adds	r3, #4
 80036ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80036d2:	e6da      	b.n	800348a <aiPbCmdNNRun+0x222>
 80036d4:	f04f 33ff 	mov.w	r3, #4294967295
 80036d8:	4659      	mov	r1, fp
 80036da:	4814      	ldr	r0, [pc, #80]	; (800372c <aiPbCmdNNRun+0x4c4>)
 80036dc:	9205      	str	r2, [sp, #20]
 80036de:	f8c8 3008 	str.w	r3, [r8, #8]
 80036e2:	f7ff f8a7 	bl	8002834 <lc_print>
 80036e6:	4812      	ldr	r0, [pc, #72]	; (8003730 <aiPbCmdNNRun+0x4c8>)
 80036e8:	f7ff f8a4 	bl	8002834 <lc_print>
 80036ec:	9a05      	ldr	r2, [sp, #20]
 80036ee:	e6d9      	b.n	80034a4 <aiPbCmdNNRun+0x23c>
    if (req->param & EnumRunParam_P_RUN_MODE_PERF) {
 80036f0:	68ab      	ldr	r3, [r5, #8]
    if ((i + 1) == ctx->report.n_outputs) {
 80036f2:	f108 0801 	add.w	r8, r8, #1
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 80036f6:	2100      	movs	r1, #0
 80036f8:	eeb0 0a48 	vmov.f32	s0, s16
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 80036fc:	f013 0f08 	tst.w	r3, #8
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8003700:	4628      	mov	r0, r5
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8003702:	bf0c      	ite	eq
 8003704:	2302      	moveq	r3, #2
 8003706:	464b      	movne	r3, r9
    if ((i + 1) == ctx->report.n_outputs) {
 8003708:	4590      	cmp	r8, r2
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 800370a:	bf06      	itte	eq
 800370c:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
      state = EnumState_S_DONE;
 8003710:	2203      	moveq	r2, #3
    EnumState state = EnumState_S_PROCESSING;
 8003712:	2202      	movne	r2, #2
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8003714:	e9cd 3100 	strd	r3, r1, [sp]
 8003718:	4653      	mov	r3, sl
 800371a:	4631      	mov	r1, r6
 800371c:	f10a 0a1c 	add.w	sl, sl, #28
 8003720:	f7ff fb70 	bl	8002e04 <send_ai_io_tensor.isra.0>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003724:	e70e      	b.n	8003544 <aiPbCmdNNRun+0x2dc>
 8003726:	bf00      	nop
 8003728:	08011242 	.word	0x08011242
 800372c:	08011252 	.word	0x08011252
 8003730:	08011276 	.word	0x08011276

08003734 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 8003734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 8003736:	4c1f      	ldr	r4, [pc, #124]	; (80037b4 <aiValidationInit+0x80>)
  port_dwt_reset();
 8003738:	2500      	movs	r5, #0
 800373a:	4e1f      	ldr	r6, [pc, #124]	; (80037b8 <aiValidationInit+0x84>)
 800373c:	f204 2016 	addw	r0, r4, #534	; 0x216
 8003740:	f7ff f878 	bl	8002834 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 8003744:	2301      	movs	r3, #1
 8003746:	f504 7107 	add.w	r1, r4, #540	; 0x21c
 800374a:	2207      	movs	r2, #7
 800374c:	f204 202a 	addw	r0, r4, #554	; 0x22a
 8003750:	f7ff f870 	bl	8002834 <lc_print>
  LC_PRINT("#\r\n");
 8003754:	f204 2037 	addw	r0, r4, #567	; 0x237
 8003758:	f7ff f86c 	bl	8002834 <lc_print>

  systemSettingLog();
 800375c:	f7ff f99e 	bl	8002a9c <systemSettingLog>
  port_dwt_init();
 8003760:	f000 f926 	bl	80039b0 <port_dwt_init_imp>
  port_dwt_reset();
 8003764:	6075      	str	r5, [r6, #4]
  port_hal_delay(100);
 8003766:	2064      	movs	r0, #100	; 0x64
 8003768:	f7fd f8e6 	bl	8000938 <HAL_Delay>
  st = port_dwt_get_cycles();
 800376c:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 800376e:	2664      	movs	r6, #100	; 0x64
 8003770:	466a      	mov	r2, sp
 8003772:	4629      	mov	r1, r5
 8003774:	fbb0 f0f6 	udiv	r0, r0, r6
 8003778:	f7ff f8f8 	bl	800296c <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 800377c:	9a03      	ldr	r2, [sp, #12]
 800377e:	f204 203b 	addw	r0, r4, #571	; 0x23b
 8003782:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8003786:	fb06 3101 	mla	r1, r6, r1, r3
 800378a:	f7ff f853 	bl	8002834 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 800378e:	466a      	mov	r2, sp
 8003790:	2100      	movs	r1, #0
 8003792:	f04f 30ff 	mov.w	r0, #4294967295
 8003796:	f7ff f8e9 	bl	800296c <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 800379a:	9a01      	ldr	r2, [sp, #4]
 800379c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80037a0:	9b02      	ldr	r3, [sp, #8]
 80037a2:	fb01 3302 	mla	r3, r1, r2, r3
 80037a6:	4a05      	ldr	r2, [pc, #20]	; (80037bc <aiValidationInit+0x88>)
 80037a8:	6013      	str	r3, [r2, #0]
  port_dwt_init();
 80037aa:	f000 f901 	bl	80039b0 <port_dwt_init_imp>

  cyclesCounterInit();

  return 0;
}
 80037ae:	4628      	mov	r0, r5
 80037b0:	b004      	add	sp, #16
 80037b2:	bd70      	pop	{r4, r5, r6, pc}
 80037b4:	0801111c 	.word	0x0801111c
 80037b8:	e0001000 	.word	0xe0001000
 80037bc:	200044c0 	.word	0x200044c0

080037c0 <aiValidationProcess>:

int aiValidationProcess(void)
{
 80037c0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80037c4:	2500      	movs	r5, #0
 80037c6:	4c68      	ldr	r4, [pc, #416]	; (8003968 <aiValidationProcess+0x1a8>)
  aiPlatformVersion();
 80037c8:	f7fe fde4 	bl	8002394 <aiPlatformVersion>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 80037cc:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 80039a4 <aiValidationProcess+0x1e4>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80037d0:	6025      	str	r5, [r4, #0]
  idx = 0;
 80037d2:	46a8      	mov	r8, r5
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80037d4:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
  LC_PRINT("Discovering the network(s)...\r\n");
 80037d8:	3408      	adds	r4, #8
  int res = -1;
 80037da:	f04f 35ff 	mov.w	r5, #4294967295
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 80037de:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 80039a8 <aiValidationProcess+0x1e8>
  LC_PRINT("Discovering the network(s)...\r\n");
 80037e2:	4862      	ldr	r0, [pc, #392]	; (800396c <aiValidationProcess+0x1ac>)
 80037e4:	f7ff f826 	bl	8002834 <lc_print>
    nn_name = ai_mnetwork_find(NULL, idx);
 80037e8:	4641      	mov	r1, r8
 80037ea:	2000      	movs	r0, #0
 80037ec:	f000 f932 	bl	8003a54 <ai_mnetwork_find>
    if (nn_name) {
 80037f0:	4606      	mov	r6, r0
 80037f2:	b1b0      	cbz	r0, 8003822 <aiValidationProcess+0x62>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 80037f4:	4601      	mov	r1, r0
 80037f6:	4648      	mov	r0, r9
 80037f8:	f7ff f81c 	bl	8002834 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 80037fc:	4631      	mov	r1, r6
 80037fe:	485c      	ldr	r0, [pc, #368]	; (8003970 <aiValidationProcess+0x1b0>)
 8003800:	f7ff f818 	bl	8002834 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8003804:	2200      	movs	r2, #0
 8003806:	f1a4 0108 	sub.w	r1, r4, #8
 800380a:	4630      	mov	r0, r6
 800380c:	f000 f942 	bl	8003a94 <ai_mnetwork_create>
  if (err.type) {
 8003810:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 8003814:	d017      	beq.n	8003846 <aiValidationProcess+0x86>
        nn_name = NULL;
 8003816:	2600      	movs	r6, #0
    return -1;
 8003818:	f04f 35ff 	mov.w	r5, #4294967295
    aiLogErr(err, "ai_mnetwork_create");
 800381c:	4955      	ldr	r1, [pc, #340]	; (8003974 <aiValidationProcess+0x1b4>)
 800381e:	f7fe fdcf 	bl	80023c0 <aiLogErr>
    idx++;
 8003822:	f108 0801 	add.w	r8, r8, #1
  } while (nn_name);
 8003826:	34a0      	adds	r4, #160	; 0xa0
 8003828:	2e00      	cmp	r6, #0
 800382a:	d1dd      	bne.n	80037e8 <aiValidationProcess+0x28>
  int r;

  r = aiInit();
  if (r) {
 800382c:	2d00      	cmp	r5, #0
 800382e:	d077      	beq.n	8003920 <aiValidationProcess+0x160>
    LC_PRINT("\r\nE:  aiInit() r=%d\r\n", r);
 8003830:	4851      	ldr	r0, [pc, #324]	; (8003978 <aiValidationProcess+0x1b8>)
 8003832:	4629      	mov	r1, r5
 8003834:	f7fe fffe 	bl	8002834 <lc_print>
    port_hal_delay(2000);
 8003838:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800383c:	f7fd f87c 	bl	8000938 <HAL_Delay>
  do {
    r = aiPbMgrWaitAndProcess();
  } while (r==0);

  return r;
}
 8003840:	4628      	mov	r0, r5
 8003842:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 8003846:	484d      	ldr	r0, [pc, #308]	; (800397c <aiValidationProcess+0x1bc>)
 8003848:	f7fe fff4 	bl	8002834 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 800384c:	4621      	mov	r1, r4
 800384e:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8003852:	f000 f977 	bl	8003b44 <ai_mnetwork_get_report>
 8003856:	4683      	mov	fp, r0
    err = ai_mnetwork_get_error(ctx->handle);
 8003858:	f854 0c08 	ldr.w	r0, [r4, #-8]
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 800385c:	f1bb 0f00 	cmp.w	fp, #0
 8003860:	d10e      	bne.n	8003880 <aiValidationProcess+0xc0>
    err = ai_mnetwork_get_error(ctx->handle);
 8003862:	f000 f97a 	bl	8003b5a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8003866:	4946      	ldr	r1, [pc, #280]	; (8003980 <aiValidationProcess+0x1c0>)
 8003868:	f7fe fdaa 	bl	80023c0 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 800386c:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8003870:	f000 f948 	bl	8003b04 <ai_mnetwork_destroy>
        nn_name = NULL;
 8003874:	465e      	mov	r6, fp
    return -2;
 8003876:	f06f 0501 	mvn.w	r5, #1
    ctx->handle = AI_HANDLE_NULL;
 800387a:	f844 bc08 	str.w	fp, [r4, #-8]
      if (res)
 800387e:	e7d0      	b.n	8003822 <aiValidationProcess+0x62>
  if (!ai_mnetwork_init(ctx->handle)) {
 8003880:	f000 f978 	bl	8003b74 <ai_mnetwork_init>
 8003884:	4683      	mov	fp, r0
 8003886:	b980      	cbnz	r0, 80038aa <aiValidationProcess+0xea>
    err = ai_mnetwork_get_error(ctx->handle);
 8003888:	f854 0c08 	ldr.w	r0, [r4, #-8]
        nn_name = NULL;
 800388c:	465e      	mov	r6, fp
    err = ai_mnetwork_get_error(ctx->handle);
 800388e:	f000 f964 	bl	8003b5a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8003892:	493c      	ldr	r1, [pc, #240]	; (8003984 <aiValidationProcess+0x1c4>)
 8003894:	f7fe fd94 	bl	80023c0 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8003898:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800389c:	f000 f932 	bl	8003b04 <ai_mnetwork_destroy>
    return -4;
 80038a0:	f06f 0503 	mvn.w	r5, #3
    ctx->handle = AI_HANDLE_NULL;
 80038a4:	f844 bc08 	str.w	fp, [r4, #-8]
      if (res)
 80038a8:	e7bb      	b.n	8003822 <aiValidationProcess+0x62>
  if (ai_mnetwork_get_report(ctx->handle,
 80038aa:	4621      	mov	r1, r4
 80038ac:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80038b0:	f000 f948 	bl	8003b44 <ai_mnetwork_get_report>
 80038b4:	4683      	mov	fp, r0
 80038b6:	b1b0      	cbz	r0, 80038e6 <aiValidationProcess+0x126>
    aiPrintNetworkInfo(&ctx->report);
 80038b8:	4620      	mov	r0, r4
 80038ba:	f7fe fe99 	bl	80025f0 <aiPrintNetworkInfo>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 80038be:	4628      	mov	r0, r5
  ctx->inputs_in_activations = false;
 80038c0:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
    if (!ctx->report.inputs[i].data)
 80038c4:	211c      	movs	r1, #28
  ctx->outputs_in_activations = false;
 80038c6:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
      ctx->inputs_in_activations = true;
 80038ca:	2501      	movs	r5, #1
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 80038cc:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80039ac <aiValidationProcess+0x1ec>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 80038d0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80038d2:	4298      	cmp	r0, r3
 80038d4:	db0a      	blt.n	80038ec <aiValidationProcess+0x12c>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80038d6:	2300      	movs	r3, #0
    if (!ctx->report.outputs[i].data)
 80038d8:	201c      	movs	r0, #28
      ctx->outputs_in_activations = true;
 80038da:	2501      	movs	r5, #1
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80038dc:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 80038de:	4293      	cmp	r3, r2
 80038e0:	db11      	blt.n	8003906 <aiValidationProcess+0x146>
      res = aiBootstrap(&net_exec_ctx[idx], nn_name);
 80038e2:	2500      	movs	r5, #0
 80038e4:	e79d      	b.n	8003822 <aiValidationProcess+0x62>
    err = ai_mnetwork_get_error(ctx->handle);
 80038e6:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80038ea:	e7ba      	b.n	8003862 <aiValidationProcess+0xa2>
    if (!ctx->report.inputs[i].data)
 80038ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038ee:	fb01 3300 	mla	r3, r1, r0, r3
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	b922      	cbnz	r2, 8003900 <aiValidationProcess+0x140>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 80038f6:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 80038fa:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 80038fc:	3001      	adds	r0, #1
 80038fe:	e7e7      	b.n	80038d0 <aiValidationProcess+0x110>
      ctx->inputs_in_activations = true;
 8003900:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
 8003904:	e7fa      	b.n	80038fc <aiValidationProcess+0x13c>
    if (!ctx->report.outputs[i].data)
 8003906:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003908:	fb00 2203 	mla	r2, r0, r3, r2
 800390c:	6851      	ldr	r1, [r2, #4]
 800390e:	b921      	cbnz	r1, 800391a <aiValidationProcess+0x15a>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003910:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 8003914:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003916:	3301      	adds	r3, #1
 8003918:	e7e0      	b.n	80038dc <aiValidationProcess+0x11c>
      ctx->outputs_in_activations = true;
 800391a:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 800391e:	e7fa      	b.n	8003916 <aiValidationProcess+0x156>
    LC_PRINT("\r\n");
 8003920:	4819      	ldr	r0, [pc, #100]	; (8003988 <aiValidationProcess+0x1c8>)
 8003922:	f7fe ff87 	bl	8002834 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8003926:	4819      	ldr	r0, [pc, #100]	; (800398c <aiValidationProcess+0x1cc>)
 8003928:	f7fe ff84 	bl	8002834 <lc_print>
    LC_PRINT("| READY to receive a CMD from the HOST... |\r\n");
 800392c:	4818      	ldr	r0, [pc, #96]	; (8003990 <aiValidationProcess+0x1d0>)
 800392e:	f7fe ff81 	bl	8002834 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8003932:	4816      	ldr	r0, [pc, #88]	; (800398c <aiValidationProcess+0x1cc>)
 8003934:	f7fe ff7e 	bl	8002834 <lc_print>
    LC_PRINT("\r\n");
 8003938:	4813      	ldr	r0, [pc, #76]	; (8003988 <aiValidationProcess+0x1c8>)
 800393a:	f7fe ff7b 	bl	8002834 <lc_print>
    LC_PRINT("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 800393e:	4815      	ldr	r0, [pc, #84]	; (8003994 <aiValidationProcess+0x1d4>)
 8003940:	f7fe ff78 	bl	8002834 <lc_print>
    LC_PRINT("# and a serial COM interface should be used\r\n");
 8003944:	4814      	ldr	r0, [pc, #80]	; (8003998 <aiValidationProcess+0x1d8>)
 8003946:	f7fe ff75 	bl	8002834 <lc_print>
    LC_PRINT("# (i.e. Python ai_runner module). Protocol version = %d.%d\r\n",
 800394a:	4814      	ldr	r0, [pc, #80]	; (800399c <aiValidationProcess+0x1dc>)
 800394c:	2201      	movs	r2, #1
 800394e:	2103      	movs	r1, #3
 8003950:	f7fe ff70 	bl	8002834 <lc_print>
  aiPbMgrInit(pbCmdFuncTab);
 8003954:	4812      	ldr	r0, [pc, #72]	; (80039a0 <aiValidationProcess+0x1e0>)
 8003956:	f7fe fb5f 	bl	8002018 <aiPbMgrInit>
    r = aiPbMgrWaitAndProcess();
 800395a:	f7fe fc03 	bl	8002164 <aiPbMgrWaitAndProcess>
  } while (r==0);
 800395e:	4605      	mov	r5, r0
 8003960:	2800      	cmp	r0, #0
 8003962:	d0fa      	beq.n	800395a <aiValidationProcess+0x19a>
 8003964:	e76c      	b.n	8003840 <aiValidationProcess+0x80>
 8003966:	bf00      	nop
 8003968:	20004558 	.word	0x20004558
 800396c:	0801138d 	.word	0x0801138d
 8003970:	080113c4 	.word	0x080113c4
 8003974:	080113e2 	.word	0x080113e2
 8003978:	08011436 	.word	0x08011436
 800397c:	080113f5 	.word	0x080113f5
 8003980:	08011410 	.word	0x08011410
 8003984:	08011425 	.word	0x08011425
 8003988:	0801144c 	.word	0x0801144c
 800398c:	0801144f 	.word	0x0801144f
 8003990:	0801147d 	.word	0x0801147d
 8003994:	080114ab 	.word	0x080114ab
 8003998:	080114f1 	.word	0x080114f1
 800399c:	0801151f 	.word	0x0801151f
 80039a0:	2000000c 	.word	0x2000000c
 80039a4:	080113ad 	.word	0x080113ad
 80039a8:	20000054 	.word	0x20000054
 80039ac:	20000050 	.word	0x20000050

080039b0 <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80039b0:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <port_dwt_init_imp+0x24>)
 80039b2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 80039b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ba:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <port_dwt_init_imp+0x28>)
 80039c0:	4a06      	ldr	r2, [pc, #24]	; (80039dc <port_dwt_init_imp+0x2c>)
 80039c2:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
#endif
  DWT->CYCCNT = 0;
 80039c6:	2200      	movs	r2, #0
 80039c8:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
}
 80039d2:	4770      	bx	lr
 80039d4:	e000ed00 	.word	0xe000ed00
 80039d8:	e0001000 	.word	0xe0001000
 80039dc:	c5acce55 	.word	0xc5acce55

080039e0 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <ai_mnetwork_handle+0x2c>)
 80039e2:	b110      	cbz	r0, 80039ea <ai_mnetwork_handle+0xa>
 80039e4:	4298      	cmp	r0, r3
 80039e6:	d105      	bne.n	80039f4 <ai_mnetwork_handle+0x14>
 80039e8:	4770      	bx	lr
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	b942      	cbnz	r2, 8003a00 <ai_mnetwork_handle+0x20>
            return &gnetworks[i];
 80039ee:	eb03 1082 	add.w	r0, r3, r2, lsl #6
    }
    return NULL;
}
 80039f2:	4770      	bx	lr
        if ((inst) && (&gnetworks[i] == inst))
 80039f4:	3340      	adds	r3, #64	; 0x40
    return NULL;
 80039f6:	4298      	cmp	r0, r3
 80039f8:	bf0c      	ite	eq
 80039fa:	4618      	moveq	r0, r3
 80039fc:	2000      	movne	r0, #0
 80039fe:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8003a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a02:	2a00      	cmp	r2, #0
 8003a04:	d1f5      	bne.n	80039f2 <ai_mnetwork_handle+0x12>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8003a06:	2201      	movs	r2, #1
 8003a08:	e7f1      	b.n	80039ee <ai_mnetwork_handle+0xe>
 8003a0a:	bf00      	nop
 8003a0c:	200046e0 	.word	0x200046e0

08003a10 <ai_mnetwork_is_valid>:
{
 8003a10:	b570      	push	{r4, r5, r6, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003a12:	4604      	mov	r4, r0
 8003a14:	b190      	cbz	r0, 8003a3c <ai_mnetwork_is_valid+0x2c>
 8003a16:	680e      	ldr	r6, [r1, #0]
 8003a18:	4630      	mov	r0, r6
 8003a1a:	f7fc fc61 	bl	80002e0 <strlen>
 8003a1e:	4605      	mov	r5, r0
 8003a20:	4620      	mov	r0, r4
 8003a22:	f7fc fc5d 	bl	80002e0 <strlen>
 8003a26:	4285      	cmp	r5, r0
 8003a28:	d108      	bne.n	8003a3c <ai_mnetwork_is_valid+0x2c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8003a2a:	462a      	mov	r2, r5
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	4630      	mov	r0, r6
 8003a30:	f00b fad5 	bl	800efde <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003a34:	fab0 f080 	clz	r0, r0
 8003a38:	0940      	lsrs	r0, r0, #5
}
 8003a3a:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	e7fc      	b.n	8003a3a <ai_mnetwork_is_valid+0x2a>

08003a40 <MX_X_CUBE_AI_Init>:
{
 8003a40:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8003a42:	f000 fe1f 	bl	8004684 <MX_USART3_UART_Init>
}
 8003a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 8003a4a:	f7ff be73 	b.w	8003734 <aiValidationInit>

08003a4e <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 8003a4e:	f7ff beb7 	b.w	80037c0 <aiValidationProcess>
	...

08003a54 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8003a58:	490d      	ldr	r1, [pc, #52]	; (8003a90 <ai_mnetwork_find+0x3c>)
{
 8003a5a:	4606      	mov	r6, r0
 8003a5c:	4d0c      	ldr	r5, [pc, #48]	; (8003a90 <ai_mnetwork_find+0x3c>)
        if (ai_mnetwork_is_valid(name, entry))
 8003a5e:	f7ff ffd7 	bl	8003a10 <ai_mnetwork_is_valid>
 8003a62:	b948      	cbnz	r0, 8003a78 <ai_mnetwork_find+0x24>
            return entry->name;
        else {
            if (!idx--)
 8003a64:	b17c      	cbz	r4, 8003a86 <ai_mnetwork_find+0x32>
        if (ai_mnetwork_is_valid(name, entry))
 8003a66:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	f7ff ffd0 	bl	8003a10 <ai_mnetwork_is_valid>
 8003a70:	b938      	cbnz	r0, 8003a82 <ai_mnetwork_find+0x2e>
            if (!idx--)
 8003a72:	2c01      	cmp	r4, #1
 8003a74:	d007      	beq.n	8003a86 <ai_mnetwork_find+0x32>
                return entry->name;
        }
    }
    return NULL;
}
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8003a78:	2300      	movs	r3, #0
            return entry->name;
 8003a7a:	222c      	movs	r2, #44	; 0x2c
 8003a7c:	4353      	muls	r3, r2
 8003a7e:	58e8      	ldr	r0, [r5, r3]
 8003a80:	e7f9      	b.n	8003a76 <ai_mnetwork_find+0x22>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8003a82:	2301      	movs	r3, #1
 8003a84:	e7f9      	b.n	8003a7a <ai_mnetwork_find+0x26>
                return entry->name;
 8003a86:	232c      	movs	r3, #44	; 0x2c
 8003a88:	435c      	muls	r4, r3
 8003a8a:	5928      	ldr	r0, [r5, r4]
 8003a8c:	e7f3      	b.n	8003a76 <ai_mnetwork_find+0x22>
 8003a8e:	bf00      	nop
 8003a90:	08011620 	.word	0x08011620

08003a94 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8003a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a96:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003a98:	2000      	movs	r0, #0
{
 8003a9a:	4617      	mov	r7, r2
 8003a9c:	460d      	mov	r5, r1
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003a9e:	f7ff ff9f 	bl	80039e0 <ai_mnetwork_handle>

    if (!inst) {
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	b170      	cbz	r0, 8003ac4 <ai_mnetwork_create+0x30>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8003aa6:	4915      	ldr	r1, [pc, #84]	; (8003afc <ai_mnetwork_create+0x68>)
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f7ff ffb1 	bl	8003a10 <ai_mnetwork_is_valid>
 8003aae:	b958      	cbnz	r0, 8003ac8 <ai_mnetwork_create+0x34>
 8003ab0:	4913      	ldr	r1, [pc, #76]	; (8003b00 <ai_mnetwork_create+0x6c>)
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f7ff ffac 	bl	8003a10 <ai_mnetwork_is_valid>
 8003ab8:	b9e8      	cbnz	r0, 8003af6 <ai_mnetwork_create+0x62>
 8003aba:	2214      	movs	r2, #20
 8003abc:	2310      	movs	r3, #16
 8003abe:	e014      	b.n	8003aea <ai_mnetwork_create+0x56>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 8003ac0:	4639      	mov	r1, r7
 8003ac2:	e006      	b.n	8003ad2 <ai_mnetwork_create+0x3e>
 8003ac4:	2231      	movs	r2, #49	; 0x31
 8003ac6:	e7f9      	b.n	8003abc <ai_mnetwork_create+0x28>
        entry = &networks[i];
 8003ac8:	4e0c      	ldr	r6, [pc, #48]	; (8003afc <ai_mnetwork_create+0x68>)
        err = found->ai_create(network, found->config);
 8003aca:	6933      	ldr	r3, [r6, #16]
    if (network_config == NULL)
 8003acc:	2f00      	cmp	r7, #0
 8003ace:	d1f7      	bne.n	8003ac0 <ai_mnetwork_create+0x2c>
        err = found->ai_create(network, found->config);
 8003ad0:	6871      	ldr	r1, [r6, #4]
        err = found->ai_create(network, network_config);
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	4798      	blx	r3
 8003ad6:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8003ada:	b2c2      	uxtb	r2, r0
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8003adc:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8003ae0:	d103      	bne.n	8003aea <ai_mnetwork_create+0x56>
        inst->entry = found;
 8003ae2:	6026      	str	r6, [r4, #0]
        inst->handle = *network;
 8003ae4:	6829      	ldr	r1, [r5, #0]
 8003ae6:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8003ae8:	602c      	str	r4, [r5, #0]
        return err;
 8003aea:	2000      	movs	r0, #0
 8003aec:	f362 0007 	bfi	r0, r2, #0, #8
 8003af0:	f363 201f 	bfi	r0, r3, #8, #24
    }

    return err;
}
 8003af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        entry = &networks[i];
 8003af6:	4e02      	ldr	r6, [pc, #8]	; (8003b00 <ai_mnetwork_create+0x6c>)
 8003af8:	e7e7      	b.n	8003aca <ai_mnetwork_create+0x36>
 8003afa:	bf00      	nop
 8003afc:	08011620 	.word	0x08011620
 8003b00:	0801164c 	.word	0x0801164c

08003b04 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8003b04:	b538      	push	{r3, r4, r5, lr}
 8003b06:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003b08:	f7ff ff6a 	bl	80039e0 <ai_mnetwork_handle>
    if (inn) {
 8003b0c:	4605      	mov	r5, r0
 8003b0e:	b188      	cbz	r0, 8003b34 <ai_mnetwork_destroy+0x30>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8003b10:	6803      	ldr	r3, [r0, #0]
 8003b12:	6840      	ldr	r0, [r0, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	4798      	blx	r3
        if (hdl != inn->handle) {
 8003b18:	686b      	ldr	r3, [r5, #4]
 8003b1a:	4283      	cmp	r3, r0
 8003b1c:	d00a      	beq.n	8003b34 <ai_mnetwork_destroy+0x30>
        if ((inst) && (&gnetworks[i] == inst)) {
 8003b1e:	4a08      	ldr	r2, [pc, #32]	; (8003b40 <ai_mnetwork_destroy+0x3c>)
 8003b20:	4295      	cmp	r5, r2
 8003b22:	d009      	beq.n	8003b38 <ai_mnetwork_destroy+0x34>
 8003b24:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8003b28:	429d      	cmp	r5, r3
 8003b2a:	d107      	bne.n	8003b3c <ai_mnetwork_destroy+0x38>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8003b2c:	2301      	movs	r3, #1
            gnetworks[i].entry = NULL;
 8003b2e:	019b      	lsls	r3, r3, #6
 8003b30:	2400      	movs	r4, #0
 8003b32:	50d4      	str	r4, [r2, r3]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 8003b34:	4620      	mov	r0, r4
 8003b36:	bd38      	pop	{r3, r4, r5, pc}
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e7f8      	b.n	8003b2e <ai_mnetwork_destroy+0x2a>
            network = AI_HANDLE_NULL;
 8003b3c:	2400      	movs	r4, #0
 8003b3e:	e7f9      	b.n	8003b34 <ai_mnetwork_destroy+0x30>
 8003b40:	200046e0 	.word	0x200046e0

08003b44 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8003b44:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003b46:	f7ff ff4b 	bl	80039e0 <ai_mnetwork_handle>
    if (inn)
 8003b4a:	b128      	cbz	r0, 8003b58 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 8003b4c:	6802      	ldr	r2, [r0, #0]
 8003b4e:	6840      	ldr	r0, [r0, #4]
 8003b50:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8003b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 8003b56:	4710      	bx	r2
}
 8003b58:	bd10      	pop	{r4, pc}

08003b5a <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8003b5a:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003b5c:	f7ff ff40 	bl	80039e0 <ai_mnetwork_handle>
    if (inn)
 8003b60:	b128      	cbz	r0, 8003b6e <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8003b62:	6803      	ldr	r3, [r0, #0]
 8003b64:	6840      	ldr	r0, [r0, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8003b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8003b6c:	4718      	bx	r3
}
 8003b6e:	f241 0014 	movw	r0, #4116	; 0x1014
 8003b72:	bd10      	pop	{r4, pc}

08003b74 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8003b74:	b530      	push	{r4, r5, lr}
 8003b76:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003b78:	f7ff ff32 	bl	80039e0 <ai_mnetwork_handle>
    if (inn) {
 8003b7c:	4604      	mov	r4, r0
 8003b7e:	b168      	cbz	r0, 8003b9c <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8003b80:	6803      	ldr	r3, [r0, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003b82:	2500      	movs	r5, #0
        inn->entry->ai_data_params_get(&par);
 8003b84:	4668      	mov	r0, sp
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003b8a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003b8e:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003b90:	42aa      	cmp	r2, r5
 8003b92:	dc05      	bgt.n	8003ba0 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	4669      	mov	r1, sp
 8003b98:	6860      	ldr	r0, [r4, #4]
 8003b9a:	4798      	blx	r3
    }
    else
        return false;
}
 8003b9c:	b00f      	add	sp, #60	; 0x3c
 8003b9e:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	a803      	add	r0, sp, #12
 8003ba6:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003baa:	3501      	adds	r5, #1
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003bac:	f002 fc18 	bl	80063e0 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003bb0:	e7eb      	b.n	8003b8a <ai_mnetwork_init+0x16>

08003bb2 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8003bb2:	b513      	push	{r0, r1, r4, lr}
 8003bb4:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003bb6:	f7ff ff13 	bl	80039e0 <ai_mnetwork_handle>
    if (inn)
 8003bba:	4603      	mov	r3, r0
 8003bbc:	b140      	cbz	r0, 8003bd0 <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 8003bbe:	6800      	ldr	r0, [r0, #0]
 8003bc0:	9a01      	ldr	r2, [sp, #4]
 8003bc2:	6a04      	ldr	r4, [r0, #32]
 8003bc4:	6858      	ldr	r0, [r3, #4]
 8003bc6:	4623      	mov	r3, r4
    else
        return 0;
}
 8003bc8:	b002      	add	sp, #8
 8003bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 8003bce:	4718      	bx	r3
}
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd10      	pop	{r4, pc}

08003bd4 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8003bd4:	b538      	push	{r3, r4, r5, lr}
 8003bd6:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003bd8:	f7ff ff02 	bl	80039e0 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8003bdc:	b188      	cbz	r0, 8003c02 <ai_mnetwork_get_private_handle+0x2e>
 8003bde:	b181      	cbz	r1, 8003c02 <ai_mnetwork_get_private_handle+0x2e>
 8003be0:	b17d      	cbz	r5, 8003c02 <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8003be2:	6843      	ldr	r3, [r0, #4]
         *pparams = inn->params;
 8003be4:	f100 0408 	add.w	r4, r0, #8
         *phandle = inn->handle;
 8003be8:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8003bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bfa:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 8003bfe:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8003c00:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 8003c02:	f04f 30ff 	mov.w	r0, #4294967295
 8003c06:	e7fb      	b.n	8003c00 <ai_mnetwork_get_private_handle+0x2c>

08003c08 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8003c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8003c0c:	6896      	ldr	r6, [r2, #8]
{
 8003c0e:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8003c10:	2500      	movs	r5, #0
{
 8003c12:	4614      	mov	r4, r2
  if (specifier->flags & FLAG_IS_SIGNED) {
 8003c14:	f016 0304 	ands.w	r3, r6, #4
  buf[idx--] = 0;
 8003c18:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8003c1c:	d02a      	beq.n	8003c74 <_write_number+0x6c>
    if ((int64_t)number < 0) {
 8003c1e:	42a9      	cmp	r1, r5
 8003c20:	da08      	bge.n	8003c34 <_write_number+0x2c>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8003c22:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8003c24:	4240      	negs	r0, r0
      sign_neg = '-';
 8003c26:	f04f 052d 	mov.w	r5, #45	; 0x2d
      specifier->width -= 1;
 8003c2a:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8003c2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	f016 0f08 	tst.w	r6, #8
 8003c38:	f10d 093f 	add.w	r9, sp, #63	; 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003c3c:	f04f 073e 	mov.w	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 8003c40:	f006 0a10 	and.w	sl, r6, #16
 8003c44:	bf14      	ite	ne
 8003c46:	f04f 0841 	movne.w	r8, #65	; 0x41
 8003c4a:	f04f 0861 	moveq.w	r8, #97	; 0x61
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003c4e:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8003c52:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8003c56:	f1ba 0f00 	cmp.w	sl, #0
 8003c5a:	d033      	beq.n	8003cc4 <_write_number+0xbc>
      chr = number & 0x0F;
 8003c5c:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8003c60:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003c62:	2b09      	cmp	r3, #9
      t = number >> 4;
 8003c64:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8003c68:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003c6c:	d906      	bls.n	8003c7c <_write_number+0x74>
 8003c6e:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	e004      	b.n	8003c7e <_write_number+0x76>
  char sign_neg = 0;
 8003c74:	461d      	mov	r5, r3
 8003c76:	e7dd      	b.n	8003c34 <_write_number+0x2c>
    }
    number = t;
    buf[idx--] = chr;
 8003c78:	4617      	mov	r7, r2
 8003c7a:	e7ea      	b.n	8003c52 <_write_number+0x4a>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003c7c:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8003c7e:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 8003c82:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8003c86:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 8003c8a:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 8003c8e:	d1f3      	bne.n	8003c78 <_write_number+0x70>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8003c90:	f006 0101 	and.w	r1, r6, #1
 8003c94:	b155      	cbz	r5, 8003cac <_write_number+0xa4>
 8003c96:	b949      	cbnz	r1, 8003cac <_write_number+0xa4>
    buf[idx--] = sign_neg;
 8003c98:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 8003c9c:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8003ca0:	eb0d 0203 	add.w	r2, sp, r3
 8003ca4:	232d      	movs	r3, #45	; 0x2d
 8003ca6:	f802 3c40 	strb.w	r3, [r2, #-64]
 8003caa:	1eba      	subs	r2, r7, #2
 8003cac:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	f006 0602 	and.w	r6, r6, #2
 8003cb4:	bf14      	ite	ne
 8003cb6:	2130      	movne	r1, #48	; 0x30
 8003cb8:	2120      	moveq	r1, #32
 8003cba:	455b      	cmp	r3, fp
 8003cbc:	dd13      	ble.n	8003ce6 <_write_number+0xde>
 8003cbe:	b166      	cbz	r6, 8003cda <_write_number+0xd2>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8003cc0:	b9a5      	cbnz	r5, 8003cec <_write_number+0xe4>
 8003cc2:	e01c      	b.n	8003cfe <_write_number+0xf6>
      t = number / 10;
 8003cc4:	220a      	movs	r2, #10
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f7fc fc20 	bl	800050c <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8003ccc:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8003cd0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8003cd4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8003cd8:	e7ca      	b.n	8003c70 <_write_number+0x68>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 8003cda:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 8003cde:	f10b 0b01 	add.w	fp, fp, #1
 8003ce2:	3a01      	subs	r2, #1
 8003ce4:	e7e9      	b.n	8003cba <_write_number+0xb2>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 8003ce6:	b155      	cbz	r5, 8003cfe <_write_number+0xf6>
 8003ce8:	455b      	cmp	r3, fp
 8003cea:	d108      	bne.n	8003cfe <_write_number+0xf6>
    buf[idx--] = sign_neg;
 8003cec:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8003cf0:	212d      	movs	r1, #45	; 0x2d
    count++;
 8003cf2:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8003cf6:	3a01      	subs	r2, #1
 8003cf8:	446b      	add	r3, sp
 8003cfa:	f803 1c40 	strb.w	r1, [r3, #-64]
  }

  idx++;


  for(int i = 0; i < count; i++) {
 8003cfe:	eb0d 0602 	add.w	r6, sp, r2
 8003d02:	2500      	movs	r5, #0
 8003d04:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8003d06:	68e3      	ldr	r3, [r4, #12]
 8003d08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d0c:	6920      	ldr	r0, [r4, #16]
 8003d0e:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8003d10:	45ab      	cmp	fp, r5
 8003d12:	d1f7      	bne.n	8003d04 <_write_number+0xfc>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8003d14:	68a3      	ldr	r3, [r4, #8]
 8003d16:	079b      	lsls	r3, r3, #30
 8003d18:	d408      	bmi.n	8003d2c <_write_number+0x124>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	b011      	add	sp, #68	; 0x44
 8003d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8003d22:	3501      	adds	r5, #1
 8003d24:	68e3      	ldr	r3, [r4, #12]
 8003d26:	2120      	movs	r1, #32
 8003d28:	6920      	ldr	r0, [r4, #16]
 8003d2a:	4798      	blx	r3
    while (count < specifier->width) {
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	42ab      	cmp	r3, r5
 8003d30:	dcf7      	bgt.n	8003d22 <_write_number+0x11a>
 8003d32:	e7f2      	b.n	8003d1a <_write_number+0x112>

08003d34 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8003d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d38:	461c      	mov	r4, r3
 8003d3a:	4606      	mov	r6, r0
  char c, t;
  int count = 0;
 8003d3c:	2300      	movs	r3, #0
{
 8003d3e:	460f      	mov	r7, r1
 8003d40:	ed2d 8b02 	vpush	{d8}
 8003d44:	b09b      	sub	sp, #108	; 0x6c
  int count = 0;
 8003d46:	9301      	str	r3, [sp, #4]
  return *(*fmtP)++;
 8003d48:	4613      	mov	r3, r2
 8003d4a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003d4e:	9302      	str	r3, [sp, #8]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8003d50:	b929      	cbnz	r1, 8003d5e <vlc_print+0x2a>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8003d52:	9801      	ldr	r0, [sp, #4]
 8003d54:	b01b      	add	sp, #108	; 0x6c
 8003d56:	ecbd 8b02 	vpop	{d8}
 8003d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8003d5e:	290a      	cmp	r1, #10
 8003d60:	d104      	bne.n	8003d6c <vlc_print+0x38>
      putc_fct(user, c);
 8003d62:	4638      	mov	r0, r7
 8003d64:	47b0      	blx	r6
      count++;
 8003d66:	9b01      	ldr	r3, [sp, #4]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	e11d      	b.n	8003fa8 <vlc_print+0x274>
    else if (c == '%')
 8003d6c:	2925      	cmp	r1, #37	; 0x25
 8003d6e:	d1f8      	bne.n	8003d62 <vlc_print+0x2e>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8003d70:	2300      	movs	r3, #0
 8003d72:	f04f 0a0a 	mov.w	sl, #10
 8003d76:	9709      	str	r7, [sp, #36]	; 0x24
 8003d78:	469c      	mov	ip, r3
 8003d7a:	469e      	mov	lr, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4698      	mov	r8, r3
 8003d80:	4618      	mov	r0, r3
      bool has_precision = false;
 8003d82:	4699      	mov	r9, r3
      int long_type = 0;
 8003d84:	9303      	str	r3, [sp, #12]
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8003d86:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003d8a:	e9cd 3607 	strd	r3, r6, [sp, #28]
  return *(*fmtP)++;
 8003d8e:	9d02      	ldr	r5, [sp, #8]
 8003d90:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003d94:	9502      	str	r5, [sp, #8]
        if (!c)
 8003d96:	b321      	cbz	r1, 8003de2 <vlc_print+0xae>
        else if (c == '0')
 8003d98:	2939      	cmp	r1, #57	; 0x39
 8003d9a:	d814      	bhi.n	8003dc6 <vlc_print+0x92>
 8003d9c:	292c      	cmp	r1, #44	; 0x2c
 8003d9e:	d91d      	bls.n	8003ddc <vlc_print+0xa8>
 8003da0:	f1a1 052d 	sub.w	r5, r1, #45	; 0x2d
 8003da4:	2d0c      	cmp	r5, #12
 8003da6:	d810      	bhi.n	8003dca <vlc_print+0x96>
 8003da8:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003dac:	02210048 	.word	0x02210048
 8003db0:	0033000f 	.word	0x0033000f
 8003db4:	004b004b 	.word	0x004b004b
 8003db8:	004b004b 	.word	0x004b004b
 8003dbc:	004b004b 	.word	0x004b004b
 8003dc0:	004b004b 	.word	0x004b004b
 8003dc4:	004b      	.short	0x004b
 8003dc6:	296c      	cmp	r1, #108	; 0x6c
 8003dc8:	d045      	beq.n	8003e56 <vlc_print+0x122>
          switch(c)
 8003dca:	2978      	cmp	r1, #120	; 0x78
 8003dcc:	d809      	bhi.n	8003de2 <vlc_print+0xae>
 8003dce:	2962      	cmp	r1, #98	; 0x62
 8003dd0:	d845      	bhi.n	8003e5e <vlc_print+0x12a>
 8003dd2:	2946      	cmp	r1, #70	; 0x46
 8003dd4:	f000 8136 	beq.w	8004044 <vlc_print+0x310>
 8003dd8:	2958      	cmp	r1, #88	; 0x58
 8003dda:	d073      	beq.n	8003ec4 <vlc_print+0x190>
 8003ddc:	2925      	cmp	r1, #37	; 0x25
 8003dde:	f000 8099 	beq.w	8003f14 <vlc_print+0x1e0>
 8003de2:	b10b      	cbz	r3, 8003de8 <vlc_print+0xb4>
 8003de4:	f8cd c01c 	str.w	ip, [sp, #28]
 8003de8:	f1be 0f00 	cmp.w	lr, #0
 8003dec:	d000      	beq.n	8003df0 <vlc_print+0xbc>
 8003dee:	9206      	str	r2, [sp, #24]
 8003df0:	f1b8 0f00 	cmp.w	r8, #0
 8003df4:	d000      	beq.n	8003df8 <vlc_print+0xc4>
 8003df6:	9005      	str	r0, [sp, #20]
        putc_fct(user, '<');
 8003df8:	213c      	movs	r1, #60	; 0x3c
 8003dfa:	4638      	mov	r0, r7
 8003dfc:	47b0      	blx	r6
        putc_fct(user, '!');
 8003dfe:	2121      	movs	r1, #33	; 0x21
 8003e00:	4638      	mov	r0, r7
        va_arg(vl, signed long);
 8003e02:	3404      	adds	r4, #4
        putc_fct(user, '!');
 8003e04:	47b0      	blx	r6
        putc_fct(user, '>');
 8003e06:	213e      	movs	r1, #62	; 0x3e
 8003e08:	4638      	mov	r0, r7
 8003e0a:	47b0      	blx	r6
        count += 3;
 8003e0c:	9b01      	ldr	r3, [sp, #4]
 8003e0e:	3303      	adds	r3, #3
 8003e10:	e0ca      	b.n	8003fa8 <vlc_print+0x274>
          if (!specifier.width && !specifier.precision) {
 8003e12:	ea50 0102 	orrs.w	r1, r0, r2
 8003e16:	d105      	bne.n	8003e24 <vlc_print+0xf0>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8003e18:	f04c 0c01 	orr.w	ip, ip, #1
 8003e1c:	460a      	mov	r2, r1
 8003e1e:	4608      	mov	r0, r1
 8003e20:	2301      	movs	r3, #1
 8003e22:	e7b4      	b.n	8003d8e <vlc_print+0x5a>
          } else if (has_precision) {
 8003e24:	f1b9 0f00 	cmp.w	r9, #0
 8003e28:	d003      	beq.n	8003e32 <vlc_print+0xfe>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8003e2a:	fb0a f202 	mul.w	r2, sl, r2
 8003e2e:	46ce      	mov	lr, r9
 8003e30:	e7ad      	b.n	8003d8e <vlc_print+0x5a>
            specifier.width = specifier.width * 10 + (c - '0');
 8003e32:	fb0a f000 	mul.w	r0, sl, r0
            specifier.width = specifier.width * 10 + (c - '0');
 8003e36:	f04f 0801 	mov.w	r8, #1
 8003e3a:	e7a8      	b.n	8003d8e <vlc_print+0x5a>
          specifier.flags |= FLAG_NEG_PAD;
 8003e3c:	f04c 0c02 	orr.w	ip, ip, #2
 8003e40:	e7ee      	b.n	8003e20 <vlc_print+0xec>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8003e42:	3930      	subs	r1, #48	; 0x30
          if (has_precision) {
 8003e44:	f1b9 0f00 	cmp.w	r9, #0
 8003e48:	d002      	beq.n	8003e50 <vlc_print+0x11c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8003e4a:	fb0a 1202 	mla	r2, sl, r2, r1
 8003e4e:	e7ee      	b.n	8003e2e <vlc_print+0xfa>
            specifier.width = specifier.width * 10 + (c - '0');
 8003e50:	fb0a 1000 	mla	r0, sl, r0, r1
 8003e54:	e7ef      	b.n	8003e36 <vlc_print+0x102>
          long_type += 1;
 8003e56:	9903      	ldr	r1, [sp, #12]
 8003e58:	3101      	adds	r1, #1
 8003e5a:	9103      	str	r1, [sp, #12]
 8003e5c:	e797      	b.n	8003d8e <vlc_print+0x5a>
          switch(c)
 8003e5e:	3963      	subs	r1, #99	; 0x63
 8003e60:	2915      	cmp	r1, #21
 8003e62:	d8be      	bhi.n	8003de2 <vlc_print+0xae>
 8003e64:	f20f 0904 	addw	r9, pc, #4
 8003e68:	f859 f021 	ldr.w	pc, [r9, r1, lsl #2]
 8003e6c:	08003f2f 	.word	0x08003f2f
 8003e70:	0800400d 	.word	0x0800400d
 8003e74:	08003de3 	.word	0x08003de3
 8003e78:	08004045 	.word	0x08004045
 8003e7c:	08003de3 	.word	0x08003de3
 8003e80:	08003de3 	.word	0x08003de3
 8003e84:	0800400d 	.word	0x0800400d
 8003e88:	08003de3 	.word	0x08003de3
 8003e8c:	08003de3 	.word	0x08003de3
 8003e90:	08003de3 	.word	0x08003de3
 8003e94:	08003de3 	.word	0x08003de3
 8003e98:	08003de3 	.word	0x08003de3
 8003e9c:	08003de3 	.word	0x08003de3
 8003ea0:	08003ff1 	.word	0x08003ff1
 8003ea4:	08003de3 	.word	0x08003de3
 8003ea8:	08003de3 	.word	0x08003de3
 8003eac:	08003f4b 	.word	0x08003f4b
 8003eb0:	08003de3 	.word	0x08003de3
 8003eb4:	080041f5 	.word	0x080041f5
 8003eb8:	08003de3 	.word	0x08003de3
 8003ebc:	08003de3 	.word	0x08003de3
 8003ec0:	08003ee5 	.word	0x08003ee5
 8003ec4:	b10b      	cbz	r3, 8003eca <vlc_print+0x196>
 8003ec6:	f8cd c01c 	str.w	ip, [sp, #28]
 8003eca:	f1be 0f00 	cmp.w	lr, #0
 8003ece:	d000      	beq.n	8003ed2 <vlc_print+0x19e>
 8003ed0:	9206      	str	r2, [sp, #24]
 8003ed2:	f1b8 0f00 	cmp.w	r8, #0
 8003ed6:	d000      	beq.n	8003eda <vlc_print+0x1a6>
 8003ed8:	9005      	str	r0, [sp, #20]
            specifier.flags |= FLAG_CAPS;
 8003eda:	9b07      	ldr	r3, [sp, #28]
 8003edc:	f043 0308 	orr.w	r3, r3, #8
 8003ee0:	9307      	str	r3, [sp, #28]
 8003ee2:	e00a      	b.n	8003efa <vlc_print+0x1c6>
 8003ee4:	b10b      	cbz	r3, 8003eea <vlc_print+0x1b6>
 8003ee6:	f8cd c01c 	str.w	ip, [sp, #28]
 8003eea:	f1be 0f00 	cmp.w	lr, #0
 8003eee:	d000      	beq.n	8003ef2 <vlc_print+0x1be>
 8003ef0:	9206      	str	r2, [sp, #24]
 8003ef2:	f1b8 0f00 	cmp.w	r8, #0
 8003ef6:	d000      	beq.n	8003efa <vlc_print+0x1c6>
 8003ef8:	9005      	str	r0, [sp, #20]
            specifier.flags |= FLAG_HEX;
 8003efa:	9b07      	ldr	r3, [sp, #28]
            count += _write_number(val, &specifier);
 8003efc:	aa05      	add	r2, sp, #20
 8003efe:	f854 0b04 	ldr.w	r0, [r4], #4
 8003f02:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8003f04:	f043 0310 	orr.w	r3, r3, #16
 8003f08:	9307      	str	r3, [sp, #28]
            count += _write_number(val, &specifier);
 8003f0a:	f7ff fe7d 	bl	8003c08 <_write_number>
 8003f0e:	9b01      	ldr	r3, [sp, #4]
 8003f10:	4403      	add	r3, r0
 8003f12:	e049      	b.n	8003fa8 <vlc_print+0x274>
 8003f14:	b10b      	cbz	r3, 8003f1a <vlc_print+0x1e6>
 8003f16:	f8cd c01c 	str.w	ip, [sp, #28]
 8003f1a:	f1be 0f00 	cmp.w	lr, #0
 8003f1e:	d000      	beq.n	8003f22 <vlc_print+0x1ee>
 8003f20:	9206      	str	r2, [sp, #24]
 8003f22:	f1b8 0f00 	cmp.w	r8, #0
 8003f26:	d000      	beq.n	8003f2a <vlc_print+0x1f6>
 8003f28:	9005      	str	r0, [sp, #20]
            putc_fct(user, c);
 8003f2a:	2125      	movs	r1, #37	; 0x25
 8003f2c:	e719      	b.n	8003d62 <vlc_print+0x2e>
 8003f2e:	b10b      	cbz	r3, 8003f34 <vlc_print+0x200>
 8003f30:	f8cd c01c 	str.w	ip, [sp, #28]
 8003f34:	f1be 0f00 	cmp.w	lr, #0
 8003f38:	d000      	beq.n	8003f3c <vlc_print+0x208>
 8003f3a:	9206      	str	r2, [sp, #24]
 8003f3c:	f1b8 0f00 	cmp.w	r8, #0
 8003f40:	d000      	beq.n	8003f44 <vlc_print+0x210>
 8003f42:	9005      	str	r0, [sp, #20]
            putc_fct(user, t);
 8003f44:	f814 1b04 	ldrb.w	r1, [r4], #4
 8003f48:	e70b      	b.n	8003d62 <vlc_print+0x2e>
 8003f4a:	b10b      	cbz	r3, 8003f50 <vlc_print+0x21c>
 8003f4c:	f8cd c01c 	str.w	ip, [sp, #28]
 8003f50:	f1be 0f00 	cmp.w	lr, #0
 8003f54:	d000      	beq.n	8003f58 <vlc_print+0x224>
 8003f56:	9206      	str	r2, [sp, #24]
 8003f58:	f1b8 0f00 	cmp.w	r8, #0
 8003f5c:	d000      	beq.n	8003f60 <vlc_print+0x22c>
 8003f5e:	9005      	str	r0, [sp, #20]
            if (!str) str = "(null)";
 8003f60:	4bac      	ldr	r3, [pc, #688]	; (8004214 <vlc_print+0x4e0>)
            str = va_arg(vl, char*);
 8003f62:	f854 bb04 	ldr.w	fp, [r4], #4
            if (!str) str = "(null)";
 8003f66:	f1bb 0f00 	cmp.w	fp, #0
 8003f6a:	bf08      	it	eq
 8003f6c:	469b      	moveq	fp, r3
  int len = strlen(str);
 8003f6e:	4658      	mov	r0, fp
 8003f70:	f7fc f9b6 	bl	80002e0 <strlen>
  if (specifier->precision) {
 8003f74:	9b06      	ldr	r3, [sp, #24]
  int len = strlen(str);
 8003f76:	4681      	mov	r9, r0
  if (specifier->precision) {
 8003f78:	b113      	cbz	r3, 8003f80 <vlc_print+0x24c>
    len = (len > specifier->precision)?specifier->precision:len;
 8003f7a:	4298      	cmp	r0, r3
 8003f7c:	bfa8      	it	ge
 8003f7e:	4699      	movge	r9, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8003f80:	9b07      	ldr	r3, [sp, #28]
 8003f82:	f013 0a02 	ands.w	sl, r3, #2
 8003f86:	d01c      	beq.n	8003fc2 <vlc_print+0x28e>
  int count = 0;
 8003f88:	f04f 0800 	mov.w	r8, #0
 8003f8c:	465b      	mov	r3, fp
  for (int i = 0; i < len; i++) {
 8003f8e:	eba3 020b 	sub.w	r2, r3, fp
 8003f92:	4591      	cmp	r9, r2
 8003f94:	dc17      	bgt.n	8003fc6 <vlc_print+0x292>
 8003f96:	f1b9 0f00 	cmp.w	r9, #0
 8003f9a:	bfa8      	it	ge
 8003f9c:	44c8      	addge	r8, r9
  if (specifier->flags & FLAG_NEG_PAD) {
 8003f9e:	f1ba 0f00 	cmp.w	sl, #0
 8003fa2:	d122      	bne.n	8003fea <vlc_print+0x2b6>
            count += _write_string(str, &specifier);
 8003fa4:	9b01      	ldr	r3, [sp, #4]
 8003fa6:	4443      	add	r3, r8
      count++;
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	e049      	b.n	8004040 <vlc_print+0x30c>
      _WRITE_C(' ');
 8003fac:	f108 0801 	add.w	r8, r8, #1
 8003fb0:	2120      	movs	r1, #32
 8003fb2:	4638      	mov	r0, r7
 8003fb4:	47b0      	blx	r6
    for(int i = len; i < specifier->width; i++) {
 8003fb6:	eb09 0308 	add.w	r3, r9, r8
 8003fba:	9a05      	ldr	r2, [sp, #20]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	dcf5      	bgt.n	8003fac <vlc_print+0x278>
 8003fc0:	e7e4      	b.n	8003f8c <vlc_print+0x258>
  int count = 0;
 8003fc2:	46d0      	mov	r8, sl
 8003fc4:	e7f7      	b.n	8003fb6 <vlc_print+0x282>
    _WRITE_C(*str++);
 8003fc6:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003fca:	4638      	mov	r0, r7
 8003fcc:	9303      	str	r3, [sp, #12]
 8003fce:	47b0      	blx	r6
 8003fd0:	9b03      	ldr	r3, [sp, #12]
  for (int i = 0; i < len; i++) {
 8003fd2:	e7dc      	b.n	8003f8e <vlc_print+0x25a>
      _WRITE_C(' ');
 8003fd4:	f108 0801 	add.w	r8, r8, #1
 8003fd8:	2120      	movs	r1, #32
 8003fda:	4638      	mov	r0, r7
 8003fdc:	47b0      	blx	r6
    for(int i = len; i < specifier->width; i++) {
 8003fde:	eb09 0308 	add.w	r3, r9, r8
 8003fe2:	9a05      	ldr	r2, [sp, #20]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	dcf5      	bgt.n	8003fd4 <vlc_print+0x2a0>
 8003fe8:	e7dc      	b.n	8003fa4 <vlc_print+0x270>
 8003fea:	eba9 0908 	sub.w	r9, r9, r8
 8003fee:	e7f6      	b.n	8003fde <vlc_print+0x2aa>
 8003ff0:	b10b      	cbz	r3, 8003ff6 <vlc_print+0x2c2>
 8003ff2:	f8cd c01c 	str.w	ip, [sp, #28]
 8003ff6:	f1be 0f00 	cmp.w	lr, #0
 8003ffa:	d000      	beq.n	8003ffe <vlc_print+0x2ca>
 8003ffc:	9206      	str	r2, [sp, #24]
            specifier.flags |= FLAG_ZERO_EXTEND;
 8003ffe:	9b07      	ldr	r3, [sp, #28]
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	9307      	str	r3, [sp, #28]
            specifier.width = 8;
 8004006:	2308      	movs	r3, #8
 8004008:	9305      	str	r3, [sp, #20]
 800400a:	e766      	b.n	8003eda <vlc_print+0x1a6>
 800400c:	b10b      	cbz	r3, 8004012 <vlc_print+0x2de>
 800400e:	f8cd c01c 	str.w	ip, [sp, #28]
 8004012:	f1be 0f00 	cmp.w	lr, #0
 8004016:	d000      	beq.n	800401a <vlc_print+0x2e6>
 8004018:	9206      	str	r2, [sp, #24]
 800401a:	f1b8 0f00 	cmp.w	r8, #0
 800401e:	d000      	beq.n	8004022 <vlc_print+0x2ee>
 8004020:	9005      	str	r0, [sp, #20]
            specifier.flags |= FLAG_IS_SIGNED;
 8004022:	9b07      	ldr	r3, [sp, #28]
            val = va_arg(vl, unsigned int);
 8004024:	f104 0804 	add.w	r8, r4, #4
            specifier.flags |= FLAG_IS_SIGNED;
 8004028:	f043 0304 	orr.w	r3, r3, #4
 800402c:	9307      	str	r3, [sp, #28]
                val = va_arg(vl, signed int);
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	17c1      	asrs	r1, r0, #31
            count += _write_number(val, &specifier);
 8004032:	aa05      	add	r2, sp, #20
            break;
 8004034:	4644      	mov	r4, r8
            count += _write_number(val, &specifier);
 8004036:	f7ff fde7 	bl	8003c08 <_write_number>
 800403a:	9b01      	ldr	r3, [sp, #4]
 800403c:	4403      	add	r3, r0
 800403e:	9301      	str	r3, [sp, #4]
            break;
 8004040:	9a02      	ldr	r2, [sp, #8]
 8004042:	e681      	b.n	8003d48 <vlc_print+0x14>
 8004044:	b10b      	cbz	r3, 800404a <vlc_print+0x316>
 8004046:	f8cd c01c 	str.w	ip, [sp, #28]
 800404a:	f1be 0f00 	cmp.w	lr, #0
 800404e:	d000      	beq.n	8004052 <vlc_print+0x31e>
 8004050:	9206      	str	r2, [sp, #24]
 8004052:	f1b8 0f00 	cmp.w	r8, #0
 8004056:	d000      	beq.n	800405a <vlc_print+0x326>
 8004058:	9005      	str	r0, [sp, #20]
            dbl = va_arg(vl, double);
 800405a:	3407      	adds	r4, #7
            if (specifier.precision == 0)
 800405c:	9b06      	ldr	r3, [sp, #24]
            dbl = va_arg(vl, double);
 800405e:	f024 0407 	bic.w	r4, r4, #7
 8004062:	ecb4 8b02 	vldmia	r4!, {d8}
            if (specifier.precision == 0)
 8004066:	b90b      	cbnz	r3, 800406c <vlc_print+0x338>
              specifier.precision = 6;
 8004068:	2306      	movs	r3, #6
 800406a:	9306      	str	r3, [sp, #24]
  double mul = 1.0;
 800406c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
  for (int i=0;i <specifier->precision; i++)
 8004070:	f8dd 8018 	ldr.w	r8, [sp, #24]
    mul *= 10;
 8004074:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
  for (int i=0;i <specifier->precision; i++)
 8004078:	2300      	movs	r3, #0
 800407a:	4543      	cmp	r3, r8
 800407c:	f2c0 80ab 	blt.w	80041d6 <vlc_print+0x4a2>
  if (is_signed)
 8004080:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8004084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004088:	f140 80a9 	bpl.w	80041de <vlc_print+0x4aa>
    number = -number;
 800408c:	eeb1 5b48 	vneg.f64	d5, d8
  number += (half_ / mul);
 8004090:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
  uint32_t count = 0;
 8004094:	f04f 0900 	mov.w	r9, #0
  uint32_t idx = sizeof(buf) - 1;
 8004098:	f04f 0a3f 	mov.w	sl, #63	; 0x3f
  number += (half_ / mul);
 800409c:	ee84 6b07 	vdiv.f64	d6, d4, d7
 80040a0:	ee36 6b05 	vadd.f64	d6, d6, d5
  val = (uint64_t)(number * mul);
 80040a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80040a8:	ec51 0b17 	vmov	r0, r1, d7
 80040ac:	f7fc fa7c 	bl	80005a8 <__aeabi_d2ulz>
 80040b0:	4602      	mov	r2, r0
    uint64_t t = val / 10;
 80040b2:	4693      	mov	fp, r2
 80040b4:	2300      	movs	r3, #0
 80040b6:	220a      	movs	r2, #10
 80040b8:	460d      	mov	r5, r1
 80040ba:	4658      	mov	r0, fp
 80040bc:	f7fc fa26 	bl	800050c <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 80040c0:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
 80040c4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    uint64_t t = val / 10;
 80040c8:	4602      	mov	r2, r0
    buf[idx--] = chr;
 80040ca:	f10a 3cff 	add.w	ip, sl, #4294967295
    chr = (val - t * 10) + '0';
 80040ce:	ebae 0043 	sub.w	r0, lr, r3, lsl #1
    buf[idx--] = chr;
 80040d2:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 80040d6:	446b      	add	r3, sp
 80040d8:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 80040dc:	f109 0301 	add.w	r3, r9, #1
    if (count == specifier->precision) {
 80040e0:	4598      	cmp	r8, r3
      buf[idx--] = '.';
 80040e2:	bf09      	itett	eq
 80040e4:	f10c 0368 	addeq.w	r3, ip, #104	; 0x68
    count++;
 80040e8:	4699      	movne	r9, r3
      buf[idx--] = '.';
 80040ea:	f1aa 0a02 	subeq.w	sl, sl, #2
      count++;
 80040ee:	f109 0902 	addeq.w	r9, r9, #2
      buf[idx--] = '.';
 80040f2:	bf05      	ittet	eq
 80040f4:	eb0d 0c03 	addeq.w	ip, sp, r3
 80040f8:	232e      	moveq	r3, #46	; 0x2e
    buf[idx--] = chr;
 80040fa:	46e2      	movne	sl, ip
      buf[idx--] = '.';
 80040fc:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
  } while (val);
 8004100:	f1bb 0f0a 	cmp.w	fp, #10
 8004104:	462b      	mov	r3, r5
 8004106:	f173 0300 	sbcs.w	r3, r3, #0
 800410a:	d2d2      	bcs.n	80040b2 <vlc_print+0x37e>
    buf[idx--] = '0';
 800410c:	45c1      	cmp	r9, r8
 800410e:	f1c8 0001 	rsb	r0, r8, #1
 8004112:	eba8 0b09 	sub.w	fp, r8, r9
 8004116:	ab0a      	add	r3, sp, #40	; 0x28
 8004118:	4448      	add	r0, r9
 800411a:	bf84      	itt	hi
 800411c:	2001      	movhi	r0, #1
 800411e:	f04f 0b00 	movhi.w	fp, #0
 8004122:	2130      	movs	r1, #48	; 0x30
 8004124:	4450      	add	r0, sl
 8004126:	465a      	mov	r2, fp
 8004128:	4418      	add	r0, r3
 800412a:	f00a ff50 	bl	800efce <memset>
 800412e:	eba9 0308 	sub.w	r3, r9, r8
 8004132:	45c1      	cmp	r9, r8
 8004134:	bf88      	it	hi
 8004136:	2300      	movhi	r3, #0
 8004138:	44d9      	add	r9, fp
  if (count == specifier->precision) {
 800413a:	45c8      	cmp	r8, r9
 800413c:	449a      	add	sl, r3
 800413e:	f108 0801 	add.w	r8, r8, #1
 8004142:	d108      	bne.n	8004156 <vlc_print+0x422>
    buf[idx--] = '.';
 8004144:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 8004148:	222e      	movs	r2, #46	; 0x2e
    count++;
 800414a:	46c1      	mov	r9, r8
    buf[idx--] = '.';
 800414c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004150:	446b      	add	r3, sp
 8004152:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (count == specifier->precision + 1)
 8004156:	45c8      	cmp	r8, r9
 8004158:	d109      	bne.n	800416e <vlc_print+0x43a>
    buf[idx--] = '0';
 800415a:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 800415e:	2230      	movs	r2, #48	; 0x30
    count++;
 8004160:	f109 0901 	add.w	r9, r9, #1
    buf[idx--] = '0';
 8004164:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004168:	446b      	add	r3, sp
 800416a:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (is_signed) {
 800416e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8004172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004176:	d509      	bpl.n	800418c <vlc_print+0x458>
    buf[idx--] = '-';
 8004178:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 800417c:	222d      	movs	r2, #45	; 0x2d
    count++;
 800417e:	f109 0901 	add.w	r9, r9, #1
    buf[idx--] = '-';
 8004182:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004186:	446b      	add	r3, sp
 8004188:	f803 2c40 	strb.w	r2, [r3, #-64]
  while (count < specifier->width) {
 800418c:	f8dd 8014 	ldr.w	r8, [sp, #20]
    buf[idx--] = ' ';
 8004190:	ab0a      	add	r3, sp, #40	; 0x28
 8004192:	2120      	movs	r1, #32
 8004194:	45c1      	cmp	r9, r8
 8004196:	f1c8 0001 	rsb	r0, r8, #1
 800419a:	eba8 0b09 	sub.w	fp, r8, r9
 800419e:	4448      	add	r0, r9
 80041a0:	bf84      	itt	hi
 80041a2:	2001      	movhi	r0, #1
 80041a4:	f04f 0b00 	movhi.w	fp, #0
 80041a8:	4450      	add	r0, sl
 80041aa:	465a      	mov	r2, fp
 80041ac:	44cb      	add	fp, r9
 80041ae:	4418      	add	r0, r3
 80041b0:	f00a ff0d 	bl	800efce <memset>
 80041b4:	eba9 0308 	sub.w	r3, r9, r8
 80041b8:	aa0a      	add	r2, sp, #40	; 0x28
 80041ba:	45c1      	cmp	r9, r8
 80041bc:	bf88      	it	hi
 80041be:	2300      	movhi	r3, #0
  for(int i = 0; i < count; i++) {
 80041c0:	4453      	add	r3, sl
 80041c2:	eb02 0903 	add.w	r9, r2, r3
 80041c6:	445b      	add	r3, fp
 80041c8:	eb03 0802 	add.w	r8, r3, r2
 80041cc:	45c8      	cmp	r8, r9
 80041ce:	d109      	bne.n	80041e4 <vlc_print+0x4b0>
            count += _write_double(dbl, &specifier);
 80041d0:	9b01      	ldr	r3, [sp, #4]
 80041d2:	445b      	add	r3, fp
 80041d4:	e6e8      	b.n	8003fa8 <vlc_print+0x274>
    mul *= 10;
 80041d6:	ee27 7b06 	vmul.f64	d7, d7, d6
  for (int i=0;i <specifier->precision; i++)
 80041da:	3301      	adds	r3, #1
 80041dc:	e74d      	b.n	800407a <vlc_print+0x346>
 80041de:	eeb0 5b48 	vmov.f64	d5, d8
 80041e2:	e755      	b.n	8004090 <vlc_print+0x35c>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80041e4:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80041e8:	4638      	mov	r0, r7
 80041ea:	47b0      	blx	r6
  for(int i = 0; i < count; i++) {
 80041ec:	e7ee      	b.n	80041cc <vlc_print+0x498>
        if (!c)
 80041ee:	f04f 0901 	mov.w	r9, #1
 80041f2:	e5cc      	b.n	8003d8e <vlc_print+0x5a>
 80041f4:	b10b      	cbz	r3, 80041fa <vlc_print+0x4c6>
 80041f6:	f8cd c01c 	str.w	ip, [sp, #28]
 80041fa:	f1be 0f00 	cmp.w	lr, #0
 80041fe:	d000      	beq.n	8004202 <vlc_print+0x4ce>
 8004200:	9206      	str	r2, [sp, #24]
 8004202:	f1b8 0f00 	cmp.w	r8, #0
 8004206:	d000      	beq.n	800420a <vlc_print+0x4d6>
 8004208:	9005      	str	r0, [sp, #20]
            val = va_arg(vl, unsigned int);
 800420a:	46a0      	mov	r8, r4
 800420c:	2100      	movs	r1, #0
 800420e:	f858 0b04 	ldr.w	r0, [r8], #4
 8004212:	e70e      	b.n	8004032 <vlc_print+0x2fe>
 8004214:	08011678 	.word	0x08011678

08004218 <ai_linear_get_report>:


AI_API_ENTRY
ai_bool ai_linear_get_report(
  ai_handle network, ai_network_report* report)
{
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	460d      	mov	r5, r1
 800421c:	b0a2      	sub	sp, #136	; 0x88
 800421e:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004220:	f002 fa78 	bl	8006714 <ai_platform_context_acquire>
 8004224:	4604      	mov	r4, r0

  if (report && net_ctx)
 8004226:	2d00      	cmp	r5, #0
 8004228:	d035      	beq.n	8004296 <ai_linear_get_report+0x7e>
 800422a:	2800      	cmp	r0, #0
 800422c:	d030      	beq.n	8004290 <ai_linear_get_report+0x78>
  {
    ai_network_report r = {
 800422e:	2278      	movs	r2, #120	; 0x78
 8004230:	2100      	movs	r1, #0
 8004232:	a804      	add	r0, sp, #16
 8004234:	f00a fecb 	bl	800efce <memset>
 8004238:	4b18      	ldr	r3, [pc, #96]	; (800429c <ai_linear_get_report+0x84>)
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	4b18      	ldr	r3, [pc, #96]	; (80042a0 <ai_linear_get_report+0x88>)
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	4b18      	ldr	r3, [pc, #96]	; (80042a4 <ai_linear_get_report+0x8c>)
 8004242:	9302      	str	r3, [sp, #8]
 8004244:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <ai_linear_get_report+0x90>)
 8004246:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_LINEAR_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004248:	f002 fa18 	bl	800667c <ai_platform_runtime_get_revision>
    ai_network_report r = {
 800424c:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 800424e:	f002 fa19 	bl	8006684 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8004252:	4b16      	ldr	r3, [pc, #88]	; (80042ac <ai_linear_get_report+0x94>)
      .runtime_version   = ai_platform_runtime_get_version(),
 8004254:	9005      	str	r0, [sp, #20]
    ai_network_report r = {
 8004256:	9306      	str	r3, [sp, #24]
 8004258:	2301      	movs	r3, #1
 800425a:	f88d 301c 	strb.w	r3, [sp, #28]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 800425e:	f002 fa29 	bl	80066b4 <ai_platform_api_get_version>
 8004262:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004264:	f002 fa3e 	bl	80066e4 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8004268:	2202      	movs	r2, #2
 800426a:	2300      	movs	r3, #0
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800426c:	900a      	str	r0, [sp, #40]	; 0x28
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x399c8060,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800426e:	4669      	mov	r1, sp
 8004270:	4630      	mov	r0, r6
    ai_network_report r = {
 8004272:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004276:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <ai_linear_get_report+0x98>)
 8004278:	9311      	str	r3, [sp, #68]	; 0x44
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <ai_linear_get_report+0x9c>)
 800427c:	9320      	str	r3, [sp, #128]	; 0x80
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800427e:	f002 fa63 	bl	8006748 <ai_platform_api_get_network_report>
 8004282:	4604      	mov	r4, r0
 8004284:	b120      	cbz	r0, 8004290 <ai_linear_get_report+0x78>

    *report = r;
 8004286:	2288      	movs	r2, #136	; 0x88
 8004288:	4669      	mov	r1, sp
 800428a:	4628      	mov	r0, r5
 800428c:	f00a ff41 	bl	800f112 <memcpy>
    return true;
  }
  return false;
}
 8004290:	4620      	mov	r0, r4
 8004292:	b022      	add	sp, #136	; 0x88
 8004294:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8004296:	462c      	mov	r4, r5
 8004298:	e7fa      	b.n	8004290 <ai_linear_get_report+0x78>
 800429a:	bf00      	nop
 800429c:	08011614 	.word	0x08011614
 80042a0:	0801167f 	.word	0x0801167f
 80042a4:	080116a2 	.word	0x080116a2
 80042a8:	080116bb 	.word	0x080116bb
 80042ac:	0801de69 	.word	0x0801de69
 80042b0:	a1facade 	.word	0xa1facade
 80042b4:	399c8060 	.word	0x399c8060

080042b8 <ai_linear_get_error>:


AI_API_ENTRY
ai_error ai_linear_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 80042b8:	f002 ba34 	b.w	8006724 <ai_platform_network_get_error>

080042bc <ai_linear_create>:


AI_API_ENTRY
ai_error ai_linear_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80042bc:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 80042be:	2305      	movs	r3, #5
 80042c0:	2200      	movs	r2, #0
 80042c2:	e9cd 3200 	strd	r3, r2, [sp]
 80042c6:	2301      	movs	r3, #1
 80042c8:	4a02      	ldr	r2, [pc, #8]	; (80042d4 <ai_linear_create+0x18>)
 80042ca:	f002 fc07 	bl	8006adc <ai_platform_network_create>
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80042ce:	b003      	add	sp, #12
 80042d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80042d4:	200001a8 	.word	0x200001a8

080042d8 <ai_linear_destroy>:


AI_API_ENTRY
ai_handle ai_linear_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 80042d8:	f002 bc42 	b.w	8006b60 <ai_platform_network_destroy>

080042dc <ai_linear_init>:


AI_API_ENTRY
ai_bool ai_linear_init(
  ai_handle network, const ai_network_params* params)
{
 80042dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042e0:	4607      	mov	r7, r0
 80042e2:	460e      	mov	r6, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 80042e4:	f002 fc4e 	bl	8006b84 <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 80042e8:	4604      	mov	r4, r0
 80042ea:	b388      	cbz	r0, 8004350 <ai_linear_init+0x74>
  if (ai_platform_get_weights_map(g_linear_weights_map, 1, params)) {
 80042ec:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800437c <ai_linear_init+0xa0>
 80042f0:	4632      	mov	r2, r6
 80042f2:	2101      	movs	r1, #1
 80042f4:	4640      	mov	r0, r8
 80042f6:	f002 f8f7 	bl	80064e8 <ai_platform_get_weights_map>
 80042fa:	4605      	mov	r5, r0
 80042fc:	b350      	cbz	r0, 8004354 <ai_linear_init+0x78>
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80042fe:	4a1b      	ldr	r2, [pc, #108]	; (800436c <ai_linear_init+0x90>)
 8004300:	6813      	ldr	r3, [r2, #0]
 8004302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004306:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_linear_weights_map[0] + 0);
 8004308:	f8d8 3000 	ldr.w	r3, [r8]
    gemm_0_weights_array.data_start = AI_PTR(g_linear_weights_map[0] + 0);
 800430c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8004310:	4a17      	ldr	r2, [pc, #92]	; (8004370 <ai_linear_init+0x94>)
    gemm_0_bias_array.data = AI_PTR(g_linear_weights_map[0] + 4);
 8004312:	3304      	adds	r3, #4
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8004314:	6811      	ldr	r1, [r2, #0]
 8004316:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    gemm_0_bias_array.data_start = AI_PTR(g_linear_weights_map[0] + 4);
 800431a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800431e:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_linear_activations_map, 1, params)) {
 8004320:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8004380 <ai_linear_init+0xa4>
 8004324:	4632      	mov	r2, r6
 8004326:	2101      	movs	r1, #1
 8004328:	4640      	mov	r0, r8
 800432a:	f002 f935 	bl	8006598 <ai_platform_get_activations_map>
 800432e:	4606      	mov	r6, r0
 8004330:	b1b0      	cbz	r0, 8004360 <ai_linear_init+0x84>
    serving_default_input_layer0_output_array.data = AI_PTR(g_linear_activations_map[0] + 0);
 8004332:	f8d8 3000 	ldr.w	r3, [r8]
 8004336:	4a0f      	ldr	r2, [pc, #60]	; (8004374 <ai_linear_init+0x98>)
    serving_default_input_layer0_output_array.data_start = AI_PTR(g_linear_activations_map[0] + 0);
 8004338:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_0_output_array.data = AI_PTR(g_linear_activations_map[0] + 4);
 800433c:	3304      	adds	r3, #4
 800433e:	4a0e      	ldr	r2, [pc, #56]	; (8004378 <ai_linear_init+0x9c>)
    gemm_0_output_array.data_start = AI_PTR(g_linear_activations_map[0] + 4);
 8004340:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ok &= linear_configure_weights(net_ctx, params);
  ok &= linear_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8004344:	4638      	mov	r0, r7
 8004346:	f002 fcdd 	bl	8006d04 <ai_platform_network_post_init>
 800434a:	4030      	ands	r0, r6
 800434c:	4005      	ands	r5, r0
 800434e:	b2e8      	uxtb	r0, r5

  return ok;
}
 8004350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8004354:	2212      	movs	r2, #18
 8004356:	2130      	movs	r1, #48	; 0x30
 8004358:	4620      	mov	r0, r4
 800435a:	f002 f9ef 	bl	800673c <ai_platform_network_set_error>
  return false;
 800435e:	e7df      	b.n	8004320 <ai_linear_init+0x44>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8004360:	2213      	movs	r2, #19
 8004362:	2130      	movs	r1, #48	; 0x30
 8004364:	4620      	mov	r0, r4
 8004366:	f002 f9e9 	bl	800673c <ai_platform_network_set_error>
  return false;
 800436a:	e7eb      	b.n	8004344 <ai_linear_init+0x68>
 800436c:	20000284 	.word	0x20000284
 8004370:	20000210 	.word	0x20000210
 8004374:	200002b0 	.word	0x200002b0
 8004378:	20000258 	.word	0x20000258
 800437c:	2000e890 	.word	0x2000e890
 8004380:	2000e88c 	.word	0x2000e88c

08004384 <ai_linear_run>:

AI_API_ENTRY
ai_i32 ai_linear_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8004384:	f002 bcee 	b.w	8006d64 <ai_platform_network_process>

08004388 <ai_linear_forward>:


AI_API_ENTRY
ai_i32 ai_linear_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8004388:	2200      	movs	r2, #0
 800438a:	f002 bceb 	b.w	8006d64 <ai_platform_network_process>
	...

08004390 <ai_linear_data_params_get>:
 * @ingroup linear_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_linear_data_params_get(ai_network_params* params)
{
 8004390:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8004392:	4603      	mov	r3, r0
{
 8004394:	b085      	sub	sp, #20
  if (!params) return false;
 8004396:	b170      	cbz	r0, 80043b6 <ai_linear_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8004398:	4c08      	ldr	r4, [pc, #32]	; (80043bc <ai_linear_data_params_get+0x2c>)
 800439a:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_LINEAR_DATA_ACTIVATIONS_COUNT, g_linear_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800439c:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 800439e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043a2:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 80043a6:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80043aa:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_LINEAR_DATA_WEIGHTS_COUNT, g_linear_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80043ae:	4629      	mov	r1, r5
 80043b0:	4618      	mov	r0, r3
 80043b2:	f002 f949 	bl	8006648 <ai_platform_bind_network_params>
}
 80043b6:	b005      	add	sp, #20
 80043b8:	bd30      	pop	{r4, r5, pc}
 80043ba:	bf00      	nop
 80043bc:	080115a0 	.word	0x080115a0

080043c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043c0:	b510      	push	{r4, lr}
 80043c2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043c4:	2210      	movs	r2, #16
 80043c6:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80043c8:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043ca:	a809      	add	r0, sp, #36	; 0x24
 80043cc:	f00a fdff 	bl	800efce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043d0:	2214      	movs	r2, #20
 80043d2:	2100      	movs	r1, #0
 80043d4:	a802      	add	r0, sp, #8
 80043d6:	f00a fdfa 	bl	800efce <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80043da:	4b20      	ldr	r3, [pc, #128]	; (800445c <SystemClock_Config+0x9c>)
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80043dc:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
 80043de:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80043e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80043ea:	4a1d      	ldr	r2, [pc, #116]	; (8004460 <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80043f4:	6813      	ldr	r3, [r2, #0]
 80043f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80043fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004402:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004404:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004408:	9301      	str	r3, [sp, #4]
 800440a:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800440c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004410:	e9cd 1307 	strd	r1, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004414:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004418:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 216;
 800441c:	23d8      	movs	r3, #216	; 0xd8
 800441e:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004422:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004424:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004426:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800442a:	f7fc fc49 	bl	8000cc0 <HAL_RCC_OscConfig>
 800442e:	b108      	cbz	r0, 8004434 <SystemClock_Config+0x74>
  __ASM volatile ("cpsid i" : : : "memory");
 8004430:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004432:	e7fe      	b.n	8004432 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004434:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004436:	2280      	movs	r2, #128	; 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004438:	2103      	movs	r1, #3
 800443a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800443c:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004440:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004444:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800444c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800444e:	f7fc fe27 	bl	80010a0 <HAL_RCC_ClockConfig>
 8004452:	b108      	cbz	r0, 8004458 <SystemClock_Config+0x98>
 8004454:	b672      	cpsid	i
  while (1)
 8004456:	e7fe      	b.n	8004456 <SystemClock_Config+0x96>
}
 8004458:	b014      	add	sp, #80	; 0x50
 800445a:	bd10      	pop	{r4, pc}
 800445c:	40023800 	.word	0x40023800
 8004460:	40007000 	.word	0x40007000

08004464 <main>:
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	; 0x30
  __ASM volatile ("dsb 0xF":::"memory");
 8004468:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800446c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004470:	4a7c      	ldr	r2, [pc, #496]	; (8004664 <main+0x200>)
 8004472:	2100      	movs	r1, #0
 8004474:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004478:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800447c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004480:	6953      	ldr	r3, [r2, #20]
 8004482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004486:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004488:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800448c:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004490:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004494:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004498:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800449c:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80044a0:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80044a4:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80044a8:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80044aa:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80044ae:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80044b0:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80044b4:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80044b6:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80044ba:	d2f9      	bcs.n	80044b0 <main+0x4c>
    } while(sets-- != 0U);
 80044bc:	3b20      	subs	r3, #32
 80044be:	f113 0f20 	cmn.w	r3, #32
 80044c2:	d1f2      	bne.n	80044aa <main+0x46>
 80044c4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80044c8:	6953      	ldr	r3, [r2, #20]
 80044ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ce:	6153      	str	r3, [r2, #20]
 80044d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80044d4:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80044d8:	f7fc fa10 	bl	80008fc <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044dc:	2400      	movs	r4, #0
  SystemClock_Config();
 80044de:	f7ff ff6f 	bl	80043c0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e2:	2214      	movs	r2, #20
 80044e4:	2100      	movs	r1, #0
 80044e6:	a807      	add	r0, sp, #28
 80044e8:	f00a fd71 	bl	800efce <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044ec:	4b5e      	ldr	r3, [pc, #376]	; (8004668 <main+0x204>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80044ee:	f244 0181 	movw	r1, #16513	; 0x4081
 80044f2:	485e      	ldr	r0, [pc, #376]	; (800466c <main+0x208>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044f6:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fa:	2602      	movs	r6, #2
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044fc:	2503      	movs	r5, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044fe:	f042 0204 	orr.w	r2, r2, #4
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004502:	270b      	movs	r7, #11
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004504:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
 800450a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450c:	f002 0204 	and.w	r2, r2, #4
 8004510:	9201      	str	r2, [sp, #4]
 8004512:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004516:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
 800451c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800451e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004522:	9202      	str	r2, [sp, #8]
 8004524:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004528:	f042 0201 	orr.w	r2, r2, #1
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
 800452e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004530:	f002 0201 	and.w	r2, r2, #1
 8004534:	9203      	str	r2, [sp, #12]
 8004536:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800453a:	f042 0202 	orr.w	r2, r2, #2
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
 8004540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004542:	f002 0202 	and.w	r2, r2, #2
 8004546:	9204      	str	r2, [sp, #16]
 8004548:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800454a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800454c:	f042 0208 	orr.w	r2, r2, #8
 8004550:	631a      	str	r2, [r3, #48]	; 0x30
 8004552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004554:	f002 0208 	and.w	r2, r2, #8
 8004558:	9205      	str	r2, [sp, #20]
 800455a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800455c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800455e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004564:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	9306      	str	r3, [sp, #24]
 800456e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004570:	f7fc fba0 	bl	8000cb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004574:	2200      	movs	r2, #0
 8004576:	2140      	movs	r1, #64	; 0x40
 8004578:	483d      	ldr	r0, [pc, #244]	; (8004670 <main+0x20c>)
 800457a:	f7fc fb9b 	bl	8000cb4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800457e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004582:	a907      	add	r1, sp, #28
 8004584:	483b      	ldr	r0, [pc, #236]	; (8004674 <main+0x210>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004586:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004588:	e9cd 9307 	strd	r9, r3, [sp, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800458c:	f7fc fab0 	bl	8000af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004590:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004592:	a907      	add	r1, sp, #28
 8004594:	4837      	ldr	r0, [pc, #220]	; (8004674 <main+0x210>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004596:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004598:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800459c:	e9cd 570a 	strd	r5, r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045a0:	f7fc faa6 	bl	8000af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80045a4:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a6:	a907      	add	r1, sp, #28
 80045a8:	4833      	ldr	r0, [pc, #204]	; (8004678 <main+0x214>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045aa:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ac:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045b0:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b4:	f7fc fa9c 	bl	8000af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045b8:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045bc:	a907      	add	r1, sp, #28
 80045be:	482b      	ldr	r0, [pc, #172]	; (800466c <main+0x208>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045c0:	e9cd 3807 	strd	r3, r8, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c8:	f7fc fa92 	bl	8000af0 <HAL_GPIO_Init>
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80045cc:	a907      	add	r1, sp, #28
 80045ce:	4827      	ldr	r0, [pc, #156]	; (800466c <main+0x208>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045d0:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d2:	e9cd 9607 	strd	r9, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045d6:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80045da:	f7fc fa89 	bl	8000af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80045de:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80045e0:	a907      	add	r1, sp, #28
 80045e2:	4823      	ldr	r0, [pc, #140]	; (8004670 <main+0x20c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045e4:	e9cd 3807 	strd	r3, r8, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80045ec:	f7fc fa80 	bl	8000af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80045f0:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80045f2:	a907      	add	r1, sp, #28
 80045f4:	481e      	ldr	r0, [pc, #120]	; (8004670 <main+0x20c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045f8:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80045fc:	f7fc fa78 	bl	8000af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004600:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004604:	a907      	add	r1, sp, #28
 8004606:	481c      	ldr	r0, [pc, #112]	; (8004678 <main+0x214>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004608:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800460c:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800460e:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004612:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004614:	f7fc fa6c 	bl	8000af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004618:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800461c:	a907      	add	r1, sp, #28
 800461e:	4816      	ldr	r0, [pc, #88]	; (8004678 <main+0x214>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004620:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004622:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004626:	f7fc fa63 	bl	8000af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800462a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800462e:	4810      	ldr	r0, [pc, #64]	; (8004670 <main+0x20c>)
 8004630:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004632:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004634:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004638:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800463c:	f7fc fa58 	bl	8000af0 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8004640:	480e      	ldr	r0, [pc, #56]	; (800467c <main+0x218>)
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <main+0x21c>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004644:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8004646:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004648:	f8c0 8020 	str.w	r8, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800464c:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004650:	f7fc f9ee 	bl	8000a30 <HAL_CRC_Init>
 8004654:	b108      	cbz	r0, 800465a <main+0x1f6>
  __ASM volatile ("cpsid i" : : : "memory");
 8004656:	b672      	cpsid	i
  while (1)
 8004658:	e7fe      	b.n	8004658 <main+0x1f4>
  MX_X_CUBE_AI_Init();
 800465a:	f7ff f9f1 	bl	8003a40 <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 800465e:	f7ff f9f6 	bl	8003a4e <MX_X_CUBE_AI_Process>
  while (1)
 8004662:	e7fc      	b.n	800465e <main+0x1fa>
 8004664:	e000ed00 	.word	0xe000ed00
 8004668:	40023800 	.word	0x40023800
 800466c:	40020400 	.word	0x40020400
 8004670:	40021800 	.word	0x40021800
 8004674:	40020800 	.word	0x40020800
 8004678:	40020000 	.word	0x40020000
 800467c:	2000e894 	.word	0x2000e894
 8004680:	40023000 	.word	0x40023000

08004684 <MX_USART3_UART_Init>:
{
 8004684:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8004686:	480b      	ldr	r0, [pc, #44]	; (80046b4 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8004688:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800468c:	4a0a      	ldr	r2, [pc, #40]	; (80046b8 <MX_USART3_UART_Init+0x34>)
 800468e:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004692:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004694:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004696:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Parity = UART_PARITY_NONE;
 800469a:	6103      	str	r3, [r0, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800469c:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800469e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046a2:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80046a6:	f7fd fb8d 	bl	8001dc4 <HAL_UART_Init>
 80046aa:	b108      	cbz	r0, 80046b0 <MX_USART3_UART_Init+0x2c>
 80046ac:	b672      	cpsid	i
  while (1)
 80046ae:	e7fe      	b.n	80046ae <MX_USART3_UART_Init+0x2a>
}
 80046b0:	bd08      	pop	{r3, pc}
 80046b2:	bf00      	nop
 80046b4:	2000e8b8 	.word	0x2000e8b8
 80046b8:	40004800 	.word	0x40004800

080046bc <Error_Handler>:
 80046bc:	b672      	cpsid	i
  while (1)
 80046be:	e7fe      	b.n	80046be <Error_Handler+0x2>

080046c0 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 80046c0:	2300      	movs	r3, #0
    iter->dest_struct = dest_struct;
 80046c2:	e9c0 3202 	strd	r3, r2, [r0, #8]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 80046c6:	888b      	ldrh	r3, [r1, #4]
 80046c8:	441a      	add	r2, r3
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80046ca:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 80046ce:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80046d0:	441a      	add	r2, r3
    iter->pos = fields;
 80046d2:	e9c0 1100 	strd	r1, r1, [r0]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80046d6:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 80046d8:	8808      	ldrh	r0, [r1, #0]
}
 80046da:	3800      	subs	r0, #0
 80046dc:	bf18      	it	ne
 80046de:	2001      	movne	r0, #1
 80046e0:	4770      	bx	lr

080046e2 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 80046e2:	6841      	ldr	r1, [r0, #4]
{
 80046e4:	4603      	mov	r3, r0

    if (prev_field->tag == 0)
 80046e6:	880a      	ldrh	r2, [r1, #0]
{
 80046e8:	b570      	push	{r4, r5, r6, lr}
    if (prev_field->tag == 0)
 80046ea:	2a00      	cmp	r2, #0
 80046ec:	d035      	beq.n	800475a <pb_field_iter_next+0x78>
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
    }
    
    iter->pos++;
 80046ee:	f101 0210 	add.w	r2, r1, #16
    
    if (iter->pos->tag == 0)
 80046f2:	8a0c      	ldrh	r4, [r1, #16]
    iter->pos++;
 80046f4:	6042      	str	r2, [r0, #4]
    if (iter->pos->tag == 0)
 80046f6:	b92c      	cbnz	r4, 8004704 <pb_field_iter_next+0x22>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 80046f8:	68c2      	ldr	r2, [r0, #12]
 80046fa:	6801      	ldr	r1, [r0, #0]
 80046fc:	f7ff ffe0 	bl	80046c0 <pb_field_iter_begin>
        return false;
 8004700:	4620      	mov	r0, r4
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
 8004702:	bd70      	pop	{r4, r5, r6, pc}
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8004704:	7888      	ldrb	r0, [r1, #2]
        size_t prev_size = prev_field->data_size;
 8004706:	890a      	ldrh	r2, [r1, #8]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8004708:	f000 0630 	and.w	r6, r0, #48	; 0x30
            iter->pos->data_offset == PB_SIZE_MAX)
 800470c:	8a8c      	ldrh	r4, [r1, #20]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800470e:	2e30      	cmp	r6, #48	; 0x30
 8004710:	d10a      	bne.n	8004728 <pb_field_iter_next+0x46>
 8004712:	7c8d      	ldrb	r5, [r1, #18]
 8004714:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8004718:	2d30      	cmp	r5, #48	; 0x30
 800471a:	d118      	bne.n	800474e <pb_field_iter_next+0x6c>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 800471c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8004720:	42ac      	cmp	r4, r5
 8004722:	d114      	bne.n	800474e <pb_field_iter_next+0x6c>
            return true;
 8004724:	2001      	movs	r0, #1
 8004726:	e7ec      	b.n	8004702 <pb_field_iter_next+0x20>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8004728:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 800472c:	2d20      	cmp	r5, #32
 800472e:	d10e      	bne.n	800474e <pb_field_iter_next+0x6c>
            prev_size *= prev_field->array_size;
 8004730:	8948      	ldrh	r0, [r1, #10]
 8004732:	4342      	muls	r2, r0
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 8004734:	b916      	cbnz	r6, 800473c <pb_field_iter_next+0x5a>
            iter->required_field_index++;
 8004736:	6898      	ldr	r0, [r3, #8]
 8004738:	3001      	adds	r0, #1
 800473a:	6098      	str	r0, [r3, #8]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 800473c:	4414      	add	r4, r2
 800473e:	691a      	ldr	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8004740:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8004744:	4422      	add	r2, r4
 8004746:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8004748:	440a      	add	r2, r1
 800474a:	615a      	str	r2, [r3, #20]
        return true;
 800474c:	e7ea      	b.n	8004724 <pb_field_iter_next+0x42>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 800474e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
            prev_size = sizeof(void*);
 8004752:	2880      	cmp	r0, #128	; 0x80
 8004754:	bf08      	it	eq
 8004756:	2204      	moveq	r2, #4
 8004758:	e7ec      	b.n	8004734 <pb_field_iter_next+0x52>
        return false;
 800475a:	4610      	mov	r0, r2
 800475c:	e7d1      	b.n	8004702 <pb_field_iter_next+0x20>

0800475e <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800475e:	b570      	push	{r4, r5, r6, lr}
 8004760:	4604      	mov	r4, r0
 8004762:	460d      	mov	r5, r1
    const pb_field_t *start = iter->pos;
 8004764:	6846      	ldr	r6, [r0, #4]
    
    do {
        if (iter->pos->tag == tag &&
 8004766:	6863      	ldr	r3, [r4, #4]
 8004768:	881a      	ldrh	r2, [r3, #0]
 800476a:	42aa      	cmp	r2, r5
 800476c:	d104      	bne.n	8004778 <pb_field_iter_find+0x1a>
 800476e:	789b      	ldrb	r3, [r3, #2]
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	2b08      	cmp	r3, #8
 8004776:	d107      	bne.n	8004788 <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 8004778:	4620      	mov	r0, r4
 800477a:	f7ff ffb2 	bl	80046e2 <pb_field_iter_next>
    } while (iter->pos != start);
 800477e:	6863      	ldr	r3, [r4, #4]
 8004780:	42b3      	cmp	r3, r6
 8004782:	d1f0      	bne.n	8004766 <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 8004784:	2000      	movs	r0, #0
}
 8004786:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 8004788:	2001      	movs	r0, #1
 800478a:	e7fc      	b.n	8004786 <pb_field_iter_find+0x28>

0800478c <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 800478c:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 800478e:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 8004790:	18a3      	adds	r3, r4, r2
 8004792:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 8004794:	b939      	cbnz	r1, 80047a6 <buf_read+0x1a>
        for (i = 0; i < count; i++)
            buf[i] = source[i];
    }
    
    return true;
}
 8004796:	2001      	movs	r0, #1
 8004798:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 800479a:	5ce0      	ldrb	r0, [r4, r3]
 800479c:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 800479e:	3301      	adds	r3, #1
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d1fa      	bne.n	800479a <buf_read+0xe>
 80047a4:	e7f7      	b.n	8004796 <buf_read+0xa>
 80047a6:	2300      	movs	r3, #0
 80047a8:	e7fa      	b.n	80047a0 <buf_read+0x14>

080047aa <pb_field_set_to_default>:
    return false;
}

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 80047aa:	b570      	push	{r4, r5, r6, lr}
    pb_type_t type;
    type = iter->pos->type;
 80047ac:	6845      	ldr	r5, [r0, #4]
{
 80047ae:	b086      	sub	sp, #24
 80047b0:	4603      	mov	r3, r0
    type = iter->pos->type;
 80047b2:	78aa      	ldrb	r2, [r5, #2]
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80047b4:	f002 060f 	and.w	r6, r2, #15
 80047b8:	2e08      	cmp	r6, #8
 80047ba:	d11e      	bne.n	80047fa <pb_field_set_to_default+0x50>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 80047bc:	6903      	ldr	r3, [r0, #16]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 80047be:	2600      	movs	r6, #0
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 80047c0:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
 80047c2:	b90c      	cbnz	r4, 80047c8 <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 80047c4:	b006      	add	sp, #24
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80047c8:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 80047ca:	4668      	mov	r0, sp
 80047cc:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80047ce:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 80047d0:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 80047d2:	4629      	mov	r1, r5
 80047d4:	f7ff ff74 	bl	80046c0 <pb_field_iter_begin>
    iter->pData = extension->dest;
 80047d8:	6863      	ldr	r3, [r4, #4]
            pb_field_set_to_default(&ext_iter);
 80047da:	4668      	mov	r0, sp
    iter->pData = extension->dest;
 80047dc:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 80047de:	f104 030c 	add.w	r3, r4, #12
 80047e2:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80047e4:	78ab      	ldrb	r3, [r5, #2]
 80047e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047ea:	2b80      	cmp	r3, #128	; 0x80
        iter->pData = &extension->dest;
 80047ec:	bf04      	itt	eq
 80047ee:	1d23      	addeq	r3, r4, #4
 80047f0:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 80047f2:	f7ff ffda 	bl	80047aa <pb_field_set_to_default>
            ext = ext->next;
 80047f6:	68a4      	ldr	r4, [r4, #8]
 80047f8:	e7e3      	b.n	80047c2 <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80047fa:	f012 01c0 	ands.w	r1, r2, #192	; 0xc0
 80047fe:	d125      	bne.n	800484c <pb_field_set_to_default+0xa2>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 8004800:	f002 0030 	and.w	r0, r2, #48	; 0x30
 8004804:	2810      	cmp	r0, #16
 8004806:	d10f      	bne.n	8004828 <pb_field_set_to_default+0x7e>
 8004808:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 800480c:	4282      	cmp	r2, r0
 800480e:	d000      	beq.n	8004812 <pb_field_set_to_default+0x68>
            *(bool*)iter->pSize = false;
 8004810:	7011      	strb	r1, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8004812:	2e07      	cmp	r6, #7
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8004814:	68ec      	ldr	r4, [r5, #12]
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8004816:	6918      	ldr	r0, [r3, #16]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8004818:	d10b      	bne.n	8004832 <pb_field_set_to_default+0x88>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 800481a:	4601      	mov	r1, r0
 800481c:	4620      	mov	r0, r4
}
 800481e:	b006      	add	sp, #24
 8004820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8004824:	f000 b81a 	b.w	800485c <pb_message_set_to_defaults>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004828:	0690      	lsls	r0, r2, #26
 800482a:	d5f2      	bpl.n	8004812 <pb_field_set_to_default+0x68>
            *(pb_size_t*)iter->pSize = 0;
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	8019      	strh	r1, [r3, #0]
}
 8004830:	e7c8      	b.n	80047c4 <pb_field_set_to_default+0x1a>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8004832:	892a      	ldrh	r2, [r5, #8]
 8004834:	4621      	mov	r1, r4
            else if (iter->pos->ptr != NULL)
 8004836:	b124      	cbz	r4, 8004842 <pb_field_set_to_default+0x98>
}
 8004838:	b006      	add	sp, #24
 800483a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 800483e:	f00a bc68 	b.w	800f112 <memcpy>
}
 8004842:	b006      	add	sp, #24
 8004844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(iter->pData, 0, iter->pos->data_size);
 8004848:	f00a bbc1 	b.w	800efce <memset>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800484c:	2980      	cmp	r1, #128	; 0x80
 800484e:	d1b9      	bne.n	80047c4 <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 8004850:	6900      	ldr	r0, [r0, #16]
 8004852:	2100      	movs	r1, #0
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004854:	0692      	lsls	r2, r2, #26
        *(void**)iter->pData = NULL;
 8004856:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004858:	d5b4      	bpl.n	80047c4 <pb_field_set_to_default+0x1a>
 800485a:	e7e7      	b.n	800482c <pb_field_set_to_default+0x82>

0800485c <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 800485c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800485e:	460a      	mov	r2, r1
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 8004860:	4601      	mov	r1, r0
 8004862:	4668      	mov	r0, sp
 8004864:	f7ff ff2c 	bl	80046c0 <pb_field_iter_begin>
 8004868:	b130      	cbz	r0, 8004878 <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 800486a:	4668      	mov	r0, sp
 800486c:	f7ff ff9d 	bl	80047aa <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 8004870:	4668      	mov	r0, sp
 8004872:	f7ff ff36 	bl	80046e2 <pb_field_iter_next>
 8004876:	e7f7      	b.n	8004868 <pb_message_set_to_defaults+0xc>
}
 8004878:	b007      	add	sp, #28
 800487a:	f85d fb04 	ldr.w	pc, [sp], #4

0800487e <pb_readbyte>:
    if (stream->bytes_left == 0)
 800487e:	6883      	ldr	r3, [r0, #8]
{
 8004880:	b510      	push	{r4, lr}
 8004882:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 8004884:	b90b      	cbnz	r3, 800488a <pb_readbyte+0xc>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8004886:	2000      	movs	r0, #0
}
 8004888:	bd10      	pop	{r4, pc}
    if (!stream->callback(stream, buf, 1))
 800488a:	6803      	ldr	r3, [r0, #0]
 800488c:	2201      	movs	r2, #1
 800488e:	4798      	blx	r3
 8004890:	2800      	cmp	r0, #0
 8004892:	d0f8      	beq.n	8004886 <pb_readbyte+0x8>
    stream->bytes_left--;
 8004894:	68a3      	ldr	r3, [r4, #8]
 8004896:	3b01      	subs	r3, #1
 8004898:	60a3      	str	r3, [r4, #8]
    return true;    
 800489a:	e7f5      	b.n	8004888 <pb_readbyte+0xa>

0800489c <pb_decode_varint32_eof>:
{
 800489c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80048a0:	4688      	mov	r8, r1
    if (!pb_readbyte(stream, &byte))
 80048a2:	f10d 0107 	add.w	r1, sp, #7
{
 80048a6:	4607      	mov	r7, r0
 80048a8:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 80048aa:	f7ff ffe8 	bl	800487e <pb_readbyte>
 80048ae:	4606      	mov	r6, r0
 80048b0:	b958      	cbnz	r0, 80048ca <pb_decode_varint32_eof+0x2e>
        if (stream->bytes_left == 0)
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	b123      	cbz	r3, 80048c0 <pb_decode_varint32_eof+0x24>
        return false;
 80048b6:	2600      	movs	r6, #0
}
 80048b8:	4630      	mov	r0, r6
 80048ba:	b002      	add	sp, #8
 80048bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (eof)
 80048c0:	2c00      	cmp	r4, #0
 80048c2:	d0f8      	beq.n	80048b6 <pb_decode_varint32_eof+0x1a>
                *eof = true;
 80048c4:	2301      	movs	r3, #1
 80048c6:	7023      	strb	r3, [r4, #0]
 80048c8:	e7f6      	b.n	80048b8 <pb_decode_varint32_eof+0x1c>
    if ((byte & 0x80) == 0)
 80048ca:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80048ce:	f89d 4007 	ldrb.w	r4, [sp, #7]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	da21      	bge.n	800491a <pb_decode_varint32_eof+0x7e>
        result = byte & 0x7F;
 80048d6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
        uint_fast8_t bitpos = 7;
 80048da:	2507      	movs	r5, #7
            if (!pb_readbyte(stream, &byte))
 80048dc:	f10d 0107 	add.w	r1, sp, #7
 80048e0:	4638      	mov	r0, r7
 80048e2:	f7ff ffcc 	bl	800487e <pb_readbyte>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d0e5      	beq.n	80048b6 <pb_decode_varint32_eof+0x1a>
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 80048ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if (bitpos >= 32)
 80048ee:	2d1f      	cmp	r5, #31
 80048f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048f4:	d914      	bls.n	8004920 <pb_decode_varint32_eof+0x84>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 80048f6:	2d3f      	cmp	r5, #63	; 0x3f
 80048f8:	bf34      	ite	cc
 80048fa:	21ff      	movcc	r1, #255	; 0xff
 80048fc:	2101      	movcs	r1, #1
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 80048fe:	b11a      	cbz	r2, 8004908 <pb_decode_varint32_eof+0x6c>
 8004900:	2c00      	cmp	r4, #0
 8004902:	dad8      	bge.n	80048b6 <pb_decode_varint32_eof+0x1a>
 8004904:	4299      	cmp	r1, r3
 8004906:	d1d6      	bne.n	80048b6 <pb_decode_varint32_eof+0x1a>
        } while (byte & 0x80);
 8004908:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 800490a:	f105 0507 	add.w	r5, r5, #7
        } while (byte & 0x80);
 800490e:	d4e5      	bmi.n	80048dc <pb_decode_varint32_eof+0x40>
        if (bitpos == 35 && (byte & 0x70) != 0)
 8004910:	2d23      	cmp	r5, #35	; 0x23
 8004912:	d102      	bne.n	800491a <pb_decode_varint32_eof+0x7e>
 8004914:	f013 0f70 	tst.w	r3, #112	; 0x70
 8004918:	d1cd      	bne.n	80048b6 <pb_decode_varint32_eof+0x1a>
   *dest = result;
 800491a:	f8c8 4000 	str.w	r4, [r8]
   return true;
 800491e:	e7cb      	b.n	80048b8 <pb_decode_varint32_eof+0x1c>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8004920:	40aa      	lsls	r2, r5
 8004922:	4314      	orrs	r4, r2
 8004924:	e7f0      	b.n	8004908 <pb_decode_varint32_eof+0x6c>
	...

08004928 <pb_read>:
{
 8004928:	b530      	push	{r4, r5, lr}
 800492a:	4604      	mov	r4, r0
 800492c:	b085      	sub	sp, #20
 800492e:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 8004930:	b9a9      	cbnz	r1, 800495e <pb_read+0x36>
 8004932:	6802      	ldr	r2, [r0, #0]
 8004934:	4b11      	ldr	r3, [pc, #68]	; (800497c <pb_read+0x54>)
 8004936:	429a      	cmp	r2, r3
 8004938:	d011      	beq.n	800495e <pb_read+0x36>
		while (count > 16)
 800493a:	2d10      	cmp	r5, #16
 800493c:	d806      	bhi.n	800494c <pb_read+0x24>
		return pb_read(stream, tmp, count);
 800493e:	462a      	mov	r2, r5
 8004940:	4669      	mov	r1, sp
 8004942:	4620      	mov	r0, r4
 8004944:	f7ff fff0 	bl	8004928 <pb_read>
}
 8004948:	b005      	add	sp, #20
 800494a:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 800494c:	2210      	movs	r2, #16
 800494e:	4669      	mov	r1, sp
 8004950:	4620      	mov	r0, r4
 8004952:	f7ff ffe9 	bl	8004928 <pb_read>
 8004956:	2800      	cmp	r0, #0
 8004958:	d0f6      	beq.n	8004948 <pb_read+0x20>
			count -= 16;
 800495a:	3d10      	subs	r5, #16
 800495c:	e7ed      	b.n	800493a <pb_read+0x12>
    if (stream->bytes_left < count)
 800495e:	68a3      	ldr	r3, [r4, #8]
 8004960:	42ab      	cmp	r3, r5
 8004962:	d201      	bcs.n	8004968 <pb_read+0x40>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8004964:	2000      	movs	r0, #0
 8004966:	e7ef      	b.n	8004948 <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	462a      	mov	r2, r5
 800496c:	4620      	mov	r0, r4
 800496e:	4798      	blx	r3
 8004970:	2800      	cmp	r0, #0
 8004972:	d0f7      	beq.n	8004964 <pb_read+0x3c>
    stream->bytes_left -= count;
 8004974:	68a3      	ldr	r3, [r4, #8]
 8004976:	1b5b      	subs	r3, r3, r5
 8004978:	60a3      	str	r3, [r4, #8]
    return true;
 800497a:	e7e5      	b.n	8004948 <pb_read+0x20>
 800497c:	0800478d 	.word	0x0800478d

08004980 <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 8004980:	2200      	movs	r2, #0
 8004982:	f7ff bf8b 	b.w	800489c <pb_decode_varint32_eof>

08004986 <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8004986:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004988:	460f      	mov	r7, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800498a:	a901      	add	r1, sp, #4
{
 800498c:	4606      	mov	r6, r0
 800498e:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 8004990:	f7ff fff6 	bl	8004980 <pb_decode_varint32>
 8004994:	4604      	mov	r4, r0
 8004996:	b140      	cbz	r0, 80049aa <pb_dec_fixed_length_bytes+0x24>
        return false;

    if (size > PB_SIZE_MAX)
 8004998:	9901      	ldr	r1, [sp, #4]
 800499a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800499e:	d210      	bcs.n	80049c2 <pb_dec_fixed_length_bytes+0x3c>
        PB_RETURN_ERROR(stream, "bytes overflow");

    if (size == 0)
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(dest, 0, field->data_size);
 80049a0:	893a      	ldrh	r2, [r7, #8]
    if (size == 0)
 80049a2:	b929      	cbnz	r1, 80049b0 <pb_dec_fixed_length_bytes+0x2a>
        memset(dest, 0, field->data_size);
 80049a4:	4628      	mov	r0, r5
 80049a6:	f00a fb12 	bl	800efce <memset>

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 80049aa:	4620      	mov	r0, r4
 80049ac:	b003      	add	sp, #12
 80049ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 80049b0:	428a      	cmp	r2, r1
 80049b2:	d106      	bne.n	80049c2 <pb_dec_fixed_length_bytes+0x3c>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 80049b4:	4629      	mov	r1, r5
 80049b6:	4630      	mov	r0, r6
}
 80049b8:	b003      	add	sp, #12
 80049ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 80049be:	f7ff bfb3 	b.w	8004928 <pb_read>
        return false;
 80049c2:	2400      	movs	r4, #0
 80049c4:	e7f1      	b.n	80049aa <pb_dec_fixed_length_bytes+0x24>

080049c6 <pb_dec_string>:
{
 80049c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80049ca:	460f      	mov	r7, r1
    if (!pb_decode_varint32(stream, &size))
 80049cc:	a901      	add	r1, sp, #4
{
 80049ce:	4680      	mov	r8, r0
 80049d0:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 80049d2:	f7ff ffd5 	bl	8004980 <pb_decode_varint32>
 80049d6:	b198      	cbz	r0, 8004a00 <pb_dec_string+0x3a>
    alloc_size = size + 1;
 80049d8:	9c01      	ldr	r4, [sp, #4]
 80049da:	2500      	movs	r5, #0
 80049dc:	1c62      	adds	r2, r4, #1
 80049de:	d204      	bcs.n	80049ea <pb_dec_string+0x24>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80049e0:	78bb      	ldrb	r3, [r7, #2]
 80049e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049e6:	2b80      	cmp	r3, #128	; 0x80
 80049e8:	d101      	bne.n	80049ee <pb_dec_string+0x28>
        return false;
 80049ea:	4628      	mov	r0, r5
 80049ec:	e008      	b.n	8004a00 <pb_dec_string+0x3a>
        if (alloc_size > field->data_size)
 80049ee:	893b      	ldrh	r3, [r7, #8]
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d3fa      	bcc.n	80049ea <pb_dec_string+0x24>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 80049f4:	4622      	mov	r2, r4
 80049f6:	4631      	mov	r1, r6
 80049f8:	4640      	mov	r0, r8
 80049fa:	f7ff ff95 	bl	8004928 <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 80049fe:	5535      	strb	r5, [r6, r4]
}
 8004a00:	b002      	add	sp, #8
 8004a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004a06 <pb_dec_bytes>:
{
 8004a06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a08:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8004a0a:	a901      	add	r1, sp, #4
{
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	4614      	mov	r4, r2
    if (!pb_decode_varint32(stream, &size))
 8004a10:	f7ff ffb6 	bl	8004980 <pb_decode_varint32>
 8004a14:	b1a8      	cbz	r0, 8004a42 <pb_dec_bytes+0x3c>
    if (size > PB_SIZE_MAX)
 8004a16:	9a01      	ldr	r2, [sp, #4]
 8004a18:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004a1c:	d211      	bcs.n	8004a42 <pb_dec_bytes+0x3c>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004a1e:	78ab      	ldrb	r3, [r5, #2]
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8004a20:	1c91      	adds	r1, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004a22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a26:	2b80      	cmp	r3, #128	; 0x80
 8004a28:	d00b      	beq.n	8004a42 <pb_dec_bytes+0x3c>
        if (alloc_size > field->data_size)
 8004a2a:	892b      	ldrh	r3, [r5, #8]
 8004a2c:	428b      	cmp	r3, r1
 8004a2e:	d308      	bcc.n	8004a42 <pb_dec_bytes+0x3c>
    bdest->size = (pb_size_t)size;
 8004a30:	4621      	mov	r1, r4
    return pb_read(stream, bdest->bytes, size);
 8004a32:	4630      	mov	r0, r6
    bdest->size = (pb_size_t)size;
 8004a34:	f821 2b02 	strh.w	r2, [r1], #2
}
 8004a38:	b002      	add	sp, #8
 8004a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_read(stream, bdest->bytes, size);
 8004a3e:	f7ff bf73 	b.w	8004928 <pb_read>
}
 8004a42:	2000      	movs	r0, #0
 8004a44:	b002      	add	sp, #8
 8004a46:	bd70      	pop	{r4, r5, r6, pc}

08004a48 <pb_decode_varint>:
{
 8004a48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint64_t result = 0;
 8004a4c:	2500      	movs	r5, #0
{
 8004a4e:	4680      	mov	r8, r0
 8004a50:	460e      	mov	r6, r1
    uint64_t result = 0;
 8004a52:	462f      	mov	r7, r5
    uint_fast8_t bitpos = 0;
 8004a54:	462c      	mov	r4, r5
        if (!pb_readbyte(stream, &byte))
 8004a56:	f10d 0107 	add.w	r1, sp, #7
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	f7ff ff0f 	bl	800487e <pb_readbyte>
 8004a60:	b1d0      	cbz	r0, 8004a98 <pb_decode_varint+0x50>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8004a62:	f89d c007 	ldrb.w	ip, [sp, #7]
 8004a66:	f1a4 0320 	sub.w	r3, r4, #32
 8004a6a:	f1c4 0120 	rsb	r1, r4, #32
 8004a6e:	f00c 027f 	and.w	r2, ip, #127	; 0x7f
    } while (byte & 0x80);
 8004a72:	f01c 0f80 	tst.w	ip, #128	; 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	fa22 f101 	lsr.w	r1, r2, r1
 8004a7e:	fa02 f204 	lsl.w	r2, r2, r4
        bitpos = (uint_fast8_t)(bitpos + 7);
 8004a82:	f104 0407 	add.w	r4, r4, #7
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8004a86:	ea43 0301 	orr.w	r3, r3, r1
 8004a8a:	ea45 0502 	orr.w	r5, r5, r2
 8004a8e:	ea47 0703 	orr.w	r7, r7, r3
    } while (byte & 0x80);
 8004a92:	d104      	bne.n	8004a9e <pb_decode_varint+0x56>
    *dest = result;
 8004a94:	e9c6 5700 	strd	r5, r7, [r6]
}
 8004a98:	b002      	add	sp, #8
 8004a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (bitpos >= 64)
 8004a9e:	2c46      	cmp	r4, #70	; 0x46
 8004aa0:	d1d9      	bne.n	8004a56 <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	e7f8      	b.n	8004a98 <pb_decode_varint+0x50>

08004aa6 <pb_dec_uvarint>:
{
 8004aa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004aa8:	460d      	mov	r5, r1
    if (!pb_decode_varint(stream, &value))
 8004aaa:	4669      	mov	r1, sp
{
 8004aac:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 8004aae:	f7ff ffcb 	bl	8004a48 <pb_decode_varint>
 8004ab2:	b170      	cbz	r0, 8004ad2 <pb_dec_uvarint+0x2c>
    if (field->data_size == sizeof(pb_uint64_t))
 8004ab4:	892b      	ldrh	r3, [r5, #8]
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d10d      	bne.n	8004ad6 <pb_dec_uvarint+0x30>
        clamped = *(pb_uint64_t*)dest = value;
 8004aba:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004abe:	e9c4 3200 	strd	r3, r2, [r4]
    if (clamped != value)
 8004ac2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ac6:	4291      	cmp	r1, r2
 8004ac8:	bf08      	it	eq
 8004aca:	4298      	cmpeq	r0, r3
 8004acc:	bf0c      	ite	eq
 8004ace:	2001      	moveq	r0, #1
 8004ad0:	2000      	movne	r0, #0
}
 8004ad2:	b003      	add	sp, #12
 8004ad4:	bd30      	pop	{r4, r5, pc}
    else if (field->data_size == sizeof(uint32_t))
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d103      	bne.n	8004ae2 <pb_dec_uvarint+0x3c>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 8004ada:	9b00      	ldr	r3, [sp, #0]
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	e7ef      	b.n	8004ac2 <pb_dec_uvarint+0x1c>
    else if (field->data_size == sizeof(uint_least16_t))
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d103      	bne.n	8004aee <pb_dec_uvarint+0x48>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 8004ae6:	9b00      	ldr	r3, [sp, #0]
 8004ae8:	8023      	strh	r3, [r4, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	e7f7      	b.n	8004ade <pb_dec_uvarint+0x38>
    else if (field->data_size == sizeof(uint_least8_t))
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d104      	bne.n	8004afc <pb_dec_uvarint+0x56>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 8004af2:	9b00      	ldr	r3, [sp, #0]
 8004af4:	7023      	strb	r3, [r4, #0]
 8004af6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8004afa:	e7f0      	b.n	8004ade <pb_dec_uvarint+0x38>
        return false;
 8004afc:	2000      	movs	r0, #0
 8004afe:	e7e8      	b.n	8004ad2 <pb_dec_uvarint+0x2c>

08004b00 <pb_dec_varint>:
{
 8004b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b02:	460d      	mov	r5, r1
    if (!pb_decode_varint(stream, &value))
 8004b04:	4669      	mov	r1, sp
{
 8004b06:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 8004b08:	f7ff ff9e 	bl	8004a48 <pb_decode_varint>
 8004b0c:	b130      	cbz	r0, 8004b1c <pb_dec_varint+0x1c>
    if (field->data_size == sizeof(pb_int64_t))
 8004b0e:	892b      	ldrh	r3, [r5, #8]
 8004b10:	2b08      	cmp	r3, #8
        svalue = (pb_int64_t)value;
 8004b12:	e9dd 1200 	ldrd	r1, r2, [sp]
    if (field->data_size == sizeof(pb_int64_t))
 8004b16:	d103      	bne.n	8004b20 <pb_dec_varint+0x20>
        clamped = *(pb_int64_t*)dest = svalue;
 8004b18:	e9c4 1200 	strd	r1, r2, [r4]
}
 8004b1c:	b003      	add	sp, #12
 8004b1e:	bd30      	pop	{r4, r5, pc}
    else if (field->data_size == sizeof(int32_t))
 8004b20:	2b04      	cmp	r3, #4
        svalue = (int32_t)value;
 8004b22:	ea4f 70e1 	mov.w	r0, r1, asr #31
    else if (field->data_size == sizeof(int32_t))
 8004b26:	d109      	bne.n	8004b3c <pb_dec_varint+0x3c>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	6021      	str	r1, [r4, #0]
    if (clamped != svalue)
 8004b2e:	4282      	cmp	r2, r0
 8004b30:	bf08      	it	eq
 8004b32:	428b      	cmpeq	r3, r1
 8004b34:	bf0c      	ite	eq
 8004b36:	2001      	moveq	r0, #1
 8004b38:	2000      	movne	r0, #0
 8004b3a:	e7ef      	b.n	8004b1c <pb_dec_varint+0x1c>
    else if (field->data_size == sizeof(int_least16_t))
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d103      	bne.n	8004b48 <pb_dec_varint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 8004b40:	b20b      	sxth	r3, r1
 8004b42:	8023      	strh	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8004b44:	17da      	asrs	r2, r3, #31
 8004b46:	e7f2      	b.n	8004b2e <pb_dec_varint+0x2e>
    else if (field->data_size == sizeof(int_least8_t))
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d102      	bne.n	8004b52 <pb_dec_varint+0x52>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8004b4c:	b24b      	sxtb	r3, r1
 8004b4e:	7023      	strb	r3, [r4, #0]
 8004b50:	e7f8      	b.n	8004b44 <pb_dec_varint+0x44>
        return false;
 8004b52:	2000      	movs	r0, #0
 8004b54:	e7e2      	b.n	8004b1c <pb_dec_varint+0x1c>

08004b56 <pb_decode_tag>:
{
 8004b56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b58:	461d      	mov	r5, r3
    *eof = false;
 8004b5a:	2300      	movs	r3, #0
{
 8004b5c:	460e      	mov	r6, r1
 8004b5e:	4617      	mov	r7, r2
    *eof = false;
 8004b60:	702b      	strb	r3, [r5, #0]
    *wire_type = (pb_wire_type_t) 0;
 8004b62:	700b      	strb	r3, [r1, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8004b64:	a901      	add	r1, sp, #4
    *tag = 0;
 8004b66:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8004b68:	462a      	mov	r2, r5
 8004b6a:	f7ff fe97 	bl	800489c <pb_decode_varint32_eof>
 8004b6e:	b120      	cbz	r0, 8004b7a <pb_decode_tag+0x24>
    if (temp == 0)
 8004b70:	9c01      	ldr	r4, [sp, #4]
 8004b72:	b924      	cbnz	r4, 8004b7e <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 8004b74:	2301      	movs	r3, #1
        return false;
 8004b76:	4620      	mov	r0, r4
        *eof = true; /* Special feature: allow 0-terminated messages. */
 8004b78:	702b      	strb	r3, [r5, #0]
}
 8004b7a:	b003      	add	sp, #12
 8004b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *tag = temp >> 3;
 8004b7e:	08e3      	lsrs	r3, r4, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 8004b80:	f004 0407 	and.w	r4, r4, #7
    *tag = temp >> 3;
 8004b84:	603b      	str	r3, [r7, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8004b86:	7034      	strb	r4, [r6, #0]
    return true;
 8004b88:	e7f7      	b.n	8004b7a <pb_decode_tag+0x24>

08004b8a <pb_skip_field>:
{
 8004b8a:	b513      	push	{r0, r1, r4, lr}
 8004b8c:	4604      	mov	r4, r0
    switch (wire_type)
 8004b8e:	2905      	cmp	r1, #5
 8004b90:	d821      	bhi.n	8004bd6 <pb_skip_field+0x4c>
 8004b92:	e8df f001 	tbb	[pc, r1]
 8004b96:	0f03      	.short	0x0f03
 8004b98:	1e202017 	.word	0x1e202017
        if (!pb_read(stream, &byte, 1))
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	a901      	add	r1, sp, #4
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f7ff fec1 	bl	8004928 <pb_read>
 8004ba6:	b118      	cbz	r0, 8004bb0 <pb_skip_field+0x26>
    } while (byte & 0x80);
 8004ba8:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	dbf5      	blt.n	8004b9c <pb_skip_field+0x12>
}
 8004bb0:	b002      	add	sp, #8
 8004bb2:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8004bb4:	2208      	movs	r2, #8
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	4620      	mov	r0, r4
}
 8004bba:	b002      	add	sp, #8
 8004bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8004bc0:	f7ff beb2 	b.w	8004928 <pb_read>
    if (!pb_decode_varint32(stream, &length))
 8004bc4:	a901      	add	r1, sp, #4
 8004bc6:	f7ff fedb 	bl	8004980 <pb_decode_varint32>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 8004bce:	9a01      	ldr	r2, [sp, #4]
 8004bd0:	e7f1      	b.n	8004bb6 <pb_skip_field+0x2c>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8004bd2:	2204      	movs	r2, #4
 8004bd4:	e7ef      	b.n	8004bb6 <pb_skip_field+0x2c>
    switch (wire_type)
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	e7ea      	b.n	8004bb0 <pb_skip_field+0x26>

08004bda <pb_make_string_substream>:
{
 8004bda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bdc:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8004bde:	a901      	add	r1, sp, #4
{
 8004be0:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 8004be2:	f7ff fecd 	bl	8004980 <pb_decode_varint32>
 8004be6:	4603      	mov	r3, r0
 8004be8:	b918      	cbnz	r0, 8004bf2 <pb_make_string_substream+0x18>
        return false;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	b003      	add	sp, #12
 8004bf0:	bd30      	pop	{r4, r5, pc}
    *substream = *stream;
 8004bf2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004bf6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (substream->bytes_left < size)
 8004bfa:	9901      	ldr	r1, [sp, #4]
 8004bfc:	428a      	cmp	r2, r1
 8004bfe:	d3f4      	bcc.n	8004bea <pb_make_string_substream+0x10>
    substream->bytes_left = size;
 8004c00:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 8004c02:	68a2      	ldr	r2, [r4, #8]
 8004c04:	1a52      	subs	r2, r2, r1
 8004c06:	60a2      	str	r2, [r4, #8]
    return true;
 8004c08:	e7f0      	b.n	8004bec <pb_make_string_substream+0x12>

08004c0a <pb_close_string_substream>:
    if (substream->bytes_left) {
 8004c0a:	688a      	ldr	r2, [r1, #8]
{
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4605      	mov	r5, r0
 8004c10:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 8004c12:	b91a      	cbnz	r2, 8004c1c <pb_close_string_substream+0x12>
    stream->state = substream->state;
 8004c14:	6863      	ldr	r3, [r4, #4]
    return true;
 8004c16:	2001      	movs	r0, #1
    stream->state = substream->state;
 8004c18:	606b      	str	r3, [r5, #4]
}
 8004c1a:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f7ff fe82 	bl	8004928 <pb_read>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	d1f5      	bne.n	8004c14 <pb_close_string_substream+0xa>
 8004c28:	e7f7      	b.n	8004c1a <pb_close_string_substream+0x10>
	...

08004c2c <decode_field>:
{
 8004c2c:	460b      	mov	r3, r1
    switch (PB_ATYPE(iter->pos->type))
 8004c2e:	6851      	ldr	r1, [r2, #4]
{
 8004c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c34:	4615      	mov	r5, r2
    switch (PB_ATYPE(iter->pos->type))
 8004c36:	788a      	ldrb	r2, [r1, #2]
{
 8004c38:	b087      	sub	sp, #28
 8004c3a:	4606      	mov	r6, r0
    switch (PB_ATYPE(iter->pos->type))
 8004c3c:	f012 04c0 	ands.w	r4, r2, #192	; 0xc0
 8004c40:	d003      	beq.n	8004c4a <decode_field+0x1e>
 8004c42:	2c40      	cmp	r4, #64	; 0x40
 8004c44:	d070      	beq.n	8004d28 <decode_field+0xfc>
                    PB_RETURN_ERROR(stream, "array overflow");
 8004c46:	2400      	movs	r4, #0
 8004c48:	e00c      	b.n	8004c64 <decode_field+0x38>
    func = PB_DECODERS[PB_LTYPE(type)];
 8004c4a:	f002 0c0f 	and.w	ip, r2, #15
 8004c4e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8004c52:	4f61      	ldr	r7, [pc, #388]	; (8004dd8 <decode_field+0x1ac>)
    switch (PB_HTYPE(type))
 8004c54:	2a20      	cmp	r2, #32
    func = PB_DECODERS[PB_LTYPE(type)];
 8004c56:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
    switch (PB_HTYPE(type))
 8004c5a:	d02a      	beq.n	8004cb2 <decode_field+0x86>
 8004c5c:	d806      	bhi.n	8004c6c <decode_field+0x40>
 8004c5e:	b1d2      	cbz	r2, 8004c96 <decode_field+0x6a>
 8004c60:	2a10      	cmp	r2, #16
 8004c62:	d01e      	beq.n	8004ca2 <decode_field+0x76>
}
 8004c64:	4620      	mov	r0, r4
 8004c66:	b007      	add	sp, #28
 8004c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch (PB_HTYPE(type))
 8004c6c:	2a30      	cmp	r2, #48	; 0x30
 8004c6e:	d1f9      	bne.n	8004c64 <decode_field+0x38>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8004c70:	880a      	ldrh	r2, [r1, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8004c72:	f1bc 0f07 	cmp.w	ip, #7
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8004c76:	696b      	ldr	r3, [r5, #20]
 8004c78:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8004c7a:	d109      	bne.n	8004c90 <decode_field+0x64>
                memset(iter->pData, 0, iter->pos->data_size);
 8004c7c:	890a      	ldrh	r2, [r1, #8]
 8004c7e:	4621      	mov	r1, r4
 8004c80:	6928      	ldr	r0, [r5, #16]
 8004c82:	f00a f9a4 	bl	800efce <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 8004c86:	686b      	ldr	r3, [r5, #4]
 8004c88:	6929      	ldr	r1, [r5, #16]
 8004c8a:	68d8      	ldr	r0, [r3, #12]
 8004c8c:	f7ff fde6 	bl	800485c <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 8004c90:	692a      	ldr	r2, [r5, #16]
 8004c92:	6869      	ldr	r1, [r5, #4]
 8004c94:	e00b      	b.n	8004cae <decode_field+0x82>
            return func(stream, iter->pos, iter->pData);
 8004c96:	692a      	ldr	r2, [r5, #16]
            return func(stream, iter->pos, iter->pData);
 8004c98:	463b      	mov	r3, r7
}
 8004c9a:	b007      	add	sp, #28
 8004c9c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return func(stream, iter->pos, iter->pData);
 8004ca0:	4718      	bx	r3
            if (iter->pSize != iter->pData)
 8004ca2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8004ca6:	4293      	cmp	r3, r2
                *(bool*)iter->pSize = true;
 8004ca8:	bf1c      	itt	ne
 8004caa:	2001      	movne	r0, #1
 8004cac:	7018      	strbne	r0, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 8004cae:	4630      	mov	r0, r6
 8004cb0:	e7f2      	b.n	8004c98 <decode_field+0x6c>
            if (wire_type == PB_WT_STRING
 8004cb2:	2b02      	cmp	r3, #2
            if (iter->pSize != iter->pData)
 8004cb4:	f8d5 8014 	ldr.w	r8, [r5, #20]
            if (wire_type == PB_WT_STRING
 8004cb8:	d129      	bne.n	8004d0e <decode_field+0xe2>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8004cba:	f1bc 0f04 	cmp.w	ip, #4
 8004cbe:	d826      	bhi.n	8004d0e <decode_field+0xe2>
                if (!pb_make_string_substream(stream, &substream))
 8004cc0:	a903      	add	r1, sp, #12
 8004cc2:	f7ff ff8a 	bl	8004bda <pb_make_string_substream>
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	d0bc      	beq.n	8004c46 <decode_field+0x1a>
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 8004ccc:	9b05      	ldr	r3, [sp, #20]
 8004cce:	b12b      	cbz	r3, 8004cdc <decode_field+0xb0>
 8004cd0:	6869      	ldr	r1, [r5, #4]
 8004cd2:	f8b8 3000 	ldrh.w	r3, [r8]
 8004cd6:	894a      	ldrh	r2, [r1, #10]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d809      	bhi.n	8004cf0 <decode_field+0xc4>
                if (substream.bytes_left != 0)
 8004cdc:	9b05      	ldr	r3, [sp, #20]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1b1      	bne.n	8004c46 <decode_field+0x1a>
                if (!pb_close_string_substream(stream, &substream))
 8004ce2:	a903      	add	r1, sp, #12
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f7ff ff90 	bl	8004c0a <pb_close_string_substream>
 8004cea:	2800      	cmp	r0, #0
 8004cec:	d1ba      	bne.n	8004c64 <decode_field+0x38>
 8004cee:	e7aa      	b.n	8004c46 <decode_field+0x1a>
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8004cf0:	8908      	ldrh	r0, [r1, #8]
 8004cf2:	692a      	ldr	r2, [r5, #16]
                    if (!func(&substream, iter->pos, pItem))
 8004cf4:	fb03 2200 	mla	r2, r3, r0, r2
 8004cf8:	a803      	add	r0, sp, #12
 8004cfa:	47b8      	blx	r7
 8004cfc:	b128      	cbz	r0, 8004d0a <decode_field+0xde>
                    (*size)++;
 8004cfe:	f8b8 3000 	ldrh.w	r3, [r8]
 8004d02:	3301      	adds	r3, #1
 8004d04:	f8a8 3000 	strh.w	r3, [r8]
 8004d08:	e7e0      	b.n	8004ccc <decode_field+0xa0>
                        status = false;
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	e7e6      	b.n	8004cdc <decode_field+0xb0>
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8004d0e:	f8b8 3000 	ldrh.w	r3, [r8]
 8004d12:	692a      	ldr	r2, [r5, #16]
                if ((*size)++ >= iter->pos->array_size)
 8004d14:	1c5c      	adds	r4, r3, #1
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8004d16:	8908      	ldrh	r0, [r1, #8]
                if ((*size)++ >= iter->pos->array_size)
 8004d18:	f8a8 4000 	strh.w	r4, [r8]
 8004d1c:	894c      	ldrh	r4, [r1, #10]
 8004d1e:	429c      	cmp	r4, r3
 8004d20:	d991      	bls.n	8004c46 <decode_field+0x1a>
                return func(stream, iter->pos, pItem);
 8004d22:	fb03 2200 	mla	r2, r3, r0, r2
 8004d26:	e7c2      	b.n	8004cae <decode_field+0x82>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 8004d28:	692f      	ldr	r7, [r5, #16]
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 8004d2a:	b10f      	cbz	r7, 8004d30 <decode_field+0x104>
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	b932      	cbnz	r2, 8004d3e <decode_field+0x112>
        return pb_skip_field(stream, wire_type);
 8004d30:	4619      	mov	r1, r3
 8004d32:	4630      	mov	r0, r6
}
 8004d34:	b007      	add	sp, #28
 8004d36:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return pb_skip_field(stream, wire_type);
 8004d3a:	f7ff bf26 	b.w	8004b8a <pb_skip_field>
    if (wire_type == PB_WT_STRING)
 8004d3e:	2b02      	cmp	r3, #2
    void **arg = &(pCallback->arg);
 8004d40:	f107 0804 	add.w	r8, r7, #4
    if (wire_type == PB_WT_STRING)
 8004d44:	d116      	bne.n	8004d74 <decode_field+0x148>
        if (!pb_make_string_substream(stream, &substream))
 8004d46:	a903      	add	r1, sp, #12
 8004d48:	f7ff ff47 	bl	8004bda <pb_make_string_substream>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	f43f af7a 	beq.w	8004c46 <decode_field+0x1a>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	4642      	mov	r2, r8
 8004d56:	6869      	ldr	r1, [r5, #4]
 8004d58:	a803      	add	r0, sp, #12
 8004d5a:	4798      	blx	r3
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	f43f af72 	beq.w	8004c46 <decode_field+0x1a>
        } while (substream.bytes_left);
 8004d62:	9b05      	ldr	r3, [sp, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1f4      	bne.n	8004d52 <decode_field+0x126>
        if (!pb_close_string_substream(stream, &substream))
 8004d68:	a903      	add	r1, sp, #12
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	f7ff ff4d 	bl	8004c0a <pb_close_string_substream>
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8004d70:	4604      	mov	r4, r0
 8004d72:	e777      	b.n	8004c64 <decode_field+0x38>
    switch (wire_type)
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d021      	beq.n	8004dbc <decode_field+0x190>
 8004d78:	2b05      	cmp	r3, #5
 8004d7a:	d027      	beq.n	8004dcc <decode_field+0x1a0>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f47f af62 	bne.w	8004c46 <decode_field+0x1a>
 8004d82:	461c      	mov	r4, r3
 8004d84:	46e9      	mov	r9, sp
                (*size)++;
 8004d86:	3401      	adds	r4, #1
                if (*size > max_size) return false;
 8004d88:	2c0b      	cmp	r4, #11
 8004d8a:	f43f af5c 	beq.w	8004c46 <decode_field+0x1a>
                if (!pb_read(stream, buf, 1)) return false;
 8004d8e:	2201      	movs	r2, #1
 8004d90:	4649      	mov	r1, r9
 8004d92:	4630      	mov	r0, r6
 8004d94:	f7ff fdc8 	bl	8004928 <pb_read>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	f43f af54 	beq.w	8004c46 <decode_field+0x1a>
            } while (*buf++ & 0x80);
 8004d9e:	f919 3b01 	ldrsb.w	r3, [r9], #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	dbef      	blt.n	8004d86 <decode_field+0x15a>
        substream = pb_istream_from_buffer(buffer, size);
 8004da6:	4b0d      	ldr	r3, [pc, #52]	; (8004ddc <decode_field+0x1b0>)
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8004da8:	4642      	mov	r2, r8
 8004daa:	6869      	ldr	r1, [r5, #4]
 8004dac:	a803      	add	r0, sp, #12
        substream = pb_istream_from_buffer(buffer, size);
 8004dae:	9303      	str	r3, [sp, #12]
 8004db0:	f8cd d010 	str.w	sp, [sp, #16]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8004db4:	683b      	ldr	r3, [r7, #0]
        substream = pb_istream_from_buffer(buffer, size);
 8004db6:	9405      	str	r4, [sp, #20]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8004db8:	4798      	blx	r3
 8004dba:	e7d9      	b.n	8004d70 <decode_field+0x144>
            *size = 8;
 8004dbc:	2408      	movs	r4, #8
            return pb_read(stream, buf, 8);
 8004dbe:	2208      	movs	r2, #8
 8004dc0:	4669      	mov	r1, sp
 8004dc2:	f7ff fdb1 	bl	8004928 <pb_read>
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d1ed      	bne.n	8004da6 <decode_field+0x17a>
 8004dca:	e73c      	b.n	8004c46 <decode_field+0x1a>
            return pb_read(stream, buf, 4);
 8004dcc:	2204      	movs	r2, #4
 8004dce:	4669      	mov	r1, sp
            *size = 4;
 8004dd0:	2404      	movs	r4, #4
            return pb_read(stream, buf, 4);
 8004dd2:	f7ff fda9 	bl	8004928 <pb_read>
 8004dd6:	e7f6      	b.n	8004dc6 <decode_field+0x19a>
 8004dd8:	080116e8 	.word	0x080116e8
 8004ddc:	0800478d 	.word	0x0800478d

08004de0 <pb_decode_noinit>:
{
 8004de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8004de4:	2400      	movs	r4, #0
{
 8004de6:	b091      	sub	sp, #68	; 0x44
 8004de8:	4605      	mov	r5, r0
    uint32_t extension_range_start = 0;
 8004dea:	46a0      	mov	r8, r4
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8004dec:	a804      	add	r0, sp, #16
    pb_size_t fixed_count_size = 0;
 8004dee:	f8ad 4002 	strh.w	r4, [sp, #2]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8004df2:	e9cd 4402 	strd	r4, r4, [sp, #8]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8004df6:	f7ff fc63 	bl	80046c0 <pb_field_iter_begin>
    while (stream->bytes_left)
 8004dfa:	68ab      	ldr	r3, [r5, #8]
 8004dfc:	b9e3      	cbnz	r3, 8004e38 <pb_decode_noinit+0x58>
    if (fixed_count_field != NULL &&
 8004dfe:	b124      	cbz	r4, 8004e0a <pb_decode_noinit+0x2a>
 8004e00:	8962      	ldrh	r2, [r4, #10]
 8004e02:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d122      	bne.n	8004e50 <pb_decode_noinit+0x70>
        } while (pb_field_iter_next(&iter));
 8004e0a:	a804      	add	r0, sp, #16
            last_type = iter.pos->type;
 8004e0c:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
 8004e10:	789d      	ldrb	r5, [r3, #2]
        } while (pb_field_iter_next(&iter));
 8004e12:	f7ff fc66 	bl	80046e2 <pb_field_iter_next>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d1f7      	bne.n	8004e0a <pb_decode_noinit+0x2a>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 8004e1a:	f015 0f30 	tst.w	r5, #48	; 0x30
 8004e1e:	d103      	bne.n	8004e28 <pb_decode_noinit+0x48>
 8004e20:	9b05      	ldr	r3, [sp, #20]
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	b103      	cbz	r3, 8004e28 <pb_decode_noinit+0x48>
            req_field_count++;
 8004e26:	3401      	adds	r4, #1
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8004e28:	2c40      	cmp	r4, #64	; 0x40
 8004e2a:	f200 80bb 	bhi.w	8004fa4 <pb_decode_noinit+0x1c4>
        if (req_field_count > 0)
 8004e2e:	2c00      	cmp	r4, #0
 8004e30:	f040 80b9 	bne.w	8004fa6 <pb_decode_noinit+0x1c6>
    return true;
 8004e34:	2001      	movs	r0, #1
 8004e36:	e00c      	b.n	8004e52 <pb_decode_noinit+0x72>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8004e38:	f10d 0301 	add.w	r3, sp, #1
 8004e3c:	aa01      	add	r2, sp, #4
 8004e3e:	4669      	mov	r1, sp
 8004e40:	4628      	mov	r0, r5
 8004e42:	f7ff fe88 	bl	8004b56 <pb_decode_tag>
 8004e46:	b938      	cbnz	r0, 8004e58 <pb_decode_noinit+0x78>
            if (eof)
 8004e48:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1d6      	bne.n	8004dfe <pb_decode_noinit+0x1e>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004e50:	2000      	movs	r0, #0
}
 8004e52:	b011      	add	sp, #68	; 0x44
 8004e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 8004e58:	9f01      	ldr	r7, [sp, #4]
 8004e5a:	a804      	add	r0, sp, #16
 8004e5c:	4639      	mov	r1, r7
 8004e5e:	f7ff fc7e 	bl	800475e <pb_field_iter_find>
 8004e62:	2800      	cmp	r0, #0
 8004e64:	d151      	bne.n	8004f0a <pb_decode_noinit+0x12a>
            if (tag >= extension_range_start)
 8004e66:	4547      	cmp	r7, r8
 8004e68:	f0c0 80a4 	bcc.w	8004fb4 <pb_decode_noinit+0x1d4>
    const pb_field_t *start = iter->pos;
 8004e6c:	9e05      	ldr	r6, [sp, #20]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 8004e6e:	9a05      	ldr	r2, [sp, #20]
 8004e70:	7893      	ldrb	r3, [r2, #2]
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	f000 80a5 	beq.w	8004fc6 <pb_decode_noinit+0x1e6>
        (void)pb_field_iter_next(iter);
 8004e7c:	a804      	add	r0, sp, #16
 8004e7e:	f7ff fc30 	bl	80046e2 <pb_field_iter_next>
    } while (iter->pos != start);
 8004e82:	9b05      	ldr	r3, [sp, #20]
 8004e84:	429e      	cmp	r6, r3
 8004e86:	d1f2      	bne.n	8004e6e <pb_decode_noinit+0x8e>
                    extension_range_start = (uint32_t)-1;
 8004e88:	f04f 38ff 	mov.w	r8, #4294967295
                if (tag >= extension_range_start)
 8004e8c:	4547      	cmp	r7, r8
                    if (!decode_extension(stream, tag, wire_type, &iter))
 8004e8e:	f89d b000 	ldrb.w	fp, [sp]
                if (tag >= extension_range_start)
 8004e92:	f0c0 808f 	bcc.w	8004fb4 <pb_decode_noinit+0x1d4>
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8004e96:	9a08      	ldr	r2, [sp, #32]
                    size_t pos = stream->bytes_left;
 8004e98:	f8d5 9008 	ldr.w	r9, [r5, #8]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8004e9c:	6816      	ldr	r6, [r2, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8004e9e:	68aa      	ldr	r2, [r5, #8]
 8004ea0:	2e00      	cmp	r6, #0
 8004ea2:	f000 8084 	beq.w	8004fae <pb_decode_noinit+0x1ce>
 8004ea6:	4591      	cmp	r9, r2
 8004ea8:	d1a7      	bne.n	8004dfa <pb_decode_noinit+0x1a>
        if (extension->type->decode)
 8004eaa:	6832      	ldr	r2, [r6, #0]
 8004eac:	f8d2 a000 	ldr.w	sl, [r2]
 8004eb0:	f1ba 0f00 	cmp.w	sl, #0
 8004eb4:	d008      	beq.n	8004ec8 <pb_decode_noinit+0xe8>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8004eb6:	465b      	mov	r3, fp
 8004eb8:	463a      	mov	r2, r7
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47d0      	blx	sl
        if (!status)
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	d0c5      	beq.n	8004e50 <pb_decode_noinit+0x70>
        extension = extension->next;
 8004ec4:	68b6      	ldr	r6, [r6, #8]
 8004ec6:	e7ea      	b.n	8004e9e <pb_decode_noinit+0xbe>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8004ec8:	f8d2 a008 	ldr.w	sl, [r2, #8]
    if (field->tag != tag)
 8004ecc:	f8ba 2000 	ldrh.w	r2, [sl]
 8004ed0:	4297      	cmp	r7, r2
 8004ed2:	d1f7      	bne.n	8004ec4 <pb_decode_noinit+0xe4>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8004ed4:	6872      	ldr	r2, [r6, #4]
 8004ed6:	4651      	mov	r1, sl
 8004ed8:	a80a      	add	r0, sp, #40	; 0x28
 8004eda:	f7ff fbf1 	bl	80046c0 <pb_field_iter_begin>
    iter->pData = extension->dest;
 8004ede:	6872      	ldr	r2, [r6, #4]
    extension->found = true;
 8004ee0:	f04f 0301 	mov.w	r3, #1
    return decode_field(stream, wire_type, &iter);
 8004ee4:	4659      	mov	r1, fp
    iter->pData = extension->dest;
 8004ee6:	920e      	str	r2, [sp, #56]	; 0x38
    iter->pSize = &extension->found;
 8004ee8:	f106 020c 	add.w	r2, r6, #12
    return decode_field(stream, wire_type, &iter);
 8004eec:	4628      	mov	r0, r5
    iter->pSize = &extension->found;
 8004eee:	920f      	str	r2, [sp, #60]	; 0x3c
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004ef0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8004ef4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8004ef8:	2a80      	cmp	r2, #128	; 0x80
        iter->pData = &extension->dest;
 8004efa:	bf04      	itt	eq
 8004efc:	1d32      	addeq	r2, r6, #4
 8004efe:	920e      	streq	r2, [sp, #56]	; 0x38
    return decode_field(stream, wire_type, &iter);
 8004f00:	aa0a      	add	r2, sp, #40	; 0x28
    extension->found = true;
 8004f02:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 8004f04:	f7ff fe92 	bl	8004c2c <decode_field>
 8004f08:	e7da      	b.n	8004ec0 <pb_decode_noinit+0xe0>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 8004f0a:	9a05      	ldr	r2, [sp, #20]
 8004f0c:	7893      	ldrb	r3, [r2, #2]
 8004f0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d119      	bne.n	8004f4a <pb_decode_noinit+0x16a>
            && iter.pSize == iter.pData)
 8004f16:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 8004f1a:	4299      	cmp	r1, r3
 8004f1c:	d10e      	bne.n	8004f3c <pb_decode_noinit+0x15c>
            if (fixed_count_field != iter.pos) {
 8004f1e:	42a2      	cmp	r2, r4
 8004f20:	d008      	beq.n	8004f34 <pb_decode_noinit+0x154>
                if (fixed_count_field != NULL &&
 8004f22:	b124      	cbz	r4, 8004f2e <pb_decode_noinit+0x14e>
 8004f24:	8961      	ldrh	r1, [r4, #10]
 8004f26:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8004f2a:	4299      	cmp	r1, r3
 8004f2c:	d190      	bne.n	8004e50 <pb_decode_noinit+0x70>
                fixed_count_size = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f8ad 3002 	strh.w	r3, [sp, #2]
            iter.pSize = &fixed_count_size;
 8004f34:	f10d 0302 	add.w	r3, sp, #2
 8004f38:	4614      	mov	r4, r2
 8004f3a:	9309      	str	r3, [sp, #36]	; 0x24
        if (!decode_field(stream, wire_type, &iter))
 8004f3c:	aa04      	add	r2, sp, #16
 8004f3e:	f89d 1000 	ldrb.w	r1, [sp]
 8004f42:	4628      	mov	r0, r5
 8004f44:	f7ff fe72 	bl	8004c2c <decode_field>
 8004f48:	e039      	b.n	8004fbe <pb_decode_noinit+0x1de>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f6      	bne.n	8004f3c <pb_decode_noinit+0x15c>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8004f4e:	9a06      	ldr	r2, [sp, #24]
 8004f50:	2a3f      	cmp	r2, #63	; 0x3f
 8004f52:	d8f3      	bhi.n	8004f3c <pb_decode_noinit+0x15c>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8004f54:	0951      	lsrs	r1, r2, #5
 8004f56:	ab10      	add	r3, sp, #64	; 0x40
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8004f58:	f002 021f 	and.w	r2, r2, #31
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8004f5c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8004f60:	2301      	movs	r3, #1
 8004f62:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8004f64:	f851 2c38 	ldr.w	r2, [r1, #-56]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f841 3c38 	str.w	r3, [r1, #-56]
 8004f6e:	e7e5      	b.n	8004f3c <pb_decode_noinit+0x15c>
                if (fields_seen[i] != allbits)
 8004f70:	f851 0b04 	ldr.w	r0, [r1], #4
 8004f74:	3001      	adds	r0, #1
 8004f76:	f47f af6b 	bne.w	8004e50 <pb_decode_noinit+0x70>
            for (i = 0; i < (req_field_count >> 5); i++)
 8004f7a:	3201      	adds	r2, #1
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d1f7      	bne.n	8004f70 <pb_decode_noinit+0x190>
            if ((req_field_count & 31) != 0)
 8004f80:	f014 041f 	ands.w	r4, r4, #31
 8004f84:	f43f af56 	beq.w	8004e34 <pb_decode_noinit+0x54>
                if (fields_seen[req_field_count >> 5] !=
 8004f88:	aa10      	add	r2, sp, #64	; 0x40
                    (allbits >> (32 - (req_field_count & 31))))
 8004f8a:	f1c4 0420 	rsb	r4, r4, #32
 8004f8e:	f04f 30ff 	mov.w	r0, #4294967295
                if (fields_seen[req_field_count >> 5] !=
 8004f92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 8004f96:	40e0      	lsrs	r0, r4
                if (fields_seen[req_field_count >> 5] !=
 8004f98:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8004f9c:	1ac3      	subs	r3, r0, r3
 8004f9e:	4258      	negs	r0, r3
 8004fa0:	4158      	adcs	r0, r3
 8004fa2:	e756      	b.n	8004e52 <pb_decode_noinit+0x72>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 8004fa4:	2440      	movs	r4, #64	; 0x40
            for (i = 0; i < (req_field_count >> 5); i++)
 8004fa6:	0963      	lsrs	r3, r4, #5
 8004fa8:	a902      	add	r1, sp, #8
 8004faa:	2200      	movs	r2, #0
 8004fac:	e7e6      	b.n	8004f7c <pb_decode_noinit+0x19c>
                    if (pos != stream->bytes_left)
 8004fae:	4591      	cmp	r9, r2
 8004fb0:	f47f af23 	bne.w	8004dfa <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 8004fb4:	f89d 1000 	ldrb.w	r1, [sp]
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f7ff fde6 	bl	8004b8a <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	f47f af1b 	bne.w	8004dfa <pb_decode_noinit+0x1a>
 8004fc4:	e744      	b.n	8004e50 <pb_decode_noinit+0x70>
                    extension_range_start = iter.pos->tag;
 8004fc6:	f8b2 8000 	ldrh.w	r8, [r2]
 8004fca:	e75f      	b.n	8004e8c <pb_decode_noinit+0xac>

08004fcc <pb_decode>:
{
 8004fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fce:	460c      	mov	r4, r1
 8004fd0:	4605      	mov	r5, r0
    pb_message_set_to_defaults(fields, dest_struct);
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	9201      	str	r2, [sp, #4]
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f7ff fc40 	bl	800485c <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 8004fdc:	9a01      	ldr	r2, [sp, #4]
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4628      	mov	r0, r5
}
 8004fe2:	b003      	add	sp, #12
 8004fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 8004fe8:	f7ff befa 	b.w	8004de0 <pb_decode_noinit>

08004fec <pb_dec_submessage>:
{
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	460c      	mov	r4, r1
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 8004ff2:	68ce      	ldr	r6, [r1, #12]
{
 8004ff4:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 8004ff6:	a903      	add	r1, sp, #12
{
 8004ff8:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 8004ffa:	f7ff fdee 	bl	8004bda <pb_make_string_substream>
 8004ffe:	b188      	cbz	r0, 8005024 <pb_dec_submessage+0x38>
    if (field->ptr == NULL)
 8005000:	68e3      	ldr	r3, [r4, #12]
 8005002:	b17b      	cbz	r3, 8005024 <pb_dec_submessage+0x38>
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8005004:	78a3      	ldrb	r3, [r4, #2]
        status = pb_decode(&substream, submsg_fields, dest);
 8005006:	4631      	mov	r1, r6
 8005008:	a803      	add	r0, sp, #12
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800500a:	9a01      	ldr	r2, [sp, #4]
 800500c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005010:	2b20      	cmp	r3, #32
 8005012:	d10b      	bne.n	800502c <pb_dec_submessage+0x40>
        status = pb_decode(&substream, submsg_fields, dest);
 8005014:	f7ff ffda 	bl	8004fcc <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8005018:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 800501a:	a903      	add	r1, sp, #12
 800501c:	4628      	mov	r0, r5
 800501e:	f7ff fdf4 	bl	8004c0a <pb_close_string_substream>
 8005022:	b900      	cbnz	r0, 8005026 <pb_dec_submessage+0x3a>
        return false;
 8005024:	2400      	movs	r4, #0
}
 8005026:	4620      	mov	r0, r4
 8005028:	b006      	add	sp, #24
 800502a:	bd70      	pop	{r4, r5, r6, pc}
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 800502c:	f7ff fed8 	bl	8004de0 <pb_decode_noinit>
 8005030:	e7f2      	b.n	8005018 <pb_dec_submessage+0x2c>

08005032 <pb_decode_delimited>:
{
 8005032:	b530      	push	{r4, r5, lr}
 8005034:	b087      	sub	sp, #28
 8005036:	460c      	mov	r4, r1
 8005038:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 800503a:	a903      	add	r1, sp, #12
{
 800503c:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 800503e:	f7ff fdcc 	bl	8004bda <pb_make_string_substream>
 8005042:	b150      	cbz	r0, 800505a <pb_decode_delimited+0x28>
    status = pb_decode(&substream, fields, dest_struct);
 8005044:	4621      	mov	r1, r4
 8005046:	9a01      	ldr	r2, [sp, #4]
 8005048:	a803      	add	r0, sp, #12
 800504a:	f7ff ffbf 	bl	8004fcc <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 800504e:	a903      	add	r1, sp, #12
    status = pb_decode(&substream, fields, dest_struct);
 8005050:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8005052:	4628      	mov	r0, r5
 8005054:	f7ff fdd9 	bl	8004c0a <pb_close_string_substream>
 8005058:	b900      	cbnz	r0, 800505c <pb_decode_delimited+0x2a>
        return false;
 800505a:	2400      	movs	r4, #0
}
 800505c:	4620      	mov	r0, r4
 800505e:	b007      	add	sp, #28
 8005060:	bd30      	pop	{r4, r5, pc}

08005062 <pb_decode_svarint>:
{
 8005062:	b513      	push	{r0, r1, r4, lr}
 8005064:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 8005066:	4669      	mov	r1, sp
 8005068:	f7ff fcee 	bl	8004a48 <pb_decode_varint>
 800506c:	b160      	cbz	r0, 8005088 <pb_decode_svarint+0x26>
    if (value & 1)
 800506e:	e9dd 1300 	ldrd	r1, r3, [sp]
        *dest = (pb_int64_t)(~(value >> 1));
 8005072:	084a      	lsrs	r2, r1, #1
    if (value & 1)
 8005074:	07c9      	lsls	r1, r1, #31
        *dest = (pb_int64_t)(~(value >> 1));
 8005076:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800507a:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800507e:	bf44      	itt	mi
 8005080:	43d2      	mvnmi	r2, r2
 8005082:	43db      	mvnmi	r3, r3
        *dest = (pb_int64_t)(value >> 1);
 8005084:	e9c4 2300 	strd	r2, r3, [r4]
}
 8005088:	b002      	add	sp, #8
 800508a:	bd10      	pop	{r4, pc}

0800508c <pb_dec_svarint>:
{
 800508c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800508e:	460d      	mov	r5, r1
    if (!pb_decode_svarint(stream, &value))
 8005090:	4669      	mov	r1, sp
{
 8005092:	4614      	mov	r4, r2
    if (!pb_decode_svarint(stream, &value))
 8005094:	f7ff ffe5 	bl	8005062 <pb_decode_svarint>
 8005098:	b170      	cbz	r0, 80050b8 <pb_dec_svarint+0x2c>
    if (field->data_size == sizeof(pb_int64_t))
 800509a:	892b      	ldrh	r3, [r5, #8]
 800509c:	2b08      	cmp	r3, #8
 800509e:	d10d      	bne.n	80050bc <pb_dec_svarint+0x30>
        clamped = *(pb_int64_t*)dest = value;
 80050a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80050a4:	e9c4 3200 	strd	r3, r2, [r4]
    if (clamped != value)
 80050a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050ac:	4291      	cmp	r1, r2
 80050ae:	bf08      	it	eq
 80050b0:	4298      	cmpeq	r0, r3
 80050b2:	bf0c      	ite	eq
 80050b4:	2001      	moveq	r0, #1
 80050b6:	2000      	movne	r0, #0
}
 80050b8:	b003      	add	sp, #12
 80050ba:	bd30      	pop	{r4, r5, pc}
    else if (field->data_size == sizeof(int32_t))
 80050bc:	2b04      	cmp	r3, #4
 80050be:	d103      	bne.n	80050c8 <pb_dec_svarint+0x3c>
        clamped = *(int32_t*)dest = (int32_t)value;
 80050c0:	9b00      	ldr	r3, [sp, #0]
 80050c2:	6023      	str	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 80050c4:	17da      	asrs	r2, r3, #31
 80050c6:	e7ef      	b.n	80050a8 <pb_dec_svarint+0x1c>
    else if (field->data_size == sizeof(int_least16_t))
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d103      	bne.n	80050d4 <pb_dec_svarint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 80050cc:	f9bd 3000 	ldrsh.w	r3, [sp]
 80050d0:	8023      	strh	r3, [r4, #0]
 80050d2:	e7f7      	b.n	80050c4 <pb_dec_svarint+0x38>
    else if (field->data_size == sizeof(int_least8_t))
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d103      	bne.n	80050e0 <pb_dec_svarint+0x54>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 80050d8:	f99d 3000 	ldrsb.w	r3, [sp]
 80050dc:	7023      	strb	r3, [r4, #0]
 80050de:	e7f1      	b.n	80050c4 <pb_dec_svarint+0x38>
        return false;
 80050e0:	2000      	movs	r0, #0
 80050e2:	e7e9      	b.n	80050b8 <pb_dec_svarint+0x2c>

080050e4 <pb_decode_fixed32>:
    if (!pb_read(stream, bytes, 4))
 80050e4:	2204      	movs	r2, #4
{
 80050e6:	b513      	push	{r0, r1, r4, lr}
 80050e8:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 80050ea:	eb0d 0102 	add.w	r1, sp, r2
 80050ee:	f7ff fc1b 	bl	8004928 <pb_read>
 80050f2:	b108      	cbz	r0, 80050f8 <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 80050f4:	9b01      	ldr	r3, [sp, #4]
 80050f6:	6023      	str	r3, [r4, #0]
}
 80050f8:	b002      	add	sp, #8
 80050fa:	bd10      	pop	{r4, pc}

080050fc <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 80050fc:	4611      	mov	r1, r2
 80050fe:	f7ff bff1 	b.w	80050e4 <pb_decode_fixed32>

08005102 <pb_decode_fixed64>:
{
 8005102:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 8005104:	2208      	movs	r2, #8
{
 8005106:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 8005108:	4669      	mov	r1, sp
 800510a:	f7ff fc0d 	bl	8004928 <pb_read>
 800510e:	b118      	cbz	r0, 8005118 <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 8005110:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005114:	e9c4 2300 	strd	r2, r3, [r4]
}
 8005118:	b002      	add	sp, #8
 800511a:	bd10      	pop	{r4, pc}

0800511c <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 800511c:	4611      	mov	r1, r2
 800511e:	f7ff bff0 	b.w	8005102 <pb_decode_fixed64>

08005122 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 8005122:	b510      	push	{r4, lr}
 8005124:	460a      	mov	r2, r1
    pb_type_t type = field->type;
 8005126:	7881      	ldrb	r1, [r0, #2]
{
 8005128:	b086      	sub	sp, #24
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800512a:	f011 0330 	ands.w	r3, r1, #48	; 0x30
 800512e:	d03f      	beq.n	80051b0 <pb_check_proto3_default_value+0x8e>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8005130:	2b20      	cmp	r3, #32
    const void *pSize = (const char*)pData + field->size_offset;
 8005132:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8005136:	d104      	bne.n	8005142 <pb_check_proto3_default_value+0x20>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 8005138:	5b10      	ldrh	r0, [r2, r4]
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
            return bytes->size == 0;
 800513a:	fab0 f080 	clz	r0, r0
 800513e:	0940      	lsrs	r0, r0, #5
 8005140:	e007      	b.n	8005152 <pb_check_proto3_default_value+0x30>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8005142:	2b30      	cmp	r3, #48	; 0x30
 8005144:	d0f8      	beq.n	8005138 <pb_check_proto3_default_value+0x16>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 8005146:	2b10      	cmp	r3, #16
 8005148:	d105      	bne.n	8005156 <pb_check_proto3_default_value+0x34>
 800514a:	b124      	cbz	r4, 8005156 <pb_check_proto3_default_value+0x34>
        return *(const bool*)pSize == false;
 800514c:	5d10      	ldrb	r0, [r2, r4]
 800514e:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 8005152:	b006      	add	sp, #24
 8005154:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8005156:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 800515a:	d005      	beq.n	8005168 <pb_check_proto3_default_value+0x46>
 800515c:	8903      	ldrh	r3, [r0, #8]
 800515e:	4413      	add	r3, r2
	    for (i = 0; i < field->data_size; i++)
 8005160:	4293      	cmp	r3, r2
 8005162:	d121      	bne.n	80051a8 <pb_check_proto3_default_value+0x86>
	    return true;
 8005164:	2001      	movs	r0, #1
 8005166:	e7f4      	b.n	8005152 <pb_check_proto3_default_value+0x30>
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8005168:	f001 030f 	and.w	r3, r1, #15
 800516c:	2b05      	cmp	r3, #5
 800516e:	d101      	bne.n	8005174 <pb_check_proto3_default_value+0x52>
            return bytes->size == 0;
 8005170:	8810      	ldrh	r0, [r2, #0]
 8005172:	e7e2      	b.n	800513a <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8005174:	2b06      	cmp	r3, #6
 8005176:	d101      	bne.n	800517c <pb_check_proto3_default_value+0x5a>
            return *(const char*)pData == '\0';
 8005178:	7810      	ldrb	r0, [r2, #0]
 800517a:	e7de      	b.n	800513a <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800517c:	2b09      	cmp	r3, #9
 800517e:	d101      	bne.n	8005184 <pb_check_proto3_default_value+0x62>
            return field->data_size == 0;
 8005180:	8900      	ldrh	r0, [r0, #8]
 8005182:	e7da      	b.n	800513a <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8005184:	2b07      	cmp	r3, #7
 8005186:	d1e9      	bne.n	800515c <pb_check_proto3_default_value+0x3a>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 8005188:	68c1      	ldr	r1, [r0, #12]
 800518a:	4668      	mov	r0, sp
 800518c:	f7ff fa98 	bl	80046c0 <pb_field_iter_begin>
 8005190:	2800      	cmp	r0, #0
 8005192:	d0e7      	beq.n	8005164 <pb_check_proto3_default_value+0x42>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 8005194:	9904      	ldr	r1, [sp, #16]
 8005196:	9801      	ldr	r0, [sp, #4]
 8005198:	f7ff ffc3 	bl	8005122 <pb_check_proto3_default_value>
 800519c:	2800      	cmp	r0, #0
 800519e:	d0d8      	beq.n	8005152 <pb_check_proto3_default_value+0x30>
                } while (pb_field_iter_next(&iter));
 80051a0:	4668      	mov	r0, sp
 80051a2:	f7ff fa9e 	bl	80046e2 <pb_field_iter_next>
 80051a6:	e7f3      	b.n	8005190 <pb_check_proto3_default_value+0x6e>
	        if (p[i] != 0)
 80051a8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80051ac:	2900      	cmp	r1, #0
 80051ae:	d0d7      	beq.n	8005160 <pb_check_proto3_default_value+0x3e>
        return false;
 80051b0:	2000      	movs	r0, #0
 80051b2:	e7ce      	b.n	8005152 <pb_check_proto3_default_value+0x30>

080051b4 <pb_write>:
{
 80051b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 80051b6:	6806      	ldr	r6, [r0, #0]
{
 80051b8:	4604      	mov	r4, r0
 80051ba:	4615      	mov	r5, r2
        if (stream->bytes_written + count > stream->max_size)
 80051bc:	68c3      	ldr	r3, [r0, #12]
    if (stream->callback != NULL)
 80051be:	b926      	cbnz	r6, 80051ca <pb_write+0x16>
    stream->bytes_written += count;
 80051c0:	68e3      	ldr	r3, [r4, #12]
    return true;
 80051c2:	2001      	movs	r0, #1
    stream->bytes_written += count;
 80051c4:	442b      	add	r3, r5
 80051c6:	60e3      	str	r3, [r4, #12]
}
 80051c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (stream->bytes_written + count > stream->max_size)
 80051ca:	4413      	add	r3, r2
 80051cc:	6887      	ldr	r7, [r0, #8]
 80051ce:	429f      	cmp	r7, r3
 80051d0:	d201      	bcs.n	80051d6 <pb_write+0x22>
            PB_RETURN_ERROR(stream, "stream full");
 80051d2:	2000      	movs	r0, #0
 80051d4:	e7f8      	b.n	80051c8 <pb_write+0x14>
        if (!stream->callback(stream, buf, count))
 80051d6:	47b0      	blx	r6
 80051d8:	2800      	cmp	r0, #0
 80051da:	d1f1      	bne.n	80051c0 <pb_write+0xc>
 80051dc:	e7f9      	b.n	80051d2 <pb_write+0x1e>

080051de <pb_encode_varint>:
bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 80051de:	2a80      	cmp	r2, #128	; 0x80
 80051e0:	f173 0100 	sbcs.w	r1, r3, #0
{
 80051e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051e6:	4605      	mov	r5, r0
 80051e8:	b085      	sub	sp, #20
    if (value <= 0x7F)
 80051ea:	d207      	bcs.n	80051fc <pb_encode_varint+0x1e>
    {
        pb_byte_t v = (pb_byte_t)value;
 80051ec:	f88d 2004 	strb.w	r2, [sp, #4]
        return pb_write(stream, &v, 1);
 80051f0:	a901      	add	r1, sp, #4
 80051f2:	2201      	movs	r2, #1
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 80051f4:	f7ff ffde 	bl	80051b4 <pb_write>
}
 80051f8:	b005      	add	sp, #20
 80051fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051fc:	ae01      	add	r6, sp, #4
    size_t i = 0;
 80051fe:	2400      	movs	r4, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8005200:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8005204:	b2d0      	uxtb	r0, r2
 8005206:	f806 1b01 	strb.w	r1, [r6], #1
        value >>= 7;
 800520a:	09d1      	lsrs	r1, r2, #7
 800520c:	ea41 6243 	orr.w	r2, r1, r3, lsl #25
 8005210:	4621      	mov	r1, r4
 8005212:	09db      	lsrs	r3, r3, #7
        i++;
 8005214:	3401      	adds	r4, #1
    while (value)
 8005216:	ea52 0703 	orrs.w	r7, r2, r3
 800521a:	d1f1      	bne.n	8005200 <pb_encode_varint+0x22>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 800521c:	f101 0310 	add.w	r3, r1, #16
 8005220:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    return pb_write(stream, buffer, i);
 8005224:	a901      	add	r1, sp, #4
 8005226:	4628      	mov	r0, r5
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8005228:	446b      	add	r3, sp
 800522a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    return pb_write(stream, buffer, i);
 800522e:	4622      	mov	r2, r4
 8005230:	e7e0      	b.n	80051f4 <pb_encode_varint+0x16>

08005232 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
 8005232:	890b      	ldrh	r3, [r1, #8]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d104      	bne.n	8005242 <pb_enc_uvarint+0x10>
        value = *(const uint_least8_t*)src;
 8005238:	7811      	ldrb	r1, [r2, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
 800523a:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 800523c:	460a      	mov	r2, r1
 800523e:	f7ff bfce 	b.w	80051de <pb_encode_varint>
    else if (field->data_size == sizeof(uint_least16_t))
 8005242:	2b02      	cmp	r3, #2
 8005244:	d101      	bne.n	800524a <pb_enc_uvarint+0x18>
        value = *(const uint_least16_t*)src;
 8005246:	8811      	ldrh	r1, [r2, #0]
 8005248:	e7f7      	b.n	800523a <pb_enc_uvarint+0x8>
    else if (field->data_size == sizeof(uint32_t))
 800524a:	2b04      	cmp	r3, #4
 800524c:	d101      	bne.n	8005252 <pb_enc_uvarint+0x20>
        value = *(const uint32_t*)src;
 800524e:	6811      	ldr	r1, [r2, #0]
 8005250:	e7f3      	b.n	800523a <pb_enc_uvarint+0x8>
    else if (field->data_size == sizeof(pb_uint64_t))
 8005252:	2b08      	cmp	r3, #8
 8005254:	d102      	bne.n	800525c <pb_enc_uvarint+0x2a>
        value = *(const pb_uint64_t*)src;
 8005256:	e9d2 1300 	ldrd	r1, r3, [r2]
 800525a:	e7ef      	b.n	800523c <pb_enc_uvarint+0xa>
}
 800525c:	2000      	movs	r0, #0
 800525e:	4770      	bx	lr

08005260 <pb_enc_varint>:
{
 8005260:	4613      	mov	r3, r2
    if (field->data_size == sizeof(int_least8_t))
 8005262:	890a      	ldrh	r2, [r1, #8]
 8005264:	2a01      	cmp	r2, #1
 8005266:	d104      	bne.n	8005272 <pb_enc_varint+0x12>
        value = *(const int_least8_t*)src;
 8005268:	f993 2000 	ldrsb.w	r2, [r3]
        value = *(const int_least16_t*)src;
 800526c:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 800526e:	f7ff bfb6 	b.w	80051de <pb_encode_varint>
    else if (field->data_size == sizeof(int_least16_t))
 8005272:	2a02      	cmp	r2, #2
 8005274:	d102      	bne.n	800527c <pb_enc_varint+0x1c>
        value = *(const int_least16_t*)src;
 8005276:	f9b3 2000 	ldrsh.w	r2, [r3]
 800527a:	e7f7      	b.n	800526c <pb_enc_varint+0xc>
    else if (field->data_size == sizeof(int32_t))
 800527c:	2a04      	cmp	r2, #4
 800527e:	d101      	bne.n	8005284 <pb_enc_varint+0x24>
        value = *(const int32_t*)src;
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	e7f3      	b.n	800526c <pb_enc_varint+0xc>
    else if (field->data_size == sizeof(pb_int64_t))
 8005284:	2a08      	cmp	r2, #8
 8005286:	d102      	bne.n	800528e <pb_enc_varint+0x2e>
        value = *(const pb_int64_t*)src;
 8005288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528c:	e7ef      	b.n	800526e <pb_enc_varint+0xe>
}
 800528e:	2000      	movs	r0, #0
 8005290:	4770      	bx	lr

08005292 <pb_encode_svarint>:
        zigzagged = ~((pb_uint64_t)value << 1);
 8005292:	1892      	adds	r2, r2, r2
 8005294:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
 8005298:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
 800529c:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
 80052a0:	f7ff bf9d 	b.w	80051de <pb_encode_varint>

080052a4 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80052a4:	4613      	mov	r3, r2
    pb_int64_t value = 0;
    
    if (field->data_size == sizeof(int_least8_t))
 80052a6:	890a      	ldrh	r2, [r1, #8]
 80052a8:	2a01      	cmp	r2, #1
 80052aa:	d104      	bne.n	80052b6 <pb_enc_svarint+0x12>
        value = *(const int_least8_t*)src;
 80052ac:	f993 2000 	ldrsb.w	r2, [r3]
    else if (field->data_size == sizeof(int_least16_t))
        value = *(const int_least16_t*)src;
 80052b0:	17d3      	asrs	r3, r2, #31
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_svarint(stream, value);
 80052b2:	f7ff bfee 	b.w	8005292 <pb_encode_svarint>
    else if (field->data_size == sizeof(int_least16_t))
 80052b6:	2a02      	cmp	r2, #2
 80052b8:	d102      	bne.n	80052c0 <pb_enc_svarint+0x1c>
        value = *(const int_least16_t*)src;
 80052ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80052be:	e7f7      	b.n	80052b0 <pb_enc_svarint+0xc>
    else if (field->data_size == sizeof(int32_t))
 80052c0:	2a04      	cmp	r2, #4
 80052c2:	d101      	bne.n	80052c8 <pb_enc_svarint+0x24>
        value = *(const int32_t*)src;
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	e7f3      	b.n	80052b0 <pb_enc_svarint+0xc>
    else if (field->data_size == sizeof(pb_int64_t))
 80052c8:	2a08      	cmp	r2, #8
 80052ca:	d102      	bne.n	80052d2 <pb_enc_svarint+0x2e>
        value = *(const pb_int64_t*)src;
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	e7ef      	b.n	80052b2 <pb_enc_svarint+0xe>
}
 80052d2:	2000      	movs	r0, #0
 80052d4:	4770      	bx	lr

080052d6 <pb_encode_fixed32>:
{
 80052d6:	b507      	push	{r0, r1, r2, lr}
    return pb_write(stream, bytes, 4);
 80052d8:	2204      	movs	r2, #4
    bytes[0] = (pb_byte_t)(val & 0xFF);
 80052da:	680b      	ldr	r3, [r1, #0]
    return pb_write(stream, bytes, 4);
 80052dc:	eb0d 0102 	add.w	r1, sp, r2
    bytes[0] = (pb_byte_t)(val & 0xFF);
 80052e0:	9301      	str	r3, [sp, #4]
    return pb_write(stream, bytes, 4);
 80052e2:	f7ff ff67 	bl	80051b4 <pb_write>
}
 80052e6:	b003      	add	sp, #12
 80052e8:	f85d fb04 	ldr.w	pc, [sp], #4

080052ec <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 80052ec:	4611      	mov	r1, r2
 80052ee:	f7ff bff2 	b.w	80052d6 <pb_encode_fixed32>

080052f2 <pb_encode_fixed64>:
{
 80052f2:	b507      	push	{r0, r1, r2, lr}
    bytes[0] = (pb_byte_t)(val & 0xFF);
 80052f4:	e9d1 2300 	ldrd	r2, r3, [r1]
    return pb_write(stream, bytes, 8);
 80052f8:	4669      	mov	r1, sp
    bytes[0] = (pb_byte_t)(val & 0xFF);
 80052fa:	9200      	str	r2, [sp, #0]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 80052fc:	0a1a      	lsrs	r2, r3, #8
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 80052fe:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 8005302:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8005306:	0c1a      	lsrs	r2, r3, #16
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8005308:	0e1b      	lsrs	r3, r3, #24
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 800530a:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 8);
 800530e:	2208      	movs	r2, #8
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8005310:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 8005314:	f7ff ff4e 	bl	80051b4 <pb_write>
}
 8005318:	b003      	add	sp, #12
 800531a:	f85d fb04 	ldr.w	pc, [sp], #4

0800531e <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 800531e:	4611      	mov	r1, r2
 8005320:	f7ff bfe7 	b.w	80052f2 <pb_encode_fixed64>

08005324 <pb_encode_tag>:
{
 8005324:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
 8005326:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 800532a:	0f5b      	lsrs	r3, r3, #29
 800532c:	f7ff bf57 	b.w	80051de <pb_encode_varint>

08005330 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 8005330:	788b      	ldrb	r3, [r1, #2]
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	2b09      	cmp	r3, #9
 8005338:	d811      	bhi.n	800535e <pb_encode_tag_for_field+0x2e>
 800533a:	e8df f003 	tbb	[pc, r3]
 800533e:	0e0e      	.short	0x0e0e
 8005340:	0c0a050e 	.word	0x0c0a050e
 8005344:	0c100c0c 	.word	0x0c100c0c
 8005348:	2305      	movs	r3, #5
    return pb_encode_tag(stream, wiretype, field->tag);
 800534a:	880a      	ldrh	r2, [r1, #0]
 800534c:	4619      	mov	r1, r3
 800534e:	f7ff bfe9 	b.w	8005324 <pb_encode_tag>
            wiretype = PB_WT_64BIT;
 8005352:	2301      	movs	r3, #1
            break;
 8005354:	e7f9      	b.n	800534a <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_STRING;
 8005356:	2302      	movs	r3, #2
            break;
 8005358:	e7f7      	b.n	800534a <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_VARINT;
 800535a:	2300      	movs	r3, #0
 800535c:	e7f5      	b.n	800534a <pb_encode_tag_for_field+0x1a>
}
 800535e:	2000      	movs	r0, #0
 8005360:	4770      	bx	lr
	...

08005364 <encode_field>:
{
 8005364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005368:	4615      	mov	r5, r2
    switch (PB_ATYPE(field->type))
 800536a:	788a      	ldrb	r2, [r1, #2]
{
 800536c:	b086      	sub	sp, #24
 800536e:	4606      	mov	r6, r0
    switch (PB_ATYPE(field->type))
 8005370:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
{
 8005374:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 8005376:	2b40      	cmp	r3, #64	; 0x40
 8005378:	f000 80d2 	beq.w	8005520 <encode_field+0x1bc>
 800537c:	0653      	lsls	r3, r2, #25
 800537e:	d41b      	bmi.n	80053b8 <encode_field+0x54>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 8005380:	4b6a      	ldr	r3, [pc, #424]	; (800552c <encode_field+0x1c8>)
 8005382:	f002 010f 	and.w	r1, r2, #15
 8005386:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    if (field->size_offset)
 800538a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800538e:	b1bb      	cbz	r3, 80053c0 <encode_field+0x5c>
        pSize = (const char*)pData + field->size_offset;
 8005390:	442b      	add	r3, r5
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005392:	78a2      	ldrb	r2, [r4, #2]
 8005394:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 8005398:	2880      	cmp	r0, #128	; 0x80
 800539a:	d105      	bne.n	80053a8 <encode_field+0x44>
        pData = *(const void* const*)pData;
 800539c:	682d      	ldr	r5, [r5, #0]
        implicit_has = (pData != NULL);
 800539e:	1e29      	subs	r1, r5, #0
 80053a0:	bf18      	it	ne
 80053a2:	2101      	movne	r1, #1
 80053a4:	f88d 1007 	strb.w	r1, [sp, #7]
    switch (PB_HTYPE(field->type))
 80053a8:	f002 0130 	and.w	r1, r2, #48	; 0x30
 80053ac:	2920      	cmp	r1, #32
 80053ae:	d036      	beq.n	800541e <encode_field+0xba>
 80053b0:	d819      	bhi.n	80053e6 <encode_field+0x82>
 80053b2:	b1f9      	cbz	r1, 80053f4 <encode_field+0x90>
 80053b4:	2910      	cmp	r1, #16
 80053b6:	d02d      	beq.n	8005414 <encode_field+0xb0>
    switch (PB_ATYPE(field->type))
 80053b8:	2000      	movs	r0, #0
}
 80053ba:	b006      	add	sp, #24
 80053bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 80053c0:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80053c4:	2a10      	cmp	r2, #16
 80053c6:	d10a      	bne.n	80053de <encode_field+0x7a>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 80053c8:	4629      	mov	r1, r5
 80053ca:	4620      	mov	r0, r4
 80053cc:	f7ff fea9 	bl	8005122 <pb_check_proto3_default_value>
 80053d0:	f080 0001 	eor.w	r0, r0, #1
 80053d4:	f88d 0007 	strb.w	r0, [sp, #7]
    const void *pSize = &implicit_has;
 80053d8:	f10d 0307 	add.w	r3, sp, #7
 80053dc:	e7d9      	b.n	8005392 <encode_field+0x2e>
        implicit_has = true;
 80053de:	2301      	movs	r3, #1
 80053e0:	f88d 3007 	strb.w	r3, [sp, #7]
 80053e4:	e7f8      	b.n	80053d8 <encode_field+0x74>
    switch (PB_HTYPE(field->type))
 80053e6:	2930      	cmp	r1, #48	; 0x30
 80053e8:	d1e6      	bne.n	80053b8 <encode_field+0x54>
            if (*(const pb_size_t*)pSize == field->tag)
 80053ea:	881a      	ldrh	r2, [r3, #0]
 80053ec:	8823      	ldrh	r3, [r4, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d113      	bne.n	800541a <encode_field+0xb6>
 80053f2:	e001      	b.n	80053f8 <encode_field+0x94>
            if (!pData)
 80053f4:	2d00      	cmp	r5, #0
 80053f6:	d0df      	beq.n	80053b8 <encode_field+0x54>
                if (!pb_encode_tag_for_field(stream, field))
 80053f8:	4621      	mov	r1, r4
 80053fa:	4630      	mov	r0, r6
 80053fc:	f7ff ff98 	bl	8005330 <pb_encode_tag_for_field>
 8005400:	2800      	cmp	r0, #0
 8005402:	d0d9      	beq.n	80053b8 <encode_field+0x54>
                if (!func(stream, field, pData))
 8005404:	462a      	mov	r2, r5
 8005406:	4621      	mov	r1, r4
 8005408:	4630      	mov	r0, r6
 800540a:	463b      	mov	r3, r7
}
 800540c:	b006      	add	sp, #24
 800540e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (!callback->funcs.encode(stream, field, arg))
 8005412:	4718      	bx	r3
            if (*(const bool*)pSize)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1ee      	bne.n	80053f8 <encode_field+0x94>
    return true;
 800541a:	2001      	movs	r0, #1
 800541c:	e7cd      	b.n	80053ba <encode_field+0x56>
            if (field->size_offset != 0) {
 800541e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8005422:	b359      	cbz	r1, 800547c <encode_field+0x118>
                count = *(const pb_size_t*)pSize;
 8005424:	f8b3 8000 	ldrh.w	r8, [r3]
    if (count == 0)
 8005428:	f1b8 0f00 	cmp.w	r8, #0
 800542c:	d0f5      	beq.n	800541a <encode_field+0xb6>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800542e:	2880      	cmp	r0, #128	; 0x80
 8005430:	d002      	beq.n	8005438 <encode_field+0xd4>
 8005432:	8963      	ldrh	r3, [r4, #10]
 8005434:	4598      	cmp	r8, r3
 8005436:	d8bf      	bhi.n	80053b8 <encode_field+0x54>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8005438:	f002 020f 	and.w	r2, r2, #15
 800543c:	2a04      	cmp	r2, #4
 800543e:	d84c      	bhi.n	80054da <encode_field+0x176>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8005440:	8822      	ldrh	r2, [r4, #0]
 8005442:	2102      	movs	r1, #2
 8005444:	4630      	mov	r0, r6
 8005446:	f7ff ff6d 	bl	8005324 <pb_encode_tag>
 800544a:	2800      	cmp	r0, #0
 800544c:	d0b4      	beq.n	80053b8 <encode_field+0x54>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800544e:	78a3      	ldrb	r3, [r4, #2]
 8005450:	f003 030f 	and.w	r3, r3, #15
 8005454:	2b03      	cmp	r3, #3
 8005456:	d114      	bne.n	8005482 <encode_field+0x11e>
            size = 4 * count;
 8005458:	ea4f 0988 	mov.w	r9, r8, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800545c:	464a      	mov	r2, r9
 800545e:	2300      	movs	r3, #0
 8005460:	4630      	mov	r0, r6
 8005462:	f7ff febc 	bl	80051de <pb_encode_varint>
 8005466:	2800      	cmp	r0, #0
 8005468:	d0a6      	beq.n	80053b8 <encode_field+0x54>
        if (stream->callback == NULL)
 800546a:	6831      	ldr	r1, [r6, #0]
 800546c:	bb29      	cbnz	r1, 80054ba <encode_field+0x156>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800546e:	464a      	mov	r2, r9
 8005470:	4630      	mov	r0, r6
}
 8005472:	b006      	add	sp, #24
 8005474:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8005478:	f7ff be9c 	b.w	80051b4 <pb_write>
                count = field->array_size;
 800547c:	f8b4 800a 	ldrh.w	r8, [r4, #10]
 8005480:	e7d2      	b.n	8005428 <encode_field+0xc4>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8005482:	2b04      	cmp	r3, #4
 8005484:	d102      	bne.n	800548c <encode_field+0x128>
            size = 8 * count;
 8005486:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800548a:	e7e7      	b.n	800545c <encode_field+0xf8>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800548c:	46aa      	mov	sl, r5
            for (i = 0; i < count; i++)
 800548e:	f04f 0900 	mov.w	r9, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8005492:	2210      	movs	r2, #16
 8005494:	2100      	movs	r1, #0
 8005496:	a802      	add	r0, sp, #8
 8005498:	f009 fd99 	bl	800efce <memset>
                if (!func(&sizestream, field, p))
 800549c:	4652      	mov	r2, sl
 800549e:	4621      	mov	r1, r4
 80054a0:	a802      	add	r0, sp, #8
 80054a2:	47b8      	blx	r7
 80054a4:	2800      	cmp	r0, #0
 80054a6:	d088      	beq.n	80053ba <encode_field+0x56>
            for (i = 0; i < count; i++)
 80054a8:	f109 0901 	add.w	r9, r9, #1
                p = (const char*)p + field->data_size;
 80054ac:	8923      	ldrh	r3, [r4, #8]
            for (i = 0; i < count; i++)
 80054ae:	45c8      	cmp	r8, r9
                p = (const char*)p + field->data_size;
 80054b0:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 80054b2:	d8f3      	bhi.n	800549c <encode_field+0x138>
            size = sizestream.bytes_written;
 80054b4:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80054b8:	e7d0      	b.n	800545c <encode_field+0xf8>
        for (i = 0; i < count; i++)
 80054ba:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 80054be:	462a      	mov	r2, r5
 80054c0:	4621      	mov	r1, r4
 80054c2:	4630      	mov	r0, r6
 80054c4:	47b8      	blx	r7
 80054c6:	2800      	cmp	r0, #0
 80054c8:	f43f af76 	beq.w	80053b8 <encode_field+0x54>
        for (i = 0; i < count; i++)
 80054cc:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 80054d0:	8923      	ldrh	r3, [r4, #8]
        for (i = 0; i < count; i++)
 80054d2:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 80054d4:	441d      	add	r5, r3
        for (i = 0; i < count; i++)
 80054d6:	d8f2      	bhi.n	80054be <encode_field+0x15a>
 80054d8:	e79f      	b.n	800541a <encode_field+0xb6>
        for (i = 0; i < count; i++)
 80054da:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 80054de:	4621      	mov	r1, r4
 80054e0:	4630      	mov	r0, r6
 80054e2:	f7ff ff25 	bl	8005330 <pb_encode_tag_for_field>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	f43f af66 	beq.w	80053b8 <encode_field+0x54>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80054ec:	78a3      	ldrb	r3, [r4, #2]
 80054ee:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80054f2:	2a80      	cmp	r2, #128	; 0x80
 80054f4:	d112      	bne.n	800551c <encode_field+0x1b8>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d80d      	bhi.n	800551c <encode_field+0x1b8>
                if (!func(stream, field, *(const void* const*)p))
 8005500:	682a      	ldr	r2, [r5, #0]
                if (!func(stream, field, p))
 8005502:	4621      	mov	r1, r4
 8005504:	4630      	mov	r0, r6
 8005506:	47b8      	blx	r7
 8005508:	2800      	cmp	r0, #0
 800550a:	f43f af55 	beq.w	80053b8 <encode_field+0x54>
        for (i = 0; i < count; i++)
 800550e:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 8005512:	8923      	ldrh	r3, [r4, #8]
        for (i = 0; i < count; i++)
 8005514:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 8005516:	441d      	add	r5, r3
        for (i = 0; i < count; i++)
 8005518:	d8e1      	bhi.n	80054de <encode_field+0x17a>
 800551a:	e77e      	b.n	800541a <encode_field+0xb6>
                if (!func(stream, field, p))
 800551c:	462a      	mov	r2, r5
 800551e:	e7f0      	b.n	8005502 <encode_field+0x19e>
    if (callback->funcs.encode != NULL)
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	f43f af79 	beq.w	800541a <encode_field+0xb6>
        if (!callback->funcs.encode(stream, field, arg))
 8005528:	1d2a      	adds	r2, r5, #4
 800552a:	e76f      	b.n	800540c <encode_field+0xa8>
 800552c:	08011710 	.word	0x08011710

08005530 <pb_encode>:
{
 8005530:	b530      	push	{r4, r5, lr}
 8005532:	b087      	sub	sp, #28
 8005534:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 8005536:	4668      	mov	r0, sp
 8005538:	f7ff f8c2 	bl	80046c0 <pb_field_iter_begin>
 800553c:	b910      	cbnz	r0, 8005544 <pb_encode+0x14>
        return true; /* Empty message type */
 800553e:	2001      	movs	r0, #1
}
 8005540:	b007      	add	sp, #28
 8005542:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8005544:	9901      	ldr	r1, [sp, #4]
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 8005546:	9a04      	ldr	r2, [sp, #16]
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8005548:	788b      	ldrb	r3, [r1, #2]
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	2b08      	cmp	r3, #8
 8005550:	d11c      	bne.n	800558c <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 8005552:	6814      	ldr	r4, [r2, #0]
    while (extension)
 8005554:	b91c      	cbnz	r4, 800555e <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 8005556:	4668      	mov	r0, sp
 8005558:	f7ff f8c3 	bl	80046e2 <pb_field_iter_next>
 800555c:	e7ee      	b.n	800553c <pb_encode+0xc>
        if (extension->type->encode)
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	b12a      	cbz	r2, 8005570 <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 8005564:	4621      	mov	r1, r4
 8005566:	4628      	mov	r0, r5
 8005568:	4790      	blx	r2
        if (!status)
 800556a:	b968      	cbnz	r0, 8005588 <pb_encode+0x58>
                return false;
 800556c:	2000      	movs	r0, #0
 800556e:	e7e7      	b.n	8005540 <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8005570:	6899      	ldr	r1, [r3, #8]
        return encode_field(stream, field, extension->dest);
 8005572:	4628      	mov	r0, r5
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005574:	788b      	ldrb	r3, [r1, #2]
 8005576:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800557a:	2b80      	cmp	r3, #128	; 0x80
        return encode_field(stream, field, &extension->dest);
 800557c:	bf0c      	ite	eq
 800557e:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 8005580:	6862      	ldrne	r2, [r4, #4]
 8005582:	f7ff feef 	bl	8005364 <encode_field>
 8005586:	e7f0      	b.n	800556a <pb_encode+0x3a>
        extension = extension->next;
 8005588:	68a4      	ldr	r4, [r4, #8]
 800558a:	e7e3      	b.n	8005554 <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 800558c:	4628      	mov	r0, r5
 800558e:	f7ff fee9 	bl	8005364 <encode_field>
 8005592:	2800      	cmp	r0, #0
 8005594:	d1df      	bne.n	8005556 <pb_encode+0x26>
 8005596:	e7e9      	b.n	800556c <pb_encode+0x3c>

08005598 <pb_encode_string>:
{
 8005598:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800559a:	2300      	movs	r3, #0
{
 800559c:	4604      	mov	r4, r0
 800559e:	4615      	mov	r5, r2
 80055a0:	9101      	str	r1, [sp, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80055a2:	f7ff fe1c 	bl	80051de <pb_encode_varint>
 80055a6:	b138      	cbz	r0, 80055b8 <pb_encode_string+0x20>
    return pb_write(stream, buffer, size);
 80055a8:	462a      	mov	r2, r5
 80055aa:	9901      	ldr	r1, [sp, #4]
 80055ac:	4620      	mov	r0, r4
}
 80055ae:	b003      	add	sp, #12
 80055b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return pb_write(stream, buffer, size);
 80055b4:	f7ff bdfe 	b.w	80051b4 <pb_write>
}
 80055b8:	b003      	add	sp, #12
 80055ba:	bd30      	pop	{r4, r5, pc}

080055bc <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80055bc:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 80055be:	890a      	ldrh	r2, [r1, #8]
 80055c0:	4619      	mov	r1, r3
 80055c2:	f7ff bfe9 	b.w	8005598 <pb_encode_string>

080055c6 <pb_enc_string>:
    size_t max_size = field->data_size;
 80055c6:	890b      	ldrh	r3, [r1, #8]
{
 80055c8:	b410      	push	{r4}
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80055ca:	7889      	ldrb	r1, [r1, #2]
 80055cc:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    size_t max_size = field->data_size;
 80055d0:	2980      	cmp	r1, #128	; 0x80
    if (src == NULL)
 80055d2:	4611      	mov	r1, r2
    size_t max_size = field->data_size;
 80055d4:	bf08      	it	eq
 80055d6:	f04f 33ff 	moveq.w	r3, #4294967295
    if (src == NULL)
 80055da:	b122      	cbz	r2, 80055e6 <pb_enc_string+0x20>
    size_t size = 0;
 80055dc:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 80055de:	429a      	cmp	r2, r3
 80055e0:	d001      	beq.n	80055e6 <pb_enc_string+0x20>
 80055e2:	5c8c      	ldrb	r4, [r1, r2]
 80055e4:	b91c      	cbnz	r4, 80055ee <pb_enc_string+0x28>
}
 80055e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 80055ea:	f7ff bfd5 	b.w	8005598 <pb_encode_string>
            size++;
 80055ee:	3201      	adds	r2, #1
            p++;
 80055f0:	e7f5      	b.n	80055de <pb_enc_string+0x18>

080055f2 <pb_enc_bytes>:
{
 80055f2:	b430      	push	{r4, r5}
 80055f4:	460c      	mov	r4, r1
 80055f6:	4605      	mov	r5, r0
    if (src == NULL)
 80055f8:	4611      	mov	r1, r2
 80055fa:	b912      	cbnz	r2, 8005602 <pb_enc_bytes+0x10>
}
 80055fc:	bc30      	pop	{r4, r5}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 80055fe:	f7ff bfcb 	b.w	8005598 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005602:	78a3      	ldrb	r3, [r4, #2]
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8005604:	8812      	ldrh	r2, [r2, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005606:	f013 00c0 	ands.w	r0, r3, #192	; 0xc0
 800560a:	d103      	bne.n	8005614 <pb_enc_bytes+0x22>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 800560c:	1c93      	adds	r3, r2, #2
 800560e:	8924      	ldrh	r4, [r4, #8]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005610:	42a3      	cmp	r3, r4
 8005612:	d802      	bhi.n	800561a <pb_enc_bytes+0x28>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8005614:	3102      	adds	r1, #2
 8005616:	4628      	mov	r0, r5
 8005618:	e7f0      	b.n	80055fc <pb_enc_bytes+0xa>
}
 800561a:	bc30      	pop	{r4, r5}
 800561c:	4770      	bx	lr

0800561e <pb_encode_submessage>:
{
 800561e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005622:	460e      	mov	r6, r1
 8005624:	4617      	mov	r7, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8005626:	2100      	movs	r1, #0
 8005628:	2210      	movs	r2, #16
{
 800562a:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800562c:	4668      	mov	r0, sp
 800562e:	f009 fcce 	bl	800efce <memset>
    if (!pb_encode(&substream, fields, src_struct))
 8005632:	463a      	mov	r2, r7
 8005634:	4631      	mov	r1, r6
 8005636:	4668      	mov	r0, sp
 8005638:	f7ff ff7a 	bl	8005530 <pb_encode>
 800563c:	b348      	cbz	r0, 8005692 <pb_encode_submessage+0x74>
    size = substream.bytes_written;
 800563e:	9d03      	ldr	r5, [sp, #12]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005640:	f04f 0800 	mov.w	r8, #0
 8005644:	4620      	mov	r0, r4
 8005646:	462a      	mov	r2, r5
 8005648:	4643      	mov	r3, r8
 800564a:	f7ff fdc8 	bl	80051de <pb_encode_varint>
 800564e:	b300      	cbz	r0, 8005692 <pb_encode_submessage+0x74>
    if (stream->callback == NULL)
 8005650:	6821      	ldr	r1, [r4, #0]
 8005652:	b931      	cbnz	r1, 8005662 <pb_encode_submessage+0x44>
        return pb_write(stream, NULL, size); /* Just sizing */
 8005654:	462a      	mov	r2, r5
 8005656:	4620      	mov	r0, r4
 8005658:	f7ff fdac 	bl	80051b4 <pb_write>
}
 800565c:	b004      	add	sp, #16
 800565e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->bytes_written + size > stream->max_size)
 8005662:	68e2      	ldr	r2, [r4, #12]
 8005664:	68a3      	ldr	r3, [r4, #8]
 8005666:	442a      	add	r2, r5
 8005668:	429a      	cmp	r2, r3
 800566a:	d812      	bhi.n	8005692 <pb_encode_submessage+0x74>
    substream.state = stream->state;
 800566c:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
 800566e:	463a      	mov	r2, r7
    substream.callback = stream->callback;
 8005670:	9100      	str	r1, [sp, #0]
    status = pb_encode(&substream, fields, src_struct);
 8005672:	4668      	mov	r0, sp
 8005674:	4631      	mov	r1, r6
    substream.bytes_written = 0;
 8005676:	f8cd 800c 	str.w	r8, [sp, #12]
    substream.max_size = size;
 800567a:	e9cd 3501 	strd	r3, r5, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
 800567e:	f7ff ff57 	bl	8005530 <pb_encode>
    stream->bytes_written += substream.bytes_written;
 8005682:	9a03      	ldr	r2, [sp, #12]
 8005684:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
 8005686:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
 8005688:	4413      	add	r3, r2
 800568a:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
 800568c:	9b01      	ldr	r3, [sp, #4]
 800568e:	6063      	str	r3, [r4, #4]
    if (substream.bytes_written != size)
 8005690:	d0e4      	beq.n	800565c <pb_encode_submessage+0x3e>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8005692:	2000      	movs	r0, #0
 8005694:	e7e2      	b.n	800565c <pb_encode_submessage+0x3e>

08005696 <pb_enc_submessage>:
    if (field->ptr == NULL)
 8005696:	68c9      	ldr	r1, [r1, #12]
 8005698:	b109      	cbz	r1, 800569e <pb_enc_submessage+0x8>
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 800569a:	f7ff bfc0 	b.w	800561e <pb_encode_submessage>
}
 800569e:	4608      	mov	r0, r1
 80056a0:	4770      	bx	lr
	...

080056a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80056a4:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <HAL_MspInit+0x2c>)
{
 80056a6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80056a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80056ae:	641a      	str	r2, [r3, #64]	; 0x40
 80056b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056b2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80056b6:	9200      	str	r2, [sp, #0]
 80056b8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056c0:	645a      	str	r2, [r3, #68]	; 0x44
 80056c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056c8:	9301      	str	r3, [sp, #4]
 80056ca:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056cc:	b002      	add	sp, #8
 80056ce:	4770      	bx	lr
 80056d0:	40023800 	.word	0x40023800

080056d4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80056d4:	6802      	ldr	r2, [r0, #0]
{
 80056d6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80056d8:	4b08      	ldr	r3, [pc, #32]	; (80056fc <HAL_CRC_MspInit+0x28>)
 80056da:	429a      	cmp	r2, r3
 80056dc:	d10b      	bne.n	80056f6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80056de:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80056e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056ea:	631a      	str	r2, [r3, #48]	; 0x30
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80056f6:	b002      	add	sp, #8
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40023000 	.word	0x40023000

08005700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	b0ac      	sub	sp, #176	; 0xb0
 8005704:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005706:	2214      	movs	r2, #20
 8005708:	2100      	movs	r1, #0
 800570a:	a803      	add	r0, sp, #12
 800570c:	f009 fc5f 	bl	800efce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005710:	2290      	movs	r2, #144	; 0x90
 8005712:	2100      	movs	r1, #0
 8005714:	a808      	add	r0, sp, #32
 8005716:	f009 fc5a 	bl	800efce <memset>
  if(huart->Instance==USART3)
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	4b1d      	ldr	r3, [pc, #116]	; (8005794 <HAL_UART_MspInit+0x94>)
 800571e:	429a      	cmp	r2, r3
 8005720:	d136      	bne.n	8005790 <HAL_UART_MspInit+0x90>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005722:	f44f 7380 	mov.w	r3, #256	; 0x100
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005726:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005728:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800572a:	f7fb fd7d 	bl	8001228 <HAL_RCCEx_PeriphCLKConfig>
 800572e:	b108      	cbz	r0, 8005734 <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 8005730:	f7fe ffc4 	bl	80046bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005734:	4b18      	ldr	r3, [pc, #96]	; (8005798 <HAL_UART_MspInit+0x98>)
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005736:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005738:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800573a:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 800573c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(STLK_RX_GPIO_Port, &GPIO_InitStruct);
 800573e:	a903      	add	r1, sp, #12
 8005740:	4816      	ldr	r0, [pc, #88]	; (800579c <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005742:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005746:	641a      	str	r2, [r3, #64]	; 0x40
 8005748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800574a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800574e:	9201      	str	r2, [sp, #4]
 8005750:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005754:	f042 0208 	orr.w	r2, r2, #8
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800575c:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	9302      	str	r3, [sp, #8]
 8005764:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800576a:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800576e:	2300      	movs	r3, #0
 8005770:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(STLK_RX_GPIO_Port, &GPIO_InitStruct);
 8005774:	f7fb f9bc 	bl	8000af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLK_TX_Pin;
 8005778:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(STLK_TX_GPIO_Port, &GPIO_InitStruct);
 800577c:	a903      	add	r1, sp, #12
 800577e:	4807      	ldr	r0, [pc, #28]	; (800579c <HAL_UART_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005780:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005782:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005786:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005788:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(STLK_TX_GPIO_Port, &GPIO_InitStruct);
 800578c:	f7fb f9b0 	bl	8000af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005790:	b02c      	add	sp, #176	; 0xb0
 8005792:	bd70      	pop	{r4, r5, r6, pc}
 8005794:	40004800 	.word	0x40004800
 8005798:	40023800 	.word	0x40023800
 800579c:	40020c00 	.word	0x40020c00

080057a0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80057a0:	e7fe      	b.n	80057a0 <NMI_Handler>

080057a2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057a2:	e7fe      	b.n	80057a2 <HardFault_Handler>

080057a4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057a4:	e7fe      	b.n	80057a4 <MemManage_Handler>

080057a6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057a6:	e7fe      	b.n	80057a6 <BusFault_Handler>

080057a8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057a8:	e7fe      	b.n	80057a8 <UsageFault_Handler>

080057aa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057aa:	4770      	bx	lr

080057ac <DebugMon_Handler>:
 80057ac:	4770      	bx	lr

080057ae <PendSV_Handler>:
 80057ae:	4770      	bx	lr

080057b0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057b0:	f7fb b8b0 	b.w	8000914 <HAL_IncTick>

080057b4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057b4:	4a0b      	ldr	r2, [pc, #44]	; (80057e4 <_sbrk+0x30>)
{
 80057b6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80057b8:	6811      	ldr	r1, [r2, #0]
{
 80057ba:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80057bc:	b909      	cbnz	r1, 80057c2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80057be:	490a      	ldr	r1, [pc, #40]	; (80057e8 <_sbrk+0x34>)
 80057c0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80057c2:	6810      	ldr	r0, [r2, #0]
 80057c4:	4909      	ldr	r1, [pc, #36]	; (80057ec <_sbrk+0x38>)
 80057c6:	4c0a      	ldr	r4, [pc, #40]	; (80057f0 <_sbrk+0x3c>)
 80057c8:	4403      	add	r3, r0
 80057ca:	1b09      	subs	r1, r1, r4
 80057cc:	428b      	cmp	r3, r1
 80057ce:	d906      	bls.n	80057de <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80057d0:	f009 fc72 	bl	800f0b8 <__errno>
 80057d4:	230c      	movs	r3, #12
 80057d6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80057dc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80057de:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80057e0:	e7fc      	b.n	80057dc <_sbrk+0x28>
 80057e2:	bf00      	nop
 80057e4:	2000e940 	.word	0x2000e940
 80057e8:	2000ed28 	.word	0x2000ed28
 80057ec:	20080000 	.word	0x20080000
 80057f0:	00000800 	.word	0x00000800

080057f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80057f4:	4a03      	ldr	r2, [pc, #12]	; (8005804 <SystemInit+0x10>)
 80057f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80057fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005802:	4770      	bx	lr
 8005804:	e000ed00 	.word	0xe000ed00

08005808 <ai_vww_get_report>:


AI_API_ENTRY
ai_bool ai_vww_get_report(
  ai_handle network, ai_network_report* report)
{
 8005808:	b570      	push	{r4, r5, r6, lr}
 800580a:	460d      	mov	r5, r1
 800580c:	b0a2      	sub	sp, #136	; 0x88
 800580e:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005810:	f000 ff80 	bl	8006714 <ai_platform_context_acquire>
 8005814:	4604      	mov	r4, r0

  if (report && net_ctx)
 8005816:	2d00      	cmp	r5, #0
 8005818:	d036      	beq.n	8005888 <ai_vww_get_report+0x80>
 800581a:	2800      	cmp	r0, #0
 800581c:	d031      	beq.n	8005882 <ai_vww_get_report+0x7a>
  {
    ai_network_report r = {
 800581e:	2278      	movs	r2, #120	; 0x78
 8005820:	2100      	movs	r1, #0
 8005822:	a804      	add	r0, sp, #16
 8005824:	f009 fbd3 	bl	800efce <memset>
 8005828:	4b1b      	ldr	r3, [pc, #108]	; (8005898 <ai_vww_get_report+0x90>)
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	4b1b      	ldr	r3, [pc, #108]	; (800589c <ai_vww_get_report+0x94>)
 800582e:	9301      	str	r3, [sp, #4]
 8005830:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <ai_vww_get_report+0x98>)
 8005832:	9302      	str	r3, [sp, #8]
 8005834:	4b1b      	ldr	r3, [pc, #108]	; (80058a4 <ai_vww_get_report+0x9c>)
 8005836:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_VWW_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005838:	f000 ff20 	bl	800667c <ai_platform_runtime_get_revision>
    ai_network_report r = {
 800583c:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 800583e:	f000 ff21 	bl	8006684 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8005842:	4b19      	ldr	r3, [pc, #100]	; (80058a8 <ai_vww_get_report+0xa0>)
      .runtime_version   = ai_platform_runtime_get_version(),
 8005844:	9005      	str	r0, [sp, #20]
    ai_network_report r = {
 8005846:	9306      	str	r3, [sp, #24]
 8005848:	2301      	movs	r3, #1
 800584a:	f88d 301c 	strb.w	r3, [sp, #28]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 800584e:	f000 ff31 	bl	80066b4 <ai_platform_api_get_version>
 8005852:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8005854:	f000 ff46 	bl	80066e4 <ai_platform_interface_api_get_version>
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x740547f8,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005858:	4669      	mov	r1, sp
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800585a:	900a      	str	r0, [sp, #40]	; 0x28
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800585c:	4630      	mov	r0, r6
    ai_network_report r = {
 800585e:	a30c      	add	r3, pc, #48	; (adr r3, 8005890 <ai_vww_get_report+0x88>)
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005868:	4b10      	ldr	r3, [pc, #64]	; (80058ac <ai_vww_get_report+0xa4>)
 800586a:	9311      	str	r3, [sp, #68]	; 0x44
 800586c:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <ai_vww_get_report+0xa8>)
 800586e:	9320      	str	r3, [sp, #128]	; 0x80
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005870:	f000 ff6a 	bl	8006748 <ai_platform_api_get_network_report>
 8005874:	4604      	mov	r4, r0
 8005876:	b120      	cbz	r0, 8005882 <ai_vww_get_report+0x7a>

    *report = r;
 8005878:	2288      	movs	r2, #136	; 0x88
 800587a:	4669      	mov	r1, sp
 800587c:	4628      	mov	r0, r5
 800587e:	f009 fc48 	bl	800f112 <memcpy>
    return true;
  }
  return false;
}
 8005882:	4620      	mov	r0, r4
 8005884:	b022      	add	sp, #136	; 0x88
 8005886:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8005888:	462c      	mov	r4, r5
 800588a:	e7fa      	b.n	8005882 <ai_vww_get_report+0x7a>
 800588c:	f3af 8000 	nop.w
 8005890:	00462b61 	.word	0x00462b61
 8005894:	00000000 	.word	0x00000000
 8005898:	0801161b 	.word	0x0801161b
 800589c:	08011c58 	.word	0x08011c58
 80058a0:	08011c7b 	.word	0x08011c7b
 80058a4:	080116bb 	.word	0x080116bb
 80058a8:	0801de69 	.word	0x0801de69
 80058ac:	a1facade 	.word	0xa1facade
 80058b0:	740547f8 	.word	0x740547f8

080058b4 <ai_vww_get_error>:


AI_API_ENTRY
ai_error ai_vww_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 80058b4:	f000 bf36 	b.w	8006724 <ai_platform_network_get_error>

080058b8 <ai_vww_create>:


AI_API_ENTRY
ai_error ai_vww_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80058b8:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 80058ba:	2305      	movs	r3, #5
 80058bc:	2200      	movs	r2, #0
 80058be:	e9cd 3200 	strd	r3, r2, [sp]
 80058c2:	2301      	movs	r3, #1
 80058c4:	4a02      	ldr	r2, [pc, #8]	; (80058d0 <ai_vww_create+0x18>)
 80058c6:	f001 f909 	bl	8006adc <ai_platform_network_create>
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80058ca:	b003      	add	sp, #12
 80058cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80058d0:	20003e08 	.word	0x20003e08

080058d4 <ai_vww_destroy>:


AI_API_ENTRY
ai_handle ai_vww_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 80058d4:	f001 b944 	b.w	8006b60 <ai_platform_network_destroy>

080058d8 <ai_vww_init>:


AI_API_ENTRY
ai_bool ai_vww_init(
  ai_handle network, const ai_network_params* params)
{
 80058d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058dc:	4607      	mov	r7, r0
 80058de:	460e      	mov	r6, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 80058e0:	f001 f950 	bl	8006b84 <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 80058e4:	4604      	mov	r4, r0
 80058e6:	2800      	cmp	r0, #0
 80058e8:	f000 8460 	beq.w	80061ac <ai_vww_init+0x8d4>
  if (ai_platform_get_weights_map(g_vww_weights_map, 1, params)) {
 80058ec:	f8df 83bc 	ldr.w	r8, [pc, #956]	; 8005cac <ai_vww_init+0x3d4>
 80058f0:	4632      	mov	r2, r6
 80058f2:	2101      	movs	r1, #1
 80058f4:	4640      	mov	r0, r8
 80058f6:	f000 fdf7 	bl	80064e8 <ai_platform_get_weights_map>
 80058fa:	4605      	mov	r5, r0
 80058fc:	2800      	cmp	r0, #0
 80058fe:	f000 8457 	beq.w	80061b0 <ai_vww_init+0x8d8>
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8005902:	4ac1      	ldr	r2, [pc, #772]	; (8005c08 <ai_vww_init+0x330>)
 8005904:	6813      	ldr	r3, [r2, #0]
 8005906:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800590a:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_vww_weights_map[0] + 0);
 800590c:	f8d8 3000 	ldr.w	r3, [r8]
    conv2d_0_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 0);
 8005910:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005914:	4abd      	ldr	r2, [pc, #756]	; (8005c0c <ai_vww_init+0x334>)
 8005916:	6811      	ldr	r1, [r2, #0]
 8005918:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800591c:	6011      	str	r1, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_vww_weights_map[0] + 216);
 800591e:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
    conv2d_0_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 216);
 8005922:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005926:	4aba      	ldr	r2, [pc, #744]	; (8005c10 <ai_vww_init+0x338>)
 8005928:	6811      	ldr	r1, [r2, #0]
 800592a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800592e:	6011      	str	r1, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_vww_weights_map[0] + 248);
 8005930:	f103 01f8 	add.w	r1, r3, #248	; 0xf8
    conv2d_1_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 248);
 8005934:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005938:	4ab6      	ldr	r2, [pc, #728]	; (8005c14 <ai_vww_init+0x33c>)
 800593a:	6811      	ldr	r1, [r2, #0]
 800593c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005940:	6011      	str	r1, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_vww_weights_map[0] + 320);
 8005942:	f503 71a0 	add.w	r1, r3, #320	; 0x140
    conv2d_1_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 320);
 8005946:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800594a:	4ab3      	ldr	r2, [pc, #716]	; (8005c18 <ai_vww_init+0x340>)
 800594c:	6811      	ldr	r1, [r2, #0]
 800594e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005952:	6011      	str	r1, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_vww_weights_map[0] + 352);
 8005954:	f503 71b0 	add.w	r1, r3, #352	; 0x160
    conv2d_2_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 352);
 8005958:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800595c:	4aaf      	ldr	r2, [pc, #700]	; (8005c1c <ai_vww_init+0x344>)
 800595e:	6811      	ldr	r1, [r2, #0]
 8005960:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005964:	6011      	str	r1, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_vww_weights_map[0] + 480);
 8005966:	f503 71f0 	add.w	r1, r3, #480	; 0x1e0
    conv2d_2_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 480);
 800596a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800596e:	4aac      	ldr	r2, [pc, #688]	; (8005c20 <ai_vww_init+0x348>)
 8005970:	6811      	ldr	r1, [r2, #0]
 8005972:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005976:	6011      	str	r1, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_vww_weights_map[0] + 544);
 8005978:	f503 7108 	add.w	r1, r3, #544	; 0x220
    conv2d_3_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 544);
 800597c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005980:	4aa8      	ldr	r2, [pc, #672]	; (8005c24 <ai_vww_init+0x34c>)
 8005982:	6811      	ldr	r1, [r2, #0]
 8005984:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005988:	6011      	str	r1, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_vww_weights_map[0] + 688);
 800598a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
    conv2d_3_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 688);
 800598e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005992:	4aa5      	ldr	r2, [pc, #660]	; (8005c28 <ai_vww_init+0x350>)
 8005994:	6811      	ldr	r1, [r2, #0]
 8005996:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800599a:	6011      	str	r1, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(g_vww_weights_map[0] + 752);
 800599c:	f503 713c 	add.w	r1, r3, #752	; 0x2f0
    conv2d_4_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 752);
 80059a0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80059a4:	4aa1      	ldr	r2, [pc, #644]	; (8005c2c <ai_vww_init+0x354>)
 80059a6:	6811      	ldr	r1, [r2, #0]
 80059a8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80059ac:	6011      	str	r1, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(g_vww_weights_map[0] + 1264);
 80059ae:	f503 619e 	add.w	r1, r3, #1264	; 0x4f0
    conv2d_4_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 1264);
 80059b2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 80059b6:	4a9e      	ldr	r2, [pc, #632]	; (8005c30 <ai_vww_init+0x358>)
 80059b8:	6811      	ldr	r1, [r2, #0]
 80059ba:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80059be:	6011      	str	r1, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(g_vww_weights_map[0] + 1392);
 80059c0:	f503 61ae 	add.w	r1, r3, #1392	; 0x570
    conv2d_5_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 1392);
 80059c4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 80059c8:	4a9a      	ldr	r2, [pc, #616]	; (8005c34 <ai_vww_init+0x35c>)
 80059ca:	6811      	ldr	r1, [r2, #0]
 80059cc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80059d0:	6011      	str	r1, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(g_vww_weights_map[0] + 1680);
 80059d2:	f503 61d2 	add.w	r1, r3, #1680	; 0x690
    conv2d_5_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 1680);
 80059d6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 80059da:	4a97      	ldr	r2, [pc, #604]	; (8005c38 <ai_vww_init+0x360>)
 80059dc:	6811      	ldr	r1, [r2, #0]
 80059de:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80059e2:	6011      	str	r1, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_vww_weights_map[0] + 1808);
 80059e4:	f503 61e2 	add.w	r1, r3, #1808	; 0x710
    conv2d_6_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 1808);
 80059e8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 80059ec:	4a93      	ldr	r2, [pc, #588]	; (8005c3c <ai_vww_init+0x364>)
 80059ee:	6811      	ldr	r1, [r2, #0]
 80059f0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80059f4:	6011      	str	r1, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_vww_weights_map[0] + 2832);
 80059f6:	f503 6131 	add.w	r1, r3, #2832	; 0xb10
    conv2d_6_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 2832);
 80059fa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80059fe:	4a90      	ldr	r2, [pc, #576]	; (8005c40 <ai_vww_init+0x368>)
 8005a00:	6811      	ldr	r1, [r2, #0]
 8005a02:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a06:	6011      	str	r1, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_vww_weights_map[0] + 2960);
 8005a08:	f503 6139 	add.w	r1, r3, #2960	; 0xb90
    conv2d_7_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 2960);
 8005a0c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a10:	4a8c      	ldr	r2, [pc, #560]	; (8005c44 <ai_vww_init+0x36c>)
 8005a12:	6811      	ldr	r1, [r2, #0]
 8005a14:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a18:	6011      	str	r1, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(g_vww_weights_map[0] + 3248);
 8005a1a:	f503 614b 	add.w	r1, r3, #3248	; 0xcb0
    conv2d_7_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 3248);
 8005a1e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a22:	4a89      	ldr	r2, [pc, #548]	; (8005c48 <ai_vww_init+0x370>)
 8005a24:	6811      	ldr	r1, [r2, #0]
 8005a26:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a2a:	6011      	str	r1, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(g_vww_weights_map[0] + 3376);
 8005a2c:	f503 6153 	add.w	r1, r3, #3376	; 0xd30
    conv2d_8_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 3376);
 8005a30:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a34:	4a85      	ldr	r2, [pc, #532]	; (8005c4c <ai_vww_init+0x374>)
 8005a36:	6811      	ldr	r1, [r2, #0]
 8005a38:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a3c:	6011      	str	r1, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(g_vww_weights_map[0] + 5424);
 8005a3e:	f503 51a9 	add.w	r1, r3, #5408	; 0x1520
 8005a42:	3110      	adds	r1, #16
    conv2d_8_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 5424);
 8005a44:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a48:	4a81      	ldr	r2, [pc, #516]	; (8005c50 <ai_vww_init+0x378>)
 8005a4a:	6811      	ldr	r1, [r2, #0]
 8005a4c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a50:	6011      	str	r1, [r2, #0]
    conv2d_9_weights_array.data = AI_PTR(g_vww_weights_map[0] + 5680);
 8005a52:	f503 51b1 	add.w	r1, r3, #5664	; 0x1620
 8005a56:	3110      	adds	r1, #16
    conv2d_9_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 5680);
 8005a58:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a5c:	4a7d      	ldr	r2, [pc, #500]	; (8005c54 <ai_vww_init+0x37c>)
 8005a5e:	6811      	ldr	r1, [r2, #0]
 8005a60:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a64:	6011      	str	r1, [r2, #0]
    conv2d_9_bias_array.data = AI_PTR(g_vww_weights_map[0] + 6256);
 8005a66:	f503 51c3 	add.w	r1, r3, #6240	; 0x1860
 8005a6a:	3110      	adds	r1, #16
    conv2d_9_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 6256);
 8005a6c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a70:	4a79      	ldr	r2, [pc, #484]	; (8005c58 <ai_vww_init+0x380>)
 8005a72:	6811      	ldr	r1, [r2, #0]
 8005a74:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a78:	6011      	str	r1, [r2, #0]
    conv2d_10_weights_array.data = AI_PTR(g_vww_weights_map[0] + 6512);
 8005a7a:	f503 51cb 	add.w	r1, r3, #6496	; 0x1960
 8005a7e:	3110      	adds	r1, #16
    conv2d_10_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 6512);
 8005a80:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a84:	4a75      	ldr	r2, [pc, #468]	; (8005c5c <ai_vww_init+0x384>)
 8005a86:	6811      	ldr	r1, [r2, #0]
 8005a88:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005a8c:	6011      	str	r1, [r2, #0]
    conv2d_10_bias_array.data = AI_PTR(g_vww_weights_map[0] + 10288);
 8005a8e:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
 8005a92:	3130      	adds	r1, #48	; 0x30
    conv2d_10_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 10288);
 8005a94:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a98:	4a71      	ldr	r2, [pc, #452]	; (8005c60 <ai_vww_init+0x388>)
 8005a9a:	6811      	ldr	r1, [r2, #0]
 8005a9c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005aa0:	6011      	str	r1, [r2, #0]
    conv2d_11_weights_array.data = AI_PTR(g_vww_weights_map[0] + 10524);
 8005aa2:	f503 5124 	add.w	r1, r3, #10496	; 0x2900
 8005aa6:	311c      	adds	r1, #28
    conv2d_11_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 10524);
 8005aa8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8005aac:	4a6d      	ldr	r2, [pc, #436]	; (8005c64 <ai_vww_init+0x38c>)
 8005aae:	6811      	ldr	r1, [r2, #0]
 8005ab0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ab4:	6011      	str	r1, [r2, #0]
    conv2d_11_bias_array.data = AI_PTR(g_vww_weights_map[0] + 11056);
 8005ab6:	f503 512c 	add.w	r1, r3, #11008	; 0x2b00
 8005aba:	3130      	adds	r1, #48	; 0x30
    conv2d_11_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 11056);
 8005abc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ac0:	4a69      	ldr	r2, [pc, #420]	; (8005c68 <ai_vww_init+0x390>)
 8005ac2:	6811      	ldr	r1, [r2, #0]
 8005ac4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ac8:	6011      	str	r1, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_vww_weights_map[0] + 11292);
 8005aca:	f503 5130 	add.w	r1, r3, #11264	; 0x2c00
 8005ace:	311c      	adds	r1, #28
    conv2d_12_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 11292);
 8005ad0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ad4:	4a65      	ldr	r2, [pc, #404]	; (8005c6c <ai_vww_init+0x394>)
 8005ad6:	6811      	ldr	r1, [r2, #0]
 8005ad8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005adc:	6011      	str	r1, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_vww_weights_map[0] + 17548);
 8005ade:	f503 4189 	add.w	r1, r3, #17536	; 0x4480
 8005ae2:	310c      	adds	r1, #12
    conv2d_12_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 17548);
 8005ae4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ae8:	4a61      	ldr	r2, [pc, #388]	; (8005c70 <ai_vww_init+0x398>)
 8005aea:	6811      	ldr	r1, [r2, #0]
 8005aec:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005af0:	6011      	str	r1, [r2, #0]
    conv2d_13_weights_array.data = AI_PTR(g_vww_weights_map[0] + 17972);
 8005af2:	f503 418c 	add.w	r1, r3, #17920	; 0x4600
 8005af6:	3134      	adds	r1, #52	; 0x34
    conv2d_13_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 17972);
 8005af8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8005afc:	4a5d      	ldr	r2, [pc, #372]	; (8005c74 <ai_vww_init+0x39c>)
 8005afe:	6811      	ldr	r1, [r2, #0]
 8005b00:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b04:	6011      	str	r1, [r2, #0]
    conv2d_13_bias_array.data = AI_PTR(g_vww_weights_map[0] + 18928);
 8005b06:	f503 4193 	add.w	r1, r3, #18816	; 0x4980
 8005b0a:	3170      	adds	r1, #112	; 0x70
    conv2d_13_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 18928);
 8005b0c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_14_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b10:	4a59      	ldr	r2, [pc, #356]	; (8005c78 <ai_vww_init+0x3a0>)
 8005b12:	6811      	ldr	r1, [r2, #0]
 8005b14:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b18:	6011      	str	r1, [r2, #0]
    conv2d_14_weights_array.data = AI_PTR(g_vww_weights_map[0] + 19352);
 8005b1a:	f503 4197 	add.w	r1, r3, #19328	; 0x4b80
 8005b1e:	3118      	adds	r1, #24
    conv2d_14_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 19352);
 8005b20:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_14_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b24:	4a55      	ldr	r2, [pc, #340]	; (8005c7c <ai_vww_init+0x3a4>)
 8005b26:	6811      	ldr	r1, [r2, #0]
 8005b28:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b2c:	6011      	str	r1, [r2, #0]
    conv2d_14_bias_array.data = AI_PTR(g_vww_weights_map[0] + 25396);
 8005b2e:	f503 41c6 	add.w	r1, r3, #25344	; 0x6300
 8005b32:	3134      	adds	r1, #52	; 0x34
    conv2d_14_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 25396);
 8005b34:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b38:	4a51      	ldr	r2, [pc, #324]	; (8005c80 <ai_vww_init+0x3a8>)
 8005b3a:	6811      	ldr	r1, [r2, #0]
 8005b3c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b40:	6011      	str	r1, [r2, #0]
    conv2d_15_weights_array.data = AI_PTR(g_vww_weights_map[0] + 25624);
 8005b42:	f503 41c8 	add.w	r1, r3, #25600	; 0x6400
 8005b46:	3118      	adds	r1, #24
    conv2d_15_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 25624);
 8005b48:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b4c:	4a4d      	ldr	r2, [pc, #308]	; (8005c84 <ai_vww_init+0x3ac>)
 8005b4e:	6811      	ldr	r1, [r2, #0]
 8005b50:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b54:	6011      	str	r1, [r2, #0]
    conv2d_15_bias_array.data = AI_PTR(g_vww_weights_map[0] + 26140);
 8005b56:	f503 41cc 	add.w	r1, r3, #26112	; 0x6600
 8005b5a:	311c      	adds	r1, #28
    conv2d_15_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 26140);
 8005b5c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b60:	4a49      	ldr	r2, [pc, #292]	; (8005c88 <ai_vww_init+0x3b0>)
 8005b62:	6811      	ldr	r1, [r2, #0]
 8005b64:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b68:	6011      	str	r1, [r2, #0]
    conv2d_16_weights_array.data = AI_PTR(g_vww_weights_map[0] + 26368);
 8005b6a:	f503 41ce 	add.w	r1, r3, #26368	; 0x6700
    conv2d_16_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 26368);
 8005b6e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b72:	4a46      	ldr	r2, [pc, #280]	; (8005c8c <ai_vww_init+0x3b4>)
 8005b74:	6811      	ldr	r1, [r2, #0]
 8005b76:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b7a:	6011      	str	r1, [r2, #0]
    conv2d_16_bias_array.data = AI_PTR(g_vww_weights_map[0] + 28024);
 8005b7c:	f503 41da 	add.w	r1, r3, #27904	; 0x6d00
 8005b80:	3178      	adds	r1, #120	; 0x78
    conv2d_16_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 28024);
 8005b82:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b86:	4a42      	ldr	r2, [pc, #264]	; (8005c90 <ai_vww_init+0x3b8>)
 8005b88:	6811      	ldr	r1, [r2, #0]
 8005b8a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005b8e:	6011      	str	r1, [r2, #0]
    conv2d_17_weights_array.data = AI_PTR(g_vww_weights_map[0] + 28140);
 8005b90:	f503 41db 	add.w	r1, r3, #28032	; 0x6d80
 8005b94:	316c      	adds	r1, #108	; 0x6c
    conv2d_17_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 28140);
 8005b96:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b9a:	4a3e      	ldr	r2, [pc, #248]	; (8005c94 <ai_vww_init+0x3bc>)
 8005b9c:	6811      	ldr	r1, [r2, #0]
 8005b9e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ba2:	6011      	str	r1, [r2, #0]
    conv2d_17_bias_array.data = AI_PTR(g_vww_weights_map[0] + 28404);
 8005ba4:	f503 41dd 	add.w	r1, r3, #28288	; 0x6e80
 8005ba8:	3174      	adds	r1, #116	; 0x74
    conv2d_17_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 28404);
 8005baa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bae:	4a3a      	ldr	r2, [pc, #232]	; (8005c98 <ai_vww_init+0x3c0>)
 8005bb0:	6811      	ldr	r1, [r2, #0]
 8005bb2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005bb6:	6011      	str	r1, [r2, #0]
    conv2d_18_weights_array.data = AI_PTR(g_vww_weights_map[0] + 28520);
 8005bb8:	f503 41de 	add.w	r1, r3, #28416	; 0x6f00
 8005bbc:	3168      	adds	r1, #104	; 0x68
    conv2d_18_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 28520);
 8005bbe:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bc2:	4a36      	ldr	r2, [pc, #216]	; (8005c9c <ai_vww_init+0x3c4>)
 8005bc4:	6811      	ldr	r1, [r2, #0]
 8005bc6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005bca:	6011      	str	r1, [r2, #0]
    conv2d_18_bias_array.data = AI_PTR(g_vww_weights_map[0] + 29044);
 8005bcc:	f503 41e2 	add.w	r1, r3, #28928	; 0x7100
 8005bd0:	3174      	adds	r1, #116	; 0x74
    conv2d_18_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 29044);
 8005bd2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bd6:	4a32      	ldr	r2, [pc, #200]	; (8005ca0 <ai_vww_init+0x3c8>)
 8005bd8:	6811      	ldr	r1, [r2, #0]
 8005bda:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005bde:	6011      	str	r1, [r2, #0]
    conv2d_19_weights_array.data = AI_PTR(g_vww_weights_map[0] + 29116);
 8005be0:	f503 41e3 	add.w	r1, r3, #29056	; 0x7180
 8005be4:	313c      	adds	r1, #60	; 0x3c
    conv2d_19_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 29116);
 8005be6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bea:	4a2e      	ldr	r2, [pc, #184]	; (8005ca4 <ai_vww_init+0x3cc>)
 8005bec:	6811      	ldr	r1, [r2, #0]
 8005bee:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005bf2:	6011      	str	r1, [r2, #0]
    conv2d_19_bias_array.data = AI_PTR(g_vww_weights_map[0] + 29280);
 8005bf4:	f503 41e4 	add.w	r1, r3, #29184	; 0x7200
 8005bf8:	3160      	adds	r1, #96	; 0x60
    conv2d_19_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 29280);
 8005bfa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_20_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bfe:	4a2a      	ldr	r2, [pc, #168]	; (8005ca8 <ai_vww_init+0x3d0>)
 8005c00:	6811      	ldr	r1, [r2, #0]
 8005c02:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005c06:	e053      	b.n	8005cb0 <ai_vww_init+0x3d8>
 8005c08:	200020b8 	.word	0x200020b8
 8005c0c:	20001ff0 	.word	0x20001ff0
 8005c10:	20002d44 	.word	0x20002d44
 8005c14:	20002c24 	.word	0x20002c24
 8005c18:	200035ec 	.word	0x200035ec
 8005c1c:	20003524 	.word	0x20003524
 8005c20:	20003738 	.word	0x20003738
 8005c24:	20003618 	.word	0x20003618
 8005c28:	2000382c 	.word	0x2000382c
 8005c2c:	20003764 	.word	0x20003764
 8005c30:	20003978 	.word	0x20003978
 8005c34:	20003858 	.word	0x20003858
 8005c38:	20003a6c 	.word	0x20003a6c
 8005c3c:	200039a4 	.word	0x200039a4
 8005c40:	20003bb8 	.word	0x20003bb8
 8005c44:	20003a98 	.word	0x20003a98
 8005c48:	20003cac 	.word	0x20003cac
 8005c4c:	20003be4 	.word	0x20003be4
 8005c50:	20003df8 	.word	0x20003df8
 8005c54:	20003cd8 	.word	0x20003cd8
 8005c58:	200021ac 	.word	0x200021ac
 8005c5c:	200020e4 	.word	0x200020e4
 8005c60:	200022f8 	.word	0x200022f8
 8005c64:	200021d8 	.word	0x200021d8
 8005c68:	200023ec 	.word	0x200023ec
 8005c6c:	20002324 	.word	0x20002324
 8005c70:	20002538 	.word	0x20002538
 8005c74:	20002418 	.word	0x20002418
 8005c78:	2000262c 	.word	0x2000262c
 8005c7c:	20002564 	.word	0x20002564
 8005c80:	20002778 	.word	0x20002778
 8005c84:	20002658 	.word	0x20002658
 8005c88:	2000286c 	.word	0x2000286c
 8005c8c:	200027a4 	.word	0x200027a4
 8005c90:	200029b8 	.word	0x200029b8
 8005c94:	20002898 	.word	0x20002898
 8005c98:	20002aac 	.word	0x20002aac
 8005c9c:	200029e4 	.word	0x200029e4
 8005ca0:	20002bf8 	.word	0x20002bf8
 8005ca4:	20002ad8 	.word	0x20002ad8
 8005ca8:	20002e38 	.word	0x20002e38
 8005cac:	2000ebd4 	.word	0x2000ebd4
 8005cb0:	6011      	str	r1, [r2, #0]
    conv2d_20_weights_array.data = AI_PTR(g_vww_weights_map[0] + 29352);
 8005cb2:	f503 41e5 	add.w	r1, r3, #29312	; 0x7280
 8005cb6:	3128      	adds	r1, #40	; 0x28
    conv2d_20_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 29352);
 8005cb8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cbc:	4acb      	ldr	r2, [pc, #812]	; (8005fec <ai_vww_init+0x714>)
 8005cbe:	6811      	ldr	r1, [r2, #0]
 8005cc0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005cc4:	6011      	str	r1, [r2, #0]
    conv2d_20_bias_array.data = AI_PTR(g_vww_weights_map[0] + 29640);
 8005cc6:	f503 41e7 	add.w	r1, r3, #29568	; 0x7380
 8005cca:	3148      	adds	r1, #72	; 0x48
    conv2d_20_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 29640);
 8005ccc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cd0:	4ac7      	ldr	r2, [pc, #796]	; (8005ff0 <ai_vww_init+0x718>)
 8005cd2:	6811      	ldr	r1, [r2, #0]
 8005cd4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005cd8:	6011      	str	r1, [r2, #0]
    conv2d_21_weights_array.data = AI_PTR(g_vww_weights_map[0] + 29704);
 8005cda:	f503 41e8 	add.w	r1, r3, #29696	; 0x7400
 8005cde:	3108      	adds	r1, #8
    conv2d_21_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 29704);
 8005ce0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ce4:	4ac3      	ldr	r2, [pc, #780]	; (8005ff4 <ai_vww_init+0x71c>)
 8005ce6:	6811      	ldr	r1, [r2, #0]
 8005ce8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005cec:	6011      	str	r1, [r2, #0]
    conv2d_21_bias_array.data = AI_PTR(g_vww_weights_map[0] + 29848);
 8005cee:	f503 41e9 	add.w	r1, r3, #29824	; 0x7480
 8005cf2:	3118      	adds	r1, #24
    conv2d_21_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 29848);
 8005cf4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cf8:	4abf      	ldr	r2, [pc, #764]	; (8005ff8 <ai_vww_init+0x720>)
 8005cfa:	6811      	ldr	r1, [r2, #0]
 8005cfc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d00:	6011      	str	r1, [r2, #0]
    conv2d_22_weights_array.data = AI_PTR(g_vww_weights_map[0] + 29912);
 8005d02:	f503 41e9 	add.w	r1, r3, #29824	; 0x7480
 8005d06:	3158      	adds	r1, #88	; 0x58
    conv2d_22_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 29912);
 8005d08:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d0c:	4abb      	ldr	r2, [pc, #748]	; (8005ffc <ai_vww_init+0x724>)
 8005d0e:	6811      	ldr	r1, [r2, #0]
 8005d10:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d14:	6011      	str	r1, [r2, #0]
    conv2d_22_bias_array.data = AI_PTR(g_vww_weights_map[0] + 30312);
 8005d16:	f503 41ec 	add.w	r1, r3, #30208	; 0x7600
 8005d1a:	3168      	adds	r1, #104	; 0x68
    conv2d_22_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 30312);
 8005d1c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d20:	4ab7      	ldr	r2, [pc, #732]	; (8006000 <ai_vww_init+0x728>)
 8005d22:	6811      	ldr	r1, [r2, #0]
 8005d24:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d28:	6011      	str	r1, [r2, #0]
    conv2d_23_weights_array.data = AI_PTR(g_vww_weights_map[0] + 30412);
 8005d2a:	f503 41ed 	add.w	r1, r3, #30336	; 0x7680
 8005d2e:	314c      	adds	r1, #76	; 0x4c
    conv2d_23_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 30412);
 8005d30:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d34:	4ab3      	ldr	r2, [pc, #716]	; (8006004 <ai_vww_init+0x72c>)
 8005d36:	6811      	ldr	r1, [r2, #0]
 8005d38:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d3c:	6011      	str	r1, [r2, #0]
    conv2d_23_bias_array.data = AI_PTR(g_vww_weights_map[0] + 30640);
 8005d3e:	f503 41ef 	add.w	r1, r3, #30592	; 0x7780
 8005d42:	3130      	adds	r1, #48	; 0x30
    conv2d_23_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 30640);
 8005d44:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_24_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d48:	4aaf      	ldr	r2, [pc, #700]	; (8006008 <ai_vww_init+0x730>)
 8005d4a:	6811      	ldr	r1, [r2, #0]
 8005d4c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d50:	6011      	str	r1, [r2, #0]
    conv2d_24_weights_array.data = AI_PTR(g_vww_weights_map[0] + 30740);
 8005d52:	f503 41f0 	add.w	r1, r3, #30720	; 0x7800
 8005d56:	3114      	adds	r1, #20
    conv2d_24_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 30740);
 8005d58:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_24_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d5c:	4aab      	ldr	r2, [pc, #684]	; (800600c <ai_vww_init+0x734>)
 8005d5e:	6811      	ldr	r1, [r2, #0]
 8005d60:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d64:	6011      	str	r1, [r2, #0]
    conv2d_24_bias_array.data = AI_PTR(g_vww_weights_map[0] + 31440);
 8005d66:	f503 41f5 	add.w	r1, r3, #31360	; 0x7a80
 8005d6a:	3150      	adds	r1, #80	; 0x50
    conv2d_24_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 31440);
 8005d6c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d70:	4aa7      	ldr	r2, [pc, #668]	; (8006010 <ai_vww_init+0x738>)
 8005d72:	6811      	ldr	r1, [r2, #0]
 8005d74:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d78:	6011      	str	r1, [r2, #0]
    conv2d_25_weights_array.data = AI_PTR(g_vww_weights_map[0] + 31552);
 8005d7a:	f503 41f6 	add.w	r1, r3, #31488	; 0x7b00
 8005d7e:	3140      	adds	r1, #64	; 0x40
    conv2d_25_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 31552);
 8005d80:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d84:	4aa3      	ldr	r2, [pc, #652]	; (8006014 <ai_vww_init+0x73c>)
 8005d86:	6811      	ldr	r1, [r2, #0]
 8005d88:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d8c:	6011      	str	r1, [r2, #0]
    conv2d_25_bias_array.data = AI_PTR(g_vww_weights_map[0] + 31804);
 8005d8e:	f503 41f8 	add.w	r1, r3, #31744	; 0x7c00
 8005d92:	313c      	adds	r1, #60	; 0x3c
    conv2d_25_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 31804);
 8005d94:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_26_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d98:	4a9f      	ldr	r2, [pc, #636]	; (8006018 <ai_vww_init+0x740>)
 8005d9a:	6811      	ldr	r1, [r2, #0]
 8005d9c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005da0:	6011      	str	r1, [r2, #0]
    conv2d_26_weights_array.data = AI_PTR(g_vww_weights_map[0] + 31916);
 8005da2:	f503 41f9 	add.w	r1, r3, #31872	; 0x7c80
 8005da6:	312c      	adds	r1, #44	; 0x2c
    conv2d_26_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 31916);
 8005da8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_26_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dac:	4a9b      	ldr	r2, [pc, #620]	; (800601c <ai_vww_init+0x744>)
 8005dae:	6811      	ldr	r1, [r2, #0]
 8005db0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005db4:	6011      	str	r1, [r2, #0]
    conv2d_26_bias_array.data = AI_PTR(g_vww_weights_map[0] + 39084);
 8005db6:	f503 4118 	add.w	r1, r3, #38912	; 0x9800
 8005dba:	31ac      	adds	r1, #172	; 0xac
    conv2d_26_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 39084);
 8005dbc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_29_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dc0:	4a97      	ldr	r2, [pc, #604]	; (8006020 <ai_vww_init+0x748>)
 8005dc2:	6811      	ldr	r1, [r2, #0]
 8005dc4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005dc8:	6011      	str	r1, [r2, #0]
    gemm_29_weights_array.data = AI_PTR(g_vww_weights_map[0] + 40108);
 8005dca:	f503 411c 	add.w	r1, r3, #39936	; 0x9c00
    gemm_29_bias_array.data = AI_PTR(g_vww_weights_map[0] + 40620);
 8005dce:	f503 431e 	add.w	r3, r3, #40448	; 0x9e00
    gemm_29_weights_array.data = AI_PTR(g_vww_weights_map[0] + 40108);
 8005dd2:	31ac      	adds	r1, #172	; 0xac
    gemm_29_bias_array.data = AI_PTR(g_vww_weights_map[0] + 40620);
 8005dd4:	33ac      	adds	r3, #172	; 0xac
    gemm_29_weights_array.data_start = AI_PTR(g_vww_weights_map[0] + 40108);
 8005dd6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dda:	4a92      	ldr	r2, [pc, #584]	; (8006024 <ai_vww_init+0x74c>)
 8005ddc:	6811      	ldr	r1, [r2, #0]
 8005dde:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    gemm_29_bias_array.data_start = AI_PTR(g_vww_weights_map[0] + 40620);
 8005de2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8005de6:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_vww_activations_map, 1, params)) {
 8005de8:	f8df 8318 	ldr.w	r8, [pc, #792]	; 8006104 <ai_vww_init+0x82c>
 8005dec:	4632      	mov	r2, r6
 8005dee:	2101      	movs	r1, #1
 8005df0:	4640      	mov	r0, r8
 8005df2:	f000 fbd1 	bl	8006598 <ai_platform_get_activations_map>
 8005df6:	4606      	mov	r6, r0
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	f000 81df 	beq.w	80061bc <ai_vww_init+0x8e4>
    input_1_int8_output_array.data = AI_PTR(g_vww_activations_map[0] + 4680);
 8005dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8005e02:	4989      	ldr	r1, [pc, #548]	; (8006028 <ai_vww_init+0x750>)
 8005e04:	f503 5292 	add.w	r2, r3, #4672	; 0x1240
    conv2d_1_output_array.data = AI_PTR(g_vww_activations_map[0] + 22720);
 8005e08:	4888      	ldr	r0, [pc, #544]	; (800602c <ai_vww_init+0x754>)
    input_1_int8_output_array.data = AI_PTR(g_vww_activations_map[0] + 4680);
 8005e0a:	3208      	adds	r2, #8
    input_1_int8_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 4680);
 8005e0c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_0_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 32332);
 8005e10:	f503 42fc 	add.w	r2, r3, #32256	; 0x7e00
 8005e14:	4986      	ldr	r1, [pc, #536]	; (8006030 <ai_vww_init+0x758>)
 8005e16:	324c      	adds	r2, #76	; 0x4c
    conv2d_0_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 32332);
 8005e18:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_0_output_array.data = AI_PTR(g_vww_activations_map[0] + 4288);
 8005e1c:	f503 5186 	add.w	r1, r3, #4288	; 0x10c0
 8005e20:	4a84      	ldr	r2, [pc, #528]	; (8006034 <ai_vww_init+0x75c>)
    conv2d_0_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 4288);
 8005e22:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_pad_before_output_array.data = AI_PTR(g_vww_activations_map[0] + 2720);
 8005e26:	f503 612a 	add.w	r1, r3, #2720	; 0xaa0
 8005e2a:	4a83      	ldr	r2, [pc, #524]	; (8006038 <ai_vww_init+0x760>)
    conv2d_1_pad_before_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 2720);
 8005e2c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 2420);
 8005e30:	f603 1274 	addw	r2, r3, #2420	; 0x974
 8005e34:	4981      	ldr	r1, [pc, #516]	; (800603c <ai_vww_init+0x764>)
    conv2d_1_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 2420);
 8005e36:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_output_array.data = AI_PTR(g_vww_activations_map[0] + 22720);
 8005e3a:	f503 41b1 	add.w	r1, r3, #22656	; 0x5880
 8005e3e:	3140      	adds	r1, #64	; 0x40
    conv2d_1_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 22720);
 8005e40:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_2_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 2420);
 8005e44:	497e      	ldr	r1, [pc, #504]	; (8006040 <ai_vww_init+0x768>)
    conv2d_9_pad_before_output_array.data = AI_PTR(g_vww_activations_map[0] + 9984);
 8005e46:	f503 501c 	add.w	r0, r3, #9984	; 0x2700
    conv2d_2_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 2420);
 8005e4a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_2_output_array.data = AI_PTR(g_vww_activations_map[0] + 3520);
 8005e4e:	f503 615c 	add.w	r1, r3, #3520	; 0xdc0
 8005e52:	4a7c      	ldr	r2, [pc, #496]	; (8006044 <ai_vww_init+0x76c>)
    conv2d_2_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 3520);
 8005e54:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_pad_before_output_array.data = AI_PTR(g_vww_activations_map[0] + 384);
 8005e58:	f503 71c0 	add.w	r1, r3, #384	; 0x180
 8005e5c:	4a7a      	ldr	r2, [pc, #488]	; (8006048 <ai_vww_init+0x770>)
    conv2d_3_pad_before_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 384);
 8005e5e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 40556);
 8005e62:	f503 421e 	add.w	r2, r3, #40448	; 0x9e00
 8005e66:	4979      	ldr	r1, [pc, #484]	; (800604c <ai_vww_init+0x774>)
 8005e68:	326c      	adds	r2, #108	; 0x6c
    conv2d_3_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 40556);
 8005e6a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_3_output_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005e6e:	4a78      	ldr	r2, [pc, #480]	; (8006050 <ai_vww_init+0x778>)
    conv2d_4_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 9216);
 8005e70:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
    conv2d_3_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005e74:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_4_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 9216);
 8005e78:	4a76      	ldr	r2, [pc, #472]	; (8006054 <ai_vww_init+0x77c>)
    conv2d_4_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 9216);
 8005e7a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_4_output_array.data = AI_PTR(g_vww_activations_map[0] + 9600);
 8005e7e:	f503 5116 	add.w	r1, r3, #9600	; 0x2580
 8005e82:	4a75      	ldr	r2, [pc, #468]	; (8006058 <ai_vww_init+0x780>)
    conv2d_4_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 9600);
 8005e84:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_pad_before_output_array.data = AI_PTR(g_vww_activations_map[0] + 6400);
 8005e88:	f503 51c8 	add.w	r1, r3, #6400	; 0x1900
 8005e8c:	4a73      	ldr	r2, [pc, #460]	; (800605c <ai_vww_init+0x784>)
    conv2d_5_pad_before_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 6400);
 8005e8e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005e92:	4a73      	ldr	r2, [pc, #460]	; (8006060 <ai_vww_init+0x788>)
    conv2d_5_output_array.data = AI_PTR(g_vww_activations_map[0] + 5632);
 8005e94:	f503 51b0 	add.w	r1, r3, #5632	; 0x1600
    conv2d_5_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005e98:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_5_output_array.data = AI_PTR(g_vww_activations_map[0] + 5632);
 8005e9c:	4a71      	ldr	r2, [pc, #452]	; (8006064 <ai_vww_init+0x78c>)
    conv2d_5_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 5632);
 8005e9e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_6_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005ea2:	4a71      	ldr	r2, [pc, #452]	; (8006068 <ai_vww_init+0x790>)
    conv2d_6_output_array.data = AI_PTR(g_vww_activations_map[0] + 4864);
 8005ea4:	f503 5198 	add.w	r1, r3, #4864	; 0x1300
    conv2d_6_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005ea8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_6_output_array.data = AI_PTR(g_vww_activations_map[0] + 4864);
 8005eac:	4a6f      	ldr	r2, [pc, #444]	; (800606c <ai_vww_init+0x794>)
    conv2d_6_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 4864);
 8005eae:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_pad_before_output_array.data = AI_PTR(g_vww_activations_map[0] + 1664);
 8005eb2:	f503 61d0 	add.w	r1, r3, #1664	; 0x680
 8005eb6:	4a6e      	ldr	r2, [pc, #440]	; (8006070 <ai_vww_init+0x798>)
    conv2d_7_pad_before_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 1664);
 8005eb8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005ebc:	4a6d      	ldr	r2, [pc, #436]	; (8006074 <ai_vww_init+0x79c>)
    conv2d_7_output_array.data = AI_PTR(g_vww_activations_map[0] + 23296);
 8005ebe:	f503 41b6 	add.w	r1, r3, #23296	; 0x5b00
    conv2d_7_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005ec2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_7_output_array.data = AI_PTR(g_vww_activations_map[0] + 23296);
 8005ec6:	4a6c      	ldr	r2, [pc, #432]	; (8006078 <ai_vww_init+0x7a0>)
    conv2d_7_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 23296);
 8005ec8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_8_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005ecc:	4a6b      	ldr	r2, [pc, #428]	; (800607c <ai_vww_init+0x7a4>)
    conv2d_8_output_array.data = AI_PTR(g_vww_activations_map[0] + 768);
 8005ece:	496c      	ldr	r1, [pc, #432]	; (8006080 <ai_vww_init+0x7a8>)
    conv2d_8_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005ed0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_8_output_array.data = AI_PTR(g_vww_activations_map[0] + 768);
 8005ed4:	f503 7240 	add.w	r2, r3, #768	; 0x300
    conv2d_8_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 768);
 8005ed8:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_9_pad_before_output_array.data = AI_PTR(g_vww_activations_map[0] + 9984);
 8005edc:	4969      	ldr	r1, [pc, #420]	; (8006084 <ai_vww_init+0x7ac>)
    conv2d_9_pad_before_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 9984);
 8005ede:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_9_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005ee2:	4969      	ldr	r1, [pc, #420]	; (8006088 <ai_vww_init+0x7b0>)
    conv2d_9_output_array.data = AI_PTR(g_vww_activations_map[0] + 22528);
 8005ee4:	f503 40b0 	add.w	r0, r3, #22528	; 0x5800
    conv2d_9_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005ee8:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_9_output_array.data = AI_PTR(g_vww_activations_map[0] + 22528);
 8005eec:	4967      	ldr	r1, [pc, #412]	; (800608c <ai_vww_init+0x7b4>)
    conv2d_9_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 22528);
 8005eee:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_10_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005ef2:	4967      	ldr	r1, [pc, #412]	; (8006090 <ai_vww_init+0x7b8>)
    conv2d_10_output_array.data = AI_PTR(g_vww_activations_map[0] + 848);
 8005ef4:	f503 7054 	add.w	r0, r3, #848	; 0x350
    conv2d_10_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005ef8:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_10_output_array.data = AI_PTR(g_vww_activations_map[0] + 848);
 8005efc:	4965      	ldr	r1, [pc, #404]	; (8006094 <ai_vww_init+0x7bc>)
    conv2d_10_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 848);
 8005efe:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_11_pad_before_output_array.data = AI_PTR(g_vww_activations_map[0] + 9344);
 8005f02:	f503 5012 	add.w	r0, r3, #9344	; 0x2480
 8005f06:	4964      	ldr	r1, [pc, #400]	; (8006098 <ai_vww_init+0x7c0>)
    conv2d_11_pad_before_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 9344);
 8005f08:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_11_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005f0c:	4963      	ldr	r1, [pc, #396]	; (800609c <ai_vww_init+0x7c4>)
    conv2d_11_output_array.data = AI_PTR(g_vww_activations_map[0] + 2184);
 8005f0e:	f603 0088 	addw	r0, r3, #2184	; 0x888
    conv2d_11_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005f12:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_11_output_array.data = AI_PTR(g_vww_activations_map[0] + 2184);
 8005f16:	4962      	ldr	r1, [pc, #392]	; (80060a0 <ai_vww_init+0x7c8>)
    conv2d_11_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 2184);
 8005f18:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_12_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005f1c:	4961      	ldr	r1, [pc, #388]	; (80060a4 <ai_vww_init+0x7cc>)
    conv2d_12_output_array.data = AI_PTR(g_vww_activations_map[0] + 4308);
 8005f1e:	4862      	ldr	r0, [pc, #392]	; (80060a8 <ai_vww_init+0x7d0>)
    conv2d_12_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005f20:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_12_output_array.data = AI_PTR(g_vww_activations_map[0] + 4308);
 8005f24:	f503 5186 	add.w	r1, r3, #4288	; 0x10c0
 8005f28:	3114      	adds	r1, #20
    conv2d_12_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 4308);
 8005f2a:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_13_pad_before_output_array.data = AI_PTR(g_vww_activations_map[0] + 8124);
 8005f2e:	f503 51fd 	add.w	r1, r3, #8096	; 0x1fa0
 8005f32:	485e      	ldr	r0, [pc, #376]	; (80060ac <ai_vww_init+0x7d4>)
 8005f34:	311c      	adds	r1, #28
    conv2d_13_pad_before_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 8124);
 8005f36:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_13_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005f3a:	495d      	ldr	r1, [pc, #372]	; (80060b0 <ai_vww_init+0x7d8>)
    conv2d_13_output_array.data = AI_PTR(g_vww_activations_map[0] + 3924);
 8005f3c:	f603 7054 	addw	r0, r3, #3924	; 0xf54
    conv2d_13_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005f40:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_13_output_array.data = AI_PTR(g_vww_activations_map[0] + 3924);
 8005f44:	495b      	ldr	r1, [pc, #364]	; (80060b4 <ai_vww_init+0x7dc>)
    conv2d_13_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 3924);
 8005f46:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_14_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005f4a:	495b      	ldr	r1, [pc, #364]	; (80060b8 <ai_vww_init+0x7e0>)
    conv2d_14_output_array.data = AI_PTR(g_vww_activations_map[0] + 996);
 8005f4c:	f503 7079 	add.w	r0, r3, #996	; 0x3e4
    conv2d_14_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005f50:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_14_output_array.data = AI_PTR(g_vww_activations_map[0] + 996);
 8005f54:	4959      	ldr	r1, [pc, #356]	; (80060bc <ai_vww_init+0x7e4>)
    conv2d_14_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 996);
 8005f56:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_15_pad_before_output_array.data = AI_PTR(g_vww_activations_map[0] + 3048);
 8005f5a:	f603 30e8 	addw	r0, r3, #3048	; 0xbe8
 8005f5e:	4958      	ldr	r1, [pc, #352]	; (80060c0 <ai_vww_init+0x7e8>)
    conv2d_15_pad_before_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 3048);
 8005f60:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_15_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005f64:	4957      	ldr	r1, [pc, #348]	; (80060c4 <ai_vww_init+0x7ec>)
    conv2d_15_output_array.data = AI_PTR(g_vww_activations_map[0] + 6696);
 8005f66:	4858      	ldr	r0, [pc, #352]	; (80060c8 <ai_vww_init+0x7f0>)
    conv2d_15_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005f68:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_15_output_array.data = AI_PTR(g_vww_activations_map[0] + 6696);
 8005f6c:	f503 51d1 	add.w	r1, r3, #6688	; 0x1a20
 8005f70:	3108      	adds	r1, #8
    conv2d_15_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 6696);
 8005f72:	e9c0 1102 	strd	r1, r1, [r0, #8]
    conv2d_16_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005f76:	4955      	ldr	r1, [pc, #340]	; (80060cc <ai_vww_init+0x7f4>)
    conv2d_16_output_array.data = AI_PTR(g_vww_activations_map[0] + 520);
 8005f78:	f503 7002 	add.w	r0, r3, #520	; 0x208
    conv2d_16_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005f7c:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_16_output_array.data = AI_PTR(g_vww_activations_map[0] + 520);
 8005f80:	4953      	ldr	r1, [pc, #332]	; (80060d0 <ai_vww_init+0x7f8>)
    conv2d_16_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 520);
 8005f82:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_17_pad_before_output_array.data = AI_PTR(g_vww_activations_map[0] + 1564);
 8005f86:	f203 601c 	addw	r0, r3, #1564	; 0x61c
 8005f8a:	4952      	ldr	r1, [pc, #328]	; (80060d4 <ai_vww_init+0x7fc>)
    conv2d_17_pad_before_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 1564);
 8005f8c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_17_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005f90:	4951      	ldr	r1, [pc, #324]	; (80060d8 <ai_vww_init+0x800>)
    conv2d_17_output_array.data = AI_PTR(g_vww_activations_map[0] + 3420);
 8005f92:	f603 505c 	addw	r0, r3, #3420	; 0xd5c
    conv2d_17_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005f96:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_17_output_array.data = AI_PTR(g_vww_activations_map[0] + 3420);
 8005f9a:	4950      	ldr	r1, [pc, #320]	; (80060dc <ai_vww_init+0x804>)
    conv2d_17_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 3420);
 8005f9c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_18_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005fa0:	494f      	ldr	r1, [pc, #316]	; (80060e0 <ai_vww_init+0x808>)
    conv2d_18_output_array.data = AI_PTR(g_vww_activations_map[0] + 296);
 8005fa2:	f503 7094 	add.w	r0, r3, #296	; 0x128
    conv2d_18_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005fa6:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_18_output_array.data = AI_PTR(g_vww_activations_map[0] + 296);
 8005faa:	494e      	ldr	r1, [pc, #312]	; (80060e4 <ai_vww_init+0x80c>)
    conv2d_18_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 296);
 8005fac:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_19_pad_before_output_array.data = AI_PTR(g_vww_activations_map[0] + 944);
 8005fb0:	f503 706c 	add.w	r0, r3, #944	; 0x3b0
 8005fb4:	494c      	ldr	r1, [pc, #304]	; (80060e8 <ai_vww_init+0x810>)
    conv2d_19_pad_before_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 944);
 8005fb6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_19_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005fba:	494c      	ldr	r1, [pc, #304]	; (80060ec <ai_vww_init+0x814>)
    conv2d_19_output_array.data = AI_PTR(g_vww_activations_map[0] + 2096);
 8005fbc:	f503 6003 	add.w	r0, r3, #2096	; 0x830
    conv2d_19_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005fc0:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_19_output_array.data = AI_PTR(g_vww_activations_map[0] + 2096);
 8005fc4:	494a      	ldr	r1, [pc, #296]	; (80060f0 <ai_vww_init+0x818>)
    conv2d_19_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 2096);
 8005fc6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_20_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005fca:	494a      	ldr	r1, [pc, #296]	; (80060f4 <ai_vww_init+0x81c>)
    conv2d_20_output_array.data = AI_PTR(g_vww_activations_map[0] + 232);
 8005fcc:	f103 00e8 	add.w	r0, r3, #232	; 0xe8
    conv2d_20_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8005fd0:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_20_output_array.data = AI_PTR(g_vww_activations_map[0] + 232);
 8005fd4:	4948      	ldr	r1, [pc, #288]	; (80060f8 <ai_vww_init+0x820>)
    conv2d_20_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 232);
 8005fd6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_21_pad_before_output_array.data = AI_PTR(g_vww_activations_map[0] + 808);
 8005fda:	f503 704a 	add.w	r0, r3, #808	; 0x328
 8005fde:	4947      	ldr	r1, [pc, #284]	; (80060fc <ai_vww_init+0x824>)
    conv2d_21_pad_before_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 808);
 8005fe0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_21_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8005fe4:	4946      	ldr	r1, [pc, #280]	; (8006100 <ai_vww_init+0x828>)
    conv2d_21_output_array.data = AI_PTR(g_vww_activations_map[0] + 1832);
 8005fe6:	f503 60e5 	add.w	r0, r3, #1832	; 0x728
 8005fea:	e08d      	b.n	8006108 <ai_vww_init+0x830>
 8005fec:	20002d70 	.word	0x20002d70
 8005ff0:	20002f84 	.word	0x20002f84
 8005ff4:	20002e64 	.word	0x20002e64
 8005ff8:	20003078 	.word	0x20003078
 8005ffc:	20002fb0 	.word	0x20002fb0
 8006000:	200031c4 	.word	0x200031c4
 8006004:	200030a4 	.word	0x200030a4
 8006008:	200032b8 	.word	0x200032b8
 800600c:	200031f0 	.word	0x200031f0
 8006010:	20003404 	.word	0x20003404
 8006014:	200032e4 	.word	0x200032e4
 8006018:	200034f8 	.word	0x200034f8
 800601c:	20003430 	.word	0x20003430
 8006020:	20003f10 	.word	0x20003f10
 8006024:	20003e70 	.word	0x20003e70
 8006028:	20003f3c 	.word	0x20003f3c
 800602c:	20002c94 	.word	0x20002c94
 8006030:	2000208c 	.word	0x2000208c
 8006034:	20002060 	.word	0x20002060
 8006038:	20002cec 	.word	0x20002cec
 800603c:	20002d18 	.word	0x20002d18
 8006040:	200035c0 	.word	0x200035c0
 8006044:	20003594 	.word	0x20003594
 8006048:	200036e0 	.word	0x200036e0
 800604c:	2000370c 	.word	0x2000370c
 8006050:	20003688 	.word	0x20003688
 8006054:	20003800 	.word	0x20003800
 8006058:	200037d4 	.word	0x200037d4
 800605c:	20003920 	.word	0x20003920
 8006060:	2000394c 	.word	0x2000394c
 8006064:	200038c8 	.word	0x200038c8
 8006068:	20003a40 	.word	0x20003a40
 800606c:	20003a14 	.word	0x20003a14
 8006070:	20003b60 	.word	0x20003b60
 8006074:	20003b8c 	.word	0x20003b8c
 8006078:	20003b08 	.word	0x20003b08
 800607c:	20003c80 	.word	0x20003c80
 8006080:	20003c54 	.word	0x20003c54
 8006084:	20003da0 	.word	0x20003da0
 8006088:	20003dcc 	.word	0x20003dcc
 800608c:	20003d48 	.word	0x20003d48
 8006090:	20002180 	.word	0x20002180
 8006094:	20002154 	.word	0x20002154
 8006098:	200022a0 	.word	0x200022a0
 800609c:	200022cc 	.word	0x200022cc
 80060a0:	20002248 	.word	0x20002248
 80060a4:	200023c0 	.word	0x200023c0
 80060a8:	20002394 	.word	0x20002394
 80060ac:	200024e0 	.word	0x200024e0
 80060b0:	2000250c 	.word	0x2000250c
 80060b4:	20002488 	.word	0x20002488
 80060b8:	20002600 	.word	0x20002600
 80060bc:	200025d4 	.word	0x200025d4
 80060c0:	20002720 	.word	0x20002720
 80060c4:	2000274c 	.word	0x2000274c
 80060c8:	200026c8 	.word	0x200026c8
 80060cc:	20002840 	.word	0x20002840
 80060d0:	20002814 	.word	0x20002814
 80060d4:	20002960 	.word	0x20002960
 80060d8:	2000298c 	.word	0x2000298c
 80060dc:	20002908 	.word	0x20002908
 80060e0:	20002a80 	.word	0x20002a80
 80060e4:	20002a54 	.word	0x20002a54
 80060e8:	20002ba0 	.word	0x20002ba0
 80060ec:	20002bcc 	.word	0x20002bcc
 80060f0:	20002b48 	.word	0x20002b48
 80060f4:	20002e0c 	.word	0x20002e0c
 80060f8:	20002de0 	.word	0x20002de0
 80060fc:	20002f2c 	.word	0x20002f2c
 8006100:	20002f58 	.word	0x20002f58
 8006104:	2000ebd0 	.word	0x2000ebd0
    conv2d_21_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8006108:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_21_output_array.data = AI_PTR(g_vww_activations_map[0] + 1832);
 800610c:	492e      	ldr	r1, [pc, #184]	; (80061c8 <ai_vww_init+0x8f0>)
    conv2d_21_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 1832);
 800610e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_22_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8006112:	492e      	ldr	r1, [pc, #184]	; (80061cc <ai_vww_init+0x8f4>)
    conv2d_22_output_array.data = AI_PTR(g_vww_activations_map[0] + 316);
 8006114:	f503 709e 	add.w	r0, r3, #316	; 0x13c
    conv2d_22_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8006118:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_22_output_array.data = AI_PTR(g_vww_activations_map[0] + 316);
 800611c:	492c      	ldr	r1, [pc, #176]	; (80061d0 <ai_vww_init+0x8f8>)
    conv2d_22_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 316);
 800611e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_23_pad_before_output_array.data = AI_PTR(g_vww_activations_map[0] + 1216);
 8006122:	f503 6098 	add.w	r0, r3, #1216	; 0x4c0
 8006126:	492b      	ldr	r1, [pc, #172]	; (80061d4 <ai_vww_init+0x8fc>)
    conv2d_23_pad_before_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 1216);
 8006128:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_23_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 800612c:	492a      	ldr	r1, [pc, #168]	; (80061d8 <ai_vww_init+0x900>)
    conv2d_23_output_array.data = AI_PTR(g_vww_activations_map[0] + 928);
 800612e:	f503 7068 	add.w	r0, r3, #928	; 0x3a0
    conv2d_23_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8006132:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_23_output_array.data = AI_PTR(g_vww_activations_map[0] + 928);
 8006136:	4929      	ldr	r1, [pc, #164]	; (80061dc <ai_vww_init+0x904>)
    conv2d_23_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 928);
 8006138:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_24_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 800613c:	4928      	ldr	r1, [pc, #160]	; (80061e0 <ai_vww_init+0x908>)
    conv2d_24_output_array.data = AI_PTR(g_vww_activations_map[0] + 380);
 800613e:	f503 70be 	add.w	r0, r3, #380	; 0x17c
    conv2d_24_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8006142:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_24_output_array.data = AI_PTR(g_vww_activations_map[0] + 380);
 8006146:	4927      	ldr	r1, [pc, #156]	; (80061e4 <ai_vww_init+0x90c>)
    conv2d_24_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 380);
 8006148:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_25_pad_before_output_array.data = AI_PTR(g_vww_activations_map[0] + 632);
 800614c:	f503 701e 	add.w	r0, r3, #632	; 0x278
 8006150:	4925      	ldr	r1, [pc, #148]	; (80061e8 <ai_vww_init+0x910>)
    conv2d_25_pad_before_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 632);
 8006152:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_25_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 1332);
 8006156:	f203 5034 	addw	r0, r3, #1332	; 0x534
 800615a:	4924      	ldr	r1, [pc, #144]	; (80061ec <ai_vww_init+0x914>)
    conv2d_25_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 1332);
 800615c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_25_output_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 8006160:	4923      	ldr	r1, [pc, #140]	; (80061f0 <ai_vww_init+0x918>)
    conv2d_26_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 252);
 8006162:	f103 00fc 	add.w	r0, r3, #252	; 0xfc
    conv2d_25_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8006166:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_26_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 252);
 800616a:	4922      	ldr	r1, [pc, #136]	; (80061f4 <ai_vww_init+0x91c>)
    conv2d_26_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 252);
 800616c:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_26_output_array.data = AI_PTR(g_vww_activations_map[0] + 2924);
 8006170:	f603 306c 	addw	r0, r3, #2924	; 0xb6c
 8006174:	4920      	ldr	r1, [pc, #128]	; (80061f8 <ai_vww_init+0x920>)
    conv2d_26_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 2924);
 8006176:	e9c1 0002 	strd	r0, r0, [r1, #8]
    pool_27_output_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 800617a:	4920      	ldr	r1, [pc, #128]	; (80061fc <ai_vww_init+0x924>)
    gemm_29_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 256);
 800617c:	f503 7080 	add.w	r0, r3, #256	; 0x100
    pool_27_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 8006180:	e9c1 3302 	strd	r3, r3, [r1, #8]
    gemm_29_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 256);
 8006184:	491e      	ldr	r1, [pc, #120]	; (8006200 <ai_vww_init+0x928>)
    gemm_29_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 256);
 8006186:	e9c1 0002 	strd	r0, r0, [r1, #8]
    gemm_29_output_array.data = AI_PTR(g_vww_activations_map[0] + 768);
 800618a:	491e      	ldr	r1, [pc, #120]	; (8006204 <ai_vww_init+0x92c>)
    gemm_29_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 768);
 800618c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_30_scratch0_array.data = AI_PTR(g_vww_activations_map[0] + 772);
 8006190:	4a1d      	ldr	r2, [pc, #116]	; (8006208 <ai_vww_init+0x930>)
 8006192:	f503 7141 	add.w	r1, r3, #772	; 0x304
    nl_30_scratch0_array.data_start = AI_PTR(g_vww_activations_map[0] + 772);
 8006196:	e9c2 1102 	strd	r1, r1, [r2, #8]
    nl_30_output_array.data = AI_PTR(g_vww_activations_map[0] + 0);
 800619a:	4a1c      	ldr	r2, [pc, #112]	; (800620c <ai_vww_init+0x934>)
    nl_30_output_array.data_start = AI_PTR(g_vww_activations_map[0] + 0);
 800619c:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ok &= vww_configure_weights(net_ctx, params);
  ok &= vww_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 80061a0:	4638      	mov	r0, r7
 80061a2:	f000 fdaf 	bl	8006d04 <ai_platform_network_post_init>
 80061a6:	4030      	ands	r0, r6
 80061a8:	4005      	ands	r5, r0
 80061aa:	b2e8      	uxtb	r0, r5

  return ok;
}
 80061ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80061b0:	2212      	movs	r2, #18
 80061b2:	2130      	movs	r1, #48	; 0x30
 80061b4:	4620      	mov	r0, r4
 80061b6:	f000 fac1 	bl	800673c <ai_platform_network_set_error>
  return false;
 80061ba:	e615      	b.n	8005de8 <ai_vww_init+0x510>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80061bc:	2213      	movs	r2, #19
 80061be:	2130      	movs	r1, #48	; 0x30
 80061c0:	4620      	mov	r0, r4
 80061c2:	f000 fabb 	bl	800673c <ai_platform_network_set_error>
  return false;
 80061c6:	e7eb      	b.n	80061a0 <ai_vww_init+0x8c8>
 80061c8:	20002ed4 	.word	0x20002ed4
 80061cc:	2000304c 	.word	0x2000304c
 80061d0:	20003020 	.word	0x20003020
 80061d4:	2000316c 	.word	0x2000316c
 80061d8:	20003198 	.word	0x20003198
 80061dc:	20003114 	.word	0x20003114
 80061e0:	2000328c 	.word	0x2000328c
 80061e4:	20003260 	.word	0x20003260
 80061e8:	200033ac 	.word	0x200033ac
 80061ec:	200033d8 	.word	0x200033d8
 80061f0:	20003354 	.word	0x20003354
 80061f4:	200034cc 	.word	0x200034cc
 80061f8:	200034a0 	.word	0x200034a0
 80061fc:	20004018 	.word	0x20004018
 8006200:	20003ee4 	.word	0x20003ee4
 8006204:	20003eb8 	.word	0x20003eb8
 8006208:	20003fb4 	.word	0x20003fb4
 800620c:	20003f88 	.word	0x20003f88

08006210 <ai_vww_run>:

AI_API_ENTRY
ai_i32 ai_vww_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8006210:	f000 bda8 	b.w	8006d64 <ai_platform_network_process>

08006214 <ai_vww_forward>:


AI_API_ENTRY
ai_i32 ai_vww_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8006214:	2200      	movs	r2, #0
 8006216:	f000 bda5 	b.w	8006d64 <ai_platform_network_process>
	...

0800621c <ai_vww_data_params_get>:
 * @ingroup vww_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_vww_data_params_get(ai_network_params* params)
{
 800621c:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 800621e:	4603      	mov	r3, r0
{
 8006220:	b085      	sub	sp, #20
  if (!params) return false;
 8006222:	b170      	cbz	r0, 8006242 <ai_vww_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8006224:	4c08      	ldr	r4, [pc, #32]	; (8006248 <ai_vww_data_params_get+0x2c>)
 8006226:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_VWW_DATA_ACTIVATIONS_COUNT, g_vww_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8006228:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 800622a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800622e:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 8006232:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8006236:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_VWW_DATA_WEIGHTS_COUNT, g_vww_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800623a:	4629      	mov	r1, r5
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fa03 	bl	8006648 <ai_platform_bind_network_params>
}
 8006242:	b005      	add	sp, #20
 8006244:	bd30      	pop	{r4, r5, pc}
 8006246:	bf00      	nop
 8006248:	080115b0 	.word	0x080115b0

0800624c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800624c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006284 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006250:	480d      	ldr	r0, [pc, #52]	; (8006288 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006252:	490e      	ldr	r1, [pc, #56]	; (800628c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006254:	4a0e      	ldr	r2, [pc, #56]	; (8006290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006258:	e002      	b.n	8006260 <LoopCopyDataInit>

0800625a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800625a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800625c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800625e:	3304      	adds	r3, #4

08006260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006264:	d3f9      	bcc.n	800625a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006266:	4a0b      	ldr	r2, [pc, #44]	; (8006294 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006268:	4c0b      	ldr	r4, [pc, #44]	; (8006298 <LoopFillZerobss+0x26>)
  movs r3, #0
 800626a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800626c:	e001      	b.n	8006272 <LoopFillZerobss>

0800626e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800626e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006270:	3204      	adds	r2, #4

08006272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006274:	d3fb      	bcc.n	800626e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006276:	f7ff fabd 	bl	80057f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800627a:	f008 ff23 	bl	800f0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800627e:	f7fe f8f1 	bl	8004464 <main>
  bx  lr    
 8006282:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006284:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8006288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800628c:	20004248 	.word	0x20004248
  ldr r2, =_sidata
 8006290:	0801df8c 	.word	0x0801df8c
  ldr r2, =_sbss
 8006294:	20004260 	.word	0x20004260
  ldr r4, =_ebss
 8006298:	2000ed24 	.word	0x2000ed24

0800629c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800629c:	e7fe      	b.n	800629c <ADC_IRQHandler>
	...

080062a0 <stai_runtime_get_info>:
 80062a0:	b430      	push	{r4, r5}
 80062a2:	b160      	cbz	r0, 80062be <stai_runtime_get_info+0x1e>
 80062a4:	4c08      	ldr	r4, [pc, #32]	; (80062c8 <stai_runtime_get_info+0x28>)
 80062a6:	4684      	mov	ip, r0
 80062a8:	2500      	movs	r5, #0
 80062aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80062b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062b4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80062b8:	4628      	mov	r0, r5
 80062ba:	bc30      	pop	{r4, r5}
 80062bc:	4770      	bx	lr
 80062be:	4d03      	ldr	r5, [pc, #12]	; (80062cc <stai_runtime_get_info+0x2c>)
 80062c0:	4628      	mov	r0, r5
 80062c2:	bc30      	pop	{r4, r5}
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	0801dbe4 	.word	0x0801dbe4
 80062cc:	00020001 	.word	0x00020001

080062d0 <ai_version_get>:
 80062d0:	0212      	lsls	r2, r2, #8
 80062d2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80062d6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80062da:	4770      	bx	lr

080062dc <ai_platform_version_get>:
 80062dc:	0e01      	lsrs	r1, r0, #24
 80062de:	2300      	movs	r3, #0
 80062e0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80062e4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80062e8:	f361 0307 	bfi	r3, r1, #0, #8
 80062ec:	b082      	sub	sp, #8
 80062ee:	f362 230f 	bfi	r3, r2, #8, #8
 80062f2:	f360 4317 	bfi	r3, r0, #16, #8
 80062f6:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 80062fa:	b002      	add	sp, #8
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop

08006300 <get_tensor_size>:
 8006300:	b111      	cbz	r1, 8006308 <get_tensor_size+0x8>
 8006302:	6983      	ldr	r3, [r0, #24]
 8006304:	6858      	ldr	r0, [r3, #4]
 8006306:	4770      	bx	lr
 8006308:	6883      	ldr	r3, [r0, #8]
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	d00a      	beq.n	8006324 <get_tensor_size+0x24>
 800630e:	68c1      	ldr	r1, [r0, #12]
 8006310:	2001      	movs	r0, #1
 8006312:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006316:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800631a:	4299      	cmp	r1, r3
 800631c:	fb02 f000 	mul.w	r0, r2, r0
 8006320:	d1f9      	bne.n	8006316 <get_tensor_size+0x16>
 8006322:	4770      	bx	lr
 8006324:	2001      	movs	r0, #1
 8006326:	4770      	bx	lr

08006328 <get_tensor_byte_size>:
 8006328:	b430      	push	{r4, r5}
 800632a:	6985      	ldr	r5, [r0, #24]
 800632c:	68c4      	ldr	r4, [r0, #12]
 800632e:	6941      	ldr	r1, [r0, #20]
 8006330:	4b06      	ldr	r3, [pc, #24]	; (800634c <get_tensor_byte_size+0x24>)
 8006332:	6828      	ldr	r0, [r5, #0]
 8006334:	4a06      	ldr	r2, [pc, #24]	; (8006350 <get_tensor_byte_size+0x28>)
 8006336:	4003      	ands	r3, r0
 8006338:	68c9      	ldr	r1, [r1, #12]
 800633a:	68e0      	ldr	r0, [r4, #12]
 800633c:	4293      	cmp	r3, r2
 800633e:	fb01 f000 	mul.w	r0, r1, r0
 8006342:	d101      	bne.n	8006348 <get_tensor_byte_size+0x20>
 8006344:	3007      	adds	r0, #7
 8006346:	08c0      	lsrs	r0, r0, #3
 8006348:	bc30      	pop	{r4, r5}
 800634a:	4770      	bx	lr
 800634c:	017fffff 	.word	0x017fffff
 8006350:	000400c0 	.word	0x000400c0

08006354 <ai_buffer_get_size>:
 8006354:	b368      	cbz	r0, 80063b2 <ai_buffer_get_size+0x5e>
 8006356:	4b17      	ldr	r3, [pc, #92]	; (80063b4 <ai_buffer_get_size+0x60>)
 8006358:	4a17      	ldr	r2, [pc, #92]	; (80063b8 <ai_buffer_get_size+0x64>)
 800635a:	b410      	push	{r4}
 800635c:	6804      	ldr	r4, [r0, #0]
 800635e:	4023      	ands	r3, r4
 8006360:	4293      	cmp	r3, r2
 8006362:	d123      	bne.n	80063ac <ai_buffer_get_size+0x58>
 8006364:	b311      	cbz	r1, 80063ac <ai_buffer_get_size+0x58>
 8006366:	6984      	ldr	r4, [r0, #24]
 8006368:	6862      	ldr	r2, [r4, #4]
 800636a:	321f      	adds	r2, #31
 800636c:	f022 021f 	bic.w	r2, r2, #31
 8006370:	7d03      	ldrb	r3, [r0, #20]
 8006372:	6941      	ldr	r1, [r0, #20]
 8006374:	f1a3 0301 	sub.w	r3, r3, #1
 8006378:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800637c:	fab3 f383 	clz	r3, r3
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8006386:	da0c      	bge.n	80063a2 <ai_buffer_get_size+0x4e>
 8006388:	2b01      	cmp	r3, #1
 800638a:	d103      	bne.n	8006394 <ai_buffer_get_size+0x40>
 800638c:	2802      	cmp	r0, #2
 800638e:	f04f 0302 	mov.w	r3, #2
 8006392:	d006      	beq.n	80063a2 <ai_buffer_get_size+0x4e>
 8006394:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006398:	3301      	adds	r3, #1
 800639a:	4298      	cmp	r0, r3
 800639c:	fb01 f202 	mul.w	r2, r1, r2
 80063a0:	d1f2      	bne.n	8006388 <ai_buffer_get_size+0x34>
 80063a2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80063a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	6984      	ldr	r4, [r0, #24]
 80063ae:	6862      	ldr	r2, [r4, #4]
 80063b0:	e7de      	b.n	8006370 <ai_buffer_get_size+0x1c>
 80063b2:	4770      	bx	lr
 80063b4:	017fffff 	.word	0x017fffff
 80063b8:	000400c0 	.word	0x000400c0

080063bc <ai_buffer_get_byte_size>:
 80063bc:	b128      	cbz	r0, 80063ca <ai_buffer_get_byte_size+0xe>
 80063be:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 80063c2:	fb01 f000 	mul.w	r0, r1, r0
 80063c6:	3007      	adds	r0, #7
 80063c8:	08c0      	lsrs	r0, r0, #3
 80063ca:	4770      	bx	lr

080063cc <ai_buffer_array_sane>:
 80063cc:	b138      	cbz	r0, 80063de <ai_buffer_array_sane+0x12>
 80063ce:	6843      	ldr	r3, [r0, #4]
 80063d0:	b123      	cbz	r3, 80063dc <ai_buffer_array_sane+0x10>
 80063d2:	8840      	ldrh	r0, [r0, #2]
 80063d4:	3800      	subs	r0, #0
 80063d6:	bf18      	it	ne
 80063d8:	2001      	movne	r0, #1
 80063da:	4770      	bx	lr
 80063dc:	4618      	mov	r0, r3
 80063de:	4770      	bx	lr

080063e0 <ai_buffer_array_item_set_address>:
 80063e0:	b150      	cbz	r0, 80063f8 <ai_buffer_array_item_set_address+0x18>
 80063e2:	6843      	ldr	r3, [r0, #4]
 80063e4:	b14b      	cbz	r3, 80063fa <ai_buffer_array_item_set_address+0x1a>
 80063e6:	8840      	ldrh	r0, [r0, #2]
 80063e8:	b900      	cbnz	r0, 80063ec <ai_buffer_array_item_set_address+0xc>
 80063ea:	4770      	bx	lr
 80063ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80063f0:	2001      	movs	r0, #1
 80063f2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80063f6:	605a      	str	r2, [r3, #4]
 80063f8:	4770      	bx	lr
 80063fa:	4618      	mov	r0, r3
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop

08006400 <_platform_observer_node_exec_cb>:
 8006400:	2a00      	cmp	r2, #0
 8006402:	d04f      	beq.n	80064a4 <_platform_observer_node_exec_cb+0xa4>
 8006404:	b570      	push	{r4, r5, r6, lr}
 8006406:	6815      	ldr	r5, [r2, #0]
 8006408:	b084      	sub	sp, #16
 800640a:	4614      	mov	r4, r2
 800640c:	2d00      	cmp	r5, #0
 800640e:	d04b      	beq.n	80064a8 <_platform_observer_node_exec_cb+0xa8>
 8006410:	8992      	ldrh	r2, [r2, #12]
 8006412:	460e      	mov	r6, r1
 8006414:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
 8006418:	fab2 f382 	clz	r3, r2
 800641c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006420:	095b      	lsrs	r3, r3, #5
 8006422:	4594      	cmp	ip, r2
 8006424:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8006428:	bf08      	it	eq
 800642a:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800642e:	b140      	cbz	r0, 8006442 <_platform_observer_node_exec_cb+0x42>
 8006430:	2801      	cmp	r0, #1
 8006432:	d03c      	beq.n	80064ae <_platform_observer_node_exec_cb+0xae>
 8006434:	2802      	cmp	r0, #2
 8006436:	d01e      	beq.n	8006476 <_platform_observer_node_exec_cb+0x76>
 8006438:	2803      	cmp	r0, #3
 800643a:	d03e      	beq.n	80064ba <_platform_observer_node_exec_cb+0xba>
 800643c:	2000      	movs	r0, #0
 800643e:	b004      	add	sp, #16
 8006440:	bd70      	pop	{r4, r5, r6, pc}
 8006442:	68a1      	ldr	r1, [r4, #8]
 8006444:	07c9      	lsls	r1, r1, #31
 8006446:	d404      	bmi.n	8006452 <_platform_observer_node_exec_cb+0x52>
 8006448:	3201      	adds	r2, #1
 800644a:	2000      	movs	r0, #0
 800644c:	81a2      	strh	r2, [r4, #12]
 800644e:	b004      	add	sp, #16
 8006450:	bd70      	pop	{r4, r5, r6, pc}
 8006452:	f043 0101 	orr.w	r1, r3, #1
 8006456:	8873      	ldrh	r3, [r6, #2]
 8006458:	f8ad 2000 	strh.w	r2, [sp]
 800645c:	466a      	mov	r2, sp
 800645e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006462:	8833      	ldrh	r3, [r6, #0]
 8006464:	9002      	str	r0, [sp, #8]
 8006466:	f8ad 3002 	strh.w	r3, [sp, #2]
 800646a:	69b3      	ldr	r3, [r6, #24]
 800646c:	6860      	ldr	r0, [r4, #4]
 800646e:	9303      	str	r3, [sp, #12]
 8006470:	47a8      	blx	r5
 8006472:	89a2      	ldrh	r2, [r4, #12]
 8006474:	e7e8      	b.n	8006448 <_platform_observer_node_exec_cb+0x48>
 8006476:	6121      	str	r1, [r4, #16]
 8006478:	68a1      	ldr	r1, [r4, #8]
 800647a:	0788      	lsls	r0, r1, #30
 800647c:	d5de      	bpl.n	800643c <_platform_observer_node_exec_cb+0x3c>
 800647e:	f043 0102 	orr.w	r1, r3, #2
 8006482:	8873      	ldrh	r3, [r6, #2]
 8006484:	6860      	ldr	r0, [r4, #4]
 8006486:	2400      	movs	r4, #0
 8006488:	f8ad 2000 	strh.w	r2, [sp]
 800648c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006490:	8832      	ldrh	r2, [r6, #0]
 8006492:	69b3      	ldr	r3, [r6, #24]
 8006494:	f8ad 2002 	strh.w	r2, [sp, #2]
 8006498:	466a      	mov	r2, sp
 800649a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800649e:	47a8      	blx	r5
 80064a0:	4620      	mov	r0, r4
 80064a2:	e7d4      	b.n	800644e <_platform_observer_node_exec_cb+0x4e>
 80064a4:	2001      	movs	r0, #1
 80064a6:	4770      	bx	lr
 80064a8:	2001      	movs	r0, #1
 80064aa:	b004      	add	sp, #16
 80064ac:	bd70      	pop	{r4, r5, r6, pc}
 80064ae:	2300      	movs	r3, #0
 80064b0:	6121      	str	r1, [r4, #16]
 80064b2:	4618      	mov	r0, r3
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	b004      	add	sp, #16
 80064b8:	bd70      	pop	{r4, r5, r6, pc}
 80064ba:	68a1      	ldr	r1, [r4, #8]
 80064bc:	0749      	lsls	r1, r1, #29
 80064be:	d5c3      	bpl.n	8006448 <_platform_observer_node_exec_cb+0x48>
 80064c0:	6920      	ldr	r0, [r4, #16]
 80064c2:	f043 0104 	orr.w	r1, r3, #4
 80064c6:	f8ad 2000 	strh.w	r2, [sp]
 80064ca:	2200      	movs	r2, #0
 80064cc:	8843      	ldrh	r3, [r0, #2]
 80064ce:	f8ad 3004 	strh.w	r3, [sp, #4]
 80064d2:	8803      	ldrh	r3, [r0, #0]
 80064d4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80064d8:	6983      	ldr	r3, [r0, #24]
 80064da:	9202      	str	r2, [sp, #8]
 80064dc:	466a      	mov	r2, sp
 80064de:	6860      	ldr	r0, [r4, #4]
 80064e0:	9303      	str	r3, [sp, #12]
 80064e2:	47a8      	blx	r5
 80064e4:	89a2      	ldrh	r2, [r4, #12]
 80064e6:	e7af      	b.n	8006448 <_platform_observer_node_exec_cb+0x48>

080064e8 <ai_platform_get_weights_map>:
 80064e8:	2900      	cmp	r1, #0
 80064ea:	bf18      	it	ne
 80064ec:	2800      	cmpne	r0, #0
 80064ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f0:	bf0c      	ite	eq
 80064f2:	2401      	moveq	r4, #1
 80064f4:	2400      	movne	r4, #0
 80064f6:	2a00      	cmp	r2, #0
 80064f8:	bf08      	it	eq
 80064fa:	f044 0401 	orreq.w	r4, r4, #1
 80064fe:	b114      	cbz	r4, 8006506 <ai_platform_get_weights_map+0x1e>
 8006500:	2400      	movs	r4, #0
 8006502:	4620      	mov	r0, r4
 8006504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006506:	4616      	mov	r6, r2
 8006508:	4b22      	ldr	r3, [pc, #136]	; (8006594 <ai_platform_get_weights_map+0xac>)
 800650a:	6812      	ldr	r2, [r2, #0]
 800650c:	4605      	mov	r5, r0
 800650e:	460f      	mov	r7, r1
 8006510:	429a      	cmp	r2, r3
 8006512:	d022      	beq.n	800655a <ai_platform_get_weights_map+0x72>
 8006514:	6870      	ldr	r0, [r6, #4]
 8006516:	2800      	cmp	r0, #0
 8006518:	d0f2      	beq.n	8006500 <ai_platform_get_weights_map+0x18>
 800651a:	6806      	ldr	r6, [r0, #0]
 800651c:	429e      	cmp	r6, r3
 800651e:	d006      	beq.n	800652e <ai_platform_get_weights_map+0x46>
 8006520:	f1a1 0401 	sub.w	r4, r1, #1
 8006524:	6028      	str	r0, [r5, #0]
 8006526:	fab4 f484 	clz	r4, r4
 800652a:	0964      	lsrs	r4, r4, #5
 800652c:	e7e9      	b.n	8006502 <ai_platform_get_weights_map+0x1a>
 800652e:	3d04      	subs	r5, #4
 8006530:	4602      	mov	r2, r0
 8006532:	4621      	mov	r1, r4
 8006534:	e000      	b.n	8006538 <ai_platform_get_weights_map+0x50>
 8006536:	4619      	mov	r1, r3
 8006538:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800653c:	42b3      	cmp	r3, r6
 800653e:	d025      	beq.n	800658c <ai_platform_get_weights_map+0xa4>
 8006540:	f845 3f04 	str.w	r3, [r5, #4]!
 8006544:	1c4b      	adds	r3, r1, #1
 8006546:	429f      	cmp	r7, r3
 8006548:	d8f5      	bhi.n	8006536 <ai_platform_get_weights_map+0x4e>
 800654a:	d1da      	bne.n	8006502 <ai_platform_get_weights_map+0x1a>
 800654c:	3102      	adds	r1, #2
 800654e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8006552:	42b3      	cmp	r3, r6
 8006554:	d1d5      	bne.n	8006502 <ai_platform_get_weights_map+0x1a>
 8006556:	2401      	movs	r4, #1
 8006558:	e7d3      	b.n	8006502 <ai_platform_get_weights_map+0x1a>
 800655a:	1d30      	adds	r0, r6, #4
 800655c:	f7ff ff36 	bl	80063cc <ai_buffer_array_sane>
 8006560:	2800      	cmp	r0, #0
 8006562:	d0cd      	beq.n	8006500 <ai_platform_get_weights_map+0x18>
 8006564:	88f3      	ldrh	r3, [r6, #6]
 8006566:	429f      	cmp	r7, r3
 8006568:	d1ca      	bne.n	8006500 <ai_platform_get_weights_map+0x18>
 800656a:	3d04      	subs	r5, #4
 800656c:	4622      	mov	r2, r4
 800656e:	68b3      	ldr	r3, [r6, #8]
 8006570:	4423      	add	r3, r4
 8006572:	341c      	adds	r4, #28
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	b123      	cbz	r3, 8006582 <ai_platform_get_weights_map+0x9a>
 8006578:	3201      	adds	r2, #1
 800657a:	f845 3f04 	str.w	r3, [r5, #4]!
 800657e:	4297      	cmp	r7, r2
 8006580:	d8f5      	bhi.n	800656e <ai_platform_get_weights_map+0x86>
 8006582:	1abc      	subs	r4, r7, r2
 8006584:	fab4 f484 	clz	r4, r4
 8006588:	0964      	lsrs	r4, r4, #5
 800658a:	e7ba      	b.n	8006502 <ai_platform_get_weights_map+0x1a>
 800658c:	428f      	cmp	r7, r1
 800658e:	d1b8      	bne.n	8006502 <ai_platform_get_weights_map+0x1a>
 8006590:	e7e1      	b.n	8006556 <ai_platform_get_weights_map+0x6e>
 8006592:	bf00      	nop
 8006594:	a1facade 	.word	0xa1facade

08006598 <ai_platform_get_activations_map>:
 8006598:	2900      	cmp	r1, #0
 800659a:	bf18      	it	ne
 800659c:	2800      	cmpne	r0, #0
 800659e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a0:	bf0c      	ite	eq
 80065a2:	2401      	moveq	r4, #1
 80065a4:	2400      	movne	r4, #0
 80065a6:	2a00      	cmp	r2, #0
 80065a8:	bf08      	it	eq
 80065aa:	f044 0401 	orreq.w	r4, r4, #1
 80065ae:	b114      	cbz	r4, 80065b6 <ai_platform_get_activations_map+0x1e>
 80065b0:	2400      	movs	r4, #0
 80065b2:	4620      	mov	r0, r4
 80065b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065b6:	4616      	mov	r6, r2
 80065b8:	4b22      	ldr	r3, [pc, #136]	; (8006644 <ai_platform_get_activations_map+0xac>)
 80065ba:	6812      	ldr	r2, [r2, #0]
 80065bc:	4605      	mov	r5, r0
 80065be:	460f      	mov	r7, r1
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d022      	beq.n	800660a <ai_platform_get_activations_map+0x72>
 80065c4:	6a30      	ldr	r0, [r6, #32]
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d0f2      	beq.n	80065b0 <ai_platform_get_activations_map+0x18>
 80065ca:	6806      	ldr	r6, [r0, #0]
 80065cc:	429e      	cmp	r6, r3
 80065ce:	d006      	beq.n	80065de <ai_platform_get_activations_map+0x46>
 80065d0:	f1a1 0401 	sub.w	r4, r1, #1
 80065d4:	6028      	str	r0, [r5, #0]
 80065d6:	fab4 f484 	clz	r4, r4
 80065da:	0964      	lsrs	r4, r4, #5
 80065dc:	e7e9      	b.n	80065b2 <ai_platform_get_activations_map+0x1a>
 80065de:	3d04      	subs	r5, #4
 80065e0:	4602      	mov	r2, r0
 80065e2:	4621      	mov	r1, r4
 80065e4:	e000      	b.n	80065e8 <ai_platform_get_activations_map+0x50>
 80065e6:	4619      	mov	r1, r3
 80065e8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80065ec:	42b3      	cmp	r3, r6
 80065ee:	d026      	beq.n	800663e <ai_platform_get_activations_map+0xa6>
 80065f0:	f845 3f04 	str.w	r3, [r5, #4]!
 80065f4:	1c4b      	adds	r3, r1, #1
 80065f6:	429f      	cmp	r7, r3
 80065f8:	d8f5      	bhi.n	80065e6 <ai_platform_get_activations_map+0x4e>
 80065fa:	d1da      	bne.n	80065b2 <ai_platform_get_activations_map+0x1a>
 80065fc:	3102      	adds	r1, #2
 80065fe:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8006602:	42b3      	cmp	r3, r6
 8006604:	d1d5      	bne.n	80065b2 <ai_platform_get_activations_map+0x1a>
 8006606:	2401      	movs	r4, #1
 8006608:	e7d3      	b.n	80065b2 <ai_platform_get_activations_map+0x1a>
 800660a:	f106 000c 	add.w	r0, r6, #12
 800660e:	f7ff fedd 	bl	80063cc <ai_buffer_array_sane>
 8006612:	2800      	cmp	r0, #0
 8006614:	d0cc      	beq.n	80065b0 <ai_platform_get_activations_map+0x18>
 8006616:	89f3      	ldrh	r3, [r6, #14]
 8006618:	429f      	cmp	r7, r3
 800661a:	d1c9      	bne.n	80065b0 <ai_platform_get_activations_map+0x18>
 800661c:	3d04      	subs	r5, #4
 800661e:	4622      	mov	r2, r4
 8006620:	6933      	ldr	r3, [r6, #16]
 8006622:	4423      	add	r3, r4
 8006624:	341c      	adds	r4, #28
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	b123      	cbz	r3, 8006634 <ai_platform_get_activations_map+0x9c>
 800662a:	3201      	adds	r2, #1
 800662c:	f845 3f04 	str.w	r3, [r5, #4]!
 8006630:	4297      	cmp	r7, r2
 8006632:	d8f5      	bhi.n	8006620 <ai_platform_get_activations_map+0x88>
 8006634:	1abc      	subs	r4, r7, r2
 8006636:	fab4 f484 	clz	r4, r4
 800663a:	0964      	lsrs	r4, r4, #5
 800663c:	e7b9      	b.n	80065b2 <ai_platform_get_activations_map+0x1a>
 800663e:	428f      	cmp	r7, r1
 8006640:	d1b7      	bne.n	80065b2 <ai_platform_get_activations_map+0x1a>
 8006642:	e7e0      	b.n	8006606 <ai_platform_get_activations_map+0x6e>
 8006644:	a1facade 	.word	0xa1facade

08006648 <ai_platform_bind_network_params>:
 8006648:	2a00      	cmp	r2, #0
 800664a:	bf18      	it	ne
 800664c:	2900      	cmpne	r1, #0
 800664e:	d010      	beq.n	8006672 <ai_platform_bind_network_params+0x2a>
 8006650:	b178      	cbz	r0, 8006672 <ai_platform_bind_network_params+0x2a>
 8006652:	4603      	mov	r3, r0
 8006654:	4808      	ldr	r0, [pc, #32]	; (8006678 <ai_platform_bind_network_params+0x30>)
 8006656:	f103 0c0c 	add.w	ip, r3, #12
 800665a:	f843 0b04 	str.w	r0, [r3], #4
 800665e:	c903      	ldmia	r1, {r0, r1}
 8006660:	e883 0003 	stmia.w	r3, {r0, r1}
 8006664:	2301      	movs	r3, #1
 8006666:	e892 0003 	ldmia.w	r2, {r0, r1}
 800666a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800666e:	4618      	mov	r0, r3
 8006670:	4770      	bx	lr
 8006672:	2300      	movs	r3, #0
 8006674:	4618      	mov	r0, r3
 8006676:	4770      	bx	lr
 8006678:	a1facade 	.word	0xa1facade

0800667c <ai_platform_runtime_get_revision>:
 800667c:	4800      	ldr	r0, [pc, #0]	; (8006680 <ai_platform_runtime_get_revision+0x4>)
 800667e:	4770      	bx	lr
 8006680:	0801dbfc 	.word	0x0801dbfc

08006684 <ai_platform_runtime_get_version>:
 8006684:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <ai_platform_runtime_get_version+0x2c>)
 8006686:	2000      	movs	r0, #0
 8006688:	b082      	sub	sp, #8
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	fa5f fc83 	uxtb.w	ip, r3
 8006690:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8006694:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006698:	0e1b      	lsrs	r3, r3, #24
 800669a:	f36c 0007 	bfi	r0, ip, #0, #8
 800669e:	f361 200f 	bfi	r0, r1, #8, #8
 80066a2:	f362 4017 	bfi	r0, r2, #16, #8
 80066a6:	f363 601f 	bfi	r0, r3, #24, #8
 80066aa:	b002      	add	sp, #8
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	0801dc00 	.word	0x0801dc00

080066b4 <ai_platform_api_get_version>:
 80066b4:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <ai_platform_api_get_version+0x2c>)
 80066b6:	2000      	movs	r0, #0
 80066b8:	b082      	sub	sp, #8
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	fa5f fc83 	uxtb.w	ip, r3
 80066c0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80066c4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80066c8:	0e1b      	lsrs	r3, r3, #24
 80066ca:	f36c 0007 	bfi	r0, ip, #0, #8
 80066ce:	f361 200f 	bfi	r0, r1, #8, #8
 80066d2:	f362 4017 	bfi	r0, r2, #16, #8
 80066d6:	f363 601f 	bfi	r0, r3, #24, #8
 80066da:	b002      	add	sp, #8
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	0801dc04 	.word	0x0801dc04

080066e4 <ai_platform_interface_api_get_version>:
 80066e4:	4b0a      	ldr	r3, [pc, #40]	; (8006710 <ai_platform_interface_api_get_version+0x2c>)
 80066e6:	2000      	movs	r0, #0
 80066e8:	b082      	sub	sp, #8
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	fa5f fc83 	uxtb.w	ip, r3
 80066f0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80066f4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80066f8:	0e1b      	lsrs	r3, r3, #24
 80066fa:	f36c 0007 	bfi	r0, ip, #0, #8
 80066fe:	f361 200f 	bfi	r0, r1, #8, #8
 8006702:	f362 4017 	bfi	r0, r2, #16, #8
 8006706:	f363 601f 	bfi	r0, r3, #24, #8
 800670a:	b002      	add	sp, #8
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	0801dc08 	.word	0x0801dc08

08006714 <ai_platform_context_acquire>:
 8006714:	6802      	ldr	r2, [r0, #0]
 8006716:	4b02      	ldr	r3, [pc, #8]	; (8006720 <ai_platform_context_acquire+0xc>)
 8006718:	4393      	bics	r3, r2
 800671a:	bf18      	it	ne
 800671c:	2000      	movne	r0, #0
 800671e:	4770      	bx	lr
 8006720:	a1c00100 	.word	0xa1c00100

08006724 <ai_platform_network_get_error>:
 8006724:	4b04      	ldr	r3, [pc, #16]	; (8006738 <ai_platform_network_get_error+0x14>)
 8006726:	6802      	ldr	r2, [r0, #0]
 8006728:	4393      	bics	r3, r2
 800672a:	d102      	bne.n	8006732 <ai_platform_network_get_error+0xe>
 800672c:	300c      	adds	r0, #12
 800672e:	f000 bdb1 	b.w	8007294 <core_get_error>
 8006732:	f241 0010 	movw	r0, #4112	; 0x1010
 8006736:	4770      	bx	lr
 8006738:	a1c00100 	.word	0xa1c00100

0800673c <ai_platform_network_set_error>:
 800673c:	b110      	cbz	r0, 8006744 <ai_platform_network_set_error+0x8>
 800673e:	300c      	adds	r0, #12
 8006740:	f000 bdae 	b.w	80072a0 <core_set_error>
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop

08006748 <ai_platform_api_get_network_report>:
 8006748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	4ba3      	ldr	r3, [pc, #652]	; (80069dc <ai_platform_api_get_network_report+0x294>)
 800674e:	b089      	sub	sp, #36	; 0x24
 8006750:	6802      	ldr	r2, [r0, #0]
 8006752:	9002      	str	r0, [sp, #8]
 8006754:	4393      	bics	r3, r2
 8006756:	d177      	bne.n	8006848 <ai_platform_api_get_network_report+0x100>
 8006758:	4688      	mov	r8, r1
 800675a:	2900      	cmp	r1, #0
 800675c:	d074      	beq.n	8006848 <ai_platform_api_get_network_report+0x100>
 800675e:	2400      	movs	r4, #0
 8006760:	67cc      	str	r4, [r1, #124]	; 0x7c
 8006762:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006764:	b14b      	cbz	r3, 800677a <ai_platform_api_get_network_report+0x32>
 8006766:	3401      	adds	r4, #1
 8006768:	f8c8 407c 	str.w	r4, [r8, #124]	; 0x7c
 800676c:	691a      	ldr	r2, [r3, #16]
 800676e:	b122      	cbz	r2, 800677a <ai_platform_api_get_network_report+0x32>
 8006770:	429a      	cmp	r2, r3
 8006772:	d002      	beq.n	800677a <ai_platform_api_get_network_report+0x32>
 8006774:	4613      	mov	r3, r2
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f5      	bne.n	8006766 <ai_platform_api_get_network_report+0x1e>
 800677a:	2c00      	cmp	r4, #0
 800677c:	f000 8161 	beq.w	8006a42 <ai_platform_api_get_network_report+0x2fa>
 8006780:	9a02      	ldr	r2, [sp, #8]
 8006782:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8006784:	2b00      	cmp	r3, #0
 8006786:	d050      	beq.n	800682a <ai_platform_api_get_network_report+0xe2>
 8006788:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 800678c:	f1ba 0f00 	cmp.w	sl, #0
 8006790:	d04b      	beq.n	800682a <ai_platform_api_get_network_report+0xe2>
 8006792:	f04f 0b00 	mov.w	fp, #0
 8006796:	f8cd 800c 	str.w	r8, [sp, #12]
 800679a:	465d      	mov	r5, fp
 800679c:	e015      	b.n	80067ca <ai_platform_api_get_network_report+0x82>
 800679e:	00ea      	lsls	r2, r5, #3
 80067a0:	2101      	movs	r1, #1
 80067a2:	50b9      	str	r1, [r7, r2]
 80067a4:	69b2      	ldr	r2, [r6, #24]
 80067a6:	6856      	ldr	r6, [r2, #4]
 80067a8:	f04f 0201 	mov.w	r2, #1
 80067ac:	60a3      	str	r3, [r4, #8]
 80067ae:	3501      	adds	r5, #1
 80067b0:	7522      	strb	r2, [r4, #20]
 80067b2:	f10b 0b1c 	add.w	fp, fp, #28
 80067b6:	6963      	ldr	r3, [r4, #20]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f368 231f 	bfi	r3, r8, #8, #24
 80067be:	e9c4 0c00 	strd	r0, ip, [r4]
 80067c2:	e9c4 2603 	strd	r2, r6, [r4, #12]
 80067c6:	e9c4 3905 	strd	r3, r9, [r4, #20]
 80067ca:	f8ba 3000 	ldrh.w	r3, [sl]
 80067ce:	b2aa      	uxth	r2, r5
 80067d0:	429d      	cmp	r5, r3
 80067d2:	d23e      	bcs.n	8006852 <ai_platform_api_get_network_report+0x10a>
 80067d4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d03a      	beq.n	8006852 <ai_platform_api_get_network_report+0x10a>
 80067dc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80067e0:	2e00      	cmp	r6, #0
 80067e2:	d036      	beq.n	8006852 <ai_platform_api_get_network_report+0x10a>
 80067e4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80067e8:	00ea      	lsls	r2, r5, #3
 80067ea:	f8d6 900c 	ldr.w	r9, [r6, #12]
 80067ee:	9201      	str	r2, [sp, #4]
 80067f0:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80067f4:	69b3      	ldr	r3, [r6, #24]
 80067f6:	445c      	add	r4, fp
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	68b3      	ldr	r3, [r6, #8]
 80067fc:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8006800:	f006 f916 	bl	800ca30 <ai_array_to_buffer_fmt>
 8006804:	69b2      	ldr	r2, [r6, #24]
 8006806:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800680a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0c9      	beq.n	80067a6 <ai_platform_api_get_network_report+0x5e>
 8006812:	2200      	movs	r2, #0
 8006814:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 8006818:	6832      	ldr	r2, [r6, #0]
 800681a:	605a      	str	r2, [r3, #4]
 800681c:	b112      	cbz	r2, 8006824 <ai_platform_api_get_network_report+0xdc>
 800681e:	8852      	ldrh	r2, [r2, #2]
 8006820:	2a00      	cmp	r2, #0
 8006822:	d1bc      	bne.n	800679e <ai_platform_api_get_network_report+0x56>
 8006824:	69b2      	ldr	r2, [r6, #24]
 8006826:	2300      	movs	r3, #0
 8006828:	e7bd      	b.n	80067a6 <ai_platform_api_get_network_report+0x5e>
 800682a:	2400      	movs	r4, #0
 800682c:	9802      	ldr	r0, [sp, #8]
 800682e:	2218      	movs	r2, #24
 8006830:	2112      	movs	r1, #18
 8006832:	300c      	adds	r0, #12
 8006834:	f8c8 403c 	str.w	r4, [r8, #60]	; 0x3c
 8006838:	f8a8 4038 	strh.w	r4, [r8, #56]	; 0x38
 800683c:	f000 fd30 	bl	80072a0 <core_set_error>
 8006840:	4620      	mov	r0, r4
 8006842:	b009      	add	sp, #36	; 0x24
 8006844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006848:	2400      	movs	r4, #0
 800684a:	4620      	mov	r0, r4
 800684c:	b009      	add	sp, #36	; 0x24
 800684e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006852:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006856:	2a00      	cmp	r2, #0
 8006858:	d0e7      	beq.n	800682a <ai_platform_api_get_network_report+0xe2>
 800685a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f8a8 2038 	strh.w	r2, [r8, #56]	; 0x38
 8006864:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
 8006868:	9b02      	ldr	r3, [sp, #8]
 800686a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800686c:	2b01      	cmp	r3, #1
 800686e:	f240 80a5 	bls.w	80069bc <ai_platform_api_get_network_report+0x274>
 8006872:	f04f 0a00 	mov.w	sl, #0
 8006876:	9b02      	ldr	r3, [sp, #8]
 8006878:	f8cd 800c 	str.w	r8, [sp, #12]
 800687c:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 8006880:	4655      	mov	r5, sl
 8006882:	e016      	b.n	80068b2 <ai_platform_api_get_network_report+0x16a>
 8006884:	00e9      	lsls	r1, r5, #3
 8006886:	2301      	movs	r3, #1
 8006888:	507b      	str	r3, [r7, r1]
 800688a:	69b1      	ldr	r1, [r6, #24]
 800688c:	f04f 0301 	mov.w	r3, #1
 8006890:	6849      	ldr	r1, [r1, #4]
 8006892:	3501      	adds	r5, #1
 8006894:	f10a 0a1c 	add.w	sl, sl, #28
 8006898:	7523      	strb	r3, [r4, #20]
 800689a:	2300      	movs	r3, #0
 800689c:	60a0      	str	r0, [r4, #8]
 800689e:	f8c4 b018 	str.w	fp, [r4, #24]
 80068a2:	e9c4 3103 	strd	r3, r1, [r4, #12]
 80068a6:	6961      	ldr	r1, [r4, #20]
 80068a8:	f368 211f 	bfi	r1, r8, #8, #24
 80068ac:	e9c4 c200 	strd	ip, r2, [r4]
 80068b0:	6161      	str	r1, [r4, #20]
 80068b2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80068b6:	b2aa      	uxth	r2, r5
 80068b8:	42ab      	cmp	r3, r5
 80068ba:	d928      	bls.n	800690e <ai_platform_api_get_network_report+0x1c6>
 80068bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068c0:	b32b      	cbz	r3, 800690e <ai_platform_api_get_network_report+0x1c6>
 80068c2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80068c6:	b316      	cbz	r6, 800690e <ai_platform_api_get_network_report+0x1c6>
 80068c8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80068cc:	00ea      	lsls	r2, r5, #3
 80068ce:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 80068d2:	9201      	str	r2, [sp, #4]
 80068d4:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80068d8:	69b3      	ldr	r3, [r6, #24]
 80068da:	4454      	add	r4, sl
 80068dc:	6818      	ldr	r0, [r3, #0]
 80068de:	68b3      	ldr	r3, [r6, #8]
 80068e0:	f3c3 2817 	ubfx	r8, r3, #8, #24
 80068e4:	f006 f8a4 	bl	800ca30 <ai_array_to_buffer_fmt>
 80068e8:	69b1      	ldr	r1, [r6, #24]
 80068ea:	4684      	mov	ip, r0
 80068ec:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80068f0:	688a      	ldr	r2, [r1, #8]
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d0ca      	beq.n	800688c <ai_platform_api_get_network_report+0x144>
 80068f6:	2100      	movs	r1, #0
 80068f8:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80068fc:	6831      	ldr	r1, [r6, #0]
 80068fe:	6041      	str	r1, [r0, #4]
 8006900:	b111      	cbz	r1, 8006908 <ai_platform_api_get_network_report+0x1c0>
 8006902:	8849      	ldrh	r1, [r1, #2]
 8006904:	2900      	cmp	r1, #0
 8006906:	d1bd      	bne.n	8006884 <ai_platform_api_get_network_report+0x13c>
 8006908:	69b1      	ldr	r1, [r6, #24]
 800690a:	2000      	movs	r0, #0
 800690c:	e7be      	b.n	800688c <ai_platform_api_get_network_report+0x144>
 800690e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006912:	2a00      	cmp	r2, #0
 8006914:	d052      	beq.n	80069bc <ai_platform_api_get_network_report+0x274>
 8006916:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800691a:	9902      	ldr	r1, [sp, #8]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f101 0628 	add.w	r6, r1, #40	; 0x28
 8006922:	f8a8 203a 	strh.w	r2, [r8, #58]	; 0x3a
 8006926:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 800692a:	4630      	mov	r0, r6
 800692c:	f7ff fd4e 	bl	80063cc <ai_buffer_array_sane>
 8006930:	4604      	mov	r4, r0
 8006932:	b940      	cbnz	r0, 8006946 <ai_platform_api_get_network_report+0x1fe>
 8006934:	4630      	mov	r0, r6
 8006936:	f7ff fd49 	bl	80063cc <ai_buffer_array_sane>
 800693a:	b120      	cbz	r0, 8006946 <ai_platform_api_get_network_report+0x1fe>
 800693c:	9b02      	ldr	r3, [sp, #8]
 800693e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006940:	2b00      	cmp	r3, #0
 8006942:	f040 8088 	bne.w	8006a56 <ai_platform_api_get_network_report+0x30e>
 8006946:	9d02      	ldr	r5, [sp, #8]
 8006948:	f105 0720 	add.w	r7, r5, #32
 800694c:	4638      	mov	r0, r7
 800694e:	f7ff fd3d 	bl	80063cc <ai_buffer_array_sane>
 8006952:	4604      	mov	r4, r0
 8006954:	b930      	cbnz	r0, 8006964 <ai_platform_api_get_network_report+0x21c>
 8006956:	4638      	mov	r0, r7
 8006958:	f7ff fd38 	bl	80063cc <ai_buffer_array_sane>
 800695c:	b110      	cbz	r0, 8006964 <ai_platform_api_get_network_report+0x21c>
 800695e:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8006960:	2b00      	cmp	r3, #0
 8006962:	d17f      	bne.n	8006a64 <ai_platform_api_get_network_report+0x31c>
 8006964:	9a02      	ldr	r2, [sp, #8]
 8006966:	f240 2401 	movw	r4, #513	; 0x201
 800696a:	6853      	ldr	r3, [r2, #4]
 800696c:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80
 8006970:	4b1b      	ldr	r3, [pc, #108]	; (80069e0 <ai_platform_api_get_network_report+0x298>)
 8006972:	f8c8 3010 	str.w	r3, [r8, #16]
 8006976:	f240 1309 	movw	r3, #265	; 0x109
 800697a:	f8c8 3014 	str.w	r3, [r8, #20]
 800697e:	f240 5301 	movw	r3, #1281	; 0x501
 8006982:	e9c8 4309 	strd	r4, r3, [r8, #36]	; 0x24
 8006986:	6890      	ldr	r0, [r2, #8]
 8006988:	f7ff fca8 	bl	80062dc <ai_platform_version_get>
 800698c:	4b15      	ldr	r3, [pc, #84]	; (80069e4 <ai_platform_api_get_network_report+0x29c>)
 800698e:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8006992:	f8c8 0020 	str.w	r0, [r8, #32]
 8006996:	429a      	cmp	r2, r3
 8006998:	d126      	bne.n	80069e8 <ai_platform_api_get_network_report+0x2a0>
 800699a:	f108 0250 	add.w	r2, r8, #80	; 0x50
 800699e:	f108 0348 	add.w	r3, r8, #72	; 0x48
 80069a2:	2401      	movs	r4, #1
 80069a4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80069a8:	e882 0003 	stmia.w	r2, {r0, r1}
 80069ac:	e897 0003 	ldmia.w	r7, {r0, r1}
 80069b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80069b4:	4620      	mov	r0, r4
 80069b6:	b009      	add	sp, #36	; 0x24
 80069b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069bc:	2400      	movs	r4, #0
 80069be:	9802      	ldr	r0, [sp, #8]
 80069c0:	2218      	movs	r2, #24
 80069c2:	2113      	movs	r1, #19
 80069c4:	f8c8 4040 	str.w	r4, [r8, #64]	; 0x40
 80069c8:	300c      	adds	r0, #12
 80069ca:	f8a8 403a 	strh.w	r4, [r8, #58]	; 0x3a
 80069ce:	f000 fc67 	bl	80072a0 <core_set_error>
 80069d2:	4620      	mov	r0, r4
 80069d4:	b009      	add	sp, #36	; 0x24
 80069d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069da:	bf00      	nop
 80069dc:	a1c00100 	.word	0xa1c00100
 80069e0:	0801dbfc 	.word	0x0801dbfc
 80069e4:	a1facade 	.word	0xa1facade
 80069e8:	2200      	movs	r2, #0
 80069ea:	4b3a      	ldr	r3, [pc, #232]	; (8006ad4 <ai_platform_api_get_network_report+0x38c>)
 80069ec:	f108 0a44 	add.w	sl, r8, #68	; 0x44
 80069f0:	f10d 0c10 	add.w	ip, sp, #16
 80069f4:	f108 0960 	add.w	r9, r8, #96	; 0x60
 80069f8:	4655      	mov	r5, sl
 80069fa:	f8c8 c05c 	str.w	ip, [r8, #92]	; 0x5c
 80069fe:	464c      	mov	r4, r9
 8006a00:	e9c8 2212 	strd	r2, r2, [r8, #72]	; 0x48
 8006a04:	e9c8 2214 	strd	r2, r2, [r8, #80]	; 0x50
 8006a08:	4a33      	ldr	r2, [pc, #204]	; (8006ad8 <ai_platform_api_get_network_report+0x390>)
 8006a0a:	f8c8 2044 	str.w	r2, [r8, #68]	; 0x44
 8006a0e:	f240 4201 	movw	r2, #1025	; 0x401
 8006a12:	f8c8 2058 	str.w	r2, [r8, #88]	; 0x58
 8006a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a18:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8006a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006a24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f7ff fccf 	bl	80063cc <ai_buffer_array_sane>
 8006a2e:	bb78      	cbnz	r0, 8006a90 <ai_platform_api_get_network_report+0x348>
 8006a30:	4638      	mov	r0, r7
 8006a32:	f7ff fccb 	bl	80063cc <ai_buffer_array_sane>
 8006a36:	b9e0      	cbnz	r0, 8006a72 <ai_platform_api_get_network_report+0x32a>
 8006a38:	2401      	movs	r4, #1
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	b009      	add	sp, #36	; 0x24
 8006a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a42:	9802      	ldr	r0, [sp, #8]
 8006a44:	2218      	movs	r2, #24
 8006a46:	2111      	movs	r1, #17
 8006a48:	300c      	adds	r0, #12
 8006a4a:	f000 fc29 	bl	80072a0 <core_set_error>
 8006a4e:	4620      	mov	r0, r4
 8006a50:	b009      	add	sp, #36	; 0x24
 8006a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a56:	9802      	ldr	r0, [sp, #8]
 8006a58:	2213      	movs	r2, #19
 8006a5a:	2111      	movs	r1, #17
 8006a5c:	300c      	adds	r0, #12
 8006a5e:	f000 fc1f 	bl	80072a0 <core_set_error>
 8006a62:	e6ed      	b.n	8006840 <ai_platform_api_get_network_report+0xf8>
 8006a64:	9802      	ldr	r0, [sp, #8]
 8006a66:	2212      	movs	r2, #18
 8006a68:	2111      	movs	r1, #17
 8006a6a:	300c      	adds	r0, #12
 8006a6c:	f000 fc18 	bl	80072a0 <core_set_error>
 8006a70:	e6e6      	b.n	8006840 <ai_platform_api_get_network_report+0xf8>
 8006a72:	4638      	mov	r0, r7
 8006a74:	f7ff fcaa 	bl	80063cc <ai_buffer_array_sane>
 8006a78:	b1c0      	cbz	r0, 8006aac <ai_platform_api_get_network_report+0x364>
 8006a7a:	9b02      	ldr	r3, [sp, #8]
 8006a7c:	46d0      	mov	r8, sl
 8006a7e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a82:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8006a86:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006a8a:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8006a8e:	e7d3      	b.n	8006a38 <ai_platform_api_get_network_report+0x2f0>
 8006a90:	4630      	mov	r0, r6
 8006a92:	f7ff fc9b 	bl	80063cc <ai_buffer_array_sane>
 8006a96:	b198      	cbz	r0, 8006ac0 <ai_platform_api_get_network_report+0x378>
 8006a98:	9b02      	ldr	r3, [sp, #8]
 8006a9a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a9e:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8006aa2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006aa6:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8006aaa:	e7c1      	b.n	8006a30 <ai_platform_api_get_network_report+0x2e8>
 8006aac:	4604      	mov	r4, r0
 8006aae:	46d0      	mov	r8, sl
 8006ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ab2:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8006ab6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006aba:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8006abe:	deff      	udf	#255	; 0xff
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ac4:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8006ac8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006acc:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8006ad0:	deff      	udf	#255	; 0xff
 8006ad2:	bf00      	nop
 8006ad4:	080115c0 	.word	0x080115c0
 8006ad8:	00040440 	.word	0x00040440

08006adc <ai_platform_network_create>:
 8006adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8006ae6:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8006aea:	b320      	cbz	r0, 8006b36 <ai_platform_network_create+0x5a>
 8006aec:	6002      	str	r2, [r0, #0]
 8006aee:	4616      	mov	r6, r2
 8006af0:	461f      	mov	r7, r3
 8006af2:	4604      	mov	r4, r0
 8006af4:	f000 fbcc 	bl	8007290 <core_init>
 8006af8:	b970      	cbnz	r0, 8006b18 <ai_platform_network_create+0x3c>
 8006afa:	2530      	movs	r5, #48	; 0x30
 8006afc:	2300      	movs	r3, #0
 8006afe:	6023      	str	r3, [r4, #0]
 8006b00:	2410      	movs	r4, #16
 8006b02:	464a      	mov	r2, r9
 8006b04:	4641      	mov	r1, r8
 8006b06:	4638      	mov	r0, r7
 8006b08:	f7ff fbe2 	bl	80062d0 <ai_version_get>
 8006b0c:	60b0      	str	r0, [r6, #8]
 8006b0e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8006b12:	b003      	add	sp, #12
 8006b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b18:	2200      	movs	r2, #0
 8006b1a:	4641      	mov	r1, r8
 8006b1c:	4638      	mov	r0, r7
 8006b1e:	f7ff fbd7 	bl	80062d0 <ai_version_get>
 8006b22:	4605      	mov	r5, r0
 8006b24:	2200      	movs	r2, #0
 8006b26:	2105      	movs	r1, #5
 8006b28:	2001      	movs	r0, #1
 8006b2a:	f7ff fbd1 	bl	80062d0 <ai_version_get>
 8006b2e:	4285      	cmp	r5, r0
 8006b30:	d008      	beq.n	8006b44 <ai_platform_network_create+0x68>
 8006b32:	2501      	movs	r5, #1
 8006b34:	e7e2      	b.n	8006afc <ai_platform_network_create+0x20>
 8006b36:	2510      	movs	r5, #16
 8006b38:	462c      	mov	r4, r5
 8006b3a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8006b3e:	b003      	add	sp, #12
 8006b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b44:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <ai_platform_network_create+0x80>)
 8006b46:	a801      	add	r0, sp, #4
 8006b48:	9301      	str	r3, [sp, #4]
 8006b4a:	f000 fbb5 	bl	80072b8 <ai_check_custom_types>
 8006b4e:	b110      	cbz	r0, 8006b56 <ai_platform_network_create+0x7a>
 8006b50:	2400      	movs	r4, #0
 8006b52:	4625      	mov	r5, r4
 8006b54:	e7d5      	b.n	8006b02 <ai_platform_network_create+0x26>
 8006b56:	2502      	movs	r5, #2
 8006b58:	e7d0      	b.n	8006afc <ai_platform_network_create+0x20>
 8006b5a:	bf00      	nop
 8006b5c:	84048403 	.word	0x84048403

08006b60 <ai_platform_network_destroy>:
 8006b60:	4a07      	ldr	r2, [pc, #28]	; (8006b80 <ai_platform_network_destroy+0x20>)
 8006b62:	b508      	push	{r3, lr}
 8006b64:	6801      	ldr	r1, [r0, #0]
 8006b66:	ea01 0c02 	and.w	ip, r1, r2
 8006b6a:	438a      	bics	r2, r1
 8006b6c:	d102      	bne.n	8006b74 <ai_platform_network_destroy+0x14>
 8006b6e:	4561      	cmp	r1, ip
 8006b70:	d001      	beq.n	8006b76 <ai_platform_network_destroy+0x16>
 8006b72:	2000      	movs	r0, #0
 8006b74:	bd08      	pop	{r3, pc}
 8006b76:	f000 fc31 	bl	80073dc <ai_layers_destroy_all>
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	bd08      	pop	{r3, pc}
 8006b7e:	bf00      	nop
 8006b80:	a1c00100 	.word	0xa1c00100

08006b84 <ai_platform_network_init>:
 8006b84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b88:	4a5c      	ldr	r2, [pc, #368]	; (8006cfc <ai_platform_network_init+0x178>)
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	6801      	ldr	r1, [r0, #0]
 8006b8e:	438a      	bics	r2, r1
 8006b90:	d133      	bne.n	8006bfa <ai_platform_network_init+0x76>
 8006b92:	4605      	mov	r5, r0
 8006b94:	2c00      	cmp	r4, #0
 8006b96:	f000 8093 	beq.w	8006cc0 <ai_platform_network_init+0x13c>
 8006b9a:	f8d4 b000 	ldr.w	fp, [r4]
 8006b9e:	4a58      	ldr	r2, [pc, #352]	; (8006d00 <ai_platform_network_init+0x17c>)
 8006ba0:	4593      	cmp	fp, r2
 8006ba2:	d10f      	bne.n	8006bc4 <ai_platform_network_init+0x40>
 8006ba4:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 8006ba8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8006bac:	4b53      	ldr	r3, [pc, #332]	; (8006cfc <ai_platform_network_init+0x178>)
 8006bae:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 8006bb2:	0c32      	lsrs	r2, r6, #16
 8006bb4:	4299      	cmp	r1, r3
 8006bb6:	d02c      	beq.n	8006c12 <ai_platform_network_init+0x8e>
 8006bb8:	2303      	movs	r3, #3
 8006bba:	462c      	mov	r4, r5
 8006bbc:	612b      	str	r3, [r5, #16]
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc4:	4627      	mov	r7, r4
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	6864      	ldr	r4, [r4, #4]
 8006bca:	4638      	mov	r0, r7
 8006bcc:	f107 081c 	add.w	r8, r7, #28
 8006bd0:	f7ff fbc0 	bl	8006354 <ai_buffer_get_size>
 8006bd4:	4606      	mov	r6, r0
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	4640      	mov	r0, r8
 8006bda:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8006bde:	f7ff fbb9 	bl	8006354 <ai_buffer_get_size>
 8006be2:	b976      	cbnz	r6, 8006c02 <ai_platform_network_init+0x7e>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d150      	bne.n	8006c8a <ai_platform_network_init+0x106>
 8006be8:	4680      	mov	r8, r0
 8006bea:	4686      	mov	lr, r0
 8006bec:	4606      	mov	r6, r0
 8006bee:	4607      	mov	r7, r0
 8006bf0:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8006bf4:	6829      	ldr	r1, [r5, #0]
 8006bf6:	0436      	lsls	r6, r6, #16
 8006bf8:	e7d8      	b.n	8006bac <ai_platform_network_init+0x28>
 8006bfa:	2400      	movs	r4, #0
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d13b      	bne.n	8006c7e <ai_platform_network_init+0xfa>
 8006c06:	4680      	mov	r8, r0
 8006c08:	4686      	mov	lr, r0
 8006c0a:	2c00      	cmp	r4, #0
 8006c0c:	d05e      	beq.n	8006ccc <ai_platform_network_init+0x148>
 8006c0e:	2601      	movs	r6, #1
 8006c10:	e7ee      	b.n	8006bf0 <ai_platform_network_init+0x6c>
 8006c12:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8006c14:	4293      	cmp	r3, r2
 8006c16:	4b3a      	ldr	r3, [pc, #232]	; (8006d00 <ai_platform_network_init+0x17c>)
 8006c18:	d33e      	bcc.n	8006c98 <ai_platform_network_init+0x114>
 8006c1a:	459b      	cmp	fp, r3
 8006c1c:	d03e      	beq.n	8006c9c <ai_platform_network_init+0x118>
 8006c1e:	b1a2      	cbz	r2, 8006c4a <ai_platform_network_init+0xc6>
 8006c20:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8006c24:	f04f 0c00 	mov.w	ip, #0
 8006c28:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8006c2c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8006c2e:	eb07 0b0c 	add.w	fp, r7, ip
 8006c32:	4464      	add	r4, ip
 8006c34:	f10c 0c1c 	add.w	ip, ip, #28
 8006c38:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8006c3c:	45cc      	cmp	ip, r9
 8006c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c40:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8006c44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c48:	d1f0      	bne.n	8006c2c <ai_platform_network_init+0xa8>
 8006c4a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8006c4c:	622e      	str	r6, [r5, #32]
 8006c4e:	4553      	cmp	r3, sl
 8006c50:	d34b      	bcc.n	8006cea <ai_platform_network_init+0x166>
 8006c52:	f1ba 0f00 	cmp.w	sl, #0
 8006c56:	d025      	beq.n	8006ca4 <ai_platform_network_init+0x120>
 8006c58:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8006c5c:	2700      	movs	r7, #0
 8006c5e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8006c62:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8006c64:	eb08 0607 	add.w	r6, r8, r7
 8006c68:	443c      	add	r4, r7
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006c6e:	4557      	cmp	r7, sl
 8006c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c72:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006c76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c7a:	d1f2      	bne.n	8006c62 <ai_platform_network_init+0xde>
 8006c7c:	e012      	b.n	8006ca4 <ai_platform_network_init+0x120>
 8006c7e:	f1b9 0f00 	cmp.w	r9, #0
 8006c82:	d015      	beq.n	8006cb0 <ai_platform_network_init+0x12c>
 8006c84:	f04f 0e01 	mov.w	lr, #1
 8006c88:	e7bf      	b.n	8006c0a <ai_platform_network_init+0x86>
 8006c8a:	f1b9 0f00 	cmp.w	r9, #0
 8006c8e:	d00f      	beq.n	8006cb0 <ai_platform_network_init+0x12c>
 8006c90:	f04f 0e01 	mov.w	lr, #1
 8006c94:	4637      	mov	r7, r6
 8006c96:	e7ab      	b.n	8006bf0 <ai_platform_network_init+0x6c>
 8006c98:	459b      	cmp	fp, r3
 8006c9a:	d11e      	bne.n	8006cda <ai_platform_network_init+0x156>
 8006c9c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8006ca0:	e9c5 6708 	strd	r6, r7, [r5, #32]
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f8c5 e028 	str.w	lr, [r5, #40]	; 0x28
 8006caa:	f000 fb2d 	bl	8007308 <ai_layers_init_all>
 8006cae:	e783      	b.n	8006bb8 <ai_platform_network_init+0x34>
 8006cb0:	2213      	movs	r2, #19
 8006cb2:	2110      	movs	r1, #16
 8006cb4:	f105 000c 	add.w	r0, r5, #12
 8006cb8:	2400      	movs	r4, #0
 8006cba:	f000 faf1 	bl	80072a0 <core_set_error>
 8006cbe:	e77e      	b.n	8006bbe <ai_platform_network_init+0x3a>
 8006cc0:	2211      	movs	r2, #17
 8006cc2:	2110      	movs	r1, #16
 8006cc4:	300c      	adds	r0, #12
 8006cc6:	f000 faeb 	bl	80072a0 <core_set_error>
 8006cca:	e778      	b.n	8006bbe <ai_platform_network_init+0x3a>
 8006ccc:	2212      	movs	r2, #18
 8006cce:	2110      	movs	r1, #16
 8006cd0:	f105 000c 	add.w	r0, r5, #12
 8006cd4:	f000 fae4 	bl	80072a0 <core_set_error>
 8006cd8:	e771      	b.n	8006bbe <ai_platform_network_init+0x3a>
 8006cda:	2212      	movs	r2, #18
 8006cdc:	2116      	movs	r1, #22
 8006cde:	f105 000c 	add.w	r0, r5, #12
 8006ce2:	2400      	movs	r4, #0
 8006ce4:	f000 fadc 	bl	80072a0 <core_set_error>
 8006ce8:	e769      	b.n	8006bbe <ai_platform_network_init+0x3a>
 8006cea:	2213      	movs	r2, #19
 8006cec:	2116      	movs	r1, #22
 8006cee:	f105 000c 	add.w	r0, r5, #12
 8006cf2:	2400      	movs	r4, #0
 8006cf4:	f000 fad4 	bl	80072a0 <core_set_error>
 8006cf8:	e761      	b.n	8006bbe <ai_platform_network_init+0x3a>
 8006cfa:	bf00      	nop
 8006cfc:	a1c00100 	.word	0xa1c00100
 8006d00:	a1facade 	.word	0xa1facade

08006d04 <ai_platform_network_post_init>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4b16      	ldr	r3, [pc, #88]	; (8006d60 <ai_platform_network_post_init+0x5c>)
 8006d08:	6802      	ldr	r2, [r0, #0]
 8006d0a:	ea02 0103 	and.w	r1, r2, r3
 8006d0e:	4393      	bics	r3, r2
 8006d10:	d108      	bne.n	8006d24 <ai_platform_network_post_init+0x20>
 8006d12:	6903      	ldr	r3, [r0, #16]
 8006d14:	4604      	mov	r4, r0
 8006d16:	f013 0502 	ands.w	r5, r3, #2
 8006d1a:	d005      	beq.n	8006d28 <ai_platform_network_post_init+0x24>
 8006d1c:	428a      	cmp	r2, r1
 8006d1e:	d00a      	beq.n	8006d36 <ai_platform_network_post_init+0x32>
 8006d20:	2001      	movs	r0, #1
 8006d22:	bd38      	pop	{r3, r4, r5, pc}
 8006d24:	2000      	movs	r0, #0
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	2210      	movs	r2, #16
 8006d2a:	2111      	movs	r1, #17
 8006d2c:	300c      	adds	r0, #12
 8006d2e:	f000 fab7 	bl	80072a0 <core_set_error>
 8006d32:	4628      	mov	r0, r5
 8006d34:	bd38      	pop	{r3, r4, r5, pc}
 8006d36:	f000 faf5 	bl	8007324 <ai_layers_post_init_all>
 8006d3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0ef      	beq.n	8006d20 <ai_platform_network_post_init+0x1c>
 8006d40:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006d42:	e008      	b.n	8006d56 <ai_platform_network_post_init+0x52>
 8006d44:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 8006d48:	4798      	blx	r3
 8006d4a:	692b      	ldr	r3, [r5, #16]
 8006d4c:	42ab      	cmp	r3, r5
 8006d4e:	461d      	mov	r5, r3
 8006d50:	d0e6      	beq.n	8006d20 <ai_platform_network_post_init+0x1c>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0e4      	beq.n	8006d20 <ai_platform_network_post_init+0x1c>
 8006d56:	4629      	mov	r1, r5
 8006d58:	2000      	movs	r0, #0
 8006d5a:	2d00      	cmp	r5, #0
 8006d5c:	d1f2      	bne.n	8006d44 <ai_platform_network_post_init+0x40>
 8006d5e:	e7df      	b.n	8006d20 <ai_platform_network_post_init+0x1c>
 8006d60:	a1c00100 	.word	0xa1c00100

08006d64 <ai_platform_network_process>:
 8006d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	4bb7      	ldr	r3, [pc, #732]	; (8007048 <ai_platform_network_process+0x2e4>)
 8006d6c:	9202      	str	r2, [sp, #8]
 8006d6e:	6802      	ldr	r2, [r0, #0]
 8006d70:	4393      	bics	r3, r2
 8006d72:	f040 8142 	bne.w	8006ffa <ai_platform_network_process+0x296>
 8006d76:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8006d78:	4605      	mov	r5, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 8126 	beq.w	8006fcc <ai_platform_network_process+0x268>
 8006d80:	6903      	ldr	r3, [r0, #16]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
 8006d88:	f003 0303 	and.w	r3, r3, #3
 8006d8c:	6182      	str	r2, [r0, #24]
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	f040 8122 	bne.w	8006fd8 <ai_platform_network_process+0x274>
 8006d94:	2900      	cmp	r1, #0
 8006d96:	f000 8136 	beq.w	8007006 <ai_platform_network_process+0x2a2>
 8006d9a:	fab8 f788 	clz	r7, r8
 8006d9e:	097f      	lsrs	r7, r7, #5
 8006da0:	f1b8 0f00 	cmp.w	r8, #0
 8006da4:	f000 812f 	beq.w	8007006 <ai_platform_network_process+0x2a2>
 8006da8:	f8b8 3000 	ldrh.w	r3, [r8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 812a 	beq.w	8007006 <ai_platform_network_process+0x2a2>
 8006db2:	698b      	ldr	r3, [r1, #24]
 8006db4:	460e      	mov	r6, r1
 8006db6:	9003      	str	r0, [sp, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	9301      	str	r3, [sp, #4]
 8006dbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d072      	beq.n	8006eaa <ai_platform_network_process+0x146>
 8006dc4:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006dc8:	2c00      	cmp	r4, #0
 8006dca:	d06e      	beq.n	8006eaa <ai_platform_network_process+0x146>
 8006dcc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dd0:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006dd4:	f8d3 a000 	ldr.w	sl, [r3]
 8006dd8:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8006ddc:	f000 8112 	beq.w	8007004 <ai_platform_network_process+0x2a0>
 8006de0:	69a3      	ldr	r3, [r4, #24]
 8006de2:	2101      	movs	r1, #1
 8006de4:	4630      	mov	r0, r6
 8006de6:	685d      	ldr	r5, [r3, #4]
 8006de8:	f7ff fab4 	bl	8006354 <ai_buffer_get_size>
 8006dec:	4285      	cmp	r5, r0
 8006dee:	f0c0 8115 	bcc.w	800701c <ai_platform_network_process+0x2b8>
 8006df2:	68e0      	ldr	r0, [r4, #12]
 8006df4:	69b1      	ldr	r1, [r6, #24]
 8006df6:	68c2      	ldr	r2, [r0, #12]
 8006df8:	68cb      	ldr	r3, [r1, #12]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	f040 810e 	bne.w	800701c <ai_platform_network_process+0x2b8>
 8006e00:	6882      	ldr	r2, [r0, #8]
 8006e02:	688b      	ldr	r3, [r1, #8]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	f040 8109 	bne.w	800701c <ai_platform_network_process+0x2b8>
 8006e0a:	6842      	ldr	r2, [r0, #4]
 8006e0c:	684b      	ldr	r3, [r1, #4]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	f040 8104 	bne.w	800701c <ai_platform_network_process+0x2b8>
 8006e14:	69a3      	ldr	r3, [r4, #24]
 8006e16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e1a:	f005 fea1 	bl	800cb60 <ai_array_get_data_byte_size>
 8006e1e:	4605      	mov	r5, r0
 8006e20:	4620      	mov	r0, r4
 8006e22:	f7ff fa81 	bl	8006328 <get_tensor_byte_size>
 8006e26:	4285      	cmp	r5, r0
 8006e28:	f0c0 80f8 	bcc.w	800701c <ai_platform_network_process+0x2b8>
 8006e2c:	69a3      	ldr	r3, [r4, #24]
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	f005 fdfe 	bl	800ca30 <ai_array_to_buffer_fmt>
 8006e34:	6833      	ldr	r3, [r6, #0]
 8006e36:	4058      	eors	r0, r3
 8006e38:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8006e3c:	f040 81a4 	bne.w	8007188 <ai_platform_network_process+0x424>
 8006e40:	6873      	ldr	r3, [r6, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 80de 	beq.w	8007004 <ai_platform_network_process+0x2a0>
 8006e48:	69b3      	ldr	r3, [r6, #24]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 81a4 	beq.w	800719a <ai_platform_network_process+0x436>
 8006e52:	9a01      	ldr	r2, [sp, #4]
 8006e54:	4620      	mov	r0, r4
 8006e56:	3701      	adds	r7, #1
 8006e58:	361c      	adds	r6, #28
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	bf38      	it	cc
 8006e5e:	461a      	movcc	r2, r3
 8006e60:	9201      	str	r2, [sp, #4]
 8006e62:	f7ff fa61 	bl	8006328 <get_tensor_byte_size>
 8006e66:	f8c9 0008 	str.w	r0, [r9, #8]
 8006e6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	fb00 f303 	mul.w	r3, r0, r3
 8006e74:	f8c9 300c 	str.w	r3, [r9, #12]
 8006e78:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8006e7c:	440b      	add	r3, r1
 8006e7e:	f8c9 1004 	str.w	r1, [r9, #4]
 8006e82:	f84a 300b 	str.w	r3, [sl, fp]
 8006e86:	69a0      	ldr	r0, [r4, #24]
 8006e88:	6803      	ldr	r3, [r0, #0]
 8006e8a:	009a      	lsls	r2, r3, #2
 8006e8c:	f100 80af 	bmi.w	8006fee <ai_platform_network_process+0x28a>
 8006e90:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006e94:	1a9b      	subs	r3, r3, r2
 8006e96:	4419      	add	r1, r3
 8006e98:	6081      	str	r1, [r0, #8]
 8006e9a:	69a3      	ldr	r3, [r4, #24]
 8006e9c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006ea0:	60da      	str	r2, [r3, #12]
 8006ea2:	f8b8 3000 	ldrh.w	r3, [r8]
 8006ea6:	42bb      	cmp	r3, r7
 8006ea8:	d888      	bhi.n	8006dbc <ai_platform_network_process+0x58>
 8006eaa:	9d03      	ldr	r5, [sp, #12]
 8006eac:	9b02      	ldr	r3, [sp, #8]
 8006eae:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 817b 	beq.w	80071ac <ai_platform_network_process+0x448>
 8006eb6:	2a01      	cmp	r2, #1
 8006eb8:	f240 80bd 	bls.w	8007036 <ai_platform_network_process+0x2d2>
 8006ebc:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
 8006ec0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 80b6 	beq.w	8007036 <ai_platform_network_process+0x2d2>
 8006eca:	2700      	movs	r7, #0
 8006ecc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006ed0:	9502      	str	r5, [sp, #8]
 8006ed2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f000 80bd 	beq.w	8007056 <ai_platform_network_process+0x2f2>
 8006edc:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8006ee0:	2e00      	cmp	r6, #0
 8006ee2:	f000 80b8 	beq.w	8007056 <ai_platform_network_process+0x2f2>
 8006ee6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006eea:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8006eee:	681c      	ldr	r4, [r3, #0]
 8006ef0:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 8006ef4:	f000 8170 	beq.w	80071d8 <ai_platform_network_process+0x474>
 8006ef8:	69b3      	ldr	r3, [r6, #24]
 8006efa:	2101      	movs	r1, #1
 8006efc:	4658      	mov	r0, fp
 8006efe:	685d      	ldr	r5, [r3, #4]
 8006f00:	f7ff fa28 	bl	8006354 <ai_buffer_get_size>
 8006f04:	4285      	cmp	r5, r0
 8006f06:	f0c0 8095 	bcc.w	8007034 <ai_platform_network_process+0x2d0>
 8006f0a:	68f0      	ldr	r0, [r6, #12]
 8006f0c:	f8db 1018 	ldr.w	r1, [fp, #24]
 8006f10:	68c2      	ldr	r2, [r0, #12]
 8006f12:	68cb      	ldr	r3, [r1, #12]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	f040 808d 	bne.w	8007034 <ai_platform_network_process+0x2d0>
 8006f1a:	6882      	ldr	r2, [r0, #8]
 8006f1c:	688b      	ldr	r3, [r1, #8]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	f040 8088 	bne.w	8007034 <ai_platform_network_process+0x2d0>
 8006f24:	6842      	ldr	r2, [r0, #4]
 8006f26:	684b      	ldr	r3, [r1, #4]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	f040 8083 	bne.w	8007034 <ai_platform_network_process+0x2d0>
 8006f2e:	69b3      	ldr	r3, [r6, #24]
 8006f30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f34:	f005 fe14 	bl	800cb60 <ai_array_get_data_byte_size>
 8006f38:	9003      	str	r0, [sp, #12]
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f7ff f9f4 	bl	8006328 <get_tensor_byte_size>
 8006f40:	9b03      	ldr	r3, [sp, #12]
 8006f42:	4283      	cmp	r3, r0
 8006f44:	d376      	bcc.n	8007034 <ai_platform_network_process+0x2d0>
 8006f46:	69b3      	ldr	r3, [r6, #24]
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	f005 fd71 	bl	800ca30 <ai_array_to_buffer_fmt>
 8006f4e:	f8db 3000 	ldr.w	r3, [fp]
 8006f52:	4058      	eors	r0, r3
 8006f54:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8006f58:	f040 812c 	bne.w	80071b4 <ai_platform_network_process+0x450>
 8006f5c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 8139 	beq.w	80071d8 <ai_platform_network_process+0x474>
 8006f66:	f8db 3018 	ldr.w	r3, [fp, #24]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 812a 	beq.w	80071c6 <ai_platform_network_process+0x462>
 8006f72:	9a01      	ldr	r2, [sp, #4]
 8006f74:	4630      	mov	r0, r6
 8006f76:	3701      	adds	r7, #1
 8006f78:	f10b 0b1c 	add.w	fp, fp, #28
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	bf38      	it	cc
 8006f80:	461a      	movcc	r2, r3
 8006f82:	9201      	str	r2, [sp, #4]
 8006f84:	f7ff f9d0 	bl	8006328 <get_tensor_byte_size>
 8006f88:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f8c:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	fb00 f303 	mul.w	r3, r0, r3
 8006f96:	f8c8 300c 	str.w	r3, [r8, #12]
 8006f9a:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 8006f9e:	440b      	add	r3, r1
 8006fa0:	f8c8 1004 	str.w	r1, [r8, #4]
 8006fa4:	f844 300a 	str.w	r3, [r4, sl]
 8006fa8:	69b0      	ldr	r0, [r6, #24]
 8006faa:	6803      	ldr	r3, [r0, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	d44d      	bmi.n	800704c <ai_platform_network_process+0x2e8>
 8006fb0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006fb4:	1a9b      	subs	r3, r3, r2
 8006fb6:	4419      	add	r1, r3
 8006fb8:	6081      	str	r1, [r0, #8]
 8006fba:	69b3      	ldr	r3, [r6, #24]
 8006fbc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006fc0:	60da      	str	r2, [r3, #12]
 8006fc2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006fc6:	42bb      	cmp	r3, r7
 8006fc8:	d883      	bhi.n	8006ed2 <ai_platform_network_process+0x16e>
 8006fca:	e044      	b.n	8007056 <ai_platform_network_process+0x2f2>
 8006fcc:	6902      	ldr	r2, [r0, #16]
 8006fce:	6183      	str	r3, [r0, #24]
 8006fd0:	f002 0203 	and.w	r2, r2, #3
 8006fd4:	2a03      	cmp	r2, #3
 8006fd6:	d016      	beq.n	8007006 <ai_platform_network_process+0x2a2>
 8006fd8:	2230      	movs	r2, #48	; 0x30
 8006fda:	2111      	movs	r1, #17
 8006fdc:	f105 000c 	add.w	r0, r5, #12
 8006fe0:	2400      	movs	r4, #0
 8006fe2:	f000 f95d 	bl	80072a0 <core_set_error>
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	b005      	add	sp, #20
 8006fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fee:	f8b8 3000 	ldrh.w	r3, [r8]
 8006ff2:	429f      	cmp	r7, r3
 8006ff4:	f4ff aee2 	bcc.w	8006dbc <ai_platform_network_process+0x58>
 8006ff8:	e757      	b.n	8006eaa <ai_platform_network_process+0x146>
 8006ffa:	2400      	movs	r4, #0
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	b005      	add	sp, #20
 8007000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007004:	9d03      	ldr	r5, [sp, #12]
 8007006:	2400      	movs	r4, #0
 8007008:	2217      	movs	r2, #23
 800700a:	2112      	movs	r1, #18
 800700c:	f105 000c 	add.w	r0, r5, #12
 8007010:	f000 f946 	bl	80072a0 <core_set_error>
 8007014:	4620      	mov	r0, r4
 8007016:	b005      	add	sp, #20
 8007018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800701c:	9d03      	ldr	r5, [sp, #12]
 800701e:	2400      	movs	r4, #0
 8007020:	2218      	movs	r2, #24
 8007022:	2112      	movs	r1, #18
 8007024:	f105 000c 	add.w	r0, r5, #12
 8007028:	f000 f93a 	bl	80072a0 <core_set_error>
 800702c:	4620      	mov	r0, r4
 800702e:	b005      	add	sp, #20
 8007030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007034:	9d02      	ldr	r5, [sp, #8]
 8007036:	2218      	movs	r2, #24
 8007038:	2113      	movs	r1, #19
 800703a:	f105 000c 	add.w	r0, r5, #12
 800703e:	2400      	movs	r4, #0
 8007040:	f000 f92e 	bl	80072a0 <core_set_error>
 8007044:	e7cf      	b.n	8006fe6 <ai_platform_network_process+0x282>
 8007046:	bf00      	nop
 8007048:	a1c00100 	.word	0xa1c00100
 800704c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007050:	429f      	cmp	r7, r3
 8007052:	f4ff af3e 	bcc.w	8006ed2 <ai_platform_network_process+0x16e>
 8007056:	9d02      	ldr	r5, [sp, #8]
 8007058:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800705c:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 800705e:	832b      	strh	r3, [r5, #24]
 8007060:	2a00      	cmp	r2, #0
 8007062:	f040 808b 	bne.w	800717c <ai_platform_network_process+0x418>
 8007066:	4616      	mov	r6, r2
 8007068:	4617      	mov	r7, r2
 800706a:	8b6c      	ldrh	r4, [r5, #26]
 800706c:	429c      	cmp	r4, r3
 800706e:	d2ba      	bcs.n	8006fe6 <ai_platform_network_process+0x282>
 8007070:	46ab      	mov	fp, r5
 8007072:	2e00      	cmp	r6, #0
 8007074:	d030      	beq.n	80070d8 <ai_platform_network_process+0x374>
 8007076:	f04f 0800 	mov.w	r8, #0
 800707a:	e014      	b.n	80070a6 <ai_platform_network_process+0x342>
 800707c:	6882      	ldr	r2, [r0, #8]
 800707e:	68c5      	ldr	r5, [r0, #12]
 8007080:	6863      	ldr	r3, [r4, #4]
 8007082:	1b52      	subs	r2, r2, r5
 8007084:	4413      	add	r3, r2
 8007086:	6083      	str	r3, [r0, #8]
 8007088:	698b      	ldr	r3, [r1, #24]
 800708a:	6862      	ldr	r2, [r4, #4]
 800708c:	60da      	str	r2, [r3, #12]
 800708e:	f859 200a 	ldr.w	r2, [r9, sl]
 8007092:	f108 0801 	add.w	r8, r8, #1
 8007096:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800709a:	440b      	add	r3, r1
 800709c:	4293      	cmp	r3, r2
 800709e:	d301      	bcc.n	80070a4 <ai_platform_network_process+0x340>
 80070a0:	68e3      	ldr	r3, [r4, #12]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	6063      	str	r3, [r4, #4]
 80070a6:	8833      	ldrh	r3, [r6, #0]
 80070a8:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80070ac:	4543      	cmp	r3, r8
 80070ae:	d913      	bls.n	80070d8 <ai_platform_network_process+0x374>
 80070b0:	6873      	ldr	r3, [r6, #4]
 80070b2:	b18b      	cbz	r3, 80070d8 <ai_platform_network_process+0x374>
 80070b4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80070b8:	b171      	cbz	r1, 80070d8 <ai_platform_network_process+0x374>
 80070ba:	6988      	ldr	r0, [r1, #24]
 80070bc:	68b2      	ldr	r2, [r6, #8]
 80070be:	6803      	ldr	r3, [r0, #0]
 80070c0:	f8d2 9000 	ldr.w	r9, [r2]
 80070c4:	009d      	lsls	r5, r3, #2
 80070c6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80070ca:	d5d7      	bpl.n	800707c <ai_platform_network_process+0x318>
 80070cc:	6881      	ldr	r1, [r0, #8]
 80070ce:	68a2      	ldr	r2, [r4, #8]
 80070d0:	6860      	ldr	r0, [r4, #4]
 80070d2:	f003 ffa7 	bl	800b024 <st_int8_copy>
 80070d6:	e7da      	b.n	800708e <ai_platform_network_process+0x32a>
 80070d8:	4658      	mov	r0, fp
 80070da:	f000 f937 	bl	800734c <ai_layers_forward_all>
 80070de:	2f00      	cmp	r7, #0
 80070e0:	d03d      	beq.n	800715e <ai_platform_network_process+0x3fa>
 80070e2:	2400      	movs	r4, #0
 80070e4:	e016      	b.n	8007114 <ai_platform_network_process+0x3b0>
 80070e6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80070ea:	f859 100a 	ldr.w	r1, [r9, sl]
 80070ee:	4413      	add	r3, r2
 80070f0:	428b      	cmp	r3, r1
 80070f2:	d302      	bcc.n	80070fa <ai_platform_network_process+0x396>
 80070f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80070f8:	1acb      	subs	r3, r1, r3
 80070fa:	f8c8 3004 	str.w	r3, [r8, #4]
 80070fe:	6981      	ldr	r1, [r0, #24]
 8007100:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007104:	1b52      	subs	r2, r2, r5
 8007106:	4413      	add	r3, r2
 8007108:	608b      	str	r3, [r1, #8]
 800710a:	6983      	ldr	r3, [r0, #24]
 800710c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007110:	60da      	str	r2, [r3, #12]
 8007112:	3401      	adds	r4, #1
 8007114:	883b      	ldrh	r3, [r7, #0]
 8007116:	42a3      	cmp	r3, r4
 8007118:	d921      	bls.n	800715e <ai_platform_network_process+0x3fa>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	b1fb      	cbz	r3, 800715e <ai_platform_network_process+0x3fa>
 800711e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007122:	b1e0      	cbz	r0, 800715e <ai_platform_network_process+0x3fa>
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800712a:	6983      	ldr	r3, [r0, #24]
 800712c:	f8d2 9000 	ldr.w	r9, [r2]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007136:	0092      	lsls	r2, r2, #2
 8007138:	d5d5      	bpl.n	80070e6 <ai_platform_network_process+0x382>
 800713a:	6898      	ldr	r0, [r3, #8]
 800713c:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007140:	f003 ff70 	bl	800b024 <st_int8_copy>
 8007144:	f859 200a 	ldr.w	r2, [r9, sl]
 8007148:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800714c:	440b      	add	r3, r1
 800714e:	4293      	cmp	r3, r2
 8007150:	d302      	bcc.n	8007158 <ai_platform_network_process+0x3f4>
 8007152:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	f8c8 3004 	str.w	r3, [r8, #4]
 800715c:	e7d9      	b.n	8007112 <ai_platform_network_process+0x3ae>
 800715e:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8007162:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8007166:	3401      	adds	r4, #1
 8007168:	b2a4      	uxth	r4, r4
 800716a:	42a3      	cmp	r3, r4
 800716c:	f8ab 401a 	strh.w	r4, [fp, #26]
 8007170:	f63f af7f 	bhi.w	8007072 <ai_platform_network_process+0x30e>
 8007174:	4620      	mov	r0, r4
 8007176:	b005      	add	sp, #20
 8007178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717c:	2a01      	cmp	r2, #1
 800717e:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8007180:	d033      	beq.n	80071ea <ai_platform_network_process+0x486>
 8007182:	f106 070c 	add.w	r7, r6, #12
 8007186:	e770      	b.n	800706a <ai_platform_network_process+0x306>
 8007188:	9d03      	ldr	r5, [sp, #12]
 800718a:	2219      	movs	r2, #25
 800718c:	2112      	movs	r1, #18
 800718e:	2400      	movs	r4, #0
 8007190:	f105 000c 	add.w	r0, r5, #12
 8007194:	f000 f884 	bl	80072a0 <core_set_error>
 8007198:	e725      	b.n	8006fe6 <ai_platform_network_process+0x282>
 800719a:	9d03      	ldr	r5, [sp, #12]
 800719c:	4604      	mov	r4, r0
 800719e:	2221      	movs	r2, #33	; 0x21
 80071a0:	2112      	movs	r1, #18
 80071a2:	f105 000c 	add.w	r0, r5, #12
 80071a6:	f000 f87b 	bl	80072a0 <core_set_error>
 80071aa:	e71c      	b.n	8006fe6 <ai_platform_network_process+0x282>
 80071ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80071b0:	832b      	strh	r3, [r5, #24]
 80071b2:	e755      	b.n	8007060 <ai_platform_network_process+0x2fc>
 80071b4:	9d02      	ldr	r5, [sp, #8]
 80071b6:	2219      	movs	r2, #25
 80071b8:	2113      	movs	r1, #19
 80071ba:	2400      	movs	r4, #0
 80071bc:	f105 000c 	add.w	r0, r5, #12
 80071c0:	f000 f86e 	bl	80072a0 <core_set_error>
 80071c4:	e70f      	b.n	8006fe6 <ai_platform_network_process+0x282>
 80071c6:	9d02      	ldr	r5, [sp, #8]
 80071c8:	4604      	mov	r4, r0
 80071ca:	2221      	movs	r2, #33	; 0x21
 80071cc:	2113      	movs	r1, #19
 80071ce:	f105 000c 	add.w	r0, r5, #12
 80071d2:	f000 f865 	bl	80072a0 <core_set_error>
 80071d6:	e706      	b.n	8006fe6 <ai_platform_network_process+0x282>
 80071d8:	9d02      	ldr	r5, [sp, #8]
 80071da:	2217      	movs	r2, #23
 80071dc:	2113      	movs	r1, #19
 80071de:	2400      	movs	r4, #0
 80071e0:	f105 000c 	add.w	r0, r5, #12
 80071e4:	f000 f85c 	bl	80072a0 <core_set_error>
 80071e8:	e6fd      	b.n	8006fe6 <ai_platform_network_process+0x282>
 80071ea:	2700      	movs	r7, #0
 80071ec:	e73d      	b.n	800706a <ai_platform_network_process+0x306>
 80071ee:	bf00      	nop

080071f0 <ai_platform_observer_register_s>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4b18      	ldr	r3, [pc, #96]	; (8007254 <ai_platform_observer_register_s+0x64>)
 80071f4:	6802      	ldr	r2, [r0, #0]
 80071f6:	4393      	bics	r3, r2
 80071f8:	d12a      	bne.n	8007250 <ai_platform_observer_register_s+0x60>
 80071fa:	4684      	mov	ip, r0
 80071fc:	460d      	mov	r5, r1
 80071fe:	b301      	cbz	r1, 8007242 <ai_platform_observer_register_s+0x52>
 8007200:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007202:	b9bb      	cbnz	r3, 8007234 <ai_platform_observer_register_s+0x44>
 8007204:	81cb      	strh	r3, [r1, #14]
 8007206:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8007208:	e006      	b.n	8007218 <ai_platform_observer_register_s+0x28>
 800720a:	b29b      	uxth	r3, r3
 800720c:	81eb      	strh	r3, [r5, #14]
 800720e:	6914      	ldr	r4, [r2, #16]
 8007210:	4294      	cmp	r4, r2
 8007212:	4622      	mov	r2, r4
 8007214:	d003      	beq.n	800721e <ai_platform_observer_register_s+0x2e>
 8007216:	b114      	cbz	r4, 800721e <ai_platform_observer_register_s+0x2e>
 8007218:	3301      	adds	r3, #1
 800721a:	2a00      	cmp	r2, #0
 800721c:	d1f5      	bne.n	800720a <ai_platform_observer_register_s+0x1a>
 800721e:	7a2b      	ldrb	r3, [r5, #8]
 8007220:	2100      	movs	r1, #0
 8007222:	4a0d      	ldr	r2, [pc, #52]	; (8007258 <ai_platform_observer_register_s+0x68>)
 8007224:	2001      	movs	r0, #1
 8007226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800722a:	81a9      	strh	r1, [r5, #12]
 800722c:	60ab      	str	r3, [r5, #8]
 800722e:	e9cc 2510 	strd	r2, r5, [ip, #64]	; 0x40
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	2240      	movs	r2, #64	; 0x40
 8007236:	2111      	movs	r1, #17
 8007238:	300c      	adds	r0, #12
 800723a:	f000 f831 	bl	80072a0 <core_set_error>
 800723e:	2000      	movs	r0, #0
 8007240:	bd38      	pop	{r3, r4, r5, pc}
 8007242:	2211      	movs	r2, #17
 8007244:	2110      	movs	r1, #16
 8007246:	300c      	adds	r0, #12
 8007248:	f000 f82a 	bl	80072a0 <core_set_error>
 800724c:	4628      	mov	r0, r5
 800724e:	bd38      	pop	{r3, r4, r5, pc}
 8007250:	2000      	movs	r0, #0
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	a1c00100 	.word	0xa1c00100
 8007258:	08006401 	.word	0x08006401

0800725c <ai_platform_observer_unregister_s>:
 800725c:	4b0b      	ldr	r3, [pc, #44]	; (800728c <ai_platform_observer_unregister_s+0x30>)
 800725e:	b510      	push	{r4, lr}
 8007260:	6802      	ldr	r2, [r0, #0]
 8007262:	4393      	bics	r3, r2
 8007264:	d10e      	bne.n	8007284 <ai_platform_observer_unregister_s+0x28>
 8007266:	460c      	mov	r4, r1
 8007268:	b129      	cbz	r1, 8007276 <ai_platform_observer_unregister_s+0x1a>
 800726a:	2300      	movs	r3, #0
 800726c:	2401      	movs	r4, #1
 800726e:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
 8007272:	4620      	mov	r0, r4
 8007274:	bd10      	pop	{r4, pc}
 8007276:	2211      	movs	r2, #17
 8007278:	2110      	movs	r1, #16
 800727a:	300c      	adds	r0, #12
 800727c:	f000 f810 	bl	80072a0 <core_set_error>
 8007280:	4620      	mov	r0, r4
 8007282:	bd10      	pop	{r4, pc}
 8007284:	2400      	movs	r4, #0
 8007286:	4620      	mov	r0, r4
 8007288:	bd10      	pop	{r4, pc}
 800728a:	bf00      	nop
 800728c:	a1c00100 	.word	0xa1c00100

08007290 <core_init>:
 8007290:	2001      	movs	r0, #1
 8007292:	4770      	bx	lr

08007294 <core_get_error>:
 8007294:	4603      	mov	r3, r0
 8007296:	2200      	movs	r2, #0
 8007298:	6800      	ldr	r0, [r0, #0]
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop

080072a0 <core_set_error>:
 80072a0:	4603      	mov	r3, r0
 80072a2:	7800      	ldrb	r0, [r0, #0]
 80072a4:	b108      	cbz	r0, 80072aa <core_set_error+0xa>
 80072a6:	2000      	movs	r0, #0
 80072a8:	4770      	bx	lr
 80072aa:	7019      	strb	r1, [r3, #0]
 80072ac:	2001      	movs	r0, #1
 80072ae:	6819      	ldr	r1, [r3, #0]
 80072b0:	f362 211f 	bfi	r1, r2, #8, #24
 80072b4:	6019      	str	r1, [r3, #0]
 80072b6:	4770      	bx	lr

080072b8 <ai_check_custom_types>:
 80072b8:	b082      	sub	sp, #8
 80072ba:	4b12      	ldr	r3, [pc, #72]	; (8007304 <ai_check_custom_types+0x4c>)
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	b118      	cbz	r0, 80072c8 <ai_check_custom_types+0x10>
 80072c0:	7803      	ldrb	r3, [r0, #0]
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d002      	beq.n	80072cc <ai_check_custom_types+0x14>
 80072c6:	2000      	movs	r0, #0
 80072c8:	b002      	add	sp, #8
 80072ca:	4770      	bx	lr
 80072cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d004      	beq.n	80072de <ai_check_custom_types+0x26>
 80072d4:	2001      	movs	r0, #1
 80072d6:	f080 0001 	eor.w	r0, r0, #1
 80072da:	b002      	add	sp, #8
 80072dc:	4770      	bx	lr
 80072de:	7842      	ldrb	r2, [r0, #1]
 80072e0:	3001      	adds	r0, #1
 80072e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d1f4      	bne.n	80072d4 <ai_check_custom_types+0x1c>
 80072ea:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80072ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d1ee      	bne.n	80072d4 <ai_check_custom_types+0x1c>
 80072f6:	7842      	ldrb	r2, [r0, #1]
 80072f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d1e9      	bne.n	80072d4 <ai_check_custom_types+0x1c>
 8007300:	2000      	movs	r0, #0
 8007302:	e7e8      	b.n	80072d6 <ai_check_custom_types+0x1e>
 8007304:	84048403 	.word	0x84048403

08007308 <ai_layers_init_all>:
 8007308:	2100      	movs	r1, #0
 800730a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800730c:	b13b      	cbz	r3, 800731e <ai_layers_init_all+0x16>
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	3101      	adds	r1, #1
 8007312:	60d8      	str	r0, [r3, #12]
 8007314:	429a      	cmp	r2, r3
 8007316:	4613      	mov	r3, r2
 8007318:	d001      	beq.n	800731e <ai_layers_init_all+0x16>
 800731a:	2a00      	cmp	r2, #0
 800731c:	d1f6      	bne.n	800730c <ai_layers_init_all+0x4>
 800731e:	4608      	mov	r0, r1
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop

08007324 <ai_layers_post_init_all>:
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	2500      	movs	r5, #0
 8007328:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800732a:	b16c      	cbz	r4, 8007348 <ai_layers_post_init_all+0x24>
 800732c:	6863      	ldr	r3, [r4, #4]
 800732e:	07db      	lsls	r3, r3, #31
 8007330:	d504      	bpl.n	800733c <ai_layers_post_init_all+0x18>
 8007332:	6a23      	ldr	r3, [r4, #32]
 8007334:	4620      	mov	r0, r4
 8007336:	b10b      	cbz	r3, 800733c <ai_layers_post_init_all+0x18>
 8007338:	3501      	adds	r5, #1
 800733a:	4798      	blx	r3
 800733c:	6923      	ldr	r3, [r4, #16]
 800733e:	42a3      	cmp	r3, r4
 8007340:	461c      	mov	r4, r3
 8007342:	d001      	beq.n	8007348 <ai_layers_post_init_all+0x24>
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1f0      	bne.n	800732a <ai_layers_post_init_all+0x6>
 8007348:	4628      	mov	r0, r5
 800734a:	bd38      	pop	{r3, r4, r5, pc}

0800734c <ai_layers_forward_all>:
 800734c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007350:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 8007354:	4604      	mov	r4, r0
 8007356:	f1b8 0f00 	cmp.w	r8, #0
 800735a:	d02a      	beq.n	80073b2 <ai_layers_forward_all+0x66>
 800735c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800735e:	63c1      	str	r1, [r0, #60]	; 0x3c
 8007360:	b319      	cbz	r1, 80073aa <ai_layers_forward_all+0x5e>
 8007362:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007364:	2001      	movs	r0, #1
 8007366:	47c0      	blx	r8
 8007368:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800736a:	b1f6      	cbz	r6, 80073aa <ai_layers_forward_all+0x5e>
 800736c:	2700      	movs	r7, #0
 800736e:	4631      	mov	r1, r6
 8007370:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007372:	2002      	movs	r0, #2
 8007374:	47c0      	blx	r8
 8007376:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8007378:	4628      	mov	r0, r5
 800737a:	696b      	ldr	r3, [r5, #20]
 800737c:	4798      	blx	r3
 800737e:	692e      	ldr	r6, [r5, #16]
 8007380:	2003      	movs	r0, #3
 8007382:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007384:	42b5      	cmp	r5, r6
 8007386:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007388:	d007      	beq.n	800739a <ai_layers_forward_all+0x4e>
 800738a:	47c0      	blx	r8
 800738c:	3701      	adds	r7, #1
 800738e:	63e6      	str	r6, [r4, #60]	; 0x3c
 8007390:	2e00      	cmp	r6, #0
 8007392:	d1ec      	bne.n	800736e <ai_layers_forward_all+0x22>
 8007394:	4638      	mov	r0, r7
 8007396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800739a:	2003      	movs	r0, #3
 800739c:	3701      	adds	r7, #1
 800739e:	47c0      	blx	r8
 80073a0:	2300      	movs	r3, #0
 80073a2:	4638      	mov	r0, r7
 80073a4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80073a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073aa:	2700      	movs	r7, #0
 80073ac:	4638      	mov	r0, r7
 80073ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b2:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80073b4:	63c5      	str	r5, [r0, #60]	; 0x3c
 80073b6:	2d00      	cmp	r5, #0
 80073b8:	d0f7      	beq.n	80073aa <ai_layers_forward_all+0x5e>
 80073ba:	4647      	mov	r7, r8
 80073bc:	696b      	ldr	r3, [r5, #20]
 80073be:	4628      	mov	r0, r5
 80073c0:	4798      	blx	r3
 80073c2:	462b      	mov	r3, r5
 80073c4:	692d      	ldr	r5, [r5, #16]
 80073c6:	429d      	cmp	r5, r3
 80073c8:	d004      	beq.n	80073d4 <ai_layers_forward_all+0x88>
 80073ca:	3701      	adds	r7, #1
 80073cc:	63e5      	str	r5, [r4, #60]	; 0x3c
 80073ce:	2d00      	cmp	r5, #0
 80073d0:	d1f4      	bne.n	80073bc <ai_layers_forward_all+0x70>
 80073d2:	e7df      	b.n	8007394 <ai_layers_forward_all+0x48>
 80073d4:	2300      	movs	r3, #0
 80073d6:	3701      	adds	r7, #1
 80073d8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80073da:	e7db      	b.n	8007394 <ai_layers_forward_all+0x48>

080073dc <ai_layers_destroy_all>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	2500      	movs	r5, #0
 80073e0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80073e2:	b16c      	cbz	r4, 8007400 <ai_layers_destroy_all+0x24>
 80073e4:	6863      	ldr	r3, [r4, #4]
 80073e6:	075b      	lsls	r3, r3, #29
 80073e8:	d504      	bpl.n	80073f4 <ai_layers_destroy_all+0x18>
 80073ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80073ec:	4620      	mov	r0, r4
 80073ee:	b10b      	cbz	r3, 80073f4 <ai_layers_destroy_all+0x18>
 80073f0:	3501      	adds	r5, #1
 80073f2:	4798      	blx	r3
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	42a3      	cmp	r3, r4
 80073f8:	461c      	mov	r4, r3
 80073fa:	d001      	beq.n	8007400 <ai_layers_destroy_all+0x24>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1f0      	bne.n	80073e2 <ai_layers_destroy_all+0x6>
 8007400:	4628      	mov	r0, r5
 8007402:	bd38      	pop	{r3, r4, r5, pc}

08007404 <forward_dense>:
 8007404:	6982      	ldr	r2, [r0, #24]
 8007406:	8813      	ldrh	r3, [r2, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d043      	beq.n	8007494 <forward_dense+0x90>
 800740c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007410:	6855      	ldr	r5, [r2, #4]
 8007412:	b08e      	sub	sp, #56	; 0x38
 8007414:	6869      	ldr	r1, [r5, #4]
 8007416:	b101      	cbz	r1, 800741a <forward_dense+0x16>
 8007418:	6809      	ldr	r1, [r1, #0]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d069      	beq.n	80074f2 <forward_dense+0xee>
 800741e:	692a      	ldr	r2, [r5, #16]
 8007420:	b102      	cbz	r2, 8007424 <forward_dense+0x20>
 8007422:	6812      	ldr	r2, [r2, #0]
 8007424:	2b02      	cmp	r3, #2
 8007426:	d061      	beq.n	80074ec <forward_dense+0xe8>
 8007428:	69ec      	ldr	r4, [r5, #28]
 800742a:	2c00      	cmp	r4, #0
 800742c:	d057      	beq.n	80074de <forward_dense+0xda>
 800742e:	8b2e      	ldrh	r6, [r5, #24]
 8007430:	6820      	ldr	r0, [r4, #0]
 8007432:	2e01      	cmp	r6, #1
 8007434:	d955      	bls.n	80074e2 <forward_dense+0xde>
 8007436:	6864      	ldr	r4, [r4, #4]
 8007438:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800743c:	2b03      	cmp	r3, #3
 800743e:	68d0      	ldr	r0, [r2, #12]
 8007440:	68cf      	ldr	r7, [r1, #12]
 8007442:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007446:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800744a:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 800744e:	f8d9 0000 	ldr.w	r0, [r9]
 8007452:	fb06 f807 	mul.w	r8, r6, r7
 8007456:	f020 4c7e 	bic.w	ip, r0, #4261412864	; 0xfe000000
 800745a:	d044      	beq.n	80074e6 <forward_dense+0xe2>
 800745c:	6aad      	ldr	r5, [r5, #40]	; 0x28
 800745e:	b11d      	cbz	r5, 8007468 <forward_dense+0x64>
 8007460:	682d      	ldr	r5, [r5, #0]
 8007462:	b10d      	cbz	r5, 8007468 <forward_dense+0x64>
 8007464:	69ab      	ldr	r3, [r5, #24]
 8007466:	689d      	ldr	r5, [r3, #8]
 8007468:	6992      	ldr	r2, [r2, #24]
 800746a:	698b      	ldr	r3, [r1, #24]
 800746c:	6890      	ldr	r0, [r2, #8]
 800746e:	6899      	ldr	r1, [r3, #8]
 8007470:	b10c      	cbz	r4, 8007476 <forward_dense+0x72>
 8007472:	69a3      	ldr	r3, [r4, #24]
 8007474:	689c      	ldr	r4, [r3, #8]
 8007476:	4b20      	ldr	r3, [pc, #128]	; (80074f8 <forward_dense+0xf4>)
 8007478:	459c      	cmp	ip, r3
 800747a:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800747e:	d023      	beq.n	80074c8 <forward_dense+0xc4>
 8007480:	4e1e      	ldr	r6, [pc, #120]	; (80074fc <forward_dense+0xf8>)
 8007482:	45b4      	cmp	ip, r6
 8007484:	d015      	beq.n	80074b2 <forward_dense+0xae>
 8007486:	f5a3 039c 	sub.w	r3, r3, #5111808	; 0x4e0000
 800748a:	459c      	cmp	ip, r3
 800748c:	d004      	beq.n	8007498 <forward_dense+0x94>
 800748e:	b00e      	add	sp, #56	; 0x38
 8007490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	deff      	udf	#255	; 0xff
 8007498:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800749c:	a807      	add	r0, sp, #28
 800749e:	9209      	str	r2, [sp, #36]	; 0x24
 80074a0:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 80074a4:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
 80074a8:	f002 f8b6 	bl	8009618 <forward_lite_dense_if32of32wf32>
 80074ac:	b00e      	add	sp, #56	; 0x38
 80074ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b2:	464b      	mov	r3, r9
 80074b4:	9500      	str	r5, [sp, #0]
 80074b6:	e9cd e803 	strd	lr, r8, [sp, #12]
 80074ba:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80074be:	f002 fa09 	bl	80098d4 <forward_lite_dense_if32of32wf32_lut4>
 80074c2:	b00e      	add	sp, #56	; 0x38
 80074c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c8:	464b      	mov	r3, r9
 80074ca:	9500      	str	r5, [sp, #0]
 80074cc:	e9cd e803 	strd	lr, r8, [sp, #12]
 80074d0:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80074d4:	f002 fb28 	bl	8009b28 <forward_lite_dense_if32of32wf32_lut8>
 80074d8:	b00e      	add	sp, #56	; 0x38
 80074da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074de:	4620      	mov	r0, r4
 80074e0:	e7aa      	b.n	8007438 <forward_dense+0x34>
 80074e2:	2400      	movs	r4, #0
 80074e4:	e7a8      	b.n	8007438 <forward_dense+0x34>
 80074e6:	2300      	movs	r3, #0
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	deff      	udf	#255	; 0xff
 80074ec:	2300      	movs	r3, #0
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	deff      	udf	#255	; 0xff
 80074f2:	2300      	movs	r3, #0
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	deff      	udf	#255	; 0xff
 80074f8:	01d01040 	.word	0x01d01040
 80074fc:	01e81040 	.word	0x01e81040

08007500 <forward_conv2d_rgb_sssa8_ch>:
 8007500:	6982      	ldr	r2, [r0, #24]
 8007502:	8813      	ldrh	r3, [r2, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 80a8 	beq.w	800765a <forward_conv2d_rgb_sssa8_ch+0x15a>
 800750a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750e:	6854      	ldr	r4, [r2, #4]
 8007510:	b097      	sub	sp, #92	; 0x5c
 8007512:	6861      	ldr	r1, [r4, #4]
 8007514:	b101      	cbz	r1, 8007518 <forward_conv2d_rgb_sssa8_ch+0x18>
 8007516:	6809      	ldr	r1, [r1, #0]
 8007518:	2b01      	cmp	r3, #1
 800751a:	f000 80b7 	beq.w	800768c <forward_conv2d_rgb_sssa8_ch+0x18c>
 800751e:	6922      	ldr	r2, [r4, #16]
 8007520:	b102      	cbz	r2, 8007524 <forward_conv2d_rgb_sssa8_ch+0x24>
 8007522:	6812      	ldr	r2, [r2, #0]
 8007524:	2b02      	cmp	r3, #2
 8007526:	f000 80ac 	beq.w	8007682 <forward_conv2d_rgb_sssa8_ch+0x182>
 800752a:	69e5      	ldr	r5, [r4, #28]
 800752c:	2d00      	cmp	r5, #0
 800752e:	f000 80a0 	beq.w	8007672 <forward_conv2d_rgb_sssa8_ch+0x172>
 8007532:	8b26      	ldrh	r6, [r4, #24]
 8007534:	f8d5 e000 	ldr.w	lr, [r5]
 8007538:	2e01      	cmp	r6, #1
 800753a:	f240 809c 	bls.w	8007676 <forward_conv2d_rgb_sssa8_ch+0x176>
 800753e:	686d      	ldr	r5, [r5, #4]
 8007540:	2b03      	cmp	r3, #3
 8007542:	f000 80a6 	beq.w	8007692 <forward_conv2d_rgb_sssa8_ch+0x192>
 8007546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 8096 	beq.w	800767a <forward_conv2d_rgb_sssa8_ch+0x17a>
 800754e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007550:	b104      	cbz	r4, 8007554 <forward_conv2d_rgb_sssa8_ch+0x54>
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	681c      	ldr	r4, [r3, #0]
 8007556:	69ab      	ldr	r3, [r5, #24]
 8007558:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	68d4      	ldr	r4, [r2, #12]
 8007560:	9314      	str	r3, [sp, #80]	; 0x50
 8007562:	68cb      	ldr	r3, [r1, #12]
 8007564:	680d      	ldr	r5, [r1, #0]
 8007566:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800756a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800756c:	f8de 6000 	ldr.w	r6, [lr]
 8007570:	889b      	ldrh	r3, [r3, #4]
 8007572:	9313      	str	r3, [sp, #76]	; 0x4c
 8007574:	f8de 300c 	ldr.w	r3, [lr, #12]
 8007578:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800757c:	88a3      	ldrh	r3, [r4, #4]
 800757e:	68a4      	ldr	r4, [r4, #8]
 8007580:	9411      	str	r4, [sp, #68]	; 0x44
 8007582:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 8007584:	9412      	str	r4, [sp, #72]	; 0x48
 8007586:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800758a:	9415      	str	r4, [sp, #84]	; 0x54
 800758c:	6814      	ldr	r4, [r2, #0]
 800758e:	2d00      	cmp	r5, #0
 8007590:	d068      	beq.n	8007664 <forward_conv2d_rgb_sssa8_ch+0x164>
 8007592:	686f      	ldr	r7, [r5, #4]
 8007594:	2f00      	cmp	r7, #0
 8007596:	d065      	beq.n	8007664 <forward_conv2d_rgb_sssa8_ch+0x164>
 8007598:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 800759c:	f1b8 0f00 	cmp.w	r8, #0
 80075a0:	d060      	beq.n	8007664 <forward_conv2d_rgb_sssa8_ch+0x164>
 80075a2:	683f      	ldr	r7, [r7, #0]
 80075a4:	ed97 0a00 	vldr	s0, [r7]
 80075a8:	2c00      	cmp	r4, #0
 80075aa:	d058      	beq.n	800765e <forward_conv2d_rgb_sssa8_ch+0x15e>
 80075ac:	6867      	ldr	r7, [r4, #4]
 80075ae:	2f00      	cmp	r7, #0
 80075b0:	d055      	beq.n	800765e <forward_conv2d_rgb_sssa8_ch+0x15e>
 80075b2:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 80075b6:	f1b8 0f00 	cmp.w	r8, #0
 80075ba:	d050      	beq.n	800765e <forward_conv2d_rgb_sssa8_ch+0x15e>
 80075bc:	683f      	ldr	r7, [r7, #0]
 80075be:	edd7 0a00 	vldr	s1, [r7]
 80075c2:	6997      	ldr	r7, [r2, #24]
 80075c4:	6989      	ldr	r1, [r1, #24]
 80075c6:	f8de 2018 	ldr.w	r2, [lr, #24]
 80075ca:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80075ce:	f890 8041 	ldrb.w	r8, [r0, #65]	; 0x41
 80075d2:	688f      	ldr	r7, [r1, #8]
 80075d4:	6892      	ldr	r2, [r2, #8]
 80075d6:	b116      	cbz	r6, 80075de <forward_conv2d_rgb_sssa8_ch+0xde>
 80075d8:	6876      	ldr	r6, [r6, #4]
 80075da:	b106      	cbz	r6, 80075de <forward_conv2d_rgb_sssa8_ch+0xde>
 80075dc:	6836      	ldr	r6, [r6, #0]
 80075de:	b13d      	cbz	r5, 80075f0 <forward_conv2d_rgb_sssa8_ch+0xf0>
 80075e0:	6869      	ldr	r1, [r5, #4]
 80075e2:	2900      	cmp	r1, #0
 80075e4:	d041      	beq.n	800766a <forward_conv2d_rgb_sssa8_ch+0x16a>
 80075e6:	886d      	ldrh	r5, [r5, #2]
 80075e8:	b115      	cbz	r5, 80075f0 <forward_conv2d_rgb_sssa8_ch+0xf0>
 80075ea:	6849      	ldr	r1, [r1, #4]
 80075ec:	f991 5000 	ldrsb.w	r5, [r1]
 80075f0:	b13c      	cbz	r4, 8007602 <forward_conv2d_rgb_sssa8_ch+0x102>
 80075f2:	6861      	ldr	r1, [r4, #4]
 80075f4:	2900      	cmp	r1, #0
 80075f6:	d03a      	beq.n	800766e <forward_conv2d_rgb_sssa8_ch+0x16e>
 80075f8:	8864      	ldrh	r4, [r4, #2]
 80075fa:	b114      	cbz	r4, 8007602 <forward_conv2d_rgb_sssa8_ch+0x102>
 80075fc:	6849      	ldr	r1, [r1, #4]
 80075fe:	f991 4000 	ldrsb.w	r4, [r1]
 8007602:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
 8007606:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 800760a:	e9dc 0100 	ldrd	r0, r1, [ip]
 800760e:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 8007612:	f005 fa7d 	bl	800cb10 <ai_array_get_byte_size>
 8007616:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007618:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 800761c:	eddd 0a0e 	vldr	s1, [sp, #56]	; 0x38
 8007620:	9109      	str	r1, [sp, #36]	; 0x24
 8007622:	fa1f f189 	uxth.w	r1, r9
 8007626:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 800762a:	9504      	str	r5, [sp, #16]
 800762c:	e9cd 030a 	strd	r0, r3, [sp, #40]	; 0x28
 8007630:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007632:	4638      	mov	r0, r7
 8007634:	9303      	str	r3, [sp, #12]
 8007636:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007638:	9302      	str	r3, [sp, #8]
 800763a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800763c:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8007640:	fa1f f48a 	uxth.w	r4, sl
 8007644:	9301      	str	r3, [sp, #4]
 8007646:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800764a:	e9cd 8b07 	strd	r8, fp, [sp, #28]
 800764e:	9400      	str	r4, [sp, #0]
 8007650:	f001 fd66 	bl	8009120 <forward_lite_conv2d_rgb_sssa8_ch>
 8007654:	b017      	add	sp, #92	; 0x5c
 8007656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	deff      	udf	#255	; 0xff
 800765e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8007698 <forward_conv2d_rgb_sssa8_ch+0x198>
 8007662:	e7ae      	b.n	80075c2 <forward_conv2d_rgb_sssa8_ch+0xc2>
 8007664:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007698 <forward_conv2d_rgb_sssa8_ch+0x198>
 8007668:	e79e      	b.n	80075a8 <forward_conv2d_rgb_sssa8_ch+0xa8>
 800766a:	460d      	mov	r5, r1
 800766c:	e7c0      	b.n	80075f0 <forward_conv2d_rgb_sssa8_ch+0xf0>
 800766e:	460c      	mov	r4, r1
 8007670:	e7c7      	b.n	8007602 <forward_conv2d_rgb_sssa8_ch+0x102>
 8007672:	46ae      	mov	lr, r5
 8007674:	e764      	b.n	8007540 <forward_conv2d_rgb_sssa8_ch+0x40>
 8007676:	2500      	movs	r5, #0
 8007678:	e762      	b.n	8007540 <forward_conv2d_rgb_sssa8_ch+0x40>
 800767a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800767c:	b922      	cbnz	r2, 8007688 <forward_conv2d_rgb_sssa8_ch+0x188>
 800767e:	6993      	ldr	r3, [r2, #24]
 8007680:	deff      	udf	#255	; 0xff
 8007682:	2300      	movs	r3, #0
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	deff      	udf	#255	; 0xff
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	deff      	udf	#255	; 0xff
 800768c:	2300      	movs	r3, #0
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	deff      	udf	#255	; 0xff
 8007692:	2300      	movs	r3, #0
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	deff      	udf	#255	; 0xff
 8007698:	00000000 	.word	0x00000000

0800769c <forward_dense_integer_SSSA>:
 800769c:	6983      	ldr	r3, [r0, #24]
 800769e:	8819      	ldrh	r1, [r3, #0]
 80076a0:	2900      	cmp	r1, #0
 80076a2:	f000 8085 	beq.w	80077b0 <forward_dense_integer_SSSA+0x114>
 80076a6:	6858      	ldr	r0, [r3, #4]
 80076a8:	6842      	ldr	r2, [r0, #4]
 80076aa:	b102      	cbz	r2, 80076ae <forward_dense_integer_SSSA+0x12>
 80076ac:	6812      	ldr	r2, [r2, #0]
 80076ae:	2901      	cmp	r1, #1
 80076b0:	f000 8106 	beq.w	80078c0 <forward_dense_integer_SSSA+0x224>
 80076b4:	6903      	ldr	r3, [r0, #16]
 80076b6:	b103      	cbz	r3, 80076ba <forward_dense_integer_SSSA+0x1e>
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2902      	cmp	r1, #2
 80076bc:	f000 8103 	beq.w	80078c6 <forward_dense_integer_SSSA+0x22a>
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	69c5      	ldr	r5, [r0, #28]
 80076c6:	b089      	sub	sp, #36	; 0x24
 80076c8:	2d00      	cmp	r5, #0
 80076ca:	f000 80b4 	beq.w	8007836 <forward_dense_integer_SSSA+0x19a>
 80076ce:	8b04      	ldrh	r4, [r0, #24]
 80076d0:	682f      	ldr	r7, [r5, #0]
 80076d2:	2c01      	cmp	r4, #1
 80076d4:	f240 80d6 	bls.w	8007884 <forward_dense_integer_SSSA+0x1e8>
 80076d8:	686d      	ldr	r5, [r5, #4]
 80076da:	2903      	cmp	r1, #3
 80076dc:	f000 80f6 	beq.w	80078cc <forward_dense_integer_SSSA+0x230>
 80076e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80076e2:	69a9      	ldr	r1, [r5, #24]
 80076e4:	2c00      	cmp	r4, #0
 80076e6:	f000 80bd 	beq.w	8007864 <forward_dense_integer_SSSA+0x1c8>
 80076ea:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80076ee:	68d1      	ldr	r1, [r2, #12]
 80076f0:	68dd      	ldr	r5, [r3, #12]
 80076f2:	8889      	ldrh	r1, [r1, #4]
 80076f4:	6824      	ldr	r4, [r4, #0]
 80076f6:	9107      	str	r1, [sp, #28]
 80076f8:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 80076fc:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8007700:	e9d5 1002 	ldrd	r1, r0, [r5, #8]
 8007704:	fb00 fa01 	mul.w	sl, r0, r1
 8007708:	6998      	ldr	r0, [r3, #24]
 800770a:	b10c      	cbz	r4, 8007710 <forward_dense_integer_SSSA+0x74>
 800770c:	69a1      	ldr	r1, [r4, #24]
 800770e:	688c      	ldr	r4, [r1, #8]
 8007710:	6815      	ldr	r5, [r2, #0]
 8007712:	681e      	ldr	r6, [r3, #0]
 8007714:	f8d7 c018 	ldr.w	ip, [r7, #24]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2d00      	cmp	r5, #0
 800771c:	d04a      	beq.n	80077b4 <forward_dense_integer_SSSA+0x118>
 800771e:	686a      	ldr	r2, [r5, #4]
 8007720:	2a00      	cmp	r2, #0
 8007722:	d06f      	beq.n	8007804 <forward_dense_integer_SSSA+0x168>
 8007724:	886f      	ldrh	r7, [r5, #2]
 8007726:	2f00      	cmp	r7, #0
 8007728:	d05d      	beq.n	80077e6 <forward_dense_integer_SSSA+0x14a>
 800772a:	6811      	ldr	r1, [r2, #0]
 800772c:	ed91 0a00 	vldr	s0, [r1]
 8007730:	2e00      	cmp	r6, #0
 8007732:	d05c      	beq.n	80077ee <forward_dense_integer_SSSA+0x152>
 8007734:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8007738:	f1b8 0f00 	cmp.w	r8, #0
 800773c:	d06a      	beq.n	8007814 <forward_dense_integer_SSSA+0x178>
 800773e:	8877      	ldrh	r7, [r6, #2]
 8007740:	2f00      	cmp	r7, #0
 8007742:	d043      	beq.n	80077cc <forward_dense_integer_SSSA+0x130>
 8007744:	f8d8 1000 	ldr.w	r1, [r8]
 8007748:	6880      	ldr	r0, [r0, #8]
 800774a:	f8d9 9008 	ldr.w	r9, [r9, #8]
 800774e:	f8dc c008 	ldr.w	ip, [ip, #8]
 8007752:	edd1 0a00 	vldr	s1, [r1]
 8007756:	2a00      	cmp	r2, #0
 8007758:	d043      	beq.n	80077e2 <forward_dense_integer_SSSA+0x146>
 800775a:	886d      	ldrh	r5, [r5, #2]
 800775c:	2d00      	cmp	r5, #0
 800775e:	d064      	beq.n	800782a <forward_dense_integer_SSSA+0x18e>
 8007760:	6852      	ldr	r2, [r2, #4]
 8007762:	f992 5000 	ldrsb.w	r5, [r2]
 8007766:	2e00      	cmp	r6, #0
 8007768:	d063      	beq.n	8007832 <forward_dense_integer_SSSA+0x196>
 800776a:	f1b8 0f00 	cmp.w	r8, #0
 800776e:	d060      	beq.n	8007832 <forward_dense_integer_SSSA+0x196>
 8007770:	8877      	ldrh	r7, [r6, #2]
 8007772:	b11f      	cbz	r7, 800777c <forward_dense_integer_SSSA+0xe0>
 8007774:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007778:	f992 7000 	ldrsb.w	r7, [r2]
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 809c 	beq.w	80078ba <forward_dense_integer_SSSA+0x21e>
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 8098 	beq.w	80078ba <forward_dense_integer_SSSA+0x21e>
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	4649      	mov	r1, r9
 800778e:	4673      	mov	r3, lr
 8007790:	ed92 1a00 	vldr	s2, [r2]
 8007794:	9a07      	ldr	r2, [sp, #28]
 8007796:	f8cd b00c 	str.w	fp, [sp, #12]
 800779a:	9500      	str	r5, [sp, #0]
 800779c:	e9cd 7201 	strd	r7, r2, [sp, #4]
 80077a0:	4662      	mov	r2, ip
 80077a2:	e9cd a404 	strd	sl, r4, [sp, #16]
 80077a6:	f000 fcad 	bl	8008104 <forward_lite_dense_is8os8ws8>
 80077aa:	b009      	add	sp, #36	; 0x24
 80077ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b0:	684b      	ldr	r3, [r1, #4]
 80077b2:	deff      	udf	#255	; 0xff
 80077b4:	2e00      	cmp	r6, #0
 80077b6:	d045      	beq.n	8007844 <forward_dense_integer_SSSA+0x1a8>
 80077b8:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80077bc:	f1b8 0f00 	cmp.w	r8, #0
 80077c0:	d04c      	beq.n	800785c <forward_dense_integer_SSSA+0x1c0>
 80077c2:	8877      	ldrh	r7, [r6, #2]
 80077c4:	2f00      	cmp	r7, #0
 80077c6:	d15f      	bne.n	8007888 <forward_dense_integer_SSSA+0x1ec>
 80077c8:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80078d4 <forward_dense_integer_SSSA+0x238>
 80077cc:	6880      	ldr	r0, [r0, #8]
 80077ce:	f8d9 9008 	ldr.w	r9, [r9, #8]
 80077d2:	f8dc c008 	ldr.w	ip, [ip, #8]
 80077d6:	b38d      	cbz	r5, 800783c <forward_dense_integer_SSSA+0x1a0>
 80077d8:	686a      	ldr	r2, [r5, #4]
 80077da:	eddf 0a3e 	vldr	s1, [pc, #248]	; 80078d4 <forward_dense_integer_SSSA+0x238>
 80077de:	2a00      	cmp	r2, #0
 80077e0:	d1bb      	bne.n	800775a <forward_dense_integer_SSSA+0xbe>
 80077e2:	4615      	mov	r5, r2
 80077e4:	e7c5      	b.n	8007772 <forward_dense_integer_SSSA+0xd6>
 80077e6:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 80078d4 <forward_dense_integer_SSSA+0x238>
 80077ea:	2e00      	cmp	r6, #0
 80077ec:	d1a2      	bne.n	8007734 <forward_dense_integer_SSSA+0x98>
 80077ee:	6880      	ldr	r0, [r0, #8]
 80077f0:	f8d9 9008 	ldr.w	r9, [r9, #8]
 80077f4:	f8dc c008 	ldr.w	ip, [ip, #8]
 80077f8:	2f00      	cmp	r7, #0
 80077fa:	d151      	bne.n	80078a0 <forward_dense_integer_SSSA+0x204>
 80077fc:	463d      	mov	r5, r7
 80077fe:	eddf 0a35 	vldr	s1, [pc, #212]	; 80078d4 <forward_dense_integer_SSSA+0x238>
 8007802:	e7bb      	b.n	800777c <forward_dense_integer_SSSA+0xe0>
 8007804:	b1f6      	cbz	r6, 8007844 <forward_dense_integer_SSSA+0x1a8>
 8007806:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800780a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80078d4 <forward_dense_integer_SSSA+0x238>
 800780e:	f1b8 0f00 	cmp.w	r8, #0
 8007812:	d194      	bne.n	800773e <forward_dense_integer_SSSA+0xa2>
 8007814:	6880      	ldr	r0, [r0, #8]
 8007816:	f8d9 9008 	ldr.w	r9, [r9, #8]
 800781a:	f8dc c008 	ldr.w	ip, [ip, #8]
 800781e:	b162      	cbz	r2, 800783a <forward_dense_integer_SSSA+0x19e>
 8007820:	886d      	ldrh	r5, [r5, #2]
 8007822:	2d00      	cmp	r5, #0
 8007824:	d143      	bne.n	80078ae <forward_dense_integer_SSSA+0x212>
 8007826:	eddf 0a2b 	vldr	s1, [pc, #172]	; 80078d4 <forward_dense_integer_SSSA+0x238>
 800782a:	2500      	movs	r5, #0
 800782c:	f1b8 0f00 	cmp.w	r8, #0
 8007830:	d19e      	bne.n	8007770 <forward_dense_integer_SSSA+0xd4>
 8007832:	2700      	movs	r7, #0
 8007834:	e7a2      	b.n	800777c <forward_dense_integer_SSSA+0xe0>
 8007836:	462f      	mov	r7, r5
 8007838:	e74f      	b.n	80076da <forward_dense_integer_SSSA+0x3e>
 800783a:	4615      	mov	r5, r2
 800783c:	eddf 0a25 	vldr	s1, [pc, #148]	; 80078d4 <forward_dense_integer_SSSA+0x238>
 8007840:	462f      	mov	r7, r5
 8007842:	e79b      	b.n	800777c <forward_dense_integer_SSSA+0xe0>
 8007844:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80078d4 <forward_dense_integer_SSSA+0x238>
 8007848:	4635      	mov	r5, r6
 800784a:	eef0 0a40 	vmov.f32	s1, s0
 800784e:	6880      	ldr	r0, [r0, #8]
 8007850:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8007854:	462f      	mov	r7, r5
 8007856:	f8dc c008 	ldr.w	ip, [ip, #8]
 800785a:	e78f      	b.n	800777c <forward_dense_integer_SSSA+0xe0>
 800785c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80078d4 <forward_dense_integer_SSSA+0x238>
 8007860:	4645      	mov	r5, r8
 8007862:	e7f2      	b.n	800784a <forward_dense_integer_SSSA+0x1ae>
 8007864:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8007868:	68d1      	ldr	r1, [r2, #12]
 800786a:	68dd      	ldr	r5, [r3, #12]
 800786c:	8889      	ldrh	r1, [r1, #4]
 800786e:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8007872:	9107      	str	r1, [sp, #28]
 8007874:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8007878:	e9d5 1002 	ldrd	r1, r0, [r5, #8]
 800787c:	fb00 fa01 	mul.w	sl, r0, r1
 8007880:	6998      	ldr	r0, [r3, #24]
 8007882:	e745      	b.n	8007710 <forward_dense_integer_SSSA+0x74>
 8007884:	2500      	movs	r5, #0
 8007886:	e728      	b.n	80076da <forward_dense_integer_SSSA+0x3e>
 8007888:	f8d8 2000 	ldr.w	r2, [r8]
 800788c:	6880      	ldr	r0, [r0, #8]
 800788e:	f8d9 9008 	ldr.w	r9, [r9, #8]
 8007892:	f8dc c008 	ldr.w	ip, [ip, #8]
 8007896:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80078d4 <forward_dense_integer_SSSA+0x238>
 800789a:	edd2 0a00 	vldr	s1, [r2]
 800789e:	e769      	b.n	8007774 <forward_dense_integer_SSSA+0xd8>
 80078a0:	6852      	ldr	r2, [r2, #4]
 80078a2:	4637      	mov	r7, r6
 80078a4:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80078d4 <forward_dense_integer_SSSA+0x238>
 80078a8:	f992 5000 	ldrsb.w	r5, [r2]
 80078ac:	e766      	b.n	800777c <forward_dense_integer_SSSA+0xe0>
 80078ae:	6852      	ldr	r2, [r2, #4]
 80078b0:	eddf 0a08 	vldr	s1, [pc, #32]	; 80078d4 <forward_dense_integer_SSSA+0x238>
 80078b4:	f992 5000 	ldrsb.w	r5, [r2]
 80078b8:	e7bb      	b.n	8007832 <forward_dense_integer_SSSA+0x196>
 80078ba:	2300      	movs	r3, #0
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	deff      	udf	#255	; 0xff
 80078c0:	2300      	movs	r3, #0
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	deff      	udf	#255	; 0xff
 80078c6:	2300      	movs	r3, #0
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	deff      	udf	#255	; 0xff
 80078cc:	2300      	movs	r3, #0
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	deff      	udf	#255	; 0xff
 80078d2:	bf00      	nop
 80078d4:	00000000 	.word	0x00000000

080078d8 <forward_dw_3x3_sssa8_ch>:
 80078d8:	6982      	ldr	r2, [r0, #24]
 80078da:	8813      	ldrh	r3, [r2, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 80a4 	beq.w	8007a2a <forward_dw_3x3_sssa8_ch+0x152>
 80078e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e6:	6854      	ldr	r4, [r2, #4]
 80078e8:	b099      	sub	sp, #100	; 0x64
 80078ea:	6861      	ldr	r1, [r4, #4]
 80078ec:	b101      	cbz	r1, 80078f0 <forward_dw_3x3_sssa8_ch+0x18>
 80078ee:	6809      	ldr	r1, [r1, #0]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	f000 80b3 	beq.w	8007a5c <forward_dw_3x3_sssa8_ch+0x184>
 80078f6:	6922      	ldr	r2, [r4, #16]
 80078f8:	b102      	cbz	r2, 80078fc <forward_dw_3x3_sssa8_ch+0x24>
 80078fa:	6812      	ldr	r2, [r2, #0]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	f000 80a8 	beq.w	8007a52 <forward_dw_3x3_sssa8_ch+0x17a>
 8007902:	69e5      	ldr	r5, [r4, #28]
 8007904:	2d00      	cmp	r5, #0
 8007906:	f000 809c 	beq.w	8007a42 <forward_dw_3x3_sssa8_ch+0x16a>
 800790a:	8b26      	ldrh	r6, [r4, #24]
 800790c:	682f      	ldr	r7, [r5, #0]
 800790e:	2e01      	cmp	r6, #1
 8007910:	f240 8099 	bls.w	8007a46 <forward_dw_3x3_sssa8_ch+0x16e>
 8007914:	686d      	ldr	r5, [r5, #4]
 8007916:	2b03      	cmp	r3, #3
 8007918:	f000 80a3 	beq.w	8007a62 <forward_dw_3x3_sssa8_ch+0x18a>
 800791c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 8093 	beq.w	8007a4a <forward_dw_3x3_sssa8_ch+0x172>
 8007924:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007926:	b104      	cbz	r4, 800792a <forward_dw_3x3_sssa8_ch+0x52>
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	681c      	ldr	r4, [r3, #0]
 800792c:	69ab      	ldr	r3, [r5, #24]
 800792e:	68d6      	ldr	r6, [r2, #12]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8007936:	9316      	str	r3, [sp, #88]	; 0x58
 8007938:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800793a:	68cc      	ldr	r4, [r1, #12]
 800793c:	9314      	str	r3, [sp, #80]	; 0x50
 800793e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8007940:	68f0      	ldr	r0, [r6, #12]
 8007942:	680d      	ldr	r5, [r1, #0]
 8007944:	9012      	str	r0, [sp, #72]	; 0x48
 8007946:	f8d6 b008 	ldr.w	fp, [r6, #8]
 800794a:	9315      	str	r3, [sp, #84]	; 0x54
 800794c:	683e      	ldr	r6, [r7, #0]
 800794e:	88a3      	ldrh	r3, [r4, #4]
 8007950:	e9d4 0a02 	ldrd	r0, sl, [r4, #8]
 8007954:	6814      	ldr	r4, [r2, #0]
 8007956:	9013      	str	r0, [sp, #76]	; 0x4c
 8007958:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800795c:	9017      	str	r0, [sp, #92]	; 0x5c
 800795e:	2d00      	cmp	r5, #0
 8007960:	d068      	beq.n	8007a34 <forward_dw_3x3_sssa8_ch+0x15c>
 8007962:	6868      	ldr	r0, [r5, #4]
 8007964:	2800      	cmp	r0, #0
 8007966:	d065      	beq.n	8007a34 <forward_dw_3x3_sssa8_ch+0x15c>
 8007968:	f8b5 e002 	ldrh.w	lr, [r5, #2]
 800796c:	f1be 0f00 	cmp.w	lr, #0
 8007970:	d060      	beq.n	8007a34 <forward_dw_3x3_sssa8_ch+0x15c>
 8007972:	6800      	ldr	r0, [r0, #0]
 8007974:	ed90 0a00 	vldr	s0, [r0]
 8007978:	2c00      	cmp	r4, #0
 800797a:	d058      	beq.n	8007a2e <forward_dw_3x3_sssa8_ch+0x156>
 800797c:	6860      	ldr	r0, [r4, #4]
 800797e:	2800      	cmp	r0, #0
 8007980:	d055      	beq.n	8007a2e <forward_dw_3x3_sssa8_ch+0x156>
 8007982:	f8b4 e002 	ldrh.w	lr, [r4, #2]
 8007986:	f1be 0f00 	cmp.w	lr, #0
 800798a:	d050      	beq.n	8007a2e <forward_dw_3x3_sssa8_ch+0x156>
 800798c:	6800      	ldr	r0, [r0, #0]
 800798e:	edd0 0a00 	vldr	s1, [r0]
 8007992:	6988      	ldr	r0, [r1, #24]
 8007994:	6992      	ldr	r2, [r2, #24]
 8007996:	69b9      	ldr	r1, [r7, #24]
 8007998:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800799c:	6887      	ldr	r7, [r0, #8]
 800799e:	f8d1 8008 	ldr.w	r8, [r1, #8]
 80079a2:	b116      	cbz	r6, 80079aa <forward_dw_3x3_sssa8_ch+0xd2>
 80079a4:	6876      	ldr	r6, [r6, #4]
 80079a6:	b106      	cbz	r6, 80079aa <forward_dw_3x3_sssa8_ch+0xd2>
 80079a8:	6836      	ldr	r6, [r6, #0]
 80079aa:	b13d      	cbz	r5, 80079bc <forward_dw_3x3_sssa8_ch+0xe4>
 80079ac:	6869      	ldr	r1, [r5, #4]
 80079ae:	2900      	cmp	r1, #0
 80079b0:	d043      	beq.n	8007a3a <forward_dw_3x3_sssa8_ch+0x162>
 80079b2:	886d      	ldrh	r5, [r5, #2]
 80079b4:	b115      	cbz	r5, 80079bc <forward_dw_3x3_sssa8_ch+0xe4>
 80079b6:	6849      	ldr	r1, [r1, #4]
 80079b8:	f991 5000 	ldrsb.w	r5, [r1]
 80079bc:	b13c      	cbz	r4, 80079ce <forward_dw_3x3_sssa8_ch+0xf6>
 80079be:	6861      	ldr	r1, [r4, #4]
 80079c0:	2900      	cmp	r1, #0
 80079c2:	d03c      	beq.n	8007a3e <forward_dw_3x3_sssa8_ch+0x166>
 80079c4:	8864      	ldrh	r4, [r4, #2]
 80079c6:	b114      	cbz	r4, 80079ce <forward_dw_3x3_sssa8_ch+0xf6>
 80079c8:	6849      	ldr	r1, [r1, #4]
 80079ca:	f991 4000 	ldrsb.w	r4, [r1]
 80079ce:	9311      	str	r3, [sp, #68]	; 0x44
 80079d0:	edcd 0a10 	vstr	s1, [sp, #64]	; 0x40
 80079d4:	ed8d 0a0f 	vstr	s0, [sp, #60]	; 0x3c
 80079d8:	e9dc 0100 	ldrd	r0, r1, [ip]
 80079dc:	f005 f898 	bl	800cb10 <ai_array_get_byte_size>
 80079e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079e2:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80079e6:	eddd 0a10 	vldr	s1, [sp, #64]	; 0x40
 80079ea:	9209      	str	r2, [sp, #36]	; 0x24
 80079ec:	fa1f f28a 	uxth.w	r2, sl
 80079f0:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
 80079f4:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80079f8:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
 80079fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80079fe:	4638      	mov	r0, r7
 8007a00:	9303      	str	r3, [sp, #12]
 8007a02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a04:	e9cd 5404 	strd	r5, r4, [sp, #16]
 8007a08:	9302      	str	r3, [sp, #8]
 8007a0a:	fa1f f48b 	uxth.w	r4, fp
 8007a0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a10:	9408      	str	r4, [sp, #32]
 8007a12:	2400      	movs	r4, #0
 8007a14:	e9cd 8300 	strd	r8, r3, [sp]
 8007a18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a1a:	940a      	str	r4, [sp, #40]	; 0x28
 8007a1c:	e9cd 6906 	strd	r6, r9, [sp, #24]
 8007a20:	f000 fbd6 	bl	80081d0 <forward_lite_dw_3x3_sssa8_ch>
 8007a24:	b019      	add	sp, #100	; 0x64
 8007a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	deff      	udf	#255	; 0xff
 8007a2e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8007a68 <forward_dw_3x3_sssa8_ch+0x190>
 8007a32:	e7ae      	b.n	8007992 <forward_dw_3x3_sssa8_ch+0xba>
 8007a34:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007a68 <forward_dw_3x3_sssa8_ch+0x190>
 8007a38:	e79e      	b.n	8007978 <forward_dw_3x3_sssa8_ch+0xa0>
 8007a3a:	460d      	mov	r5, r1
 8007a3c:	e7be      	b.n	80079bc <forward_dw_3x3_sssa8_ch+0xe4>
 8007a3e:	460c      	mov	r4, r1
 8007a40:	e7c5      	b.n	80079ce <forward_dw_3x3_sssa8_ch+0xf6>
 8007a42:	462f      	mov	r7, r5
 8007a44:	e767      	b.n	8007916 <forward_dw_3x3_sssa8_ch+0x3e>
 8007a46:	2500      	movs	r5, #0
 8007a48:	e765      	b.n	8007916 <forward_dw_3x3_sssa8_ch+0x3e>
 8007a4a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007a4c:	b922      	cbnz	r2, 8007a58 <forward_dw_3x3_sssa8_ch+0x180>
 8007a4e:	6993      	ldr	r3, [r2, #24]
 8007a50:	deff      	udf	#255	; 0xff
 8007a52:	2300      	movs	r3, #0
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	deff      	udf	#255	; 0xff
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	deff      	udf	#255	; 0xff
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	deff      	udf	#255	; 0xff
 8007a62:	2300      	movs	r3, #0
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	deff      	udf	#255	; 0xff
 8007a68:	00000000 	.word	0x00000000

08007a6c <forward_pad>:
 8007a6c:	7f03      	ldrb	r3, [r0, #28]
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d80b      	bhi.n	8007a8a <forward_pad+0x1e>
 8007a72:	e8df f003 	tbb	[pc, r3]
 8007a76:	0608      	.short	0x0608
 8007a78:	0204      	.short	0x0204
 8007a7a:	f000 b863 	b.w	8007b44 <forward_pad_8bit_ch1st_3x3_constant>
 8007a7e:	f000 b8f3 	b.w	8007c68 <forward_pad_edge>
 8007a82:	f000 b933 	b.w	8007cec <forward_pad_reflect>
 8007a86:	f000 b8a7 	b.w	8007bd8 <forward_pad_constant>
 8007a8a:	4770      	bx	lr

08007a8c <forward_sm_integer>:
 8007a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a90:	6983      	ldr	r3, [r0, #24]
 8007a92:	b086      	sub	sp, #24
 8007a94:	881f      	ldrh	r7, [r3, #0]
 8007a96:	2f00      	cmp	r7, #0
 8007a98:	d042      	beq.n	8007b20 <forward_sm_integer+0x94>
 8007a9a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8007a9e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8007aa2:	b106      	cbz	r6, 8007aa6 <forward_sm_integer+0x1a>
 8007aa4:	6836      	ldr	r6, [r6, #0]
 8007aa6:	2f01      	cmp	r7, #1
 8007aa8:	d043      	beq.n	8007b32 <forward_sm_integer+0xa6>
 8007aaa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d044      	beq.n	8007b3c <forward_sm_integer+0xb0>
 8007ab2:	f8d3 e000 	ldr.w	lr, [r3]
 8007ab6:	e9d6 1502 	ldrd	r1, r5, [r6, #8]
 8007aba:	f8de 300c 	ldr.w	r3, [lr, #12]
 8007abe:	0a09      	lsrs	r1, r1, #8
 8007ac0:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8007ac4:	686b      	ldr	r3, [r5, #4]
 8007ac6:	d032      	beq.n	8007b2e <forward_sm_integer+0xa2>
 8007ac8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8007acc:	2201      	movs	r2, #1
 8007ace:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ad2:	428d      	cmp	r5, r1
 8007ad4:	fb04 f202 	mul.w	r2, r4, r2
 8007ad8:	d1f9      	bne.n	8007ace <forward_sm_integer+0x42>
 8007ada:	69c1      	ldr	r1, [r0, #28]
 8007adc:	2f03      	cmp	r7, #3
 8007ade:	688c      	ldr	r4, [r1, #8]
 8007ae0:	d927      	bls.n	8007b32 <forward_sm_integer+0xa6>
 8007ae2:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8007ae6:	b339      	cbz	r1, 8007b38 <forward_sm_integer+0xac>
 8007ae8:	6809      	ldr	r1, [r1, #0]
 8007aea:	69b0      	ldr	r0, [r6, #24]
 8007aec:	6989      	ldr	r1, [r1, #24]
 8007aee:	4e14      	ldr	r6, [pc, #80]	; (8007b40 <forward_sm_integer+0xb4>)
 8007af0:	688d      	ldr	r5, [r1, #8]
 8007af2:	6801      	ldr	r1, [r0, #0]
 8007af4:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8007af8:	42b1      	cmp	r1, r6
 8007afa:	f8de 6018 	ldr.w	r6, [lr, #24]
 8007afe:	6881      	ldr	r1, [r0, #8]
 8007b00:	68b0      	ldr	r0, [r6, #8]
 8007b02:	9505      	str	r5, [sp, #20]
 8007b04:	68a5      	ldr	r5, [r4, #8]
 8007b06:	9504      	str	r5, [sp, #16]
 8007b08:	6865      	ldr	r5, [r4, #4]
 8007b0a:	9503      	str	r5, [sp, #12]
 8007b0c:	6824      	ldr	r4, [r4, #0]
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	e9cd c401 	strd	ip, r4, [sp, #4]
 8007b14:	d006      	beq.n	8007b24 <forward_sm_integer+0x98>
 8007b16:	f002 fab9 	bl	800a08c <forward_lite_nl_softmax_iu8ou8>
 8007b1a:	b006      	add	sp, #24
 8007b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	deff      	udf	#255	; 0xff
 8007b24:	f002 fab0 	bl	800a088 <forward_lite_nl_softmax_is8os8>
 8007b28:	b006      	add	sp, #24
 8007b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b2e:	2201      	movs	r2, #1
 8007b30:	e7d3      	b.n	8007ada <forward_sm_integer+0x4e>
 8007b32:	2300      	movs	r3, #0
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	deff      	udf	#255	; 0xff
 8007b38:	698b      	ldr	r3, [r1, #24]
 8007b3a:	deff      	udf	#255	; 0xff
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	deff      	udf	#255	; 0xff
 8007b40:	00840440 	.word	0x00840440

08007b44 <forward_pad_8bit_ch1st_3x3_constant>:
 8007b44:	6982      	ldr	r2, [r0, #24]
 8007b46:	8813      	ldrh	r3, [r2, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d03e      	beq.n	8007bca <forward_pad_8bit_ch1st_3x3_constant+0x86>
 8007b4c:	6852      	ldr	r2, [r2, #4]
 8007b4e:	6851      	ldr	r1, [r2, #4]
 8007b50:	b101      	cbz	r1, 8007b54 <forward_pad_8bit_ch1st_3x3_constant+0x10>
 8007b52:	6809      	ldr	r1, [r1, #0]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d03c      	beq.n	8007bd2 <forward_pad_8bit_ch1st_3x3_constant+0x8e>
 8007b58:	6913      	ldr	r3, [r2, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d037      	beq.n	8007bce <forward_pad_8bit_ch1st_3x3_constant+0x8a>
 8007b5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b62:	e9d0 5209 	ldrd	r5, r2, [r0, #36]	; 0x24
 8007b66:	681f      	ldr	r7, [r3, #0]
 8007b68:	b085      	sub	sp, #20
 8007b6a:	68cb      	ldr	r3, [r1, #12]
 8007b6c:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
 8007b70:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8007b74:	f9b5 900c 	ldrsh.w	r9, [r5, #12]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	6892      	ldr	r2, [r2, #8]
 8007b7c:	e9d5 0400 	ldrd	r0, r4, [r5]
 8007b80:	e9d1 6105 	ldrd	r6, r1, [r1, #20]
 8007b84:	4320      	orrs	r0, r4
 8007b86:	6875      	ldr	r5, [r6, #4]
 8007b88:	b204      	sxth	r4, r0
 8007b8a:	6888      	ldr	r0, [r1, #8]
 8007b8c:	e9d7 7105 	ldrd	r7, r1, [r7, #20]
 8007b90:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8007b94:	6889      	ldr	r1, [r1, #8]
 8007b96:	68f7      	ldr	r7, [r6, #12]
 8007b98:	b974      	cbnz	r4, 8007bb8 <forward_pad_8bit_ch1st_3x3_constant+0x74>
 8007b9a:	f1b8 0f02 	cmp.w	r8, #2
 8007b9e:	d10b      	bne.n	8007bb8 <forward_pad_8bit_ch1st_3x3_constant+0x74>
 8007ba0:	f1b9 0f02 	cmp.w	r9, #2
 8007ba4:	d108      	bne.n	8007bb8 <forward_pad_8bit_ch1st_3x3_constant+0x74>
 8007ba6:	e9cd 7e02 	strd	r7, lr, [sp, #8]
 8007baa:	e9cd c500 	strd	ip, r5, [sp]
 8007bae:	f002 fa6f 	bl	800a090 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>
 8007bb2:	b005      	add	sp, #20
 8007bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bb8:	e9cd 7e02 	strd	r7, lr, [sp, #8]
 8007bbc:	e9cd c500 	strd	ip, r5, [sp]
 8007bc0:	f002 fa9a 	bl	800a0f8 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>
 8007bc4:	b005      	add	sp, #20
 8007bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	deff      	udf	#255	; 0xff
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	deff      	udf	#255	; 0xff
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	deff      	udf	#255	; 0xff

08007bd8 <forward_pad_constant>:
 8007bd8:	6982      	ldr	r2, [r0, #24]
 8007bda:	8813      	ldrh	r3, [r2, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d03b      	beq.n	8007c58 <forward_pad_constant+0x80>
 8007be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be4:	6852      	ldr	r2, [r2, #4]
 8007be6:	b088      	sub	sp, #32
 8007be8:	6854      	ldr	r4, [r2, #4]
 8007bea:	b104      	cbz	r4, 8007bee <forward_pad_constant+0x16>
 8007bec:	6824      	ldr	r4, [r4, #0]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d034      	beq.n	8007c5c <forward_pad_constant+0x84>
 8007bf2:	6913      	ldr	r3, [r2, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d034      	beq.n	8007c62 <forward_pad_constant+0x8a>
 8007bf8:	6819      	ldr	r1, [r3, #0]
 8007bfa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007bfc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007bfe:	f9b5 600c 	ldrsh.w	r6, [r5, #12]
 8007c02:	69a3      	ldr	r3, [r4, #24]
 8007c04:	6967      	ldr	r7, [r4, #20]
 8007c06:	f8d3 8000 	ldr.w	r8, [r3]
 8007c0a:	6892      	ldr	r2, [r2, #8]
 8007c0c:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 8007c10:	e9d0 ec02 	ldrd	lr, ip, [r0, #8]
 8007c14:	6889      	ldr	r1, [r1, #8]
 8007c16:	fb0e f606 	mul.w	r6, lr, r6
 8007c1a:	6898      	ldr	r0, [r3, #8]
 8007c1c:	f3c8 13c6 	ubfx	r3, r8, #7, #7
 8007c20:	9606      	str	r6, [sp, #24]
 8007c22:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 8007c26:	fb0e f606 	mul.w	r6, lr, r6
 8007c2a:	9605      	str	r6, [sp, #20]
 8007c2c:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 8007c30:	fb0c f606 	mul.w	r6, ip, r6
 8007c34:	9604      	str	r6, [sp, #16]
 8007c36:	f9b5 5000 	ldrsh.w	r5, [r5]
 8007c3a:	fb0c f505 	mul.w	r5, ip, r5
 8007c3e:	9503      	str	r5, [sp, #12]
 8007c40:	68fd      	ldr	r5, [r7, #12]
 8007c42:	9502      	str	r5, [sp, #8]
 8007c44:	687d      	ldr	r5, [r7, #4]
 8007c46:	9501      	str	r5, [sp, #4]
 8007c48:	68e4      	ldr	r4, [r4, #12]
 8007c4a:	68e4      	ldr	r4, [r4, #12]
 8007c4c:	9400      	str	r4, [sp, #0]
 8007c4e:	f002 fb13 	bl	800a278 <forward_lite_pad_constant>
 8007c52:	b008      	add	sp, #32
 8007c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	deff      	udf	#255	; 0xff
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	deff      	udf	#255	; 0xff
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	deff      	udf	#255	; 0xff
 8007c66:	bf00      	nop

08007c68 <forward_pad_edge>:
 8007c68:	6982      	ldr	r2, [r0, #24]
 8007c6a:	8813      	ldrh	r3, [r2, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d035      	beq.n	8007cdc <forward_pad_edge+0x74>
 8007c70:	6851      	ldr	r1, [r2, #4]
 8007c72:	684a      	ldr	r2, [r1, #4]
 8007c74:	b102      	cbz	r2, 8007c78 <forward_pad_edge+0x10>
 8007c76:	6812      	ldr	r2, [r2, #0]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d031      	beq.n	8007ce0 <forward_pad_edge+0x78>
 8007c7c:	690b      	ldr	r3, [r1, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d031      	beq.n	8007ce6 <forward_pad_edge+0x7e>
 8007c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	b089      	sub	sp, #36	; 0x24
 8007c88:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c8a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8007c8e:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 8007c92:	6990      	ldr	r0, [r2, #24]
 8007c94:	6957      	ldr	r7, [r2, #20]
 8007c96:	6880      	ldr	r0, [r0, #8]
 8007c98:	f8de 200c 	ldr.w	r2, [lr, #12]
 8007c9c:	e9d3 c105 	ldrd	ip, r1, [r3, #20]
 8007ca0:	f9b5 3000 	ldrsh.w	r3, [r5]
 8007ca4:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8007ca8:	6889      	ldr	r1, [r1, #8]
 8007caa:	fb04 f606 	mul.w	r6, r4, r6
 8007cae:	9606      	str	r6, [sp, #24]
 8007cb0:	f8dc c008 	ldr.w	ip, [ip, #8]
 8007cb4:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 8007cb8:	9403      	str	r4, [sp, #12]
 8007cba:	fb0c f606 	mul.w	r6, ip, r6
 8007cbe:	fb03 f404 	mul.w	r4, r3, r4
 8007cc2:	9605      	str	r6, [sp, #20]
 8007cc4:	9404      	str	r4, [sp, #16]
 8007cc6:	68bc      	ldr	r4, [r7, #8]
 8007cc8:	9402      	str	r4, [sp, #8]
 8007cca:	68fc      	ldr	r4, [r7, #12]
 8007ccc:	9401      	str	r4, [sp, #4]
 8007cce:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
 8007cd2:	9400      	str	r4, [sp, #0]
 8007cd4:	f002 fb6c 	bl	800a3b0 <forward_lite_pad_edge>
 8007cd8:	b009      	add	sp, #36	; 0x24
 8007cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	deff      	udf	#255	; 0xff
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	deff      	udf	#255	; 0xff
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	deff      	udf	#255	; 0xff
 8007cea:	bf00      	nop

08007cec <forward_pad_reflect>:
 8007cec:	6982      	ldr	r2, [r0, #24]
 8007cee:	8813      	ldrh	r3, [r2, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d044      	beq.n	8007d7e <forward_pad_reflect+0x92>
 8007cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	6852      	ldr	r2, [r2, #4]
 8007cfa:	b08f      	sub	sp, #60	; 0x3c
 8007cfc:	6857      	ldr	r7, [r2, #4]
 8007cfe:	b107      	cbz	r7, 8007d02 <forward_pad_reflect+0x16>
 8007d00:	683f      	ldr	r7, [r7, #0]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d03d      	beq.n	8007d82 <forward_pad_reflect+0x96>
 8007d06:	6913      	ldr	r3, [r2, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d03d      	beq.n	8007d88 <forward_pad_reflect+0x9c>
 8007d0c:	6819      	ldr	r1, [r3, #0]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	e9d2 8302 	ldrd	r8, r3, [r2, #8]
 8007d14:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8007d18:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 8007d1c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007d1e:	e9d1 0105 	ldrd	r0, r1, [r1, #20]
 8007d22:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8007d26:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 8007d2a:	f9b4 b000 	ldrsh.w	fp, [r4]
 8007d2e:	6889      	ldr	r1, [r1, #8]
 8007d30:	e9d0 5c02 	ldrd	r5, ip, [r0, #8]
 8007d34:	e9d7 7005 	ldrd	r7, r0, [r7, #20]
 8007d38:	fb05 f606 	mul.w	r6, r5, r6
 8007d3c:	6880      	ldr	r0, [r0, #8]
 8007d3e:	e9d2 a902 	ldrd	sl, r9, [r2, #8]
 8007d42:	bf2c      	ite	cs
 8007d44:	6912      	ldrcs	r2, [r2, #16]
 8007d46:	2201      	movcc	r2, #1
 8007d48:	960c      	str	r6, [sp, #48]	; 0x30
 8007d4a:	fb05 f60e 	mul.w	r6, r5, lr
 8007d4e:	960b      	str	r6, [sp, #44]	; 0x2c
 8007d50:	fb0c f60b 	mul.w	r6, ip, fp
 8007d54:	960a      	str	r6, [sp, #40]	; 0x28
 8007d56:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
 8007d5a:	9409      	str	r4, [sp, #36]	; 0x24
 8007d5c:	e9cd eb07 	strd	lr, fp, [sp, #28]
 8007d60:	e9cd c505 	strd	ip, r5, [sp, #20]
 8007d64:	68bc      	ldr	r4, [r7, #8]
 8007d66:	9404      	str	r4, [sp, #16]
 8007d68:	68fc      	ldr	r4, [r7, #12]
 8007d6a:	f8cd 8000 	str.w	r8, [sp]
 8007d6e:	9403      	str	r4, [sp, #12]
 8007d70:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8007d74:	f002 fb8e 	bl	800a494 <forward_lite_pad_reflect>
 8007d78:	b00f      	add	sp, #60	; 0x3c
 8007d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	deff      	udf	#255	; 0xff
 8007d82:	2300      	movs	r3, #0
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	deff      	udf	#255	; 0xff
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	deff      	udf	#255	; 0xff

08007d8c <forward_ap_integer_INT8>:
 8007d8c:	6983      	ldr	r3, [r0, #24]
 8007d8e:	881a      	ldrh	r2, [r3, #0]
 8007d90:	2a00      	cmp	r2, #0
 8007d92:	d074      	beq.n	8007e7e <forward_ap_integer_INT8+0xf2>
 8007d94:	6859      	ldr	r1, [r3, #4]
 8007d96:	684b      	ldr	r3, [r1, #4]
 8007d98:	b103      	cbz	r3, 8007d9c <forward_ap_integer_INT8+0x10>
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2a01      	cmp	r2, #1
 8007d9e:	f000 80e0 	beq.w	8007f62 <forward_ap_integer_INT8+0x1d6>
 8007da2:	690a      	ldr	r2, [r1, #16]
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	f000 80df 	beq.w	8007f68 <forward_ap_integer_INT8+0x1dc>
 8007daa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dae:	68de      	ldr	r6, [r3, #12]
 8007db0:	b095      	sub	sp, #84	; 0x54
 8007db2:	6811      	ldr	r1, [r2, #0]
 8007db4:	681c      	ldr	r4, [r3, #0]
 8007db6:	f8d3 b018 	ldr.w	fp, [r3, #24]
 8007dba:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8007dbe:	8932      	ldrh	r2, [r6, #8]
 8007dc0:	89b3      	ldrh	r3, [r6, #12]
 8007dc2:	8b86      	ldrh	r6, [r0, #28]
 8007dc4:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8007dc6:	960d      	str	r6, [sp, #52]	; 0x34
 8007dc8:	8c06      	ldrh	r6, [r0, #32]
 8007dca:	68cd      	ldr	r5, [r1, #12]
 8007dcc:	960e      	str	r6, [sp, #56]	; 0x38
 8007dce:	88be      	ldrh	r6, [r7, #4]
 8007dd0:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8007dd4:	960f      	str	r6, [sp, #60]	; 0x3c
 8007dd6:	883e      	ldrh	r6, [r7, #0]
 8007dd8:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 8007ddc:	9610      	str	r6, [sp, #64]	; 0x40
 8007dde:	8c86      	ldrh	r6, [r0, #36]	; 0x24
 8007de0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8007de2:	9611      	str	r6, [sp, #68]	; 0x44
 8007de4:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8007de8:	680e      	ldr	r6, [r1, #0]
 8007dea:	9012      	str	r0, [sp, #72]	; 0x48
 8007dec:	2c00      	cmp	r4, #0
 8007dee:	d060      	beq.n	8007eb2 <forward_ap_integer_INT8+0x126>
 8007df0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8007df4:	f1b9 0f00 	cmp.w	r9, #0
 8007df8:	d043      	beq.n	8007e82 <forward_ap_integer_INT8+0xf6>
 8007dfa:	8865      	ldrh	r5, [r4, #2]
 8007dfc:	2d00      	cmp	r5, #0
 8007dfe:	d06e      	beq.n	8007ede <forward_ap_integer_INT8+0x152>
 8007e00:	f8d9 1000 	ldr.w	r1, [r9]
 8007e04:	ed91 0a00 	vldr	s0, [r1]
 8007e08:	2e00      	cmp	r6, #0
 8007e0a:	d06c      	beq.n	8007ee6 <forward_ap_integer_INT8+0x15a>
 8007e0c:	6877      	ldr	r7, [r6, #4]
 8007e0e:	2f00      	cmp	r7, #0
 8007e10:	d03e      	beq.n	8007e90 <forward_ap_integer_INT8+0x104>
 8007e12:	8871      	ldrh	r1, [r6, #2]
 8007e14:	9113      	str	r1, [sp, #76]	; 0x4c
 8007e16:	2900      	cmp	r1, #0
 8007e18:	d053      	beq.n	8007ec2 <forward_ap_integer_INT8+0x136>
 8007e1a:	683d      	ldr	r5, [r7, #0]
 8007e1c:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007e20:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007e24:	edd5 0a00 	vldr	s1, [r5]
 8007e28:	f1b9 0f00 	cmp.w	r9, #0
 8007e2c:	d055      	beq.n	8007eda <forward_ap_integer_INT8+0x14e>
 8007e2e:	8864      	ldrh	r4, [r4, #2]
 8007e30:	2c00      	cmp	r4, #0
 8007e32:	d039      	beq.n	8007ea8 <forward_ap_integer_INT8+0x11c>
 8007e34:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8007e38:	f994 4000 	ldrsb.w	r4, [r4]
 8007e3c:	2e00      	cmp	r6, #0
 8007e3e:	d036      	beq.n	8007eae <forward_ap_integer_INT8+0x122>
 8007e40:	2f00      	cmp	r7, #0
 8007e42:	d034      	beq.n	8007eae <forward_ap_integer_INT8+0x122>
 8007e44:	8875      	ldrh	r5, [r6, #2]
 8007e46:	9513      	str	r5, [sp, #76]	; 0x4c
 8007e48:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8007e4a:	b115      	cbz	r5, 8007e52 <forward_ap_integer_INT8+0xc6>
 8007e4c:	687d      	ldr	r5, [r7, #4]
 8007e4e:	f995 5000 	ldrsb.w	r5, [r5]
 8007e52:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 8007e56:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007e58:	9406      	str	r4, [sp, #24]
 8007e5a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8007e5c:	9405      	str	r4, [sp, #20]
 8007e5e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8007e60:	9404      	str	r4, [sp, #16]
 8007e62:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007e64:	9403      	str	r4, [sp, #12]
 8007e66:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007e68:	9402      	str	r4, [sp, #8]
 8007e6a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007e6c:	e9cd e807 	strd	lr, r8, [sp, #28]
 8007e70:	e9cd c400 	strd	ip, r4, [sp]
 8007e74:	f000 f986 	bl	8008184 <forward_lite_avepool_is8os8>
 8007e78:	b015      	add	sp, #84	; 0x54
 8007e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7e:	6853      	ldr	r3, [r2, #4]
 8007e80:	deff      	udf	#255	; 0xff
 8007e82:	2e00      	cmp	r6, #0
 8007e84:	d039      	beq.n	8007efa <forward_ap_integer_INT8+0x16e>
 8007e86:	6877      	ldr	r7, [r6, #4]
 8007e88:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8007f6c <forward_ap_integer_INT8+0x1e0>
 8007e8c:	2f00      	cmp	r7, #0
 8007e8e:	d1c0      	bne.n	8007e12 <forward_ap_integer_INT8+0x86>
 8007e90:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007e94:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007e98:	f1b9 0f00 	cmp.w	r9, #0
 8007e9c:	d05c      	beq.n	8007f58 <forward_ap_integer_INT8+0x1cc>
 8007e9e:	8864      	ldrh	r4, [r4, #2]
 8007ea0:	2c00      	cmp	r4, #0
 8007ea2:	d152      	bne.n	8007f4a <forward_ap_integer_INT8+0x1be>
 8007ea4:	eddf 0a31 	vldr	s1, [pc, #196]	; 8007f6c <forward_ap_integer_INT8+0x1e0>
 8007ea8:	2400      	movs	r4, #0
 8007eaa:	2f00      	cmp	r7, #0
 8007eac:	d1ca      	bne.n	8007e44 <forward_ap_integer_INT8+0xb8>
 8007eae:	2500      	movs	r5, #0
 8007eb0:	e7cf      	b.n	8007e52 <forward_ap_integer_INT8+0xc6>
 8007eb2:	b316      	cbz	r6, 8007efa <forward_ap_integer_INT8+0x16e>
 8007eb4:	6877      	ldr	r7, [r6, #4]
 8007eb6:	b35f      	cbz	r7, 8007f10 <forward_ap_integer_INT8+0x184>
 8007eb8:	8871      	ldrh	r1, [r6, #2]
 8007eba:	9113      	str	r1, [sp, #76]	; 0x4c
 8007ebc:	bb99      	cbnz	r1, 8007f26 <forward_ap_integer_INT8+0x19a>
 8007ebe:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8007f6c <forward_ap_integer_INT8+0x1e0>
 8007ec2:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007ec6:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007eca:	b194      	cbz	r4, 8007ef2 <forward_ap_integer_INT8+0x166>
 8007ecc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8007ed0:	eddf 0a26 	vldr	s1, [pc, #152]	; 8007f6c <forward_ap_integer_INT8+0x1e0>
 8007ed4:	f1b9 0f00 	cmp.w	r9, #0
 8007ed8:	d1a9      	bne.n	8007e2e <forward_ap_integer_INT8+0xa2>
 8007eda:	464c      	mov	r4, r9
 8007edc:	e7b4      	b.n	8007e48 <forward_ap_integer_INT8+0xbc>
 8007ede:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8007f6c <forward_ap_integer_INT8+0x1e0>
 8007ee2:	2e00      	cmp	r6, #0
 8007ee4:	d192      	bne.n	8007e0c <forward_ap_integer_INT8+0x80>
 8007ee6:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007eea:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007eee:	bb25      	cbnz	r5, 8007f3a <forward_ap_integer_INT8+0x1ae>
 8007ef0:	462c      	mov	r4, r5
 8007ef2:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8007f6c <forward_ap_integer_INT8+0x1e0>
 8007ef6:	4625      	mov	r5, r4
 8007ef8:	e7ab      	b.n	8007e52 <forward_ap_integer_INT8+0xc6>
 8007efa:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8007f6c <forward_ap_integer_INT8+0x1e0>
 8007efe:	4634      	mov	r4, r6
 8007f00:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007f04:	4635      	mov	r5, r6
 8007f06:	eef0 0a40 	vmov.f32	s1, s0
 8007f0a:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007f0e:	e7a0      	b.n	8007e52 <forward_ap_integer_INT8+0xc6>
 8007f10:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8007f6c <forward_ap_integer_INT8+0x1e0>
 8007f14:	463c      	mov	r4, r7
 8007f16:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007f1a:	463d      	mov	r5, r7
 8007f1c:	eef0 0a40 	vmov.f32	s1, s0
 8007f20:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007f24:	e795      	b.n	8007e52 <forward_ap_integer_INT8+0xc6>
 8007f26:	683d      	ldr	r5, [r7, #0]
 8007f28:	f8db 0008 	ldr.w	r0, [fp, #8]
 8007f2c:	f8da 1008 	ldr.w	r1, [sl, #8]
 8007f30:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007f6c <forward_ap_integer_INT8+0x1e0>
 8007f34:	edd5 0a00 	vldr	s1, [r5]
 8007f38:	e788      	b.n	8007e4c <forward_ap_integer_INT8+0xc0>
 8007f3a:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8007f3e:	4635      	mov	r5, r6
 8007f40:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8007f6c <forward_ap_integer_INT8+0x1e0>
 8007f44:	f994 4000 	ldrsb.w	r4, [r4]
 8007f48:	e783      	b.n	8007e52 <forward_ap_integer_INT8+0xc6>
 8007f4a:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8007f4e:	eddf 0a07 	vldr	s1, [pc, #28]	; 8007f6c <forward_ap_integer_INT8+0x1e0>
 8007f52:	f994 4000 	ldrsb.w	r4, [r4]
 8007f56:	e7aa      	b.n	8007eae <forward_ap_integer_INT8+0x122>
 8007f58:	464c      	mov	r4, r9
 8007f5a:	eddf 0a04 	vldr	s1, [pc, #16]	; 8007f6c <forward_ap_integer_INT8+0x1e0>
 8007f5e:	464d      	mov	r5, r9
 8007f60:	e777      	b.n	8007e52 <forward_ap_integer_INT8+0xc6>
 8007f62:	2300      	movs	r3, #0
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	deff      	udf	#255	; 0xff
 8007f68:	68d3      	ldr	r3, [r2, #12]
 8007f6a:	deff      	udf	#255	; 0xff
 8007f6c:	00000000 	.word	0x00000000

08007f70 <forward_pw_sssa8_ch>:
 8007f70:	6982      	ldr	r2, [r0, #24]
 8007f72:	8813      	ldrh	r3, [r2, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 80a4 	beq.w	80080c2 <forward_pw_sssa8_ch+0x152>
 8007f7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7e:	6854      	ldr	r4, [r2, #4]
 8007f80:	b099      	sub	sp, #100	; 0x64
 8007f82:	6861      	ldr	r1, [r4, #4]
 8007f84:	b101      	cbz	r1, 8007f88 <forward_pw_sssa8_ch+0x18>
 8007f86:	6809      	ldr	r1, [r1, #0]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	f000 80b3 	beq.w	80080f4 <forward_pw_sssa8_ch+0x184>
 8007f8e:	6922      	ldr	r2, [r4, #16]
 8007f90:	b102      	cbz	r2, 8007f94 <forward_pw_sssa8_ch+0x24>
 8007f92:	6812      	ldr	r2, [r2, #0]
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	f000 80a8 	beq.w	80080ea <forward_pw_sssa8_ch+0x17a>
 8007f9a:	69e5      	ldr	r5, [r4, #28]
 8007f9c:	2d00      	cmp	r5, #0
 8007f9e:	f000 809c 	beq.w	80080da <forward_pw_sssa8_ch+0x16a>
 8007fa2:	8b26      	ldrh	r6, [r4, #24]
 8007fa4:	f8d5 e000 	ldr.w	lr, [r5]
 8007fa8:	2e01      	cmp	r6, #1
 8007faa:	f240 8098 	bls.w	80080de <forward_pw_sssa8_ch+0x16e>
 8007fae:	686d      	ldr	r5, [r5, #4]
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	f000 80a2 	beq.w	80080fa <forward_pw_sssa8_ch+0x18a>
 8007fb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 8092 	beq.w	80080e2 <forward_pw_sssa8_ch+0x172>
 8007fbe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007fc0:	b104      	cbz	r4, 8007fc4 <forward_pw_sssa8_ch+0x54>
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	681c      	ldr	r4, [r3, #0]
 8007fc6:	69ab      	ldr	r3, [r5, #24]
 8007fc8:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	68d4      	ldr	r4, [r2, #12]
 8007fd0:	9316      	str	r3, [sp, #88]	; 0x58
 8007fd2:	88a4      	ldrh	r4, [r4, #4]
 8007fd4:	68cb      	ldr	r3, [r1, #12]
 8007fd6:	9413      	str	r4, [sp, #76]	; 0x4c
 8007fd8:	889c      	ldrh	r4, [r3, #4]
 8007fda:	680d      	ldr	r5, [r1, #0]
 8007fdc:	9412      	str	r4, [sp, #72]	; 0x48
 8007fde:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
 8007fe0:	f8de 6000 	ldr.w	r6, [lr]
 8007fe4:	9415      	str	r4, [sp, #84]	; 0x54
 8007fe6:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8007fea:	e9d3 3b02 	ldrd	r3, fp, [r3, #8]
 8007fee:	9417      	str	r4, [sp, #92]	; 0x5c
 8007ff0:	9314      	str	r3, [sp, #80]	; 0x50
 8007ff2:	6814      	ldr	r4, [r2, #0]
 8007ff4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8007ff6:	2d00      	cmp	r5, #0
 8007ff8:	d068      	beq.n	80080cc <forward_pw_sssa8_ch+0x15c>
 8007ffa:	686f      	ldr	r7, [r5, #4]
 8007ffc:	2f00      	cmp	r7, #0
 8007ffe:	d065      	beq.n	80080cc <forward_pw_sssa8_ch+0x15c>
 8008000:	f8b5 8002 	ldrh.w	r8, [r5, #2]
 8008004:	f1b8 0f00 	cmp.w	r8, #0
 8008008:	d060      	beq.n	80080cc <forward_pw_sssa8_ch+0x15c>
 800800a:	683f      	ldr	r7, [r7, #0]
 800800c:	ed97 0a00 	vldr	s0, [r7]
 8008010:	2c00      	cmp	r4, #0
 8008012:	d058      	beq.n	80080c6 <forward_pw_sssa8_ch+0x156>
 8008014:	6867      	ldr	r7, [r4, #4]
 8008016:	2f00      	cmp	r7, #0
 8008018:	d055      	beq.n	80080c6 <forward_pw_sssa8_ch+0x156>
 800801a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 800801e:	f1b8 0f00 	cmp.w	r8, #0
 8008022:	d050      	beq.n	80080c6 <forward_pw_sssa8_ch+0x156>
 8008024:	683f      	ldr	r7, [r7, #0]
 8008026:	edd7 0a00 	vldr	s1, [r7]
 800802a:	698f      	ldr	r7, [r1, #24]
 800802c:	6992      	ldr	r2, [r2, #24]
 800802e:	f8de 1018 	ldr.w	r1, [lr, #24]
 8008032:	f890 9041 	ldrb.w	r9, [r0, #65]	; 0x41
 8008036:	f8d2 a008 	ldr.w	sl, [r2, #8]
 800803a:	68bf      	ldr	r7, [r7, #8]
 800803c:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8008040:	b116      	cbz	r6, 8008048 <forward_pw_sssa8_ch+0xd8>
 8008042:	6876      	ldr	r6, [r6, #4]
 8008044:	b106      	cbz	r6, 8008048 <forward_pw_sssa8_ch+0xd8>
 8008046:	6836      	ldr	r6, [r6, #0]
 8008048:	b13d      	cbz	r5, 800805a <forward_pw_sssa8_ch+0xea>
 800804a:	6869      	ldr	r1, [r5, #4]
 800804c:	2900      	cmp	r1, #0
 800804e:	d040      	beq.n	80080d2 <forward_pw_sssa8_ch+0x162>
 8008050:	886d      	ldrh	r5, [r5, #2]
 8008052:	b115      	cbz	r5, 800805a <forward_pw_sssa8_ch+0xea>
 8008054:	6849      	ldr	r1, [r1, #4]
 8008056:	f991 5000 	ldrsb.w	r5, [r1]
 800805a:	b13c      	cbz	r4, 800806c <forward_pw_sssa8_ch+0xfc>
 800805c:	6861      	ldr	r1, [r4, #4]
 800805e:	2900      	cmp	r1, #0
 8008060:	d039      	beq.n	80080d6 <forward_pw_sssa8_ch+0x166>
 8008062:	8864      	ldrh	r4, [r4, #2]
 8008064:	b114      	cbz	r4, 800806c <forward_pw_sssa8_ch+0xfc>
 8008066:	6849      	ldr	r1, [r1, #4]
 8008068:	f991 4000 	ldrsb.w	r4, [r1]
 800806c:	9311      	str	r3, [sp, #68]	; 0x44
 800806e:	edcd 0a10 	vstr	s1, [sp, #64]	; 0x40
 8008072:	ed8d 0a0f 	vstr	s0, [sp, #60]	; 0x3c
 8008076:	e9dc 0100 	ldrd	r0, r1, [ip]
 800807a:	f004 fd49 	bl	800cb10 <ai_array_get_byte_size>
 800807e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008080:	eddd 0a10 	vldr	s1, [sp, #64]	; 0x40
 8008084:	fa1f f28b 	uxth.w	r2, fp
 8008088:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
 800808c:	f8bd 1050 	ldrh.w	r1, [sp, #80]	; 0x50
 8008090:	9505      	str	r5, [sp, #20]
 8008092:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
 8008096:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008098:	4638      	mov	r0, r7
 800809a:	9304      	str	r3, [sp, #16]
 800809c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800809e:	e9cd 4606 	strd	r4, r6, [sp, #24]
 80080a2:	e9cd 8302 	strd	r8, r3, [sp, #8]
 80080a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80080a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080aa:	9400      	str	r4, [sp, #0]
 80080ac:	2401      	movs	r4, #1
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080b2:	940a      	str	r4, [sp, #40]	; 0x28
 80080b4:	e9cd 9a08 	strd	r9, sl, [sp, #32]
 80080b8:	f000 fe20 	bl	8008cfc <forward_lite_pw_sssa8_ch>
 80080bc:	b019      	add	sp, #100	; 0x64
 80080be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	deff      	udf	#255	; 0xff
 80080c6:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8008100 <forward_pw_sssa8_ch+0x190>
 80080ca:	e7ae      	b.n	800802a <forward_pw_sssa8_ch+0xba>
 80080cc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008100 <forward_pw_sssa8_ch+0x190>
 80080d0:	e79e      	b.n	8008010 <forward_pw_sssa8_ch+0xa0>
 80080d2:	460d      	mov	r5, r1
 80080d4:	e7c1      	b.n	800805a <forward_pw_sssa8_ch+0xea>
 80080d6:	460c      	mov	r4, r1
 80080d8:	e7c8      	b.n	800806c <forward_pw_sssa8_ch+0xfc>
 80080da:	46ae      	mov	lr, r5
 80080dc:	e768      	b.n	8007fb0 <forward_pw_sssa8_ch+0x40>
 80080de:	2500      	movs	r5, #0
 80080e0:	e766      	b.n	8007fb0 <forward_pw_sssa8_ch+0x40>
 80080e2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80080e4:	b922      	cbnz	r2, 80080f0 <forward_pw_sssa8_ch+0x180>
 80080e6:	6993      	ldr	r3, [r2, #24]
 80080e8:	deff      	udf	#255	; 0xff
 80080ea:	2300      	movs	r3, #0
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	deff      	udf	#255	; 0xff
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	deff      	udf	#255	; 0xff
 80080f4:	2300      	movs	r3, #0
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	deff      	udf	#255	; 0xff
 80080fa:	2300      	movs	r3, #0
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	deff      	udf	#255	; 0xff
 8008100:	00000000 	.word	0x00000000

08008104 <forward_lite_dense_is8os8ws8>:
 8008104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008108:	b08f      	sub	sp, #60	; 0x3c
 800810a:	ee21 0a00 	vmul.f32	s0, s2, s0
 800810e:	469b      	mov	fp, r3
 8008110:	2400      	movs	r4, #0
 8008112:	f99d 3060 	ldrsb.w	r3, [sp, #96]	; 0x60
 8008116:	f10d 0932 	add.w	r9, sp, #50	; 0x32
 800811a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800811e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8008122:	930a      	str	r3, [sp, #40]	; 0x28
 8008124:	4605      	mov	r5, r0
 8008126:	f99d 3064 	ldrsb.w	r3, [sp, #100]	; 0x64
 800812a:	4648      	mov	r0, r9
 800812c:	460e      	mov	r6, r1
 800812e:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 8008132:	f8bd 806c 	ldrh.w	r8, [sp, #108]	; 0x6c
 8008136:	9209      	str	r2, [sp, #36]	; 0x24
 8008138:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
 800813c:	940d      	str	r4, [sp, #52]	; 0x34
 800813e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008140:	f002 fa50 	bl	800a5e4 <align_factor>
 8008144:	900d      	str	r0, [sp, #52]	; 0x34
 8008146:	f1ba 0f00 	cmp.w	sl, #0
 800814a:	d018      	beq.n	800817e <forward_lite_dense_is8os8ws8+0x7a>
 800814c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800814e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008150:	3401      	adds	r4, #1
 8008152:	4630      	mov	r0, r6
 8008154:	9505      	str	r5, [sp, #20]
 8008156:	9306      	str	r3, [sp, #24]
 8008158:	463a      	mov	r2, r7
 800815a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800815c:	4445      	add	r5, r8
 800815e:	f8cd b010 	str.w	fp, [sp, #16]
 8008162:	443e      	add	r6, r7
 8008164:	9303      	str	r3, [sp, #12]
 8008166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008168:	9109      	str	r1, [sp, #36]	; 0x24
 800816a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800816e:	ab0d      	add	r3, sp, #52	; 0x34
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	4643      	mov	r3, r8
 8008174:	f002 fd98 	bl	800aca8 <st_sssa8_fully_connected>
 8008178:	45a2      	cmp	sl, r4
 800817a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800817c:	d1e7      	bne.n	800814e <forward_lite_dense_is8os8ws8+0x4a>
 800817e:	b00f      	add	sp, #60	; 0x3c
 8008180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008184 <forward_lite_avepool_is8os8>:
 8008184:	b410      	push	{r4}
 8008186:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 800818a:	9401      	str	r4, [sp, #4]
 800818c:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8008190:	9402      	str	r4, [sp, #8]
 8008192:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8008196:	9403      	str	r4, [sp, #12]
 8008198:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800819c:	9404      	str	r4, [sp, #16]
 800819e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80081a2:	9405      	str	r4, [sp, #20]
 80081a4:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80081a8:	9406      	str	r4, [sp, #24]
 80081aa:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80081ae:	9407      	str	r4, [sp, #28]
 80081b0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80081b4:	9408      	str	r4, [sp, #32]
 80081b6:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80081ba:	9409      	str	r4, [sp, #36]	; 0x24
 80081bc:	f99d 4028 	ldrsb.w	r4, [sp, #40]	; 0x28
 80081c0:	940a      	str	r4, [sp, #40]	; 0x28
 80081c2:	f99d 402c 	ldrsb.w	r4, [sp, #44]	; 0x2c
 80081c6:	940b      	str	r4, [sp, #44]	; 0x2c
 80081c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081cc:	f002 bbea 	b.w	800a9a4 <st_int8_avepool>

080081d0 <forward_lite_dw_3x3_sssa8_ch>:
 80081d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d4:	b09d      	sub	sp, #116	; 0x74
 80081d6:	461c      	mov	r4, r3
 80081d8:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 80081dc:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80081e0:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 80081e4:	9206      	str	r2, [sp, #24]
 80081e6:	f99d 20a8 	ldrsb.w	r2, [sp, #168]	; 0xa8
 80081ea:	9305      	str	r3, [sp, #20]
 80081ec:	920f      	str	r2, [sp, #60]	; 0x3c
 80081ee:	f8bd 20b8 	ldrh.w	r2, [sp, #184]	; 0xb8
 80081f2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80081f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80081f6:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
 80081fa:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 80081fe:	f99d 70ac 	ldrsb.w	r7, [sp, #172]	; 0xac
 8008202:	f8dd b0b4 	ldr.w	fp, [sp, #180]	; 0xb4
 8008206:	9019      	str	r0, [sp, #100]	; 0x64
 8008208:	9104      	str	r1, [sp, #16]
 800820a:	9217      	str	r2, [sp, #92]	; 0x5c
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 8424 	beq.w	8008a5a <forward_lite_dw_3x3_sssa8_ch+0x88a>
 8008212:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8008216:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8008218:	4621      	mov	r1, r4
 800821a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800821c:	eb03 0209 	add.w	r2, r3, r9
 8008220:	eb09 0304 	add.w	r3, r9, r4
 8008224:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8008228:	9210      	str	r2, [sp, #64]	; 0x40
 800822a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800822c:	461d      	mov	r5, r3
 800822e:	9312      	str	r3, [sp, #72]	; 0x48
 8008230:	f002 fa2a 	bl	800a688 <align_factor_ch>
 8008234:	f06f 0315 	mvn.w	r3, #21
 8008238:	fb03 5304 	mla	r3, r3, r4, r5
 800823c:	9311      	str	r3, [sp, #68]	; 0x44
 800823e:	b1d4      	cbz	r4, 8008276 <forward_lite_dw_3x3_sssa8_ch+0xa6>
 8008240:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008242:	2100      	movs	r1, #0
 8008244:	2601      	movs	r6, #1
 8008246:	f1a3 0c02 	sub.w	ip, r3, #2
 800824a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800824c:	1d18      	adds	r0, r3, #4
 800824e:	f93c 3f02 	ldrsh.w	r3, [ip, #2]!
 8008252:	3101      	adds	r1, #1
 8008254:	1e5a      	subs	r2, r3, #1
 8008256:	fa06 f503 	lsl.w	r5, r6, r3
 800825a:	fa07 f303 	lsl.w	r3, r7, r3
 800825e:	b292      	uxth	r2, r2
 8008260:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 8008264:	2a14      	cmp	r2, #20
 8008266:	f200 83f0 	bhi.w	8008a4a <forward_lite_dw_3x3_sssa8_ch+0x87a>
 800826a:	428c      	cmp	r4, r1
 800826c:	f840 3c04 	str.w	r3, [r0, #-4]
 8008270:	f100 0004 	add.w	r0, r0, #4
 8008274:	dceb      	bgt.n	800824e <forward_lite_dw_3x3_sssa8_ch+0x7e>
 8008276:	9a05      	ldr	r2, [sp, #20]
 8008278:	2c03      	cmp	r4, #3
 800827a:	9b04      	ldr	r3, [sp, #16]
 800827c:	fb04 f202 	mul.w	r2, r4, r2
 8008280:	fb04 f303 	mul.w	r3, r4, r3
 8008284:	9214      	str	r2, [sp, #80]	; 0x50
 8008286:	9a06      	ldr	r2, [sp, #24]
 8008288:	fb03 f202 	mul.w	r2, r3, r2
 800828c:	eba3 0308 	sub.w	r3, r3, r8
 8008290:	9307      	str	r3, [sp, #28]
 8008292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008294:	9218      	str	r2, [sp, #96]	; 0x60
 8008296:	f1c3 0300 	rsb	r3, r3, #0
 800829a:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
 800829e:	bf8c      	ite	hi
 80082a0:	1ee3      	subhi	r3, r4, #3
 80082a2:	2300      	movls	r3, #0
 80082a4:	930a      	str	r3, [sp, #40]	; 0x28
 80082a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 82b6 	beq.w	800881a <forward_lite_dw_3x3_sssa8_ch+0x64a>
 80082ae:	f004 0303 	and.w	r3, r4, #3
 80082b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80082b4:	930d      	str	r3, [sp, #52]	; 0x34
 80082b6:	2a00      	cmp	r2, #0
 80082b8:	f000 82af 	beq.w	800881a <forward_lite_dw_3x3_sssa8_ch+0x64a>
 80082bc:	3b01      	subs	r3, #1
 80082be:	46b4      	mov	ip, r6
 80082c0:	46a0      	mov	r8, r4
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	9315      	str	r3, [sp, #84]	; 0x54
 80082c6:	2300      	movs	r3, #0
 80082c8:	9316      	str	r3, [sp, #88]	; 0x58
 80082ca:	46de      	mov	lr, fp
 80082cc:	46c3      	mov	fp, r8
 80082ce:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 80082d2:	fb03 2301 	mla	r3, r3, r1, r2
 80082d6:	9306      	str	r3, [sp, #24]
 80082d8:	2300      	movs	r3, #0
 80082da:	930e      	str	r3, [sp, #56]	; 0x38
 80082dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 8397 	beq.w	8008a12 <forward_lite_dw_3x3_sssa8_ch+0x842>
 80082e4:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 80082e8:	2400      	movs	r4, #0
 80082ea:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80082ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80082ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80082f0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80082f2:	f103 0010 	add.w	r0, r3, #16
 80082f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082f8:	9203      	str	r2, [sp, #12]
 80082fa:	3348      	adds	r3, #72	; 0x48
 80082fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80082fe:	f8cd e000 	str.w	lr, [sp]
 8008302:	9405      	str	r4, [sp, #20]
 8008304:	9202      	str	r2, [sp, #8]
 8008306:	9004      	str	r0, [sp, #16]
 8008308:	9101      	str	r1, [sp, #4]
 800830a:	9906      	ldr	r1, [sp, #24]
 800830c:	9804      	ldr	r0, [sp, #16]
 800830e:	190a      	adds	r2, r1, r4
 8008310:	f853 5c48 	ldr.w	r5, [r3, #-72]
 8008314:	590c      	ldr	r4, [r1, r4]
 8008316:	f852 800b 	ldr.w	r8, [r2, fp]
 800831a:	eb02 070b 	add.w	r7, r2, fp
 800831e:	eac4 4108 	pkhbt	r1, r4, r8, lsl #16
 8008322:	eb02 024b 	add.w	r2, r2, fp, lsl #1
 8008326:	eac8 4824 	pkhtb	r8, r8, r4, asr #16
 800832a:	e9cd 3008 	strd	r3, r0, [sp, #32]
 800832e:	f850 4c10 	ldr.w	r4, [r0, #-16]
 8008332:	fa2c f681 	sxtab16	r6, ip, r1
 8008336:	fb25 4606 	smlad	r6, r5, r6, r4
 800833a:	fa2c f191 	sxtab16	r1, ip, r1, ror #8
 800833e:	f853 4c44 	ldr.w	r4, [r3, #-68]
 8008342:	f850 5c0c 	ldr.w	r5, [r0, #-12]
 8008346:	fb24 5101 	smlad	r1, r4, r1, r5
 800834a:	f853 4c40 	ldr.w	r4, [r3, #-64]
 800834e:	f850 5c08 	ldr.w	r5, [r0, #-8]
 8008352:	fa2c fe88 	sxtab16	lr, ip, r8
 8008356:	fb24 5e0e 	smlad	lr, r4, lr, r5
 800835a:	fa2c f898 	sxtab16	r8, ip, r8, ror #8
 800835e:	f853 4c3c 	ldr.w	r4, [r3, #-60]
 8008362:	f850 5c04 	ldr.w	r5, [r0, #-4]
 8008366:	fb24 5508 	smlad	r5, r4, r8, r5
 800836a:	9807      	ldr	r0, [sp, #28]
 800836c:	f857 800b 	ldr.w	r8, [r7, fp]
 8008370:	1817      	adds	r7, r2, r0
 8008372:	f853 4c38 	ldr.w	r4, [r3, #-56]
 8008376:	5812      	ldr	r2, [r2, r0]
 8008378:	eac8 4902 	pkhbt	r9, r8, r2, lsl #16
 800837c:	eac2 4228 	pkhtb	r2, r2, r8, asr #16
 8008380:	fa2c fa89 	sxtab16	sl, ip, r9
 8008384:	eb07 080b 	add.w	r8, r7, fp
 8008388:	fb24 660a 	smlad	r6, r4, sl, r6
 800838c:	fa2c f999 	sxtab16	r9, ip, r9, ror #8
 8008390:	f853 4c34 	ldr.w	r4, [r3, #-52]
 8008394:	fb24 1409 	smlad	r4, r4, r9, r1
 8008398:	f853 1c30 	ldr.w	r1, [r3, #-48]
 800839c:	fa2c f982 	sxtab16	r9, ip, r2
 80083a0:	fb21 ee09 	smlad	lr, r1, r9, lr
 80083a4:	fa2c f292 	sxtab16	r2, ip, r2, ror #8
 80083a8:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 80083ac:	fb21 5202 	smlad	r2, r1, r2, r5
 80083b0:	f857 a00b 	ldr.w	sl, [r7, fp]
 80083b4:	eb08 070b 	add.w	r7, r8, fp
 80083b8:	f858 100b 	ldr.w	r1, [r8, fp]
 80083bc:	f853 5c28 	ldr.w	r5, [r3, #-40]
 80083c0:	eb07 0800 	add.w	r8, r7, r0
 80083c4:	eaca 4901 	pkhbt	r9, sl, r1, lsl #16
 80083c8:	eac1 412a 	pkhtb	r1, r1, sl, asr #16
 80083cc:	fa2c fa89 	sxtab16	sl, ip, r9
 80083d0:	fb25 660a 	smlad	r6, r5, sl, r6
 80083d4:	fa2c f999 	sxtab16	r9, ip, r9, ror #8
 80083d8:	f853 5c24 	ldr.w	r5, [r3, #-36]
 80083dc:	fb25 4509 	smlad	r5, r5, r9, r4
 80083e0:	f853 4c20 	ldr.w	r4, [r3, #-32]
 80083e4:	fa2c f981 	sxtab16	r9, ip, r1
 80083e8:	fb24 ee09 	smlad	lr, r4, r9, lr
 80083ec:	fa2c f191 	sxtab16	r1, ip, r1, ror #8
 80083f0:	f853 4c1c 	ldr.w	r4, [r3, #-28]
 80083f4:	fb24 2101 	smlad	r1, r4, r1, r2
 80083f8:	f857 9000 	ldr.w	r9, [r7, r0]
 80083fc:	f858 200b 	ldr.w	r2, [r8, fp]
 8008400:	44d8      	add	r8, fp
 8008402:	eac9 4702 	pkhbt	r7, r9, r2, lsl #16
 8008406:	f853 4c18 	ldr.w	r4, [r3, #-24]
 800840a:	eac2 4229 	pkhtb	r2, r2, r9, asr #16
 800840e:	fa2c f987 	sxtab16	r9, ip, r7
 8008412:	fb24 6609 	smlad	r6, r4, r9, r6
 8008416:	fa2c f797 	sxtab16	r7, ip, r7, ror #8
 800841a:	f853 4c14 	ldr.w	r4, [r3, #-20]
 800841e:	fb24 5707 	smlad	r7, r4, r7, r5
 8008422:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8008426:	fa2c f582 	sxtab16	r5, ip, r2
 800842a:	fb24 e505 	smlad	r5, r4, r5, lr
 800842e:	fa2c f292 	sxtab16	r2, ip, r2, ror #8
 8008432:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 8008436:	fb24 1202 	smlad	r2, r4, r2, r1
 800843a:	f858 100b 	ldr.w	r1, [r8, fp]
 800843e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008440:	b24c      	sxtb	r4, r1
 8008442:	f833 ec08 	ldrh.w	lr, [r3, #-8]
 8008446:	f833 8c06 	ldrh.w	r8, [r3, #-6]
 800844a:	1a24      	subs	r4, r4, r0
 800844c:	f833 9c04 	ldrh.w	r9, [r3, #-4]
 8008450:	fb1e 6604 	smlabb	r6, lr, r4, r6
 8008454:	f341 2407 	sbfx	r4, r1, #8, #8
 8008458:	1a24      	subs	r4, r4, r0
 800845a:	fb18 7404 	smlabb	r4, r8, r4, r7
 800845e:	f341 4707 	sbfx	r7, r1, #16, #8
 8008462:	ebc0 6121 	rsb	r1, r0, r1, asr #24
 8008466:	1a3f      	subs	r7, r7, r0
 8008468:	9801      	ldr	r0, [sp, #4]
 800846a:	fb19 5907 	smlabb	r9, r9, r7, r5
 800846e:	f833 5c02 	ldrh.w	r5, [r3, #-2]
 8008472:	fb15 2a01 	smlabb	sl, r5, r1, r2
 8008476:	f9b0 1000 	ldrsh.w	r1, [r0]
 800847a:	2915      	cmp	r1, #21
 800847c:	f340 8217 	ble.w	80088ae <forward_lite_dw_3x3_sssa8_ch+0x6de>
 8008480:	f1a1 0802 	sub.w	r8, r1, #2
 8008484:	2201      	movs	r2, #1
 8008486:	9f03      	ldr	r7, [sp, #12]
 8008488:	3901      	subs	r1, #1
 800848a:	fa02 f808 	lsl.w	r8, r2, r8
 800848e:	9d02      	ldr	r5, [sp, #8]
 8008490:	f857 2b04 	ldr.w	r2, [r7], #4
 8008494:	f100 0e02 	add.w	lr, r0, #2
 8008498:	fb56 8202 	smmla	r2, r6, r2, r8
 800849c:	410a      	asrs	r2, r1
 800849e:	f855 1b04 	ldr.w	r1, [r5], #4
 80084a2:	440a      	add	r2, r1
 80084a4:	f302 0207 	ssat	r2, #8, r2
 80084a8:	9900      	ldr	r1, [sp, #0]
 80084aa:	b252      	sxtb	r2, r2
 80084ac:	1c4e      	adds	r6, r1, #1
 80084ae:	4608      	mov	r0, r1
 80084b0:	700a      	strb	r2, [r1, #0]
 80084b2:	f9be 1000 	ldrsh.w	r1, [lr]
 80084b6:	2915      	cmp	r1, #21
 80084b8:	f340 81e3 	ble.w	8008882 <forward_lite_dw_3x3_sssa8_ch+0x6b2>
 80084bc:	f8d5 e000 	ldr.w	lr, [r5]
 80084c0:	1e8d      	subs	r5, r1, #2
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	3901      	subs	r1, #1
 80084c6:	2701      	movs	r7, #1
 80084c8:	fa07 f505 	lsl.w	r5, r7, r5
 80084cc:	9f03      	ldr	r7, [sp, #12]
 80084ce:	fb54 5202 	smmla	r2, r4, r2, r5
 80084d2:	410a      	asrs	r2, r1
 80084d4:	9901      	ldr	r1, [sp, #4]
 80084d6:	3708      	adds	r7, #8
 80084d8:	4472      	add	r2, lr
 80084da:	f101 0e04 	add.w	lr, r1, #4
 80084de:	9902      	ldr	r1, [sp, #8]
 80084e0:	3108      	adds	r1, #8
 80084e2:	f302 0207 	ssat	r2, #8, r2
 80084e6:	b252      	sxtb	r2, r2
 80084e8:	1c84      	adds	r4, r0, #2
 80084ea:	7032      	strb	r2, [r6, #0]
 80084ec:	f9be 5000 	ldrsh.w	r5, [lr]
 80084f0:	2d15      	cmp	r5, #21
 80084f2:	f340 8195 	ble.w	8008820 <forward_lite_dw_3x3_sssa8_ch+0x650>
 80084f6:	680e      	ldr	r6, [r1, #0]
 80084f8:	2001      	movs	r0, #1
 80084fa:	1ea9      	subs	r1, r5, #2
 80084fc:	3d01      	subs	r5, #1
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	fa00 f101 	lsl.w	r1, r0, r1
 8008504:	9803      	ldr	r0, [sp, #12]
 8008506:	fb59 1202 	smmla	r2, r9, r2, r1
 800850a:	412a      	asrs	r2, r5
 800850c:	f100 0e0c 	add.w	lr, r0, #12
 8008510:	4416      	add	r6, r2
 8008512:	9a01      	ldr	r2, [sp, #4]
 8008514:	3206      	adds	r2, #6
 8008516:	9902      	ldr	r1, [sp, #8]
 8008518:	310c      	adds	r1, #12
 800851a:	f306 0607 	ssat	r6, #8, r6
 800851e:	b276      	sxtb	r6, r6
 8008520:	9800      	ldr	r0, [sp, #0]
 8008522:	7026      	strb	r6, [r4, #0]
 8008524:	1cc5      	adds	r5, r0, #3
 8008526:	f9b2 6000 	ldrsh.w	r6, [r2]
 800852a:	2e15      	cmp	r6, #21
 800852c:	f340 8194 	ble.w	8008858 <forward_lite_dw_3x3_sssa8_ch+0x688>
 8008530:	f8d1 9000 	ldr.w	r9, [r1]
 8008534:	2001      	movs	r0, #1
 8008536:	1eb1      	subs	r1, r6, #2
 8008538:	9f01      	ldr	r7, [sp, #4]
 800853a:	3e01      	subs	r6, #1
 800853c:	9c03      	ldr	r4, [sp, #12]
 800853e:	3708      	adds	r7, #8
 8008540:	9a02      	ldr	r2, [sp, #8]
 8008542:	f8de e000 	ldr.w	lr, [lr]
 8008546:	fa00 f101 	lsl.w	r1, r0, r1
 800854a:	fb5a 1e0e 	smmla	lr, sl, lr, r1
 800854e:	fa4e f806 	asr.w	r8, lr, r6
 8008552:	3410      	adds	r4, #16
 8008554:	3210      	adds	r2, #16
 8008556:	463e      	mov	r6, r7
 8008558:	44c8      	add	r8, r9
 800855a:	940c      	str	r4, [sp, #48]	; 0x30
 800855c:	4691      	mov	r9, r2
 800855e:	f308 0807 	ssat	r8, #8, r8
 8008562:	fa4f f888 	sxtb.w	r8, r8
 8008566:	9804      	ldr	r0, [sp, #16]
 8008568:	9900      	ldr	r1, [sp, #0]
 800856a:	3348      	adds	r3, #72	; 0x48
 800856c:	f885 8000 	strb.w	r8, [r5]
 8008570:	3010      	adds	r0, #16
 8008572:	9d05      	ldr	r5, [sp, #20]
 8008574:	3104      	adds	r1, #4
 8008576:	9004      	str	r0, [sp, #16]
 8008578:	3504      	adds	r5, #4
 800857a:	9202      	str	r2, [sp, #8]
 800857c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800857e:	468e      	mov	lr, r1
 8008580:	b2a8      	uxth	r0, r5
 8008582:	9403      	str	r4, [sp, #12]
 8008584:	9701      	str	r7, [sp, #4]
 8008586:	4290      	cmp	r0, r2
 8008588:	4604      	mov	r4, r0
 800858a:	9005      	str	r0, [sp, #20]
 800858c:	9100      	str	r1, [sp, #0]
 800858e:	f4ff aebc 	bcc.w	800830a <forward_lite_dw_3x3_sssa8_ch+0x13a>
 8008592:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008596:	9600      	str	r6, [sp, #0]
 8008598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 8127 	beq.w	80087ee <forward_lite_dw_3x3_sssa8_ch+0x61e>
 80085a0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80085a2:	9e08      	ldr	r6, [sp, #32]
 80085a4:	9f07      	ldr	r7, [sp, #28]
 80085a6:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 80085aa:	18ca      	adds	r2, r1, r3
 80085ac:	56c8      	ldrsb	r0, [r1, r3]
 80085ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085b0:	1b40      	subs	r0, r0, r5
 80085b2:	eb02 044b 	add.w	r4, r2, fp, lsl #1
 80085b6:	680b      	ldr	r3, [r1, #0]
 80085b8:	8831      	ldrh	r1, [r6, #0]
 80085ba:	fb11 3100 	smlabb	r1, r1, r0, r3
 80085be:	f912 300b 	ldrsb.w	r3, [r2, fp]
 80085c2:	8870      	ldrh	r0, [r6, #2]
 80085c4:	1b5b      	subs	r3, r3, r5
 80085c6:	f912 201b 	ldrsb.w	r2, [r2, fp, lsl #1]
 80085ca:	fb13 1300 	smlabb	r3, r3, r0, r1
 80085ce:	1b52      	subs	r2, r2, r5
 80085d0:	19e0      	adds	r0, r4, r7
 80085d2:	57e1      	ldrsb	r1, [r4, r7]
 80085d4:	88b4      	ldrh	r4, [r6, #4]
 80085d6:	1b49      	subs	r1, r1, r5
 80085d8:	fb12 3204 	smlabb	r2, r2, r4, r3
 80085dc:	88f3      	ldrh	r3, [r6, #6]
 80085de:	eb00 044b 	add.w	r4, r0, fp, lsl #1
 80085e2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80085e6:	f910 200b 	ldrsb.w	r2, [r0, fp]
 80085ea:	f910 301b 	ldrsb.w	r3, [r0, fp, lsl #1]
 80085ee:	1b52      	subs	r2, r2, r5
 80085f0:	8930      	ldrh	r0, [r6, #8]
 80085f2:	1b5b      	subs	r3, r3, r5
 80085f4:	fb12 1200 	smlabb	r2, r2, r0, r1
 80085f8:	19e0      	adds	r0, r4, r7
 80085fa:	57e1      	ldrsb	r1, [r4, r7]
 80085fc:	8974      	ldrh	r4, [r6, #10]
 80085fe:	1b49      	subs	r1, r1, r5
 8008600:	fb13 2304 	smlabb	r3, r3, r4, r2
 8008604:	89b2      	ldrh	r2, [r6, #12]
 8008606:	4634      	mov	r4, r6
 8008608:	fb11 3202 	smlabb	r2, r1, r2, r3
 800860c:	f910 100b 	ldrsb.w	r1, [r0, fp]
 8008610:	89f3      	ldrh	r3, [r6, #14]
 8008612:	1b49      	subs	r1, r1, r5
 8008614:	f910 001b 	ldrsb.w	r0, [r0, fp, lsl #1]
 8008618:	fb11 2303 	smlabb	r3, r1, r3, r2
 800861c:	9a05      	ldr	r2, [sp, #20]
 800861e:	1b40      	subs	r0, r0, r5
 8008620:	b229      	sxth	r1, r5
 8008622:	3201      	adds	r2, #1
 8008624:	b296      	uxth	r6, r2
 8008626:	8a22      	ldrh	r2, [r4, #16]
 8008628:	fb10 3002 	smlabb	r0, r0, r2, r3
 800862c:	9b00      	ldr	r3, [sp, #0]
 800862e:	f9b3 4000 	ldrsh.w	r4, [r3]
 8008632:	2c15      	cmp	r4, #21
 8008634:	f300 8199 	bgt.w	800896a <forward_lite_dw_3x3_sssa8_ch+0x79a>
 8008638:	2c00      	cmp	r4, #0
 800863a:	f340 81ca 	ble.w	80089d2 <forward_lite_dw_3x3_sssa8_ch+0x802>
 800863e:	f8da 3000 	ldr.w	r3, [sl]
 8008642:	0040      	lsls	r0, r0, #1
 8008644:	f8d9 2000 	ldr.w	r2, [r9]
 8008648:	fb50 2003 	smmla	r0, r0, r3, r2
 800864c:	4120      	asrs	r0, r4
 800864e:	f300 0307 	ssat	r3, #8, r0
 8008652:	b25b      	sxtb	r3, r3
 8008654:	f10e 0701 	add.w	r7, lr, #1
 8008658:	f88e 3000 	strb.w	r3, [lr]
 800865c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 80c3 	beq.w	80087ea <forward_lite_dw_3x3_sssa8_ch+0x61a>
 8008664:	9b05      	ldr	r3, [sp, #20]
 8008666:	3302      	adds	r3, #2
 8008668:	fa1f f883 	uxth.w	r8, r3
 800866c:	9b06      	ldr	r3, [sp, #24]
 800866e:	1998      	adds	r0, r3, r6
 8008670:	579a      	ldrsb	r2, [r3, r6]
 8008672:	9e08      	ldr	r6, [sp, #32]
 8008674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008676:	1a52      	subs	r2, r2, r1
 8008678:	8a74      	ldrh	r4, [r6, #18]
 800867a:	eb00 054b 	add.w	r5, r0, fp, lsl #1
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	fb12 3204 	smlabb	r2, r2, r4, r3
 8008684:	f910 300b 	ldrsb.w	r3, [r0, fp]
 8008688:	8ab4      	ldrh	r4, [r6, #20]
 800868a:	1a5b      	subs	r3, r3, r1
 800868c:	f910 001b 	ldrsb.w	r0, [r0, fp, lsl #1]
 8008690:	fb13 2304 	smlabb	r3, r3, r4, r2
 8008694:	9a07      	ldr	r2, [sp, #28]
 8008696:	1a40      	subs	r0, r0, r1
 8008698:	18ac      	adds	r4, r5, r2
 800869a:	56aa      	ldrsb	r2, [r5, r2]
 800869c:	8af5      	ldrh	r5, [r6, #22]
 800869e:	1a52      	subs	r2, r2, r1
 80086a0:	fb10 3005 	smlabb	r0, r0, r5, r3
 80086a4:	8b33      	ldrh	r3, [r6, #24]
 80086a6:	eb04 054b 	add.w	r5, r4, fp, lsl #1
 80086aa:	fb12 0203 	smlabb	r2, r2, r3, r0
 80086ae:	f914 300b 	ldrsb.w	r3, [r4, fp]
 80086b2:	f914 001b 	ldrsb.w	r0, [r4, fp, lsl #1]
 80086b6:	1a5b      	subs	r3, r3, r1
 80086b8:	8b74      	ldrh	r4, [r6, #26]
 80086ba:	1a40      	subs	r0, r0, r1
 80086bc:	fb13 2304 	smlabb	r3, r3, r4, r2
 80086c0:	9a07      	ldr	r2, [sp, #28]
 80086c2:	18ac      	adds	r4, r5, r2
 80086c4:	56aa      	ldrsb	r2, [r5, r2]
 80086c6:	8bb5      	ldrh	r5, [r6, #28]
 80086c8:	1a52      	subs	r2, r2, r1
 80086ca:	fb10 3005 	smlabb	r0, r0, r5, r3
 80086ce:	8bf3      	ldrh	r3, [r6, #30]
 80086d0:	fb12 0203 	smlabb	r2, r2, r3, r0
 80086d4:	f914 300b 	ldrsb.w	r3, [r4, fp]
 80086d8:	f914 001b 	ldrsb.w	r0, [r4, fp, lsl #1]
 80086dc:	1a5b      	subs	r3, r3, r1
 80086de:	8c34      	ldrh	r4, [r6, #32]
 80086e0:	1a40      	subs	r0, r0, r1
 80086e2:	fb13 2304 	smlabb	r3, r3, r4, r2
 80086e6:	8c72      	ldrh	r2, [r6, #34]	; 0x22
 80086e8:	fb10 3002 	smlabb	r0, r0, r2, r3
 80086ec:	9b00      	ldr	r3, [sp, #0]
 80086ee:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 80086f2:	2c15      	cmp	r4, #21
 80086f4:	f300 814c 	bgt.w	8008990 <forward_lite_dw_3x3_sssa8_ch+0x7c0>
 80086f8:	2c00      	cmp	r4, #0
 80086fa:	f340 817d 	ble.w	80089f8 <forward_lite_dw_3x3_sssa8_ch+0x828>
 80086fe:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008702:	0040      	lsls	r0, r0, #1
 8008704:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8008708:	fb50 2003 	smmla	r0, r0, r3, r2
 800870c:	4120      	asrs	r0, r4
 800870e:	f300 0307 	ssat	r3, #8, r0
 8008712:	1c7a      	adds	r2, r7, #1
 8008714:	b25b      	sxtb	r3, r3
 8008716:	9201      	str	r2, [sp, #4]
 8008718:	703b      	strb	r3, [r7, #0]
 800871a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800871c:	2b02      	cmp	r3, #2
 800871e:	d064      	beq.n	80087ea <forward_lite_dw_3x3_sssa8_ch+0x61a>
 8008720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008722:	9f08      	ldr	r7, [sp, #32]
 8008724:	6898      	ldr	r0, [r3, #8]
 8008726:	9b00      	ldr	r3, [sp, #0]
 8008728:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 800872c:	9b06      	ldr	r3, [sp, #24]
 800872e:	2e15      	cmp	r6, #21
 8008730:	f913 2008 	ldrsb.w	r2, [r3, r8]
 8008734:	eb03 0408 	add.w	r4, r3, r8
 8008738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800873a:	eba2 0201 	sub.w	r2, r2, r1
 800873e:	f914 501b 	ldrsb.w	r5, [r4, fp, lsl #1]
 8008742:	fb13 0302 	smlabb	r3, r3, r2, r0
 8008746:	f914 000b 	ldrsb.w	r0, [r4, fp]
 800874a:	eb04 024b 	add.w	r2, r4, fp, lsl #1
 800874e:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8008750:	eba0 0001 	sub.w	r0, r0, r1
 8008754:	eba5 0501 	sub.w	r5, r5, r1
 8008758:	fb14 3400 	smlabb	r4, r4, r0, r3
 800875c:	9b07      	ldr	r3, [sp, #28]
 800875e:	eb02 0003 	add.w	r0, r2, r3
 8008762:	56d2      	ldrsb	r2, [r2, r3]
 8008764:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008766:	eba2 0201 	sub.w	r2, r2, r1
 800876a:	fb13 4305 	smlabb	r3, r3, r5, r4
 800876e:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8008770:	f910 500b 	ldrsb.w	r5, [r0, fp]
 8008774:	fb14 3302 	smlabb	r3, r4, r2, r3
 8008778:	eb00 024b 	add.w	r2, r0, fp, lsl #1
 800877c:	eba5 0501 	sub.w	r5, r5, r1
 8008780:	f910 401b 	ldrsb.w	r4, [r0, fp, lsl #1]
 8008784:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8008786:	eba4 0401 	sub.w	r4, r4, r1
 800878a:	fb10 3005 	smlabb	r0, r0, r5, r3
 800878e:	9b07      	ldr	r3, [sp, #28]
 8008790:	eb02 0503 	add.w	r5, r2, r3
 8008794:	56d2      	ldrsb	r2, [r2, r3]
 8008796:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008798:	eba2 0201 	sub.w	r2, r2, r1
 800879c:	fb13 0304 	smlabb	r3, r3, r4, r0
 80087a0:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 80087a2:	fb10 3302 	smlabb	r3, r0, r2, r3
 80087a6:	f915 200b 	ldrsb.w	r2, [r5, fp]
 80087aa:	f915 001b 	ldrsb.w	r0, [r5, fp, lsl #1]
 80087ae:	eba2 0201 	sub.w	r2, r2, r1
 80087b2:	eba0 0001 	sub.w	r0, r0, r1
 80087b6:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80087b8:	fb11 3102 	smlabb	r1, r1, r2, r3
 80087bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087be:	fb13 1300 	smlabb	r3, r3, r0, r1
 80087c2:	f340 80f8 	ble.w	80089b6 <forward_lite_dw_3x3_sssa8_ch+0x7e6>
 80087c6:	1eb1      	subs	r1, r6, #2
 80087c8:	1e74      	subs	r4, r6, #1
 80087ca:	2501      	movs	r5, #1
 80087cc:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80087d0:	f8da 2008 	ldr.w	r2, [sl, #8]
 80087d4:	fa05 f101 	lsl.w	r1, r5, r1
 80087d8:	fb53 1202 	smmla	r2, r3, r2, r1
 80087dc:	4122      	asrs	r2, r4
 80087de:	4402      	add	r2, r0
 80087e0:	f302 0307 	ssat	r3, #8, r2
 80087e4:	b25b      	sxtb	r3, r3
 80087e6:	9a01      	ldr	r2, [sp, #4]
 80087e8:	7013      	strb	r3, [r2, #0]
 80087ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087ec:	449e      	add	lr, r3
 80087ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087f0:	9a06      	ldr	r2, [sp, #24]
 80087f2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80087f4:	3301      	adds	r3, #1
 80087f6:	440a      	add	r2, r1
 80087f8:	b21b      	sxth	r3, r3
 80087fa:	9206      	str	r2, [sp, #24]
 80087fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087fe:	930e      	str	r3, [sp, #56]	; 0x38
 8008800:	429a      	cmp	r2, r3
 8008802:	f73f ad6b 	bgt.w	80082dc <forward_lite_dw_3x3_sssa8_ch+0x10c>
 8008806:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008808:	46d8      	mov	r8, fp
 800880a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800880c:	46f3      	mov	fp, lr
 800880e:	3301      	adds	r3, #1
 8008810:	b21b      	sxth	r3, r3
 8008812:	428b      	cmp	r3, r1
 8008814:	9316      	str	r3, [sp, #88]	; 0x58
 8008816:	f6ff ad58 	blt.w	80082ca <forward_lite_dw_3x3_sssa8_ch+0xfa>
 800881a:	b01d      	add	sp, #116	; 0x74
 800881c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008820:	2d00      	cmp	r5, #0
 8008822:	dd53      	ble.n	80088cc <forward_lite_dw_3x3_sssa8_ch+0x6fc>
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	ea4f 0649 	mov.w	r6, r9, lsl #1
 800882a:	6809      	ldr	r1, [r1, #0]
 800882c:	fb56 1602 	smmla	r6, r6, r2, r1
 8008830:	9a02      	ldr	r2, [sp, #8]
 8008832:	412e      	asrs	r6, r5
 8008834:	9803      	ldr	r0, [sp, #12]
 8008836:	f102 010c 	add.w	r1, r2, #12
 800883a:	9a01      	ldr	r2, [sp, #4]
 800883c:	f100 0e0c 	add.w	lr, r0, #12
 8008840:	3206      	adds	r2, #6
 8008842:	f306 0607 	ssat	r6, #8, r6
 8008846:	b276      	sxtb	r6, r6
 8008848:	9800      	ldr	r0, [sp, #0]
 800884a:	7026      	strb	r6, [r4, #0]
 800884c:	1cc5      	adds	r5, r0, #3
 800884e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8008852:	2e15      	cmp	r6, #21
 8008854:	f73f ae6c 	bgt.w	8008530 <forward_lite_dw_3x3_sssa8_ch+0x360>
 8008858:	2e00      	cmp	r6, #0
 800885a:	dd70      	ble.n	800893e <forward_lite_dw_3x3_sssa8_ch+0x76e>
 800885c:	9c03      	ldr	r4, [sp, #12]
 800885e:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8008862:	9a02      	ldr	r2, [sp, #8]
 8008864:	9f01      	ldr	r7, [sp, #4]
 8008866:	3410      	adds	r4, #16
 8008868:	3210      	adds	r2, #16
 800886a:	f8de e000 	ldr.w	lr, [lr]
 800886e:	3708      	adds	r7, #8
 8008870:	6809      	ldr	r1, [r1, #0]
 8008872:	4691      	mov	r9, r2
 8008874:	940c      	str	r4, [sp, #48]	; 0x30
 8008876:	fb58 180e 	smmla	r8, r8, lr, r1
 800887a:	fa48 f806 	asr.w	r8, r8, r6
 800887e:	463e      	mov	r6, r7
 8008880:	e66d      	b.n	800855e <forward_lite_dw_3x3_sssa8_ch+0x38e>
 8008882:	2900      	cmp	r1, #0
 8008884:	dd42      	ble.n	800890c <forward_lite_dw_3x3_sssa8_ch+0x73c>
 8008886:	9803      	ldr	r0, [sp, #12]
 8008888:	0062      	lsls	r2, r4, #1
 800888a:	682d      	ldr	r5, [r5, #0]
 800888c:	683c      	ldr	r4, [r7, #0]
 800888e:	f100 0708 	add.w	r7, r0, #8
 8008892:	fb52 5204 	smmla	r2, r2, r4, r5
 8008896:	9801      	ldr	r0, [sp, #4]
 8008898:	410a      	asrs	r2, r1
 800889a:	9902      	ldr	r1, [sp, #8]
 800889c:	f100 0e04 	add.w	lr, r0, #4
 80088a0:	3108      	adds	r1, #8
 80088a2:	f302 0207 	ssat	r2, #8, r2
 80088a6:	9800      	ldr	r0, [sp, #0]
 80088a8:	b252      	sxtb	r2, r2
 80088aa:	1c84      	adds	r4, r0, #2
 80088ac:	e61d      	b.n	80084ea <forward_lite_dw_3x3_sssa8_ch+0x31a>
 80088ae:	2900      	cmp	r1, #0
 80088b0:	dd1d      	ble.n	80088ee <forward_lite_dw_3x3_sssa8_ch+0x71e>
 80088b2:	0072      	lsls	r2, r6, #1
 80088b4:	f100 0e02 	add.w	lr, r0, #2
 80088b8:	e9dd 5702 	ldrd	r5, r7, [sp, #8]
 80088bc:	f857 6b04 	ldr.w	r6, [r7], #4
 80088c0:	f855 8b04 	ldr.w	r8, [r5], #4
 80088c4:	fb52 8206 	smmla	r2, r2, r6, r8
 80088c8:	410a      	asrs	r2, r1
 80088ca:	e5eb      	b.n	80084a4 <forward_lite_dw_3x3_sssa8_ch+0x2d4>
 80088cc:	9a01      	ldr	r2, [sp, #4]
 80088ce:	f1c5 0501 	rsb	r5, r5, #1
 80088d2:	3206      	adds	r2, #6
 80088d4:	fa09 f505 	lsl.w	r5, r9, r5
 80088d8:	f305 051f 	ssat	r5, #32, r5
 80088dc:	9803      	ldr	r0, [sp, #12]
 80088de:	683e      	ldr	r6, [r7, #0]
 80088e0:	f100 0e0c 	add.w	lr, r0, #12
 80088e4:	fb55 f516 	smmulr	r5, r5, r6
 80088e8:	680e      	ldr	r6, [r1, #0]
 80088ea:	442e      	add	r6, r5
 80088ec:	e613      	b.n	8008516 <forward_lite_dw_3x3_sssa8_ch+0x346>
 80088ee:	f1c1 0101 	rsb	r1, r1, #1
 80088f2:	f100 0e02 	add.w	lr, r0, #2
 80088f6:	fa06 f101 	lsl.w	r1, r6, r1
 80088fa:	f301 011f 	ssat	r1, #32, r1
 80088fe:	9f03      	ldr	r7, [sp, #12]
 8008900:	f857 2b04 	ldr.w	r2, [r7], #4
 8008904:	fb51 f212 	smmulr	r2, r1, r2
 8008908:	9d02      	ldr	r5, [sp, #8]
 800890a:	e5c8      	b.n	800849e <forward_lite_dw_3x3_sssa8_ch+0x2ce>
 800890c:	9a01      	ldr	r2, [sp, #4]
 800890e:	f1c1 0101 	rsb	r1, r1, #1
 8008912:	f102 0e04 	add.w	lr, r2, #4
 8008916:	fa04 f101 	lsl.w	r1, r4, r1
 800891a:	f301 011f 	ssat	r1, #32, r1
 800891e:	9803      	ldr	r0, [sp, #12]
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	f100 0708 	add.w	r7, r0, #8
 8008926:	fb51 f112 	smmulr	r1, r1, r2
 800892a:	682a      	ldr	r2, [r5, #0]
 800892c:	440a      	add	r2, r1
 800892e:	9902      	ldr	r1, [sp, #8]
 8008930:	3108      	adds	r1, #8
 8008932:	f302 0207 	ssat	r2, #8, r2
 8008936:	9800      	ldr	r0, [sp, #0]
 8008938:	b252      	sxtb	r2, r2
 800893a:	1c84      	adds	r4, r0, #2
 800893c:	e5d5      	b.n	80084ea <forward_lite_dw_3x3_sssa8_ch+0x31a>
 800893e:	9f01      	ldr	r7, [sp, #4]
 8008940:	f1c6 0201 	rsb	r2, r6, #1
 8008944:	3708      	adds	r7, #8
 8008946:	fa0a f202 	lsl.w	r2, sl, r2
 800894a:	463e      	mov	r6, r7
 800894c:	f302 021f 	ssat	r2, #32, r2
 8008950:	9c03      	ldr	r4, [sp, #12]
 8008952:	f8de e000 	ldr.w	lr, [lr]
 8008956:	3410      	adds	r4, #16
 8008958:	940c      	str	r4, [sp, #48]	; 0x30
 800895a:	fb52 fe1e 	smmulr	lr, r2, lr
 800895e:	9a02      	ldr	r2, [sp, #8]
 8008960:	6809      	ldr	r1, [r1, #0]
 8008962:	3210      	adds	r2, #16
 8008964:	eb0e 0801 	add.w	r8, lr, r1
 8008968:	e5f8      	b.n	800855c <forward_lite_dw_3x3_sssa8_ch+0x38c>
 800896a:	1ea5      	subs	r5, r4, #2
 800896c:	2301      	movs	r3, #1
 800896e:	3c01      	subs	r4, #1
 8008970:	f8d9 2000 	ldr.w	r2, [r9]
 8008974:	fa03 f505 	lsl.w	r5, r3, r5
 8008978:	f8da 3000 	ldr.w	r3, [sl]
 800897c:	fb50 5303 	smmla	r3, r0, r3, r5
 8008980:	4123      	asrs	r3, r4
 8008982:	4413      	add	r3, r2
 8008984:	f303 0307 	ssat	r3, #8, r3
 8008988:	b25b      	sxtb	r3, r3
 800898a:	f10e 0701 	add.w	r7, lr, #1
 800898e:	e663      	b.n	8008658 <forward_lite_dw_3x3_sssa8_ch+0x488>
 8008990:	1ea5      	subs	r5, r4, #2
 8008992:	2301      	movs	r3, #1
 8008994:	3c01      	subs	r4, #1
 8008996:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800899a:	fa03 f505 	lsl.w	r5, r3, r5
 800899e:	f8da 3004 	ldr.w	r3, [sl, #4]
 80089a2:	fb50 5303 	smmla	r3, r0, r3, r5
 80089a6:	4123      	asrs	r3, r4
 80089a8:	4413      	add	r3, r2
 80089aa:	f303 0307 	ssat	r3, #8, r3
 80089ae:	1c7a      	adds	r2, r7, #1
 80089b0:	b25b      	sxtb	r3, r3
 80089b2:	9201      	str	r2, [sp, #4]
 80089b4:	e6b0      	b.n	8008718 <forward_lite_dw_3x3_sssa8_ch+0x548>
 80089b6:	2e00      	cmp	r6, #0
 80089b8:	dd37      	ble.n	8008a2a <forward_lite_dw_3x3_sssa8_ch+0x85a>
 80089ba:	f8da 2008 	ldr.w	r2, [sl, #8]
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80089c4:	fb53 1302 	smmla	r3, r3, r2, r1
 80089c8:	4133      	asrs	r3, r6
 80089ca:	f303 0307 	ssat	r3, #8, r3
 80089ce:	b25b      	sxtb	r3, r3
 80089d0:	e709      	b.n	80087e6 <forward_lite_dw_3x3_sssa8_ch+0x616>
 80089d2:	f1c4 0201 	rsb	r2, r4, #1
 80089d6:	fa00 f202 	lsl.w	r2, r0, r2
 80089da:	f302 021f 	ssat	r2, #32, r2
 80089de:	f8da 3000 	ldr.w	r3, [sl]
 80089e2:	fb52 f213 	smmulr	r2, r2, r3
 80089e6:	f8d9 3000 	ldr.w	r3, [r9]
 80089ea:	4413      	add	r3, r2
 80089ec:	f303 0307 	ssat	r3, #8, r3
 80089f0:	b25b      	sxtb	r3, r3
 80089f2:	f10e 0701 	add.w	r7, lr, #1
 80089f6:	e62f      	b.n	8008658 <forward_lite_dw_3x3_sssa8_ch+0x488>
 80089f8:	f1c4 0301 	rsb	r3, r4, #1
 80089fc:	fa00 f203 	lsl.w	r2, r0, r3
 8008a00:	f302 021f 	ssat	r2, #32, r2
 8008a04:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008a08:	fb52 f213 	smmulr	r2, r2, r3
 8008a0c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008a10:	e7ca      	b.n	80089a8 <forward_lite_dw_3x3_sssa8_ch+0x7d8>
 8008a12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008a14:	f8dd a0c8 	ldr.w	sl, [sp, #200]	; 0xc8
 8008a18:	9309      	str	r3, [sp, #36]	; 0x24
 8008a1a:	e9dd 3910 	ldrd	r3, r9, [sp, #64]	; 0x40
 8008a1e:	9308      	str	r3, [sp, #32]
 8008a20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a26:	9305      	str	r3, [sp, #20]
 8008a28:	e5b6      	b.n	8008598 <forward_lite_dw_3x3_sssa8_ch+0x3c8>
 8008a2a:	f1c6 0601 	rsb	r6, r6, #1
 8008a2e:	40b3      	lsls	r3, r6
 8008a30:	f303 031f 	ssat	r3, #32, r3
 8008a34:	f8da 2008 	ldr.w	r2, [sl, #8]
 8008a38:	fb53 f212 	smmulr	r2, r3, r2
 8008a3c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008a40:	4413      	add	r3, r2
 8008a42:	f303 0307 	ssat	r3, #8, r3
 8008a46:	b25b      	sxtb	r3, r3
 8008a48:	e6cd      	b.n	80087e6 <forward_lite_dw_3x3_sssa8_ch+0x616>
 8008a4a:	42a1      	cmp	r1, r4
 8008a4c:	f840 7c04 	str.w	r7, [r0, #-4]
 8008a50:	f100 0004 	add.w	r0, r0, #4
 8008a54:	f6ff abfb 	blt.w	800824e <forward_lite_dw_3x3_sssa8_ch+0x7e>
 8008a58:	e40d      	b.n	8008276 <forward_lite_dw_3x3_sssa8_ch+0xa6>
 8008a5a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8008a5c:	ea5f 0c94 	movs.w	ip, r4, lsr #2
 8008a60:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
 8008a64:	9010      	str	r0, [sp, #64]	; 0x40
 8008a66:	f000 8145 	beq.w	8008cf4 <forward_lite_dw_3x3_sssa8_ch+0xb24>
 8008a6a:	f10c 33ff 	add.w	r3, ip, #4294967295
 8008a6e:	f10e 0204 	add.w	r2, lr, #4
 8008a72:	4671      	mov	r1, lr
 8008a74:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	eba9 0604 	sub.w	r6, r9, r4
 8008a7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a82:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	eb0e 0304 	add.w	r3, lr, r4
 8008a8c:	9203      	str	r2, [sp, #12]
 8008a8e:	00a2      	lsls	r2, r4, #2
 8008a90:	9202      	str	r2, [sp, #8]
 8008a92:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008a96:	9201      	str	r2, [sp, #4]
 8008a98:	901b      	str	r0, [sp, #108]	; 0x6c
 8008a9a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008a9c:	f8d1 a000 	ldr.w	sl, [r1]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	eaca 4002 	pkhbt	r0, sl, r2, lsl #16
 8008aa6:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 8008aaa:	f105 0a04 	add.w	sl, r5, #4
 8008aae:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
 8008ab2:	fa2f fa80 	sxtb16	sl, r0
 8008ab6:	f8c5 a000 	str.w	sl, [r5]
 8008aba:	fa2f f090 	sxtb16	r0, r0, ror #8
 8008abe:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008ac0:	6028      	str	r0, [r5, #0]
 8008ac2:	3504      	adds	r5, #4
 8008ac4:	951b      	str	r5, [sp, #108]	; 0x6c
 8008ac6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008ac8:	fa2f f582 	sxtb16	r5, r2
 8008acc:	3004      	adds	r0, #4
 8008ace:	f840 5c04 	str.w	r5, [r0, #-4]
 8008ad2:	901b      	str	r0, [sp, #108]	; 0x6c
 8008ad4:	fa2f f292 	sxtb16	r2, r2, ror #8
 8008ad8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008ada:	6002      	str	r2, [r0, #0]
 8008adc:	3004      	adds	r0, #4
 8008ade:	f858 a001 	ldr.w	sl, [r8, r1]
 8008ae2:	901b      	str	r0, [sp, #108]	; 0x6c
 8008ae4:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008ae6:	f858 2003 	ldr.w	r2, [r8, r3]
 8008aea:	eaca 4002 	pkhbt	r0, sl, r2, lsl #16
 8008aee:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 8008af2:	f105 0a04 	add.w	sl, r5, #4
 8008af6:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
 8008afa:	fa2f fa80 	sxtb16	sl, r0
 8008afe:	f8c5 a000 	str.w	sl, [r5]
 8008b02:	fa2f f090 	sxtb16	r0, r0, ror #8
 8008b06:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008b08:	6028      	str	r0, [r5, #0]
 8008b0a:	3504      	adds	r5, #4
 8008b0c:	951b      	str	r5, [sp, #108]	; 0x6c
 8008b0e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008b10:	fa2f f582 	sxtb16	r5, r2
 8008b14:	3004      	adds	r0, #4
 8008b16:	f840 5c04 	str.w	r5, [r0, #-4]
 8008b1a:	901b      	str	r0, [sp, #108]	; 0x6c
 8008b1c:	fa2f f292 	sxtb16	r2, r2, ror #8
 8008b20:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008b22:	6002      	str	r2, [r0, #0]
 8008b24:	3004      	adds	r0, #4
 8008b26:	9a03      	ldr	r2, [sp, #12]
 8008b28:	901b      	str	r0, [sp, #108]	; 0x6c
 8008b2a:	f852 a003 	ldr.w	sl, [r2, r3]
 8008b2e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008b30:	9a02      	ldr	r2, [sp, #8]
 8008b32:	58d2      	ldr	r2, [r2, r3]
 8008b34:	eaca 4002 	pkhbt	r0, sl, r2, lsl #16
 8008b38:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 8008b3c:	f105 0a04 	add.w	sl, r5, #4
 8008b40:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
 8008b44:	fa2f fa80 	sxtb16	sl, r0
 8008b48:	f8c5 a000 	str.w	sl, [r5]
 8008b4c:	fa2f f090 	sxtb16	r0, r0, ror #8
 8008b50:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008b52:	6028      	str	r0, [r5, #0]
 8008b54:	3504      	adds	r5, #4
 8008b56:	951b      	str	r5, [sp, #108]	; 0x6c
 8008b58:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008b5a:	fa2f f582 	sxtb16	r5, r2
 8008b5e:	3004      	adds	r0, #4
 8008b60:	f840 5c04 	str.w	r5, [r0, #-4]
 8008b64:	901b      	str	r0, [sp, #108]	; 0x6c
 8008b66:	fa2f f292 	sxtb16	r2, r2, ror #8
 8008b6a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008b6c:	6002      	str	r2, [r0, #0]
 8008b6e:	3004      	adds	r0, #4
 8008b70:	9a01      	ldr	r2, [sp, #4]
 8008b72:	901b      	str	r0, [sp, #108]	; 0x6c
 8008b74:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008b76:	f852 a003 	ldr.w	sl, [r2, r3]
 8008b7a:	5872      	ldr	r2, [r6, r1]
 8008b7c:	eaca 4002 	pkhbt	r0, sl, r2, lsl #16
 8008b80:	eac2 422a 	pkhtb	r2, r2, sl, asr #16
 8008b84:	f105 0a04 	add.w	sl, r5, #4
 8008b88:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
 8008b8c:	fa2f fa80 	sxtb16	sl, r0
 8008b90:	f8c5 a000 	str.w	sl, [r5]
 8008b94:	fa2f f090 	sxtb16	r0, r0, ror #8
 8008b98:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008b9a:	6028      	str	r0, [r5, #0]
 8008b9c:	3504      	adds	r5, #4
 8008b9e:	951b      	str	r5, [sp, #108]	; 0x6c
 8008ba0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008ba2:	fa2f f582 	sxtb16	r5, r2
 8008ba6:	3004      	adds	r0, #4
 8008ba8:	f840 5c04 	str.w	r5, [r0, #-4]
 8008bac:	901b      	str	r0, [sp, #108]	; 0x6c
 8008bae:	fa2f f292 	sxtb16	r2, r2, ror #8
 8008bb2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008bb4:	6002      	str	r2, [r0, #0]
 8008bb6:	3004      	adds	r0, #4
 8008bb8:	58f2      	ldr	r2, [r6, r3]
 8008bba:	901b      	str	r0, [sp, #108]	; 0x6c
 8008bbc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008bbe:	eac2 2502 	pkhbt	r5, r2, r2, lsl #8
 8008bc2:	fa2f f585 	sxtb16	r5, r5
 8008bc6:	8005      	strh	r5, [r0, #0]
 8008bc8:	0c2d      	lsrs	r5, r5, #16
 8008bca:	eac2 6222 	pkhtb	r2, r2, r2, asr #24
 8008bce:	8045      	strh	r5, [r0, #2]
 8008bd0:	fa2f f2a2 	sxtb16	r2, r2, ror #16
 8008bd4:	8082      	strh	r2, [r0, #4]
 8008bd6:	0c12      	lsrs	r2, r2, #16
 8008bd8:	3104      	adds	r1, #4
 8008bda:	3008      	adds	r0, #8
 8008bdc:	f820 2c02 	strh.w	r2, [r0, #-2]
 8008be0:	3304      	adds	r3, #4
 8008be2:	9a00      	ldr	r2, [sp, #0]
 8008be4:	428a      	cmp	r2, r1
 8008be6:	f47f af57 	bne.w	8008a98 <forward_lite_dw_3x3_sssa8_ch+0x8c8>
 8008bea:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8008bee:	4602      	mov	r2, r0
 8008bf0:	fa1f fc83 	uxth.w	ip, r3
 8008bf4:	f014 0303 	ands.w	r3, r4, #3
 8008bf8:	f43f ab0d 	beq.w	8008216 <forward_lite_dw_3x3_sssa8_ch+0x46>
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	f10c 0101 	add.w	r1, ip, #1
 8008c02:	b29e      	uxth	r6, r3
 8008c04:	f91e 300c 	ldrsb.w	r3, [lr, ip]
 8008c08:	b288      	uxth	r0, r1
 8008c0a:	8013      	strh	r3, [r2, #0]
 8008c0c:	eb0e 030c 	add.w	r3, lr, ip
 8008c10:	5719      	ldrsb	r1, [r3, r4]
 8008c12:	8051      	strh	r1, [r2, #2]
 8008c14:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8008c18:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 8008c1c:	8093      	strh	r3, [r2, #4]
 8008c1e:	570b      	ldrsb	r3, [r1, r4]
 8008c20:	80d3      	strh	r3, [r2, #6]
 8008c22:	eb01 0344 	add.w	r3, r1, r4, lsl #1
 8008c26:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8008c2a:	8111      	strh	r1, [r2, #8]
 8008c2c:	5719      	ldrsb	r1, [r3, r4]
 8008c2e:	8151      	strh	r1, [r2, #10]
 8008c30:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8008c34:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 8008c38:	8193      	strh	r3, [r2, #12]
 8008c3a:	570b      	ldrsb	r3, [r1, r4]
 8008c3c:	81d3      	strh	r3, [r2, #14]
 8008c3e:	f911 3014 	ldrsb.w	r3, [r1, r4, lsl #1]
 8008c42:	8213      	strh	r3, [r2, #16]
 8008c44:	2e00      	cmp	r6, #0
 8008c46:	d043      	beq.n	8008cd0 <forward_lite_dw_3x3_sssa8_ch+0xb00>
 8008c48:	f91e 3000 	ldrsb.w	r3, [lr, r0]
 8008c4c:	f10c 0c02 	add.w	ip, ip, #2
 8008c50:	2e01      	cmp	r6, #1
 8008c52:	8253      	strh	r3, [r2, #18]
 8008c54:	eb0e 0300 	add.w	r3, lr, r0
 8008c58:	fa1f f58c 	uxth.w	r5, ip
 8008c5c:	5719      	ldrsb	r1, [r3, r4]
 8008c5e:	8291      	strh	r1, [r2, #20]
 8008c60:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8008c64:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 8008c68:	82d3      	strh	r3, [r2, #22]
 8008c6a:	570b      	ldrsb	r3, [r1, r4]
 8008c6c:	8313      	strh	r3, [r2, #24]
 8008c6e:	eb01 0344 	add.w	r3, r1, r4, lsl #1
 8008c72:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8008c76:	8351      	strh	r1, [r2, #26]
 8008c78:	5719      	ldrsb	r1, [r3, r4]
 8008c7a:	8391      	strh	r1, [r2, #28]
 8008c7c:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8008c80:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 8008c84:	83d3      	strh	r3, [r2, #30]
 8008c86:	570b      	ldrsb	r3, [r1, r4]
 8008c88:	8413      	strh	r3, [r2, #32]
 8008c8a:	f911 3014 	ldrsb.w	r3, [r1, r4, lsl #1]
 8008c8e:	8453      	strh	r3, [r2, #34]	; 0x22
 8008c90:	d01e      	beq.n	8008cd0 <forward_lite_dw_3x3_sssa8_ch+0xb00>
 8008c92:	f91e 3005 	ldrsb.w	r3, [lr, r5]
 8008c96:	eb0e 0105 	add.w	r1, lr, r5
 8008c9a:	8493      	strh	r3, [r2, #36]	; 0x24
 8008c9c:	570b      	ldrsb	r3, [r1, r4]
 8008c9e:	84d3      	strh	r3, [r2, #38]	; 0x26
 8008ca0:	eb01 0344 	add.w	r3, r1, r4, lsl #1
 8008ca4:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8008ca8:	8511      	strh	r1, [r2, #40]	; 0x28
 8008caa:	5719      	ldrsb	r1, [r3, r4]
 8008cac:	8551      	strh	r1, [r2, #42]	; 0x2a
 8008cae:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8008cb2:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 8008cb6:	8593      	strh	r3, [r2, #44]	; 0x2c
 8008cb8:	570b      	ldrsb	r3, [r1, r4]
 8008cba:	85d3      	strh	r3, [r2, #46]	; 0x2e
 8008cbc:	eb01 0344 	add.w	r3, r1, r4, lsl #1
 8008cc0:	f911 1014 	ldrsb.w	r1, [r1, r4, lsl #1]
 8008cc4:	8611      	strh	r1, [r2, #48]	; 0x30
 8008cc6:	5719      	ldrsb	r1, [r3, r4]
 8008cc8:	8651      	strh	r1, [r2, #50]	; 0x32
 8008cca:	f913 3014 	ldrsb.w	r3, [r3, r4, lsl #1]
 8008cce:	8693      	strh	r3, [r2, #52]	; 0x34
 8008cd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cd2:	44a1      	add	r9, r4
 8008cd4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8008cdc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8008cde:	461d      	mov	r5, r3
 8008ce0:	9312      	str	r3, [sp, #72]	; 0x48
 8008ce2:	f001 fcd1 	bl	800a688 <align_factor_ch>
 8008ce6:	f06f 0315 	mvn.w	r3, #21
 8008cea:	fb03 5304 	mla	r3, r3, r4, r5
 8008cee:	9311      	str	r3, [sp, #68]	; 0x44
 8008cf0:	f7ff baa6 	b.w	8008240 <forward_lite_dw_3x3_sssa8_ch+0x70>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8008cfa:	e77b      	b.n	8008bf4 <forward_lite_dw_3x3_sssa8_ch+0xa24>

08008cfc <forward_lite_pw_sssa8_ch>:
 8008cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d00:	b09b      	sub	sp, #108	; 0x6c
 8008d02:	460c      	mov	r4, r1
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	f8bd 109c 	ldrh.w	r1, [sp, #156]	; 0x9c
 8008d0a:	9215      	str	r2, [sp, #84]	; 0x54
 8008d0c:	9110      	str	r1, [sp, #64]	; 0x40
 8008d0e:	f99d 10a4 	ldrsb.w	r1, [sp, #164]	; 0xa4
 8008d12:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 8008d16:	9111      	str	r1, [sp, #68]	; 0x44
 8008d18:	f99d 10a8 	ldrsb.w	r1, [sp, #168]	; 0xa8
 8008d1c:	f8bd a094 	ldrh.w	sl, [sp, #148]	; 0x94
 8008d20:	9119      	str	r1, [sp, #100]	; 0x64
 8008d22:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 8008d26:	9017      	str	r0, [sp, #92]	; 0x5c
 8008d28:	910f      	str	r1, [sp, #60]	; 0x3c
 8008d2a:	f8bd 10b8 	ldrh.w	r1, [sp, #184]	; 0xb8
 8008d2e:	9118      	str	r1, [sp, #96]	; 0x60
 8008d30:	f040 8097 	bne.w	8008e62 <forward_lite_pw_sssa8_ch+0x166>
 8008d34:	2a02      	cmp	r2, #2
 8008d36:	f040 8094 	bne.w	8008e62 <forward_lite_pw_sssa8_ch+0x166>
 8008d3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 81c3 	beq.w	80090c8 <forward_lite_pw_sssa8_ch+0x3cc>
 8008d42:	1e63      	subs	r3, r4, #1
 8008d44:	ea4f 079a 	mov.w	r7, sl, lsr #2
 8008d48:	ea4f 09da 	mov.w	r9, sl, lsr #3
 8008d4c:	f00a 0503 	and.w	r5, sl, #3
 8008d50:	085b      	lsrs	r3, r3, #1
 8008d52:	f107 38ff 	add.w	r8, r7, #4294967295
 8008d56:	00b9      	lsls	r1, r7, #2
 8008d58:	900e      	str	r0, [sp, #56]	; 0x38
 8008d5a:	fb0a f303 	mul.w	r3, sl, r3
 8008d5e:	9316      	str	r3, [sp, #88]	; 0x58
 8008d60:	fb04 f30a 	mul.w	r3, r4, sl
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	9314      	str	r3, [sp, #80]	; 0x50
 8008d68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d6c:	f027 0901 	bic.w	r9, r7, #1
 8008d70:	930d      	str	r3, [sp, #52]	; 0x34
 8008d72:	2300      	movs	r3, #0
 8008d74:	ea4f 0e89 	mov.w	lr, r9, lsl #2
 8008d78:	9313      	str	r3, [sp, #76]	; 0x4c
 8008d7a:	9312      	str	r3, [sp, #72]	; 0x48
 8008d7c:	2c00      	cmp	r4, #0
 8008d7e:	d047      	beq.n	8008e10 <forward_lite_pw_sssa8_ch+0x114>
 8008d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d82:	f04f 0c00 	mov.w	ip, #0
 8008d86:	b34f      	cbz	r7, 8008ddc <forward_lite_pw_sssa8_ch+0xe0>
 8008d88:	ea43 0200 	orr.w	r2, r3, r0
 8008d8c:	f1b8 0f08 	cmp.w	r8, #8
 8008d90:	f3c2 0202 	ubfx	r2, r2, #0, #3
 8008d94:	bf94      	ite	ls
 8008d96:	2600      	movls	r6, #0
 8008d98:	2601      	movhi	r6, #1
 8008d9a:	2a00      	cmp	r2, #0
 8008d9c:	bf18      	it	ne
 8008d9e:	2600      	movne	r6, #0
 8008da0:	2e00      	cmp	r6, #0
 8008da2:	f000 8145 	beq.w	8009030 <forward_lite_pw_sssa8_ch+0x334>
 8008da6:	43da      	mvns	r2, r3
 8008da8:	4402      	add	r2, r0
 8008daa:	2a06      	cmp	r2, #6
 8008dac:	f240 8140 	bls.w	8009030 <forward_lite_pw_sssa8_ch+0x334>
 8008db0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008db2:	f1a3 0608 	sub.w	r6, r3, #8
 8008db6:	eb00 0b02 	add.w	fp, r0, r2
 8008dba:	4602      	mov	r2, r0
 8008dbc:	3608      	adds	r6, #8
 8008dbe:	ed96 7b00 	vldr	d7, [r6]
 8008dc2:	eca2 7b02 	vstmia	r2!, {d7}
 8008dc6:	4593      	cmp	fp, r2
 8008dc8:	d1f8      	bne.n	8008dbc <forward_lite_pw_sssa8_ch+0xc0>
 8008dca:	454f      	cmp	r7, r9
 8008dcc:	bf1c      	itt	ne
 8008dce:	f853 200e 	ldrne.w	r2, [r3, lr]
 8008dd2:	f840 200e 	strne.w	r2, [r0, lr]
 8008dd6:	185a      	adds	r2, r3, r1
 8008dd8:	4613      	mov	r3, r2
 8008dda:	4408      	add	r0, r1
 8008ddc:	b175      	cbz	r5, 8008dfc <forward_lite_pw_sssa8_ch+0x100>
 8008dde:	f993 2000 	ldrsb.w	r2, [r3]
 8008de2:	2d01      	cmp	r5, #1
 8008de4:	7002      	strb	r2, [r0, #0]
 8008de6:	d007      	beq.n	8008df8 <forward_lite_pw_sssa8_ch+0xfc>
 8008de8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8008dec:	2d03      	cmp	r5, #3
 8008dee:	7042      	strb	r2, [r0, #1]
 8008df0:	d102      	bne.n	8008df8 <forward_lite_pw_sssa8_ch+0xfc>
 8008df2:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8008df6:	7082      	strb	r2, [r0, #2]
 8008df8:	442b      	add	r3, r5
 8008dfa:	4428      	add	r0, r5
 8008dfc:	f10c 0c02 	add.w	ip, ip, #2
 8008e00:	4453      	add	r3, sl
 8008e02:	45a4      	cmp	ip, r4
 8008e04:	dbbf      	blt.n	8008d86 <forward_lite_pw_sssa8_ch+0x8a>
 8008e06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e08:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008e0a:	4453      	add	r3, sl
 8008e0c:	18d3      	adds	r3, r2, r3
 8008e0e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e12:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008e14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e16:	4432      	add	r2, r6
 8008e18:	3302      	adds	r3, #2
 8008e1a:	920e      	str	r2, [sp, #56]	; 0x38
 8008e1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e1e:	9312      	str	r3, [sp, #72]	; 0x48
 8008e20:	4293      	cmp	r3, r2
 8008e22:	dbab      	blt.n	8008d7c <forward_lite_pw_sssa8_ch+0x80>
 8008e24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e26:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008e28:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008e2a:	fb06 f304 	mul.w	r3, r6, r4
 8008e2e:	3401      	adds	r4, #1
 8008e30:	1a85      	subs	r5, r0, r2
 8008e32:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
 8008e36:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8008e3a:	ea4f 0864 	mov.w	r8, r4, asr #1
 8008e3e:	fb0a 5503 	mla	r5, sl, r3, r5
 8008e42:	f3c4 044f 	ubfx	r4, r4, #1, #16
 8008e46:	4629      	mov	r1, r5
 8008e48:	f002 f8ec 	bl	800b024 <st_int8_copy>
 8008e4c:	1c73      	adds	r3, r6, #1
 8008e4e:	eddd 0a0e 	vldr	s1, [sp, #56]	; 0x38
 8008e52:	ea4f 0b63 	mov.w	fp, r3, asr #1
 8008e56:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8008e5a:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 8008e5e:	9315      	str	r3, [sp, #84]	; 0x54
 8008e60:	e003      	b.n	8008e6a <forward_lite_pw_sssa8_ch+0x16e>
 8008e62:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 8008e66:	46a0      	mov	r8, r4
 8008e68:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8008e6a:	fb08 f20b 	mul.w	r2, r8, fp
 8008e6e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008e70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8008e72:	920d      	str	r2, [sp, #52]	; 0x34
 8008e74:	fb01 3302 	mla	r3, r1, r2, r3
 8008e78:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8008e7a:	4299      	cmp	r1, r3
 8008e7c:	d205      	bcs.n	8008e8a <forward_lite_pw_sssa8_ch+0x18e>
 8008e7e:	fb02 130a 	mla	r3, r2, sl, r1
 8008e82:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008e84:	429a      	cmp	r2, r3
 8008e86:	f0c0 80cb 	bcc.w	8009020 <forward_lite_pw_sssa8_ch+0x324>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	930e      	str	r3, [sp, #56]	; 0x38
 8008e8e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8008e90:	2701      	movs	r7, #1
 8008e92:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8008e94:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8008e96:	4631      	mov	r1, r6
 8008e98:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
 8008e9c:	982b      	ldr	r0, [sp, #172]	; 0xac
 8008e9e:	eb02 0903 	add.w	r9, r2, r3
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	f001 fbf0 	bl	800a688 <align_factor_ch>
 8008ea8:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8008eaa:	4633      	mov	r3, r6
 8008eac:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8008eae:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8008eb2:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8008eb6:	9213      	str	r2, [sp, #76]	; 0x4c
 8008eb8:	b1eb      	cbz	r3, 8008ef6 <forward_lite_pw_sssa8_ch+0x1fa>
 8008eba:	46a4      	mov	ip, r4
 8008ebc:	f1a9 0002 	sub.w	r0, r9, #2
 8008ec0:	46be      	mov	lr, r7
 8008ec2:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8008ec4:	9512      	str	r5, [sp, #72]	; 0x48
 8008ec6:	e003      	b.n	8008ed0 <forward_lite_pw_sssa8_ch+0x1d4>
 8008ec8:	6013      	str	r3, [r2, #0]
 8008eca:	3204      	adds	r2, #4
 8008ecc:	42b2      	cmp	r2, r6
 8008ece:	d010      	beq.n	8008ef2 <forward_lite_pw_sssa8_ch+0x1f6>
 8008ed0:	f930 3f02 	ldrsh.w	r3, [r0, #2]!
 8008ed4:	1e59      	subs	r1, r3, #1
 8008ed6:	fa0e f503 	lsl.w	r5, lr, r3
 8008eda:	fa04 f303 	lsl.w	r3, r4, r3
 8008ede:	b289      	uxth	r1, r1
 8008ee0:	eb03 0355 	add.w	r3, r3, r5, lsr #1
 8008ee4:	2914      	cmp	r1, #20
 8008ee6:	d9ef      	bls.n	8008ec8 <forward_lite_pw_sssa8_ch+0x1cc>
 8008ee8:	6014      	str	r4, [r2, #0]
 8008eea:	3204      	adds	r2, #4
 8008eec:	2700      	movs	r7, #0
 8008eee:	42b2      	cmp	r2, r6
 8008ef0:	d1ee      	bne.n	8008ed0 <forward_lite_pw_sssa8_ch+0x1d4>
 8008ef2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8008ef4:	4664      	mov	r4, ip
 8008ef6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	f000 80a2 	beq.w	8009042 <forward_lite_pw_sssa8_ch+0x346>
 8008efe:	2300      	movs	r3, #0
 8008f00:	9312      	str	r3, [sp, #72]	; 0x48
 8008f02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f04:	07db      	lsls	r3, r3, #31
 8008f06:	d55b      	bpl.n	8008fc0 <forward_lite_pw_sssa8_ch+0x2c4>
 8008f08:	eb08 030b 	add.w	r3, r8, fp
 8008f0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f0e:	3302      	adds	r3, #2
 8008f10:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8008f14:	9314      	str	r3, [sp, #80]	; 0x50
 8008f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d04e      	beq.n	8008fba <forward_lite_pw_sssa8_ch+0x2be>
 8008f1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f1e:	fb08 fb0a 	mul.w	fp, r8, sl
 8008f22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008f24:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	bf08      	it	eq
 8008f2a:	f112 0f80 	cmneq.w	r2, #128	; 0x80
 8008f2e:	bf0c      	ite	eq
 8008f30:	2301      	moveq	r3, #1
 8008f32:	2300      	movne	r3, #0
 8008f34:	2940      	cmp	r1, #64	; 0x40
 8008f36:	bf08      	it	eq
 8008f38:	f1ba 0f40 	cmpeq.w	sl, #64	; 0x40
 8008f3c:	ea07 0203 	and.w	r2, r7, r3
 8008f40:	fb01 f708 	mul.w	r7, r1, r8
 8008f44:	bf0c      	ite	eq
 8008f46:	2301      	moveq	r3, #1
 8008f48:	2300      	movne	r3, #0
 8008f4a:	2c05      	cmp	r4, #5
 8008f4c:	f040 808f 	bne.w	800906e <forward_lite_pw_sssa8_ch+0x372>
 8008f50:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008f52:	2919      	cmp	r1, #25
 8008f54:	f040 808b 	bne.w	800906e <forward_lite_pw_sssa8_ch+0x372>
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d034      	beq.n	8008fc6 <forward_lite_pw_sssa8_ch+0x2ca>
 8008f5c:	2a00      	cmp	r2, #0
 8008f5e:	f040 80b5 	bne.w	80090cc <forward_lite_pw_sssa8_ch+0x3d0>
 8008f62:	4614      	mov	r4, r2
 8008f64:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008f68:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8008f6c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008f6e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8008f70:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 8008f74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f76:	4628      	mov	r0, r5
 8008f78:	f8cd a010 	str.w	sl, [sp, #16]
 8008f7c:	3401      	adds	r4, #1
 8008f7e:	9228      	str	r2, [sp, #160]	; 0xa0
 8008f80:	445d      	add	r5, fp
 8008f82:	9126      	str	r1, [sp, #152]	; 0x98
 8008f84:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
 8008f88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f8e:	9308      	str	r3, [sp, #32]
 8008f90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f92:	9307      	str	r3, [sp, #28]
 8008f94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f96:	e9cd a305 	strd	sl, r3, [sp, #20]
 8008f9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f9c:	9303      	str	r3, [sp, #12]
 8008f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fa0:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008fa4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	4643      	mov	r3, r8
 8008faa:	f002 ffe9 	bl	800bf80 <st_sssa8_ch_nn_mat_mult_pw_nt_t>
 8008fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fb0:	44b8      	add	r8, r7
 8008fb2:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008fb4:	42a3      	cmp	r3, r4
 8008fb6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8008fb8:	d1dc      	bne.n	8008f74 <forward_lite_pw_sssa8_ch+0x278>
 8008fba:	b01b      	add	sp, #108	; 0x6c
 8008fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fc2:	9314      	str	r3, [sp, #80]	; 0x50
 8008fc4:	e7a7      	b.n	8008f16 <forward_lite_pw_sssa8_ch+0x21a>
 8008fc6:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 8008fca:	461c      	mov	r4, r3
 8008fcc:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008fce:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8008fd0:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 8008fd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	9228      	str	r2, [sp, #160]	; 0xa0
 8008fda:	3401      	adds	r4, #1
 8008fdc:	9126      	str	r1, [sp, #152]	; 0x98
 8008fde:	445d      	add	r5, fp
 8008fe0:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
 8008fe4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fea:	9308      	str	r3, [sp, #32]
 8008fec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fee:	9307      	str	r3, [sp, #28]
 8008ff0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ff2:	e9cd a305 	strd	sl, r3, [sp, #20]
 8008ff6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ff8:	9304      	str	r3, [sp, #16]
 8008ffa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ffc:	9303      	str	r3, [sp, #12]
 8008ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009000:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009004:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	4643      	mov	r3, r8
 800900a:	f002 ffb9 	bl	800bf80 <st_sssa8_ch_nn_mat_mult_pw_nt_t>
 800900e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009010:	44b8      	add	r8, r7
 8009012:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009014:	42a3      	cmp	r3, r4
 8009016:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8009018:	d1dc      	bne.n	8008fd4 <forward_lite_pw_sssa8_ch+0x2d8>
 800901a:	b01b      	add	sp, #108	; 0x6c
 800901c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009020:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009022:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8009026:	930e      	str	r3, [sp, #56]	; 0x38
 8009028:	2301      	movs	r3, #1
 800902a:	469b      	mov	fp, r3
 800902c:	9315      	str	r3, [sp, #84]	; 0x54
 800902e:	e72e      	b.n	8008e8e <forward_lite_pw_sssa8_ch+0x192>
 8009030:	185a      	adds	r2, r3, r1
 8009032:	4606      	mov	r6, r0
 8009034:	f853 bb04 	ldr.w	fp, [r3], #4
 8009038:	429a      	cmp	r2, r3
 800903a:	f846 bb04 	str.w	fp, [r6], #4
 800903e:	d1f9      	bne.n	8009034 <forward_lite_pw_sssa8_ch+0x338>
 8009040:	e6ca      	b.n	8008dd8 <forward_lite_pw_sssa8_ch+0xdc>
 8009042:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009044:	f06f 0309 	mvn.w	r3, #9
 8009048:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800904a:	fb03 1302 	mla	r3, r3, r2, r1
 800904e:	fb02 f20a 	mul.w	r2, r2, sl
 8009052:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8009056:	f6ff af52 	blt.w	8008efe <forward_lite_pw_sssa8_ch+0x202>
 800905a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800905c:	4653      	mov	r3, sl
 800905e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009060:	9826      	ldr	r0, [sp, #152]	; 0x98
 8009062:	e9cd a600 	strd	sl, r6, [sp]
 8009066:	f002 fb5d 	bl	800b724 <st_sssa8_ch_fullW_prefetch>
 800906a:	9612      	str	r6, [sp, #72]	; 0x48
 800906c:	e749      	b.n	8008f02 <forward_lite_pw_sssa8_ch+0x206>
 800906e:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 8009072:	2400      	movs	r4, #0
 8009074:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009076:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8009078:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 800907c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800907e:	4628      	mov	r0, r5
 8009080:	9228      	str	r2, [sp, #160]	; 0xa0
 8009082:	3401      	adds	r4, #1
 8009084:	9126      	str	r1, [sp, #152]	; 0x98
 8009086:	445d      	add	r5, fp
 8009088:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
 800908c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800908e:	9309      	str	r3, [sp, #36]	; 0x24
 8009090:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009092:	9308      	str	r3, [sp, #32]
 8009094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009096:	9307      	str	r3, [sp, #28]
 8009098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800909a:	e9cd a305 	strd	sl, r3, [sp, #20]
 800909e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090a0:	9304      	str	r3, [sp, #16]
 80090a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090a4:	9303      	str	r3, [sp, #12]
 80090a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090a8:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80090ac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	4643      	mov	r3, r8
 80090b2:	f002 ff65 	bl	800bf80 <st_sssa8_ch_nn_mat_mult_pw_nt_t>
 80090b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090b8:	44b8      	add	r8, r7
 80090ba:	9926      	ldr	r1, [sp, #152]	; 0x98
 80090bc:	42a3      	cmp	r3, r4
 80090be:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80090c0:	d1dc      	bne.n	800907c <forward_lite_pw_sssa8_ch+0x380>
 80090c2:	b01b      	add	sp, #108	; 0x6c
 80090c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c8:	461a      	mov	r2, r3
 80090ca:	e6ac      	b.n	8008e26 <forward_lite_pw_sssa8_ch+0x12a>
 80090cc:	2400      	movs	r4, #0
 80090ce:	f04f 0a05 	mov.w	sl, #5
 80090d2:	f04f 0803 	mov.w	r8, #3
 80090d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090d8:	4628      	mov	r0, r5
 80090da:	9926      	ldr	r1, [sp, #152]	; 0x98
 80090dc:	3401      	adds	r4, #1
 80090de:	f8cd 801c 	str.w	r8, [sp, #28]
 80090e2:	445d      	add	r5, fp
 80090e4:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
 80090e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090ea:	e9cd a308 	strd	sl, r3, [sp, #32]
 80090ee:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80090f2:	9306      	str	r3, [sp, #24]
 80090f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090f6:	9303      	str	r3, [sp, #12]
 80090f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80090fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	2340      	movs	r3, #64	; 0x40
 8009104:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8009108:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800910a:	461a      	mov	r2, r3
 800910c:	443a      	add	r2, r7
 800910e:	922d      	str	r2, [sp, #180]	; 0xb4
 8009110:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8009112:	f003 fae5 	bl	800c6e0 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS>
 8009116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009118:	42a3      	cmp	r3, r4
 800911a:	d1dc      	bne.n	80090d6 <forward_lite_pw_sssa8_ch+0x3da>
 800911c:	e74d      	b.n	8008fba <forward_lite_pw_sssa8_ch+0x2be>
 800911e:	bf00      	nop

08009120 <forward_lite_conv2d_rgb_sssa8_ch>:
 8009120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	461e      	mov	r6, r3
 8009126:	460f      	mov	r7, r1
 8009128:	005d      	lsls	r5, r3, #1
 800912a:	4680      	mov	r8, r0
 800912c:	4631      	mov	r1, r6
 800912e:	ed2d 8b02 	vpush	{d8}
 8009132:	b0d7      	sub	sp, #348	; 0x15c
 8009134:	ee08 2a10 	vmov	s16, r2
 8009138:	ee08 2a90 	vmov	s17, r2
 800913c:	9614      	str	r6, [sp, #80]	; 0x50
 800913e:	f8bd 618c 	ldrh.w	r6, [sp, #396]	; 0x18c
 8009142:	f8dd 91b0 	ldr.w	r9, [sp, #432]	; 0x1b0
 8009146:	9626      	str	r6, [sp, #152]	; 0x98
 8009148:	f8bd 6190 	ldrh.w	r6, [sp, #400]	; 0x190
 800914c:	eba9 0343 	sub.w	r3, r9, r3, lsl #1
 8009150:	f8bd 4188 	ldrh.w	r4, [sp, #392]	; 0x188
 8009154:	960f      	str	r6, [sp, #60]	; 0x3c
 8009156:	f99d 619c 	ldrsb.w	r6, [sp, #412]	; 0x19c
 800915a:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 800915c:	960b      	str	r6, [sp, #44]	; 0x2c
 800915e:	f89d 61a4 	ldrb.w	r6, [sp, #420]	; 0x1a4
 8009162:	941c      	str	r4, [sp, #112]	; 0x70
 8009164:	18d4      	adds	r4, r2, r3
 8009166:	9627      	str	r6, [sp, #156]	; 0x9c
 8009168:	f8bd 61ac 	ldrh.w	r6, [sp, #428]	; 0x1ac
 800916c:	4623      	mov	r3, r4
 800916e:	9868      	ldr	r0, [sp, #416]	; 0x1a0
 8009170:	f99d b198 	ldrsb.w	fp, [sp, #408]	; 0x198
 8009174:	960e      	str	r6, [sp, #56]	; 0x38
 8009176:	f8dd a1a8 	ldr.w	sl, [sp, #424]	; 0x1a8
 800917a:	f001 fa85 	bl	800a688 <align_factor_ch>
 800917e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8009180:	ee18 1a10 	vmov	r1, s16
 8009184:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800918a:	9e6d      	ldr	r6, [sp, #436]	; 0x1b4
 800918c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800918e:	e9cd b302 	strd	fp, r3, [sp, #8]
 8009192:	18ab      	adds	r3, r5, r2
 8009194:	9000      	str	r0, [sp, #0]
 8009196:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800919a:	4616      	mov	r6, r2
 800919c:	9313      	str	r3, [sp, #76]	; 0x4c
 800919e:	4603      	mov	r3, r0
 80091a0:	2003      	movs	r0, #3
 80091a2:	f001 fcf7 	bl	800ab94 <st_sssa8_ch_convolve_rank1upd>
 80091a6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80091a8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80091aa:	fb10 f300 	smulbb	r3, r0, r0
 80091ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80091b2:	b298      	uxth	r0, r3
 80091b4:	ebc6 7346 	rsb	r3, r6, r6, lsl #29
 80091b8:	9015      	str	r0, [sp, #84]	; 0x54
 80091ba:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80091be:	932f      	str	r3, [sp, #188]	; 0xbc
 80091c0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80091c4:	9330      	str	r3, [sp, #192]	; 0xc0
 80091c6:	b1de      	cbz	r6, 8009200 <forward_lite_conv2d_rgb_sssa8_ch+0xe0>
 80091c8:	4621      	mov	r1, r4
 80091ca:	1d1a      	adds	r2, r3, #4
 80091cc:	f04f 0e01 	mov.w	lr, #1
 80091d0:	442c      	add	r4, r5
 80091d2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80091d4:	f931 3b02 	ldrsh.w	r3, [r1], #2
 80091d8:	1e58      	subs	r0, r3, #1
 80091da:	fa0e fc03 	lsl.w	ip, lr, r3
 80091de:	fa06 f303 	lsl.w	r3, r6, r3
 80091e2:	b280      	uxth	r0, r0
 80091e4:	eb03 035c 	add.w	r3, r3, ip, lsr #1
 80091e8:	2814      	cmp	r0, #20
 80091ea:	f200 8116 	bhi.w	800941a <forward_lite_conv2d_rgb_sssa8_ch+0x2fa>
 80091ee:	42a1      	cmp	r1, r4
 80091f0:	f842 3c04 	str.w	r3, [r2, #-4]
 80091f4:	f102 0204 	add.w	r2, r2, #4
 80091f8:	d1ec      	bne.n	80091d4 <forward_lite_conv2d_rgb_sssa8_ch+0xb4>
 80091fa:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 80091fc:	eb03 0409 	add.w	r4, r3, r9
 8009200:	1b63      	subs	r3, r4, r5
 8009202:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009204:	aa36      	add	r2, sp, #216	; 0xd8
 8009206:	a94c      	add	r1, sp, #304	; 0x130
 8009208:	9331      	str	r3, [sp, #196]	; 0xc4
 800920a:	a842      	add	r0, sp, #264	; 0x108
 800920c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800920e:	f013 0f01 	tst.w	r3, #1
 8009212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009214:	bf18      	it	ne
 8009216:	3302      	addne	r3, #2
 8009218:	fb03 f303 	mul.w	r3, r3, r3
 800921c:	931d      	str	r3, [sp, #116]	; 0x74
 800921e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009220:	e9cd 333b 	strd	r3, r3, [sp, #236]	; 0xec
 8009224:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009226:	e9cd 3350 	strd	r3, r3, [sp, #320]	; 0x140
 800922a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800922c:	e9cd 334e 	strd	r3, r3, [sp, #312]	; 0x138
 8009230:	ab3e      	add	r3, sp, #248	; 0xf8
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	ab3a      	add	r3, sp, #232	; 0xe8
 8009236:	e9cd 443f 	strd	r4, r4, [sp, #252]	; 0xfc
 800923a:	e9cd 7737 	strd	r7, r7, [sp, #220]	; 0xdc
 800923e:	f001 fb3d 	bl	800a8bc <ai_padding_opt_init>
 8009242:	fb04 f304 	mul.w	r3, r4, r4
 8009246:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8009248:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800924c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8009250:	fb01 f403 	mul.w	r4, r1, r3
 8009254:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009258:	fb01 f202 	mul.w	r2, r1, r2
 800925c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800925e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8009262:	901e      	str	r0, [sp, #120]	; 0x78
 8009264:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009268:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800926c:	930d      	str	r3, [sp, #52]	; 0x34
 800926e:	bfa8      	it	ge
 8009270:	f44f 6420 	movge.w	r4, #2560	; 0xa00
 8009274:	42a2      	cmp	r2, r4
 8009276:	f340 81c4 	ble.w	8009602 <forward_lite_conv2d_rgb_sssa8_ch+0x4e2>
 800927a:	2300      	movs	r3, #0
 800927c:	932b      	str	r3, [sp, #172]	; 0xac
 800927e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009280:	fbb4 f3f3 	udiv	r3, r4, r3
 8009284:	b29b      	uxth	r3, r3
 8009286:	4619      	mov	r1, r3
 8009288:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800928a:	4299      	cmp	r1, r3
 800928c:	bf28      	it	cs
 800928e:	4619      	movcs	r1, r3
 8009290:	fbb3 f2f1 	udiv	r2, r3, r1
 8009294:	fb01 3312 	mls	r3, r1, r2, r3
 8009298:	b292      	uxth	r2, r2
 800929a:	912c      	str	r1, [sp, #176]	; 0xb0
 800929c:	b29b      	uxth	r3, r3
 800929e:	9222      	str	r2, [sp, #136]	; 0x88
 80092a0:	b11b      	cbz	r3, 80092aa <forward_lite_conv2d_rgb_sssa8_ch+0x18a>
 80092a2:	4613      	mov	r3, r2
 80092a4:	3301      	adds	r3, #1
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	9322      	str	r3, [sp, #136]	; 0x88
 80092aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80092ac:	2900      	cmp	r1, #0
 80092ae:	f000 8196 	beq.w	80095de <forward_lite_conv2d_rgb_sssa8_ch+0x4be>
 80092b2:	9826      	ldr	r0, [sp, #152]	; 0x98
 80092b4:	fa0f fb8b 	sxth.w	fp, fp
 80092b8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80092ba:	eba0 0280 	sub.w	r2, r0, r0, lsl #2
 80092be:	1b03      	subs	r3, r0, r4
 80092c0:	1a26      	subs	r6, r4, r0
 80092c2:	4490      	add	r8, r2
 80092c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80092c8:	962e      	str	r6, [sp, #184]	; 0xb8
 80092ca:	9628      	str	r6, [sp, #160]	; 0xa0
 80092cc:	4443      	add	r3, r8
 80092ce:	46d8      	mov	r8, fp
 80092d0:	46bb      	mov	fp, r7
 80092d2:	9311      	str	r3, [sp, #68]	; 0x44
 80092d4:	1ccb      	adds	r3, r1, #3
 80092d6:	4453      	add	r3, sl
 80092d8:	e9cd 3a23 	strd	r3, sl, [sp, #140]	; 0x8c
 80092dc:	1c8b      	adds	r3, r1, #2
 80092de:	9333      	str	r3, [sp, #204]	; 0xcc
 80092e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092e2:	fb01 f303 	mul.w	r3, r1, r3
 80092e6:	9334      	str	r3, [sp, #208]	; 0xd0
 80092e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092ea:	fb07 f303 	mul.w	r3, r7, r3
 80092ee:	9335      	str	r3, [sp, #212]	; 0xd4
 80092f0:	fb07 f300 	mul.w	r3, r7, r0
 80092f4:	9332      	str	r3, [sp, #200]	; 0xc8
 80092f6:	2300      	movs	r3, #0
 80092f8:	9325      	str	r3, [sp, #148]	; 0x94
 80092fa:	2301      	movs	r3, #1
 80092fc:	9321      	str	r3, [sp, #132]	; 0x84
 80092fe:	a842      	add	r0, sp, #264	; 0x108
 8009300:	f001 fb36 	bl	800a970 <ai_padding_opt_phase1>
 8009304:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009306:	2b03      	cmp	r3, #3
 8009308:	f000 8176 	beq.w	80095f8 <forward_lite_conv2d_rgb_sssa8_ch+0x4d8>
 800930c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800930e:	9318      	str	r3, [sp, #96]	; 0x60
 8009310:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009312:	932a      	str	r3, [sp, #168]	; 0xa8
 8009314:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 8166 	beq.w	80095e8 <forward_lite_conv2d_rgb_sssa8_ch+0x4c8>
 800931c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800931e:	2b00      	cmp	r3, #0
 8009320:	f000 8145 	beq.w	80095ae <forward_lite_conv2d_rgb_sssa8_ch+0x48e>
 8009324:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009326:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009328:	9932      	ldr	r1, [sp, #200]	; 0xc8
 800932a:	469a      	mov	sl, r3
 800932c:	1a9a      	subs	r2, r3, r2
 800932e:	edcd 8a29 	vstr	s17, [sp, #164]	; 0xa4
 8009332:	9210      	str	r2, [sp, #64]	; 0x40
 8009334:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009336:	9220      	str	r2, [sp, #128]	; 0x80
 8009338:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800933a:	1a52      	subs	r2, r2, r1
 800933c:	9212      	str	r2, [sp, #72]	; 0x48
 800933e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009340:	921f      	str	r2, [sp, #124]	; 0x7c
 8009342:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8009344:	9217      	str	r2, [sp, #92]	; 0x5c
 8009346:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8009348:	9219      	str	r2, [sp, #100]	; 0x64
 800934a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800934c:	ee08 2a10 	vmov	s16, r2
 8009350:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8009352:	921a      	str	r2, [sp, #104]	; 0x68
 8009354:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8009356:	921b      	str	r2, [sp, #108]	; 0x6c
 8009358:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800935a:	4252      	negs	r2, r2
 800935c:	922d      	str	r2, [sp, #180]	; 0xb4
 800935e:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8009360:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009362:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009364:	9343      	str	r3, [sp, #268]	; 0x10c
 8009366:	9116      	str	r1, [sp, #88]	; 0x58
 8009368:	2100      	movs	r1, #0
 800936a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800936c:	9242      	str	r2, [sp, #264]	; 0x108
 800936e:	9344      	str	r3, [sp, #272]	; 0x110
 8009370:	910c      	str	r1, [sp, #48]	; 0x30
 8009372:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009374:	e9dd 542d 	ldrd	r5, r4, [sp, #180]	; 0xb4
 8009378:	2a00      	cmp	r2, #0
 800937a:	d045      	beq.n	8009408 <forward_lite_conv2d_rgb_sssa8_ch+0x2e8>
 800937c:	3a01      	subs	r2, #1
 800937e:	9242      	str	r2, [sp, #264]	; 0x108
 8009380:	2201      	movs	r2, #1
 8009382:	f8ad 212e 	strh.w	r2, [sp, #302]	; 0x12e
 8009386:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009388:	458a      	cmp	sl, r1
 800938a:	dd2d      	ble.n	80093e8 <forward_lite_conv2d_rgb_sssa8_ch+0x2c8>
 800938c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8009390:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009392:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8009396:	468c      	mov	ip, r1
 8009398:	4402      	add	r2, r0
 800939a:	920b      	str	r2, [sp, #44]	; 0x2c
 800939c:	42a5      	cmp	r5, r4
 800939e:	da1e      	bge.n	80093de <forward_lite_conv2d_rgb_sssa8_ch+0x2be>
 80093a0:	1d9a      	adds	r2, r3, #6
 80093a2:	eb09 0649 	add.w	r6, r9, r9, lsl #1
 80093a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093a8:	4629      	mov	r1, r5
 80093aa:	441e      	add	r6, r3
 80093ac:	4561      	cmp	r1, ip
 80093ae:	460f      	mov	r7, r1
 80093b0:	f04f 0000 	mov.w	r0, #0
 80093b4:	f1a2 0e06 	sub.w	lr, r2, #6
 80093b8:	bf38      	it	cc
 80093ba:	4667      	movcc	r7, ip
 80093bc:	4613      	mov	r3, r2
 80093be:	f368 000f 	bfi	r0, r8, #0, #16
 80093c2:	45bb      	cmp	fp, r7
 80093c4:	f368 401f 	bfi	r0, r8, #16, #16
 80093c8:	d832      	bhi.n	8009430 <forward_lite_conv2d_rgb_sssa8_ch+0x310>
 80093ca:	3101      	adds	r1, #1
 80093cc:	f822 8c06 	strh.w	r8, [r2, #-6]
 80093d0:	f842 0c04 	str.w	r0, [r2, #-4]
 80093d4:	3603      	adds	r6, #3
 80093d6:	42a1      	cmp	r1, r4
 80093d8:	f102 0206 	add.w	r2, r2, #6
 80093dc:	d1e6      	bne.n	80093ac <forward_lite_conv2d_rgb_sssa8_ch+0x28c>
 80093de:	f10c 0c01 	add.w	ip, ip, #1
 80093e2:	44d9      	add	r9, fp
 80093e4:	45d4      	cmp	ip, sl
 80093e6:	d1d9      	bne.n	800939c <forward_lite_conv2d_rgb_sssa8_ch+0x27c>
 80093e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d071      	beq.n	80094d2 <forward_lite_conv2d_rgb_sssa8_ch+0x3b2>
 80093ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80093f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093f2:	440c      	add	r4, r1
 80093f4:	440d      	add	r5, r1
 80093f6:	3201      	adds	r2, #1
 80093f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80093fa:	428a      	cmp	r2, r1
 80093fc:	920c      	str	r2, [sp, #48]	; 0x30
 80093fe:	f000 808e 	beq.w	800951e <forward_lite_conv2d_rgb_sssa8_ch+0x3fe>
 8009402:	9a42      	ldr	r2, [sp, #264]	; 0x108
 8009404:	2a00      	cmp	r2, #0
 8009406:	d1b9      	bne.n	800937c <forward_lite_conv2d_rgb_sssa8_ch+0x25c>
 8009408:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800940a:	bb5a      	cbnz	r2, 8009464 <forward_lite_conv2d_rgb_sssa8_ch+0x344>
 800940c:	9a44      	ldr	r2, [sp, #272]	; 0x110
 800940e:	3a01      	subs	r2, #1
 8009410:	9244      	str	r2, [sp, #272]	; 0x110
 8009412:	2201      	movs	r2, #1
 8009414:	f8ad 212e 	strh.w	r2, [sp, #302]	; 0x12e
 8009418:	e7b5      	b.n	8009386 <forward_lite_conv2d_rgb_sssa8_ch+0x266>
 800941a:	42a1      	cmp	r1, r4
 800941c:	f842 6c04 	str.w	r6, [r2, #-4]
 8009420:	f102 0204 	add.w	r2, r2, #4
 8009424:	f47f aed6 	bne.w	80091d4 <forward_lite_conv2d_rgb_sssa8_ch+0xb4>
 8009428:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 800942a:	eb03 0409 	add.w	r4, r3, r9
 800942e:	e6e7      	b.n	8009200 <forward_lite_conv2d_rgb_sssa8_ch+0xe0>
 8009430:	f856 3b03 	ldr.w	r3, [r6], #3
 8009434:	3101      	adds	r1, #1
 8009436:	fa2f f083 	sxtb16	r0, r3
 800943a:	ea4f 2733 	mov.w	r7, r3, ror #8
 800943e:	42a1      	cmp	r1, r4
 8009440:	4613      	mov	r3, r2
 8009442:	f102 0206 	add.w	r2, r2, #6
 8009446:	fa2f f787 	sxtb16	r7, r7
 800944a:	eac7 0700 	pkhbt	r7, r7, r0
 800944e:	f8ce 7002 	str.w	r7, [lr, #2]
 8009452:	f822 0c0c 	strh.w	r0, [r2, #-12]
 8009456:	d1a9      	bne.n	80093ac <forward_lite_conv2d_rgb_sssa8_ch+0x28c>
 8009458:	f10c 0c01 	add.w	ip, ip, #1
 800945c:	44d9      	add	r9, fp
 800945e:	45d4      	cmp	ip, sl
 8009460:	d19c      	bne.n	800939c <forward_lite_conv2d_rgb_sssa8_ch+0x27c>
 8009462:	e7c1      	b.n	80093e8 <forward_lite_conv2d_rgb_sssa8_ch+0x2c8>
 8009464:	3a01      	subs	r2, #1
 8009466:	9243      	str	r2, [sp, #268]	; 0x10c
 8009468:	f8bd 212c 	ldrh.w	r2, [sp, #300]	; 0x12c
 800946c:	2a01      	cmp	r2, #1
 800946e:	f8ad 212e 	strh.w	r2, [sp, #302]	; 0x12e
 8009472:	d088      	beq.n	8009386 <forward_lite_conv2d_rgb_sssa8_ch+0x266>
 8009474:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009476:	4592      	cmp	sl, r2
 8009478:	ddb6      	ble.n	80093e8 <forward_lite_conv2d_rgb_sssa8_ch+0x2c8>
 800947a:	eba4 0e05 	sub.w	lr, r4, r5
 800947e:	eb04 0944 	add.w	r9, r4, r4, lsl #1
 8009482:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009484:	4694      	mov	ip, r2
 8009486:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 800948a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800948c:	4489      	add	r9, r1
 800948e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8009492:	42a5      	cmp	r5, r4
 8009494:	da15      	bge.n	80094c2 <forward_lite_conv2d_rgb_sssa8_ch+0x3a2>
 8009496:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 800949a:	eb03 000e 	add.w	r0, r3, lr
 800949e:	4449      	add	r1, r9
 80094a0:	3306      	adds	r3, #6
 80094a2:	f851 2b03 	ldr.w	r2, [r1], #3
 80094a6:	fa2f f682 	sxtb16	r6, r2
 80094aa:	4283      	cmp	r3, r0
 80094ac:	ea4f 2232 	mov.w	r2, r2, ror #8
 80094b0:	f823 6c06 	strh.w	r6, [r3, #-6]
 80094b4:	fa2f f282 	sxtb16	r2, r2
 80094b8:	eac2 0206 	pkhbt	r2, r2, r6
 80094bc:	f843 2c04 	str.w	r2, [r3, #-4]
 80094c0:	d1ee      	bne.n	80094a0 <forward_lite_conv2d_rgb_sssa8_ch+0x380>
 80094c2:	f10c 0c01 	add.w	ip, ip, #1
 80094c6:	445f      	add	r7, fp
 80094c8:	45d4      	cmp	ip, sl
 80094ca:	d1e2      	bne.n	8009492 <forward_lite_conv2d_rgb_sssa8_ch+0x372>
 80094cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d18d      	bne.n	80093ee <forward_lite_conv2d_rgb_sssa8_ch+0x2ce>
 80094d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80094d4:	4610      	mov	r0, r2
 80094d6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80094d8:	ee18 2a10 	vmov	r2, s16
 80094dc:	9308      	str	r3, [sp, #32]
 80094de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80094e0:	3601      	adds	r6, #1
 80094e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80094e4:	9307      	str	r3, [sp, #28]
 80094e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80094e8:	960c      	str	r6, [sp, #48]	; 0x30
 80094ea:	9306      	str	r3, [sp, #24]
 80094ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094ee:	9305      	str	r3, [sp, #20]
 80094f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80094f2:	9304      	str	r3, [sp, #16]
 80094f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094f6:	9303      	str	r3, [sp, #12]
 80094f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094fe:	441c      	add	r4, r3
 8009500:	441d      	add	r5, r3
 8009502:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8009506:	9302      	str	r3, [sp, #8]
 8009508:	2300      	movs	r3, #0
 800950a:	9301      	str	r3, [sp, #4]
 800950c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800950e:	f002 fb99 	bl	800bc44 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8009512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009514:	9016      	str	r0, [sp, #88]	; 0x58
 8009516:	42b3      	cmp	r3, r6
 8009518:	d01b      	beq.n	8009552 <forward_lite_conv2d_rgb_sssa8_ch+0x432>
 800951a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800951c:	e771      	b.n	8009402 <forward_lite_conv2d_rgb_sssa8_ch+0x2e2>
 800951e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009520:	4299      	cmp	r1, r3
 8009522:	d016      	beq.n	8009552 <forward_lite_conv2d_rgb_sssa8_ch+0x432>
 8009524:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009526:	ee18 2a10 	vmov	r2, s16
 800952a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800952c:	9307      	str	r3, [sp, #28]
 800952e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009530:	9306      	str	r3, [sp, #24]
 8009532:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009534:	9305      	str	r3, [sp, #20]
 8009536:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009538:	9304      	str	r3, [sp, #16]
 800953a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800953c:	9303      	str	r3, [sp, #12]
 800953e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009540:	9302      	str	r3, [sp, #8]
 8009542:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800954a:	9301      	str	r3, [sp, #4]
 800954c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800954e:	f001 fe27 	bl	800b1a0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8009552:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009554:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009556:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009558:	1ad2      	subs	r2, r2, r3
 800955a:	4419      	add	r1, r3
 800955c:	429a      	cmp	r2, r3
 800955e:	921f      	str	r2, [sp, #124]	; 0x7c
 8009560:	9118      	str	r1, [sp, #96]	; 0x60
 8009562:	bfa8      	it	ge
 8009564:	461a      	movge	r2, r3
 8009566:	2a00      	cmp	r2, #0
 8009568:	4614      	mov	r4, r2
 800956a:	dd1a      	ble.n	80095a2 <forward_lite_conv2d_rgb_sssa8_ch+0x482>
 800956c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800956e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009570:	fb03 1002 	mla	r0, r3, r2, r1
 8009574:	ee18 1a10 	vmov	r1, s16
 8009578:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800957c:	9029      	str	r0, [sp, #164]	; 0xa4
 800957e:	ee08 1a10 	vmov	s16, r1
 8009582:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009584:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8009588:	911a      	str	r1, [sp, #104]	; 0x68
 800958a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800958c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8009590:	911b      	str	r1, [sp, #108]	; 0x6c
 8009592:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009594:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009598:	990d      	ldr	r1, [sp, #52]	; 0x34
 800959a:	9319      	str	r3, [sp, #100]	; 0x64
 800959c:	b2a3      	uxth	r3, r4
 800959e:	f001 f8a3 	bl	800a6e8 <st_int8_to16_dual>
 80095a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80095a4:	3b01      	subs	r3, #1
 80095a6:	9320      	str	r3, [sp, #128]	; 0x80
 80095a8:	d001      	beq.n	80095ae <forward_lite_conv2d_rgb_sssa8_ch+0x48e>
 80095aa:	9417      	str	r4, [sp, #92]	; 0x5c
 80095ac:	e6d7      	b.n	800935e <forward_lite_conv2d_rgb_sssa8_ch+0x23e>
 80095ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80095b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095b2:	4413      	add	r3, r2
 80095b4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80095b6:	9328      	str	r3, [sp, #160]	; 0xa0
 80095b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80095ba:	4413      	add	r3, r2
 80095bc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80095be:	9323      	str	r3, [sp, #140]	; 0x8c
 80095c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80095c2:	4413      	add	r3, r2
 80095c4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80095c6:	9324      	str	r3, [sp, #144]	; 0x90
 80095c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095ca:	3301      	adds	r3, #1
 80095cc:	9321      	str	r3, [sp, #132]	; 0x84
 80095ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80095d0:	4413      	add	r3, r2
 80095d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095d4:	9325      	str	r3, [sp, #148]	; 0x94
 80095d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80095d8:	4293      	cmp	r3, r2
 80095da:	f6ff ae90 	blt.w	80092fe <forward_lite_conv2d_rgb_sssa8_ch+0x1de>
 80095de:	b057      	add	sp, #348	; 0x15c
 80095e0:	ecbd 8b02 	vpop	{d8}
 80095e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80095ea:	ee18 0a90 	vmov	r0, s17
 80095ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80095f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80095f2:	f001 f879 	bl	800a6e8 <st_int8_to16_dual>
 80095f6:	e691      	b.n	800931c <forward_lite_conv2d_rgb_sssa8_ch+0x1fc>
 80095f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095fa:	932a      	str	r3, [sp, #168]	; 0xa8
 80095fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80095fe:	9318      	str	r3, [sp, #96]	; 0x60
 8009600:	e688      	b.n	8009314 <forward_lite_conv2d_rgb_sssa8_ch+0x1f4>
 8009602:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8009606:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009608:	ee18 0a90 	vmov	r0, s17
 800960c:	f001 f86c 	bl	800a6e8 <st_int8_to16_dual>
 8009610:	2301      	movs	r3, #1
 8009612:	932b      	str	r3, [sp, #172]	; 0xac
 8009614:	e633      	b.n	800927e <forward_lite_conv2d_rgb_sssa8_ch+0x15e>
 8009616:	bf00      	nop

08009618 <forward_lite_dense_if32of32wf32>:
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	ed2d 8b0c 	vpush	{d8-d13}
 8009620:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8009624:	6801      	ldr	r1, [r0, #0]
 8009626:	b083      	sub	sp, #12
 8009628:	fb02 f303 	mul.w	r3, r2, r3
 800962c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8009630:	9100      	str	r1, [sp, #0]
 8009632:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009636:	4299      	cmp	r1, r3
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	f080 811c 	bcs.w	8009876 <forward_lite_dense_if32of32wf32+0x25e>
 800963e:	4607      	mov	r7, r0
 8009640:	6904      	ldr	r4, [r0, #16]
 8009642:	0096      	lsls	r6, r2, #2
 8009644:	9b00      	ldr	r3, [sp, #0]
 8009646:	68bd      	ldr	r5, [r7, #8]
 8009648:	eb03 0e06 	add.w	lr, r3, r6
 800964c:	461e      	mov	r6, r3
 800964e:	459e      	cmp	lr, r3
 8009650:	f240 8103 	bls.w	800985a <forward_lite_dense_if32of32wf32+0x242>
 8009654:	f1a4 0c10 	sub.w	ip, r4, #16
 8009658:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800965c:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8009660:	f10c 0c01 	add.w	ip, ip, #1
 8009664:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8009668:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 800966c:	2c0f      	cmp	r4, #15
 800966e:	f240 8107 	bls.w	8009880 <forward_lite_dense_if32of32wf32+0x268>
 8009672:	f108 0240 	add.w	r2, r8, #64	; 0x40
 8009676:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800967a:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80098d0 <forward_lite_dense_if32of32wf32+0x2b8>
 800967e:	4621      	mov	r1, r4
 8009680:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8009684:	3910      	subs	r1, #16
 8009686:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800968a:	3340      	adds	r3, #64	; 0x40
 800968c:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8009690:	290f      	cmp	r1, #15
 8009692:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009696:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 800969a:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800969e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80096a2:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 80096a6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80096aa:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 80096ae:	ed12 da1d 	vldr	s26, [r2, #-116]	; 0xffffff8c
 80096b2:	ed52 ca1c 	vldr	s25, [r2, #-112]	; 0xffffff90
 80096b6:	ed13 ca1c 	vldr	s24, [r3, #-112]	; 0xffffff90
 80096ba:	ed52 ba1b 	vldr	s23, [r2, #-108]	; 0xffffff94
 80096be:	ed13 ba1b 	vldr	s22, [r3, #-108]	; 0xffffff94
 80096c2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80096c6:	ed52 aa1a 	vldr	s21, [r2, #-104]	; 0xffffff98
 80096ca:	ed13 aa1a 	vldr	s20, [r3, #-104]	; 0xffffff98
 80096ce:	ed52 9a19 	vldr	s19, [r2, #-100]	; 0xffffff9c
 80096d2:	ed13 9a19 	vldr	s18, [r3, #-100]	; 0xffffff9c
 80096d6:	ed52 8a18 	vldr	s17, [r2, #-96]	; 0xffffffa0
 80096da:	ed13 8a18 	vldr	s16, [r3, #-96]	; 0xffffffa0
 80096de:	eeed 7a26 	vfma.f32	s15, s26, s13
 80096e2:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 80096e6:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 80096ea:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 80096ee:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 80096f2:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 80096f6:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 80096fa:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80096fe:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8009702:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8009706:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800970a:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800970e:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8009712:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8009716:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800971a:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800971e:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8009722:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009726:	eee9 7a89 	vfma.f32	s15, s19, s18
 800972a:	eee8 7a88 	vfma.f32	s15, s17, s16
 800972e:	eee0 7a20 	vfma.f32	s15, s0, s1
 8009732:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009736:	eee2 7a22 	vfma.f32	s15, s4, s5
 800973a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800973e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009742:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009746:	eee6 7a26 	vfma.f32	s15, s12, s13
 800974a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800974e:	d897      	bhi.n	8009680 <forward_lite_dense_if32of32wf32+0x68>
 8009750:	eb05 020b 	add.w	r2, r5, fp
 8009754:	f004 010f 	and.w	r1, r4, #15
 8009758:	4663      	mov	r3, ip
 800975a:	2903      	cmp	r1, #3
 800975c:	d95f      	bls.n	800981e <forward_lite_dense_if32of32wf32+0x206>
 800975e:	edd2 6a01 	vldr	s13, [r2, #4]
 8009762:	1f08      	subs	r0, r1, #4
 8009764:	edd3 7a01 	vldr	s15, [r3, #4]
 8009768:	ed93 4a00 	vldr	s8, [r3]
 800976c:	2803      	cmp	r0, #3
 800976e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009772:	edd2 4a00 	vldr	s9, [r2]
 8009776:	ed93 5a02 	vldr	s10, [r3, #8]
 800977a:	edd2 5a02 	vldr	s11, [r2, #8]
 800977e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009782:	ed93 6a03 	vldr	s12, [r3, #12]
 8009786:	edd2 6a03 	vldr	s13, [r2, #12]
 800978a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800978e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009792:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009796:	eeb0 7a67 	vmov.f32	s14, s15
 800979a:	d938      	bls.n	800980e <forward_lite_dense_if32of32wf32+0x1f6>
 800979c:	edd2 6a05 	vldr	s13, [r2, #20]
 80097a0:	f1a1 0a08 	sub.w	sl, r1, #8
 80097a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80097a8:	ed93 4a04 	vldr	s8, [r3, #16]
 80097ac:	f1ba 0f03 	cmp.w	sl, #3
 80097b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80097b4:	edd2 4a04 	vldr	s9, [r2, #16]
 80097b8:	ed93 5a06 	vldr	s10, [r3, #24]
 80097bc:	edd2 5a06 	vldr	s11, [r2, #24]
 80097c0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80097c4:	ed93 6a07 	vldr	s12, [r3, #28]
 80097c8:	edd2 6a07 	vldr	s13, [r2, #28]
 80097cc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80097d0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80097d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80097d8:	d919      	bls.n	800980e <forward_lite_dense_if32of32wf32+0x1f6>
 80097da:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80097de:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80097e2:	ed92 4a08 	vldr	s8, [r2, #32]
 80097e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80097ea:	edd3 4a08 	vldr	s9, [r3, #32]
 80097ee:	ed92 5a0a 	vldr	s10, [r2, #40]	; 0x28
 80097f2:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 80097f6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80097fa:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 80097fe:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8009802:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009806:	eee6 7a26 	vfma.f32	s15, s12, s13
 800980a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800980e:	0880      	lsrs	r0, r0, #2
 8009810:	f001 0103 	and.w	r1, r1, #3
 8009814:	3001      	adds	r0, #1
 8009816:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800981a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800981e:	b1a9      	cbz	r1, 800984c <forward_lite_dense_if32of32wf32+0x234>
 8009820:	edd3 6a00 	vldr	s13, [r3]
 8009824:	3901      	subs	r1, #1
 8009826:	edd2 7a00 	vldr	s15, [r2]
 800982a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800982e:	d00d      	beq.n	800984c <forward_lite_dense_if32of32wf32+0x234>
 8009830:	edd3 6a01 	vldr	s13, [r3, #4]
 8009834:	2901      	cmp	r1, #1
 8009836:	edd2 7a01 	vldr	s15, [r2, #4]
 800983a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800983e:	d005      	beq.n	800984c <forward_lite_dense_if32of32wf32+0x234>
 8009840:	edd2 6a02 	vldr	s13, [r2, #8]
 8009844:	edd3 7a02 	vldr	s15, [r3, #8]
 8009848:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800984c:	eca6 7a01 	vstmia	r6!, {s14}
 8009850:	45b6      	cmp	lr, r6
 8009852:	444d      	add	r5, r9
 8009854:	f63f af0a 	bhi.w	800966c <forward_lite_dense_if32of32wf32+0x54>
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	b9b3      	cbnz	r3, 800988c <forward_lite_dense_if32of32wf32+0x274>
 800985e:	9b00      	ldr	r3, [sp, #0]
 8009860:	0096      	lsls	r6, r2, #2
 8009862:	9901      	ldr	r1, [sp, #4]
 8009864:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009868:	693c      	ldr	r4, [r7, #16]
 800986a:	4299      	cmp	r1, r3
 800986c:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	f63f aee7 	bhi.w	8009644 <forward_lite_dense_if32of32wf32+0x2c>
 8009876:	b003      	add	sp, #12
 8009878:	ecbd 8b0c 	vpop	{d8-d13}
 800987c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009880:	4621      	mov	r1, r4
 8009882:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80098d0 <forward_lite_dense_if32of32wf32+0x2b8>
 8009886:	462a      	mov	r2, r5
 8009888:	4643      	mov	r3, r8
 800988a:	e766      	b.n	800975a <forward_lite_dense_if32of32wf32+0x142>
 800988c:	2a00      	cmp	r2, #0
 800988e:	d0e6      	beq.n	800985e <forward_lite_dense_if32of32wf32+0x246>
 8009890:	9a00      	ldr	r2, [sp, #0]
 8009892:	ed93 7a00 	vldr	s14, [r3]
 8009896:	edd2 7a00 	vldr	s15, [r2]
 800989a:	4613      	mov	r3, r2
 800989c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098a0:	edc2 7a00 	vstr	s15, [r2]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	2a01      	cmp	r2, #1
 80098a8:	d9d9      	bls.n	800985e <forward_lite_dense_if32of32wf32+0x246>
 80098aa:	1d19      	adds	r1, r3, #4
 80098ac:	2301      	movs	r3, #1
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	ed91 7a00 	vldr	s14, [r1]
 80098b4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80098b8:	3301      	adds	r3, #1
 80098ba:	edd2 7a00 	vldr	s15, [r2]
 80098be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098c2:	ece1 7a01 	vstmia	r1!, {s15}
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d8f0      	bhi.n	80098ae <forward_lite_dense_if32of32wf32+0x296>
 80098cc:	e7c7      	b.n	800985e <forward_lite_dense_if32of32wf32+0x246>
 80098ce:	bf00      	nop
 80098d0:	00000000 	.word	0x00000000

080098d4 <forward_lite_dense_if32of32wf32_lut4>:
 80098d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d8:	b08d      	sub	sp, #52	; 0x34
 80098da:	4605      	mov	r5, r0
 80098dc:	460c      	mov	r4, r1
 80098de:	9005      	str	r0, [sp, #20]
 80098e0:	4618      	mov	r0, r3
 80098e2:	920a      	str	r2, [sp, #40]	; 0x28
 80098e4:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80098e6:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 80098ea:	fb02 f303 	mul.w	r3, r2, r3
 80098ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80098f2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80098f4:	9308      	str	r3, [sp, #32]
 80098f6:	b126      	cbz	r6, 8009902 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 80098f8:	2240      	movs	r2, #64	; 0x40
 80098fa:	4631      	mov	r1, r6
 80098fc:	f001 fb92 	bl	800b024 <st_int8_copy>
 8009900:	4630      	mov	r0, r6
 8009902:	9b05      	ldr	r3, [sp, #20]
 8009904:	9a08      	ldr	r2, [sp, #32]
 8009906:	4293      	cmp	r3, r2
 8009908:	f080 80f7 	bcs.w	8009afa <forward_lite_dense_if32of32wf32_lut4+0x226>
 800990c:	08eb      	lsrs	r3, r5, #3
 800990e:	f005 0101 	and.w	r1, r5, #1
 8009912:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009914:	f025 0801 	bic.w	r8, r5, #1
 8009918:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	9102      	str	r1, [sp, #8]
 8009922:	0092      	lsls	r2, r2, #2
 8009924:	f104 0b20 	add.w	fp, r4, #32
 8009928:	00a9      	lsls	r1, r5, #2
 800992a:	9304      	str	r3, [sp, #16]
 800992c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8009930:	9b05      	ldr	r3, [sp, #20]
 8009932:	9207      	str	r2, [sp, #28]
 8009934:	9109      	str	r1, [sp, #36]	; 0x24
 8009936:	920b      	str	r2, [sp, #44]	; 0x2c
 8009938:	9a07      	ldr	r2, [sp, #28]
 800993a:	eb03 0902 	add.w	r9, r3, r2
 800993e:	f1ab 0220 	sub.w	r2, fp, #32
 8009942:	4599      	cmp	r9, r3
 8009944:	9206      	str	r2, [sp, #24]
 8009946:	f240 80db 	bls.w	8009b00 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800994a:	469e      	mov	lr, r3
 800994c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800994e:	f108 33ff 	add.w	r3, r8, #4294967295
 8009952:	9303      	str	r3, [sp, #12]
 8009954:	9b01      	ldr	r3, [sp, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	f000 80b4 	beq.w	8009ac4 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 800995c:	9b04      	ldr	r3, [sp, #16]
 800995e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8009b24 <forward_lite_dense_if32of32wf32_lut4+0x250>
 8009962:	18d4      	adds	r4, r2, r3
 8009964:	465b      	mov	r3, fp
 8009966:	7816      	ldrb	r6, [r2, #0]
 8009968:	3204      	adds	r2, #4
 800996a:	ed53 2a07 	vldr	s5, [r3, #-28]	; 0xffffffe4
 800996e:	3320      	adds	r3, #32
 8009970:	f006 070f 	and.w	r7, r6, #15
 8009974:	0936      	lsrs	r6, r6, #4
 8009976:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 800997a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800997e:	ed13 4a10 	vldr	s8, [r3, #-64]	; 0xffffffc0
 8009982:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8009986:	ed53 3a0e 	vldr	s7, [r3, #-56]	; 0xffffffc8
 800998a:	edd7 7a00 	vldr	s15, [r7]
 800998e:	ed96 3a00 	vldr	s6, [r6]
 8009992:	092e      	lsrs	r6, r5, #4
 8009994:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8009998:	f005 050f 	and.w	r5, r5, #15
 800999c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80099a0:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80099a4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80099a8:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 80099ac:	eee3 7a04 	vfma.f32	s15, s6, s8
 80099b0:	ed96 3a00 	vldr	s6, [r6]
 80099b4:	ed95 4a00 	vldr	s8, [r5]
 80099b8:	090d      	lsrs	r5, r1, #4
 80099ba:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 80099be:	f001 010f 	and.w	r1, r1, #15
 80099c2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80099c6:	ed13 6a0b 	vldr	s12, [r3, #-44]	; 0xffffffd4
 80099ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80099ce:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 80099d2:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 80099d6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80099da:	eee4 7a05 	vfma.f32	s15, s8, s10
 80099de:	ed95 4a00 	vldr	s8, [r5]
 80099e2:	ed91 5a00 	vldr	s10, [r1]
 80099e6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80099ea:	42a2      	cmp	r2, r4
 80099ec:	ea4f 1511 	mov.w	r5, r1, lsr #4
 80099f0:	f001 010f 	and.w	r1, r1, #15
 80099f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80099f8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80099fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a00:	eee5 7a06 	vfma.f32	s15, s10, s12
 8009a04:	ed95 5a00 	vldr	s10, [r5]
 8009a08:	ed91 6a00 	vldr	s12, [r1]
 8009a0c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009a10:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a18:	d1a5      	bne.n	8009966 <forward_lite_dense_if32of32wf32_lut4+0x92>
 8009a1a:	4656      	mov	r6, sl
 8009a1c:	4546      	cmp	r6, r8
 8009a1e:	d257      	bcs.n	8009ad0 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8009a20:	9b03      	ldr	r3, [sp, #12]
 8009a22:	f106 0208 	add.w	r2, r6, #8
 8009a26:	1e61      	subs	r1, r4, #1
 8009a28:	1b9d      	subs	r5, r3, r6
 8009a2a:	08ef      	lsrs	r7, r5, #3
 8009a2c:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 8009a30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a34:	3208      	adds	r2, #8
 8009a36:	ed52 5a03 	vldr	s11, [r2, #-12]
 8009a3a:	f003 0c0f 	and.w	ip, r3, #15
 8009a3e:	091b      	lsrs	r3, r3, #4
 8009a40:	ed52 6a04 	vldr	s13, [r2, #-16]
 8009a44:	42a9      	cmp	r1, r5
 8009a46:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8009a4a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009a4e:	eddc 7a00 	vldr	s15, [ip]
 8009a52:	ed93 6a00 	vldr	s12, [r3]
 8009a56:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009a5a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a62:	d1e5      	bne.n	8009a30 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 8009a64:	3701      	adds	r7, #1
 8009a66:	19e2      	adds	r2, r4, r7
 8009a68:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8009a6c:	9b02      	ldr	r3, [sp, #8]
 8009a6e:	b30b      	cbz	r3, 8009ab4 <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 8009a70:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009a74:	edd6 7a00 	vldr	s15, [r6]
 8009a78:	091b      	lsrs	r3, r3, #4
 8009a7a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009a7e:	edd3 6a00 	vldr	s13, [r3]
 8009a82:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a86:	ecae 7a01 	vstmia	lr!, {s14}
 8009a8a:	45f1      	cmp	r9, lr
 8009a8c:	f63f af62 	bhi.w	8009954 <forward_lite_dense_if32of32wf32_lut4+0x80>
 8009a90:	9b05      	ldr	r3, [sp, #20]
 8009a92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a94:	1899      	adds	r1, r3, r2
 8009a96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a98:	b9e3      	cbnz	r3, 8009ad4 <forward_lite_dense_if32of32wf32_lut4+0x200>
 8009a9a:	9b08      	ldr	r3, [sp, #32]
 8009a9c:	428b      	cmp	r3, r1
 8009a9e:	d92c      	bls.n	8009afa <forward_lite_dense_if32of32wf32_lut4+0x226>
 8009aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa2:	4498      	add	r8, r3
 8009aa4:	449a      	add	sl, r3
 8009aa6:	449b      	add	fp, r3
 8009aa8:	9b05      	ldr	r3, [sp, #20]
 8009aaa:	4599      	cmp	r9, r3
 8009aac:	d92a      	bls.n	8009b04 <forward_lite_dense_if32of32wf32_lut4+0x230>
 8009aae:	460b      	mov	r3, r1
 8009ab0:	9105      	str	r1, [sp, #20]
 8009ab2:	e741      	b.n	8009938 <forward_lite_dense_if32of32wf32_lut4+0x64>
 8009ab4:	ecae 7a01 	vstmia	lr!, {s14}
 8009ab8:	45f1      	cmp	r9, lr
 8009aba:	d9e9      	bls.n	8009a90 <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 8009abc:	9b01      	ldr	r3, [sp, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f47f af4c 	bne.w	800995c <forward_lite_dense_if32of32wf32_lut4+0x88>
 8009ac4:	9e06      	ldr	r6, [sp, #24]
 8009ac6:	4614      	mov	r4, r2
 8009ac8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8009b24 <forward_lite_dense_if32of32wf32_lut4+0x250>
 8009acc:	4546      	cmp	r6, r8
 8009ace:	d3a7      	bcc.n	8009a20 <forward_lite_dense_if32of32wf32_lut4+0x14c>
 8009ad0:	4622      	mov	r2, r4
 8009ad2:	e7cb      	b.n	8009a6c <forward_lite_dense_if32of32wf32_lut4+0x198>
 8009ad4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d0df      	beq.n	8009a9a <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 8009ada:	9b07      	ldr	r3, [sp, #28]
 8009adc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ade:	1acb      	subs	r3, r1, r3
 8009ae0:	edd3 7a00 	vldr	s15, [r3]
 8009ae4:	ecb2 7a01 	vldmia	r2!, {s14}
 8009ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009aec:	ece3 7a01 	vstmia	r3!, {s15}
 8009af0:	428b      	cmp	r3, r1
 8009af2:	d1f5      	bne.n	8009ae0 <forward_lite_dense_if32of32wf32_lut4+0x20c>
 8009af4:	9b08      	ldr	r3, [sp, #32]
 8009af6:	428b      	cmp	r3, r1
 8009af8:	d8d2      	bhi.n	8009aa0 <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 8009afa:	b00d      	add	sp, #52	; 0x34
 8009afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b00:	4619      	mov	r1, r3
 8009b02:	e7c8      	b.n	8009a96 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8009b04:	9b07      	ldr	r3, [sp, #28]
 8009b06:	1acb      	subs	r3, r1, r3
 8009b08:	461a      	mov	r2, r3
 8009b0a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009b0c:	ed92 7a00 	vldr	s14, [r2]
 8009b10:	ecf0 7a01 	vldmia	r0!, {s15}
 8009b14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b18:	ece2 7a01 	vstmia	r2!, {s15}
 8009b1c:	428a      	cmp	r2, r1
 8009b1e:	d1f5      	bne.n	8009b0c <forward_lite_dense_if32of32wf32_lut4+0x238>
 8009b20:	e7f2      	b.n	8009b08 <forward_lite_dense_if32of32wf32_lut4+0x234>
 8009b22:	bf00      	nop
 8009b24:	00000000 	.word	0x00000000

08009b28 <forward_lite_dense_if32of32wf32_lut8>:
 8009b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	b091      	sub	sp, #68	; 0x44
 8009b2e:	4699      	mov	r9, r3
 8009b30:	468b      	mov	fp, r1
 8009b32:	920e      	str	r2, [sp, #56]	; 0x38
 8009b34:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009b36:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009b3a:	9003      	str	r0, [sp, #12]
 8009b3c:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	; 0x74
 8009b40:	fb02 f303 	mul.w	r3, r2, r3
 8009b44:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009b48:	930c      	str	r3, [sp, #48]	; 0x30
 8009b4a:	b134      	cbz	r4, 8009b5a <forward_lite_dense_if32of32wf32_lut8+0x32>
 8009b4c:	4648      	mov	r0, r9
 8009b4e:	46a1      	mov	r9, r4
 8009b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b54:	4621      	mov	r1, r4
 8009b56:	f001 fa65 	bl	800b024 <st_int8_copy>
 8009b5a:	9b03      	ldr	r3, [sp, #12]
 8009b5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	f080 8084 	bcs.w	8009c6c <forward_lite_dense_if32of32wf32_lut8+0x144>
 8009b64:	4bb7      	ldr	r3, [pc, #732]	; (8009e44 <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 8009b66:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009b68:	4443      	add	r3, r8
 8009b6a:	9d03      	ldr	r5, [sp, #12]
 8009b6c:	0092      	lsls	r2, r2, #2
 8009b6e:	eddf 3ab6 	vldr	s7, [pc, #728]	; 8009e48 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b76:	f103 0120 	add.w	r1, r3, #32
 8009b7a:	930d      	str	r3, [sp, #52]	; 0x34
 8009b7c:	445b      	add	r3, fp
 8009b7e:	920f      	str	r2, [sp, #60]	; 0x3c
 8009b80:	9105      	str	r1, [sp, #20]
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	eb0b 0301 	add.w	r3, fp, r1
 8009b88:	469a      	mov	sl, r3
 8009b8a:	469e      	mov	lr, r3
 8009b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b8e:	eb05 0c03 	add.w	ip, r5, r3
 8009b92:	45ac      	cmp	ip, r5
 8009b94:	d952      	bls.n	8009c3c <forward_lite_dense_if32of32wf32_lut8+0x114>
 8009b96:	9800      	ldr	r0, [sp, #0]
 8009b98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b9a:	f100 011f 	add.w	r1, r0, #31
 8009b9e:	eba0 020b 	sub.w	r2, r0, fp
 8009ba2:	445b      	add	r3, fp
 8009ba4:	9101      	str	r1, [sp, #4]
 8009ba6:	eba1 010b 	sub.w	r1, r1, fp
 8009baa:	0952      	lsrs	r2, r2, #5
 8009bac:	9306      	str	r3, [sp, #24]
 8009bae:	0889      	lsrs	r1, r1, #2
 8009bb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bb2:	3101      	adds	r1, #1
 8009bb4:	9102      	str	r1, [sp, #8]
 8009bb6:	1c51      	adds	r1, r2, #1
 8009bb8:	00d2      	lsls	r2, r2, #3
 8009bba:	3210      	adds	r2, #16
 8009bbc:	920a      	str	r2, [sp, #40]	; 0x28
 8009bbe:	00ca      	lsls	r2, r1, #3
 8009bc0:	9208      	str	r2, [sp, #32]
 8009bc2:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 8009bc6:	9209      	str	r2, [sp, #36]	; 0x24
 8009bc8:	1f02      	subs	r2, r0, #4
 8009bca:	9204      	str	r2, [sp, #16]
 8009bcc:	f10b 0204 	add.w	r2, fp, #4
 8009bd0:	9207      	str	r2, [sp, #28]
 8009bd2:	f1b8 0f07 	cmp.w	r8, #7
 8009bd6:	d84c      	bhi.n	8009c72 <forward_lite_dense_if32of32wf32_lut8+0x14a>
 8009bd8:	45d3      	cmp	fp, sl
 8009bda:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8009e48 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8009bde:	d20f      	bcs.n	8009c00 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8009be0:	4659      	mov	r1, fp
 8009be2:	4618      	mov	r0, r3
 8009be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009be8:	ecf1 7a01 	vldmia	r1!, {s15}
 8009bec:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8009bf0:	4551      	cmp	r1, sl
 8009bf2:	edd2 6a00 	vldr	s13, [r2]
 8009bf6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009bfa:	d3f3      	bcc.n	8009be4 <forward_lite_dense_if32of32wf32_lut8+0xbc>
 8009bfc:	9a02      	ldr	r2, [sp, #8]
 8009bfe:	4413      	add	r3, r2
 8009c00:	eca5 7a01 	vstmia	r5!, {s14}
 8009c04:	45ac      	cmp	ip, r5
 8009c06:	d8e4      	bhi.n	8009bd2 <forward_lite_dense_if32of32wf32_lut8+0xaa>
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	46f3      	mov	fp, lr
 8009c0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c0e:	1899      	adds	r1, r3, r2
 8009c10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c12:	b9c3      	cbnz	r3, 8009c46 <forward_lite_dense_if32of32wf32_lut8+0x11e>
 8009c14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c16:	428b      	cmp	r3, r1
 8009c18:	d928      	bls.n	8009c6c <forward_lite_dense_if32of32wf32_lut8+0x144>
 8009c1a:	9b00      	ldr	r3, [sp, #0]
 8009c1c:	9a05      	ldr	r2, [sp, #20]
 8009c1e:	4413      	add	r3, r2
 8009c20:	4492      	add	sl, r2
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	9b03      	ldr	r3, [sp, #12]
 8009c26:	459c      	cmp	ip, r3
 8009c28:	f240 821e 	bls.w	800a068 <forward_lite_dense_if32of32wf32_lut8+0x540>
 8009c2c:	460d      	mov	r5, r1
 8009c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c30:	4496      	add	lr, r2
 8009c32:	9103      	str	r1, [sp, #12]
 8009c34:	eb05 0c03 	add.w	ip, r5, r3
 8009c38:	45ac      	cmp	ip, r5
 8009c3a:	d8ac      	bhi.n	8009b96 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8009c3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c3e:	4629      	mov	r1, r5
 8009c40:	46f3      	mov	fp, lr
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d0e6      	beq.n	8009c14 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8009c46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d0e3      	beq.n	8009c14 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8009c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c4e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c50:	1acb      	subs	r3, r1, r3
 8009c52:	edd3 7a00 	vldr	s15, [r3]
 8009c56:	ecb2 7a01 	vldmia	r2!, {s14}
 8009c5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c5e:	ece3 7a01 	vstmia	r3!, {s15}
 8009c62:	428b      	cmp	r3, r1
 8009c64:	d1f5      	bne.n	8009c52 <forward_lite_dense_if32of32wf32_lut8+0x12a>
 8009c66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c68:	428b      	cmp	r3, r1
 8009c6a:	d8d6      	bhi.n	8009c1a <forward_lite_dense_if32of32wf32_lut8+0xf2>
 8009c6c:	b011      	add	sp, #68	; 0x44
 8009c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c72:	f003 0203 	and.w	r2, r3, #3
 8009c76:	2a02      	cmp	r2, #2
 8009c78:	f000 81ee 	beq.w	800a058 <forward_lite_dense_if32of32wf32_lut8+0x530>
 8009c7c:	2a03      	cmp	r2, #3
 8009c7e:	f000 80e5 	beq.w	8009e4c <forward_lite_dense_if32of32wf32_lut8+0x324>
 8009c82:	2a01      	cmp	r2, #1
 8009c84:	f000 81d2 	beq.w	800a02c <forward_lite_dense_if32of32wf32_lut8+0x504>
 8009c88:	9a06      	ldr	r2, [sp, #24]
 8009c8a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8009e48 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8009c8e:	4593      	cmp	fp, r2
 8009c90:	f200 81e8 	bhi.w	800a064 <forward_lite_dense_if32of32wf32_lut8+0x53c>
 8009c94:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009c96:	f103 0208 	add.w	r2, r3, #8
 8009c9a:	f10b 0120 	add.w	r1, fp, #32
 8009c9e:	18c4      	adds	r4, r0, r3
 8009ca0:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8009ca4:	3208      	adds	r2, #8
 8009ca6:	ed51 2a07 	vldr	s5, [r1, #-28]	; 0xffffffe4
 8009caa:	3120      	adds	r1, #32
 8009cac:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009cb0:	ed11 3a10 	vldr	s6, [r1, #-64]	; 0xffffffc0
 8009cb4:	ed11 4a0e 	vldr	s8, [r1, #-56]	; 0xffffffc8
 8009cb8:	edd0 7a00 	vldr	s15, [r0]
 8009cbc:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8009cc0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8009cc4:	ed51 4a0d 	vldr	s9, [r1, #-52]	; 0xffffffcc
 8009cc8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009ccc:	ed11 5a0c 	vldr	s10, [r1, #-48]	; 0xffffffd0
 8009cd0:	ed51 5a0b 	vldr	s11, [r1, #-44]	; 0xffffffd4
 8009cd4:	edd0 2a00 	vldr	s5, [r0]
 8009cd8:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8009cdc:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009ce0:	ed11 6a0a 	vldr	s12, [r1, #-40]	; 0xffffffd8
 8009ce4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009ce8:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 8009cec:	ed90 3a00 	vldr	s6, [r0]
 8009cf0:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8009cf4:	eee3 7a04 	vfma.f32	s15, s6, s8
 8009cf8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009cfc:	ed90 4a00 	vldr	s8, [r0]
 8009d00:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8009d04:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009d08:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009d0c:	edd0 4a00 	vldr	s9, [r0]
 8009d10:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8009d14:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009d18:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009d1c:	ed90 5a00 	vldr	s10, [r0]
 8009d20:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8009d24:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009d28:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009d2c:	edd0 5a00 	vldr	s11, [r0]
 8009d30:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8009d34:	42a2      	cmp	r2, r4
 8009d36:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009d3a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009d3e:	ed90 6a00 	vldr	s12, [r0]
 8009d42:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009d46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d4a:	d1a9      	bne.n	8009ca0 <forward_lite_dense_if32of32wf32_lut8+0x178>
 8009d4c:	9a08      	ldr	r2, [sp, #32]
 8009d4e:	4413      	add	r3, r2
 8009d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d52:	4572      	cmp	r2, lr
 8009d54:	f4bf af54 	bcs.w	8009c00 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8009d58:	7819      	ldrb	r1, [r3, #0]
 8009d5a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009d5e:	edd1 7a00 	vldr	s15, [r1]
 8009d62:	4611      	mov	r1, r2
 8009d64:	ecf1 6a01 	vldmia	r1!, {s13}
 8009d68:	458a      	cmp	sl, r1
 8009d6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d6e:	d963      	bls.n	8009e38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8009d70:	7859      	ldrb	r1, [r3, #1]
 8009d72:	edd2 6a01 	vldr	s13, [r2, #4]
 8009d76:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009d7a:	edd1 7a00 	vldr	s15, [r1]
 8009d7e:	f102 0108 	add.w	r1, r2, #8
 8009d82:	458a      	cmp	sl, r1
 8009d84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d88:	d956      	bls.n	8009e38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8009d8a:	7899      	ldrb	r1, [r3, #2]
 8009d8c:	edd2 6a02 	vldr	s13, [r2, #8]
 8009d90:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009d94:	edd1 7a00 	vldr	s15, [r1]
 8009d98:	f102 010c 	add.w	r1, r2, #12
 8009d9c:	458a      	cmp	sl, r1
 8009d9e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009da2:	d949      	bls.n	8009e38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8009da4:	78d9      	ldrb	r1, [r3, #3]
 8009da6:	edd2 6a03 	vldr	s13, [r2, #12]
 8009daa:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009dae:	edd1 7a00 	vldr	s15, [r1]
 8009db2:	f102 0110 	add.w	r1, r2, #16
 8009db6:	458a      	cmp	sl, r1
 8009db8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009dbc:	d93c      	bls.n	8009e38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8009dbe:	7919      	ldrb	r1, [r3, #4]
 8009dc0:	edd2 6a04 	vldr	s13, [r2, #16]
 8009dc4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009dc8:	edd1 7a00 	vldr	s15, [r1]
 8009dcc:	f102 0114 	add.w	r1, r2, #20
 8009dd0:	458a      	cmp	sl, r1
 8009dd2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009dd6:	d92f      	bls.n	8009e38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8009dd8:	7959      	ldrb	r1, [r3, #5]
 8009dda:	edd2 6a05 	vldr	s13, [r2, #20]
 8009dde:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009de2:	edd1 7a00 	vldr	s15, [r1]
 8009de6:	f102 0118 	add.w	r1, r2, #24
 8009dea:	458a      	cmp	sl, r1
 8009dec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009df0:	d922      	bls.n	8009e38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8009df2:	7999      	ldrb	r1, [r3, #6]
 8009df4:	edd2 6a06 	vldr	s13, [r2, #24]
 8009df8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009dfc:	edd1 7a00 	vldr	s15, [r1]
 8009e00:	f102 011c 	add.w	r1, r2, #28
 8009e04:	458a      	cmp	sl, r1
 8009e06:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e0a:	d915      	bls.n	8009e38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8009e0c:	79d9      	ldrb	r1, [r3, #7]
 8009e0e:	edd2 6a07 	vldr	s13, [r2, #28]
 8009e12:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009e16:	edd1 7a00 	vldr	s15, [r1]
 8009e1a:	f102 0120 	add.w	r1, r2, #32
 8009e1e:	458a      	cmp	sl, r1
 8009e20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e24:	d908      	bls.n	8009e38 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8009e26:	7a19      	ldrb	r1, [r3, #8]
 8009e28:	edd2 7a08 	vldr	s15, [r2, #32]
 8009e2c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009e30:	edd1 6a00 	vldr	s13, [r1]
 8009e34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e38:	9901      	ldr	r1, [sp, #4]
 8009e3a:	1a8a      	subs	r2, r1, r2
 8009e3c:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 8009e40:	1c53      	adds	r3, r2, #1
 8009e42:	e6dd      	b.n	8009c00 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8009e44:	3ffffff8 	.word	0x3ffffff8
 8009e48:	00000000 	.word	0x00000000
 8009e4c:	eeb0 7a63 	vmov.f32	s14, s7
 8009e50:	465a      	mov	r2, fp
 8009e52:	461f      	mov	r7, r3
 8009e54:	4610      	mov	r0, r2
 8009e56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009e5a:	ecf0 7a01 	vldmia	r0!, {s15}
 8009e5e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009e62:	edd1 6a00 	vldr	s13, [r1]
 8009e66:	9900      	ldr	r1, [sp, #0]
 8009e68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e6c:	4288      	cmp	r0, r1
 8009e6e:	f200 80f7 	bhi.w	800a060 <forward_lite_dense_if32of32wf32_lut8+0x538>
 8009e72:	9904      	ldr	r1, [sp, #16]
 8009e74:	f103 0411 	add.w	r4, r3, #17
 8009e78:	3309      	adds	r3, #9
 8009e7a:	1a8e      	subs	r6, r1, r2
 8009e7c:	3224      	adds	r2, #36	; 0x24
 8009e7e:	0976      	lsrs	r6, r6, #5
 8009e80:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009e84:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8009e88:	3308      	adds	r3, #8
 8009e8a:	ed52 2a07 	vldr	s5, [r2, #-28]	; 0xffffffe4
 8009e8e:	3220      	adds	r2, #32
 8009e90:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009e94:	ed12 3a10 	vldr	s6, [r2, #-64]	; 0xffffffc0
 8009e98:	ed12 4a0e 	vldr	s8, [r2, #-56]	; 0xffffffc8
 8009e9c:	edd1 7a00 	vldr	s15, [r1]
 8009ea0:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8009ea4:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8009ea8:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8009eac:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009eb0:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8009eb4:	ed52 5a0b 	vldr	s11, [r2, #-44]	; 0xffffffd4
 8009eb8:	edd1 2a00 	vldr	s5, [r1]
 8009ebc:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8009ec0:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009ec4:	ed12 6a0a 	vldr	s12, [r2, #-40]	; 0xffffffd8
 8009ec8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009ecc:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 8009ed0:	ed91 3a00 	vldr	s6, [r1]
 8009ed4:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8009ed8:	eee3 7a04 	vfma.f32	s15, s6, s8
 8009edc:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009ee0:	ed91 4a00 	vldr	s8, [r1]
 8009ee4:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8009ee8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009eec:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009ef0:	edd1 4a00 	vldr	s9, [r1]
 8009ef4:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8009ef8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009efc:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009f00:	ed91 5a00 	vldr	s10, [r1]
 8009f04:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8009f08:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009f0c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009f10:	edd1 5a00 	vldr	s11, [r1]
 8009f14:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8009f18:	42a3      	cmp	r3, r4
 8009f1a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009f1e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009f22:	ed91 6a00 	vldr	s12, [r1]
 8009f26:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009f2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f2e:	d1a9      	bne.n	8009e84 <forward_lite_dense_if32of32wf32_lut8+0x35c>
 8009f30:	3601      	adds	r6, #1
 8009f32:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8009f36:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8009f3a:	4550      	cmp	r0, sl
 8009f3c:	f4bf ae60 	bcs.w	8009c00 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8009f40:	781a      	ldrb	r2, [r3, #0]
 8009f42:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8009f46:	edd2 7a00 	vldr	s15, [r2]
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	ecf2 6a01 	vldmia	r2!, {s13}
 8009f50:	4592      	cmp	sl, r2
 8009f52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009f56:	d963      	bls.n	800a020 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8009f58:	785a      	ldrb	r2, [r3, #1]
 8009f5a:	edd0 6a01 	vldr	s13, [r0, #4]
 8009f5e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8009f62:	edd2 7a00 	vldr	s15, [r2]
 8009f66:	f100 0208 	add.w	r2, r0, #8
 8009f6a:	4592      	cmp	sl, r2
 8009f6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009f70:	d956      	bls.n	800a020 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8009f72:	789a      	ldrb	r2, [r3, #2]
 8009f74:	edd0 6a02 	vldr	s13, [r0, #8]
 8009f78:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8009f7c:	edd2 7a00 	vldr	s15, [r2]
 8009f80:	f100 020c 	add.w	r2, r0, #12
 8009f84:	4592      	cmp	sl, r2
 8009f86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009f8a:	d949      	bls.n	800a020 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8009f8c:	78da      	ldrb	r2, [r3, #3]
 8009f8e:	edd0 6a03 	vldr	s13, [r0, #12]
 8009f92:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8009f96:	edd2 7a00 	vldr	s15, [r2]
 8009f9a:	f100 0210 	add.w	r2, r0, #16
 8009f9e:	4592      	cmp	sl, r2
 8009fa0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009fa4:	d93c      	bls.n	800a020 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8009fa6:	791a      	ldrb	r2, [r3, #4]
 8009fa8:	edd0 6a04 	vldr	s13, [r0, #16]
 8009fac:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8009fb0:	edd2 7a00 	vldr	s15, [r2]
 8009fb4:	f100 0214 	add.w	r2, r0, #20
 8009fb8:	4592      	cmp	sl, r2
 8009fba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009fbe:	d92f      	bls.n	800a020 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8009fc0:	795a      	ldrb	r2, [r3, #5]
 8009fc2:	edd0 6a05 	vldr	s13, [r0, #20]
 8009fc6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8009fca:	edd2 7a00 	vldr	s15, [r2]
 8009fce:	f100 0218 	add.w	r2, r0, #24
 8009fd2:	4596      	cmp	lr, r2
 8009fd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009fd8:	d922      	bls.n	800a020 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8009fda:	799a      	ldrb	r2, [r3, #6]
 8009fdc:	edd0 6a06 	vldr	s13, [r0, #24]
 8009fe0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8009fe4:	edd2 7a00 	vldr	s15, [r2]
 8009fe8:	f100 021c 	add.w	r2, r0, #28
 8009fec:	4596      	cmp	lr, r2
 8009fee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009ff2:	d915      	bls.n	800a020 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8009ff4:	79da      	ldrb	r2, [r3, #7]
 8009ff6:	edd0 6a07 	vldr	s13, [r0, #28]
 8009ffa:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8009ffe:	edd2 7a00 	vldr	s15, [r2]
 800a002:	f100 0220 	add.w	r2, r0, #32
 800a006:	4596      	cmp	lr, r2
 800a008:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a00c:	d908      	bls.n	800a020 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800a00e:	7a1a      	ldrb	r2, [r3, #8]
 800a010:	edd0 7a08 	vldr	s15, [r0, #32]
 800a014:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800a018:	edd2 6a00 	vldr	s13, [r2]
 800a01c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a020:	9a01      	ldr	r2, [sp, #4]
 800a022:	1a10      	subs	r0, r2, r0
 800a024:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	e5e9      	b.n	8009c00 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 800a02c:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a030:	eddb 7a00 	vldr	s15, [fp]
 800a034:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a038:	9a07      	ldr	r2, [sp, #28]
 800a03a:	ed91 7a00 	vldr	s14, [r1]
 800a03e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a042:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a046:	ecf2 7a01 	vldmia	r2!, {s15}
 800a04a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800a04e:	edd1 6a00 	vldr	s13, [r1]
 800a052:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a056:	e6fc      	b.n	8009e52 <forward_lite_dense_if32of32wf32_lut8+0x32a>
 800a058:	eeb0 7a63 	vmov.f32	s14, s7
 800a05c:	465a      	mov	r2, fp
 800a05e:	e7f0      	b.n	800a042 <forward_lite_dense_if32of32wf32_lut8+0x51a>
 800a060:	463b      	mov	r3, r7
 800a062:	e76a      	b.n	8009f3a <forward_lite_dense_if32of32wf32_lut8+0x412>
 800a064:	465a      	mov	r2, fp
 800a066:	e674      	b.n	8009d52 <forward_lite_dense_if32of32wf32_lut8+0x22a>
 800a068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a06a:	1acb      	subs	r3, r1, r3
 800a06c:	461a      	mov	r2, r3
 800a06e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a070:	ed92 7a00 	vldr	s14, [r2]
 800a074:	ecf0 7a01 	vldmia	r0!, {s15}
 800a078:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a07c:	ece2 7a01 	vstmia	r2!, {s15}
 800a080:	4291      	cmp	r1, r2
 800a082:	d1f5      	bne.n	800a070 <forward_lite_dense_if32of32wf32_lut8+0x548>
 800a084:	e7f2      	b.n	800a06c <forward_lite_dense_if32of32wf32_lut8+0x544>
 800a086:	bf00      	nop

0800a088 <forward_lite_nl_softmax_is8os8>:
 800a088:	f002 bd7c 	b.w	800cb84 <_lite_kernel_nl_softmax_is8os8>

0800a08c <forward_lite_nl_softmax_iu8ou8>:
 800a08c:	f003 bd80 	b.w	800db90 <_lite_kernel_nl_softmax_iu8ou8>

0800a090 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022>:
 800a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	b083      	sub	sp, #12
 800a096:	f992 0000 	ldrsb.w	r0, [r2]
 800a09a:	f04f 0500 	mov.w	r5, #0
 800a09e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800a0a2:	f360 0507 	bfi	r5, r0, #0, #8
 800a0a6:	f1b9 0f00 	cmp.w	r9, #0
 800a0aa:	f360 250f 	bfi	r5, r0, #8, #8
 800a0ae:	dd20      	ble.n	800a0f2 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x62>
 800a0b0:	461c      	mov	r4, r3
 800a0b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0b4:	460f      	mov	r7, r1
 800a0b6:	f04f 0800 	mov.w	r8, #0
 800a0ba:	1c9e      	adds	r6, r3, #2
 800a0bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0be:	fb06 fb04 	mul.w	fp, r6, r4
 800a0c2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 800a0c6:	2c00      	cmp	r4, #0
 800a0c8:	dd08      	ble.n	800a0dc <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x4c>
 800a0ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0cc:	18f9      	adds	r1, r7, r3
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	800d      	strh	r5, [r1, #0]
 800a0d4:	4431      	add	r1, r6
 800a0d6:	429c      	cmp	r4, r3
 800a0d8:	d1fa      	bne.n	800a0d0 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x40>
 800a0da:	445f      	add	r7, fp
 800a0dc:	f108 0801 	add.w	r8, r8, #1
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	4652      	mov	r2, sl
 800a0e4:	9001      	str	r0, [sp, #4]
 800a0e6:	f000 ff3f 	bl	800af68 <st_int8_fill>
 800a0ea:	45c1      	cmp	r9, r8
 800a0ec:	4457      	add	r7, sl
 800a0ee:	9801      	ldr	r0, [sp, #4]
 800a0f0:	d1e9      	bne.n	800a0c6 <forward_lite_pad_8bit_ch1st_3x3_constant_P0022+0x36>
 800a0f2:	b003      	add	sp, #12
 800a0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0f8 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	461e      	mov	r6, r3
 800a0fe:	b085      	sub	sp, #20
 800a100:	f992 8000 	ldrsb.w	r8, [r2]
 800a104:	f04f 0500 	mov.w	r5, #0
 800a108:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a10a:	2e06      	cmp	r6, #6
 800a10c:	f368 0507 	bfi	r5, r8, #0, #8
 800a110:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a112:	460c      	mov	r4, r1
 800a114:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800a118:	f368 250f 	bfi	r5, r8, #8, #8
 800a11c:	9303      	str	r3, [sp, #12]
 800a11e:	d07a      	beq.n	800a216 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x11e>
 800a120:	2e03      	cmp	r6, #3
 800a122:	d04e      	beq.n	800a1c2 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xca>
 800a124:	2b00      	cmp	r3, #0
 800a126:	db05      	blt.n	800a134 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x3c>
 800a128:	1c5a      	adds	r2, r3, #1
 800a12a:	4608      	mov	r0, r1
 800a12c:	4641      	mov	r1, r8
 800a12e:	4414      	add	r4, r2
 800a130:	f004 ff4d 	bl	800efce <memset>
 800a134:	1e7b      	subs	r3, r7, #1
 800a136:	3e01      	subs	r6, #1
 800a138:	2b00      	cmp	r3, #0
 800a13a:	9301      	str	r3, [sp, #4]
 800a13c:	dd27      	ble.n	800a18e <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x96>
 800a13e:	9b03      	ldr	r3, [sp, #12]
 800a140:	f10a 0702 	add.w	r7, sl, #2
 800a144:	f04f 0b00 	mov.w	fp, #0
 800a148:	1c5a      	adds	r2, r3, #1
 800a14a:	fb07 f306 	mul.w	r3, r7, r6
 800a14e:	ea4f 0942 	mov.w	r9, r2, lsl #1
 800a152:	9302      	str	r3, [sp, #8]
 800a154:	4643      	mov	r3, r8
 800a156:	46c8      	mov	r8, r9
 800a158:	4699      	mov	r9, r3
 800a15a:	2e00      	cmp	r6, #0
 800a15c:	eb04 010a 	add.w	r1, r4, sl
 800a160:	dd09      	ble.n	800a176 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x7e>
 800a162:	468c      	mov	ip, r1
 800a164:	2300      	movs	r3, #0
 800a166:	3301      	adds	r3, #1
 800a168:	f8ac 5000 	strh.w	r5, [ip]
 800a16c:	44bc      	add	ip, r7
 800a16e:	42b3      	cmp	r3, r6
 800a170:	d1f9      	bne.n	800a166 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x6e>
 800a172:	9b02      	ldr	r3, [sp, #8]
 800a174:	4419      	add	r1, r3
 800a176:	4642      	mov	r2, r8
 800a178:	4648      	mov	r0, r9
 800a17a:	f10b 0b01 	add.w	fp, fp, #1
 800a17e:	eb01 0408 	add.w	r4, r1, r8
 800a182:	f000 fef1 	bl	800af68 <st_int8_fill>
 800a186:	9b01      	ldr	r3, [sp, #4]
 800a188:	459b      	cmp	fp, r3
 800a18a:	d1e6      	bne.n	800a15a <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x62>
 800a18c:	46c8      	mov	r8, r9
 800a18e:	2e00      	cmp	r6, #0
 800a190:	eb04 000a 	add.w	r0, r4, sl
 800a194:	dd0a      	ble.n	800a1ac <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xb4>
 800a196:	f10a 0702 	add.w	r7, sl, #2
 800a19a:	4602      	mov	r2, r0
 800a19c:	2300      	movs	r3, #0
 800a19e:	3301      	adds	r3, #1
 800a1a0:	8015      	strh	r5, [r2, #0]
 800a1a2:	443a      	add	r2, r7
 800a1a4:	429e      	cmp	r6, r3
 800a1a6:	d1fa      	bne.n	800a19e <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xa6>
 800a1a8:	fb07 0006 	mla	r0, r7, r6, r0
 800a1ac:	9b03      	ldr	r3, [sp, #12]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	db2e      	blt.n	800a210 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x118>
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	4641      	mov	r1, r8
 800a1b6:	3201      	adds	r2, #1
 800a1b8:	b005      	add	sp, #20
 800a1ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1be:	f004 bf06 	b.w	800efce <memset>
 800a1c2:	fa5f f388 	uxtb.w	r3, r8
 800a1c6:	2f00      	cmp	r7, #0
 800a1c8:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800a1cc:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 800a1d0:	b292      	uxth	r2, r2
 800a1d2:	ea43 0302 	orr.w	r3, r3, r2
 800a1d6:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800a1da:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800a1de:	ea42 0203 	orr.w	r2, r2, r3
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	dd14      	ble.n	800a210 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x118>
 800a1e6:	eb07 0987 	add.w	r9, r7, r7, lsl #2
 800a1ea:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 800a1ee:	4449      	add	r1, r9
 800a1f0:	6022      	str	r2, [r4, #0]
 800a1f2:	3419      	adds	r4, #25
 800a1f4:	f824 3c15 	strh.w	r3, [r4, #-21]
 800a1f8:	f824 5c10 	strh.w	r5, [r4, #-16]
 800a1fc:	f824 3c0b 	strh.w	r3, [r4, #-11]
 800a200:	f804 8c06 	strb.w	r8, [r4, #-6]
 800a204:	f844 2c05 	str.w	r2, [r4, #-5]
 800a208:	f804 8c01 	strb.w	r8, [r4, #-1]
 800a20c:	428c      	cmp	r4, r1
 800a20e:	d1ef      	bne.n	800a1f0 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0xf8>
 800a210:	b005      	add	sp, #20
 800a212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a216:	fa5f f388 	uxtb.w	r3, r8
 800a21a:	2f00      	cmp	r7, #0
 800a21c:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800a220:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 800a224:	b292      	uxth	r2, r2
 800a226:	ea43 0302 	orr.w	r3, r3, r2
 800a22a:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800a22e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800a232:	ea43 0302 	orr.w	r3, r3, r2
 800a236:	ddeb      	ble.n	800a210 <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x118>
 800a238:	340f      	adds	r4, #15
 800a23a:	2200      	movs	r2, #0
 800a23c:	3201      	adds	r2, #1
 800a23e:	f844 3c0f 	str.w	r3, [r4, #-15]
 800a242:	f844 3c0b 	str.w	r3, [r4, #-11]
 800a246:	3440      	adds	r4, #64	; 0x40
 800a248:	4297      	cmp	r7, r2
 800a24a:	f804 8c47 	strb.w	r8, [r4, #-71]
 800a24e:	f824 5c40 	strh.w	r5, [r4, #-64]
 800a252:	f824 5c38 	strh.w	r5, [r4, #-56]
 800a256:	f824 5c30 	strh.w	r5, [r4, #-48]
 800a25a:	f824 5c28 	strh.w	r5, [r4, #-40]
 800a25e:	f824 5c20 	strh.w	r5, [r4, #-32]
 800a262:	f804 8c18 	strb.w	r8, [r4, #-24]
 800a266:	f844 3c17 	str.w	r3, [r4, #-23]
 800a26a:	f844 3c13 	str.w	r3, [r4, #-19]
 800a26e:	d1e5      	bne.n	800a23c <forward_lite_pad_8bit_ch1st_3x3_constant_P1111+0x144>
 800a270:	b005      	add	sp, #20
 800a272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a276:	bf00      	nop

0800a278 <forward_lite_pad_constant>:
 800a278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27c:	b085      	sub	sp, #20
 800a27e:	4616      	mov	r6, r2
 800a280:	4681      	mov	r9, r0
 800a282:	2b08      	cmp	r3, #8
 800a284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a286:	460c      	mov	r4, r1
 800a288:	9201      	str	r2, [sp, #4]
 800a28a:	e9dd 2011 	ldrd	r2, r0, [sp, #68]	; 0x44
 800a28e:	e9dd 5a0f 	ldrd	r5, sl, [sp, #60]	; 0x3c
 800a292:	e9dd 7813 	ldrd	r7, r8, [sp, #76]	; 0x4c
 800a296:	9002      	str	r0, [sp, #8]
 800a298:	d051      	beq.n	800a33e <forward_lite_pad_constant+0xc6>
 800a29a:	2a00      	cmp	r2, #0
 800a29c:	dd11      	ble.n	800a2c2 <forward_lite_pad_constant+0x4a>
 800a29e:	f8cd 8000 	str.w	r8, [sp]
 800a2a2:	f04f 0b00 	mov.w	fp, #0
 800a2a6:	46b8      	mov	r8, r7
 800a2a8:	4617      	mov	r7, r2
 800a2aa:	44ab      	add	fp, r5
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	462a      	mov	r2, r5
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f000 feb7 	bl	800b024 <st_int8_copy>
 800a2b6:	455f      	cmp	r7, fp
 800a2b8:	442c      	add	r4, r5
 800a2ba:	dcf6      	bgt.n	800a2aa <forward_lite_pad_constant+0x32>
 800a2bc:	4647      	mov	r7, r8
 800a2be:	f8dd 8000 	ldr.w	r8, [sp]
 800a2c2:	9b01      	ldr	r3, [sp, #4]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	dd29      	ble.n	800a31c <forward_lite_pad_constant+0xa4>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	2f00      	cmp	r7, #0
 800a2ce:	dd0a      	ble.n	800a2e6 <forward_lite_pad_constant+0x6e>
 800a2d0:	f04f 0b00 	mov.w	fp, #0
 800a2d4:	44ab      	add	fp, r5
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	462a      	mov	r2, r5
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f000 fea2 	bl	800b024 <st_int8_copy>
 800a2e0:	455f      	cmp	r7, fp
 800a2e2:	442c      	add	r4, r5
 800a2e4:	dcf6      	bgt.n	800a2d4 <forward_lite_pad_constant+0x5c>
 800a2e6:	4621      	mov	r1, r4
 800a2e8:	4648      	mov	r0, r9
 800a2ea:	4652      	mov	r2, sl
 800a2ec:	4454      	add	r4, sl
 800a2ee:	f000 fe99 	bl	800b024 <st_int8_copy>
 800a2f2:	f1b8 0f00 	cmp.w	r8, #0
 800a2f6:	44d1      	add	r9, sl
 800a2f8:	dd0a      	ble.n	800a310 <forward_lite_pad_constant+0x98>
 800a2fa:	f04f 0b00 	mov.w	fp, #0
 800a2fe:	44ab      	add	fp, r5
 800a300:	4621      	mov	r1, r4
 800a302:	462a      	mov	r2, r5
 800a304:	4630      	mov	r0, r6
 800a306:	f000 fe8d 	bl	800b024 <st_int8_copy>
 800a30a:	45d8      	cmp	r8, fp
 800a30c:	442c      	add	r4, r5
 800a30e:	dcf6      	bgt.n	800a2fe <forward_lite_pad_constant+0x86>
 800a310:	9b00      	ldr	r3, [sp, #0]
 800a312:	9a01      	ldr	r2, [sp, #4]
 800a314:	3301      	adds	r3, #1
 800a316:	429a      	cmp	r2, r3
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	d1d7      	bne.n	800a2cc <forward_lite_pad_constant+0x54>
 800a31c:	9b02      	ldr	r3, [sp, #8]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	dd0a      	ble.n	800a338 <forward_lite_pad_constant+0xc0>
 800a322:	2700      	movs	r7, #0
 800a324:	4698      	mov	r8, r3
 800a326:	442f      	add	r7, r5
 800a328:	4621      	mov	r1, r4
 800a32a:	462a      	mov	r2, r5
 800a32c:	4630      	mov	r0, r6
 800a32e:	f000 fe79 	bl	800b024 <st_int8_copy>
 800a332:	45b8      	cmp	r8, r7
 800a334:	442c      	add	r4, r5
 800a336:	dcf6      	bgt.n	800a326 <forward_lite_pad_constant+0xae>
 800a338:	b005      	add	sp, #20
 800a33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a33e:	f996 5000 	ldrsb.w	r5, [r6]
 800a342:	4414      	add	r4, r2
 800a344:	4628      	mov	r0, r5
 800a346:	9403      	str	r4, [sp, #12]
 800a348:	f000 fe0e 	bl	800af68 <st_int8_fill>
 800a34c:	9b01      	ldr	r3, [sp, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	dd26      	ble.n	800a3a0 <forward_lite_pad_constant+0x128>
 800a352:	eb08 030a 	add.w	r3, r8, sl
 800a356:	2600      	movs	r6, #0
 800a358:	eb03 0b07 	add.w	fp, r3, r7
 800a35c:	eb07 030a 	add.w	r3, r7, sl
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	4643      	mov	r3, r8
 800a364:	46b0      	mov	r8, r6
 800a366:	461e      	mov	r6, r3
 800a368:	4621      	mov	r1, r4
 800a36a:	4628      	mov	r0, r5
 800a36c:	463a      	mov	r2, r7
 800a36e:	f108 0801 	add.w	r8, r8, #1
 800a372:	f000 fdf9 	bl	800af68 <st_int8_fill>
 800a376:	19e1      	adds	r1, r4, r7
 800a378:	4648      	mov	r0, r9
 800a37a:	4652      	mov	r2, sl
 800a37c:	f000 fe52 	bl	800b024 <st_int8_copy>
 800a380:	9b00      	ldr	r3, [sp, #0]
 800a382:	4632      	mov	r2, r6
 800a384:	4628      	mov	r0, r5
 800a386:	18e1      	adds	r1, r4, r3
 800a388:	44d1      	add	r9, sl
 800a38a:	f000 fded 	bl	800af68 <st_int8_fill>
 800a38e:	9b01      	ldr	r3, [sp, #4]
 800a390:	445c      	add	r4, fp
 800a392:	4543      	cmp	r3, r8
 800a394:	d1e8      	bne.n	800a368 <forward_lite_pad_constant+0xf0>
 800a396:	461a      	mov	r2, r3
 800a398:	9b03      	ldr	r3, [sp, #12]
 800a39a:	fb0b 3302 	mla	r3, fp, r2, r3
 800a39e:	9303      	str	r3, [sp, #12]
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a3a6:	b005      	add	sp, #20
 800a3a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	f000 bddc 	b.w	800af68 <st_int8_fill>

0800a3b0 <forward_lite_pad_edge>:
 800a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b4:	ed2d 8b02 	vpush	{d8}
 800a3b8:	b087      	sub	sp, #28
 800a3ba:	9305      	str	r3, [sp, #20]
 800a3bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a3be:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
 800a3c2:	18cd      	adds	r5, r1, r3
 800a3c4:	1e13      	subs	r3, r2, #0
 800a3c6:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800a3ca:	9103      	str	r1, [sp, #12]
 800a3cc:	9504      	str	r5, [sp, #16]
 800a3ce:	9301      	str	r3, [sp, #4]
 800a3d0:	e9dd 4a14 	ldrd	r4, sl, [sp, #80]	; 0x50
 800a3d4:	dd36      	ble.n	800a444 <forward_lite_pad_edge+0x94>
 800a3d6:	fb04 f308 	mul.w	r3, r4, r8
 800a3da:	4607      	mov	r7, r0
 800a3dc:	ee08 aa10 	vmov	s16, sl
 800a3e0:	9302      	str	r3, [sp, #8]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	f1b9 0f00 	cmp.w	r9, #0
 800a3ea:	dd09      	ble.n	800a400 <forward_lite_pad_edge+0x50>
 800a3ec:	2600      	movs	r6, #0
 800a3ee:	4426      	add	r6, r4
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4622      	mov	r2, r4
 800a3f4:	4638      	mov	r0, r7
 800a3f6:	f000 fe15 	bl	800b024 <st_int8_copy>
 800a3fa:	45b1      	cmp	r9, r6
 800a3fc:	4425      	add	r5, r4
 800a3fe:	dcf6      	bgt.n	800a3ee <forward_lite_pad_edge+0x3e>
 800a400:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a402:	4638      	mov	r0, r7
 800a404:	4629      	mov	r1, r5
 800a406:	461a      	mov	r2, r3
 800a408:	441f      	add	r7, r3
 800a40a:	441d      	add	r5, r3
 800a40c:	f000 fe0a 	bl	800b024 <st_int8_copy>
 800a410:	f1b8 0f00 	cmp.w	r8, #0
 800a414:	eba7 0a04 	sub.w	sl, r7, r4
 800a418:	dd0c      	ble.n	800a434 <forward_lite_pad_edge+0x84>
 800a41a:	46ab      	mov	fp, r5
 800a41c:	2600      	movs	r6, #0
 800a41e:	3601      	adds	r6, #1
 800a420:	4659      	mov	r1, fp
 800a422:	4622      	mov	r2, r4
 800a424:	4650      	mov	r0, sl
 800a426:	f000 fdfd 	bl	800b024 <st_int8_copy>
 800a42a:	4546      	cmp	r6, r8
 800a42c:	44a3      	add	fp, r4
 800a42e:	d1f6      	bne.n	800a41e <forward_lite_pad_edge+0x6e>
 800a430:	9b02      	ldr	r3, [sp, #8]
 800a432:	441d      	add	r5, r3
 800a434:	9b00      	ldr	r3, [sp, #0]
 800a436:	9a01      	ldr	r2, [sp, #4]
 800a438:	3301      	adds	r3, #1
 800a43a:	429a      	cmp	r2, r3
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	d1d2      	bne.n	800a3e6 <forward_lite_pad_edge+0x36>
 800a440:	ee18 aa10 	vmov	sl, s16
 800a444:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800a448:	4293      	cmp	r3, r2
 800a44a:	d009      	beq.n	800a460 <forward_lite_pad_edge+0xb0>
 800a44c:	461c      	mov	r4, r3
 800a44e:	4615      	mov	r5, r2
 800a450:	4621      	mov	r1, r4
 800a452:	4454      	add	r4, sl
 800a454:	4652      	mov	r2, sl
 800a456:	4628      	mov	r0, r5
 800a458:	f000 fde4 	bl	800b024 <st_int8_copy>
 800a45c:	42a5      	cmp	r5, r4
 800a45e:	d1f7      	bne.n	800a450 <forward_lite_pad_edge+0xa0>
 800a460:	9a01      	ldr	r2, [sp, #4]
 800a462:	9b05      	ldr	r3, [sp, #20]
 800a464:	4413      	add	r3, r2
 800a466:	9a03      	ldr	r2, [sp, #12]
 800a468:	3b01      	subs	r3, #1
 800a46a:	fb0a 2503 	mla	r5, sl, r3, r2
 800a46e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a470:	18ec      	adds	r4, r5, r3
 800a472:	42a5      	cmp	r5, r4
 800a474:	d009      	beq.n	800a48a <forward_lite_pad_edge+0xda>
 800a476:	f1ca 0600 	rsb	r6, sl, #0
 800a47a:	4621      	mov	r1, r4
 800a47c:	4434      	add	r4, r6
 800a47e:	4652      	mov	r2, sl
 800a480:	4628      	mov	r0, r5
 800a482:	f000 fdcf 	bl	800b024 <st_int8_copy>
 800a486:	42a5      	cmp	r5, r4
 800a488:	d1f7      	bne.n	800a47a <forward_lite_pad_edge+0xca>
 800a48a:	b007      	add	sp, #28
 800a48c:	ecbd 8b02 	vpop	{d8}
 800a490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a494 <forward_lite_pad_reflect>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	b08f      	sub	sp, #60	; 0x3c
 800a49a:	460e      	mov	r6, r1
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	4684      	mov	ip, r0
 800a4a0:	f9bd 5080 	ldrsh.w	r5, [sp, #128]	; 0x80
 800a4a4:	9f22      	ldr	r7, [sp, #136]	; 0x88
 800a4a6:	f9bd e084 	ldrsh.w	lr, [sp, #132]	; 0x84
 800a4aa:	910b      	str	r1, [sp, #44]	; 0x2c
 800a4ac:	4437      	add	r7, r6
 800a4ae:	9002      	str	r0, [sp, #8]
 800a4b0:	950c      	str	r5, [sp, #48]	; 0x30
 800a4b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a4b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a4b8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a4ba:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800a4be:	f9bd 007c 	ldrsh.w	r0, [sp, #124]	; 0x7c
 800a4c2:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800a4c4:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 800a4c8:	9307      	str	r3, [sp, #28]
 800a4ca:	dd58      	ble.n	800a57e <forward_lite_pad_reflect+0xea>
 800a4cc:	4408      	add	r0, r1
 800a4ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a4d0:	f1c9 0a00 	rsb	sl, r9, #0
 800a4d4:	fb02 f200 	mul.w	r2, r2, r0
 800a4d8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a4da:	4403      	add	r3, r0
 800a4dc:	9206      	str	r2, [sp, #24]
 800a4de:	442b      	add	r3, r5
 800a4e0:	930a      	str	r3, [sp, #40]	; 0x28
 800a4e2:	197b      	adds	r3, r7, r5
 800a4e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a4e6:	9301      	str	r3, [sp, #4]
 800a4e8:	1e8b      	subs	r3, r1, #2
 800a4ea:	fb04 f101 	mul.w	r1, r4, r1
 800a4ee:	fb04 c303 	mla	r3, r4, r3, ip
 800a4f2:	9109      	str	r1, [sp, #36]	; 0x24
 800a4f4:	9304      	str	r3, [sp, #16]
 800a4f6:	fb08 2305 	mla	r3, r8, r5, r2
 800a4fa:	fb09 6303 	mla	r3, r9, r3, r6
 800a4fe:	9303      	str	r3, [sp, #12]
 800a500:	fb09 f308 	mul.w	r3, r9, r8
 800a504:	9308      	str	r3, [sp, #32]
 800a506:	2300      	movs	r3, #0
 800a508:	9305      	str	r3, [sp, #20]
 800a50a:	9b01      	ldr	r3, [sp, #4]
 800a50c:	42bb      	cmp	r3, r7
 800a50e:	d00a      	beq.n	800a526 <forward_lite_pad_reflect+0x92>
 800a510:	461d      	mov	r5, r3
 800a512:	9e02      	ldr	r6, [sp, #8]
 800a514:	4455      	add	r5, sl
 800a516:	4426      	add	r6, r4
 800a518:	4622      	mov	r2, r4
 800a51a:	4629      	mov	r1, r5
 800a51c:	4630      	mov	r0, r6
 800a51e:	f000 fd81 	bl	800b024 <st_int8_copy>
 800a522:	42bd      	cmp	r5, r7
 800a524:	d1f6      	bne.n	800a514 <forward_lite_pad_reflect+0x80>
 800a526:	9b02      	ldr	r3, [sp, #8]
 800a528:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a52a:	4618      	mov	r0, r3
 800a52c:	9901      	ldr	r1, [sp, #4]
 800a52e:	4413      	add	r3, r2
 800a530:	9302      	str	r3, [sp, #8]
 800a532:	f000 fd77 	bl	800b024 <st_int8_copy>
 800a536:	9b06      	ldr	r3, [sp, #24]
 800a538:	4543      	cmp	r3, r8
 800a53a:	da0d      	bge.n	800a558 <forward_lite_pad_reflect+0xc4>
 800a53c:	461d      	mov	r5, r3
 800a53e:	e9dd b603 	ldrd	fp, r6, [sp, #12]
 800a542:	3501      	adds	r5, #1
 800a544:	4659      	mov	r1, fp
 800a546:	4630      	mov	r0, r6
 800a548:	4622      	mov	r2, r4
 800a54a:	f000 fd6b 	bl	800b024 <st_int8_copy>
 800a54e:	45a8      	cmp	r8, r5
 800a550:	44cb      	add	fp, r9
 800a552:	eba6 0604 	sub.w	r6, r6, r4
 800a556:	d1f4      	bne.n	800a542 <forward_lite_pad_reflect+0xae>
 800a558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a55a:	9901      	ldr	r1, [sp, #4]
 800a55c:	4417      	add	r7, r2
 800a55e:	9b05      	ldr	r3, [sp, #20]
 800a560:	4411      	add	r1, r2
 800a562:	9a04      	ldr	r2, [sp, #16]
 800a564:	3301      	adds	r3, #1
 800a566:	9101      	str	r1, [sp, #4]
 800a568:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a56a:	9305      	str	r3, [sp, #20]
 800a56c:	440a      	add	r2, r1
 800a56e:	9908      	ldr	r1, [sp, #32]
 800a570:	9204      	str	r2, [sp, #16]
 800a572:	9a03      	ldr	r2, [sp, #12]
 800a574:	440a      	add	r2, r1
 800a576:	9203      	str	r2, [sp, #12]
 800a578:	9a07      	ldr	r2, [sp, #28]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d1c5      	bne.n	800a50a <forward_lite_pad_reflect+0x76>
 800a57e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a580:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a582:	fb03 f404 	mul.w	r4, r3, r4
 800a586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a588:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800a58c:	42a3      	cmp	r3, r4
 800a58e:	d00c      	beq.n	800a5aa <forward_lite_pad_reflect+0x116>
 800a590:	461d      	mov	r5, r3
 800a592:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a594:	425e      	negs	r6, r3
 800a596:	461f      	mov	r7, r3
 800a598:	4629      	mov	r1, r5
 800a59a:	4620      	mov	r0, r4
 800a59c:	443d      	add	r5, r7
 800a59e:	4434      	add	r4, r6
 800a5a0:	463a      	mov	r2, r7
 800a5a2:	f000 fd3f 	bl	800b024 <st_int8_copy>
 800a5a6:	42a5      	cmp	r5, r4
 800a5a8:	d1f6      	bne.n	800a598 <forward_lite_pad_reflect+0x104>
 800a5aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a5ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a5ae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	991d      	ldr	r1, [sp, #116]	; 0x74
 800a5b4:	fb02 f505 	mul.w	r5, r2, r5
 800a5b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5ba:	fb01 2403 	mla	r4, r1, r3, r2
 800a5be:	eba4 0545 	sub.w	r5, r4, r5, lsl #1
 800a5c2:	42ac      	cmp	r4, r5
 800a5c4:	d00a      	beq.n	800a5dc <forward_lite_pad_reflect+0x148>
 800a5c6:	424e      	negs	r6, r1
 800a5c8:	460f      	mov	r7, r1
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	4434      	add	r4, r6
 800a5d0:	443d      	add	r5, r7
 800a5d2:	463a      	mov	r2, r7
 800a5d4:	f000 fd26 	bl	800b024 <st_int8_copy>
 800a5d8:	42ac      	cmp	r4, r5
 800a5da:	d1f6      	bne.n	800a5ca <forward_lite_pad_reflect+0x136>
 800a5dc:	b00f      	add	sp, #60	; 0x3c
 800a5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e2:	bf00      	nop

0800a5e4 <align_factor>:
 800a5e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	b508      	push	{r3, lr}
 800a5ec:	eeb4 0a67 	vcmp.f32	s0, s15
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	8003      	strh	r3, [r0, #0]
 800a5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f8:	d524      	bpl.n	800a644 <align_factor+0x60>
 800a5fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a602:	dd1f      	ble.n	800a644 <align_factor+0x60>
 800a604:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a608:	2301      	movs	r3, #1
 800a60a:	e005      	b.n	800a618 <align_factor+0x34>
 800a60c:	8013      	strh	r3, [r2, #0]
 800a60e:	b28b      	uxth	r3, r1
 800a610:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a614:	2b21      	cmp	r3, #33	; 0x21
 800a616:	d02b      	beq.n	800a670 <align_factor+0x8c>
 800a618:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a61c:	1c59      	adds	r1, r3, #1
 800a61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a622:	d4f3      	bmi.n	800a60c <align_factor+0x28>
 800a624:	eddf 7a17 	vldr	s15, [pc, #92]	; 800a684 <align_factor+0xa0>
 800a628:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a62c:	ee17 0a90 	vmov	r0, s15
 800a630:	f7f5 ff84 	bl	800053c <__aeabi_f2lz>
 800a634:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800a638:	d003      	beq.n	800a642 <align_factor+0x5e>
 800a63a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800a63e:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 800a642:	bd08      	pop	{r3, pc}
 800a644:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a64c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a650:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800a654:	e005      	b.n	800a662 <align_factor+0x7e>
 800a656:	8013      	strh	r3, [r2, #0]
 800a658:	b28b      	uxth	r3, r1
 800a65a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a65e:	4283      	cmp	r3, r0
 800a660:	d00a      	beq.n	800a678 <align_factor+0x94>
 800a662:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a666:	1e59      	subs	r1, r3, #1
 800a668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a66c:	dcf3      	bgt.n	800a656 <align_factor+0x72>
 800a66e:	e7d9      	b.n	800a624 <align_factor+0x40>
 800a670:	2300      	movs	r3, #0
 800a672:	4618      	mov	r0, r3
 800a674:	8013      	strh	r3, [r2, #0]
 800a676:	bd08      	pop	{r3, pc}
 800a678:	f64f 73e2 	movw	r3, #65506	; 0xffe2
 800a67c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a680:	8013      	strh	r3, [r2, #0]
 800a682:	e7cf      	b.n	800a624 <align_factor+0x40>
 800a684:	4f000000 	.word	0x4f000000

0800a688 <align_factor_ch>:
 800a688:	b361      	cbz	r1, 800a6e4 <align_factor_ch+0x5c>
 800a68a:	ee80 7a20 	vdiv.f32	s14, s0, s1
 800a68e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a692:	b570      	push	{r4, r5, r6, lr}
 800a694:	1e9d      	subs	r5, r3, #2
 800a696:	1f14      	subs	r4, r2, #4
 800a698:	2600      	movs	r6, #0
 800a69a:	ecf0 7a01 	vldmia	r0!, {s15}
 800a69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6a2:	ee17 ea90 	vmov	lr, s15
 800a6a6:	f3ce 52c7 	ubfx	r2, lr, #23, #8
 800a6aa:	f3ce 0c16 	ubfx	ip, lr, #0, #23
 800a6ae:	f1be 0f00 	cmp.w	lr, #0
 800a6b2:	f50c 0c00 	add.w	ip, ip, #8388608	; 0x800000
 800a6b6:	f1c2 027e 	rsb	r2, r2, #126	; 0x7e
 800a6ba:	bfb8      	it	lt
 800a6bc:	f1cc 0c00 	rsblt	ip, ip, #0
 800a6c0:	2a1f      	cmp	r2, #31
 800a6c2:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800a6c6:	dc06      	bgt.n	800a6d6 <align_factor_ch+0x4e>
 800a6c8:	4281      	cmp	r1, r0
 800a6ca:	f825 2f02 	strh.w	r2, [r5, #2]!
 800a6ce:	f844 3f04 	str.w	r3, [r4, #4]!
 800a6d2:	d1e2      	bne.n	800a69a <align_factor_ch+0x12>
 800a6d4:	bd70      	pop	{r4, r5, r6, pc}
 800a6d6:	4281      	cmp	r1, r0
 800a6d8:	f825 6f02 	strh.w	r6, [r5, #2]!
 800a6dc:	f844 6f04 	str.w	r6, [r4, #4]!
 800a6e0:	d1db      	bne.n	800a69a <align_factor_ch+0x12>
 800a6e2:	bd70      	pop	{r4, r5, r6, pc}
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop

0800a6e8 <st_int8_to16_dual>:
 800a6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ec:	4698      	mov	r8, r3
 800a6ee:	085b      	lsrs	r3, r3, #1
 800a6f0:	eb00 0c02 	add.w	ip, r0, r2
 800a6f4:	f000 80b9 	beq.w	800a86a <st_int8_to16_dual+0x182>
 800a6f8:	f1a2 0710 	sub.w	r7, r2, #16
 800a6fc:	1f16      	subs	r6, r2, #4
 800a6fe:	2f00      	cmp	r7, #0
 800a700:	f04f 0500 	mov.w	r5, #0
 800a704:	db73      	blt.n	800a7ee <st_int8_to16_dual+0x106>
 800a706:	f8d0 e000 	ldr.w	lr, [r0]
 800a70a:	f8dc 4000 	ldr.w	r4, [ip]
 800a70e:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a712:	fa2f fe8e 	sxtb16	lr, lr
 800a716:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a71a:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a71e:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a722:	f8c1 e000 	str.w	lr, [r1]
 800a726:	f8c1 a008 	str.w	sl, [r1, #8]
 800a72a:	fa2f f484 	sxtb16	r4, r4
 800a72e:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a732:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a736:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a73a:	604c      	str	r4, [r1, #4]
 800a73c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800a740:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a744:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a748:	fa2f fe8e 	sxtb16	lr, lr
 800a74c:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a750:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a754:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a758:	f8c1 e010 	str.w	lr, [r1, #16]
 800a75c:	f8c1 a018 	str.w	sl, [r1, #24]
 800a760:	fa2f f484 	sxtb16	r4, r4
 800a764:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a768:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a76c:	f8c1 e01c 	str.w	lr, [r1, #28]
 800a770:	614c      	str	r4, [r1, #20]
 800a772:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800a776:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800a77a:	fa2f f99e 	sxtb16	r9, lr, ror #8
 800a77e:	fa2f fe8e 	sxtb16	lr, lr
 800a782:	eac9 4a2e 	pkhtb	sl, r9, lr, asr #16
 800a786:	eace 4e09 	pkhbt	lr, lr, r9, lsl #16
 800a78a:	fa2f f994 	sxtb16	r9, r4, ror #8
 800a78e:	3010      	adds	r0, #16
 800a790:	f10c 0c10 	add.w	ip, ip, #16
 800a794:	f8c1 e020 	str.w	lr, [r1, #32]
 800a798:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28
 800a79c:	fa2f f484 	sxtb16	r4, r4
 800a7a0:	eac9 4e24 	pkhtb	lr, r9, r4, asr #16
 800a7a4:	eac4 4409 	pkhbt	r4, r4, r9, lsl #16
 800a7a8:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 800a7ac:	624c      	str	r4, [r1, #36]	; 0x24
 800a7ae:	f850 ec04 	ldr.w	lr, [r0, #-4]
 800a7b2:	f85c 4c04 	ldr.w	r4, [ip, #-4]
 800a7b6:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800a7ba:	fa2f fe8e 	sxtb16	lr, lr
 800a7be:	eaca 492e 	pkhtb	r9, sl, lr, asr #16
 800a7c2:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800a7c6:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800a7ca:	3510      	adds	r5, #16
 800a7cc:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 800a7d0:	f8c1 9038 	str.w	r9, [r1, #56]	; 0x38
 800a7d4:	3140      	adds	r1, #64	; 0x40
 800a7d6:	42bd      	cmp	r5, r7
 800a7d8:	fa2f f484 	sxtb16	r4, r4
 800a7dc:	eaca 4e24 	pkhtb	lr, sl, r4, asr #16
 800a7e0:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800a7e4:	f841 ec04 	str.w	lr, [r1, #-4]
 800a7e8:	f841 4c0c 	str.w	r4, [r1, #-12]
 800a7ec:	dd8b      	ble.n	800a706 <st_int8_to16_dual+0x1e>
 800a7ee:	42ae      	cmp	r6, r5
 800a7f0:	db1e      	blt.n	800a830 <st_int8_to16_dual+0x148>
 800a7f2:	f850 4b04 	ldr.w	r4, [r0], #4
 800a7f6:	f85c eb04 	ldr.w	lr, [ip], #4
 800a7fa:	fa2f fa94 	sxtb16	sl, r4, ror #8
 800a7fe:	fa2f f484 	sxtb16	r4, r4
 800a802:	eaca 4924 	pkhtb	r9, sl, r4, asr #16
 800a806:	eac4 440a 	pkhbt	r4, r4, sl, lsl #16
 800a80a:	fa2f fa9e 	sxtb16	sl, lr, ror #8
 800a80e:	3504      	adds	r5, #4
 800a810:	600c      	str	r4, [r1, #0]
 800a812:	f8c1 9008 	str.w	r9, [r1, #8]
 800a816:	3110      	adds	r1, #16
 800a818:	42b5      	cmp	r5, r6
 800a81a:	fa2f fe8e 	sxtb16	lr, lr
 800a81e:	eaca 442e 	pkhtb	r4, sl, lr, asr #16
 800a822:	eace 4e0a 	pkhbt	lr, lr, sl, lsl #16
 800a826:	f841 4c04 	str.w	r4, [r1, #-4]
 800a82a:	f841 ec0c 	str.w	lr, [r1, #-12]
 800a82e:	dde0      	ble.n	800a7f2 <st_int8_to16_dual+0x10a>
 800a830:	42aa      	cmp	r2, r5
 800a832:	dd40      	ble.n	800a8b6 <st_int8_to16_dual+0x1ce>
 800a834:	1b55      	subs	r5, r2, r5
 800a836:	1d0c      	adds	r4, r1, #4
 800a838:	46e6      	mov	lr, ip
 800a83a:	eb00 0a05 	add.w	sl, r0, r5
 800a83e:	f910 9b01 	ldrsb.w	r9, [r0], #1
 800a842:	3404      	adds	r4, #4
 800a844:	f824 9c08 	strh.w	r9, [r4, #-8]
 800a848:	4550      	cmp	r0, sl
 800a84a:	f91e 9b01 	ldrsb.w	r9, [lr], #1
 800a84e:	f824 9c06 	strh.w	r9, [r4, #-6]
 800a852:	d1f4      	bne.n	800a83e <st_int8_to16_dual+0x156>
 800a854:	44ac      	add	ip, r5
 800a856:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800a85a:	3b01      	subs	r3, #1
 800a85c:	eb0a 0002 	add.w	r0, sl, r2
 800a860:	4494      	add	ip, r2
 800a862:	b29b      	uxth	r3, r3
 800a864:	2b00      	cmp	r3, #0
 800a866:	f47f af4a 	bne.w	800a6fe <st_int8_to16_dual+0x16>
 800a86a:	f018 0f01 	tst.w	r8, #1
 800a86e:	d020      	beq.n	800a8b2 <st_int8_to16_dual+0x1ca>
 800a870:	1f17      	subs	r7, r2, #4
 800a872:	f04f 0400 	mov.w	r4, #0
 800a876:	d411      	bmi.n	800a89c <st_int8_to16_dual+0x1b4>
 800a878:	f850 3b04 	ldr.w	r3, [r0], #4
 800a87c:	fa2f f593 	sxtb16	r5, r3, ror #8
 800a880:	3404      	adds	r4, #4
 800a882:	3108      	adds	r1, #8
 800a884:	fa2f f383 	sxtb16	r3, r3
 800a888:	42a7      	cmp	r7, r4
 800a88a:	eac5 4623 	pkhtb	r6, r5, r3, asr #16
 800a88e:	eac3 4305 	pkhbt	r3, r3, r5, lsl #16
 800a892:	f841 6c04 	str.w	r6, [r1, #-4]
 800a896:	f841 3c08 	str.w	r3, [r1, #-8]
 800a89a:	daed      	bge.n	800a878 <st_int8_to16_dual+0x190>
 800a89c:	42a2      	cmp	r2, r4
 800a89e:	dd08      	ble.n	800a8b2 <st_int8_to16_dual+0x1ca>
 800a8a0:	1b13      	subs	r3, r2, r4
 800a8a2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a8a6:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800a8aa:	f821 2b02 	strh.w	r2, [r1], #2
 800a8ae:	428b      	cmp	r3, r1
 800a8b0:	d1f9      	bne.n	800a8a6 <st_int8_to16_dual+0x1be>
 800a8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b6:	4682      	mov	sl, r0
 800a8b8:	e7cf      	b.n	800a85a <st_int8_to16_dual+0x172>
 800a8ba:	bf00      	nop

0800a8bc <ai_padding_opt_init>:
 800a8bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8c0:	2700      	movs	r7, #0
 800a8c2:	9c07      	ldr	r4, [sp, #28]
 800a8c4:	e9c0 7700 	strd	r7, r7, [r0]
 800a8c8:	6087      	str	r7, [r0, #8]
 800a8ca:	46b9      	mov	r9, r7
 800a8cc:	690e      	ldr	r6, [r1, #16]
 800a8ce:	f1c6 0c00 	rsb	ip, r6, #0
 800a8d2:	689e      	ldr	r6, [r3, #8]
 800a8d4:	42be      	cmp	r6, r7
 800a8d6:	dd1c      	ble.n	800a912 <ai_padding_opt_init+0x56>
 800a8d8:	463e      	mov	r6, r7
 800a8da:	46be      	mov	lr, r7
 800a8dc:	e010      	b.n	800a900 <ai_padding_opt_init+0x44>
 800a8de:	6895      	ldr	r5, [r2, #8]
 800a8e0:	eba5 080c 	sub.w	r8, r5, ip
 800a8e4:	68a5      	ldr	r5, [r4, #8]
 800a8e6:	45a8      	cmp	r8, r5
 800a8e8:	da10      	bge.n	800a90c <ai_padding_opt_init+0x50>
 800a8ea:	f109 0901 	add.w	r9, r9, #1
 800a8ee:	f8c0 9008 	str.w	r9, [r0, #8]
 800a8f2:	688d      	ldr	r5, [r1, #8]
 800a8f4:	f10e 0e01 	add.w	lr, lr, #1
 800a8f8:	44ac      	add	ip, r5
 800a8fa:	689d      	ldr	r5, [r3, #8]
 800a8fc:	4575      	cmp	r5, lr
 800a8fe:	dd09      	ble.n	800a914 <ai_padding_opt_init+0x58>
 800a900:	f1bc 0f00 	cmp.w	ip, #0
 800a904:	daeb      	bge.n	800a8de <ai_padding_opt_init+0x22>
 800a906:	3601      	adds	r6, #1
 800a908:	6006      	str	r6, [r0, #0]
 800a90a:	e7f2      	b.n	800a8f2 <ai_padding_opt_init+0x36>
 800a90c:	3701      	adds	r7, #1
 800a90e:	6047      	str	r7, [r0, #4]
 800a910:	e7ef      	b.n	800a8f2 <ai_padding_opt_init+0x36>
 800a912:	463e      	mov	r6, r7
 800a914:	2500      	movs	r5, #0
 800a916:	f8c0 9014 	str.w	r9, [r0, #20]
 800a91a:	e9c0 6703 	strd	r6, r7, [r0, #12]
 800a91e:	e9c0 5506 	strd	r5, r5, [r0, #24]
 800a922:	6205      	str	r5, [r0, #32]
 800a924:	694e      	ldr	r6, [r1, #20]
 800a926:	f1c6 0c00 	rsb	ip, r6, #0
 800a92a:	685e      	ldr	r6, [r3, #4]
 800a92c:	42ae      	cmp	r6, r5
 800a92e:	dd1c      	ble.n	800a96a <ai_padding_opt_init+0xae>
 800a930:	46ae      	mov	lr, r5
 800a932:	e00f      	b.n	800a954 <ai_padding_opt_init+0x98>
 800a934:	6855      	ldr	r5, [r2, #4]
 800a936:	6866      	ldr	r6, [r4, #4]
 800a938:	eba5 050c 	sub.w	r5, r5, ip
 800a93c:	42b5      	cmp	r5, r6
 800a93e:	da10      	bge.n	800a962 <ai_padding_opt_init+0xa6>
 800a940:	6a05      	ldr	r5, [r0, #32]
 800a942:	3501      	adds	r5, #1
 800a944:	6205      	str	r5, [r0, #32]
 800a946:	68cd      	ldr	r5, [r1, #12]
 800a948:	f10e 0e01 	add.w	lr, lr, #1
 800a94c:	44ac      	add	ip, r5
 800a94e:	685d      	ldr	r5, [r3, #4]
 800a950:	4575      	cmp	r5, lr
 800a952:	dd0a      	ble.n	800a96a <ai_padding_opt_init+0xae>
 800a954:	f1bc 0f00 	cmp.w	ip, #0
 800a958:	daec      	bge.n	800a934 <ai_padding_opt_init+0x78>
 800a95a:	6985      	ldr	r5, [r0, #24]
 800a95c:	3501      	adds	r5, #1
 800a95e:	6185      	str	r5, [r0, #24]
 800a960:	e7f1      	b.n	800a946 <ai_padding_opt_init+0x8a>
 800a962:	69c5      	ldr	r5, [r0, #28]
 800a964:	3501      	adds	r5, #1
 800a966:	61c5      	str	r5, [r0, #28]
 800a968:	e7ed      	b.n	800a946 <ai_padding_opt_init+0x8a>
 800a96a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a96e:	bf00      	nop

0800a970 <ai_padding_opt_phase1>:
 800a970:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
 800a974:	b923      	cbnz	r3, 800a980 <ai_padding_opt_phase1+0x10>
 800a976:	b17a      	cbz	r2, 800a998 <ai_padding_opt_phase1+0x28>
 800a978:	3a01      	subs	r2, #1
 800a97a:	8483      	strh	r3, [r0, #36]	; 0x24
 800a97c:	61c2      	str	r2, [r0, #28]
 800a97e:	e004      	b.n	800a98a <ai_padding_opt_phase1+0x1a>
 800a980:	b152      	cbz	r2, 800a998 <ai_padding_opt_phase1+0x28>
 800a982:	2201      	movs	r2, #1
 800a984:	3b01      	subs	r3, #1
 800a986:	8482      	strh	r2, [r0, #36]	; 0x24
 800a988:	6183      	str	r3, [r0, #24]
 800a98a:	68c3      	ldr	r3, [r0, #12]
 800a98c:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800a990:	6003      	str	r3, [r0, #0]
 800a992:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800a996:	4770      	bx	lr
 800a998:	6a03      	ldr	r3, [r0, #32]
 800a99a:	2201      	movs	r2, #1
 800a99c:	3b01      	subs	r3, #1
 800a99e:	8482      	strh	r2, [r0, #36]	; 0x24
 800a9a0:	6203      	str	r3, [r0, #32]
 800a9a2:	e7f2      	b.n	800a98a <ai_padding_opt_phase1+0x1a>

0800a9a4 <st_int8_avepool>:
 800a9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a8:	b095      	sub	sp, #84	; 0x54
 800a9aa:	eec0 5a20 	vdiv.f32	s11, s0, s1
 800a9ae:	930c      	str	r3, [sp, #48]	; 0x30
 800a9b0:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 800a9b4:	f8bd a078 	ldrh.w	sl, [sp, #120]	; 0x78
 800a9b8:	9206      	str	r2, [sp, #24]
 800a9ba:	9313      	str	r3, [sp, #76]	; 0x4c
 800a9bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a9c0:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 800a9c4:	910d      	str	r1, [sp, #52]	; 0x34
 800a9c6:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
 800a9ca:	910e      	str	r1, [sp, #56]	; 0x38
 800a9cc:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 800a9d0:	910f      	str	r1, [sp, #60]	; 0x3c
 800a9d2:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 800a9d6:	9110      	str	r1, [sp, #64]	; 0x40
 800a9d8:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 800a9dc:	9111      	str	r1, [sp, #68]	; 0x44
 800a9de:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 800a9e2:	9112      	str	r1, [sp, #72]	; 0x48
 800a9e4:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 800a9e8:	9107      	str	r1, [sp, #28]
 800a9ea:	f99d 109c 	ldrsb.w	r1, [sp, #156]	; 0x9c
 800a9ee:	ee03 1a10 	vmov	s6, r1
 800a9f2:	f99d 10a0 	ldrsb.w	r1, [sp, #160]	; 0xa0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f000 80aa 	beq.w	800ab50 <st_int8_avepool+0x1ac>
 800a9fc:	eeb4 0a60 	vcmp.f32	s0, s1
 800aa00:	2300      	movs	r3, #0
 800aa02:	fb02 fb0a 	mul.w	fp, r2, sl
 800aa06:	ee13 2a10 	vmov	r2, s6
 800aa0a:	9304      	str	r3, [sp, #16]
 800aa0c:	ee03 1a90 	vmov	s7, r1
 800aa10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa14:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 800ab8c <st_int8_avepool+0x1e8>
 800aa18:	eddf 2a5d 	vldr	s5, [pc, #372]	; 800ab90 <st_int8_avepool+0x1ec>
 800aa1c:	bf08      	it	eq
 800aa1e:	2301      	moveq	r3, #1
 800aa20:	428a      	cmp	r2, r1
 800aa22:	bf14      	ite	ne
 800aa24:	2300      	movne	r3, #0
 800aa26:	f003 0301 	andeq.w	r3, r3, #1
 800aa2a:	9302      	str	r3, [sp, #8]
 800aa2c:	9a07      	ldr	r2, [sp, #28]
 800aa2e:	2a00      	cmp	r2, #0
 800aa30:	f000 8087 	beq.w	800ab42 <st_int8_avepool+0x19e>
 800aa34:	9904      	ldr	r1, [sp, #16]
 800aa36:	eef8 4ac3 	vcvt.f32.s32	s9, s6
 800aa3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa3c:	eeb8 5ae3 	vcvt.f32.s32	s10, s7
 800aa40:	fb01 f202 	mul.w	r2, r1, r2
 800aa44:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aa46:	fb01 f303 	mul.w	r3, r1, r3
 800aa4a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aa4c:	9208      	str	r2, [sp, #32]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	1a1b      	subs	r3, r3, r0
 800aa52:	9205      	str	r2, [sp, #20]
 800aa54:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 800aa58:	440b      	add	r3, r1
 800aa5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa5c:	9201      	str	r2, [sp, #4]
 800aa5e:	4299      	cmp	r1, r3
 800aa60:	bfa8      	it	ge
 800aa62:	4619      	movge	r1, r3
 800aa64:	9b06      	ldr	r3, [sp, #24]
 800aa66:	4689      	mov	r9, r1
 800aa68:	fb02 f303 	mul.w	r3, r2, r3
 800aa6c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa6e:	f1ba 0f00 	cmp.w	sl, #0
 800aa72:	d060      	beq.n	800ab36 <st_int8_avepool+0x192>
 800aa74:	9a05      	ldr	r2, [sp, #20]
 800aa76:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800aa7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa7c:	f04f 0800 	mov.w	r8, #0
 800aa80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aa82:	fb02 f303 	mul.w	r3, r2, r3
 800aa86:	9c06      	ldr	r4, [sp, #24]
 800aa88:	1a5b      	subs	r3, r3, r1
 800aa8a:	9908      	ldr	r1, [sp, #32]
 800aa8c:	440a      	add	r2, r1
 800aa8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa90:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
 800aa94:	fb0a 1202 	mla	r2, sl, r2, r1
 800aa98:	9200      	str	r2, [sp, #0]
 800aa9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa9c:	4413      	add	r3, r2
 800aa9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaa0:	429c      	cmp	r4, r3
 800aaa2:	bfa8      	it	ge
 800aaa4:	461c      	movge	r4, r3
 800aaa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa8:	4463      	add	r3, ip
 800aaaa:	eba4 0e0c 	sub.w	lr, r4, ip
 800aaae:	fb0a 2303 	mla	r3, sl, r3, r2
 800aab2:	9303      	str	r3, [sp, #12]
 800aab4:	9d01      	ldr	r5, [sp, #4]
 800aab6:	45a9      	cmp	r9, r5
 800aab8:	dd62      	ble.n	800ab80 <st_int8_avepool+0x1dc>
 800aaba:	2700      	movs	r7, #0
 800aabc:	9b03      	ldr	r3, [sp, #12]
 800aabe:	4639      	mov	r1, r7
 800aac0:	eb08 0603 	add.w	r6, r8, r3
 800aac4:	4564      	cmp	r4, ip
 800aac6:	dd09      	ble.n	800aadc <st_int8_avepool+0x138>
 800aac8:	4632      	mov	r2, r6
 800aaca:	4663      	mov	r3, ip
 800aacc:	3301      	adds	r3, #1
 800aace:	f992 0000 	ldrsb.w	r0, [r2]
 800aad2:	4452      	add	r2, sl
 800aad4:	429c      	cmp	r4, r3
 800aad6:	4401      	add	r1, r0
 800aad8:	d1f8      	bne.n	800aacc <st_int8_avepool+0x128>
 800aada:	4477      	add	r7, lr
 800aadc:	3501      	adds	r5, #1
 800aade:	445e      	add	r6, fp
 800aae0:	45a9      	cmp	r9, r5
 800aae2:	d1ef      	bne.n	800aac4 <st_int8_avepool+0x120>
 800aae4:	9b02      	ldr	r3, [sp, #8]
 800aae6:	bbb3      	cbnz	r3, 800ab56 <st_int8_avepool+0x1b2>
 800aae8:	ee07 1a90 	vmov	s15, r1
 800aaec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aaf0:	ee07 7a90 	vmov	s15, r7
 800aaf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aaf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aafc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ab00:	eeb0 7a45 	vmov.f32	s14, s10
 800ab04:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800ab08:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ab0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab10:	fe64 7a06 	vselge.f32	s15, s8, s12
 800ab14:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab1c:	ee17 3a90 	vmov	r3, s15
 800ab20:	f303 0307 	ssat	r3, #8, r3
 800ab24:	9a00      	ldr	r2, [sp, #0]
 800ab26:	7013      	strb	r3, [r2, #0]
 800ab28:	4613      	mov	r3, r2
 800ab2a:	f108 0801 	add.w	r8, r8, #1
 800ab2e:	3301      	adds	r3, #1
 800ab30:	45d0      	cmp	r8, sl
 800ab32:	9300      	str	r3, [sp, #0]
 800ab34:	d1be      	bne.n	800aab4 <st_int8_avepool+0x110>
 800ab36:	9b05      	ldr	r3, [sp, #20]
 800ab38:	9a07      	ldr	r2, [sp, #28]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	9305      	str	r3, [sp, #20]
 800ab40:	db95      	blt.n	800aa6e <st_int8_avepool+0xca>
 800ab42:	9b04      	ldr	r3, [sp, #16]
 800ab44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab46:	3301      	adds	r3, #1
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	9304      	str	r3, [sp, #16]
 800ab4c:	f73f af6e 	bgt.w	800aa2c <st_int8_avepool+0x88>
 800ab50:	b015      	add	sp, #84	; 0x54
 800ab52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab56:	2900      	cmp	r1, #0
 800ab58:	db09      	blt.n	800ab6e <st_int8_avepool+0x1ca>
 800ab5a:	eb01 0167 	add.w	r1, r1, r7, asr #1
 800ab5e:	fbb1 f7f7 	udiv	r7, r1, r7
 800ab62:	f307 0307 	ssat	r3, #8, r7
 800ab66:	9a00      	ldr	r2, [sp, #0]
 800ab68:	7013      	strb	r3, [r2, #0]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	e7dd      	b.n	800ab2a <st_int8_avepool+0x186>
 800ab6e:	2f00      	cmp	r7, #0
 800ab70:	463b      	mov	r3, r7
 800ab72:	bfb8      	it	lt
 800ab74:	1c7b      	addlt	r3, r7, #1
 800ab76:	eba1 0363 	sub.w	r3, r1, r3, asr #1
 800ab7a:	fb93 f7f7 	sdiv	r7, r3, r7
 800ab7e:	e7f0      	b.n	800ab62 <st_int8_avepool+0x1be>
 800ab80:	9b02      	ldr	r3, [sp, #8]
 800ab82:	b913      	cbnz	r3, 800ab8a <st_int8_avepool+0x1e6>
 800ab84:	eef0 7a62 	vmov.f32	s15, s5
 800ab88:	e7b8      	b.n	800aafc <st_int8_avepool+0x158>
 800ab8a:	deff      	udf	#255	; 0xff
 800ab8c:	befffffc 	.word	0xbefffffc
 800ab90:	7fc00000 	.word	0x7fc00000

0800ab94 <st_sssa8_ch_convolve_rank1upd>:
 800ab94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab98:	b085      	sub	sp, #20
 800ab9a:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800ab9e:	f99d b040 	ldrsb.w	fp, [sp, #64]	; 0x40
 800aba2:	fb13 f304 	smulbb	r3, r3, r4
 800aba6:	460c      	mov	r4, r1
 800aba8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800abaa:	fb13 f500 	smulbb	r5, r3, r0
 800abae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abb0:	2a00      	cmp	r2, #0
 800abb2:	d070      	beq.n	800ac96 <st_sssa8_ch_convolve_rank1upd+0x102>
 800abb4:	b2ad      	uxth	r5, r5
 800abb6:	f1a1 0904 	sub.w	r9, r1, #4
 800abba:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
 800abbe:	08af      	lsrs	r7, r5, #2
 800abc0:	f005 0503 	and.w	r5, r5, #3
 800abc4:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 800abc8:	1e69      	subs	r1, r5, #1
 800abca:	f1a7 0381 	sub.w	r3, r7, #129	; 0x81
 800abce:	f1a7 0280 	sub.w	r2, r7, #128	; 0x80
 800abd2:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800abd6:	b289      	uxth	r1, r1
 800abd8:	9100      	str	r1, [sp, #0]
 800abda:	ebc3 2143 	rsb	r1, r3, r3, lsl #9
 800abde:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 800abe2:	b292      	uxth	r2, r2
 800abe4:	9202      	str	r2, [sp, #8]
 800abe6:	025a      	lsls	r2, r3, #9
 800abe8:	3301      	adds	r3, #1
 800abea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abee:	025b      	lsls	r3, r3, #9
 800abf0:	9203      	str	r2, [sp, #12]
 800abf2:	9301      	str	r3, [sp, #4]
 800abf4:	2f80      	cmp	r7, #128	; 0x80
 800abf6:	d953      	bls.n	800aca0 <st_sssa8_ch_convolve_rank1upd+0x10c>
 800abf8:	9b03      	ldr	r3, [sp, #12]
 800abfa:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800abfe:	2600      	movs	r6, #0
 800ac00:	eb04 0c03 	add.w	ip, r4, r3
 800ac04:	f5a0 7100 	sub.w	r1, r0, #512	; 0x200
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f851 3b04 	ldr.w	r3, [r1], #4
 800ac0e:	fa2f fe83 	sxtb16	lr, r3
 800ac12:	4281      	cmp	r1, r0
 800ac14:	ea4f 2333 	mov.w	r3, r3, ror #8
 800ac18:	fa92 f21e 	qadd16	r2, r2, lr
 800ac1c:	fa2f f383 	sxtb16	r3, r3
 800ac20:	fa92 f213 	qadd16	r2, r2, r3
 800ac24:	d1f1      	bne.n	800ac0a <st_sssa8_ch_convolve_rank1upd+0x76>
 800ac26:	f501 7000 	add.w	r0, r1, #512	; 0x200
 800ac2a:	b213      	sxth	r3, r2
 800ac2c:	4560      	cmp	r0, ip
 800ac2e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800ac32:	441e      	add	r6, r3
 800ac34:	d1e6      	bne.n	800ac04 <st_sssa8_ch_convolve_rank1upd+0x70>
 800ac36:	9b01      	ldr	r3, [sp, #4]
 800ac38:	18e1      	adds	r1, r4, r3
 800ac3a:	9c02      	ldr	r4, [sp, #8]
 800ac3c:	b374      	cbz	r4, 800ac9c <st_sssa8_ch_convolve_rank1upd+0x108>
 800ac3e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800ac42:	2200      	movs	r2, #0
 800ac44:	f851 3b04 	ldr.w	r3, [r1], #4
 800ac48:	fa2f f083 	sxtb16	r0, r3
 800ac4c:	428c      	cmp	r4, r1
 800ac4e:	ea4f 2333 	mov.w	r3, r3, ror #8
 800ac52:	fa92 f210 	qadd16	r2, r2, r0
 800ac56:	fa2f f383 	sxtb16	r3, r3
 800ac5a:	fa92 f213 	qadd16	r2, r2, r3
 800ac5e:	d1f1      	bne.n	800ac44 <st_sssa8_ch_convolve_rank1upd+0xb0>
 800ac60:	b213      	sxth	r3, r2
 800ac62:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800ac66:	441e      	add	r6, r3
 800ac68:	b16d      	cbz	r5, 800ac86 <st_sssa8_ch_convolve_rank1upd+0xf2>
 800ac6a:	f994 3000 	ldrsb.w	r3, [r4]
 800ac6e:	441e      	add	r6, r3
 800ac70:	9b00      	ldr	r3, [sp, #0]
 800ac72:	b13b      	cbz	r3, 800ac84 <st_sssa8_ch_convolve_rank1upd+0xf0>
 800ac74:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ac78:	2d02      	cmp	r5, #2
 800ac7a:	441e      	add	r6, r3
 800ac7c:	d002      	beq.n	800ac84 <st_sssa8_ch_convolve_rank1upd+0xf0>
 800ac7e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800ac82:	441e      	add	r6, r3
 800ac84:	442c      	add	r4, r5
 800ac86:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800ac8a:	fb06 331b 	mls	r3, r6, fp, r3
 800ac8e:	f84a 3b04 	str.w	r3, [sl], #4
 800ac92:	45c2      	cmp	sl, r8
 800ac94:	d1ae      	bne.n	800abf4 <st_sssa8_ch_convolve_rank1upd+0x60>
 800ac96:	b005      	add	sp, #20
 800ac98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	e7e3      	b.n	800ac68 <st_sssa8_ch_convolve_rank1upd+0xd4>
 800aca0:	4621      	mov	r1, r4
 800aca2:	2600      	movs	r6, #0
 800aca4:	463c      	mov	r4, r7
 800aca6:	e7c9      	b.n	800ac3c <st_sssa8_ch_convolve_rank1upd+0xa8>

0800aca8 <st_sssa8_fully_connected>:
 800aca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acac:	b08d      	sub	sp, #52	; 0x34
 800acae:	4698      	mov	r8, r3
 800acb0:	4689      	mov	r9, r1
 800acb2:	4693      	mov	fp, r2
 800acb4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800acb6:	f99d 7064 	ldrsb.w	r7, [sp, #100]	; 0x64
 800acba:	6823      	ldr	r3, [r4, #0]
 800acbc:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800acc0:	9307      	str	r3, [sp, #28]
 800acc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acc4:	f99d 4060 	ldrsb.w	r4, [sp, #96]	; 0x60
 800acc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800accc:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800acce:	1e6b      	subs	r3, r5, #1
 800acd0:	2b14      	cmp	r3, #20
 800acd2:	9308      	str	r3, [sp, #32]
 800acd4:	d804      	bhi.n	800ace0 <st_sssa8_fully_connected+0x38>
 800acd6:	2301      	movs	r3, #1
 800acd8:	40af      	lsls	r7, r5
 800acda:	40ab      	lsls	r3, r5
 800acdc:	eb07 0753 	add.w	r7, r7, r3, lsr #1
 800ace0:	2e00      	cmp	r6, #0
 800ace2:	d062      	beq.n	800adaa <st_sssa8_fully_connected+0x102>
 800ace4:	eac4 4304 	pkhbt	r3, r4, r4, lsl #16
 800ace8:	465a      	mov	r2, fp
 800acea:	4631      	mov	r1, r6
 800acec:	9400      	str	r4, [sp, #0]
 800acee:	ea4f 0458 	mov.w	r4, r8, lsr #1
 800acf2:	f000 fa1f 	bl	800b134 <st_int8_reordered_no_shift_zero>
 800acf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acf8:	465a      	mov	r2, fp
 800acfa:	4649      	mov	r1, r9
 800acfc:	4630      	mov	r0, r6
 800acfe:	9400      	str	r4, [sp, #0]
 800ad00:	e9cd 5303 	strd	r5, r3, [sp, #12]
 800ad04:	9b07      	ldr	r3, [sp, #28]
 800ad06:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800ad0a:	4653      	mov	r3, sl
 800ad0c:	f000 fd50 	bl	800b7b0 <st_sssa8_dense_loop>
 800ad10:	f018 0f01 	tst.w	r8, #1
 800ad14:	d045      	beq.n	800ada2 <st_sssa8_fully_connected+0xfa>
 800ad16:	f85a 3034 	ldr.w	r3, [sl, r4, lsl #3]
 800ad1a:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 800ad1e:	ea5f 0a9b 	movs.w	sl, fp, lsr #2
 800ad22:	fb0e 9e0b 	mla	lr, lr, fp, r9
 800ad26:	f000 811c 	beq.w	800af62 <st_sssa8_fully_connected+0x2ba>
 800ad2a:	eb0e 098a 	add.w	r9, lr, sl, lsl #2
 800ad2e:	4630      	mov	r0, r6
 800ad30:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ad34:	fa2f f192 	sxtb16	r1, r2, ror #8
 800ad38:	f8d0 c000 	ldr.w	ip, [r0]
 800ad3c:	fa2f f282 	sxtb16	r2, r2
 800ad40:	fb2c 3302 	smlad	r3, ip, r2, r3
 800ad44:	6842      	ldr	r2, [r0, #4]
 800ad46:	3008      	adds	r0, #8
 800ad48:	fb22 3301 	smlad	r3, r2, r1, r3
 800ad4c:	45ce      	cmp	lr, r9
 800ad4e:	d1ef      	bne.n	800ad30 <st_sssa8_fully_connected+0x88>
 800ad50:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ad54:	f01b 0203 	ands.w	r2, fp, #3
 800ad58:	d013      	beq.n	800ad82 <st_sssa8_fully_connected+0xda>
 800ad5a:	3a01      	subs	r2, #1
 800ad5c:	f999 1000 	ldrsb.w	r1, [r9]
 800ad60:	8830      	ldrh	r0, [r6, #0]
 800ad62:	b292      	uxth	r2, r2
 800ad64:	fb10 3301 	smlabb	r3, r0, r1, r3
 800ad68:	b15a      	cbz	r2, 800ad82 <st_sssa8_fully_connected+0xda>
 800ad6a:	f999 1001 	ldrsb.w	r1, [r9, #1]
 800ad6e:	2a01      	cmp	r2, #1
 800ad70:	8870      	ldrh	r0, [r6, #2]
 800ad72:	fb10 3301 	smlabb	r3, r0, r1, r3
 800ad76:	d004      	beq.n	800ad82 <st_sssa8_fully_connected+0xda>
 800ad78:	f999 2002 	ldrsb.w	r2, [r9, #2]
 800ad7c:	88b1      	ldrh	r1, [r6, #4]
 800ad7e:	fb11 3302 	smlabb	r3, r1, r2, r3
 800ad82:	2d15      	cmp	r5, #21
 800ad84:	f300 80b5 	bgt.w	800aef2 <st_sssa8_fully_connected+0x24a>
 800ad88:	2d00      	cmp	r5, #0
 800ad8a:	f340 80d2 	ble.w	800af32 <st_sssa8_fully_connected+0x28a>
 800ad8e:	9a07      	ldr	r2, [sp, #28]
 800ad90:	005b      	lsls	r3, r3, #1
 800ad92:	fb53 7302 	smmla	r3, r3, r2, r7
 800ad96:	412b      	asrs	r3, r5
 800ad98:	f303 0307 	ssat	r3, #8, r3
 800ad9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ad9e:	f802 3014 	strb.w	r3, [r2, r4, lsl #1]
 800ada2:	2000      	movs	r0, #0
 800ada4:	b00d      	add	sp, #52	; 0x34
 800ada6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800adac:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800adb0:	4649      	mov	r1, r9
 800adb2:	9701      	str	r7, [sp, #4]
 800adb4:	9209      	str	r2, [sp, #36]	; 0x24
 800adb6:	9200      	str	r2, [sp, #0]
 800adb8:	465a      	mov	r2, fp
 800adba:	900a      	str	r0, [sp, #40]	; 0x28
 800adbc:	e9cd 5304 	strd	r5, r3, [sp, #16]
 800adc0:	9b07      	ldr	r3, [sp, #28]
 800adc2:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800adc6:	4653      	mov	r3, sl
 800adc8:	f000 fe02 	bl	800b9d0 <st_sssa8_dense_memopt_loop>
 800adcc:	f018 0f01 	tst.w	r8, #1
 800add0:	d0e7      	beq.n	800ada2 <st_sssa8_fully_connected+0xfa>
 800add2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800add4:	f1bb 0f0f 	cmp.w	fp, #15
 800add8:	f1c4 0e00 	rsb	lr, r4, #0
 800addc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800adde:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800ade2:	f85a 3032 	ldr.w	r3, [sl, r2, lsl #3]
 800ade6:	eace 4e0e 	pkhbt	lr, lr, lr, lsl #16
 800adea:	fb0b 9c0c 	mla	ip, fp, ip, r9
 800adee:	dd5b      	ble.n	800aea8 <st_sssa8_fully_connected+0x200>
 800adf0:	f1ab 0110 	sub.w	r1, fp, #16
 800adf4:	4680      	mov	r8, r0
 800adf6:	0909      	lsrs	r1, r1, #4
 800adf8:	1c4a      	adds	r2, r1, #1
 800adfa:	0111      	lsls	r1, r2, #4
 800adfc:	920b      	str	r2, [sp, #44]	; 0x2c
 800adfe:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
 800ae02:	910a      	str	r1, [sp, #40]	; 0x28
 800ae04:	f8dc a000 	ldr.w	sl, [ip]
 800ae08:	f8d8 1000 	ldr.w	r1, [r8]
 800ae0c:	fa2f f99a 	sxtb16	r9, sl, ror #8
 800ae10:	ea4f 2631 	mov.w	r6, r1, ror #8
 800ae14:	fa2f fa8a 	sxtb16	sl, sl
 800ae18:	fa2e f181 	sxtab16	r1, lr, r1
 800ae1c:	fa2e f686 	sxtab16	r6, lr, r6
 800ae20:	fb21 310a 	smlad	r1, r1, sl, r3
 800ae24:	fb26 1109 	smlad	r1, r6, r9, r1
 800ae28:	f8dc a004 	ldr.w	sl, [ip, #4]
 800ae2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae30:	fa2f f99a 	sxtb16	r9, sl, ror #8
 800ae34:	ea4f 2633 	mov.w	r6, r3, ror #8
 800ae38:	fa2f fa8a 	sxtb16	sl, sl
 800ae3c:	fa2e f383 	sxtab16	r3, lr, r3
 800ae40:	fa2e f686 	sxtab16	r6, lr, r6
 800ae44:	fb23 130a 	smlad	r3, r3, sl, r1
 800ae48:	fb26 3309 	smlad	r3, r6, r9, r3
 800ae4c:	f8dc a008 	ldr.w	sl, [ip, #8]
 800ae50:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800ae54:	fa2f f99a 	sxtb16	r9, sl, ror #8
 800ae58:	ea4f 2631 	mov.w	r6, r1, ror #8
 800ae5c:	fa2f fa8a 	sxtb16	sl, sl
 800ae60:	fa2e f181 	sxtab16	r1, lr, r1
 800ae64:	fa2e f686 	sxtab16	r6, lr, r6
 800ae68:	fb21 310a 	smlad	r1, r1, sl, r3
 800ae6c:	fb26 1109 	smlad	r1, r6, r9, r1
 800ae70:	f8dc a00c 	ldr.w	sl, [ip, #12]
 800ae74:	f108 0810 	add.w	r8, r8, #16
 800ae78:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800ae7c:	f10c 0c10 	add.w	ip, ip, #16
 800ae80:	fa2f f99a 	sxtb16	r9, sl, ror #8
 800ae84:	ea4f 2633 	mov.w	r6, r3, ror #8
 800ae88:	fa2f fa8a 	sxtb16	sl, sl
 800ae8c:	fa2e f383 	sxtab16	r3, lr, r3
 800ae90:	fa2e f686 	sxtab16	r6, lr, r6
 800ae94:	fb23 130a 	smlad	r3, r3, sl, r1
 800ae98:	fb26 3309 	smlad	r3, r6, r9, r3
 800ae9c:	4562      	cmp	r2, ip
 800ae9e:	d1b1      	bne.n	800ae04 <st_sssa8_fully_connected+0x15c>
 800aea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aea2:	4410      	add	r0, r2
 800aea4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aea6:	0116      	lsls	r6, r2, #4
 800aea8:	45b3      	cmp	fp, r6
 800aeaa:	dd0d      	ble.n	800aec8 <st_sssa8_fully_connected+0x220>
 800aeac:	ebab 0206 	sub.w	r2, fp, r6
 800aeb0:	b224      	sxth	r4, r4
 800aeb2:	4462      	add	r2, ip
 800aeb4:	f91c 6b01 	ldrsb.w	r6, [ip], #1
 800aeb8:	f910 1b01 	ldrsb.w	r1, [r0], #1
 800aebc:	4594      	cmp	ip, r2
 800aebe:	eba1 0104 	sub.w	r1, r1, r4
 800aec2:	fb11 3306 	smlabb	r3, r1, r6, r3
 800aec6:	d1f5      	bne.n	800aeb4 <st_sssa8_fully_connected+0x20c>
 800aec8:	2d15      	cmp	r5, #21
 800aeca:	dd24      	ble.n	800af16 <st_sssa8_fully_connected+0x26e>
 800aecc:	3d02      	subs	r5, #2
 800aece:	2201      	movs	r2, #1
 800aed0:	9907      	ldr	r1, [sp, #28]
 800aed2:	40aa      	lsls	r2, r5
 800aed4:	fb53 2301 	smmla	r3, r3, r1, r2
 800aed8:	9a08      	ldr	r2, [sp, #32]
 800aeda:	4113      	asrs	r3, r2
 800aedc:	443b      	add	r3, r7
 800aede:	f303 0307 	ssat	r3, #8, r3
 800aee2:	2000      	movs	r0, #0
 800aee4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800aee6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aee8:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]
 800aeec:	b00d      	add	sp, #52	; 0x34
 800aeee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef2:	3d02      	subs	r5, #2
 800aef4:	2201      	movs	r2, #1
 800aef6:	9907      	ldr	r1, [sp, #28]
 800aef8:	40aa      	lsls	r2, r5
 800aefa:	fb53 2301 	smmla	r3, r3, r1, r2
 800aefe:	9a08      	ldr	r2, [sp, #32]
 800af00:	4113      	asrs	r3, r2
 800af02:	443b      	add	r3, r7
 800af04:	f303 0307 	ssat	r3, #8, r3
 800af08:	2000      	movs	r0, #0
 800af0a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800af0c:	f802 3014 	strb.w	r3, [r2, r4, lsl #1]
 800af10:	b00d      	add	sp, #52	; 0x34
 800af12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af16:	2d00      	cmp	r5, #0
 800af18:	dd1a      	ble.n	800af50 <st_sssa8_fully_connected+0x2a8>
 800af1a:	9a07      	ldr	r2, [sp, #28]
 800af1c:	005b      	lsls	r3, r3, #1
 800af1e:	fb53 7302 	smmla	r3, r3, r2, r7
 800af22:	412b      	asrs	r3, r5
 800af24:	f303 0307 	ssat	r3, #8, r3
 800af28:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800af2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af2c:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]
 800af30:	e737      	b.n	800ada2 <st_sssa8_fully_connected+0xfa>
 800af32:	f1c5 0501 	rsb	r5, r5, #1
 800af36:	40ab      	lsls	r3, r5
 800af38:	f303 031f 	ssat	r3, #32, r3
 800af3c:	9a07      	ldr	r2, [sp, #28]
 800af3e:	fb53 f312 	smmulr	r3, r3, r2
 800af42:	443b      	add	r3, r7
 800af44:	f303 0307 	ssat	r3, #8, r3
 800af48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800af4a:	f802 3014 	strb.w	r3, [r2, r4, lsl #1]
 800af4e:	e728      	b.n	800ada2 <st_sssa8_fully_connected+0xfa>
 800af50:	f1c5 0501 	rsb	r5, r5, #1
 800af54:	40ab      	lsls	r3, r5
 800af56:	f303 031f 	ssat	r3, #32, r3
 800af5a:	9a07      	ldr	r2, [sp, #28]
 800af5c:	fb53 f312 	smmulr	r3, r3, r2
 800af60:	e7bc      	b.n	800aedc <st_sssa8_fully_connected+0x234>
 800af62:	46f1      	mov	r9, lr
 800af64:	e6f6      	b.n	800ad54 <st_sssa8_fully_connected+0xac>
 800af66:	bf00      	nop

0800af68 <st_int8_fill>:
 800af68:	0203      	lsls	r3, r0, #8
 800af6a:	468c      	mov	ip, r1
 800af6c:	b510      	push	{r4, lr}
 800af6e:	b2c4      	uxtb	r4, r0
 800af70:	b29b      	uxth	r3, r3
 800af72:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 800af76:	431c      	orrs	r4, r3
 800af78:	0403      	lsls	r3, r0, #16
 800af7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af7e:	431c      	orrs	r4, r3
 800af80:	078b      	lsls	r3, r1, #30
 800af82:	d007      	beq.n	800af94 <st_int8_fill+0x2c>
 800af84:	b3a2      	cbz	r2, 800aff0 <st_int8_fill+0x88>
 800af86:	f80c 0b01 	strb.w	r0, [ip], #1
 800af8a:	f01c 0f03 	tst.w	ip, #3
 800af8e:	f102 32ff 	add.w	r2, r2, #4294967295
 800af92:	d1f7      	bne.n	800af84 <st_int8_fill+0x1c>
 800af94:	0911      	lsrs	r1, r2, #4
 800af96:	d041      	beq.n	800b01c <st_int8_fill+0xb4>
 800af98:	1e4b      	subs	r3, r1, #1
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d929      	bls.n	800aff2 <st_int8_fill+0x8a>
 800af9e:	f01c 0f07 	tst.w	ip, #7
 800afa2:	d126      	bne.n	800aff2 <st_int8_fill+0x8a>
 800afa4:	f10c 0310 	add.w	r3, ip, #16
 800afa8:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 800afac:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800afb0:	e943 4404 	strd	r4, r4, [r3, #-16]
 800afb4:	e943 4402 	strd	r4, r4, [r3, #-8]
 800afb8:	3310      	adds	r3, #16
 800afba:	428b      	cmp	r3, r1
 800afbc:	d1f8      	bne.n	800afb0 <st_int8_fill+0x48>
 800afbe:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800afc2:	44f4      	add	ip, lr
 800afc4:	f002 0203 	and.w	r2, r2, #3
 800afc8:	b15b      	cbz	r3, 800afe2 <st_int8_fill+0x7a>
 800afca:	1e59      	subs	r1, r3, #1
 800afcc:	f8cc 4000 	str.w	r4, [ip]
 800afd0:	d005      	beq.n	800afde <st_int8_fill+0x76>
 800afd2:	2901      	cmp	r1, #1
 800afd4:	f8cc 4004 	str.w	r4, [ip, #4]
 800afd8:	bf18      	it	ne
 800afda:	f8cc 4008 	strne.w	r4, [ip, #8]
 800afde:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 800afe2:	b12a      	cbz	r2, 800aff0 <st_int8_fill+0x88>
 800afe4:	4601      	mov	r1, r0
 800afe6:	4660      	mov	r0, ip
 800afe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afec:	f003 bfef 	b.w	800efce <memset>
 800aff0:	bd10      	pop	{r4, pc}
 800aff2:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 800aff6:	4663      	mov	r3, ip
 800aff8:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 800affc:	601c      	str	r4, [r3, #0]
 800affe:	3310      	adds	r3, #16
 800b000:	f843 4c0c 	str.w	r4, [r3, #-12]
 800b004:	f843 4c08 	str.w	r4, [r3, #-8]
 800b008:	f843 4c04 	str.w	r4, [r3, #-4]
 800b00c:	4299      	cmp	r1, r3
 800b00e:	d1f5      	bne.n	800affc <st_int8_fill+0x94>
 800b010:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800b014:	44f4      	add	ip, lr
 800b016:	f002 0203 	and.w	r2, r2, #3
 800b01a:	e7d5      	b.n	800afc8 <st_int8_fill+0x60>
 800b01c:	0893      	lsrs	r3, r2, #2
 800b01e:	f002 0203 	and.w	r2, r2, #3
 800b022:	e7d1      	b.n	800afc8 <st_int8_fill+0x60>

0800b024 <st_int8_copy>:
 800b024:	4288      	cmp	r0, r1
 800b026:	d010      	beq.n	800b04a <st_int8_copy+0x26>
 800b028:	b17a      	cbz	r2, 800b04a <st_int8_copy+0x26>
 800b02a:	4288      	cmp	r0, r1
 800b02c:	eb00 0302 	add.w	r3, r0, r2
 800b030:	d20c      	bcs.n	800b04c <st_int8_copy+0x28>
 800b032:	428b      	cmp	r3, r1
 800b034:	d90a      	bls.n	800b04c <st_int8_copy+0x28>
 800b036:	4283      	cmp	r3, r0
 800b038:	440a      	add	r2, r1
 800b03a:	d906      	bls.n	800b04a <st_int8_copy+0x26>
 800b03c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800b040:	4283      	cmp	r3, r0
 800b042:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800b046:	d1f9      	bne.n	800b03c <st_int8_copy+0x18>
 800b048:	4770      	bx	lr
 800b04a:	4770      	bx	lr
 800b04c:	078b      	lsls	r3, r1, #30
 800b04e:	d102      	bne.n	800b056 <st_int8_copy+0x32>
 800b050:	e008      	b.n	800b064 <st_int8_copy+0x40>
 800b052:	2a00      	cmp	r2, #0
 800b054:	d04c      	beq.n	800b0f0 <st_int8_copy+0xcc>
 800b056:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800b05a:	3a01      	subs	r2, #1
 800b05c:	f801 3b01 	strb.w	r3, [r1], #1
 800b060:	078b      	lsls	r3, r1, #30
 800b062:	d1f6      	bne.n	800b052 <st_int8_copy+0x2e>
 800b064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b068:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800b06c:	d05d      	beq.n	800b12a <st_int8_copy+0x106>
 800b06e:	ea41 0300 	orr.w	r3, r1, r0
 800b072:	075b      	lsls	r3, r3, #29
 800b074:	d13d      	bne.n	800b0f2 <st_int8_copy+0xce>
 800b076:	f1be 0f01 	cmp.w	lr, #1
 800b07a:	d03a      	beq.n	800b0f2 <st_int8_copy+0xce>
 800b07c:	f100 0310 	add.w	r3, r0, #16
 800b080:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800b084:	f101 0c10 	add.w	ip, r1, #16
 800b088:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800b08c:	3310      	adds	r3, #16
 800b08e:	f10c 0c10 	add.w	ip, ip, #16
 800b092:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 800b096:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 800b09a:	4573      	cmp	r3, lr
 800b09c:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 800b0a0:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 800b0a4:	d1f2      	bne.n	800b08c <st_int8_copy+0x68>
 800b0a6:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800b0aa:	4421      	add	r1, r4
 800b0ac:	4420      	add	r0, r4
 800b0ae:	f002 0203 	and.w	r2, r2, #3
 800b0b2:	b16b      	cbz	r3, 800b0d0 <st_int8_copy+0xac>
 800b0b4:	6804      	ldr	r4, [r0, #0]
 800b0b6:	600c      	str	r4, [r1, #0]
 800b0b8:	1e5c      	subs	r4, r3, #1
 800b0ba:	d005      	beq.n	800b0c8 <st_int8_copy+0xa4>
 800b0bc:	6845      	ldr	r5, [r0, #4]
 800b0be:	2c01      	cmp	r4, #1
 800b0c0:	604d      	str	r5, [r1, #4]
 800b0c2:	d001      	beq.n	800b0c8 <st_int8_copy+0xa4>
 800b0c4:	6884      	ldr	r4, [r0, #8]
 800b0c6:	608c      	str	r4, [r1, #8]
 800b0c8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800b0cc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800b0d0:	b162      	cbz	r2, 800b0ec <st_int8_copy+0xc8>
 800b0d2:	f990 3000 	ldrsb.w	r3, [r0]
 800b0d6:	3a01      	subs	r2, #1
 800b0d8:	700b      	strb	r3, [r1, #0]
 800b0da:	d007      	beq.n	800b0ec <st_int8_copy+0xc8>
 800b0dc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b0e0:	2a01      	cmp	r2, #1
 800b0e2:	704b      	strb	r3, [r1, #1]
 800b0e4:	d002      	beq.n	800b0ec <st_int8_copy+0xc8>
 800b0e6:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b0ea:	708b      	strb	r3, [r1, #2]
 800b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f0:	4770      	bx	lr
 800b0f2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800b0fc:	4684      	mov	ip, r0
 800b0fe:	f8dc 8000 	ldr.w	r8, [ip]
 800b102:	3310      	adds	r3, #16
 800b104:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800b108:	f10c 0c10 	add.w	ip, ip, #16
 800b10c:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800b110:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 800b114:	f843 8c10 	str.w	r8, [r3, #-16]
 800b118:	f843 7c0c 	str.w	r7, [r3, #-12]
 800b11c:	f843 6c08 	str.w	r6, [r3, #-8]
 800b120:	f843 5c04 	str.w	r5, [r3, #-4]
 800b124:	459e      	cmp	lr, r3
 800b126:	d1ea      	bne.n	800b0fe <st_int8_copy+0xda>
 800b128:	e7bd      	b.n	800b0a6 <st_int8_copy+0x82>
 800b12a:	0893      	lsrs	r3, r2, #2
 800b12c:	f002 0203 	and.w	r2, r2, #3
 800b130:	e7bf      	b.n	800b0b2 <st_int8_copy+0x8e>
 800b132:	bf00      	nop

0800b134 <st_int8_reordered_no_shift_zero>:
 800b134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b136:	0897      	lsrs	r7, r2, #2
 800b138:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800b13c:	d02d      	beq.n	800b19a <st_int8_reordered_no_shift_zero+0x66>
 800b13e:	eb00 0587 	add.w	r5, r0, r7, lsl #2
 800b142:	468e      	mov	lr, r1
 800b144:	f850 cb04 	ldr.w	ip, [r0], #4
 800b148:	fa2f f49c 	sxtb16	r4, ip, ror #8
 800b14c:	fad4 f403 	ssub16	r4, r4, r3
 800b150:	fa2f fc8c 	sxtb16	ip, ip
 800b154:	fadc fc03 	ssub16	ip, ip, r3
 800b158:	42a8      	cmp	r0, r5
 800b15a:	f8ce c000 	str.w	ip, [lr]
 800b15e:	f8ce 4004 	str.w	r4, [lr, #4]
 800b162:	f10e 0e08 	add.w	lr, lr, #8
 800b166:	d1ed      	bne.n	800b144 <st_int8_reordered_no_shift_zero+0x10>
 800b168:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800b16c:	f012 0203 	ands.w	r2, r2, #3
 800b170:	d012      	beq.n	800b198 <st_int8_reordered_no_shift_zero+0x64>
 800b172:	f995 0000 	ldrsb.w	r0, [r5]
 800b176:	b273      	sxtb	r3, r6
 800b178:	3a01      	subs	r2, #1
 800b17a:	eba0 0003 	sub.w	r0, r0, r3
 800b17e:	8008      	strh	r0, [r1, #0]
 800b180:	d00a      	beq.n	800b198 <st_int8_reordered_no_shift_zero+0x64>
 800b182:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800b186:	2a01      	cmp	r2, #1
 800b188:	eba0 0003 	sub.w	r0, r0, r3
 800b18c:	8048      	strh	r0, [r1, #2]
 800b18e:	d003      	beq.n	800b198 <st_int8_reordered_no_shift_zero+0x64>
 800b190:	f995 2002 	ldrsb.w	r2, [r5, #2]
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	808b      	strh	r3, [r1, #4]
 800b198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b19a:	4605      	mov	r5, r0
 800b19c:	e7e6      	b.n	800b16c <st_int8_reordered_no_shift_zero+0x38>
 800b19e:	bf00      	nop

0800b1a0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	b093      	sub	sp, #76	; 0x4c
 800b1a6:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 800b1aa:	920a      	str	r2, [sp, #40]	; 0x28
 800b1ac:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 800b1b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1b2:	920d      	str	r2, [sp, #52]	; 0x34
 800b1b4:	0862      	lsrs	r2, r4, #1
 800b1b6:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
 800b1ba:	940c      	str	r4, [sp, #48]	; 0x30
 800b1bc:	9104      	str	r1, [sp, #16]
 800b1be:	930e      	str	r3, [sp, #56]	; 0x38
 800b1c0:	920b      	str	r2, [sp, #44]	; 0x2c
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f000 8184 	beq.w	800b4d0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x330>
 800b1c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b1ca:	b299      	uxth	r1, r3
 800b1cc:	4613      	mov	r3, r2
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f000 80d7 	beq.w	800b382 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e2>
 800b1d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	0897      	lsrs	r7, r2, #2
 800b1da:	f002 0203 	and.w	r2, r2, #3
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	9201      	str	r2, [sp, #4]
 800b1e2:	1c4a      	adds	r2, r1, #1
 800b1e4:	0049      	lsls	r1, r1, #1
 800b1e6:	9703      	str	r7, [sp, #12]
 800b1e8:	9105      	str	r1, [sp, #20]
 800b1ea:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800b1ec:	4411      	add	r1, r2
 800b1ee:	9102      	str	r1, [sp, #8]
 800b1f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b1f2:	f101 0210 	add.w	r2, r1, #16
 800b1f6:	f101 0c08 	add.w	ip, r1, #8
 800b1fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b1fe:	9a01      	ldr	r2, [sp, #4]
 800b200:	9306      	str	r3, [sp, #24]
 800b202:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b204:	f103 0e04 	add.w	lr, r3, #4
 800b208:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b20a:	f103 0508 	add.w	r5, r3, #8
 800b20e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b210:	f103 0408 	add.w	r4, r3, #8
 800b214:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b216:	1c5e      	adds	r6, r3, #1
 800b218:	013b      	lsls	r3, r7, #4
 800b21a:	9307      	str	r3, [sp, #28]
 800b21c:	9b04      	ldr	r3, [sp, #16]
 800b21e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b222:	9308      	str	r3, [sp, #32]
 800b224:	0093      	lsls	r3, r2, #2
 800b226:	9309      	str	r3, [sp, #36]	; 0x24
 800b228:	f85c 3c08 	ldr.w	r3, [ip, #-8]
 800b22c:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 800b230:	9311      	str	r3, [sp, #68]	; 0x44
 800b232:	9903      	ldr	r1, [sp, #12]
 800b234:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b236:	9211      	str	r2, [sp, #68]	; 0x44
 800b238:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b23a:	2900      	cmp	r1, #0
 800b23c:	f000 8146 	beq.w	800b4cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32c>
 800b240:	4688      	mov	r8, r1
 800b242:	9f04      	ldr	r7, [sp, #16]
 800b244:	4601      	mov	r1, r0
 800b246:	f8d7 9000 	ldr.w	r9, [r7]
 800b24a:	f8d1 a000 	ldr.w	sl, [r1]
 800b24e:	fb2a 3a09 	smlad	sl, sl, r9, r3
 800b252:	684b      	ldr	r3, [r1, #4]
 800b254:	fb23 2909 	smlad	r9, r3, r9, r2
 800b258:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800b25c:	3110      	adds	r1, #16
 800b25e:	f851 3c08 	ldr.w	r3, [r1, #-8]
 800b262:	3708      	adds	r7, #8
 800b264:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800b268:	fb23 a30b 	smlad	r3, r3, fp, sl
 800b26c:	fb22 920b 	smlad	r2, r2, fp, r9
 800b270:	f1b8 0801 	subs.w	r8, r8, #1
 800b274:	d1e7      	bne.n	800b246 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xa6>
 800b276:	9907      	ldr	r1, [sp, #28]
 800b278:	4408      	add	r0, r1
 800b27a:	9908      	ldr	r1, [sp, #32]
 800b27c:	9f01      	ldr	r7, [sp, #4]
 800b27e:	b31f      	cbz	r7, 800b2c8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x128>
 800b280:	f9b1 7000 	ldrsh.w	r7, [r1]
 800b284:	f8b0 8000 	ldrh.w	r8, [r0]
 800b288:	fb17 3308 	smlabb	r3, r7, r8, r3
 800b28c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 800b290:	fb18 2207 	smlabb	r2, r8, r7, r2
 800b294:	9f01      	ldr	r7, [sp, #4]
 800b296:	2f01      	cmp	r7, #1
 800b298:	d014      	beq.n	800b2c4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 800b29a:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 800b29e:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 800b2a2:	fb17 3308 	smlabb	r3, r7, r8, r3
 800b2a6:	f8b0 8006 	ldrh.w	r8, [r0, #6]
 800b2aa:	fb18 2207 	smlabb	r2, r8, r7, r2
 800b2ae:	9f01      	ldr	r7, [sp, #4]
 800b2b0:	2f02      	cmp	r7, #2
 800b2b2:	d007      	beq.n	800b2c4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x124>
 800b2b4:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800b2b8:	8907      	ldrh	r7, [r0, #8]
 800b2ba:	fb17 3301 	smlabb	r3, r7, r1, r3
 800b2be:	8947      	ldrh	r7, [r0, #10]
 800b2c0:	fb11 2207 	smlabb	r2, r1, r7, r2
 800b2c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2c6:	4408      	add	r0, r1
 800b2c8:	f93e 9c04 	ldrsh.w	r9, [lr, #-4]
 800b2cc:	f1b9 0f15 	cmp.w	r9, #21
 800b2d0:	f340 80af 	ble.w	800b432 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x292>
 800b2d4:	f109 38ff 	add.w	r8, r9, #4294967295
 800b2d8:	f1a9 0702 	sub.w	r7, r9, #2
 800b2dc:	2101      	movs	r1, #1
 800b2de:	fa01 f707 	lsl.w	r7, r1, r7
 800b2e2:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800b2e6:	fb53 7101 	smmla	r1, r3, r1, r7
 800b2ea:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800b2ee:	fa41 f108 	asr.w	r1, r1, r8
 800b2f2:	1f27      	subs	r7, r4, #4
 800b2f4:	f1a5 0804 	sub.w	r8, r5, #4
 800b2f8:	440b      	add	r3, r1
 800b2fa:	f1ae 0102 	sub.w	r1, lr, #2
 800b2fe:	f303 0307 	ssat	r3, #8, r3
 800b302:	b25b      	sxtb	r3, r3
 800b304:	f806 3c01 	strb.w	r3, [r6, #-1]
 800b308:	f9b1 1000 	ldrsh.w	r1, [r1]
 800b30c:	2915      	cmp	r1, #21
 800b30e:	f340 80ab 	ble.w	800b468 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2c8>
 800b312:	f8d8 3000 	ldr.w	r3, [r8]
 800b316:	f04f 0901 	mov.w	r9, #1
 800b31a:	f8d7 8000 	ldr.w	r8, [r7]
 800b31e:	1e8f      	subs	r7, r1, #2
 800b320:	3901      	subs	r1, #1
 800b322:	fa09 f707 	lsl.w	r7, r9, r7
 800b326:	fb52 7303 	smmla	r3, r2, r3, r7
 800b32a:	410b      	asrs	r3, r1
 800b32c:	4443      	add	r3, r8
 800b32e:	f303 0307 	ssat	r3, #8, r3
 800b332:	b25b      	sxtb	r3, r3
 800b334:	9a02      	ldr	r2, [sp, #8]
 800b336:	f10c 0c08 	add.w	ip, ip, #8
 800b33a:	f10e 0e04 	add.w	lr, lr, #4
 800b33e:	3508      	adds	r5, #8
 800b340:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b344:	3408      	adds	r4, #8
 800b346:	9b05      	ldr	r3, [sp, #20]
 800b348:	441a      	add	r2, r3
 800b34a:	441e      	add	r6, r3
 800b34c:	9b06      	ldr	r3, [sp, #24]
 800b34e:	9202      	str	r2, [sp, #8]
 800b350:	459c      	cmp	ip, r3
 800b352:	f47f af69 	bne.w	800b228 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x88>
 800b356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b358:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b35a:	9905      	ldr	r1, [sp, #20]
 800b35c:	fb03 2201 	mla	r2, r3, r1, r2
 800b360:	9223      	str	r2, [sp, #140]	; 0x8c
 800b362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b364:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b368:	920a      	str	r2, [sp, #40]	; 0x28
 800b36a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b36c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b370:	921f      	str	r2, [sp, #124]	; 0x7c
 800b372:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b374:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b378:	9220      	str	r2, [sp, #128]	; 0x80
 800b37a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b37c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b380:	9321      	str	r3, [sp, #132]	; 0x84
 800b382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b384:	07db      	lsls	r3, r3, #31
 800b386:	d546      	bpl.n	800b416 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 800b388:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b38c:	0896      	lsrs	r6, r2, #2
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f000 80cd 	beq.w	800b52e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x38e>
 800b394:	00f7      	lsls	r7, r6, #3
 800b396:	9904      	ldr	r1, [sp, #16]
 800b398:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800b39c:	6804      	ldr	r4, [r0, #0]
 800b39e:	3008      	adds	r0, #8
 800b3a0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b3a4:	680d      	ldr	r5, [r1, #0]
 800b3a6:	fb24 3305 	smlad	r3, r4, r5, r3
 800b3aa:	684c      	ldr	r4, [r1, #4]
 800b3ac:	3108      	adds	r1, #8
 800b3ae:	fb22 3304 	smlad	r3, r2, r4, r3
 800b3b2:	42b0      	cmp	r0, r6
 800b3b4:	d1f2      	bne.n	800b39c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1fc>
 800b3b6:	9a04      	ldr	r2, [sp, #16]
 800b3b8:	443a      	add	r2, r7
 800b3ba:	9204      	str	r2, [sp, #16]
 800b3bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3be:	f012 0203 	ands.w	r2, r2, #3
 800b3c2:	d011      	beq.n	800b3e8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 800b3c4:	3a01      	subs	r2, #1
 800b3c6:	9c04      	ldr	r4, [sp, #16]
 800b3c8:	8831      	ldrh	r1, [r6, #0]
 800b3ca:	8820      	ldrh	r0, [r4, #0]
 800b3cc:	b292      	uxth	r2, r2
 800b3ce:	fb10 3301 	smlabb	r3, r0, r1, r3
 800b3d2:	b14a      	cbz	r2, 800b3e8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 800b3d4:	8860      	ldrh	r0, [r4, #2]
 800b3d6:	2a01      	cmp	r2, #1
 800b3d8:	8871      	ldrh	r1, [r6, #2]
 800b3da:	fb10 3301 	smlabb	r3, r0, r1, r3
 800b3de:	d003      	beq.n	800b3e8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x248>
 800b3e0:	88b1      	ldrh	r1, [r6, #4]
 800b3e2:	88a2      	ldrh	r2, [r4, #4]
 800b3e4:	fb11 3302 	smlabb	r3, r1, r2, r3
 800b3e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b3ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b3ee:	2a15      	cmp	r2, #21
 800b3f0:	dd79      	ble.n	800b4e6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x346>
 800b3f2:	9821      	ldr	r0, [sp, #132]	; 0x84
 800b3f4:	1e95      	subs	r5, r2, #2
 800b3f6:	9920      	ldr	r1, [sp, #128]	; 0x80
 800b3f8:	3a01      	subs	r2, #1
 800b3fa:	6804      	ldr	r4, [r0, #0]
 800b3fc:	2001      	movs	r0, #1
 800b3fe:	6809      	ldr	r1, [r1, #0]
 800b400:	40a8      	lsls	r0, r5
 800b402:	fb53 0301 	smmla	r3, r3, r1, r0
 800b406:	4113      	asrs	r3, r2
 800b408:	4423      	add	r3, r4
 800b40a:	f303 0307 	ssat	r3, #8, r3
 800b40e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b410:	f802 3b01 	strb.w	r3, [r2], #1
 800b414:	9223      	str	r2, [sp, #140]	; 0x8c
 800b416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d05c      	beq.n	800b4d6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x336>
 800b41c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b41e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b420:	fb02 f303 	mul.w	r3, r2, r3
 800b424:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b426:	f1c3 0301 	rsb	r3, r3, #1
 800b42a:	18d0      	adds	r0, r2, r3
 800b42c:	b013      	add	sp, #76	; 0x4c
 800b42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b432:	f1b9 0f00 	cmp.w	r9, #0
 800b436:	dd24      	ble.n	800b482 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e2>
 800b438:	f855 1c08 	ldr.w	r1, [r5, #-8]
 800b43c:	005b      	lsls	r3, r3, #1
 800b43e:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800b442:	f1a5 0804 	sub.w	r8, r5, #4
 800b446:	fb53 7301 	smmla	r3, r3, r1, r7
 800b44a:	1f27      	subs	r7, r4, #4
 800b44c:	fa43 f309 	asr.w	r3, r3, r9
 800b450:	f1ae 0102 	sub.w	r1, lr, #2
 800b454:	f303 0307 	ssat	r3, #8, r3
 800b458:	b25b      	sxtb	r3, r3
 800b45a:	f806 3c01 	strb.w	r3, [r6, #-1]
 800b45e:	f9b1 1000 	ldrsh.w	r1, [r1]
 800b462:	2915      	cmp	r1, #21
 800b464:	f73f af55 	bgt.w	800b312 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x172>
 800b468:	2900      	cmp	r1, #0
 800b46a:	dd20      	ble.n	800b4ae <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x30e>
 800b46c:	0053      	lsls	r3, r2, #1
 800b46e:	683f      	ldr	r7, [r7, #0]
 800b470:	f8d8 2000 	ldr.w	r2, [r8]
 800b474:	fb53 7302 	smmla	r3, r3, r2, r7
 800b478:	410b      	asrs	r3, r1
 800b47a:	f303 0307 	ssat	r3, #8, r3
 800b47e:	b25b      	sxtb	r3, r3
 800b480:	e758      	b.n	800b334 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 800b482:	f1c9 0701 	rsb	r7, r9, #1
 800b486:	f1ae 0102 	sub.w	r1, lr, #2
 800b48a:	fa03 f707 	lsl.w	r7, r3, r7
 800b48e:	f307 071f 	ssat	r7, #32, r7
 800b492:	f1a5 0804 	sub.w	r8, r5, #4
 800b496:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800b49a:	fb57 f713 	smmulr	r7, r7, r3
 800b49e:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800b4a2:	443b      	add	r3, r7
 800b4a4:	1f27      	subs	r7, r4, #4
 800b4a6:	f303 0307 	ssat	r3, #8, r3
 800b4aa:	b25b      	sxtb	r3, r3
 800b4ac:	e72a      	b.n	800b304 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x164>
 800b4ae:	f1c1 0101 	rsb	r1, r1, #1
 800b4b2:	408a      	lsls	r2, r1
 800b4b4:	f302 021f 	ssat	r2, #32, r2
 800b4b8:	f8d8 3000 	ldr.w	r3, [r8]
 800b4bc:	fb52 f313 	smmulr	r3, r2, r3
 800b4c0:	683a      	ldr	r2, [r7, #0]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	f303 0307 	ssat	r3, #8, r3
 800b4c8:	b25b      	sxtb	r3, r3
 800b4ca:	e733      	b.n	800b334 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x194>
 800b4cc:	9904      	ldr	r1, [sp, #16]
 800b4ce:	e6d5      	b.n	800b27c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0xdc>
 800b4d0:	2101      	movs	r1, #1
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	e67b      	b.n	800b1ce <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e>
 800b4d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4da:	1a9b      	subs	r3, r3, r2
 800b4dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b4de:	18d0      	adds	r0, r2, r3
 800b4e0:	b013      	add	sp, #76	; 0x4c
 800b4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e6:	2a00      	cmp	r2, #0
 800b4e8:	dd0e      	ble.n	800b508 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x368>
 800b4ea:	9920      	ldr	r1, [sp, #128]	; 0x80
 800b4ec:	005b      	lsls	r3, r3, #1
 800b4ee:	9821      	ldr	r0, [sp, #132]	; 0x84
 800b4f0:	6809      	ldr	r1, [r1, #0]
 800b4f2:	6800      	ldr	r0, [r0, #0]
 800b4f4:	fb53 0301 	smmla	r3, r3, r1, r0
 800b4f8:	4113      	asrs	r3, r2
 800b4fa:	f303 0307 	ssat	r3, #8, r3
 800b4fe:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b500:	f802 3b01 	strb.w	r3, [r2], #1
 800b504:	9223      	str	r2, [sp, #140]	; 0x8c
 800b506:	e786      	b.n	800b416 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 800b508:	f1c2 0201 	rsb	r2, r2, #1
 800b50c:	4093      	lsls	r3, r2
 800b50e:	f303 031f 	ssat	r3, #32, r3
 800b512:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b514:	6812      	ldr	r2, [r2, #0]
 800b516:	fb53 f312 	smmulr	r3, r3, r2
 800b51a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b51c:	6812      	ldr	r2, [r2, #0]
 800b51e:	4413      	add	r3, r2
 800b520:	f303 0307 	ssat	r3, #8, r3
 800b524:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b526:	f802 3b01 	strb.w	r3, [r2], #1
 800b52a:	9223      	str	r2, [sp, #140]	; 0x8c
 800b52c:	e773      	b.n	800b416 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x276>
 800b52e:	4606      	mov	r6, r0
 800b530:	e744      	b.n	800b3bc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x21c>
 800b532:	bf00      	nop

0800b534 <weights_2channels_prefetch>:
 800b534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b538:	2b00      	cmp	r3, #0
 800b53a:	b087      	sub	sp, #28
 800b53c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800b540:	9302      	str	r3, [sp, #8]
 800b542:	f340 80e6 	ble.w	800b712 <weights_2channels_prefetch+0x1de>
 800b546:	f1a8 0310 	sub.w	r3, r8, #16
 800b54a:	f1a8 0403 	sub.w	r4, r8, #3
 800b54e:	f04f 0b00 	mov.w	fp, #0
 800b552:	091b      	lsrs	r3, r3, #4
 800b554:	9403      	str	r4, [sp, #12]
 800b556:	f1a8 0404 	sub.w	r4, r8, #4
 800b55a:	3301      	adds	r3, #1
 800b55c:	9405      	str	r4, [sp, #20]
 800b55e:	011c      	lsls	r4, r3, #4
 800b560:	019b      	lsls	r3, r3, #6
 800b562:	9400      	str	r4, [sp, #0]
 800b564:	9304      	str	r3, [sp, #16]
 800b566:	f1b8 0f0f 	cmp.w	r8, #15
 800b56a:	f340 80d7 	ble.w	800b71c <weights_2channels_prefetch+0x1e8>
 800b56e:	9b00      	ldr	r3, [sp, #0]
 800b570:	460d      	mov	r5, r1
 800b572:	18c6      	adds	r6, r0, r3
 800b574:	4613      	mov	r3, r2
 800b576:	6804      	ldr	r4, [r0, #0]
 800b578:	3010      	adds	r0, #16
 800b57a:	682f      	ldr	r7, [r5, #0]
 800b57c:	3340      	adds	r3, #64	; 0x40
 800b57e:	fa2f fc84 	sxtb16	ip, r4
 800b582:	3510      	adds	r5, #16
 800b584:	f843 cc40 	str.w	ip, [r3, #-64]
 800b588:	ea4f 2434 	mov.w	r4, r4, ror #8
 800b58c:	42b0      	cmp	r0, r6
 800b58e:	fa2f f484 	sxtb16	r4, r4
 800b592:	f843 4c3c 	str.w	r4, [r3, #-60]
 800b596:	ea4f 2437 	mov.w	r4, r7, ror #8
 800b59a:	fa2f f787 	sxtb16	r7, r7
 800b59e:	fa2f f484 	sxtb16	r4, r4
 800b5a2:	f843 7c38 	str.w	r7, [r3, #-56]
 800b5a6:	f843 4c34 	str.w	r4, [r3, #-52]
 800b5aa:	f855 4c0c 	ldr.w	r4, [r5, #-12]
 800b5ae:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 800b5b2:	ea4f 2c34 	mov.w	ip, r4, ror #8
 800b5b6:	fa2f f484 	sxtb16	r4, r4
 800b5ba:	fa2f fc8c 	sxtb16	ip, ip
 800b5be:	f843 4c28 	str.w	r4, [r3, #-40]
 800b5c2:	f843 cc24 	str.w	ip, [r3, #-36]
 800b5c6:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800b5ca:	fa2f f787 	sxtb16	r7, r7
 800b5ce:	f843 7c30 	str.w	r7, [r3, #-48]
 800b5d2:	fa2f f78c 	sxtb16	r7, ip
 800b5d6:	f843 7c2c 	str.w	r7, [r3, #-44]
 800b5da:	f850 7c08 	ldr.w	r7, [r0, #-8]
 800b5de:	f855 4c08 	ldr.w	r4, [r5, #-8]
 800b5e2:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800b5e6:	fa2f f787 	sxtb16	r7, r7
 800b5ea:	fa2f fc8c 	sxtb16	ip, ip
 800b5ee:	f843 7c20 	str.w	r7, [r3, #-32]
 800b5f2:	ea4f 2734 	mov.w	r7, r4, ror #8
 800b5f6:	f843 cc1c 	str.w	ip, [r3, #-28]
 800b5fa:	fa2f f787 	sxtb16	r7, r7
 800b5fe:	fa2f f484 	sxtb16	r4, r4
 800b602:	f843 7c14 	str.w	r7, [r3, #-20]
 800b606:	f843 4c18 	str.w	r4, [r3, #-24]
 800b60a:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800b60e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b612:	ea4f 2c37 	mov.w	ip, r7, ror #8
 800b616:	fa2f f787 	sxtb16	r7, r7
 800b61a:	fa2f fc8c 	sxtb16	ip, ip
 800b61e:	f843 7c10 	str.w	r7, [r3, #-16]
 800b622:	ea4f 2734 	mov.w	r7, r4, ror #8
 800b626:	f843 cc0c 	str.w	ip, [r3, #-12]
 800b62a:	fa2f f787 	sxtb16	r7, r7
 800b62e:	fa2f f484 	sxtb16	r4, r4
 800b632:	f843 7c04 	str.w	r7, [r3, #-4]
 800b636:	f843 4c08 	str.w	r4, [r3, #-8]
 800b63a:	d19c      	bne.n	800b576 <weights_2channels_prefetch+0x42>
 800b63c:	9b04      	ldr	r3, [sp, #16]
 800b63e:	441a      	add	r2, r3
 800b640:	9b00      	ldr	r3, [sp, #0]
 800b642:	4419      	add	r1, r3
 800b644:	469e      	mov	lr, r3
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	4573      	cmp	r3, lr
 800b64a:	dd65      	ble.n	800b718 <weights_2channels_prefetch+0x1e4>
 800b64c:	9b05      	ldr	r3, [sp, #20]
 800b64e:	4614      	mov	r4, r2
 800b650:	460f      	mov	r7, r1
 800b652:	eba3 090e 	sub.w	r9, r3, lr
 800b656:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800b65a:	f109 0a01 	add.w	sl, r9, #1
 800b65e:	ea4f 038a 	mov.w	r3, sl, lsl #2
 800b662:	eb06 008a 	add.w	r0, r6, sl, lsl #2
 800b666:	9301      	str	r3, [sp, #4]
 800b668:	f856 3b04 	ldr.w	r3, [r6], #4
 800b66c:	3410      	adds	r4, #16
 800b66e:	f857 5b04 	ldr.w	r5, [r7], #4
 800b672:	fa2f fc83 	sxtb16	ip, r3
 800b676:	4286      	cmp	r6, r0
 800b678:	ea4f 2333 	mov.w	r3, r3, ror #8
 800b67c:	fa2f f383 	sxtb16	r3, r3
 800b680:	f844 3c0c 	str.w	r3, [r4, #-12]
 800b684:	ea4f 2335 	mov.w	r3, r5, ror #8
 800b688:	fa2f f585 	sxtb16	r5, r5
 800b68c:	f844 cc10 	str.w	ip, [r4, #-16]
 800b690:	f844 5c08 	str.w	r5, [r4, #-8]
 800b694:	fa2f f383 	sxtb16	r3, r3
 800b698:	f844 3c04 	str.w	r3, [r4, #-4]
 800b69c:	d1e4      	bne.n	800b668 <weights_2channels_prefetch+0x134>
 800b69e:	9b01      	ldr	r3, [sp, #4]
 800b6a0:	f10e 0e04 	add.w	lr, lr, #4
 800b6a4:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 800b6a8:	4419      	add	r1, r3
 800b6aa:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 800b6ae:	45f0      	cmp	r8, lr
 800b6b0:	dd29      	ble.n	800b706 <weights_2channels_prefetch+0x1d2>
 800b6b2:	f990 3000 	ldrsb.w	r3, [r0]
 800b6b6:	8013      	strh	r3, [r2, #0]
 800b6b8:	f991 3000 	ldrsb.w	r3, [r1]
 800b6bc:	8053      	strh	r3, [r2, #2]
 800b6be:	f10e 0301 	add.w	r3, lr, #1
 800b6c2:	4598      	cmp	r8, r3
 800b6c4:	dd19      	ble.n	800b6fa <weights_2channels_prefetch+0x1c6>
 800b6c6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b6ca:	8093      	strh	r3, [r2, #4]
 800b6cc:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800b6d0:	80d3      	strh	r3, [r2, #6]
 800b6d2:	f10e 0302 	add.w	r3, lr, #2
 800b6d6:	4598      	cmp	r8, r3
 800b6d8:	dd0f      	ble.n	800b6fa <weights_2channels_prefetch+0x1c6>
 800b6da:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b6de:	8113      	strh	r3, [r2, #8]
 800b6e0:	f10e 0303 	add.w	r3, lr, #3
 800b6e4:	f991 4002 	ldrsb.w	r4, [r1, #2]
 800b6e8:	4598      	cmp	r8, r3
 800b6ea:	8154      	strh	r4, [r2, #10]
 800b6ec:	dd05      	ble.n	800b6fa <weights_2channels_prefetch+0x1c6>
 800b6ee:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800b6f2:	8193      	strh	r3, [r2, #12]
 800b6f4:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800b6f8:	81d3      	strh	r3, [r2, #14]
 800b6fa:	eba8 0e0e 	sub.w	lr, r8, lr
 800b6fe:	4470      	add	r0, lr
 800b700:	4471      	add	r1, lr
 800b702:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 800b706:	f10b 0b01 	add.w	fp, fp, #1
 800b70a:	9b02      	ldr	r3, [sp, #8]
 800b70c:	455b      	cmp	r3, fp
 800b70e:	f47f af2a 	bne.w	800b566 <weights_2channels_prefetch+0x32>
 800b712:	b007      	add	sp, #28
 800b714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b718:	4630      	mov	r0, r6
 800b71a:	e7c8      	b.n	800b6ae <weights_2channels_prefetch+0x17a>
 800b71c:	4606      	mov	r6, r0
 800b71e:	f04f 0e00 	mov.w	lr, #0
 800b722:	e790      	b.n	800b646 <weights_2channels_prefetch+0x112>

0800b724 <st_sssa8_ch_fullW_prefetch>:
 800b724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b728:	b087      	sub	sp, #28
 800b72a:	461c      	mov	r4, r3
 800b72c:	4680      	mov	r8, r0
 800b72e:	4613      	mov	r3, r2
 800b730:	104f      	asrs	r7, r1, #1
 800b732:	4620      	mov	r0, r4
 800b734:	9103      	str	r1, [sp, #12]
 800b736:	9704      	str	r7, [sp, #16]
 800b738:	e9dd 2a10 	ldrd	r2, sl, [sp, #64]	; 0x40
 800b73c:	eb08 0402 	add.w	r4, r8, r2
 800b740:	d020      	beq.n	800b784 <st_sssa8_ch_fullW_prefetch+0x60>
 800b742:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b744:	4646      	mov	r6, r8
 800b746:	4655      	mov	r5, sl
 800b748:	f8cd 8014 	str.w	r8, [sp, #20]
 800b74c:	ea4f 0942 	mov.w	r9, r2, lsl #1
 800b750:	4680      	mov	r8, r0
 800b752:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800b756:	469a      	mov	sl, r3
 800b758:	462a      	mov	r2, r5
 800b75a:	4621      	mov	r1, r4
 800b75c:	4630      	mov	r0, r6
 800b75e:	4653      	mov	r3, sl
 800b760:	f8cd 8000 	str.w	r8, [sp]
 800b764:	445d      	add	r5, fp
 800b766:	f7ff fee5 	bl	800b534 <weights_2channels_prefetch>
 800b76a:	3f01      	subs	r7, #1
 800b76c:	444c      	add	r4, r9
 800b76e:	444e      	add	r6, r9
 800b770:	d1f2      	bne.n	800b758 <st_sssa8_ch_fullW_prefetch+0x34>
 800b772:	9b04      	ldr	r3, [sp, #16]
 800b774:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b778:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800b77c:	fb03 8809 	mla	r8, r3, r9, r8
 800b780:	fb03 aa0b 	mla	sl, r3, fp, sl
 800b784:	9b03      	ldr	r3, [sp, #12]
 800b786:	07db      	lsls	r3, r3, #31
 800b788:	d509      	bpl.n	800b79e <st_sssa8_ch_fullW_prefetch+0x7a>
 800b78a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	dd06      	ble.n	800b79e <st_sssa8_ch_fullW_prefetch+0x7a>
 800b790:	4443      	add	r3, r8
 800b792:	f918 2b01 	ldrsb.w	r2, [r8], #1
 800b796:	4543      	cmp	r3, r8
 800b798:	f82a 2b02 	strh.w	r2, [sl], #2
 800b79c:	d1f9      	bne.n	800b792 <st_sssa8_ch_fullW_prefetch+0x6e>
 800b79e:	b007      	add	sp, #28
 800b7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b7b0 <st_sssa8_dense_loop>:
 800b7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b4:	b083      	sub	sp, #12
 800b7b6:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800b7ba:	f1bb 0f00 	cmp.w	fp, #0
 800b7be:	bfcc      	ite	gt
 800b7c0:	f04f 0c00 	movgt.w	ip, #0
 800b7c4:	f04f 3cff 	movle.w	ip, #4294967295
 800b7c8:	f1bb 0f15 	cmp.w	fp, #21
 800b7cc:	bfc8      	it	gt
 800b7ce:	f04f 0c01 	movgt.w	ip, #1
 800b7d2:	f8cd c000 	str.w	ip, [sp]
 800b7d6:	f1a0 0404 	sub.w	r4, r0, #4
 800b7da:	9401      	str	r4, [sp, #4]
 800b7dc:	4692      	mov	sl, r2
 800b7de:	4699      	mov	r9, r3
 800b7e0:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800b7e4:	460f      	mov	r7, r1
 800b7e6:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800b7ea:	eb0b 0244 	add.w	r2, fp, r4, lsl #1
 800b7ee:	9202      	str	r2, [sp, #8]
 800b7f0:	2c00      	cmp	r4, #0
 800b7f2:	f000 80ea 	beq.w	800b9ca <Exit>
 800b7f6:	f1a7 0704 	sub.w	r7, r7, #4

0800b7fa <MainLoop>:
 800b7fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b7fe:	f8d9 e000 	ldr.w	lr, [r9]
 800b802:	f8d9 c004 	ldr.w	ip, [r9, #4]
 800b806:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b80a:	2e00      	cmp	r6, #0
 800b80c:	f109 0908 	add.w	r9, r9, #8
 800b810:	d061      	beq.n	800b8d6 <NextLoop4>

0800b812 <Loop16>:
 800b812:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800b816:	f858 4f04 	ldr.w	r4, [r8, #4]!
 800b81a:	fa2f f290 	sxtb16	r2, r0, ror #8
 800b81e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800b822:	fa2f f080 	sxtb16	r0, r0
 800b826:	f858 5f04 	ldr.w	r5, [r8, #4]!
 800b82a:	fa2f f391 	sxtb16	r3, r1, ror #8
 800b82e:	fb20 ee04 	smlad	lr, r0, r4, lr
 800b832:	fa2f f181 	sxtb16	r1, r1
 800b836:	fb23 cc05 	smlad	ip, r3, r5, ip
 800b83a:	fb22 ee05 	smlad	lr, r2, r5, lr
 800b83e:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800b842:	fb21 cc04 	smlad	ip, r1, r4, ip
 800b846:	f858 4f04 	ldr.w	r4, [r8, #4]!
 800b84a:	fa2f f290 	sxtb16	r2, r0, ror #8
 800b84e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800b852:	fa2f f080 	sxtb16	r0, r0
 800b856:	f858 5f04 	ldr.w	r5, [r8, #4]!
 800b85a:	fa2f f391 	sxtb16	r3, r1, ror #8
 800b85e:	fb20 ee04 	smlad	lr, r0, r4, lr
 800b862:	fa2f f181 	sxtb16	r1, r1
 800b866:	fb23 cc05 	smlad	ip, r3, r5, ip
 800b86a:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800b86e:	fb22 ee05 	smlad	lr, r2, r5, lr
 800b872:	fb21 cc04 	smlad	ip, r1, r4, ip
 800b876:	f858 4f04 	ldr.w	r4, [r8, #4]!
 800b87a:	fa2f f290 	sxtb16	r2, r0, ror #8
 800b87e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800b882:	fa2f f080 	sxtb16	r0, r0
 800b886:	f858 5f04 	ldr.w	r5, [r8, #4]!
 800b88a:	fa2f f391 	sxtb16	r3, r1, ror #8
 800b88e:	fb20 ee04 	smlad	lr, r0, r4, lr
 800b892:	fa2f f181 	sxtb16	r1, r1
 800b896:	fb23 cc05 	smlad	ip, r3, r5, ip
 800b89a:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800b89e:	fb22 ee05 	smlad	lr, r2, r5, lr
 800b8a2:	fb21 cc04 	smlad	ip, r1, r4, ip
 800b8a6:	f858 4f04 	ldr.w	r4, [r8, #4]!
 800b8aa:	fa2f f290 	sxtb16	r2, r0, ror #8
 800b8ae:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800b8b2:	fa2f f080 	sxtb16	r0, r0
 800b8b6:	f858 5f04 	ldr.w	r5, [r8, #4]!
 800b8ba:	fa2f f391 	sxtb16	r3, r1, ror #8
 800b8be:	fb20 ee04 	smlad	lr, r0, r4, lr
 800b8c2:	fa2f f181 	sxtb16	r1, r1
 800b8c6:	fb23 cc05 	smlad	ip, r3, r5, ip
 800b8ca:	3e01      	subs	r6, #1
 800b8cc:	fb22 ee05 	smlad	lr, r2, r5, lr
 800b8d0:	fb21 cc04 	smlad	ip, r1, r4, ip
 800b8d4:	dc9d      	bgt.n	800b812 <Loop16>

0800b8d6 <NextLoop4>:
 800b8d6:	f3ca 0681 	ubfx	r6, sl, #2, #2
 800b8da:	2e00      	cmp	r6, #0
 800b8dc:	d019      	beq.n	800b912 <FinalLoop>

0800b8de <Loop4>:
 800b8de:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800b8e2:	f858 4f04 	ldr.w	r4, [r8, #4]!
 800b8e6:	fa2f f290 	sxtb16	r2, r0, ror #8
 800b8ea:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800b8ee:	fa2f f080 	sxtb16	r0, r0
 800b8f2:	f858 5f04 	ldr.w	r5, [r8, #4]!
 800b8f6:	fa2f f391 	sxtb16	r3, r1, ror #8
 800b8fa:	fb20 ee04 	smlad	lr, r0, r4, lr
 800b8fe:	fa2f f181 	sxtb16	r1, r1
 800b902:	fb23 cc05 	smlad	ip, r3, r5, ip
 800b906:	3e01      	subs	r6, #1
 800b908:	fb22 ee05 	smlad	lr, r2, r5, lr
 800b90c:	fb21 cc04 	smlad	ip, r1, r4, ip
 800b910:	dce5      	bgt.n	800b8de <Loop4>

0800b912 <FinalLoop>:
 800b912:	f00a 0603 	and.w	r6, sl, #3
 800b916:	2e00      	cmp	r6, #0
 800b918:	dd11      	ble.n	800b93e <OutputFormatting>
 800b91a:	f107 0704 	add.w	r7, r7, #4
 800b91e:	f108 0804 	add.w	r8, r8, #4

0800b922 <Loop1>:
 800b922:	f938 4b02 	ldrsh.w	r4, [r8], #2
 800b926:	f917 0b01 	ldrsb.w	r0, [r7], #1
 800b92a:	f917 1b01 	ldrsb.w	r1, [r7], #1
 800b92e:	fb10 ee04 	smlabb	lr, r0, r4, lr
 800b932:	fb11 cc04 	smlabb	ip, r1, r4, ip
 800b936:	3e01      	subs	r6, #1
 800b938:	d1f3      	bne.n	800b922 <Loop1>
 800b93a:	f1a7 0704 	sub.w	r7, r7, #4

0800b93e <OutputFormatting>:
 800b93e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b940:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b942:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b944:	9e00      	ldr	r6, [sp, #0]
 800b946:	2e00      	cmp	r6, #0
 800b948:	d10c      	bne.n	800b964 <OutputFormatting_ex>
 800b94a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800b94e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800b952:	fb5e 5e00 	smmla	lr, lr, r0, r5
 800b956:	fb5c 5c00 	smmla	ip, ip, r0, r5
 800b95a:	fa4e fe01 	asr.w	lr, lr, r1
 800b95e:	fa4c fc01 	asr.w	ip, ip, r1
 800b962:	e026      	b.n	800b9b2 <EndScaling>

0800b964 <OutputFormatting_ex>:
 800b964:	1c73      	adds	r3, r6, #1
 800b966:	d014      	beq.n	800b992 <OutputFormatting_Neg>
 800b968:	f04f 0301 	mov.w	r3, #1
 800b96c:	fa03 f301 	lsl.w	r3, r3, r1
 800b970:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800b974:	fb5e 3e00 	smmla	lr, lr, r0, r3
 800b978:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800b97c:	fa4e fe01 	asr.w	lr, lr, r1
 800b980:	44ae      	add	lr, r5
 800b982:	fb5c 3c00 	smmla	ip, ip, r0, r3
 800b986:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800b98a:	fa4c fc01 	asr.w	ip, ip, r1
 800b98e:	44ac      	add	ip, r5
 800b990:	e00f      	b.n	800b9b2 <EndScaling>

0800b992 <OutputFormatting_Neg>:
 800b992:	f1c1 0301 	rsb	r3, r1, #1
 800b996:	fa0e fe03 	lsl.w	lr, lr, r3
 800b99a:	f30e 0e1f 	ssat	lr, #32, lr
 800b99e:	fb5e fe10 	smmulr	lr, lr, r0
 800b9a2:	fa0c fc03 	lsl.w	ip, ip, r3
 800b9a6:	f30c 0c1f 	ssat	ip, #32, ip
 800b9aa:	fb5c fc10 	smmulr	ip, ip, r0
 800b9ae:	44ae      	add	lr, r5
 800b9b0:	44ac      	add	ip, r5

0800b9b2 <EndScaling>:
 800b9b2:	f30e 0e07 	ssat	lr, #8, lr
 800b9b6:	9b02      	ldr	r3, [sp, #8]
 800b9b8:	f30c 0c07 	ssat	ip, #8, ip
 800b9bc:	f36c 2e0f 	bfi	lr, ip, #8, #8
 800b9c0:	f82b eb02 	strh.w	lr, [fp], #2
 800b9c4:	459b      	cmp	fp, r3
 800b9c6:	f47f af18 	bne.w	800b7fa <MainLoop>

0800b9ca <Exit>:
 800b9ca:	b003      	add	sp, #12
 800b9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9d0 <st_sssa8_dense_memopt_loop>:
 800b9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	b087      	sub	sp, #28
 800b9d6:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800b9da:	f1bb 0f00 	cmp.w	fp, #0
 800b9de:	bfcc      	ite	gt
 800b9e0:	f04f 0c00 	movgt.w	ip, #0
 800b9e4:	f04f 3cff 	movle.w	ip, #4294967295
 800b9e8:	f1bb 0f15 	cmp.w	fp, #21
 800b9ec:	bfc8      	it	gt
 800b9ee:	f04f 0c01 	movgt.w	ip, #1
 800b9f2:	f8cd c018 	str.w	ip, [sp, #24]
 800b9f6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800b9f8:	f1c5 0a00 	rsb	sl, r5, #0
 800b9fc:	eaca 4a0a 	pkhbt	sl, sl, sl, lsl #16
 800ba00:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800ba02:	4680      	mov	r8, r0
 800ba04:	460f      	mov	r7, r1
 800ba06:	4699      	mov	r9, r3
 800ba08:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 800ba0c:	f1a0 0504 	sub.w	r5, r0, #4
 800ba10:	9504      	str	r5, [sp, #16]
 800ba12:	9200      	str	r2, [sp, #0]
 800ba14:	f022 050f 	bic.w	r5, r2, #15
 800ba18:	4405      	add	r5, r0
 800ba1a:	f1a5 0504 	sub.w	r5, r5, #4
 800ba1e:	9503      	str	r5, [sp, #12]
 800ba20:	f022 0503 	bic.w	r5, r2, #3
 800ba24:	4405      	add	r5, r0
 800ba26:	f1a5 0504 	sub.w	r5, r5, #4
 800ba2a:	9502      	str	r5, [sp, #8]
 800ba2c:	f002 0503 	and.w	r5, r2, #3
 800ba30:	9505      	str	r5, [sp, #20]
 800ba32:	2c00      	cmp	r4, #0
 800ba34:	f340 8103 	ble.w	800bc3e <Exit_m>
 800ba38:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	f1a7 0704 	sub.w	r7, r7, #4

0800ba42 <MainLoop_m>:
 800ba42:	9b00      	ldr	r3, [sp, #0]
 800ba44:	f859 eb04 	ldr.w	lr, [r9], #4
 800ba48:	f859 cb04 	ldr.w	ip, [r9], #4
 800ba4c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ba50:	2b0f      	cmp	r3, #15
 800ba52:	dd72      	ble.n	800bb3a <NextLoop4_m>
 800ba54:	9b03      	ldr	r3, [sp, #12]

0800ba56 <Loop16_m>:
 800ba56:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800ba5a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800ba5e:	f858 4f04 	ldr.w	r4, [r8, #4]!
 800ba62:	fa2f f690 	sxtb16	r6, r0, ror #8
 800ba66:	fa2f f591 	sxtb16	r5, r1, ror #8
 800ba6a:	ea4f 2234 	mov.w	r2, r4, ror #8
 800ba6e:	fa2f f080 	sxtb16	r0, r0
 800ba72:	fa2a f484 	sxtab16	r4, sl, r4
 800ba76:	fa2f f181 	sxtb16	r1, r1
 800ba7a:	fb24 ee00 	smlad	lr, r4, r0, lr
 800ba7e:	fa2a f282 	sxtab16	r2, sl, r2
 800ba82:	fb22 ee06 	smlad	lr, r2, r6, lr
 800ba86:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800ba8a:	fb24 cc01 	smlad	ip, r4, r1, ip
 800ba8e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800ba92:	fb22 cc05 	smlad	ip, r2, r5, ip
 800ba96:	f858 4f04 	ldr.w	r4, [r8, #4]!
 800ba9a:	fa2f f690 	sxtb16	r6, r0, ror #8
 800ba9e:	fa2f f591 	sxtb16	r5, r1, ror #8
 800baa2:	ea4f 2234 	mov.w	r2, r4, ror #8
 800baa6:	fa2f f080 	sxtb16	r0, r0
 800baaa:	fa2a f484 	sxtab16	r4, sl, r4
 800baae:	fa2f f181 	sxtb16	r1, r1
 800bab2:	fb24 ee00 	smlad	lr, r4, r0, lr
 800bab6:	fa2a f282 	sxtab16	r2, sl, r2
 800baba:	fb22 ee06 	smlad	lr, r2, r6, lr
 800babe:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800bac2:	fb24 cc01 	smlad	ip, r4, r1, ip
 800bac6:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800baca:	fb22 cc05 	smlad	ip, r2, r5, ip
 800bace:	f858 4f04 	ldr.w	r4, [r8, #4]!
 800bad2:	fa2f f690 	sxtb16	r6, r0, ror #8
 800bad6:	fa2f f591 	sxtb16	r5, r1, ror #8
 800bada:	ea4f 2234 	mov.w	r2, r4, ror #8
 800bade:	fa2f f080 	sxtb16	r0, r0
 800bae2:	fa2a f484 	sxtab16	r4, sl, r4
 800bae6:	fa2f f181 	sxtb16	r1, r1
 800baea:	fb24 ee00 	smlad	lr, r4, r0, lr
 800baee:	fa2a f282 	sxtab16	r2, sl, r2
 800baf2:	fb22 ee06 	smlad	lr, r2, r6, lr
 800baf6:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800bafa:	fb24 cc01 	smlad	ip, r4, r1, ip
 800bafe:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800bb02:	fb22 cc05 	smlad	ip, r2, r5, ip
 800bb06:	f858 4f04 	ldr.w	r4, [r8, #4]!
 800bb0a:	fa2f f690 	sxtb16	r6, r0, ror #8
 800bb0e:	fa2f f591 	sxtb16	r5, r1, ror #8
 800bb12:	ea4f 2234 	mov.w	r2, r4, ror #8
 800bb16:	fa2f f080 	sxtb16	r0, r0
 800bb1a:	fa2a f484 	sxtab16	r4, sl, r4
 800bb1e:	fa2f f181 	sxtb16	r1, r1
 800bb22:	fb24 ee00 	smlad	lr, r4, r0, lr
 800bb26:	fa2a f282 	sxtab16	r2, sl, r2
 800bb2a:	fb22 ee06 	smlad	lr, r2, r6, lr
 800bb2e:	fb24 cc01 	smlad	ip, r4, r1, ip
 800bb32:	4598      	cmp	r8, r3
 800bb34:	fb22 cc05 	smlad	ip, r2, r5, ip
 800bb38:	d18d      	bne.n	800ba56 <Loop16_m>

0800bb3a <NextLoop4_m>:
 800bb3a:	9b02      	ldr	r3, [sp, #8]
 800bb3c:	4598      	cmp	r8, r3
 800bb3e:	d01d      	beq.n	800bb7c <FinalLoop_m>

0800bb40 <Loop4_m>:
 800bb40:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800bb44:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800bb48:	f858 4f04 	ldr.w	r4, [r8, #4]!
 800bb4c:	fa2f f690 	sxtb16	r6, r0, ror #8
 800bb50:	fa2f f591 	sxtb16	r5, r1, ror #8
 800bb54:	ea4f 2234 	mov.w	r2, r4, ror #8
 800bb58:	fa2f f080 	sxtb16	r0, r0
 800bb5c:	fa2a f484 	sxtab16	r4, sl, r4
 800bb60:	fa2f f181 	sxtb16	r1, r1
 800bb64:	fb24 ee00 	smlad	lr, r4, r0, lr
 800bb68:	fa2a f282 	sxtab16	r2, sl, r2
 800bb6c:	fb24 cc01 	smlad	ip, r4, r1, ip
 800bb70:	fb22 ee06 	smlad	lr, r2, r6, lr
 800bb74:	fb22 cc05 	smlad	ip, r2, r5, ip
 800bb78:	4598      	cmp	r8, r3
 800bb7a:	d1e1      	bne.n	800bb40 <Loop4_m>

0800bb7c <FinalLoop_m>:
 800bb7c:	9b05      	ldr	r3, [sp, #20]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d017      	beq.n	800bbb2 <OutputFormatting_m>
 800bb82:	f107 0704 	add.w	r7, r7, #4
 800bb86:	f108 0804 	add.w	r8, r8, #4

0800bb8a <Loop1_m>:
 800bb8a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800bb8c:	f918 4b01 	ldrsb.w	r4, [r8], #1
 800bb90:	eba4 0405 	sub.w	r4, r4, r5
 800bb94:	f917 5b01 	ldrsb.w	r5, [r7], #1
 800bb98:	b224      	sxth	r4, r4
 800bb9a:	fb14 ee05 	smlabb	lr, r4, r5, lr
 800bb9e:	f917 5b01 	ldrsb.w	r5, [r7], #1
 800bba2:	fb14 cc05 	smlabb	ip, r4, r5, ip
 800bba6:	f1a3 0301 	sub.w	r3, r3, #1
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	dced      	bgt.n	800bb8a <Loop1_m>
 800bbae:	f1a7 0704 	sub.w	r7, r7, #4

0800bbb2 <OutputFormatting_m>:
 800bbb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800bbb4:	9914      	ldr	r1, [sp, #80]	; 0x50
 800bbb6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800bbb8:	9e06      	ldr	r6, [sp, #24]
 800bbba:	2e00      	cmp	r6, #0
 800bbbc:	d10c      	bne.n	800bbd8 <OutputFormatting_m_ex>
 800bbbe:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800bbc2:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800bbc6:	fb5e 5e00 	smmla	lr, lr, r0, r5
 800bbca:	fb5c 5c00 	smmla	ip, ip, r0, r5
 800bbce:	fa4e fe01 	asr.w	lr, lr, r1
 800bbd2:	fa4c fc01 	asr.w	ip, ip, r1
 800bbd6:	e026      	b.n	800bc26 <EndScaling_m>

0800bbd8 <OutputFormatting_m_ex>:
 800bbd8:	1c73      	adds	r3, r6, #1
 800bbda:	d014      	beq.n	800bc06 <OutputFormatting_m_Neg>
 800bbdc:	f04f 0301 	mov.w	r3, #1
 800bbe0:	fa03 f301 	lsl.w	r3, r3, r1
 800bbe4:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800bbe8:	fb5e 3e00 	smmla	lr, lr, r0, r3
 800bbec:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800bbf0:	fa4e fe01 	asr.w	lr, lr, r1
 800bbf4:	44ae      	add	lr, r5
 800bbf6:	fb5c 3c00 	smmla	ip, ip, r0, r3
 800bbfa:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800bbfe:	fa4c fc01 	asr.w	ip, ip, r1
 800bc02:	44ac      	add	ip, r5
 800bc04:	e00f      	b.n	800bc26 <EndScaling_m>

0800bc06 <OutputFormatting_m_Neg>:
 800bc06:	f1c1 0301 	rsb	r3, r1, #1
 800bc0a:	fa0e fe03 	lsl.w	lr, lr, r3
 800bc0e:	f30e 0e1f 	ssat	lr, #32, lr
 800bc12:	fb5e fe10 	smmulr	lr, lr, r0
 800bc16:	fa0c fc03 	lsl.w	ip, ip, r3
 800bc1a:	f30c 0c1f 	ssat	ip, #32, ip
 800bc1e:	fb5c fc10 	smmulr	ip, ip, r0
 800bc22:	44ae      	add	lr, r5
 800bc24:	44ac      	add	ip, r5

0800bc26 <EndScaling_m>:
 800bc26:	f30e 0e07 	ssat	lr, #8, lr
 800bc2a:	9b01      	ldr	r3, [sp, #4]
 800bc2c:	f30c 0c07 	ssat	ip, #8, ip
 800bc30:	f36c 2e0f 	bfi	lr, ip, #8, #8
 800bc34:	f82b eb02 	strh.w	lr, [fp], #2
 800bc38:	459b      	cmp	fp, r3
 800bc3a:	f6ff af02 	blt.w	800ba42 <MainLoop_m>

0800bc3e <Exit_m>:
 800bc3e:	b007      	add	sp, #28
 800bc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc44 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 800bc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc48:	b086      	sub	sp, #24
 800bc4a:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800bc4e:	9100      	str	r1, [sp, #0]
 800bc50:	9203      	str	r2, [sp, #12]
 800bc52:	2f00      	cmp	r7, #0
 800bc54:	9305      	str	r3, [sp, #20]
 800bc56:	bf18      	it	ne
 800bc58:	2301      	movne	r3, #1
 800bc5a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800bc5c:	fb04 3303 	mla	r3, r4, r3, r3
 800bc60:	9304      	str	r3, [sp, #16]
 800bc62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bc64:	bf14      	ite	ne
 800bc66:	462f      	movne	r7, r5
 800bc68:	2701      	moveq	r7, #1
 800bc6a:	9701      	str	r7, [sp, #4]
 800bc6c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800bc70:	085b      	lsrs	r3, r3, #1
 800bc72:	f000 809f 	beq.w	800bdb4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x170>
 800bc76:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800bc7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bc7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc80:	9302      	str	r3, [sp, #8]
 800bc82:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 800bc86:	9f03      	ldr	r7, [sp, #12]
 800bc88:	ea5f 089e 	movs.w	r8, lr, lsr #2
 800bc8c:	f8dd c000 	ldr.w	ip, [sp]
 800bc90:	f857 6b04 	ldr.w	r6, [r7], #4
 800bc94:	f857 3b04 	ldr.w	r3, [r7], #4
 800bc98:	9703      	str	r7, [sp, #12]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	4631      	mov	r1, r6
 800bc9e:	d022      	beq.n	800bce6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa2>
 800bca0:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 800bca4:	f85c 9b04 	ldr.w	r9, [ip], #4
 800bca8:	f850 ab04 	ldr.w	sl, [r0], #4
 800bcac:	fb2a 6609 	smlad	r6, sl, r9, r6
 800bcb0:	f850 5b04 	ldr.w	r5, [r0], #4
 800bcb4:	fb2a 1107 	smlad	r1, sl, r7, r1
 800bcb8:	f850 ab04 	ldr.w	sl, [r0], #4
 800bcbc:	fb25 2207 	smlad	r2, r5, r7, r2
 800bcc0:	f85c 701e 	ldr.w	r7, [ip, lr, lsl #1]
 800bcc4:	fb25 3309 	smlad	r3, r5, r9, r3
 800bcc8:	f85c 9b04 	ldr.w	r9, [ip], #4
 800bccc:	fb2a 6609 	smlad	r6, sl, r9, r6
 800bcd0:	fb2a 1107 	smlad	r1, sl, r7, r1
 800bcd4:	f850 5b04 	ldr.w	r5, [r0], #4
 800bcd8:	fb25 3309 	smlad	r3, r5, r9, r3
 800bcdc:	f1b8 0801 	subs.w	r8, r8, #1
 800bce0:	fb25 2207 	smlad	r2, r5, r7, r2
 800bce4:	d1dc      	bne.n	800bca0 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c>
 800bce6:	f00e 0703 	and.w	r7, lr, #3
 800bcea:	b18f      	cbz	r7, 800bd10 <st_sssa8_ch_nn_mat_mult_kernel_opt+0xcc>
 800bcec:	f93c 801e 	ldrsh.w	r8, [ip, lr, lsl #1]
 800bcf0:	f93c ab02 	ldrsh.w	sl, [ip], #2
 800bcf4:	f930 5b02 	ldrsh.w	r5, [r0], #2
 800bcf8:	fb0a 6605 	mla	r6, sl, r5, r6
 800bcfc:	f930 9b02 	ldrsh.w	r9, [r0], #2
 800bd00:	fb09 330a 	mla	r3, r9, sl, r3
 800bd04:	fb08 1105 	mla	r1, r8, r5, r1
 800bd08:	3f01      	subs	r7, #1
 800bd0a:	fb09 2208 	mla	r2, r9, r8, r2
 800bd0e:	dced      	bgt.n	800bcec <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa8>
 800bd10:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800bd14:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800bd16:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 800bd1a:	f857 cb04 	ldr.w	ip, [r7], #4
 800bd1e:	f85b 5b04 	ldr.w	r5, [fp], #4
 800bd22:	f1c4 0915 	rsb	r9, r4, #21
 800bd26:	ea99 0904 	eors.w	r9, r9, r4
 800bd2a:	f340 80c8 	ble.w	800bebe <st_sssa8_ch_nn_mat_mult_kernel_opt+0x27a>
 800bd2e:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800bd32:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bd36:	fb56 c605 	smmla	r6, r6, r5, ip
 800bd3a:	fb51 c105 	smmla	r1, r1, r5, ip
 800bd3e:	fa46 f604 	asr.w	r6, r6, r4
 800bd42:	fa41 f104 	asr.w	r1, r1, r4
 800bd46:	f93a 4b02 	ldrsh.w	r4, [sl], #2
 800bd4a:	f857 cb04 	ldr.w	ip, [r7], #4
 800bd4e:	f85b 5b04 	ldr.w	r5, [fp], #4
 800bd52:	f1c4 0915 	rsb	r9, r4, #21
 800bd56:	ea99 0904 	eors.w	r9, r9, r4
 800bd5a:	f340 8099 	ble.w	800be90 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24c>
 800bd5e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bd62:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800bd66:	fb53 c305 	smmla	r3, r3, r5, ip
 800bd6a:	fb52 c205 	smmla	r2, r2, r5, ip
 800bd6e:	fa43 f304 	asr.w	r3, r3, r4
 800bd72:	fa42 f204 	asr.w	r2, r2, r4
 800bd76:	f306 0607 	ssat	r6, #8, r6
 800bd7a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bd7e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800bd80:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bd84:	7026      	strb	r6, [r4, #0]
 800bd86:	44a0      	add	r8, r4
 800bd88:	f301 0107 	ssat	r1, #8, r1
 800bd8c:	f888 1000 	strb.w	r1, [r8]
 800bd90:	f303 0307 	ssat	r3, #8, r3
 800bd94:	f804 3009 	strb.w	r3, [r4, r9]
 800bd98:	f302 0207 	ssat	r2, #8, r2
 800bd9c:	f808 2009 	strb.w	r2, [r8, r9]
 800bda0:	eb04 0249 	add.w	r2, r4, r9, lsl #1
 800bda4:	9217      	str	r2, [sp, #92]	; 0x5c
 800bda6:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
 800bdaa:	9c02      	ldr	r4, [sp, #8]
 800bdac:	9715      	str	r7, [sp, #84]	; 0x54
 800bdae:	45a2      	cmp	sl, r4
 800bdb0:	f47f af67 	bne.w	800bc82 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3e>
 800bdb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bdb6:	f013 0301 	ands.w	r3, r3, #1
 800bdba:	d054      	beq.n	800be66 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x222>
 800bdbc:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 800bdc0:	9b03      	ldr	r3, [sp, #12]
 800bdc2:	f8dd c000 	ldr.w	ip, [sp]
 800bdc6:	6819      	ldr	r1, [r3, #0]
 800bdc8:	ea5f 079e 	movs.w	r7, lr, lsr #2
 800bdcc:	eb0c 044e 	add.w	r4, ip, lr, lsl #1
 800bdd0:	460e      	mov	r6, r1
 800bdd2:	d015      	beq.n	800be00 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1bc>
 800bdd4:	f85c 501e 	ldr.w	r5, [ip, lr, lsl #1]
 800bdd8:	f85c 8b04 	ldr.w	r8, [ip], #4
 800bddc:	f850 ab04 	ldr.w	sl, [r0], #4
 800bde0:	f850 3b04 	ldr.w	r3, [r0], #4
 800bde4:	fb2a 6608 	smlad	r6, sl, r8, r6
 800bde8:	fb2a 1105 	smlad	r1, sl, r5, r1
 800bdec:	f85c a01e 	ldr.w	sl, [ip, lr, lsl #1]
 800bdf0:	f85c 8b04 	ldr.w	r8, [ip], #4
 800bdf4:	fb23 6608 	smlad	r6, r3, r8, r6
 800bdf8:	fb23 110a 	smlad	r1, r3, sl, r1
 800bdfc:	3f01      	subs	r7, #1
 800bdfe:	d1e9      	bne.n	800bdd4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x190>
 800be00:	f01e 0703 	ands.w	r7, lr, #3
 800be04:	d00b      	beq.n	800be1e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1da>
 800be06:	f83c 301e 	ldrh.w	r3, [ip, lr, lsl #1]
 800be0a:	f83c 9b02 	ldrh.w	r9, [ip], #2
 800be0e:	f930 ab02 	ldrsh.w	sl, [r0], #2
 800be12:	fb19 660a 	smlabb	r6, r9, sl, r6
 800be16:	3f01      	subs	r7, #1
 800be18:	fb13 110a 	smlabb	r1, r3, sl, r1
 800be1c:	dcf3      	bgt.n	800be06 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c2>
 800be1e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800be22:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800be24:	f9ba 4000 	ldrsh.w	r4, [sl]
 800be28:	f8d7 c000 	ldr.w	ip, [r7]
 800be2c:	f8db 5000 	ldr.w	r5, [fp]
 800be30:	f1c4 0915 	rsb	r9, r4, #21
 800be34:	ea99 0904 	eors.w	r9, r9, r4
 800be38:	dd58      	ble.n	800beec <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2a8>
 800be3a:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800be3e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800be42:	fb56 c605 	smmla	r6, r6, r5, ip
 800be46:	fb51 c105 	smmla	r1, r1, r5, ip
 800be4a:	fa46 f604 	asr.w	r6, r6, r4
 800be4e:	fa41 f104 	asr.w	r1, r1, r4
 800be52:	f306 0607 	ssat	r6, #8, r6
 800be56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800be58:	9c04      	ldr	r4, [sp, #16]
 800be5a:	7016      	strb	r6, [r2, #0]
 800be5c:	f301 0107 	ssat	r1, #8, r1
 800be60:	5511      	strb	r1, [r2, r4]
 800be62:	9b01      	ldr	r3, [sp, #4]
 800be64:	441a      	add	r2, r3
 800be66:	9911      	ldr	r1, [sp, #68]	; 0x44
 800be68:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800be6a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800be6c:	b133      	cbz	r3, 800be7c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x238>
 800be6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be70:	f104 0002 	add.w	r0, r4, #2
 800be74:	fb03 0011 	mls	r0, r3, r1, r0
 800be78:	4410      	add	r0, r2
 800be7a:	e006      	b.n	800be8a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x246>
 800be7c:	eba2 0001 	sub.w	r0, r2, r1
 800be80:	9a05      	ldr	r2, [sp, #20]
 800be82:	f104 0402 	add.w	r4, r4, #2
 800be86:	fb02 0004 	mla	r0, r2, r4, r0
 800be8a:	b006      	add	sp, #24
 800be8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be90:	2c00      	cmp	r4, #0
 800be92:	dd42      	ble.n	800bf1a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 800be94:	f04f 0901 	mov.w	r9, #1
 800be98:	fa09 f904 	lsl.w	r9, r9, r4
 800be9c:	ea4f 09a9 	mov.w	r9, r9, asr #2
 800bea0:	fb53 9305 	smmla	r3, r3, r5, r9
 800bea4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bea8:	fa43 f304 	asr.w	r3, r3, r4
 800beac:	4463      	add	r3, ip
 800beae:	fb52 9205 	smmla	r2, r2, r5, r9
 800beb2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800beb6:	fa42 f204 	asr.w	r2, r2, r4
 800beba:	4462      	add	r2, ip
 800bebc:	e75b      	b.n	800bd76 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 800bebe:	2c00      	cmp	r4, #0
 800bec0:	dd3c      	ble.n	800bf3c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2f8>
 800bec2:	f04f 0901 	mov.w	r9, #1
 800bec6:	fa09 f904 	lsl.w	r9, r9, r4
 800beca:	ea4f 09a9 	mov.w	r9, r9, asr #2
 800bece:	fb56 9605 	smmla	r6, r6, r5, r9
 800bed2:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800bed6:	fa46 f604 	asr.w	r6, r6, r4
 800beda:	4466      	add	r6, ip
 800bedc:	fb51 9105 	smmla	r1, r1, r5, r9
 800bee0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bee4:	fa41 f104 	asr.w	r1, r1, r4
 800bee8:	4461      	add	r1, ip
 800beea:	e72c      	b.n	800bd46 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 800beec:	2c00      	cmp	r4, #0
 800beee:	dd36      	ble.n	800bf5e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31a>
 800bef0:	f04f 0901 	mov.w	r9, #1
 800bef4:	fa09 f904 	lsl.w	r9, r9, r4
 800bef8:	ea4f 09a9 	mov.w	r9, r9, asr #2
 800befc:	fb56 9605 	smmla	r6, r6, r5, r9
 800bf00:	ea4f 0646 	mov.w	r6, r6, lsl #1
 800bf04:	fa46 f604 	asr.w	r6, r6, r4
 800bf08:	4466      	add	r6, ip
 800bf0a:	fb51 9105 	smmla	r1, r1, r5, r9
 800bf0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bf12:	fa41 f104 	asr.w	r1, r1, r4
 800bf16:	4461      	add	r1, ip
 800bf18:	e79b      	b.n	800be52 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>
 800bf1a:	f1c4 0901 	rsb	r9, r4, #1
 800bf1e:	fa03 f309 	lsl.w	r3, r3, r9
 800bf22:	f303 031f 	ssat	r3, #32, r3
 800bf26:	fb53 f315 	smmulr	r3, r3, r5
 800bf2a:	fa02 f209 	lsl.w	r2, r2, r9
 800bf2e:	f302 021f 	ssat	r2, #32, r2
 800bf32:	fb52 f215 	smmulr	r2, r2, r5
 800bf36:	4463      	add	r3, ip
 800bf38:	4462      	add	r2, ip
 800bf3a:	e71c      	b.n	800bd76 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x132>
 800bf3c:	f1c4 0901 	rsb	r9, r4, #1
 800bf40:	fa06 f609 	lsl.w	r6, r6, r9
 800bf44:	f306 061f 	ssat	r6, #32, r6
 800bf48:	fb56 f615 	smmulr	r6, r6, r5
 800bf4c:	fa01 f109 	lsl.w	r1, r1, r9
 800bf50:	f301 011f 	ssat	r1, #32, r1
 800bf54:	fb51 f115 	smmulr	r1, r1, r5
 800bf58:	4466      	add	r6, ip
 800bf5a:	4461      	add	r1, ip
 800bf5c:	e6f3      	b.n	800bd46 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x102>
 800bf5e:	f1c4 0901 	rsb	r9, r4, #1
 800bf62:	fa06 f609 	lsl.w	r6, r6, r9
 800bf66:	f306 061f 	ssat	r6, #32, r6
 800bf6a:	fb56 f615 	smmulr	r6, r6, r5
 800bf6e:	fa01 f109 	lsl.w	r1, r1, r9
 800bf72:	f301 011f 	ssat	r1, #32, r1
 800bf76:	fb51 f115 	smmulr	r1, r1, r5
 800bf7a:	4466      	add	r6, ip
 800bf7c:	4461      	add	r1, ip
 800bf7e:	e768      	b.n	800be52 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x20e>

0800bf80 <st_sssa8_ch_nn_mat_mult_pw_nt_t>:
 800bf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf84:	b099      	sub	sp, #100	; 0x64
 800bf86:	9014      	str	r0, [sp, #80]	; 0x50
 800bf88:	9113      	str	r1, [sp, #76]	; 0x4c
 800bf8a:	9216      	str	r2, [sp, #88]	; 0x58
 800bf8c:	9312      	str	r3, [sp, #72]	; 0x48
 800bf8e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800bf90:	f000 0303 	and.w	r3, r0, #3
 800bf94:	2b03      	cmp	r3, #3
 800bf96:	bf0c      	ite	eq
 800bf98:	2601      	moveq	r6, #1
 800bf9a:	2600      	movne	r6, #0
 800bf9c:	9617      	str	r6, [sp, #92]	; 0x5c
 800bf9e:	2803      	cmp	r0, #3
 800bfa0:	bf0c      	ite	eq
 800bfa2:	2601      	moveq	r6, #1
 800bfa4:	2600      	movne	r6, #0
 800bfa6:	9618      	str	r6, [sp, #96]	; 0x60
 800bfa8:	f010 0002 	ands.w	r0, r0, #2
 800bfac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	bf14      	ite	ne
 800bfb2:	4618      	movne	r0, r3
 800bfb4:	2001      	moveq	r0, #1
 800bfb6:	9010      	str	r0, [sp, #64]	; 0x40
 800bfb8:	9826      	ldr	r0, [sp, #152]	; 0x98
 800bfba:	bf0c      	ite	eq
 800bfbc:	4606      	moveq	r6, r0
 800bfbe:	2601      	movne	r6, #1
 800bfc0:	9611      	str	r6, [sp, #68]	; 0x44
 800bfc2:	e9dd 042c 	ldrd	r0, r4, [sp, #176]	; 0xb0
 800bfc6:	2c00      	cmp	r4, #0
 800bfc8:	bf18      	it	ne
 800bfca:	4620      	movne	r0, r4
 800bfcc:	902c      	str	r0, [sp, #176]	; 0xb0
 800bfce:	9826      	ldr	r0, [sp, #152]	; 0x98
 800bfd0:	2801      	cmp	r0, #1
 800bfd2:	f340 81be 	ble.w	800c352 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x3d2>
 800bfd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bfda:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800bfdc:	f014 0f02 	tst.w	r4, #2
 800bfe0:	d101      	bne.n	800bfe6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x66>
 800bfe2:	f04f 0302 	mov.w	r3, #2
 800bfe6:	9315      	str	r3, [sp, #84]	; 0x54
 800bfe8:	f04f 0800 	mov.w	r8, #0
 800bfec:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800bff0:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800bff4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800bff6:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 800bffa:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bffe:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800c002:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c006:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c008:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800c00c:	e9d2 1200 	ldrd	r1, r2, [r2]
 800c010:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c014:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800c016:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800c01a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800c01e:	e9cd 1200 	strd	r1, r2, [sp]
 800c022:	2b00      	cmp	r3, #0
 800c024:	bfcc      	ite	gt
 800c026:	2000      	movgt	r0, #0
 800c028:	f04f 30ff 	movle.w	r0, #4294967295
 800c02c:	2b15      	cmp	r3, #21
 800c02e:	bfc8      	it	gt
 800c030:	2001      	movgt	r0, #1
 800c032:	2c00      	cmp	r4, #0
 800c034:	bfcc      	ite	gt
 800c036:	2100      	movgt	r1, #0
 800c038:	f04f 31ff 	movle.w	r1, #4294967295
 800c03c:	2c15      	cmp	r4, #21
 800c03e:	bfc8      	it	gt
 800c040:	2101      	movgt	r1, #1
 800c042:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c046:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f000 8297 	beq.w	800c57c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5fc>
 800c04e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c050:	2b00      	cmp	r3, #0
 800c052:	f040 82bb 	bne.w	800c5cc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x64c>
 800c056:	461a      	mov	r2, r3
 800c058:	4618      	mov	r0, r3
 800c05a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c05c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800c060:	e9d1 3400 	ldrd	r3, r4, [r1]
 800c064:	4403      	add	r3, r0
 800c066:	4414      	add	r4, r2
 800c068:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
 800c06c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c06e:	9824      	ldr	r0, [sp, #144]	; 0x90
 800c070:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c072:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c074:	2900      	cmp	r1, #0
 800c076:	bf1c      	itt	ne
 800c078:	3203      	addne	r2, #3
 800c07a:	18d2      	addne	r2, r2, r3
 800c07c:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800c080:	920b      	str	r2, [sp, #44]	; 0x2c
 800c082:	1040      	asrs	r0, r0, #1
 800c084:	f000 8144 	beq.w	800c310 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x390>
 800c088:	930f      	str	r3, [sp, #60]	; 0x3c
 800c08a:	900e      	str	r0, [sp, #56]	; 0x38
 800c08c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c08e:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 800c090:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c092:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800c094:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	; 0x24
 800c098:	46e2      	mov	sl, ip
 800c09a:	46f3      	mov	fp, lr
 800c09c:	4413      	add	r3, r2
 800c09e:	930c      	str	r3, [sp, #48]	; 0x30
 800c0a0:	ea5f 1827 	movs.w	r8, r7, asr #4
 800c0a4:	f000 8094 	beq.w	800c1d0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x250>
 800c0a8:	f859 5007 	ldr.w	r5, [r9, r7]
 800c0ac:	fa2f f485 	sxtb16	r4, r5
 800c0b0:	f856 0b04 	ldr.w	r0, [r6], #4
 800c0b4:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c0b8:	f856 1b04 	ldr.w	r1, [r6], #4
 800c0bc:	fb24 aa00 	smlad	sl, r4, r0, sl
 800c0c0:	fb25 aa01 	smlad	sl, r5, r1, sl
 800c0c4:	f856 2b04 	ldr.w	r2, [r6], #4
 800c0c8:	f856 3b04 	ldr.w	r3, [r6], #4
 800c0cc:	fb24 bb02 	smlad	fp, r4, r2, fp
 800c0d0:	f859 4b04 	ldr.w	r4, [r9], #4
 800c0d4:	fb25 bb03 	smlad	fp, r5, r3, fp
 800c0d8:	fa2f f584 	sxtb16	r5, r4
 800c0dc:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c0e0:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c0e4:	f856 0b04 	ldr.w	r0, [r6], #4
 800c0e8:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c0ec:	f859 5007 	ldr.w	r5, [r9, r7]
 800c0f0:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c0f4:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c0f8:	fa2f f485 	sxtb16	r4, r5
 800c0fc:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c100:	f856 1b04 	ldr.w	r1, [r6], #4
 800c104:	fb24 aa00 	smlad	sl, r4, r0, sl
 800c108:	f856 2b04 	ldr.w	r2, [r6], #4
 800c10c:	fb25 aa01 	smlad	sl, r5, r1, sl
 800c110:	f856 3b04 	ldr.w	r3, [r6], #4
 800c114:	fb24 bb02 	smlad	fp, r4, r2, fp
 800c118:	f859 4b04 	ldr.w	r4, [r9], #4
 800c11c:	fb25 bb03 	smlad	fp, r5, r3, fp
 800c120:	fa2f f584 	sxtb16	r5, r4
 800c124:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c128:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c12c:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c130:	f859 5007 	ldr.w	r5, [r9, r7]
 800c134:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c138:	f856 0b04 	ldr.w	r0, [r6], #4
 800c13c:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c140:	fa2f f485 	sxtb16	r4, r5
 800c144:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c148:	f856 1b04 	ldr.w	r1, [r6], #4
 800c14c:	fb24 aa00 	smlad	sl, r4, r0, sl
 800c150:	f856 2b04 	ldr.w	r2, [r6], #4
 800c154:	fb25 aa01 	smlad	sl, r5, r1, sl
 800c158:	f856 3b04 	ldr.w	r3, [r6], #4
 800c15c:	fb24 bb02 	smlad	fp, r4, r2, fp
 800c160:	f859 4b04 	ldr.w	r4, [r9], #4
 800c164:	fb25 bb03 	smlad	fp, r5, r3, fp
 800c168:	fa2f f584 	sxtb16	r5, r4
 800c16c:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c170:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c174:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c178:	f856 0b04 	ldr.w	r0, [r6], #4
 800c17c:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c180:	f859 5007 	ldr.w	r5, [r9, r7]
 800c184:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c188:	fa2f f485 	sxtb16	r4, r5
 800c18c:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c190:	f856 1b04 	ldr.w	r1, [r6], #4
 800c194:	fb24 aa00 	smlad	sl, r4, r0, sl
 800c198:	f856 2b04 	ldr.w	r2, [r6], #4
 800c19c:	fb25 aa01 	smlad	sl, r5, r1, sl
 800c1a0:	f856 3b04 	ldr.w	r3, [r6], #4
 800c1a4:	fb24 bb02 	smlad	fp, r4, r2, fp
 800c1a8:	f859 4b04 	ldr.w	r4, [r9], #4
 800c1ac:	fb25 bb03 	smlad	fp, r5, r3, fp
 800c1b0:	fa2f f584 	sxtb16	r5, r4
 800c1b4:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c1b8:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c1bc:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c1c0:	f1b8 0801 	subs.w	r8, r8, #1
 800c1c4:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c1c8:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c1cc:	f73f af6c 	bgt.w	800c0a8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x128>
 800c1d0:	f017 000f 	ands.w	r0, r7, #15
 800c1d4:	d046      	beq.n	800c264 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2e4>
 800c1d6:	f3c7 0881 	ubfx	r8, r7, #2, #2
 800c1da:	f1b8 0f00 	cmp.w	r8, #0
 800c1de:	d026      	beq.n	800c22e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2ae>
 800c1e0:	f859 5007 	ldr.w	r5, [r9, r7]
 800c1e4:	fa2f f485 	sxtb16	r4, r5
 800c1e8:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c1ec:	f856 0b04 	ldr.w	r0, [r6], #4
 800c1f0:	f856 1b04 	ldr.w	r1, [r6], #4
 800c1f4:	fb24 aa00 	smlad	sl, r4, r0, sl
 800c1f8:	f856 2b04 	ldr.w	r2, [r6], #4
 800c1fc:	fb25 aa01 	smlad	sl, r5, r1, sl
 800c200:	f856 3b04 	ldr.w	r3, [r6], #4
 800c204:	fb24 bb02 	smlad	fp, r4, r2, fp
 800c208:	f859 4b04 	ldr.w	r4, [r9], #4
 800c20c:	fb25 bb03 	smlad	fp, r5, r3, fp
 800c210:	fa2f f584 	sxtb16	r5, r4
 800c214:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c218:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c21c:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c220:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c224:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c228:	f1b8 0801 	subs.w	r8, r8, #1
 800c22c:	dcd8      	bgt.n	800c1e0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x260>
 800c22e:	f017 0803 	ands.w	r8, r7, #3
 800c232:	f1b8 0f00 	cmp.w	r8, #0
 800c236:	d015      	beq.n	800c264 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2e4>
 800c238:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800c23a:	f936 3b02 	ldrsh.w	r3, [r6], #2
 800c23e:	f936 5b02 	ldrsh.w	r5, [r6], #2
 800c242:	f999 1000 	ldrsb.w	r1, [r9]
 800c246:	fb13 cc01 	smlabb	ip, r3, r1, ip
 800c24a:	fb15 ee01 	smlabb	lr, r5, r1, lr
 800c24e:	f919 1000 	ldrsb.w	r1, [r9, r0]
 800c252:	fb13 aa01 	smlabb	sl, r3, r1, sl
 800c256:	fb15 bb01 	smlabb	fp, r5, r1, fp
 800c25a:	f109 0901 	add.w	r9, r9, #1
 800c25e:	f1b8 0801 	subs.w	r8, r8, #1
 800c262:	dcea      	bgt.n	800c23a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x2ba>
 800c264:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c266:	462e      	mov	r6, r5
 800c268:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c26a:	b168      	cbz	r0, 800c288 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x308>
 800c26c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c26e:	1e90      	subs	r0, r2, #2
 800c270:	dc09      	bgt.n	800c286 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x306>
 800c272:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c274:	f1c2 0202 	rsb	r2, r2, #2
 800c278:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800c27c:	920c      	str	r2, [sp, #48]	; 0x30
 800c27e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800c280:	4410      	add	r0, r2
 800c282:	f105 0502 	add.w	r5, r5, #2
 800c286:	900f      	str	r0, [sp, #60]	; 0x3c
 800c288:	9800      	ldr	r0, [sp, #0]
 800c28a:	9902      	ldr	r1, [sp, #8]
 800c28c:	9a04      	ldr	r2, [sp, #16]
 800c28e:	9b06      	ldr	r3, [sp, #24]
 800c290:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800c292:	2b00      	cmp	r3, #0
 800c294:	f040 80c9 	bne.w	800c42a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4aa>
 800c298:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800c29c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800c2a0:	fb5c 0c01 	smmla	ip, ip, r1, r0
 800c2a4:	fb5a 0a01 	smmla	sl, sl, r1, r0
 800c2a8:	fa4c fc02 	asr.w	ip, ip, r2
 800c2ac:	fa4a fa02 	asr.w	sl, sl, r2
 800c2b0:	f30c 0c07 	ssat	ip, #8, ip
 800c2b4:	f30a 0a07 	ssat	sl, #8, sl
 800c2b8:	f886 c000 	strb.w	ip, [r6]
 800c2bc:	f887 a000 	strb.w	sl, [r7]
 800c2c0:	9801      	ldr	r0, [sp, #4]
 800c2c2:	9903      	ldr	r1, [sp, #12]
 800c2c4:	9a05      	ldr	r2, [sp, #20]
 800c2c6:	9b07      	ldr	r3, [sp, #28]
 800c2c8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f040 80d4 	bne.w	800c47a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4fa>
 800c2d2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800c2d6:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800c2da:	fb5e 0e01 	smmla	lr, lr, r1, r0
 800c2de:	fb5b 0b01 	smmla	fp, fp, r1, r0
 800c2e2:	fa4e fe02 	asr.w	lr, lr, r2
 800c2e6:	fa4b fb02 	asr.w	fp, fp, r2
 800c2ea:	f30e 0e07 	ssat	lr, #8, lr
 800c2ee:	f30b 0b07 	ssat	fp, #8, fp
 800c2f2:	f806 e008 	strb.w	lr, [r6, r8]
 800c2f6:	f807 b008 	strb.w	fp, [r7, r8]
 800c2fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2fc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800c2fe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c302:	930b      	str	r3, [sp, #44]	; 0x2c
 800c304:	4491      	add	r9, r2
 800c306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c308:	3b01      	subs	r3, #1
 800c30a:	930e      	str	r3, [sp, #56]	; 0x38
 800c30c:	f47f aebe 	bne.w	800c08c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x10c>
 800c310:	f8cd 9020 	str.w	r9, [sp, #32]
 800c314:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c316:	f013 0f01 	tst.w	r3, #1
 800c31a:	f040 80d6 	bne.w	800c4ca <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x54a>
 800c31e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c320:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800c322:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800c326:	9313      	str	r3, [sp, #76]	; 0x4c
 800c328:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c32a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c32c:	4413      	add	r3, r2
 800c32e:	9312      	str	r3, [sp, #72]	; 0x48
 800c330:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800c332:	b123      	cbz	r3, 800c33e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x3be>
 800c334:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800c336:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800c338:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c33c:	932c      	str	r3, [sp, #176]	; 0xb0
 800c33e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c340:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c342:	ea4f 0363 	mov.w	r3, r3, asr #1
 800c346:	f102 0201 	add.w	r2, r2, #1
 800c34a:	920d      	str	r2, [sp, #52]	; 0x34
 800c34c:	4293      	cmp	r3, r2
 800c34e:	f73f ae4f 	bgt.w	800bff0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x70>
 800c352:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800c354:	f015 0501 	ands.w	r5, r5, #1
 800c358:	d060      	beq.n	800c41c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x49c>
 800c35a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 800c35e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800c360:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c362:	2d00      	cmp	r5, #0
 800c364:	bf1c      	itt	ne
 800c366:	3603      	addne	r6, #3
 800c368:	4446      	addne	r6, r8
 800c36a:	9924      	ldr	r1, [sp, #144]	; 0x90
 800c36c:	2900      	cmp	r1, #0
 800c36e:	dd55      	ble.n	800c41c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x49c>
 800c370:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800c374:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800c376:	9f26      	ldr	r7, [sp, #152]	; 0x98
 800c378:	f1a7 0701 	sub.w	r7, r7, #1
 800c37c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c380:	f8dc c000 	ldr.w	ip, [ip]
 800c384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c386:	eb03 0487 	add.w	r4, r3, r7, lsl #2
 800c38a:	6824      	ldr	r4, [r4, #0]
 800c38c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800c38e:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 800c392:	6800      	ldr	r0, [r0, #0]
 800c394:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c396:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 800c39a:	f9b7 7000 	ldrsh.w	r7, [r7]
 800c39e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800c3a0:	2f00      	cmp	r7, #0
 800c3a2:	bfcc      	ite	gt
 800c3a4:	f04f 0900 	movgt.w	r9, #0
 800c3a8:	f04f 39ff 	movle.w	r9, #4294967295
 800c3ac:	2f15      	cmp	r7, #21
 800c3ae:	bfc8      	it	gt
 800c3b0:	f04f 0901 	movgt.w	r9, #1
 800c3b4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800c3b6:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800c3ba:	f1bb 0f00 	cmp.w	fp, #0
 800c3be:	46e6      	mov	lr, ip
 800c3c0:	dd0c      	ble.n	800c3dc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x45c>
 800c3c2:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800c3c6:	f915 3b01 	ldrsb.w	r3, [r5], #1
 800c3ca:	f918 ab01 	ldrsb.w	sl, [r8], #1
 800c3ce:	eba3 0302 	sub.w	r3, r3, r2
 800c3d2:	fb0a ee03 	mla	lr, sl, r3, lr
 800c3d6:	f1bb 0b01 	subs.w	fp, fp, #1
 800c3da:	dcf4      	bgt.n	800c3c6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x446>
 800c3dc:	f1b9 0f00 	cmp.w	r9, #0
 800c3e0:	f040 8164 	bne.w	800c6ac <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x72c>
 800c3e4:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800c3e8:	fb5e 0e04 	smmla	lr, lr, r4, r0
 800c3ec:	fa4e fe07 	asr.w	lr, lr, r7
 800c3f0:	f30e 0e07 	ssat	lr, #8, lr
 800c3f4:	f886 e000 	strb.w	lr, [r6]
 800c3f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c3fa:	f013 0f02 	tst.w	r3, #2
 800c3fe:	d011      	beq.n	800c424 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4a4>
 800c400:	f013 0f01 	tst.w	r3, #1
 800c404:	d005      	beq.n	800c412 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x492>
 800c406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c408:	3b01      	subs	r3, #1
 800c40a:	d102      	bne.n	800c412 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x492>
 800c40c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800c40e:	f106 0602 	add.w	r6, r6, #2
 800c412:	f106 0601 	add.w	r6, r6, #1
 800c416:	930f      	str	r3, [sp, #60]	; 0x3c
 800c418:	3901      	subs	r1, #1
 800c41a:	dccc      	bgt.n	800c3b6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x436>
 800c41c:	2000      	movs	r0, #0
 800c41e:	b019      	add	sp, #100	; 0x64
 800c420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c424:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c426:	441e      	add	r6, r3
 800c428:	e7f6      	b.n	800c418 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x498>
 800c42a:	3301      	adds	r3, #1
 800c42c:	d014      	beq.n	800c458 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x4d8>
 800c42e:	f04f 0301 	mov.w	r3, #1
 800c432:	fa03 f302 	lsl.w	r3, r3, r2
 800c436:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800c43a:	fb5c 3c01 	smmla	ip, ip, r1, r3
 800c43e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800c442:	fa4c fc02 	asr.w	ip, ip, r2
 800c446:	4484      	add	ip, r0
 800c448:	fb5a 3a01 	smmla	sl, sl, r1, r3
 800c44c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800c450:	fa4a fa02 	asr.w	sl, sl, r2
 800c454:	4482      	add	sl, r0
 800c456:	e72b      	b.n	800c2b0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x330>
 800c458:	f1c2 0301 	rsb	r3, r2, #1
 800c45c:	fa0c fc03 	lsl.w	ip, ip, r3
 800c460:	f30c 0c1f 	ssat	ip, #32, ip
 800c464:	fb5c fc11 	smmulr	ip, ip, r1
 800c468:	fa0a fa03 	lsl.w	sl, sl, r3
 800c46c:	f30a 0a1f 	ssat	sl, #32, sl
 800c470:	fb5a fa11 	smmulr	sl, sl, r1
 800c474:	4484      	add	ip, r0
 800c476:	4482      	add	sl, r0
 800c478:	e71a      	b.n	800c2b0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x330>
 800c47a:	3301      	adds	r3, #1
 800c47c:	d014      	beq.n	800c4a8 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x528>
 800c47e:	f04f 0301 	mov.w	r3, #1
 800c482:	fa03 f302 	lsl.w	r3, r3, r2
 800c486:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800c48a:	fb5e 3e01 	smmla	lr, lr, r1, r3
 800c48e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800c492:	fa4e fe02 	asr.w	lr, lr, r2
 800c496:	4486      	add	lr, r0
 800c498:	fb5b 3b01 	smmla	fp, fp, r1, r3
 800c49c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800c4a0:	fa4b fb02 	asr.w	fp, fp, r2
 800c4a4:	4483      	add	fp, r0
 800c4a6:	e720      	b.n	800c2ea <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x36a>
 800c4a8:	f1c2 0301 	rsb	r3, r2, #1
 800c4ac:	fa0e fe03 	lsl.w	lr, lr, r3
 800c4b0:	f30e 0e1f 	ssat	lr, #32, lr
 800c4b4:	fb5e fe11 	smmulr	lr, lr, r1
 800c4b8:	fa0b fb03 	lsl.w	fp, fp, r3
 800c4bc:	f30b 0b1f 	ssat	fp, #32, fp
 800c4c0:	fb5b fb11 	smmulr	fp, fp, r1
 800c4c4:	4486      	add	lr, r0
 800c4c6:	4483      	add	fp, r0
 800c4c8:	e70f      	b.n	800c2ea <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x36a>
 800c4ca:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 800c4cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4d0:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800c4d2:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	; 0x24
 800c4d6:	ea5f 08a7 	movs.w	r8, r7, asr #2
 800c4da:	d018      	beq.n	800c50e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x58e>
 800c4dc:	f859 4b04 	ldr.w	r4, [r9], #4
 800c4e0:	f856 0b04 	ldr.w	r0, [r6], #4
 800c4e4:	f856 1b04 	ldr.w	r1, [r6], #4
 800c4e8:	f856 2b04 	ldr.w	r2, [r6], #4
 800c4ec:	f856 3b04 	ldr.w	r3, [r6], #4
 800c4f0:	fa2f f584 	sxtb16	r5, r4
 800c4f4:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c4f8:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c4fc:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c500:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c504:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c508:	f1b8 0801 	subs.w	r8, r8, #1
 800c50c:	dce6      	bgt.n	800c4dc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x55c>
 800c50e:	f017 0803 	ands.w	r8, r7, #3
 800c512:	f1b8 0f00 	cmp.w	r8, #0
 800c516:	d00c      	beq.n	800c532 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5b2>
 800c518:	f936 3b02 	ldrsh.w	r3, [r6], #2
 800c51c:	f936 5b02 	ldrsh.w	r5, [r6], #2
 800c520:	f919 1b01 	ldrsb.w	r1, [r9], #1
 800c524:	fb13 cc01 	smlabb	ip, r3, r1, ip
 800c528:	fb15 ee01 	smlabb	lr, r5, r1, lr
 800c52c:	f1b8 0801 	subs.w	r8, r8, #1
 800c530:	dcf2      	bgt.n	800c518 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x598>
 800c532:	9800      	ldr	r0, [sp, #0]
 800c534:	9902      	ldr	r1, [sp, #8]
 800c536:	9a04      	ldr	r2, [sp, #16]
 800c538:	9b06      	ldr	r3, [sp, #24]
 800c53a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800c53c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c53e:	4437      	add	r7, r6
 800c540:	2b00      	cmp	r3, #0
 800c542:	f040 8099 	bne.w	800c678 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6f8>
 800c546:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800c54a:	fb5c 0c01 	smmla	ip, ip, r1, r0
 800c54e:	fa4c fc02 	asr.w	ip, ip, r2
 800c552:	f30c 0c07 	ssat	ip, #8, ip
 800c556:	f886 c000 	strb.w	ip, [r6]
 800c55a:	9801      	ldr	r0, [sp, #4]
 800c55c:	9903      	ldr	r1, [sp, #12]
 800c55e:	9a05      	ldr	r2, [sp, #20]
 800c560:	9b07      	ldr	r3, [sp, #28]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d166      	bne.n	800c634 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6b4>
 800c566:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800c56a:	fb5e 0e01 	smmla	lr, lr, r1, r0
 800c56e:	fa4e fe02 	asr.w	lr, lr, r2
 800c572:	f30e 0e07 	ssat	lr, #8, lr
 800c576:	f887 e000 	strb.w	lr, [r7]
 800c57a:	e6d0      	b.n	800c31e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 800c57c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c57e:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 800c580:	eb00 0907 	add.w	r9, r0, r7
 800c584:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800c586:	2f03      	cmp	r7, #3
 800c588:	dd11      	ble.n	800c5ae <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x62e>
 800c58a:	ea4f 06a7 	mov.w	r6, r7, asr #2
 800c58e:	f850 1b04 	ldr.w	r1, [r0], #4
 800c592:	f859 4b04 	ldr.w	r4, [r9], #4
 800c596:	fa2f f291 	sxtb16	r2, r1, ror #8
 800c59a:	fa2f f181 	sxtb16	r1, r1
 800c59e:	fa2f f894 	sxtb16	r8, r4, ror #8
 800c5a2:	fa2f f484 	sxtb16	r4, r4
 800c5a6:	e8a3 0116 	stmia.w	r3!, {r1, r2, r4, r8}
 800c5aa:	3e01      	subs	r6, #1
 800c5ac:	dcef      	bgt.n	800c58e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x60e>
 800c5ae:	f017 0603 	ands.w	r6, r7, #3
 800c5b2:	f77f ad4c 	ble.w	800c04e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xce>
 800c5b6:	f910 1b01 	ldrsb.w	r1, [r0], #1
 800c5ba:	f823 1b02 	strh.w	r1, [r3], #2
 800c5be:	f919 1b01 	ldrsb.w	r1, [r9], #1
 800c5c2:	f823 1b02 	strh.w	r1, [r3], #2
 800c5c6:	3e01      	subs	r6, #1
 800c5c8:	dcf5      	bgt.n	800c5b6 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x636>
 800c5ca:	e540      	b.n	800c04e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xce>
 800c5cc:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800c5ce:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800c5d0:	f04f 0300 	mov.w	r3, #0
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	10b1      	asrs	r1, r6, #2
 800c5d8:	d017      	beq.n	800c60a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x68a>
 800c5da:	e8b2 1680 	ldmia.w	r2!, {r7, r9, sl, ip}
 800c5de:	fa00 f087 	sxtah	r0, r0, r7
 800c5e2:	fa00 f0a7 	sxtah	r0, r0, r7, ror #16
 800c5e6:	fa00 f089 	sxtah	r0, r0, r9
 800c5ea:	fa00 f0a9 	sxtah	r0, r0, r9, ror #16
 800c5ee:	fa03 f38a 	sxtah	r3, r3, sl
 800c5f2:	fa03 f3aa 	sxtah	r3, r3, sl, ror #16
 800c5f6:	fa03 f38c 	sxtah	r3, r3, ip
 800c5fa:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 800c5fe:	3901      	subs	r1, #1
 800c600:	dceb      	bgt.n	800c5da <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x65a>
 800c602:	f1c0 0000 	rsb	r0, r0, #0
 800c606:	f1c3 0300 	rsb	r3, r3, #0
 800c60a:	f016 0103 	ands.w	r1, r6, #3
 800c60e:	d00b      	beq.n	800c628 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6a8>
 800c610:	f9b2 4000 	ldrsh.w	r4, [r2]
 800c614:	eba0 0004 	sub.w	r0, r0, r4
 800c618:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800c61c:	eba3 0304 	sub.w	r3, r3, r4
 800c620:	3901      	subs	r1, #1
 800c622:	f102 0204 	add.w	r2, r2, #4
 800c626:	dcf3      	bgt.n	800c610 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x690>
 800c628:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800c62a:	fb02 f000 	mul.w	r0, r2, r0
 800c62e:	fb03 f202 	mul.w	r2, r3, r2
 800c632:	e512      	b.n	800c05a <st_sssa8_ch_nn_mat_mult_pw_nt_t+0xda>
 800c634:	3301      	adds	r3, #1
 800c636:	d011      	beq.n	800c65c <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x6dc>
 800c638:	f04f 0301 	mov.w	r3, #1
 800c63c:	fa03 f302 	lsl.w	r3, r3, r2
 800c640:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800c644:	fb5e 3e01 	smmla	lr, lr, r1, r3
 800c648:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800c64c:	fa4e fe02 	asr.w	lr, lr, r2
 800c650:	4486      	add	lr, r0
 800c652:	f30e 0e07 	ssat	lr, #8, lr
 800c656:	f887 e000 	strb.w	lr, [r7]
 800c65a:	e660      	b.n	800c31e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 800c65c:	f1c2 0301 	rsb	r3, r2, #1
 800c660:	fa0e fe03 	lsl.w	lr, lr, r3
 800c664:	f30e 0e1f 	ssat	lr, #32, lr
 800c668:	fb5e fe11 	smmulr	lr, lr, r1
 800c66c:	4486      	add	lr, r0
 800c66e:	f30e 0e07 	ssat	lr, #8, lr
 800c672:	f887 e000 	strb.w	lr, [r7]
 800c676:	e652      	b.n	800c31e <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x39e>
 800c678:	3301      	adds	r3, #1
 800c67a:	d00d      	beq.n	800c698 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x718>
 800c67c:	f04f 0301 	mov.w	r3, #1
 800c680:	fa03 f302 	lsl.w	r3, r3, r2
 800c684:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800c688:	fb5c 3c01 	smmla	ip, ip, r1, r3
 800c68c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800c690:	fa4c fc02 	asr.w	ip, ip, r2
 800c694:	4484      	add	ip, r0
 800c696:	e75c      	b.n	800c552 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5d2>
 800c698:	f1c2 0301 	rsb	r3, r2, #1
 800c69c:	fa0c fc03 	lsl.w	ip, ip, r3
 800c6a0:	f30c 0c1f 	ssat	ip, #32, ip
 800c6a4:	fb5c fc11 	smmulr	ip, ip, r1
 800c6a8:	4484      	add	ip, r0
 800c6aa:	e752      	b.n	800c552 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x5d2>
 800c6ac:	1c7b      	adds	r3, r7, #1
 800c6ae:	d00d      	beq.n	800c6cc <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x74c>
 800c6b0:	f04f 0301 	mov.w	r3, #1
 800c6b4:	fa03 f307 	lsl.w	r3, r3, r7
 800c6b8:	ea4f 03a3 	mov.w	r3, r3, asr #2
 800c6bc:	fb5e 3e04 	smmla	lr, lr, r4, r3
 800c6c0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800c6c4:	fa4e fe07 	asr.w	lr, lr, r7
 800c6c8:	4486      	add	lr, r0
 800c6ca:	e691      	b.n	800c3f0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x470>
 800c6cc:	f1c7 0301 	rsb	r3, r7, #1
 800c6d0:	fa0e fe03 	lsl.w	lr, lr, r3
 800c6d4:	f30e 0e1f 	ssat	lr, #32, lr
 800c6d8:	fb5e fe14 	smmulr	lr, lr, r4
 800c6dc:	4486      	add	lr, r0
 800c6de:	e687      	b.n	800c3f0 <st_sssa8_ch_nn_mat_mult_pw_nt_t+0x470>

0800c6e0 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS>:
 800c6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e4:	b099      	sub	sp, #100	; 0x64
 800c6e6:	bf00      	nop
 800c6e8:	9014      	str	r0, [sp, #80]	; 0x50
 800c6ea:	9113      	str	r1, [sp, #76]	; 0x4c
 800c6ec:	9216      	str	r2, [sp, #88]	; 0x58
 800c6ee:	9312      	str	r3, [sp, #72]	; 0x48
 800c6f0:	f04f 0800 	mov.w	r8, #0
 800c6f4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800c6f8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800c6fc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c6fe:	eb02 028b 	add.w	r2, r2, fp, lsl #2
 800c702:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c706:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800c70a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c70e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c710:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800c714:	e9d2 1200 	ldrd	r1, r2, [r2]
 800c718:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c71c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800c71e:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800c722:	e9d2 1200 	ldrd	r1, r2, [r2]
 800c726:	e9cd 1200 	strd	r1, r2, [sp]
 800c72a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c72c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800c72e:	f04f 0610 	mov.w	r6, #16
 800c732:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c734:	f850 1b04 	ldr.w	r1, [r0], #4
 800c738:	fa2f f291 	sxtb16	r2, r1, ror #8
 800c73c:	fa2f f181 	sxtb16	r1, r1
 800c740:	fa2f f894 	sxtb16	r8, r4, ror #8
 800c744:	fa2f f484 	sxtb16	r4, r4
 800c748:	e8a3 0116 	stmia.w	r3!, {r1, r2, r4, r8}
 800c74c:	3e01      	subs	r6, #1
 800c74e:	dcf0      	bgt.n	800c732 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x52>
 800c750:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c752:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800c754:	f04f 0300 	mov.w	r3, #0
 800c758:	4618      	mov	r0, r3
 800c75a:	f04f 0110 	mov.w	r1, #16
 800c75e:	e8b2 1700 	ldmia.w	r2!, {r8, r9, sl, ip}
 800c762:	fa00 f088 	sxtah	r0, r0, r8
 800c766:	fa00 f0a8 	sxtah	r0, r0, r8, ror #16
 800c76a:	fa00 f089 	sxtah	r0, r0, r9
 800c76e:	fa00 f0a9 	sxtah	r0, r0, r9, ror #16
 800c772:	fa03 f38a 	sxtah	r3, r3, sl
 800c776:	fa03 f3aa 	sxtah	r3, r3, sl, ror #16
 800c77a:	fa03 f38c 	sxtah	r3, r3, ip
 800c77e:	fa03 f3ac 	sxtah	r3, r3, ip, ror #16
 800c782:	3901      	subs	r1, #1
 800c784:	dceb      	bgt.n	800c75e <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x7e>
 800c786:	f1c0 0000 	rsb	r0, r0, #0
 800c78a:	f1c3 0300 	rsb	r3, r3, #0
 800c78e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800c790:	fb02 f000 	mul.w	r0, r2, r0
 800c794:	fb03 f202 	mul.w	r2, r3, r2
 800c798:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c79a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800c79e:	e9d1 3400 	ldrd	r3, r4, [r1]
 800c7a2:	4403      	add	r3, r0
 800c7a4:	4414      	add	r4, r2
 800c7a6:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
 800c7aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c7ac:	f04f 0305 	mov.w	r3, #5
 800c7b0:	f102 0203 	add.w	r2, r2, #3
 800c7b4:	441a      	add	r2, r3
 800c7b6:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800c7ba:	920b      	str	r2, [sp, #44]	; 0x2c
 800c7bc:	f04f 073e 	mov.w	r7, #62	; 0x3e
 800c7c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7c4:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800c7c6:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	; 0x24
 800c7ca:	46e2      	mov	sl, ip
 800c7cc:	46f3      	mov	fp, lr
 800c7ce:	f103 0301 	add.w	r3, r3, #1
 800c7d2:	930c      	str	r3, [sp, #48]	; 0x30
 800c7d4:	f04f 0804 	mov.w	r8, #4
 800c7d8:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 800c7dc:	fa2f f485 	sxtb16	r4, r5
 800c7e0:	f856 0b04 	ldr.w	r0, [r6], #4
 800c7e4:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c7e8:	f856 1b04 	ldr.w	r1, [r6], #4
 800c7ec:	fb24 aa00 	smlad	sl, r4, r0, sl
 800c7f0:	fb25 aa01 	smlad	sl, r5, r1, sl
 800c7f4:	f856 2b04 	ldr.w	r2, [r6], #4
 800c7f8:	f856 3b04 	ldr.w	r3, [r6], #4
 800c7fc:	fb24 bb02 	smlad	fp, r4, r2, fp
 800c800:	f859 4b04 	ldr.w	r4, [r9], #4
 800c804:	fb25 bb03 	smlad	fp, r5, r3, fp
 800c808:	fa2f f584 	sxtb16	r5, r4
 800c80c:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c810:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c814:	f856 0b04 	ldr.w	r0, [r6], #4
 800c818:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c81c:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 800c820:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c824:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c828:	fa2f f485 	sxtb16	r4, r5
 800c82c:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c830:	f856 1b04 	ldr.w	r1, [r6], #4
 800c834:	fb24 aa00 	smlad	sl, r4, r0, sl
 800c838:	f856 2b04 	ldr.w	r2, [r6], #4
 800c83c:	fb25 aa01 	smlad	sl, r5, r1, sl
 800c840:	f856 3b04 	ldr.w	r3, [r6], #4
 800c844:	fb24 bb02 	smlad	fp, r4, r2, fp
 800c848:	f859 4b04 	ldr.w	r4, [r9], #4
 800c84c:	fb25 bb03 	smlad	fp, r5, r3, fp
 800c850:	fa2f f584 	sxtb16	r5, r4
 800c854:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c858:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c85c:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c860:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 800c864:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c868:	f856 0b04 	ldr.w	r0, [r6], #4
 800c86c:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c870:	fa2f f485 	sxtb16	r4, r5
 800c874:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c878:	f856 1b04 	ldr.w	r1, [r6], #4
 800c87c:	fb24 aa00 	smlad	sl, r4, r0, sl
 800c880:	f856 2b04 	ldr.w	r2, [r6], #4
 800c884:	fb25 aa01 	smlad	sl, r5, r1, sl
 800c888:	f856 3b04 	ldr.w	r3, [r6], #4
 800c88c:	fb24 bb02 	smlad	fp, r4, r2, fp
 800c890:	f859 4b04 	ldr.w	r4, [r9], #4
 800c894:	fb25 bb03 	smlad	fp, r5, r3, fp
 800c898:	fa2f f584 	sxtb16	r5, r4
 800c89c:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c8a0:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c8a4:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c8a8:	f856 0b04 	ldr.w	r0, [r6], #4
 800c8ac:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c8b0:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
 800c8b4:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c8b8:	fa2f f485 	sxtb16	r4, r5
 800c8bc:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c8c0:	f856 1b04 	ldr.w	r1, [r6], #4
 800c8c4:	fb24 aa00 	smlad	sl, r4, r0, sl
 800c8c8:	f856 2b04 	ldr.w	r2, [r6], #4
 800c8cc:	fb25 aa01 	smlad	sl, r5, r1, sl
 800c8d0:	f856 3b04 	ldr.w	r3, [r6], #4
 800c8d4:	fb24 bb02 	smlad	fp, r4, r2, fp
 800c8d8:	f859 4b04 	ldr.w	r4, [r9], #4
 800c8dc:	fb25 bb03 	smlad	fp, r5, r3, fp
 800c8e0:	fa2f f584 	sxtb16	r5, r4
 800c8e4:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c8e8:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c8ec:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c8f0:	f1b8 0801 	subs.w	r8, r8, #1
 800c8f4:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c8f8:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c8fc:	f73f af6c 	bgt.w	800c7d8 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0xf8>
 800c900:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c902:	462e      	mov	r6, r5
 800c904:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c906:	1e90      	subs	r0, r2, #2
 800c908:	dc09      	bgt.n	800c91e <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x23e>
 800c90a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c90c:	f1c2 0202 	rsb	r2, r2, #2
 800c910:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800c914:	920c      	str	r2, [sp, #48]	; 0x30
 800c916:	f100 0005 	add.w	r0, r0, #5
 800c91a:	f105 0502 	add.w	r5, r5, #2
 800c91e:	900f      	str	r0, [sp, #60]	; 0x3c
 800c920:	9800      	ldr	r0, [sp, #0]
 800c922:	9902      	ldr	r1, [sp, #8]
 800c924:	9a04      	ldr	r2, [sp, #16]
 800c926:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c928:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800c92c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800c930:	fb5c 0c01 	smmla	ip, ip, r1, r0
 800c934:	fb5a 0a01 	smmla	sl, sl, r1, r0
 800c938:	fa4c fc02 	asr.w	ip, ip, r2
 800c93c:	fa4a fa02 	asr.w	sl, sl, r2
 800c940:	f30c 0c07 	ssat	ip, #8, ip
 800c944:	f30a 0a07 	ssat	sl, #8, sl
 800c948:	f886 c000 	strb.w	ip, [r6]
 800c94c:	f884 a000 	strb.w	sl, [r4]
 800c950:	9801      	ldr	r0, [sp, #4]
 800c952:	9903      	ldr	r1, [sp, #12]
 800c954:	9a05      	ldr	r2, [sp, #20]
 800c956:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800c95a:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800c95e:	fb5e 0e01 	smmla	lr, lr, r1, r0
 800c962:	fb5b 0b01 	smmla	fp, fp, r1, r0
 800c966:	fa4e fe02 	asr.w	lr, lr, r2
 800c96a:	fa4b fb02 	asr.w	fp, fp, r2
 800c96e:	f30e 0e07 	ssat	lr, #8, lr
 800c972:	f30b 0b07 	ssat	fp, #8, fp
 800c976:	f886 e0bd 	strb.w	lr, [r6, #189]	; 0xbd
 800c97a:	f884 b0bd 	strb.w	fp, [r4, #189]	; 0xbd
 800c97e:	f105 0302 	add.w	r3, r5, #2
 800c982:	930b      	str	r3, [sp, #44]	; 0x2c
 800c984:	f109 0940 	add.w	r9, r9, #64	; 0x40
 800c988:	3f01      	subs	r7, #1
 800c98a:	f47f af1a 	bne.w	800c7c2 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0xe2>
 800c98e:	f8cd 9020 	str.w	r9, [sp, #32]
 800c992:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c996:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 800c998:	e9dd ce09 	ldrd	ip, lr, [sp, #36]	; 0x24
 800c99c:	f04f 0810 	mov.w	r8, #16
 800c9a0:	f859 4b04 	ldr.w	r4, [r9], #4
 800c9a4:	f856 0b04 	ldr.w	r0, [r6], #4
 800c9a8:	f856 1b04 	ldr.w	r1, [r6], #4
 800c9ac:	f856 2b04 	ldr.w	r2, [r6], #4
 800c9b0:	f856 3b04 	ldr.w	r3, [r6], #4
 800c9b4:	fa2f f584 	sxtb16	r5, r4
 800c9b8:	fa2f f494 	sxtb16	r4, r4, ror #8
 800c9bc:	fb25 cc00 	smlad	ip, r5, r0, ip
 800c9c0:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c9c4:	fb24 cc01 	smlad	ip, r4, r1, ip
 800c9c8:	fb24 ee03 	smlad	lr, r4, r3, lr
 800c9cc:	f1b8 0801 	subs.w	r8, r8, #1
 800c9d0:	dce6      	bgt.n	800c9a0 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x2c0>
 800c9d2:	9800      	ldr	r0, [sp, #0]
 800c9d4:	9902      	ldr	r1, [sp, #8]
 800c9d6:	9a04      	ldr	r2, [sp, #16]
 800c9d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c9da:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800c9de:	fb5c 0c01 	smmla	ip, ip, r1, r0
 800c9e2:	fa4c fc02 	asr.w	ip, ip, r2
 800c9e6:	f30c 0c07 	ssat	ip, #8, ip
 800c9ea:	f886 c000 	strb.w	ip, [r6]
 800c9ee:	9801      	ldr	r0, [sp, #4]
 800c9f0:	9903      	ldr	r1, [sp, #12]
 800c9f2:	9a05      	ldr	r2, [sp, #20]
 800c9f4:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800c9f8:	fb5e 0e01 	smmla	lr, lr, r1, r0
 800c9fc:	fa4e fe02 	asr.w	lr, lr, r2
 800ca00:	f30e 0e07 	ssat	lr, #8, lr
 800ca04:	f886 e0bd 	strb.w	lr, [r6, #189]	; 0xbd
 800ca08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca0a:	f103 0380 	add.w	r3, r3, #128	; 0x80
 800ca0e:	9313      	str	r3, [sp, #76]	; 0x4c
 800ca10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ca14:	f503 73bd 	add.w	r3, r3, #378	; 0x17a
 800ca18:	9312      	str	r3, [sp, #72]	; 0x48
 800ca1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca1c:	f102 0201 	add.w	r2, r2, #1
 800ca20:	920d      	str	r2, [sp, #52]	; 0x34
 800ca22:	2a20      	cmp	r2, #32
 800ca24:	f6ff ae68 	blt.w	800c6f8 <st_sssa8_ch_nn_mat_mult_pw_nt_t_KWS+0x18>
 800ca28:	2000      	movs	r0, #0
 800ca2a:	b019      	add	sp, #100	; 0x64
 800ca2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca30 <ai_array_to_buffer_fmt>:
 800ca30:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d053      	beq.n	800cae0 <ai_array_to_buffer_fmt+0xb0>
 800ca38:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800ca3c:	4a2b      	ldr	r2, [pc, #172]	; (800caec <ai_array_to_buffer_fmt+0xbc>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d010      	beq.n	800ca64 <ai_array_to_buffer_fmt+0x34>
 800ca42:	dc21      	bgt.n	800ca88 <ai_array_to_buffer_fmt+0x58>
 800ca44:	4a2a      	ldr	r2, [pc, #168]	; (800caf0 <ai_array_to_buffer_fmt+0xc0>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d00c      	beq.n	800ca64 <ai_array_to_buffer_fmt+0x34>
 800ca4a:	dd0f      	ble.n	800ca6c <ai_array_to_buffer_fmt+0x3c>
 800ca4c:	4a29      	ldr	r2, [pc, #164]	; (800caf4 <ai_array_to_buffer_fmt+0xc4>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d008      	beq.n	800ca64 <ai_array_to_buffer_fmt+0x34>
 800ca52:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d004      	beq.n	800ca64 <ai_array_to_buffer_fmt+0x34>
 800ca5a:	4a27      	ldr	r2, [pc, #156]	; (800caf8 <ai_array_to_buffer_fmt+0xc8>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	bf0c      	ite	eq
 800ca60:	4613      	moveq	r3, r2
 800ca62:	2340      	movne	r3, #64	; 0x40
 800ca64:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ca68:	4318      	orrs	r0, r3
 800ca6a:	4770      	bx	lr
 800ca6c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d0f7      	beq.n	800ca64 <ai_array_to_buffer_fmt+0x34>
 800ca74:	dd2a      	ble.n	800cacc <ai_array_to_buffer_fmt+0x9c>
 800ca76:	4a21      	ldr	r2, [pc, #132]	; (800cafc <ai_array_to_buffer_fmt+0xcc>)
 800ca78:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	bf0c      	ite	eq
 800ca80:	4613      	moveq	r3, r2
 800ca82:	2340      	movne	r3, #64	; 0x40
 800ca84:	4318      	orrs	r0, r3
 800ca86:	4770      	bx	lr
 800ca88:	4a1d      	ldr	r2, [pc, #116]	; (800cb00 <ai_array_to_buffer_fmt+0xd0>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d0ea      	beq.n	800ca64 <ai_array_to_buffer_fmt+0x34>
 800ca8e:	dd0f      	ble.n	800cab0 <ai_array_to_buffer_fmt+0x80>
 800ca90:	4a1c      	ldr	r2, [pc, #112]	; (800cb04 <ai_array_to_buffer_fmt+0xd4>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d0e6      	beq.n	800ca64 <ai_array_to_buffer_fmt+0x34>
 800ca96:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d0e2      	beq.n	800ca64 <ai_array_to_buffer_fmt+0x34>
 800ca9e:	4a1a      	ldr	r2, [pc, #104]	; (800cb08 <ai_array_to_buffer_fmt+0xd8>)
 800caa0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800caa4:	4293      	cmp	r3, r2
 800caa6:	bf0c      	ite	eq
 800caa8:	4613      	moveq	r3, r2
 800caaa:	2340      	movne	r3, #64	; 0x40
 800caac:	4318      	orrs	r0, r3
 800caae:	4770      	bx	lr
 800cab0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d0d5      	beq.n	800ca64 <ai_array_to_buffer_fmt+0x34>
 800cab8:	3207      	adds	r2, #7
 800caba:	4293      	cmp	r3, r2
 800cabc:	d0d2      	beq.n	800ca64 <ai_array_to_buffer_fmt+0x34>
 800cabe:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 800cac2:	4293      	cmp	r3, r2
 800cac4:	bf0c      	ite	eq
 800cac6:	4613      	moveq	r3, r2
 800cac8:	2340      	movne	r3, #64	; 0x40
 800caca:	e7cb      	b.n	800ca64 <ai_array_to_buffer_fmt+0x34>
 800cacc:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d0c7      	beq.n	800ca64 <ai_array_to_buffer_fmt+0x34>
 800cad4:	3280      	adds	r2, #128	; 0x80
 800cad6:	4293      	cmp	r3, r2
 800cad8:	bf0c      	ite	eq
 800cada:	4613      	moveq	r3, r2
 800cadc:	2340      	movne	r3, #64	; 0x40
 800cade:	e7c1      	b.n	800ca64 <ai_array_to_buffer_fmt+0x34>
 800cae0:	4b0a      	ldr	r3, [pc, #40]	; (800cb0c <ai_array_to_buffer_fmt+0xdc>)
 800cae2:	4003      	ands	r3, r0
 800cae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cae8:	e7bc      	b.n	800ca64 <ai_array_to_buffer_fmt+0x34>
 800caea:	bf00      	nop
 800caec:	00840040 	.word	0x00840040
 800caf0:	00040840 	.word	0x00040840
 800caf4:	00041040 	.word	0x00041040
 800caf8:	0004084f 	.word	0x0004084f
 800cafc:	00040447 	.word	0x00040447
 800cb00:	00840840 	.word	0x00840840
 800cb04:	00841040 	.word	0x00841040
 800cb08:	0084084f 	.word	0x0084084f
 800cb0c:	00803fff 	.word	0x00803fff

0800cb10 <ai_array_get_byte_size>:
 800cb10:	b319      	cbz	r1, 800cb5a <ai_array_get_byte_size+0x4a>
 800cb12:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800cb16:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800cb1a:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800cb1e:	11c0      	asrs	r0, r0, #7
 800cb20:	fb01 f303 	mul.w	r3, r1, r3
 800cb24:	2a04      	cmp	r2, #4
 800cb26:	f103 0307 	add.w	r3, r3, #7
 800cb2a:	f023 0307 	bic.w	r3, r3, #7
 800cb2e:	fa23 f10c 	lsr.w	r1, r3, ip
 800cb32:	d00b      	beq.n	800cb4c <ai_array_get_byte_size+0x3c>
 800cb34:	2a08      	cmp	r2, #8
 800cb36:	d002      	beq.n	800cb3e <ai_array_get_byte_size+0x2e>
 800cb38:	3107      	adds	r1, #7
 800cb3a:	08c8      	lsrs	r0, r1, #3
 800cb3c:	4770      	bx	lr
 800cb3e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800cb42:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800cb46:	3107      	adds	r1, #7
 800cb48:	08c8      	lsrs	r0, r1, #3
 800cb4a:	4770      	bx	lr
 800cb4c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800cb50:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800cb54:	3107      	adds	r1, #7
 800cb56:	08c8      	lsrs	r0, r1, #3
 800cb58:	4770      	bx	lr
 800cb5a:	4608      	mov	r0, r1
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop

0800cb60 <ai_array_get_data_byte_size>:
 800cb60:	b169      	cbz	r1, 800cb7e <ai_array_get_data_byte_size+0x1e>
 800cb62:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800cb66:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800cb6a:	fb03 f101 	mul.w	r1, r3, r1
 800cb6e:	1dcb      	adds	r3, r1, #7
 800cb70:	f023 0307 	bic.w	r3, r3, #7
 800cb74:	fa23 f000 	lsr.w	r0, r3, r0
 800cb78:	3007      	adds	r0, #7
 800cb7a:	08c0      	lsrs	r0, r0, #3
 800cb7c:	4770      	bx	lr
 800cb7e:	4608      	mov	r0, r1
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop

0800cb84 <_lite_kernel_nl_softmax_is8os8>:
 800cb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb88:	b09b      	sub	sp, #108	; 0x6c
 800cb8a:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800cb8e:	4411      	add	r1, r2
 800cb90:	fb03 f202 	mul.w	r2, r3, r2
 800cb94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800cb96:	9118      	str	r1, [sp, #96]	; 0x60
 800cb98:	f513 7f80 	cmn.w	r3, #256	; 0x100
 800cb9c:	9924      	ldr	r1, [sp, #144]	; 0x90
 800cb9e:	9015      	str	r0, [sp, #84]	; 0x54
 800cba0:	bfac      	ite	ge
 800cba2:	425b      	negge	r3, r3
 800cba4:	f44f 7380 	movlt.w	r3, #256	; 0x100
 800cba8:	fb01 f303 	mul.w	r3, r1, r3
 800cbac:	429a      	cmp	r2, r3
 800cbae:	f200 83ed 	bhi.w	800d38c <_lite_kernel_nl_softmax_is8os8+0x808>
 800cbb2:	9b03      	ldr	r3, [sp, #12]
 800cbb4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	f080 8365 	bcs.w	800d286 <_lite_kernel_nl_softmax_is8os8+0x702>
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	9904      	ldr	r1, [sp, #16]
 800cbc0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800cbc2:	f8df a3b4 	ldr.w	sl, [pc, #948]	; 800cf78 <_lite_kernel_nl_softmax_is8os8+0x3f4>
 800cbc6:	1f1a      	subs	r2, r3, #4
 800cbc8:	1e4b      	subs	r3, r1, #1
 800cbca:	18c3      	adds	r3, r0, r3
 800cbcc:	9217      	str	r2, [sp, #92]	; 0x5c
 800cbce:	9316      	str	r3, [sp, #88]	; 0x58
 800cbd0:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800cbd4:	9319      	str	r3, [sp, #100]	; 0x64
 800cbd6:	9b03      	ldr	r3, [sp, #12]
 800cbd8:	9904      	ldr	r1, [sp, #16]
 800cbda:	f993 2000 	ldrsb.w	r2, [r3]
 800cbde:	2901      	cmp	r1, #1
 800cbe0:	9214      	str	r2, [sp, #80]	; 0x50
 800cbe2:	f240 839d 	bls.w	800d320 <_lite_kernel_nl_softmax_is8os8+0x79c>
 800cbe6:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cbe8:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
 800cbec:	428a      	cmp	r2, r1
 800cbee:	bfb8      	it	lt
 800cbf0:	460a      	movlt	r2, r1
 800cbf2:	4298      	cmp	r0, r3
 800cbf4:	d1f8      	bne.n	800cbe8 <_lite_kernel_nl_softmax_is8os8+0x64>
 800cbf6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800cbf8:	9214      	str	r2, [sp, #80]	; 0x50
 800cbfa:	4413      	add	r3, r2
 800cbfc:	9306      	str	r3, [sp, #24]
 800cbfe:	9b03      	ldr	r3, [sp, #12]
 800cc00:	f103 3bff 	add.w	fp, r3, #4294967295
 800cc04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc06:	9301      	str	r3, [sp, #4]
 800cc08:	2300      	movs	r3, #0
 800cc0a:	46de      	mov	lr, fp
 800cc0c:	9305      	str	r3, [sp, #20]
 800cc0e:	e105      	b.n	800ce1c <_lite_kernel_nl_softmax_is8os8+0x298>
 800cc10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc12:	1a9b      	subs	r3, r3, r2
 800cc14:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800cc16:	4093      	lsls	r3, r2
 800cc18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cc1a:	405a      	eors	r2, r3
 800cc1c:	0fd2      	lsrs	r2, r2, #31
 800cc1e:	2a00      	cmp	r2, #0
 800cc20:	bf0b      	itete	eq
 800cc22:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 800cc26:	4651      	movne	r1, sl
 800cc28:	2200      	moveq	r2, #0
 800cc2a:	f04f 32ff 	movne.w	r2, #4294967295
 800cc2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc32:	f040 80fd 	bne.w	800ce30 <_lite_kernel_nl_softmax_is8os8+0x2ac>
 800cc36:	9826      	ldr	r0, [sp, #152]	; 0x98
 800cc38:	4298      	cmp	r0, r3
 800cc3a:	f040 80f9 	bne.w	800ce30 <_lite_kernel_nl_softmax_is8os8+0x2ac>
 800cc3e:	4bc2      	ldr	r3, [pc, #776]	; (800cf48 <_lite_kernel_nl_softmax_is8os8+0x3c4>)
 800cc40:	2200      	movs	r2, #0
 800cc42:	f04f 35ff 	mov.w	r5, #4294967295
 800cc46:	4fc1      	ldr	r7, [pc, #772]	; (800cf4c <_lite_kernel_nl_softmax_is8os8+0x3c8>)
 800cc48:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc4a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800cc4e:	4bc0      	ldr	r3, [pc, #768]	; (800cf50 <_lite_kernel_nl_softmax_is8os8+0x3cc>)
 800cc50:	4694      	mov	ip, r2
 800cc52:	462e      	mov	r6, r5
 800cc54:	46ab      	mov	fp, r5
 800cc56:	9313      	str	r3, [sp, #76]	; 0x4c
 800cc58:	46a8      	mov	r8, r5
 800cc5a:	4bbe      	ldr	r3, [pc, #760]	; (800cf54 <_lite_kernel_nl_softmax_is8os8+0x3d0>)
 800cc5c:	4691      	mov	r9, r2
 800cc5e:	2001      	movs	r0, #1
 800cc60:	9210      	str	r2, [sp, #64]	; 0x40
 800cc62:	e9cd 520d 	strd	r5, r2, [sp, #52]	; 0x34
 800cc66:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
 800cc6a:	e9cd 5209 	strd	r5, r2, [sp, #36]	; 0x24
 800cc6e:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
 800cc72:	e9cd 2207 	strd	r2, r2, [sp, #28]
 800cc76:	4282      	cmp	r2, r0
 800cc78:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cc7a:	bfc8      	it	gt
 800cc7c:	3101      	addgt	r1, #1
 800cc7e:	f1bc 0f00 	cmp.w	ip, #0
 800cc82:	bf0b      	itete	eq
 800cc84:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 800cc88:	4652      	movne	r2, sl
 800cc8a:	f04f 0c00 	moveq.w	ip, #0
 800cc8e:	f04f 3cff 	movne.w	ip, #4294967295
 800cc92:	1882      	adds	r2, r0, r2
 800cc94:	eb43 0c0c 	adc.w	ip, r3, ip
 800cc98:	f1bc 0f00 	cmp.w	ip, #0
 800cc9c:	da05      	bge.n	800ccaa <_lite_kernel_nl_softmax_is8os8+0x126>
 800cc9e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cca2:	18d3      	adds	r3, r2, r3
 800cca4:	461a      	mov	r2, r3
 800cca6:	f14c 0c00 	adc.w	ip, ip, #0
 800ccaa:	0fd2      	lsrs	r2, r2, #31
 800ccac:	48aa      	ldr	r0, [pc, #680]	; (800cf58 <_lite_kernel_nl_softmax_is8os8+0x3d4>)
 800ccae:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800ccb2:	440a      	add	r2, r1
 800ccb4:	0fd3      	lsrs	r3, r2, #31
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	bf0b      	itete	eq
 800ccba:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 800ccbe:	4653      	movne	r3, sl
 800ccc0:	2100      	moveq	r1, #0
 800ccc2:	f04f 31ff 	movne.w	r1, #4294967295
 800ccc6:	fbc2 3100 	smlal	r3, r1, r2, r0
 800ccca:	2900      	cmp	r1, #0
 800cccc:	da05      	bge.n	800ccda <_lite_kernel_nl_softmax_is8os8+0x156>
 800ccce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ccd2:	189a      	adds	r2, r3, r2
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	f141 0100 	adc.w	r1, r1, #0
 800ccda:	0fdb      	lsrs	r3, r3, #31
 800ccdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ccde:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800cce2:	441a      	add	r2, r3
 800cce4:	07d4      	lsls	r4, r2, #31
 800cce6:	ea4f 0362 	mov.w	r3, r2, asr #1
 800ccea:	d502      	bpl.n	800ccf2 <_lite_kernel_nl_softmax_is8os8+0x16e>
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	bfa8      	it	ge
 800ccf0:	3301      	addge	r3, #1
 800ccf2:	443b      	add	r3, r7
 800ccf4:	4899      	ldr	r0, [pc, #612]	; (800cf5c <_lite_kernel_nl_softmax_is8os8+0x3d8>)
 800ccf6:	0fda      	lsrs	r2, r3, #31
 800ccf8:	2a00      	cmp	r2, #0
 800ccfa:	bf0b      	itete	eq
 800ccfc:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 800cd00:	4652      	movne	r2, sl
 800cd02:	2100      	moveq	r1, #0
 800cd04:	f04f 31ff 	movne.w	r1, #4294967295
 800cd08:	fbc3 2100 	smlal	r2, r1, r3, r0
 800cd0c:	2900      	cmp	r1, #0
 800cd0e:	da05      	bge.n	800cd1c <_lite_kernel_nl_softmax_is8os8+0x198>
 800cd10:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cd14:	18d3      	adds	r3, r2, r3
 800cd16:	461a      	mov	r2, r3
 800cd18:	f141 0100 	adc.w	r1, r1, #0
 800cd1c:	0fd2      	lsrs	r2, r2, #31
 800cd1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd22:	488f      	ldr	r0, [pc, #572]	; (800cf60 <_lite_kernel_nl_softmax_is8os8+0x3dc>)
 800cd24:	f04f 0cf2 	mov.w	ip, #242	; 0xf2
 800cd28:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	461f      	mov	r7, r3
 800cd30:	f102 42e2 	add.w	r2, r2, #1895825408	; 0x71000000
 800cd34:	460c      	mov	r4, r1
 800cd36:	f5a2 2225 	sub.w	r2, r2, #675840	; 0xa5000
 800cd3a:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 800cd3e:	fbc2 7400 	smlal	r7, r4, r2, r0
 800cd42:	0fff      	lsrs	r7, r7, #31
 800cd44:	ea08 0802 	and.w	r8, r8, r2
 800cd48:	4886      	ldr	r0, [pc, #536]	; (800cf64 <_lite_kernel_nl_softmax_is8os8+0x3e0>)
 800cd4a:	ea47 0744 	orr.w	r7, r7, r4, lsl #1
 800cd4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cd50:	461a      	mov	r2, r3
 800cd52:	403c      	ands	r4, r7
 800cd54:	460f      	mov	r7, r1
 800cd56:	ea88 0404 	eor.w	r4, r8, r4
 800cd5a:	fbc4 2700 	smlal	r2, r7, r4, r0
 800cd5e:	0fd2      	lsrs	r2, r2, #31
 800cd60:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cd62:	4026      	ands	r6, r4
 800cd64:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 800cd68:	460c      	mov	r4, r1
 800cd6a:	4010      	ands	r0, r2
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	4070      	eors	r0, r6
 800cd70:	4e7d      	ldr	r6, [pc, #500]	; (800cf68 <_lite_kernel_nl_softmax_is8os8+0x3e4>)
 800cd72:	fbc0 2406 	smlal	r2, r4, r0, r6
 800cd76:	0fd2      	lsrs	r2, r2, #31
 800cd78:	ea0b 0b00 	and.w	fp, fp, r0
 800cd7c:	4e7b      	ldr	r6, [pc, #492]	; (800cf6c <_lite_kernel_nl_softmax_is8os8+0x3e8>)
 800cd7e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800cd82:	460c      	mov	r4, r1
 800cd84:	ea09 0902 	and.w	r9, r9, r2
 800cd88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd8a:	ea8b 0909 	eor.w	r9, fp, r9
 800cd8e:	ea02 0009 	and.w	r0, r2, r9
 800cd92:	461a      	mov	r2, r3
 800cd94:	fbc9 2406 	smlal	r2, r4, r9, r6
 800cd98:	0fd2      	lsrs	r2, r2, #31
 800cd9a:	4e75      	ldr	r6, [pc, #468]	; (800cf70 <_lite_kernel_nl_softmax_is8os8+0x3ec>)
 800cd9c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800cda0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800cda2:	4014      	ands	r4, r2
 800cda4:	4622      	mov	r2, r4
 800cda6:	460c      	mov	r4, r1
 800cda8:	4042      	eors	r2, r0
 800cdaa:	4618      	mov	r0, r3
 800cdac:	fbc2 0406 	smlal	r0, r4, r2, r6
 800cdb0:	0fc0      	lsrs	r0, r0, #31
 800cdb2:	4015      	ands	r5, r2
 800cdb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cdb6:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
 800cdba:	4e6e      	ldr	r6, [pc, #440]	; (800cf74 <_lite_kernel_nl_softmax_is8os8+0x3f0>)
 800cdbc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cdbe:	4002      	ands	r2, r0
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	406a      	eors	r2, r5
 800cdc4:	460d      	mov	r5, r1
 800cdc6:	fbc2 0506 	smlal	r0, r5, r2, r6
 800cdca:	0fc0      	lsrs	r0, r0, #31
 800cdcc:	4014      	ands	r4, r2
 800cdce:	9a08      	ldr	r2, [sp, #32]
 800cdd0:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 800cdd4:	4002      	ands	r2, r0
 800cdd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdd8:	4062      	eors	r2, r4
 800cdda:	fbc2 310c 	smlal	r3, r1, r2, ip
 800cdde:	0fdb      	lsrs	r3, r3, #31
 800cde0:	4010      	ands	r0, r2
 800cde2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800cde6:	9907      	ldr	r1, [sp, #28]
 800cde8:	4602      	mov	r2, r0
 800cdea:	4019      	ands	r1, r3
 800cdec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdee:	404a      	eors	r2, r1
 800cdf0:	9905      	ldr	r1, [sp, #20]
 800cdf2:	401a      	ands	r2, r3
 800cdf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdf6:	405a      	eors	r2, r3
 800cdf8:	1313      	asrs	r3, r2, #12
 800cdfa:	0510      	lsls	r0, r2, #20
 800cdfc:	bf48      	it	mi
 800cdfe:	3301      	addmi	r3, #1
 800ce00:	4419      	add	r1, r3
 800ce02:	9105      	str	r1, [sp, #20]
 800ce04:	9b01      	ldr	r3, [sp, #4]
 800ce06:	f843 2f04 	str.w	r2, [r3, #4]!
 800ce0a:	9301      	str	r3, [sp, #4]
 800ce0c:	9b02      	ldr	r3, [sp, #8]
 800ce0e:	9a03      	ldr	r2, [sp, #12]
 800ce10:	3302      	adds	r3, #2
 800ce12:	1a9b      	subs	r3, r3, r2
 800ce14:	9a04      	ldr	r2, [sp, #16]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	f240 80b0 	bls.w	800cf7c <_lite_kernel_nl_softmax_is8os8+0x3f8>
 800ce1c:	9a06      	ldr	r2, [sp, #24]
 800ce1e:	f8cd e008 	str.w	lr, [sp, #8]
 800ce22:	f91e 3f01 	ldrsb.w	r3, [lr, #1]!
 800ce26:	429a      	cmp	r2, r3
 800ce28:	f77f aef2 	ble.w	800cc10 <_lite_kernel_nl_softmax_is8os8+0x8c>
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	e7e9      	b.n	800ce04 <_lite_kernel_nl_softmax_is8os8+0x280>
 800ce30:	9826      	ldr	r0, [sp, #152]	; 0x98
 800ce32:	fbc3 1200 	smlal	r1, r2, r3, r0
 800ce36:	2a00      	cmp	r2, #0
 800ce38:	da05      	bge.n	800ce46 <_lite_kernel_nl_softmax_is8os8+0x2c2>
 800ce3a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ce3e:	18cb      	adds	r3, r1, r3
 800ce40:	4619      	mov	r1, r3
 800ce42:	f142 0200 	adc.w	r2, r2, #0
 800ce46:	0fc9      	lsrs	r1, r1, #31
 800ce48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ce4c:	2500      	movs	r5, #0
 800ce4e:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 800ce52:	f041 467f 	orr.w	r6, r1, #4278190080	; 0xff000000
 800ce56:	0172      	lsls	r2, r6, #5
 800ce58:	1a76      	subs	r6, r6, r1
 800ce5a:	f102 5780 	add.w	r7, r2, #268435456	; 0x10000000
 800ce5e:	fbc7 3507 	smlal	r3, r5, r7, r7
 800ce62:	2d00      	cmp	r5, #0
 800ce64:	da05      	bge.n	800ce72 <_lite_kernel_nl_softmax_is8os8+0x2ee>
 800ce66:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ce6a:	189a      	adds	r2, r3, r2
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	f145 0500 	adc.w	r5, r5, #0
 800ce72:	0fdb      	lsrs	r3, r3, #31
 800ce74:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 800ce78:	17ed      	asrs	r5, r5, #31
 800ce7a:	fba3 2003 	umull	r2, r0, r3, r3
 800ce7e:	fb03 f405 	mul.w	r4, r3, r5
 800ce82:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
 800ce86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce88:	eb40 0044 	adc.w	r0, r0, r4, lsl #1
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	da05      	bge.n	800ce9c <_lite_kernel_nl_softmax_is8os8+0x318>
 800ce90:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800ce94:	1914      	adds	r4, r2, r4
 800ce96:	4622      	mov	r2, r4
 800ce98:	f140 0000 	adc.w	r0, r0, #0
 800ce9c:	0fd2      	lsrs	r2, r2, #31
 800ce9e:	fb07 f505 	mul.w	r5, r7, r5
 800cea2:	ea83 0c07 	eor.w	ip, r3, r7
 800cea6:	fab1 f181 	clz	r1, r1
 800ceaa:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800ceae:	f3c6 7b00 	ubfx	fp, r6, #28, #1
 800ceb2:	17f8      	asrs	r0, r7, #31
 800ceb4:	f3c6 7940 	ubfx	r9, r6, #29, #1
 800ceb8:	0949      	lsrs	r1, r1, #5
 800ceba:	f3c6 6880 	ubfx	r8, r6, #26, #1
 800cebe:	fb03 5500 	mla	r5, r3, r0, r5
 800cec2:	f3c6 6400 	ubfx	r4, r6, #24, #1
 800cec6:	f3c6 6040 	ubfx	r0, r6, #25, #1
 800ceca:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 800cece:	9507      	str	r5, [sp, #28]
 800ced0:	f3c6 7580 	ubfx	r5, r6, #30, #1
 800ced4:	9509      	str	r5, [sp, #36]	; 0x24
 800ced6:	fba7 5303 	umull	r5, r3, r7, r3
 800ceda:	9513      	str	r5, [sp, #76]	; 0x4c
 800cedc:	9d07      	ldr	r5, [sp, #28]
 800cede:	442b      	add	r3, r5
 800cee0:	424d      	negs	r5, r1
 800cee2:	3901      	subs	r1, #1
 800cee4:	910d      	str	r1, [sp, #52]	; 0x34
 800cee6:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 800ceea:	f10b 35ff 	add.w	r5, fp, #4294967295
 800ceee:	9110      	str	r1, [sp, #64]	; 0x40
 800cef0:	f3c6 61c0 	ubfx	r1, r6, #27, #1
 800cef4:	f346 66c0 	sbfx	r6, r6, #27, #1
 800cef8:	3901      	subs	r1, #1
 800cefa:	960e      	str	r6, [sp, #56]	; 0x38
 800cefc:	f1cb 0600 	rsb	r6, fp, #0
 800cf00:	f108 3bff 	add.w	fp, r8, #4294967295
 800cf04:	910b      	str	r1, [sp, #44]	; 0x2c
 800cf06:	9611      	str	r6, [sp, #68]	; 0x44
 800cf08:	f109 36ff 	add.w	r6, r9, #4294967295
 800cf0c:	1091      	asrs	r1, r2, #2
 800cf0e:	f002 0203 	and.w	r2, r2, #3
 800cf12:	960c      	str	r6, [sp, #48]	; 0x30
 800cf14:	f1c9 0600 	rsb	r6, r9, #0
 800cf18:	f1c8 0900 	rsb	r9, r8, #0
 800cf1c:	f104 38ff 	add.w	r8, r4, #4294967295
 800cf20:	9608      	str	r6, [sp, #32]
 800cf22:	f100 36ff 	add.w	r6, r0, #4294967295
 800cf26:	f1c0 0000 	rsb	r0, r0, #0
 800cf2a:	9012      	str	r0, [sp, #72]	; 0x48
 800cf2c:	f1c4 0000 	rsb	r0, r4, #0
 800cf30:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800cf32:	900a      	str	r0, [sp, #40]	; 0x28
 800cf34:	f104 30ff 	add.w	r0, r4, #4294967295
 800cf38:	9009      	str	r0, [sp, #36]	; 0x24
 800cf3a:	f1c4 0000 	rsb	r0, r4, #0
 800cf3e:	9007      	str	r0, [sp, #28]
 800cf40:	bf54      	ite	pl
 800cf42:	2001      	movpl	r0, #1
 800cf44:	2002      	movmi	r0, #2
 800cf46:	e696      	b.n	800cc76 <_lite_kernel_nl_softmax_is8os8+0xf2>
 800cf48:	01fffff8 	.word	0x01fffff8
 800cf4c:	0fffffe0 	.word	0x0fffffe0
 800cf50:	40000100 	.word	0x40000100
 800cf54:	001fffff 	.word	0x001fffff
 800cf58:	2aaaaaab 	.word	0x2aaaaaab
 800cf5c:	70f5a894 	.word	0x70f5a894
 800cf60:	63afbe7b 	.word	0x63afbe7b
 800cf64:	4da2cbf2 	.word	0x4da2cbf2
 800cf68:	2f16ac6c 	.word	0x2f16ac6c
 800cf6c:	1152aaa4 	.word	0x1152aaa4
 800cf70:	02582ab7 	.word	0x02582ab7
 800cf74:	000afe11 	.word	0x000afe11
 800cf78:	c0000001 	.word	0xc0000001
 800cf7c:	9b05      	ldr	r3, [sp, #20]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f000 81d1 	beq.w	800d326 <_lite_kernel_nl_softmax_is8os8+0x7a2>
 800cf84:	fab3 f983 	clz	r9, r3
 800cf88:	fa03 f309 	lsl.w	r3, r3, r9
 800cf8c:	f1c9 0823 	rsb	r8, r9, #35	; 0x23
 800cf90:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 800cf94:	17d4      	asrs	r4, r2, #31
 800cf96:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cf9a:	bf08      	it	eq
 800cf9c:	2b00      	cmpeq	r3, #0
 800cf9e:	f000 81c6 	beq.w	800d32e <_lite_kernel_nl_softmax_is8os8+0x7aa>
 800cfa2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800cfa6:	4bc2      	ldr	r3, [pc, #776]	; (800d2b0 <_lite_kernel_nl_softmax_is8os8+0x72c>)
 800cfa8:	f144 0400 	adc.w	r4, r4, #0
 800cfac:	0852      	lsrs	r2, r2, #1
 800cfae:	ea42 72c4 	orr.w	r2, r2, r4, lsl #31
 800cfb2:	1064      	asrs	r4, r4, #1
 800cfb4:	4251      	negs	r1, r2
 800cfb6:	4616      	mov	r6, r2
 800cfb8:	fb03 1104 	mla	r1, r3, r4, r1
 800cfbc:	fba2 5303 	umull	r5, r3, r2, r3
 800cfc0:	eb15 050a 	adds.w	r5, r5, sl
 800cfc4:	440b      	add	r3, r1
 800cfc6:	f163 0300 	sbc.w	r3, r3, #0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	da05      	bge.n	800cfda <_lite_kernel_nl_softmax_is8os8+0x456>
 800cfce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cfd2:	1869      	adds	r1, r5, r1
 800cfd4:	460d      	mov	r5, r1
 800cfd6:	f143 0300 	adc.w	r3, r3, #0
 800cfda:	0fed      	lsrs	r5, r5, #31
 800cfdc:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
 800cfe0:	f105 375a 	add.w	r7, r5, #1515870810	; 0x5a5a5a5a
 800cfe4:	17f8      	asrs	r0, r7, #31
 800cfe6:	fba2 1c07 	umull	r1, ip, r2, r7
 800cfea:	463b      	mov	r3, r7
 800cfec:	fb02 fe00 	mul.w	lr, r2, r0
 800cff0:	f111 4180 	adds.w	r1, r1, #1073741824	; 0x40000000
 800cff4:	fb07 ee04 	mla	lr, r7, r4, lr
 800cff8:	eb4e 0c0c 	adc.w	ip, lr, ip
 800cffc:	f1bc 0f00 	cmp.w	ip, #0
 800d000:	da06      	bge.n	800d010 <_lite_kernel_nl_softmax_is8os8+0x48c>
 800d002:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 800d006:	eb11 0e0e 	adds.w	lr, r1, lr
 800d00a:	4671      	mov	r1, lr
 800d00c:	f14c 0c00 	adc.w	ip, ip, #0
 800d010:	0fc9      	lsrs	r1, r1, #31
 800d012:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 800d016:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 800d01a:	ea81 0c07 	eor.w	ip, r1, r7
 800d01e:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 800d022:	f1bc 0f00 	cmp.w	ip, #0
 800d026:	bf0b      	itete	eq
 800d028:	f04f 4c80 	moveq.w	ip, #1073741824	; 0x40000000
 800d02c:	46d4      	movne	ip, sl
 800d02e:	f04f 0b00 	moveq.w	fp, #0
 800d032:	f04f 3bff 	movne.w	fp, #4294967295
 800d036:	fb01 f000 	mul.w	r0, r1, r0
 800d03a:	ea4f 7ee1 	mov.w	lr, r1, asr #31
 800d03e:	fb03 000e 	mla	r0, r3, lr, r0
 800d042:	fba1 3103 	umull	r3, r1, r1, r3
 800d046:	eb13 030c 	adds.w	r3, r3, ip
 800d04a:	4408      	add	r0, r1
 800d04c:	eb40 000b 	adc.w	r0, r0, fp
 800d050:	2800      	cmp	r0, #0
 800d052:	da05      	bge.n	800d060 <_lite_kernel_nl_softmax_is8os8+0x4dc>
 800d054:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d058:	1859      	adds	r1, r3, r1
 800d05a:	460b      	mov	r3, r1
 800d05c:	f140 0000 	adc.w	r0, r0, #0
 800d060:	0fdb      	lsrs	r3, r3, #31
 800d062:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 800d066:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800d06a:	f340 8123 	ble.w	800d2b4 <_lite_kernel_nl_softmax_is8os8+0x730>
 800d06e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800d072:	ea86 0301 	eor.w	r3, r6, r1
 800d076:	17c8      	asrs	r0, r1, #31
 800d078:	0fdb      	lsrs	r3, r3, #31
 800d07a:	fb02 f500 	mul.w	r5, r2, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	fb01 5504 	mla	r5, r1, r4, r5
 800d084:	fba2 3e01 	umull	r3, lr, r2, r1
 800d088:	bf0b      	itete	eq
 800d08a:	f04f 4780 	moveq.w	r7, #1073741824	; 0x40000000
 800d08e:	4657      	movne	r7, sl
 800d090:	f04f 0c00 	moveq.w	ip, #0
 800d094:	f04f 3cff 	movne.w	ip, #4294967295
 800d098:	4475      	add	r5, lr
 800d09a:	19db      	adds	r3, r3, r7
 800d09c:	eb45 050c 	adc.w	r5, r5, ip
 800d0a0:	2d00      	cmp	r5, #0
 800d0a2:	da05      	bge.n	800d0b0 <_lite_kernel_nl_softmax_is8os8+0x52c>
 800d0a4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800d0a8:	19df      	adds	r7, r3, r7
 800d0aa:	463b      	mov	r3, r7
 800d0ac:	f145 0500 	adc.w	r5, r5, #0
 800d0b0:	0fdb      	lsrs	r3, r3, #31
 800d0b2:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 800d0b6:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 800d0ba:	ea81 0503 	eor.w	r5, r1, r3
 800d0be:	0fed      	lsrs	r5, r5, #31
 800d0c0:	2d00      	cmp	r5, #0
 800d0c2:	bf0b      	itete	eq
 800d0c4:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 800d0c8:	4655      	movne	r5, sl
 800d0ca:	2700      	moveq	r7, #0
 800d0cc:	f04f 37ff 	movne.w	r7, #4294967295
 800d0d0:	fb03 f000 	mul.w	r0, r3, r0
 800d0d4:	ea4f 7ce3 	mov.w	ip, r3, asr #31
 800d0d8:	fb01 000c 	mla	r0, r1, ip, r0
 800d0dc:	fba3 3c01 	umull	r3, ip, r3, r1
 800d0e0:	195b      	adds	r3, r3, r5
 800d0e2:	4460      	add	r0, ip
 800d0e4:	eb40 0007 	adc.w	r0, r0, r7
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	da05      	bge.n	800d0f8 <_lite_kernel_nl_softmax_is8os8+0x574>
 800d0ec:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800d0f0:	195d      	adds	r5, r3, r5
 800d0f2:	462b      	mov	r3, r5
 800d0f4:	f140 0000 	adc.w	r0, r0, #0
 800d0f8:	0fdb      	lsrs	r3, r3, #31
 800d0fa:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 800d0fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d102:	f2c0 8105 	blt.w	800d310 <_lite_kernel_nl_softmax_is8os8+0x78c>
 800d106:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d10a:	440b      	add	r3, r1
 800d10c:	405e      	eors	r6, r3
 800d10e:	fb03 f404 	mul.w	r4, r3, r4
 800d112:	17d8      	asrs	r0, r3, #31
 800d114:	0ff6      	lsrs	r6, r6, #31
 800d116:	fb02 4000 	mla	r0, r2, r0, r4
 800d11a:	2e00      	cmp	r6, #0
 800d11c:	fba3 2102 	umull	r2, r1, r3, r2
 800d120:	4408      	add	r0, r1
 800d122:	bf0b      	itete	eq
 800d124:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 800d128:	4651      	movne	r1, sl
 800d12a:	2400      	moveq	r4, #0
 800d12c:	f04f 34ff 	movne.w	r4, #4294967295
 800d130:	1851      	adds	r1, r2, r1
 800d132:	eb40 0404 	adc.w	r4, r0, r4
 800d136:	2c00      	cmp	r4, #0
 800d138:	da05      	bge.n	800d146 <_lite_kernel_nl_softmax_is8os8+0x5c2>
 800d13a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d13e:	188a      	adds	r2, r1, r2
 800d140:	4611      	mov	r1, r2
 800d142:	f144 0400 	adc.w	r4, r4, #0
 800d146:	0fc9      	lsrs	r1, r1, #31
 800d148:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 800d14c:	f1c1 5200 	rsb	r2, r1, #536870912	; 0x20000000
 800d150:	ea83 0102 	eor.w	r1, r3, r2
 800d154:	0fc9      	lsrs	r1, r1, #31
 800d156:	2900      	cmp	r1, #0
 800d158:	bf0b      	itete	eq
 800d15a:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 800d15e:	4651      	movne	r1, sl
 800d160:	2000      	moveq	r0, #0
 800d162:	f04f 30ff 	movne.w	r0, #4294967295
 800d166:	4293      	cmp	r3, r2
 800d168:	d107      	bne.n	800d17a <_lite_kernel_nl_softmax_is8os8+0x5f6>
 800d16a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d16e:	d104      	bne.n	800d17a <_lite_kernel_nl_softmax_is8os8+0x5f6>
 800d170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d174:	4419      	add	r1, r3
 800d176:	0049      	lsls	r1, r1, #1
 800d178:	e016      	b.n	800d1a8 <_lite_kernel_nl_softmax_is8os8+0x624>
 800d17a:	fbc3 1002 	smlal	r1, r0, r3, r2
 800d17e:	2800      	cmp	r0, #0
 800d180:	da05      	bge.n	800d18e <_lite_kernel_nl_softmax_is8os8+0x60a>
 800d182:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d186:	188a      	adds	r2, r1, r2
 800d188:	4611      	mov	r1, r2
 800d18a:	f140 0000 	adc.w	r0, r0, #0
 800d18e:	0fc9      	lsrs	r1, r1, #31
 800d190:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
 800d194:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800d198:	db7d      	blt.n	800d296 <_lite_kernel_nl_softmax_is8os8+0x712>
 800d19a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d19e:	1899      	adds	r1, r3, r2
 800d1a0:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800d1a4:	dbe7      	blt.n	800d176 <_lite_kernel_nl_softmax_is8os8+0x5f2>
 800d1a6:	4611      	mov	r1, r2
 800d1a8:	f1b8 0f1f 	cmp.w	r8, #31
 800d1ac:	dd04      	ble.n	800d1b8 <_lite_kernel_nl_softmax_is8os8+0x634>
 800d1ae:	f1c9 0304 	rsb	r3, r9, #4
 800d1b2:	f04f 081f 	mov.w	r8, #31
 800d1b6:	4119      	asrs	r1, r3
 800d1b8:	9b04      	ldr	r3, [sp, #16]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d053      	beq.n	800d266 <_lite_kernel_nl_softmax_is8os8+0x6e2>
 800d1be:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800d1c2:	2501      	movs	r5, #1
 800d1c4:	f1a1 4c00 	sub.w	ip, r1, #2147483648	; 0x80000000
 800d1c8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d1ca:	fa46 f308 	asr.w	r3, r6, r8
 800d1ce:	fa05 f508 	lsl.w	r5, r5, r8
 800d1d2:	fabc fc8c 	clz	ip, ip
 800d1d6:	3d01      	subs	r5, #1
 800d1d8:	9301      	str	r3, [sp, #4]
 800d1da:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800d1de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1e0:	ea05 0906 	and.w	r9, r5, r6
 800d1e4:	106f      	asrs	r7, r5, #1
 800d1e6:	1e5c      	subs	r4, r3, #1
 800d1e8:	4663      	mov	r3, ip
 800d1ea:	f8cd 9008 	str.w	r9, [sp, #8]
 800d1ee:	46ac      	mov	ip, r5
 800d1f0:	f107 0e01 	add.w	lr, r7, #1
 800d1f4:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800d1f8:	461d      	mov	r5, r3
 800d1fa:	e00c      	b.n	800d216 <_lite_kernel_nl_softmax_is8os8+0x692>
 800d1fc:	b1dd      	cbz	r5, 800d236 <_lite_kernel_nl_softmax_is8os8+0x6b2>
 800d1fe:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800d202:	4297      	cmp	r7, r2
 800d204:	da00      	bge.n	800d208 <_lite_kernel_nl_softmax_is8os8+0x684>
 800d206:	3301      	adds	r3, #1
 800d208:	2bfe      	cmp	r3, #254	; 0xfe
 800d20a:	dd3f      	ble.n	800d28c <_lite_kernel_nl_softmax_is8os8+0x708>
 800d20c:	237f      	movs	r3, #127	; 0x7f
 800d20e:	4548      	cmp	r0, r9
 800d210:	f804 3f01 	strb.w	r3, [r4, #1]!
 800d214:	d027      	beq.n	800d266 <_lite_kernel_nl_softmax_is8os8+0x6e2>
 800d216:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800d21a:	ea81 0302 	eor.w	r3, r1, r2
 800d21e:	0fdb      	lsrs	r3, r3, #31
 800d220:	2b00      	cmp	r3, #0
 800d222:	bf0b      	itete	eq
 800d224:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 800d228:	4653      	movne	r3, sl
 800d22a:	f04f 0b00 	moveq.w	fp, #0
 800d22e:	f04f 3bff 	movne.w	fp, #4294967295
 800d232:	4291      	cmp	r1, r2
 800d234:	d0e2      	beq.n	800d1fc <_lite_kernel_nl_softmax_is8os8+0x678>
 800d236:	fbc1 3b02 	smlal	r3, fp, r1, r2
 800d23a:	f1bb 0f00 	cmp.w	fp, #0
 800d23e:	da02      	bge.n	800d246 <_lite_kernel_nl_softmax_is8os8+0x6c2>
 800d240:	199b      	adds	r3, r3, r6
 800d242:	f14b 0b00 	adc.w	fp, fp, #0
 800d246:	0fdb      	lsrs	r3, r3, #31
 800d248:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 800d24c:	ea0c 0203 	and.w	r2, ip, r3
 800d250:	fa53 f308 	asrs.w	r3, r3, r8
 800d254:	d5d5      	bpl.n	800d202 <_lite_kernel_nl_softmax_is8os8+0x67e>
 800d256:	4596      	cmp	lr, r2
 800d258:	dbd5      	blt.n	800d206 <_lite_kernel_nl_softmax_is8os8+0x682>
 800d25a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800d25e:	4548      	cmp	r0, r9
 800d260:	f804 3f01 	strb.w	r3, [r4, #1]!
 800d264:	d1d7      	bne.n	800d216 <_lite_kernel_nl_softmax_is8os8+0x692>
 800d266:	9b03      	ldr	r3, [sp, #12]
 800d268:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d26a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800d26c:	4413      	add	r3, r2
 800d26e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d270:	440a      	add	r2, r1
 800d272:	9924      	ldr	r1, [sp, #144]	; 0x90
 800d274:	9303      	str	r3, [sp, #12]
 800d276:	9215      	str	r2, [sp, #84]	; 0x54
 800d278:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d27a:	440a      	add	r2, r1
 800d27c:	9216      	str	r2, [sp, #88]	; 0x58
 800d27e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d280:	429a      	cmp	r2, r3
 800d282:	f63f aca8 	bhi.w	800cbd6 <_lite_kernel_nl_softmax_is8os8+0x52>
 800d286:	b01b      	add	sp, #108	; 0x6c
 800d288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	dde4      	ble.n	800d25a <_lite_kernel_nl_softmax_is8os8+0x6d6>
 800d290:	3b80      	subs	r3, #128	; 0x80
 800d292:	b25b      	sxtb	r3, r3
 800d294:	e7bb      	b.n	800d20e <_lite_kernel_nl_softmax_is8os8+0x68a>
 800d296:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
 800d29a:	f300 8457 	bgt.w	800db4c <_lite_kernel_nl_softmax_is8os8+0xfc8>
 800d29e:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 800d2a2:	0059      	lsls	r1, r3, #1
 800d2a4:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800d2a8:	bfd8      	it	le
 800d2aa:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
 800d2ae:	e77b      	b.n	800d1a8 <_lite_kernel_nl_softmax_is8os8+0x624>
 800d2b0:	c3c3c3c4 	.word	0xc3c3c3c4
 800d2b4:	4933      	ldr	r1, [pc, #204]	; (800d384 <_lite_kernel_nl_softmax_is8os8+0x800>)
 800d2b6:	4429      	add	r1, r5
 800d2b8:	ea96 0f01 	teq	r6, r1
 800d2bc:	d545      	bpl.n	800d34a <_lite_kernel_nl_softmax_is8os8+0x7c6>
 800d2be:	17cb      	asrs	r3, r1, #31
 800d2c0:	fb01 f004 	mul.w	r0, r1, r4
 800d2c4:	fb02 0003 	mla	r0, r2, r3, r0
 800d2c8:	fba1 3502 	umull	r3, r5, r1, r2
 800d2cc:	eb13 030a 	adds.w	r3, r3, sl
 800d2d0:	4405      	add	r5, r0
 800d2d2:	f165 0500 	sbc.w	r5, r5, #0
 800d2d6:	2d00      	cmp	r5, #0
 800d2d8:	da05      	bge.n	800d2e6 <_lite_kernel_nl_softmax_is8os8+0x762>
 800d2da:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d2de:	1818      	adds	r0, r3, r0
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	f145 0500 	adc.w	r5, r5, #0
 800d2e6:	0fdb      	lsrs	r3, r3, #31
 800d2e8:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 800d2ec:	f04f 35ff 	mov.w	r5, #4294967295
 800d2f0:	f1c3 5000 	rsb	r0, r3, #536870912	; 0x20000000
 800d2f4:	4653      	mov	r3, sl
 800d2f6:	fbc1 3500 	smlal	r3, r5, r1, r0
 800d2fa:	2d00      	cmp	r5, #0
 800d2fc:	da05      	bge.n	800d30a <_lite_kernel_nl_softmax_is8os8+0x786>
 800d2fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d302:	1818      	adds	r0, r3, r0
 800d304:	4603      	mov	r3, r0
 800d306:	f145 0500 	adc.w	r5, r5, #0
 800d30a:	0fdb      	lsrs	r3, r3, #31
 800d30c:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 800d310:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800d314:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d318:	bfd8      	it	le
 800d31a:	f04f 4300 	movle.w	r3, #2147483648	; 0x80000000
 800d31e:	e6f4      	b.n	800d10a <_lite_kernel_nl_softmax_is8os8+0x586>
 800d320:	2900      	cmp	r1, #0
 800d322:	f040 8427 	bne.w	800db74 <_lite_kernel_nl_softmax_is8os8+0xff0>
 800d326:	f04f 0803 	mov.w	r8, #3
 800d32a:	f04f 0920 	mov.w	r9, #32
 800d32e:	f04f 36ff 	mov.w	r6, #4294967295
 800d332:	2000      	movs	r0, #0
 800d334:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
 800d338:	4913      	ldr	r1, [pc, #76]	; (800d388 <_lite_kernel_nl_softmax_is8os8+0x804>)
 800d33a:	4605      	mov	r5, r0
 800d33c:	4632      	mov	r2, r6
 800d33e:	461f      	mov	r7, r3
 800d340:	4634      	mov	r4, r6
 800d342:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 800d346:	4683      	mov	fp, r0
 800d348:	e675      	b.n	800d036 <_lite_kernel_nl_softmax_is8os8+0x4b2>
 800d34a:	17c8      	asrs	r0, r1, #31
 800d34c:	fba2 3501 	umull	r3, r5, r2, r1
 800d350:	fb02 f700 	mul.w	r7, r2, r0
 800d354:	f113 4380 	adds.w	r3, r3, #1073741824	; 0x40000000
 800d358:	fb01 7704 	mla	r7, r1, r4, r7
 800d35c:	eb47 0505 	adc.w	r5, r7, r5
 800d360:	2d00      	cmp	r5, #0
 800d362:	da05      	bge.n	800d370 <_lite_kernel_nl_softmax_is8os8+0x7ec>
 800d364:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800d368:	19df      	adds	r7, r3, r7
 800d36a:	463b      	mov	r3, r7
 800d36c:	f145 0500 	adc.w	r5, r5, #0
 800d370:	0fdb      	lsrs	r3, r3, #31
 800d372:	f04f 37ff 	mov.w	r7, #4294967295
 800d376:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 800d37a:	4655      	mov	r5, sl
 800d37c:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 800d380:	e6a6      	b.n	800d0d0 <_lite_kernel_nl_softmax_is8os8+0x54c>
 800d382:	bf00      	nop
 800d384:	da5a5a5a 	.word	0xda5a5a5a
 800d388:	20000001 	.word	0x20000001
 800d38c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d38e:	f513 7f80 	cmn.w	r3, #256	; 0x100
 800d392:	f1c3 0300 	rsb	r3, r3, #0
 800d396:	bfb4      	ite	lt
 800d398:	f44f 7880 	movlt.w	r8, #256	; 0x100
 800d39c:	4698      	movge	r8, r3
 800d39e:	f1b8 0f00 	cmp.w	r8, #0
 800d3a2:	f340 8148 	ble.w	800d636 <_lite_kernel_nl_softmax_is8os8+0xab2>
 800d3a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d3a8:	f04f 0a00 	mov.w	sl, #0
 800d3ac:	f8df 9478 	ldr.w	r9, [pc, #1144]	; 800d828 <_lite_kernel_nl_softmax_is8os8+0xca4>
 800d3b0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800d3b4:	f1a3 0b04 	sub.w	fp, r3, #4
 800d3b8:	f8cd 8008 	str.w	r8, [sp, #8]
 800d3bc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d3be:	9826      	ldr	r0, [sp, #152]	; 0x98
 800d3c0:	fa0a f203 	lsl.w	r2, sl, r3
 800d3c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d3c6:	4252      	negs	r2, r2
 800d3c8:	4053      	eors	r3, r2
 800d3ca:	0fdb      	lsrs	r3, r3, #31
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	bf0b      	itete	eq
 800d3d0:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 800d3d4:	464b      	movne	r3, r9
 800d3d6:	2100      	moveq	r1, #0
 800d3d8:	f04f 31ff 	movne.w	r1, #4294967295
 800d3dc:	fbc0 3102 	smlal	r3, r1, r0, r2
 800d3e0:	2900      	cmp	r1, #0
 800d3e2:	da04      	bge.n	800d3ee <_lite_kernel_nl_softmax_is8os8+0x86a>
 800d3e4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d3e8:	189b      	adds	r3, r3, r2
 800d3ea:	f141 0100 	adc.w	r1, r1, #0
 800d3ee:	0fdb      	lsrs	r3, r3, #31
 800d3f0:	f04f 0c00 	mov.w	ip, #0
 800d3f4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800d3f8:	4621      	mov	r1, r4
 800d3fa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800d3fe:	9301      	str	r3, [sp, #4]
 800d400:	0155      	lsls	r5, r2, #5
 800d402:	1ad2      	subs	r2, r2, r3
 800d404:	f105 5580 	add.w	r5, r5, #268435456	; 0x10000000
 800d408:	fbc5 1c05 	smlal	r1, ip, r5, r5
 800d40c:	f1bc 0f00 	cmp.w	ip, #0
 800d410:	ea4f 76e5 	mov.w	r6, r5, asr #31
 800d414:	da04      	bge.n	800d420 <_lite_kernel_nl_softmax_is8os8+0x89c>
 800d416:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d41a:	1809      	adds	r1, r1, r0
 800d41c:	f14c 0c00 	adc.w	ip, ip, #0
 800d420:	0fc9      	lsrs	r1, r1, #31
 800d422:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
 800d426:	ea4f 7cec 	mov.w	ip, ip, asr #31
 800d42a:	fba1 0701 	umull	r0, r7, r1, r1
 800d42e:	fb01 fe0c 	mul.w	lr, r1, ip
 800d432:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
 800d436:	eb47 074e 	adc.w	r7, r7, lr, lsl #1
 800d43a:	2f00      	cmp	r7, #0
 800d43c:	da06      	bge.n	800d44c <_lite_kernel_nl_softmax_is8os8+0x8c8>
 800d43e:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 800d442:	eb10 0e0e 	adds.w	lr, r0, lr
 800d446:	4670      	mov	r0, lr
 800d448:	f147 0700 	adc.w	r7, r7, #0
 800d44c:	0fc0      	lsrs	r0, r0, #31
 800d44e:	fb01 f606 	mul.w	r6, r1, r6
 800d452:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
 800d456:	fb05 660c 	mla	r6, r5, ip, r6
 800d45a:	1087      	asrs	r7, r0, #2
 800d45c:	f000 0003 	and.w	r0, r0, #3
 800d460:	bf54      	ite	pl
 800d462:	f04f 0e01 	movpl.w	lr, #1
 800d466:	f04f 0e02 	movmi.w	lr, #2
 800d46a:	4586      	cmp	lr, r0
 800d46c:	ea81 0005 	eor.w	r0, r1, r5
 800d470:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800d474:	bfb8      	it	lt
 800d476:	3701      	addlt	r7, #1
 800d478:	2800      	cmp	r0, #0
 800d47a:	fba1 0805 	umull	r0, r8, r1, r5
 800d47e:	bf0b      	itete	eq
 800d480:	f04f 4c80 	moveq.w	ip, #1073741824	; 0x40000000
 800d484:	46cc      	movne	ip, r9
 800d486:	f04f 0e00 	moveq.w	lr, #0
 800d48a:	f04f 3eff 	movne.w	lr, #4294967295
 800d48e:	4446      	add	r6, r8
 800d490:	eb10 000c 	adds.w	r0, r0, ip
 800d494:	eb46 060e 	adc.w	r6, r6, lr
 800d498:	2e00      	cmp	r6, #0
 800d49a:	da06      	bge.n	800d4aa <_lite_kernel_nl_softmax_is8os8+0x926>
 800d49c:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800d4a0:	eb10 0c0c 	adds.w	ip, r0, ip
 800d4a4:	4660      	mov	r0, ip
 800d4a6:	f146 0600 	adc.w	r6, r6, #0
 800d4aa:	0fc0      	lsrs	r0, r0, #31
 800d4ac:	4bd5      	ldr	r3, [pc, #852]	; (800d804 <_lite_kernel_nl_softmax_is8os8+0xc80>)
 800d4ae:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
 800d4b2:	4438      	add	r0, r7
 800d4b4:	0fc6      	lsrs	r6, r0, #31
 800d4b6:	2e00      	cmp	r6, #0
 800d4b8:	bf0b      	itete	eq
 800d4ba:	f04f 4780 	moveq.w	r7, #1073741824	; 0x40000000
 800d4be:	464f      	movne	r7, r9
 800d4c0:	2600      	moveq	r6, #0
 800d4c2:	f04f 36ff 	movne.w	r6, #4294967295
 800d4c6:	fbc0 7603 	smlal	r7, r6, r0, r3
 800d4ca:	2e00      	cmp	r6, #0
 800d4cc:	da05      	bge.n	800d4da <_lite_kernel_nl_softmax_is8os8+0x956>
 800d4ce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d4d2:	1838      	adds	r0, r7, r0
 800d4d4:	4607      	mov	r7, r0
 800d4d6:	f146 0600 	adc.w	r6, r6, #0
 800d4da:	0ff8      	lsrs	r0, r7, #31
 800d4dc:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
 800d4e0:	4401      	add	r1, r0
 800d4e2:	07ce      	lsls	r6, r1, #31
 800d4e4:	ea4f 0061 	mov.w	r0, r1, asr #1
 800d4e8:	d502      	bpl.n	800d4f0 <_lite_kernel_nl_softmax_is8os8+0x96c>
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	bfa8      	it	ge
 800d4ee:	3001      	addge	r0, #1
 800d4f0:	1941      	adds	r1, r0, r5
 800d4f2:	4bc5      	ldr	r3, [pc, #788]	; (800d808 <_lite_kernel_nl_softmax_is8os8+0xc84>)
 800d4f4:	0fc8      	lsrs	r0, r1, #31
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	bf0b      	itete	eq
 800d4fa:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
 800d4fe:	4648      	movne	r0, r9
 800d500:	2500      	moveq	r5, #0
 800d502:	f04f 35ff 	movne.w	r5, #4294967295
 800d506:	fbc1 0503 	smlal	r0, r5, r1, r3
 800d50a:	2d00      	cmp	r5, #0
 800d50c:	da04      	bge.n	800d518 <_lite_kernel_nl_softmax_is8os8+0x994>
 800d50e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d512:	1840      	adds	r0, r0, r1
 800d514:	f145 0500 	adc.w	r5, r5, #0
 800d518:	0fc0      	lsrs	r0, r0, #31
 800d51a:	2100      	movs	r1, #0
 800d51c:	4ebb      	ldr	r6, [pc, #748]	; (800d80c <_lite_kernel_nl_softmax_is8os8+0xc88>)
 800d51e:	46a4      	mov	ip, r4
 800d520:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
 800d524:	460f      	mov	r7, r1
 800d526:	f3c2 6500 	ubfx	r5, r2, #24, #1
 800d52a:	9b01      	ldr	r3, [sp, #4]
 800d52c:	f100 40e2 	add.w	r0, r0, #1895825408	; 0x71000000
 800d530:	f10a 0a01 	add.w	sl, sl, #1
 800d534:	3d01      	subs	r5, #1
 800d536:	fab3 f383 	clz	r3, r3
 800d53a:	f5a0 2025 	sub.w	r0, r0, #675840	; 0xa5000
 800d53e:	095b      	lsrs	r3, r3, #5
 800d540:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 800d544:	fbc0 c706 	smlal	ip, r7, r0, r6
 800d548:	4666      	mov	r6, ip
 800d54a:	4005      	ands	r5, r0
 800d54c:	f342 6000 	sbfx	r0, r2, #24, #1
 800d550:	0ff6      	lsrs	r6, r6, #31
 800d552:	46a4      	mov	ip, r4
 800d554:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 800d558:	460f      	mov	r7, r1
 800d55a:	4030      	ands	r0, r6
 800d55c:	4eac      	ldr	r6, [pc, #688]	; (800d810 <_lite_kernel_nl_softmax_is8os8+0xc8c>)
 800d55e:	4068      	eors	r0, r5
 800d560:	f3c2 6540 	ubfx	r5, r2, #25, #1
 800d564:	fbc0 c706 	smlal	ip, r7, r0, r6
 800d568:	4666      	mov	r6, ip
 800d56a:	3d01      	subs	r5, #1
 800d56c:	46a4      	mov	ip, r4
 800d56e:	0ff6      	lsrs	r6, r6, #31
 800d570:	4005      	ands	r5, r0
 800d572:	f342 6040 	sbfx	r0, r2, #25, #1
 800d576:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 800d57a:	460f      	mov	r7, r1
 800d57c:	4030      	ands	r0, r6
 800d57e:	4ea5      	ldr	r6, [pc, #660]	; (800d814 <_lite_kernel_nl_softmax_is8os8+0xc90>)
 800d580:	4068      	eors	r0, r5
 800d582:	f3c2 6580 	ubfx	r5, r2, #26, #1
 800d586:	fbc0 c706 	smlal	ip, r7, r0, r6
 800d58a:	4666      	mov	r6, ip
 800d58c:	3d01      	subs	r5, #1
 800d58e:	468c      	mov	ip, r1
 800d590:	0ff6      	lsrs	r6, r6, #31
 800d592:	4005      	ands	r5, r0
 800d594:	f342 6080 	sbfx	r0, r2, #26, #1
 800d598:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
 800d59c:	4627      	mov	r7, r4
 800d59e:	4030      	ands	r0, r6
 800d5a0:	f3c2 66c0 	ubfx	r6, r2, #27, #1
 800d5a4:	4068      	eors	r0, r5
 800d5a6:	3e01      	subs	r6, #1
 800d5a8:	4d9b      	ldr	r5, [pc, #620]	; (800d818 <_lite_kernel_nl_softmax_is8os8+0xc94>)
 800d5aa:	4006      	ands	r6, r0
 800d5ac:	fbc0 7c05 	smlal	r7, ip, r0, r5
 800d5b0:	0ff8      	lsrs	r0, r7, #31
 800d5b2:	f342 65c0 	sbfx	r5, r2, #27, #1
 800d5b6:	4627      	mov	r7, r4
 800d5b8:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
 800d5bc:	468c      	mov	ip, r1
 800d5be:	4005      	ands	r5, r0
 800d5c0:	f3c2 7000 	ubfx	r0, r2, #28, #1
 800d5c4:	4075      	eors	r5, r6
 800d5c6:	3801      	subs	r0, #1
 800d5c8:	4e94      	ldr	r6, [pc, #592]	; (800d81c <_lite_kernel_nl_softmax_is8os8+0xc98>)
 800d5ca:	4028      	ands	r0, r5
 800d5cc:	fbc5 7c06 	smlal	r7, ip, r5, r6
 800d5d0:	0ffd      	lsrs	r5, r7, #31
 800d5d2:	f342 7600 	sbfx	r6, r2, #28, #1
 800d5d6:	4f92      	ldr	r7, [pc, #584]	; (800d820 <_lite_kernel_nl_softmax_is8os8+0xc9c>)
 800d5d8:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
 800d5dc:	468c      	mov	ip, r1
 800d5de:	4035      	ands	r5, r6
 800d5e0:	4626      	mov	r6, r4
 800d5e2:	4068      	eors	r0, r5
 800d5e4:	f3c2 7540 	ubfx	r5, r2, #29, #1
 800d5e8:	fbc0 6c07 	smlal	r6, ip, r0, r7
 800d5ec:	3d01      	subs	r5, #1
 800d5ee:	0ff6      	lsrs	r6, r6, #31
 800d5f0:	4005      	ands	r5, r0
 800d5f2:	f342 7040 	sbfx	r0, r2, #29, #1
 800d5f6:	ea46 064c 	orr.w	r6, r6, ip, lsl #1
 800d5fa:	4030      	ands	r0, r6
 800d5fc:	26f2      	movs	r6, #242	; 0xf2
 800d5fe:	4068      	eors	r0, r5
 800d600:	4625      	mov	r5, r4
 800d602:	fbc0 5106 	smlal	r5, r1, r0, r6
 800d606:	0fed      	lsrs	r5, r5, #31
 800d608:	ea45 0541 	orr.w	r5, r5, r1, lsl #1
 800d60c:	f3c2 7180 	ubfx	r1, r2, #30, #1
 800d610:	f342 7280 	sbfx	r2, r2, #30, #1
 800d614:	3901      	subs	r1, #1
 800d616:	402a      	ands	r2, r5
 800d618:	4001      	ands	r1, r0
 800d61a:	404a      	eors	r2, r1
 800d61c:	1e59      	subs	r1, r3, #1
 800d61e:	425b      	negs	r3, r3
 800d620:	400a      	ands	r2, r1
 800d622:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d626:	4053      	eors	r3, r2
 800d628:	f84b 3f04 	str.w	r3, [fp, #4]!
 800d62c:	9b02      	ldr	r3, [sp, #8]
 800d62e:	4553      	cmp	r3, sl
 800d630:	f47f aec4 	bne.w	800d3bc <_lite_kernel_nl_softmax_is8os8+0x838>
 800d634:	4698      	mov	r8, r3
 800d636:	9a03      	ldr	r2, [sp, #12]
 800d638:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d63a:	429a      	cmp	r2, r3
 800d63c:	f4bf ae23 	bcs.w	800d286 <_lite_kernel_nl_softmax_is8os8+0x702>
 800d640:	9904      	ldr	r1, [sp, #16]
 800d642:	1e4b      	subs	r3, r1, #1
 800d644:	468a      	mov	sl, r1
 800d646:	eb02 0e03 	add.w	lr, r2, r3
 800d64a:	4613      	mov	r3, r2
 800d64c:	3a01      	subs	r2, #1
 800d64e:	f1ba 0f01 	cmp.w	sl, #1
 800d652:	4699      	mov	r9, r3
 800d654:	9202      	str	r2, [sp, #8]
 800d656:	9b02      	ldr	r3, [sp, #8]
 800d658:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800d65c:	f240 819c 	bls.w	800d998 <_lite_kernel_nl_softmax_is8os8+0xe14>
 800d660:	464b      	mov	r3, r9
 800d662:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
 800d666:	428a      	cmp	r2, r1
 800d668:	bfb8      	it	lt
 800d66a:	460a      	movlt	r2, r1
 800d66c:	4573      	cmp	r3, lr
 800d66e:	d1f8      	bne.n	800d662 <_lite_kernel_nl_softmax_is8os8+0xade>
 800d670:	9902      	ldr	r1, [sp, #8]
 800d672:	2400      	movs	r4, #0
 800d674:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800d678:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 800d67a:	460b      	mov	r3, r1
 800d67c:	f911 0f01 	ldrsb.w	r0, [r1, #1]!
 800d680:	1a10      	subs	r0, r2, r0
 800d682:	3302      	adds	r3, #2
 800d684:	4580      	cmp	r8, r0
 800d686:	eba3 0309 	sub.w	r3, r3, r9
 800d68a:	dd0c      	ble.n	800d6a6 <_lite_kernel_nl_softmax_is8os8+0xb22>
 800d68c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800d690:	1306      	asrs	r6, r0, #12
 800d692:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800d696:	bf54      	ite	pl
 800d698:	46bc      	movpl	ip, r7
 800d69a:	f44f 6c00 	movmi.w	ip, #2048	; 0x800
 800d69e:	4560      	cmp	r0, ip
 800d6a0:	bfc8      	it	gt
 800d6a2:	3601      	addgt	r6, #1
 800d6a4:	4434      	add	r4, r6
 800d6a6:	459a      	cmp	sl, r3
 800d6a8:	d8e7      	bhi.n	800d67a <_lite_kernel_nl_softmax_is8os8+0xaf6>
 800d6aa:	2c00      	cmp	r4, #0
 800d6ac:	f000 8178 	beq.w	800d9a0 <_lite_kernel_nl_softmax_is8os8+0xe1c>
 800d6b0:	fab4 f384 	clz	r3, r4
 800d6b4:	409c      	lsls	r4, r3
 800d6b6:	9306      	str	r3, [sp, #24]
 800d6b8:	f1c3 0323 	rsb	r3, r3, #35	; 0x23
 800d6bc:	9301      	str	r3, [sp, #4]
 800d6be:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800d6c2:	17d9      	asrs	r1, r3, #31
 800d6c4:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d6c8:	bf08      	it	eq
 800d6ca:	2c00      	cmpeq	r4, #0
 800d6cc:	f000 816c 	beq.w	800d9a8 <_lite_kernel_nl_softmax_is8os8+0xe24>
 800d6d0:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
 800d6d4:	f141 0100 	adc.w	r1, r1, #0
 800d6d8:	085b      	lsrs	r3, r3, #1
 800d6da:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 800d6de:	ea4f 0b61 	mov.w	fp, r1, asr #1
 800d6e2:	4950      	ldr	r1, [pc, #320]	; (800d824 <_lite_kernel_nl_softmax_is8os8+0xca0>)
 800d6e4:	425c      	negs	r4, r3
 800d6e6:	9303      	str	r3, [sp, #12]
 800d6e8:	fb01 440b 	mla	r4, r1, fp, r4
 800d6ec:	fba3 1001 	umull	r1, r0, r3, r1
 800d6f0:	4420      	add	r0, r4
 800d6f2:	4c4d      	ldr	r4, [pc, #308]	; (800d828 <_lite_kernel_nl_softmax_is8os8+0xca4>)
 800d6f4:	1909      	adds	r1, r1, r4
 800d6f6:	f160 0000 	sbc.w	r0, r0, #0
 800d6fa:	2800      	cmp	r0, #0
 800d6fc:	da05      	bge.n	800d70a <_lite_kernel_nl_softmax_is8os8+0xb86>
 800d6fe:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800d702:	190c      	adds	r4, r1, r4
 800d704:	4621      	mov	r1, r4
 800d706:	f140 0000 	adc.w	r0, r0, #0
 800d70a:	0fc9      	lsrs	r1, r1, #31
 800d70c:	ea41 0440 	orr.w	r4, r1, r0, lsl #1
 800d710:	f104 365a 	add.w	r6, r4, #1515870810	; 0x5a5a5a5a
 800d714:	17f0      	asrs	r0, r6, #31
 800d716:	fba3 1706 	umull	r1, r7, r3, r6
 800d71a:	4635      	mov	r5, r6
 800d71c:	fb03 fc00 	mul.w	ip, r3, r0
 800d720:	f111 4180 	adds.w	r1, r1, #1073741824	; 0x40000000
 800d724:	fb06 cc0b 	mla	ip, r6, fp, ip
 800d728:	eb4c 0707 	adc.w	r7, ip, r7
 800d72c:	2f00      	cmp	r7, #0
 800d72e:	da06      	bge.n	800d73e <_lite_kernel_nl_softmax_is8os8+0xbba>
 800d730:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800d734:	eb11 0c0c 	adds.w	ip, r1, ip
 800d738:	4661      	mov	r1, ip
 800d73a:	f147 0700 	adc.w	r7, r7, #0
 800d73e:	0fc9      	lsrs	r1, r1, #31
 800d740:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
 800d744:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 800d748:	ea81 0706 	eor.w	r7, r1, r6
 800d74c:	0fff      	lsrs	r7, r7, #31
 800d74e:	2f00      	cmp	r7, #0
 800d750:	4f35      	ldr	r7, [pc, #212]	; (800d828 <_lite_kernel_nl_softmax_is8os8+0xca4>)
 800d752:	bf08      	it	eq
 800d754:	f04f 4780 	moveq.w	r7, #1073741824	; 0x40000000
 800d758:	9704      	str	r7, [sp, #16]
 800d75a:	bf0c      	ite	eq
 800d75c:	2700      	moveq	r7, #0
 800d75e:	f04f 37ff 	movne.w	r7, #4294967295
 800d762:	9705      	str	r7, [sp, #20]
 800d764:	fb01 f000 	mul.w	r0, r1, r0
 800d768:	ea4f 7ce1 	mov.w	ip, r1, asr #31
 800d76c:	9f04      	ldr	r7, [sp, #16]
 800d76e:	fb05 000c 	mla	r0, r5, ip, r0
 800d772:	fba1 1505 	umull	r1, r5, r1, r5
 800d776:	19c9      	adds	r1, r1, r7
 800d778:	4428      	add	r0, r5
 800d77a:	9d05      	ldr	r5, [sp, #20]
 800d77c:	eb40 0505 	adc.w	r5, r0, r5
 800d780:	2d00      	cmp	r5, #0
 800d782:	da05      	bge.n	800d790 <_lite_kernel_nl_softmax_is8os8+0xc0c>
 800d784:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800d788:	1808      	adds	r0, r1, r0
 800d78a:	4601      	mov	r1, r0
 800d78c:	f145 0500 	adc.w	r5, r5, #0
 800d790:	0fc9      	lsrs	r1, r1, #31
 800d792:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 800d796:	f1b1 4f60 	cmp.w	r1, #3758096384	; 0xe0000000
 800d79a:	f340 8132 	ble.w	800da02 <_lite_kernel_nl_softmax_is8os8+0xe7e>
 800d79e:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800d7a2:	9903      	ldr	r1, [sp, #12]
 800d7a4:	4041      	eors	r1, r0
 800d7a6:	17c4      	asrs	r4, r0, #31
 800d7a8:	fb00 f50b 	mul.w	r5, r0, fp
 800d7ac:	0fc9      	lsrs	r1, r1, #31
 800d7ae:	fb03 5504 	mla	r5, r3, r4, r5
 800d7b2:	2900      	cmp	r1, #0
 800d7b4:	491c      	ldr	r1, [pc, #112]	; (800d828 <_lite_kernel_nl_softmax_is8os8+0xca4>)
 800d7b6:	bf0c      	ite	eq
 800d7b8:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 800d7bc:	460e      	movne	r6, r1
 800d7be:	fba0 1c03 	umull	r1, ip, r0, r3
 800d7c2:	bf0c      	ite	eq
 800d7c4:	2700      	moveq	r7, #0
 800d7c6:	f04f 37ff 	movne.w	r7, #4294967295
 800d7ca:	4465      	add	r5, ip
 800d7cc:	1989      	adds	r1, r1, r6
 800d7ce:	eb45 0507 	adc.w	r5, r5, r7
 800d7d2:	2d00      	cmp	r5, #0
 800d7d4:	da05      	bge.n	800d7e2 <_lite_kernel_nl_softmax_is8os8+0xc5e>
 800d7d6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800d7da:	198e      	adds	r6, r1, r6
 800d7dc:	4631      	mov	r1, r6
 800d7de:	f145 0500 	adc.w	r5, r5, #0
 800d7e2:	0fc9      	lsrs	r1, r1, #31
 800d7e4:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 800d7e8:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 800d7ec:	ea80 0501 	eor.w	r5, r0, r1
 800d7f0:	0fed      	lsrs	r5, r5, #31
 800d7f2:	2d00      	cmp	r5, #0
 800d7f4:	4d0c      	ldr	r5, [pc, #48]	; (800d828 <_lite_kernel_nl_softmax_is8os8+0xca4>)
 800d7f6:	bf06      	itte	eq
 800d7f8:	2600      	moveq	r6, #0
 800d7fa:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 800d7fe:	f04f 36ff 	movne.w	r6, #4294967295
 800d802:	e013      	b.n	800d82c <_lite_kernel_nl_softmax_is8os8+0xca8>
 800d804:	2aaaaaab 	.word	0x2aaaaaab
 800d808:	70f5a894 	.word	0x70f5a894
 800d80c:	63afbe7b 	.word	0x63afbe7b
 800d810:	4da2cbf2 	.word	0x4da2cbf2
 800d814:	2f16ac6c 	.word	0x2f16ac6c
 800d818:	1152aaa4 	.word	0x1152aaa4
 800d81c:	02582ab7 	.word	0x02582ab7
 800d820:	000afe11 	.word	0x000afe11
 800d824:	c3c3c3c4 	.word	0xc3c3c3c4
 800d828:	c0000001 	.word	0xc0000001
 800d82c:	fb01 f404 	mul.w	r4, r1, r4
 800d830:	17cf      	asrs	r7, r1, #31
 800d832:	fb00 4407 	mla	r4, r0, r7, r4
 800d836:	fba1 1700 	umull	r1, r7, r1, r0
 800d83a:	1949      	adds	r1, r1, r5
 800d83c:	443c      	add	r4, r7
 800d83e:	eb44 0406 	adc.w	r4, r4, r6
 800d842:	2c00      	cmp	r4, #0
 800d844:	da05      	bge.n	800d852 <_lite_kernel_nl_softmax_is8os8+0xcce>
 800d846:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800d84a:	194d      	adds	r5, r1, r5
 800d84c:	4629      	mov	r1, r5
 800d84e:	f144 0400 	adc.w	r4, r4, #0
 800d852:	0fc9      	lsrs	r1, r1, #31
 800d854:	ea41 0444 	orr.w	r4, r1, r4, lsl #1
 800d858:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 800d85c:	f2c0 8101 	blt.w	800da62 <_lite_kernel_nl_softmax_is8os8+0xede>
 800d860:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d864:	4401      	add	r1, r0
 800d866:	9803      	ldr	r0, [sp, #12]
 800d868:	ea91 0f00 	teq	r1, r0
 800d86c:	f140 814e 	bpl.w	800db0c <_lite_kernel_nl_softmax_is8os8+0xf88>
 800d870:	4cc4      	ldr	r4, [pc, #784]	; (800db84 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 800d872:	f04f 35ff 	mov.w	r5, #4294967295
 800d876:	fb01 f60b 	mul.w	r6, r1, fp
 800d87a:	17c8      	asrs	r0, r1, #31
 800d87c:	fb03 6600 	mla	r6, r3, r0, r6
 800d880:	fba1 3703 	umull	r3, r7, r1, r3
 800d884:	191b      	adds	r3, r3, r4
 800d886:	443e      	add	r6, r7
 800d888:	eb46 0605 	adc.w	r6, r6, r5
 800d88c:	2e00      	cmp	r6, #0
 800d88e:	da05      	bge.n	800d89c <_lite_kernel_nl_softmax_is8os8+0xd18>
 800d890:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800d894:	191c      	adds	r4, r3, r4
 800d896:	4623      	mov	r3, r4
 800d898:	f146 0600 	adc.w	r6, r6, #0
 800d89c:	0fdb      	lsrs	r3, r3, #31
 800d89e:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 800d8a2:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 800d8a6:	ea83 0401 	eor.w	r4, r3, r1
 800d8aa:	0fe4      	lsrs	r4, r4, #31
 800d8ac:	2c00      	cmp	r4, #0
 800d8ae:	4cb5      	ldr	r4, [pc, #724]	; (800db84 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 800d8b0:	bf06      	itte	eq
 800d8b2:	2500      	moveq	r5, #0
 800d8b4:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
 800d8b8:	f04f 35ff 	movne.w	r5, #4294967295
 800d8bc:	428b      	cmp	r3, r1
 800d8be:	f040 80f8 	bne.w	800dab2 <_lite_kernel_nl_softmax_is8os8+0xf2e>
 800d8c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800d8c6:	f040 80f4 	bne.w	800dab2 <_lite_kernel_nl_softmax_is8os8+0xf2e>
 800d8ca:	f04f 31ff 	mov.w	r1, #4294967295
 800d8ce:	004c      	lsls	r4, r1, #1
 800d8d0:	9b01      	ldr	r3, [sp, #4]
 800d8d2:	2b1f      	cmp	r3, #31
 800d8d4:	dd05      	ble.n	800d8e2 <_lite_kernel_nl_softmax_is8os8+0xd5e>
 800d8d6:	9b06      	ldr	r3, [sp, #24]
 800d8d8:	f1c3 0304 	rsb	r3, r3, #4
 800d8dc:	411c      	asrs	r4, r3
 800d8de:	231f      	movs	r3, #31
 800d8e0:	9301      	str	r3, [sp, #4]
 800d8e2:	f1ba 0f00 	cmp.w	sl, #0
 800d8e6:	d040      	beq.n	800d96a <_lite_kernel_nl_softmax_is8os8+0xde6>
 800d8e8:	9d01      	ldr	r5, [sp, #4]
 800d8ea:	2601      	movs	r6, #1
 800d8ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d8f0:	f8cd 9020 	str.w	r9, [sp, #32]
 800d8f4:	40ae      	lsls	r6, r5
 800d8f6:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d8f8:	fa43 f505 	asr.w	r5, r3, r5
 800d8fc:	9902      	ldr	r1, [sp, #8]
 800d8fe:	3e01      	subs	r6, #1
 800d900:	f8dd 90a4 	ldr.w	r9, [sp, #164]	; 0xa4
 800d904:	ea06 0703 	and.w	r7, r6, r3
 800d908:	ea4f 0c66 	mov.w	ip, r6, asr #1
 800d90c:	9603      	str	r6, [sp, #12]
 800d90e:	9705      	str	r7, [sp, #20]
 800d910:	2780      	movs	r7, #128	; 0x80
 800d912:	e9cd 5306 	strd	r5, r3, [sp, #24]
 800d916:	f10c 0301 	add.w	r3, ip, #1
 800d91a:	9304      	str	r3, [sp, #16]
 800d91c:	f911 3f01 	ldrsb.w	r3, [r1, #1]!
 800d920:	1ad3      	subs	r3, r2, r3
 800d922:	4598      	cmp	r8, r3
 800d924:	dd4f      	ble.n	800d9c6 <_lite_kernel_nl_softmax_is8os8+0xe42>
 800d926:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800d92a:	ea85 0304 	eor.w	r3, r5, r4
 800d92e:	0fdb      	lsrs	r3, r3, #31
 800d930:	2b00      	cmp	r3, #0
 800d932:	4b94      	ldr	r3, [pc, #592]	; (800db84 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 800d934:	bf06      	itte	eq
 800d936:	f04f 0b00 	moveq.w	fp, #0
 800d93a:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 800d93e:	f04f 3bff 	movne.w	fp, #4294967295
 800d942:	42a5      	cmp	r5, r4
 800d944:	d141      	bne.n	800d9ca <_lite_kernel_nl_softmax_is8os8+0xe46>
 800d946:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800d94a:	d13e      	bne.n	800d9ca <_lite_kernel_nl_softmax_is8os8+0xe46>
 800d94c:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
 800d950:	45ac      	cmp	ip, r5
 800d952:	da00      	bge.n	800d956 <_lite_kernel_nl_softmax_is8os8+0xdd2>
 800d954:	3301      	adds	r3, #1
 800d956:	2bfe      	cmp	r3, #254	; 0xfe
 800d958:	dd4e      	ble.n	800d9f8 <_lite_kernel_nl_softmax_is8os8+0xe74>
 800d95a:	237f      	movs	r3, #127	; 0x7f
 800d95c:	7003      	strb	r3, [r0, #0]
 800d95e:	4571      	cmp	r1, lr
 800d960:	f100 0001 	add.w	r0, r0, #1
 800d964:	d1da      	bne.n	800d91c <_lite_kernel_nl_softmax_is8os8+0xd98>
 800d966:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d96a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d96c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800d96e:	4499      	add	r9, r3
 800d970:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d972:	4413      	add	r3, r2
 800d974:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d976:	9315      	str	r3, [sp, #84]	; 0x54
 800d978:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d97a:	449e      	add	lr, r3
 800d97c:	9b02      	ldr	r3, [sp, #8]
 800d97e:	4413      	add	r3, r2
 800d980:	9302      	str	r3, [sp, #8]
 800d982:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d984:	454b      	cmp	r3, r9
 800d986:	f67f ac7e 	bls.w	800d286 <_lite_kernel_nl_softmax_is8os8+0x702>
 800d98a:	9b02      	ldr	r3, [sp, #8]
 800d98c:	f1ba 0f01 	cmp.w	sl, #1
 800d990:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800d994:	f63f ae64 	bhi.w	800d660 <_lite_kernel_nl_softmax_is8os8+0xadc>
 800d998:	f1ba 0f00 	cmp.w	sl, #0
 800d99c:	f47f ae68 	bne.w	800d670 <_lite_kernel_nl_softmax_is8os8+0xaec>
 800d9a0:	2303      	movs	r3, #3
 800d9a2:	9301      	str	r3, [sp, #4]
 800d9a4:	2320      	movs	r3, #32
 800d9a6:	9306      	str	r3, [sp, #24]
 800d9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ac:	2000      	movs	r0, #0
 800d9ae:	f04f 365a 	mov.w	r6, #1515870810	; 0x5a5a5a5a
 800d9b2:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 800d9b6:	4974      	ldr	r1, [pc, #464]	; (800db88 <_lite_kernel_nl_softmax_is8os8+0x1004>)
 800d9b8:	469b      	mov	fp, r3
 800d9ba:	4635      	mov	r5, r6
 800d9bc:	4604      	mov	r4, r0
 800d9be:	9303      	str	r3, [sp, #12]
 800d9c0:	e9cd 7004 	strd	r7, r0, [sp, #16]
 800d9c4:	e6ce      	b.n	800d764 <_lite_kernel_nl_softmax_is8os8+0xbe0>
 800d9c6:	7007      	strb	r7, [r0, #0]
 800d9c8:	e7c9      	b.n	800d95e <_lite_kernel_nl_softmax_is8os8+0xdda>
 800d9ca:	fbc4 3b05 	smlal	r3, fp, r4, r5
 800d9ce:	f1bb 0f00 	cmp.w	fp, #0
 800d9d2:	da03      	bge.n	800d9dc <_lite_kernel_nl_softmax_is8os8+0xe58>
 800d9d4:	9d07      	ldr	r5, [sp, #28]
 800d9d6:	195b      	adds	r3, r3, r5
 800d9d8:	f14b 0b00 	adc.w	fp, fp, #0
 800d9dc:	0fdb      	lsrs	r3, r3, #31
 800d9de:	9d03      	ldr	r5, [sp, #12]
 800d9e0:	9e01      	ldr	r6, [sp, #4]
 800d9e2:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 800d9e6:	401d      	ands	r5, r3
 800d9e8:	4133      	asrs	r3, r6
 800d9ea:	d5b1      	bpl.n	800d950 <_lite_kernel_nl_softmax_is8os8+0xdcc>
 800d9ec:	9e04      	ldr	r6, [sp, #16]
 800d9ee:	42b5      	cmp	r5, r6
 800d9f0:	dcb0      	bgt.n	800d954 <_lite_kernel_nl_softmax_is8os8+0xdd0>
 800d9f2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800d9f6:	e7b1      	b.n	800d95c <_lite_kernel_nl_softmax_is8os8+0xdd8>
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	ddfa      	ble.n	800d9f2 <_lite_kernel_nl_softmax_is8os8+0xe6e>
 800d9fc:	3b80      	subs	r3, #128	; 0x80
 800d9fe:	b25b      	sxtb	r3, r3
 800da00:	e7ac      	b.n	800d95c <_lite_kernel_nl_softmax_is8os8+0xdd8>
 800da02:	4862      	ldr	r0, [pc, #392]	; (800db8c <_lite_kernel_nl_softmax_is8os8+0x1008>)
 800da04:	9903      	ldr	r1, [sp, #12]
 800da06:	4420      	add	r0, r4
 800da08:	ea91 0f00 	teq	r1, r0
 800da0c:	f140 8082 	bpl.w	800db14 <_lite_kernel_nl_softmax_is8os8+0xf90>
 800da10:	17c1      	asrs	r1, r0, #31
 800da12:	fb00 f40b 	mul.w	r4, r0, fp
 800da16:	fb03 4401 	mla	r4, r3, r1, r4
 800da1a:	fba0 1503 	umull	r1, r5, r0, r3
 800da1e:	4425      	add	r5, r4
 800da20:	4c58      	ldr	r4, [pc, #352]	; (800db84 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 800da22:	1909      	adds	r1, r1, r4
 800da24:	f165 0500 	sbc.w	r5, r5, #0
 800da28:	2d00      	cmp	r5, #0
 800da2a:	da05      	bge.n	800da38 <_lite_kernel_nl_softmax_is8os8+0xeb4>
 800da2c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800da30:	190c      	adds	r4, r1, r4
 800da32:	4621      	mov	r1, r4
 800da34:	f145 0500 	adc.w	r5, r5, #0
 800da38:	0fc9      	lsrs	r1, r1, #31
 800da3a:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 800da3e:	f04f 35ff 	mov.w	r5, #4294967295
 800da42:	f1c1 5400 	rsb	r4, r1, #536870912	; 0x20000000
 800da46:	494f      	ldr	r1, [pc, #316]	; (800db84 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 800da48:	fbc0 1504 	smlal	r1, r5, r0, r4
 800da4c:	2d00      	cmp	r5, #0
 800da4e:	da05      	bge.n	800da5c <_lite_kernel_nl_softmax_is8os8+0xed8>
 800da50:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800da54:	190c      	adds	r4, r1, r4
 800da56:	4621      	mov	r1, r4
 800da58:	f145 0500 	adc.w	r5, r5, #0
 800da5c:	0fc9      	lsrs	r1, r1, #31
 800da5e:	ea41 0445 	orr.w	r4, r1, r5, lsl #1
 800da62:	f1b4 4f60 	cmp.w	r4, #3758096384	; 0xe0000000
 800da66:	ea4f 0184 	mov.w	r1, r4, lsl #2
 800da6a:	f73f aefb 	bgt.w	800d864 <_lite_kernel_nl_softmax_is8os8+0xce0>
 800da6e:	f100 4100 	add.w	r1, r0, #2147483648	; 0x80000000
 800da72:	9803      	ldr	r0, [sp, #12]
 800da74:	ea91 0f00 	teq	r1, r0
 800da78:	d548      	bpl.n	800db0c <_lite_kernel_nl_softmax_is8os8+0xf88>
 800da7a:	17c8      	asrs	r0, r1, #31
 800da7c:	fb03 f500 	mul.w	r5, r3, r0
 800da80:	fba3 3401 	umull	r3, r4, r3, r1
 800da84:	fb01 550b 	mla	r5, r1, fp, r5
 800da88:	442c      	add	r4, r5
 800da8a:	4d3e      	ldr	r5, [pc, #248]	; (800db84 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 800da8c:	195b      	adds	r3, r3, r5
 800da8e:	f164 0400 	sbc.w	r4, r4, #0
 800da92:	2c00      	cmp	r4, #0
 800da94:	da05      	bge.n	800daa2 <_lite_kernel_nl_softmax_is8os8+0xf1e>
 800da96:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800da9a:	195d      	adds	r5, r3, r5
 800da9c:	462b      	mov	r3, r5
 800da9e:	f144 0400 	adc.w	r4, r4, #0
 800daa2:	0fdb      	lsrs	r3, r3, #31
 800daa4:	f04f 35ff 	mov.w	r5, #4294967295
 800daa8:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 800daac:	4c35      	ldr	r4, [pc, #212]	; (800db84 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 800daae:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 800dab2:	fb03 f000 	mul.w	r0, r3, r0
 800dab6:	17de      	asrs	r6, r3, #31
 800dab8:	fb01 0006 	mla	r0, r1, r6, r0
 800dabc:	fba3 3601 	umull	r3, r6, r3, r1
 800dac0:	191b      	adds	r3, r3, r4
 800dac2:	4430      	add	r0, r6
 800dac4:	eb40 0005 	adc.w	r0, r0, r5
 800dac8:	2800      	cmp	r0, #0
 800daca:	da05      	bge.n	800dad8 <_lite_kernel_nl_softmax_is8os8+0xf54>
 800dacc:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800dad0:	191c      	adds	r4, r3, r4
 800dad2:	4623      	mov	r3, r4
 800dad4:	f140 0000 	adc.w	r0, r0, #0
 800dad8:	0fdb      	lsrs	r3, r3, #31
 800dada:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 800dade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dae2:	db07      	blt.n	800daf4 <_lite_kernel_nl_softmax_is8os8+0xf70>
 800dae4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800dae8:	4421      	add	r1, r4
 800daea:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800daee:	f6bf aeef 	bge.w	800d8d0 <_lite_kernel_nl_softmax_is8os8+0xd4c>
 800daf2:	e6ec      	b.n	800d8ce <_lite_kernel_nl_softmax_is8os8+0xd4a>
 800daf4:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800daf8:	dc31      	bgt.n	800db5e <_lite_kernel_nl_softmax_is8os8+0xfda>
 800dafa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dafe:	004c      	lsls	r4, r1, #1
 800db00:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800db04:	bfd8      	it	le
 800db06:	f04f 4400 	movle.w	r4, #2147483648	; 0x80000000
 800db0a:	e6e1      	b.n	800d8d0 <_lite_kernel_nl_softmax_is8os8+0xd4c>
 800db0c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800db10:	2500      	movs	r5, #0
 800db12:	e6b0      	b.n	800d876 <_lite_kernel_nl_softmax_is8os8+0xcf2>
 800db14:	fba0 1503 	umull	r1, r5, r0, r3
 800db18:	17c4      	asrs	r4, r0, #31
 800db1a:	fb00 f60b 	mul.w	r6, r0, fp
 800db1e:	f111 4180 	adds.w	r1, r1, #1073741824	; 0x40000000
 800db22:	fb03 6604 	mla	r6, r3, r4, r6
 800db26:	eb46 0505 	adc.w	r5, r6, r5
 800db2a:	2d00      	cmp	r5, #0
 800db2c:	da05      	bge.n	800db3a <_lite_kernel_nl_softmax_is8os8+0xfb6>
 800db2e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800db32:	198e      	adds	r6, r1, r6
 800db34:	4631      	mov	r1, r6
 800db36:	f145 0500 	adc.w	r5, r5, #0
 800db3a:	0fc9      	lsrs	r1, r1, #31
 800db3c:	f04f 36ff 	mov.w	r6, #4294967295
 800db40:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 800db44:	4d0f      	ldr	r5, [pc, #60]	; (800db84 <_lite_kernel_nl_softmax_is8os8+0x1000>)
 800db46:	f1c1 5100 	rsb	r1, r1, #536870912	; 0x20000000
 800db4a:	e66f      	b.n	800d82c <_lite_kernel_nl_softmax_is8os8+0xca8>
 800db4c:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 800db50:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800db54:	db0b      	blt.n	800db6e <_lite_kernel_nl_softmax_is8os8+0xfea>
 800db56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800db5a:	f7ff bb25 	b.w	800d1a8 <_lite_kernel_nl_softmax_is8os8+0x624>
 800db5e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800db62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db66:	db0b      	blt.n	800db80 <_lite_kernel_nl_softmax_is8os8+0xffc>
 800db68:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800db6c:	e6b0      	b.n	800d8d0 <_lite_kernel_nl_softmax_is8os8+0xd4c>
 800db6e:	0051      	lsls	r1, r2, #1
 800db70:	f7ff bb98 	b.w	800d2a4 <_lite_kernel_nl_softmax_is8os8+0x720>
 800db74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800db76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db78:	4413      	add	r3, r2
 800db7a:	9306      	str	r3, [sp, #24]
 800db7c:	f7ff b83f 	b.w	800cbfe <_lite_kernel_nl_softmax_is8os8+0x7a>
 800db80:	005c      	lsls	r4, r3, #1
 800db82:	e7bd      	b.n	800db00 <_lite_kernel_nl_softmax_is8os8+0xf7c>
 800db84:	c0000001 	.word	0xc0000001
 800db88:	20000001 	.word	0x20000001
 800db8c:	da5a5a5a 	.word	0xda5a5a5a

0800db90 <_lite_kernel_nl_softmax_iu8ou8>:
 800db90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db94:	b099      	sub	sp, #100	; 0x64
 800db96:	9013      	str	r0, [sp, #76]	; 0x4c
 800db98:	1888      	adds	r0, r1, r2
 800db9a:	9102      	str	r1, [sp, #8]
 800db9c:	4281      	cmp	r1, r0
 800db9e:	9303      	str	r3, [sp, #12]
 800dba0:	9016      	str	r0, [sp, #88]	; 0x58
 800dba2:	f080 83bd 	bcs.w	800e320 <_lite_kernel_nl_softmax_iu8ou8+0x790>
 800dba6:	460a      	mov	r2, r1
 800dba8:	4619      	mov	r1, r3
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	18d3      	adds	r3, r2, r3
 800dbae:	9314      	str	r3, [sp, #80]	; 0x50
 800dbb0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800dbb2:	3b04      	subs	r3, #4
 800dbb4:	9315      	str	r3, [sp, #84]	; 0x54
 800dbb6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800dbba:	9317      	str	r3, [sp, #92]	; 0x5c
 800dbbc:	9b02      	ldr	r3, [sp, #8]
 800dbbe:	9903      	ldr	r1, [sp, #12]
 800dbc0:	781a      	ldrb	r2, [r3, #0]
 800dbc2:	2901      	cmp	r1, #1
 800dbc4:	9212      	str	r2, [sp, #72]	; 0x48
 800dbc6:	f240 83c2 	bls.w	800e34e <_lite_kernel_nl_softmax_iu8ou8+0x7be>
 800dbca:	9814      	ldr	r0, [sp, #80]	; 0x50
 800dbcc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800dbd0:	428a      	cmp	r2, r1
 800dbd2:	bfb8      	it	lt
 800dbd4:	460a      	movlt	r2, r1
 800dbd6:	4283      	cmp	r3, r0
 800dbd8:	d1f8      	bne.n	800dbcc <_lite_kernel_nl_softmax_iu8ou8+0x3c>
 800dbda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dbdc:	9212      	str	r2, [sp, #72]	; 0x48
 800dbde:	4413      	add	r3, r2
 800dbe0:	9305      	str	r3, [sp, #20]
 800dbe2:	9b02      	ldr	r3, [sp, #8]
 800dbe4:	f103 3bff 	add.w	fp, r3, #4294967295
 800dbe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbea:	9301      	str	r3, [sp, #4]
 800dbec:	2300      	movs	r3, #0
 800dbee:	46dc      	mov	ip, fp
 800dbf0:	9304      	str	r3, [sp, #16]
 800dbf2:	e104      	b.n	800ddfe <_lite_kernel_nl_softmax_iu8ou8+0x26e>
 800dbf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dbf6:	1a9b      	subs	r3, r3, r2
 800dbf8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800dbfa:	4093      	lsls	r3, r2
 800dbfc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800dbfe:	405a      	eors	r2, r3
 800dc00:	0fd2      	lsrs	r2, r2, #31
 800dc02:	2a00      	cmp	r2, #0
 800dc04:	4ac7      	ldr	r2, [pc, #796]	; (800df24 <_lite_kernel_nl_softmax_iu8ou8+0x394>)
 800dc06:	bf0b      	itete	eq
 800dc08:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 800dc0c:	4611      	movne	r1, r2
 800dc0e:	2200      	moveq	r2, #0
 800dc10:	f04f 32ff 	movne.w	r2, #4294967295
 800dc14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc18:	f040 80fa 	bne.w	800de10 <_lite_kernel_nl_softmax_iu8ou8+0x280>
 800dc1c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800dc1e:	4298      	cmp	r0, r3
 800dc20:	f040 80f6 	bne.w	800de10 <_lite_kernel_nl_softmax_iu8ou8+0x280>
 800dc24:	4bc0      	ldr	r3, [pc, #768]	; (800df28 <_lite_kernel_nl_softmax_iu8ou8+0x398>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	f04f 31ff 	mov.w	r1, #4294967295
 800dc2c:	4dbf      	ldr	r5, [pc, #764]	; (800df2c <_lite_kernel_nl_softmax_iu8ou8+0x39c>)
 800dc2e:	9310      	str	r3, [sp, #64]	; 0x40
 800dc30:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800dc34:	4bbe      	ldr	r3, [pc, #760]	; (800df30 <_lite_kernel_nl_softmax_iu8ou8+0x3a0>)
 800dc36:	4696      	mov	lr, r2
 800dc38:	460f      	mov	r7, r1
 800dc3a:	4689      	mov	r9, r1
 800dc3c:	9311      	str	r3, [sp, #68]	; 0x44
 800dc3e:	468a      	mov	sl, r1
 800dc40:	4bbc      	ldr	r3, [pc, #752]	; (800df34 <_lite_kernel_nl_softmax_iu8ou8+0x3a4>)
 800dc42:	4614      	mov	r4, r2
 800dc44:	4693      	mov	fp, r2
 800dc46:	2001      	movs	r0, #1
 800dc48:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38
 800dc4c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 800dc50:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 800dc54:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800dc58:	e9cd 2206 	strd	r2, r2, [sp, #24]
 800dc5c:	4282      	cmp	r2, r0
 800dc5e:	4ab1      	ldr	r2, [pc, #708]	; (800df24 <_lite_kernel_nl_softmax_iu8ou8+0x394>)
 800dc60:	9811      	ldr	r0, [sp, #68]	; 0x44
 800dc62:	bfc8      	it	gt
 800dc64:	3601      	addgt	r6, #1
 800dc66:	f1be 0f00 	cmp.w	lr, #0
 800dc6a:	bf06      	itte	eq
 800dc6c:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 800dc70:	f04f 0e00 	moveq.w	lr, #0
 800dc74:	f04f 3eff 	movne.w	lr, #4294967295
 800dc78:	1882      	adds	r2, r0, r2
 800dc7a:	eb43 0e0e 	adc.w	lr, r3, lr
 800dc7e:	f1be 0f00 	cmp.w	lr, #0
 800dc82:	da05      	bge.n	800dc90 <_lite_kernel_nl_softmax_iu8ou8+0x100>
 800dc84:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dc88:	18d3      	adds	r3, r2, r3
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	f14e 0e00 	adc.w	lr, lr, #0
 800dc90:	0fd2      	lsrs	r2, r2, #31
 800dc92:	48a9      	ldr	r0, [pc, #676]	; (800df38 <_lite_kernel_nl_softmax_iu8ou8+0x3a8>)
 800dc94:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
 800dc98:	4432      	add	r2, r6
 800dc9a:	0fd3      	lsrs	r3, r2, #31
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	4ba1      	ldr	r3, [pc, #644]	; (800df24 <_lite_kernel_nl_softmax_iu8ou8+0x394>)
 800dca0:	bf06      	itte	eq
 800dca2:	2600      	moveq	r6, #0
 800dca4:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 800dca8:	f04f 36ff 	movne.w	r6, #4294967295
 800dcac:	fbc2 3600 	smlal	r3, r6, r2, r0
 800dcb0:	2e00      	cmp	r6, #0
 800dcb2:	da05      	bge.n	800dcc0 <_lite_kernel_nl_softmax_iu8ou8+0x130>
 800dcb4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800dcb8:	189a      	adds	r2, r3, r2
 800dcba:	4613      	mov	r3, r2
 800dcbc:	f146 0600 	adc.w	r6, r6, #0
 800dcc0:	0fdb      	lsrs	r3, r3, #31
 800dcc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dcc4:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 800dcc8:	441a      	add	r2, r3
 800dcca:	07d0      	lsls	r0, r2, #31
 800dccc:	ea4f 0362 	mov.w	r3, r2, asr #1
 800dcd0:	d502      	bpl.n	800dcd8 <_lite_kernel_nl_softmax_iu8ou8+0x148>
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	bfa8      	it	ge
 800dcd6:	3301      	addge	r3, #1
 800dcd8:	442b      	add	r3, r5
 800dcda:	4898      	ldr	r0, [pc, #608]	; (800df3c <_lite_kernel_nl_softmax_iu8ou8+0x3ac>)
 800dcdc:	0fda      	lsrs	r2, r3, #31
 800dcde:	2a00      	cmp	r2, #0
 800dce0:	4a90      	ldr	r2, [pc, #576]	; (800df24 <_lite_kernel_nl_softmax_iu8ou8+0x394>)
 800dce2:	bf06      	itte	eq
 800dce4:	2500      	moveq	r5, #0
 800dce6:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 800dcea:	f04f 35ff 	movne.w	r5, #4294967295
 800dcee:	fbc3 2500 	smlal	r2, r5, r3, r0
 800dcf2:	2d00      	cmp	r5, #0
 800dcf4:	da05      	bge.n	800dd02 <_lite_kernel_nl_softmax_iu8ou8+0x172>
 800dcf6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dcfa:	18d3      	adds	r3, r2, r3
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	f145 0500 	adc.w	r5, r5, #0
 800dd02:	0fd2      	lsrs	r2, r2, #31
 800dd04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd08:	488d      	ldr	r0, [pc, #564]	; (800df40 <_lite_kernel_nl_softmax_iu8ou8+0x3b0>)
 800dd0a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800dd0e:	2500      	movs	r5, #0
 800dd10:	461e      	mov	r6, r3
 800dd12:	f102 42e2 	add.w	r2, r2, #1895825408	; 0x71000000
 800dd16:	46ae      	mov	lr, r5
 800dd18:	f5a2 2225 	sub.w	r2, r2, #675840	; 0xa5000
 800dd1c:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
 800dd20:	fbc2 6e00 	smlal	r6, lr, r2, r0
 800dd24:	0ff6      	lsrs	r6, r6, #31
 800dd26:	4017      	ands	r7, r2
 800dd28:	4886      	ldr	r0, [pc, #536]	; (800df44 <_lite_kernel_nl_softmax_iu8ou8+0x3b4>)
 800dd2a:	ea46 064e 	orr.w	r6, r6, lr, lsl #1
 800dd2e:	461a      	mov	r2, r3
 800dd30:	4034      	ands	r4, r6
 800dd32:	462e      	mov	r6, r5
 800dd34:	407c      	eors	r4, r7
 800dd36:	fbc4 2600 	smlal	r2, r6, r4, r0
 800dd3a:	0fd2      	lsrs	r2, r2, #31
 800dd3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd3e:	ea09 0904 	and.w	r9, r9, r4
 800dd42:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
 800dd46:	462c      	mov	r4, r5
 800dd48:	4e7f      	ldr	r6, [pc, #508]	; (800df48 <_lite_kernel_nl_softmax_iu8ou8+0x3b8>)
 800dd4a:	4010      	ands	r0, r2
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	ea89 0000 	eor.w	r0, r9, r0
 800dd52:	fbc0 2406 	smlal	r2, r4, r0, r6
 800dd56:	0fd2      	lsrs	r2, r2, #31
 800dd58:	ea0a 0a00 	and.w	sl, sl, r0
 800dd5c:	4e7b      	ldr	r6, [pc, #492]	; (800df4c <_lite_kernel_nl_softmax_iu8ou8+0x3bc>)
 800dd5e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800dd62:	462c      	mov	r4, r5
 800dd64:	ea0b 0b02 	and.w	fp, fp, r2
 800dd68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd6a:	ea8a 0b0b 	eor.w	fp, sl, fp
 800dd6e:	ea02 000b 	and.w	r0, r2, fp
 800dd72:	461a      	mov	r2, r3
 800dd74:	fbcb 2406 	smlal	r2, r4, fp, r6
 800dd78:	0fd2      	lsrs	r2, r2, #31
 800dd7a:	4e75      	ldr	r6, [pc, #468]	; (800df50 <_lite_kernel_nl_softmax_iu8ou8+0x3c0>)
 800dd7c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800dd80:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800dd82:	4014      	ands	r4, r2
 800dd84:	4622      	mov	r2, r4
 800dd86:	462c      	mov	r4, r5
 800dd88:	4042      	eors	r2, r0
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	fbc2 0406 	smlal	r0, r4, r2, r6
 800dd90:	0fc0      	lsrs	r0, r0, #31
 800dd92:	4011      	ands	r1, r2
 800dd94:	9a08      	ldr	r2, [sp, #32]
 800dd96:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
 800dd9a:	4e6e      	ldr	r6, [pc, #440]	; (800df54 <_lite_kernel_nl_softmax_iu8ou8+0x3c4>)
 800dd9c:	462c      	mov	r4, r5
 800dd9e:	4002      	ands	r2, r0
 800dda0:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dda2:	404a      	eors	r2, r1
 800dda4:	4619      	mov	r1, r3
 800dda6:	fbc2 1406 	smlal	r1, r4, r2, r6
 800ddaa:	0fc9      	lsrs	r1, r1, #31
 800ddac:	4010      	ands	r0, r2
 800ddae:	9a07      	ldr	r2, [sp, #28]
 800ddb0:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 800ddb4:	400a      	ands	r2, r1
 800ddb6:	21f2      	movs	r1, #242	; 0xf2
 800ddb8:	4042      	eors	r2, r0
 800ddba:	fbc2 3501 	smlal	r3, r5, r2, r1
 800ddbe:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ddc0:	0fdb      	lsrs	r3, r3, #31
 800ddc2:	4011      	ands	r1, r2
 800ddc4:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 800ddc8:	460a      	mov	r2, r1
 800ddca:	9906      	ldr	r1, [sp, #24]
 800ddcc:	4019      	ands	r1, r3
 800ddce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddd0:	404a      	eors	r2, r1
 800ddd2:	401a      	ands	r2, r3
 800ddd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ddd6:	405a      	eors	r2, r3
 800ddd8:	1313      	asrs	r3, r2, #12
 800ddda:	0511      	lsls	r1, r2, #20
 800dddc:	9904      	ldr	r1, [sp, #16]
 800ddde:	bf48      	it	mi
 800dde0:	3301      	addmi	r3, #1
 800dde2:	4419      	add	r1, r3
 800dde4:	9104      	str	r1, [sp, #16]
 800dde6:	9b01      	ldr	r3, [sp, #4]
 800dde8:	f843 2f04 	str.w	r2, [r3, #4]!
 800ddec:	9a02      	ldr	r2, [sp, #8]
 800ddee:	9301      	str	r3, [sp, #4]
 800ddf0:	f108 0302 	add.w	r3, r8, #2
 800ddf4:	1a9b      	subs	r3, r3, r2
 800ddf6:	9a03      	ldr	r2, [sp, #12]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	f240 80ad 	bls.w	800df58 <_lite_kernel_nl_softmax_iu8ou8+0x3c8>
 800ddfe:	46e0      	mov	r8, ip
 800de00:	9a05      	ldr	r2, [sp, #20]
 800de02:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800de06:	429a      	cmp	r2, r3
 800de08:	f77f aef4 	ble.w	800dbf4 <_lite_kernel_nl_softmax_iu8ou8+0x64>
 800de0c:	2200      	movs	r2, #0
 800de0e:	e7ea      	b.n	800dde6 <_lite_kernel_nl_softmax_iu8ou8+0x256>
 800de10:	9824      	ldr	r0, [sp, #144]	; 0x90
 800de12:	fbc3 1200 	smlal	r1, r2, r3, r0
 800de16:	2a00      	cmp	r2, #0
 800de18:	da04      	bge.n	800de24 <_lite_kernel_nl_softmax_iu8ou8+0x294>
 800de1a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800de1e:	18c9      	adds	r1, r1, r3
 800de20:	f142 0200 	adc.w	r2, r2, #0
 800de24:	0fc9      	lsrs	r1, r1, #31
 800de26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800de2a:	2600      	movs	r6, #0
 800de2c:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
 800de30:	f041 477f 	orr.w	r7, r1, #4278190080	; 0xff000000
 800de34:	017d      	lsls	r5, r7, #5
 800de36:	1a7f      	subs	r7, r7, r1
 800de38:	f105 5580 	add.w	r5, r5, #268435456	; 0x10000000
 800de3c:	fbc5 3605 	smlal	r3, r6, r5, r5
 800de40:	2e00      	cmp	r6, #0
 800de42:	da05      	bge.n	800de50 <_lite_kernel_nl_softmax_iu8ou8+0x2c0>
 800de44:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800de48:	189a      	adds	r2, r3, r2
 800de4a:	4613      	mov	r3, r2
 800de4c:	f146 0600 	adc.w	r6, r6, #0
 800de50:	0fdb      	lsrs	r3, r3, #31
 800de52:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 800de56:	17f6      	asrs	r6, r6, #31
 800de58:	fba3 2003 	umull	r2, r0, r3, r3
 800de5c:	fb03 f406 	mul.w	r4, r3, r6
 800de60:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
 800de64:	9310      	str	r3, [sp, #64]	; 0x40
 800de66:	eb40 0044 	adc.w	r0, r0, r4, lsl #1
 800de6a:	2800      	cmp	r0, #0
 800de6c:	da05      	bge.n	800de7a <_lite_kernel_nl_softmax_iu8ou8+0x2ea>
 800de6e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800de72:	1914      	adds	r4, r2, r4
 800de74:	4622      	mov	r2, r4
 800de76:	f140 0000 	adc.w	r0, r0, #0
 800de7a:	0fd2      	lsrs	r2, r2, #31
 800de7c:	fb05 f606 	mul.w	r6, r5, r6
 800de80:	ea83 0e05 	eor.w	lr, r3, r5
 800de84:	fab1 f181 	clz	r1, r1
 800de88:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800de8c:	f3c7 7940 	ubfx	r9, r7, #29, #1
 800de90:	17e8      	asrs	r0, r5, #31
 800de92:	f3c7 7a80 	ubfx	sl, r7, #30, #1
 800de96:	0949      	lsrs	r1, r1, #5
 800de98:	f3c7 6400 	ubfx	r4, r7, #24, #1
 800de9c:	fb03 6600 	mla	r6, r3, r0, r6
 800dea0:	f3c7 7000 	ubfx	r0, r7, #28, #1
 800dea4:	f3c7 6b80 	ubfx	fp, r7, #26, #1
 800dea8:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800deac:	9606      	str	r6, [sp, #24]
 800deae:	fba5 6303 	umull	r6, r3, r5, r3
 800deb2:	9007      	str	r0, [sp, #28]
 800deb4:	f3c7 6040 	ubfx	r0, r7, #25, #1
 800deb8:	9611      	str	r6, [sp, #68]	; 0x44
 800deba:	9e06      	ldr	r6, [sp, #24]
 800debc:	4433      	add	r3, r6
 800debe:	424e      	negs	r6, r1
 800dec0:	3901      	subs	r1, #1
 800dec2:	910a      	str	r1, [sp, #40]	; 0x28
 800dec4:	f026 4100 	bic.w	r1, r6, #2147483648	; 0x80000000
 800dec8:	f347 66c0 	sbfx	r6, r7, #27, #1
 800decc:	910f      	str	r1, [sp, #60]	; 0x3c
 800dece:	f3c7 61c0 	ubfx	r1, r7, #27, #1
 800ded2:	9f07      	ldr	r7, [sp, #28]
 800ded4:	3901      	subs	r1, #1
 800ded6:	960e      	str	r6, [sp, #56]	; 0x38
 800ded8:	1096      	asrs	r6, r2, #2
 800deda:	f002 0203 	and.w	r2, r2, #3
 800dede:	910b      	str	r1, [sp, #44]	; 0x2c
 800dee0:	f107 31ff 	add.w	r1, r7, #4294967295
 800dee4:	f1c7 0700 	rsb	r7, r7, #0
 800dee8:	9708      	str	r7, [sp, #32]
 800deea:	f10a 37ff 	add.w	r7, sl, #4294967295
 800deee:	970d      	str	r7, [sp, #52]	; 0x34
 800def0:	f1ca 0700 	rsb	r7, sl, #0
 800def4:	f10b 3aff 	add.w	sl, fp, #4294967295
 800def8:	f1cb 0b00 	rsb	fp, fp, #0
 800defc:	9706      	str	r7, [sp, #24]
 800defe:	f109 37ff 	add.w	r7, r9, #4294967295
 800df02:	970c      	str	r7, [sp, #48]	; 0x30
 800df04:	f1c9 0700 	rsb	r7, r9, #0
 800df08:	f100 39ff 	add.w	r9, r0, #4294967295
 800df0c:	f1c0 0000 	rsb	r0, r0, #0
 800df10:	9707      	str	r7, [sp, #28]
 800df12:	f104 37ff 	add.w	r7, r4, #4294967295
 800df16:	9009      	str	r0, [sp, #36]	; 0x24
 800df18:	f1c4 0400 	rsb	r4, r4, #0
 800df1c:	bf54      	ite	pl
 800df1e:	2001      	movpl	r0, #1
 800df20:	2002      	movmi	r0, #2
 800df22:	e69b      	b.n	800dc5c <_lite_kernel_nl_softmax_iu8ou8+0xcc>
 800df24:	c0000001 	.word	0xc0000001
 800df28:	01fffff8 	.word	0x01fffff8
 800df2c:	0fffffe0 	.word	0x0fffffe0
 800df30:	40000100 	.word	0x40000100
 800df34:	001fffff 	.word	0x001fffff
 800df38:	2aaaaaab 	.word	0x2aaaaaab
 800df3c:	70f5a894 	.word	0x70f5a894
 800df40:	63afbe7b 	.word	0x63afbe7b
 800df44:	4da2cbf2 	.word	0x4da2cbf2
 800df48:	2f16ac6c 	.word	0x2f16ac6c
 800df4c:	1152aaa4 	.word	0x1152aaa4
 800df50:	02582ab7 	.word	0x02582ab7
 800df54:	000afe11 	.word	0x000afe11
 800df58:	9b04      	ldr	r3, [sp, #16]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f000 81f8 	beq.w	800e350 <_lite_kernel_nl_softmax_iu8ou8+0x7c0>
 800df60:	fab3 f983 	clz	r9, r3
 800df64:	fa03 f209 	lsl.w	r2, r3, r9
 800df68:	f1c9 0a23 	rsb	sl, r9, #35	; 0x23
 800df6c:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 800df70:	17d9      	asrs	r1, r3, #31
 800df72:	f1b1 3fff 	cmp.w	r1, #4294967295
 800df76:	bf08      	it	eq
 800df78:	2a00      	cmpeq	r2, #0
 800df7a:	f000 81ed 	beq.w	800e358 <_lite_kernel_nl_softmax_iu8ou8+0x7c8>
 800df7e:	f113 4300 	adds.w	r3, r3, #2147483648	; 0x80000000
 800df82:	4ac2      	ldr	r2, [pc, #776]	; (800e28c <_lite_kernel_nl_softmax_iu8ou8+0x6fc>)
 800df84:	4dc2      	ldr	r5, [pc, #776]	; (800e290 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 800df86:	f141 0100 	adc.w	r1, r1, #0
 800df8a:	085b      	lsrs	r3, r3, #1
 800df8c:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 800df90:	1049      	asrs	r1, r1, #1
 800df92:	4258      	negs	r0, r3
 800df94:	469c      	mov	ip, r3
 800df96:	fb02 0001 	mla	r0, r2, r1, r0
 800df9a:	fba3 2402 	umull	r2, r4, r3, r2
 800df9e:	1952      	adds	r2, r2, r5
 800dfa0:	4420      	add	r0, r4
 800dfa2:	f160 0000 	sbc.w	r0, r0, #0
 800dfa6:	2800      	cmp	r0, #0
 800dfa8:	da05      	bge.n	800dfb6 <_lite_kernel_nl_softmax_iu8ou8+0x426>
 800dfaa:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800dfae:	1914      	adds	r4, r2, r4
 800dfb0:	4622      	mov	r2, r4
 800dfb2:	f140 0000 	adc.w	r0, r0, #0
 800dfb6:	0fd2      	lsrs	r2, r2, #31
 800dfb8:	ea42 0440 	orr.w	r4, r2, r0, lsl #1
 800dfbc:	f104 365a 	add.w	r6, r4, #1515870810	; 0x5a5a5a5a
 800dfc0:	17f0      	asrs	r0, r6, #31
 800dfc2:	fba3 2706 	umull	r2, r7, r3, r6
 800dfc6:	4635      	mov	r5, r6
 800dfc8:	fb03 fe00 	mul.w	lr, r3, r0
 800dfcc:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
 800dfd0:	fb06 ee01 	mla	lr, r6, r1, lr
 800dfd4:	eb4e 0707 	adc.w	r7, lr, r7
 800dfd8:	2f00      	cmp	r7, #0
 800dfda:	da06      	bge.n	800dfea <_lite_kernel_nl_softmax_iu8ou8+0x45a>
 800dfdc:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 800dfe0:	eb12 0e0e 	adds.w	lr, r2, lr
 800dfe4:	4672      	mov	r2, lr
 800dfe6:	f147 0700 	adc.w	r7, r7, #0
 800dfea:	0fd2      	lsrs	r2, r2, #31
 800dfec:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
 800dff0:	4fa7      	ldr	r7, [pc, #668]	; (800e290 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 800dff2:	f1c2 5200 	rsb	r2, r2, #536870912	; 0x20000000
 800dff6:	ea82 0e06 	eor.w	lr, r2, r6
 800dffa:	ea4f 7ede 	mov.w	lr, lr, lsr #31
 800dffe:	f1be 0f00 	cmp.w	lr, #0
 800e002:	bf06      	itte	eq
 800e004:	f04f 4780 	moveq.w	r7, #1073741824	; 0x40000000
 800e008:	f04f 0800 	moveq.w	r8, #0
 800e00c:	f04f 38ff 	movne.w	r8, #4294967295
 800e010:	fb02 f000 	mul.w	r0, r2, r0
 800e014:	ea4f 7ee2 	mov.w	lr, r2, asr #31
 800e018:	fb05 000e 	mla	r0, r5, lr, r0
 800e01c:	fba2 2505 	umull	r2, r5, r2, r5
 800e020:	19d2      	adds	r2, r2, r7
 800e022:	4428      	add	r0, r5
 800e024:	eb40 0508 	adc.w	r5, r0, r8
 800e028:	2d00      	cmp	r5, #0
 800e02a:	da05      	bge.n	800e038 <_lite_kernel_nl_softmax_iu8ou8+0x4a8>
 800e02c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800e030:	1810      	adds	r0, r2, r0
 800e032:	4602      	mov	r2, r0
 800e034:	f145 0500 	adc.w	r5, r5, #0
 800e038:	0fd2      	lsrs	r2, r2, #31
 800e03a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800e03e:	f1b2 4f60 	cmp.w	r2, #3758096384	; 0xe0000000
 800e042:	dd7f      	ble.n	800e144 <_lite_kernel_nl_softmax_iu8ou8+0x5b4>
 800e044:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 800e048:	4e91      	ldr	r6, [pc, #580]	; (800e290 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 800e04a:	ea80 020c 	eor.w	r2, r0, ip
 800e04e:	17c4      	asrs	r4, r0, #31
 800e050:	fb00 f501 	mul.w	r5, r0, r1
 800e054:	0fd2      	lsrs	r2, r2, #31
 800e056:	fb03 5504 	mla	r5, r3, r4, r5
 800e05a:	2a00      	cmp	r2, #0
 800e05c:	fba0 2e03 	umull	r2, lr, r0, r3
 800e060:	bf06      	itte	eq
 800e062:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 800e066:	2700      	moveq	r7, #0
 800e068:	f04f 37ff 	movne.w	r7, #4294967295
 800e06c:	4475      	add	r5, lr
 800e06e:	1992      	adds	r2, r2, r6
 800e070:	eb45 0507 	adc.w	r5, r5, r7
 800e074:	2d00      	cmp	r5, #0
 800e076:	da05      	bge.n	800e084 <_lite_kernel_nl_softmax_iu8ou8+0x4f4>
 800e078:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800e07c:	1996      	adds	r6, r2, r6
 800e07e:	4632      	mov	r2, r6
 800e080:	f145 0500 	adc.w	r5, r5, #0
 800e084:	0fd2      	lsrs	r2, r2, #31
 800e086:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800e08a:	4d81      	ldr	r5, [pc, #516]	; (800e290 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 800e08c:	f1c2 5200 	rsb	r2, r2, #536870912	; 0x20000000
 800e090:	ea80 0602 	eor.w	r6, r0, r2
 800e094:	0ff6      	lsrs	r6, r6, #31
 800e096:	2e00      	cmp	r6, #0
 800e098:	bf06      	itte	eq
 800e09a:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 800e09e:	2600      	moveq	r6, #0
 800e0a0:	f04f 36ff 	movne.w	r6, #4294967295
 800e0a4:	fb02 f404 	mul.w	r4, r2, r4
 800e0a8:	17d7      	asrs	r7, r2, #31
 800e0aa:	fb00 4407 	mla	r4, r0, r7, r4
 800e0ae:	fba2 2700 	umull	r2, r7, r2, r0
 800e0b2:	1952      	adds	r2, r2, r5
 800e0b4:	443c      	add	r4, r7
 800e0b6:	eb44 0406 	adc.w	r4, r4, r6
 800e0ba:	2c00      	cmp	r4, #0
 800e0bc:	da05      	bge.n	800e0ca <_lite_kernel_nl_softmax_iu8ou8+0x53a>
 800e0be:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800e0c2:	1955      	adds	r5, r2, r5
 800e0c4:	462a      	mov	r2, r5
 800e0c6:	f144 0400 	adc.w	r4, r4, #0
 800e0ca:	0fd2      	lsrs	r2, r2, #31
 800e0cc:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800e0d0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800e0d4:	db65      	blt.n	800e1a2 <_lite_kernel_nl_softmax_iu8ou8+0x612>
 800e0d6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800e0da:	1902      	adds	r2, r0, r4
 800e0dc:	ea92 0f0c 	teq	r2, ip
 800e0e0:	f140 8131 	bpl.w	800e346 <_lite_kernel_nl_softmax_iu8ou8+0x7b6>
 800e0e4:	4c6a      	ldr	r4, [pc, #424]	; (800e290 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 800e0e6:	f04f 35ff 	mov.w	r5, #4294967295
 800e0ea:	fb02 f101 	mul.w	r1, r2, r1
 800e0ee:	17d0      	asrs	r0, r2, #31
 800e0f0:	fb03 1100 	mla	r1, r3, r0, r1
 800e0f4:	fba2 3603 	umull	r3, r6, r2, r3
 800e0f8:	191b      	adds	r3, r3, r4
 800e0fa:	4431      	add	r1, r6
 800e0fc:	eb41 0105 	adc.w	r1, r1, r5
 800e100:	2900      	cmp	r1, #0
 800e102:	da05      	bge.n	800e110 <_lite_kernel_nl_softmax_iu8ou8+0x580>
 800e104:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800e108:	191c      	adds	r4, r3, r4
 800e10a:	4623      	mov	r3, r4
 800e10c:	f141 0100 	adc.w	r1, r1, #0
 800e110:	0fdb      	lsrs	r3, r3, #31
 800e112:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800e116:	495e      	ldr	r1, [pc, #376]	; (800e290 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 800e118:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 800e11c:	ea83 0402 	eor.w	r4, r3, r2
 800e120:	0fe4      	lsrs	r4, r4, #31
 800e122:	2c00      	cmp	r4, #0
 800e124:	bf06      	itte	eq
 800e126:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 800e12a:	2400      	moveq	r4, #0
 800e12c:	f04f 34ff 	movne.w	r4, #4294967295
 800e130:	4293      	cmp	r3, r2
 800e132:	d15d      	bne.n	800e1f0 <_lite_kernel_nl_softmax_iu8ou8+0x660>
 800e134:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800e138:	d15a      	bne.n	800e1f0 <_lite_kernel_nl_softmax_iu8ou8+0x660>
 800e13a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e13e:	4411      	add	r1, r2
 800e140:	0049      	lsls	r1, r1, #1
 800e142:	e076      	b.n	800e232 <_lite_kernel_nl_softmax_iu8ou8+0x6a2>
 800e144:	4853      	ldr	r0, [pc, #332]	; (800e294 <_lite_kernel_nl_softmax_iu8ou8+0x704>)
 800e146:	4420      	add	r0, r4
 800e148:	ea90 0f0c 	teq	r0, ip
 800e14c:	f140 8112 	bpl.w	800e374 <_lite_kernel_nl_softmax_iu8ou8+0x7e4>
 800e150:	17c2      	asrs	r2, r0, #31
 800e152:	fb00 f401 	mul.w	r4, r0, r1
 800e156:	4d4e      	ldr	r5, [pc, #312]	; (800e290 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 800e158:	fb03 4402 	mla	r4, r3, r2, r4
 800e15c:	fba0 2603 	umull	r2, r6, r0, r3
 800e160:	1952      	adds	r2, r2, r5
 800e162:	4434      	add	r4, r6
 800e164:	f164 0500 	sbc.w	r5, r4, #0
 800e168:	2d00      	cmp	r5, #0
 800e16a:	da05      	bge.n	800e178 <_lite_kernel_nl_softmax_iu8ou8+0x5e8>
 800e16c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800e170:	1914      	adds	r4, r2, r4
 800e172:	4622      	mov	r2, r4
 800e174:	f145 0500 	adc.w	r5, r5, #0
 800e178:	0fd2      	lsrs	r2, r2, #31
 800e17a:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800e17e:	f04f 35ff 	mov.w	r5, #4294967295
 800e182:	f1c2 5400 	rsb	r4, r2, #536870912	; 0x20000000
 800e186:	4a42      	ldr	r2, [pc, #264]	; (800e290 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 800e188:	fbc0 2504 	smlal	r2, r5, r0, r4
 800e18c:	2d00      	cmp	r5, #0
 800e18e:	da05      	bge.n	800e19c <_lite_kernel_nl_softmax_iu8ou8+0x60c>
 800e190:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800e194:	1914      	adds	r4, r2, r4
 800e196:	4622      	mov	r2, r4
 800e198:	f145 0500 	adc.w	r5, r5, #0
 800e19c:	0fd2      	lsrs	r2, r2, #31
 800e19e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800e1a2:	f1b2 4f60 	cmp.w	r2, #3758096384	; 0xe0000000
 800e1a6:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800e1aa:	dc96      	bgt.n	800e0da <_lite_kernel_nl_softmax_iu8ou8+0x54a>
 800e1ac:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 800e1b0:	ea92 0f0c 	teq	r2, ip
 800e1b4:	f140 80c7 	bpl.w	800e346 <_lite_kernel_nl_softmax_iu8ou8+0x7b6>
 800e1b8:	17d0      	asrs	r0, r2, #31
 800e1ba:	4c35      	ldr	r4, [pc, #212]	; (800e290 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 800e1bc:	fb03 f500 	mul.w	r5, r3, r0
 800e1c0:	fb02 5101 	mla	r1, r2, r1, r5
 800e1c4:	fba3 3502 	umull	r3, r5, r3, r2
 800e1c8:	191b      	adds	r3, r3, r4
 800e1ca:	4429      	add	r1, r5
 800e1cc:	f161 0100 	sbc.w	r1, r1, #0
 800e1d0:	2900      	cmp	r1, #0
 800e1d2:	da05      	bge.n	800e1e0 <_lite_kernel_nl_softmax_iu8ou8+0x650>
 800e1d4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800e1d8:	191c      	adds	r4, r3, r4
 800e1da:	4623      	mov	r3, r4
 800e1dc:	f141 0100 	adc.w	r1, r1, #0
 800e1e0:	0fdb      	lsrs	r3, r3, #31
 800e1e2:	f04f 34ff 	mov.w	r4, #4294967295
 800e1e6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800e1ea:	4929      	ldr	r1, [pc, #164]	; (800e290 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 800e1ec:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 800e1f0:	fb03 f000 	mul.w	r0, r3, r0
 800e1f4:	17dd      	asrs	r5, r3, #31
 800e1f6:	fb02 0005 	mla	r0, r2, r5, r0
 800e1fa:	fba3 3502 	umull	r3, r5, r3, r2
 800e1fe:	185b      	adds	r3, r3, r1
 800e200:	4428      	add	r0, r5
 800e202:	eb40 0004 	adc.w	r0, r0, r4
 800e206:	2800      	cmp	r0, #0
 800e208:	da05      	bge.n	800e216 <_lite_kernel_nl_softmax_iu8ou8+0x686>
 800e20a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e20e:	1859      	adds	r1, r3, r1
 800e210:	460b      	mov	r3, r1
 800e212:	f140 0000 	adc.w	r0, r0, #0
 800e216:	0fdb      	lsrs	r3, r3, #31
 800e218:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 800e21c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e220:	f2c0 8085 	blt.w	800e32e <_lite_kernel_nl_softmax_iu8ou8+0x79e>
 800e224:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e228:	18d1      	adds	r1, r2, r3
 800e22a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800e22e:	db87      	blt.n	800e140 <_lite_kernel_nl_softmax_iu8ou8+0x5b0>
 800e230:	4619      	mov	r1, r3
 800e232:	f1ba 0f1f 	cmp.w	sl, #31
 800e236:	dd04      	ble.n	800e242 <_lite_kernel_nl_softmax_iu8ou8+0x6b2>
 800e238:	f1c9 0304 	rsb	r3, r9, #4
 800e23c:	f04f 0a1f 	mov.w	sl, #31
 800e240:	4119      	asrs	r1, r3
 800e242:	9b03      	ldr	r3, [sp, #12]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d05b      	beq.n	800e300 <_lite_kernel_nl_softmax_iu8ou8+0x770>
 800e248:	2501      	movs	r5, #1
 800e24a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800e24e:	f1a1 4e00 	sub.w	lr, r1, #2147483648	; 0x80000000
 800e252:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e254:	fa05 f50a 	lsl.w	r5, r5, sl
 800e258:	fa47 f90a 	asr.w	r9, r7, sl
 800e25c:	fabe fe8e 	clz	lr, lr
 800e260:	4e0b      	ldr	r6, [pc, #44]	; (800e290 <_lite_kernel_nl_softmax_iu8ou8+0x700>)
 800e262:	3d01      	subs	r5, #1
 800e264:	f8cd 9010 	str.w	r9, [sp, #16]
 800e268:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800e26c:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800e270:	ea05 0307 	and.w	r3, r5, r7
 800e274:	ea4f 0c65 	mov.w	ip, r5, asr #1
 800e278:	9301      	str	r3, [sp, #4]
 800e27a:	f10c 0801 	add.w	r8, ip, #1
 800e27e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e280:	1e5c      	subs	r4, r3, #1
 800e282:	4673      	mov	r3, lr
 800e284:	46ae      	mov	lr, r5
 800e286:	461d      	mov	r5, r3
 800e288:	e013      	b.n	800e2b2 <_lite_kernel_nl_softmax_iu8ou8+0x722>
 800e28a:	bf00      	nop
 800e28c:	c3c3c3c4 	.word	0xc3c3c3c4
 800e290:	c0000001 	.word	0xc0000001
 800e294:	da5a5a5a 	.word	0xda5a5a5a
 800e298:	b1dd      	cbz	r5, 800e2d2 <_lite_kernel_nl_softmax_iu8ou8+0x742>
 800e29a:	9b04      	ldr	r3, [sp, #16]
 800e29c:	9a01      	ldr	r2, [sp, #4]
 800e29e:	4594      	cmp	ip, r2
 800e2a0:	da00      	bge.n	800e2a4 <_lite_kernel_nl_softmax_iu8ou8+0x714>
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	2bfe      	cmp	r3, #254	; 0xfe
 800e2a6:	dd3e      	ble.n	800e326 <_lite_kernel_nl_softmax_iu8ou8+0x796>
 800e2a8:	23ff      	movs	r3, #255	; 0xff
 800e2aa:	4581      	cmp	r9, r0
 800e2ac:	f804 3f01 	strb.w	r3, [r4, #1]!
 800e2b0:	d026      	beq.n	800e300 <_lite_kernel_nl_softmax_iu8ou8+0x770>
 800e2b2:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800e2b6:	ea81 0302 	eor.w	r3, r1, r2
 800e2ba:	0fdb      	lsrs	r3, r3, #31
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	bf0b      	itete	eq
 800e2c0:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 800e2c4:	4633      	movne	r3, r6
 800e2c6:	f04f 0b00 	moveq.w	fp, #0
 800e2ca:	f04f 3bff 	movne.w	fp, #4294967295
 800e2ce:	4291      	cmp	r1, r2
 800e2d0:	d0e2      	beq.n	800e298 <_lite_kernel_nl_softmax_iu8ou8+0x708>
 800e2d2:	fbc2 3b01 	smlal	r3, fp, r2, r1
 800e2d6:	f1bb 0f00 	cmp.w	fp, #0
 800e2da:	da02      	bge.n	800e2e2 <_lite_kernel_nl_softmax_iu8ou8+0x752>
 800e2dc:	19db      	adds	r3, r3, r7
 800e2de:	f14b 0b00 	adc.w	fp, fp, #0
 800e2e2:	0fdb      	lsrs	r3, r3, #31
 800e2e4:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
 800e2e8:	ea0e 0203 	and.w	r2, lr, r3
 800e2ec:	fa53 f30a 	asrs.w	r3, r3, sl
 800e2f0:	d5d5      	bpl.n	800e29e <_lite_kernel_nl_softmax_iu8ou8+0x70e>
 800e2f2:	4590      	cmp	r8, r2
 800e2f4:	dbd5      	blt.n	800e2a2 <_lite_kernel_nl_softmax_iu8ou8+0x712>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	4581      	cmp	r9, r0
 800e2fa:	f804 3f01 	strb.w	r3, [r4, #1]!
 800e2fe:	d1d8      	bne.n	800e2b2 <_lite_kernel_nl_softmax_iu8ou8+0x722>
 800e300:	9b02      	ldr	r3, [sp, #8]
 800e302:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e304:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800e306:	4413      	add	r3, r2
 800e308:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e30a:	440a      	add	r2, r1
 800e30c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800e30e:	9302      	str	r3, [sp, #8]
 800e310:	9213      	str	r2, [sp, #76]	; 0x4c
 800e312:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e314:	440a      	add	r2, r1
 800e316:	9214      	str	r2, [sp, #80]	; 0x50
 800e318:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e31a:	429a      	cmp	r2, r3
 800e31c:	f63f ac4e 	bhi.w	800dbbc <_lite_kernel_nl_softmax_iu8ou8+0x2c>
 800e320:	b019      	add	sp, #100	; 0x64
 800e322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e326:	2b00      	cmp	r3, #0
 800e328:	dde5      	ble.n	800e2f6 <_lite_kernel_nl_softmax_iu8ou8+0x766>
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	e7bd      	b.n	800e2aa <_lite_kernel_nl_softmax_iu8ou8+0x71a>
 800e32e:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800e332:	dc3b      	bgt.n	800e3ac <_lite_kernel_nl_softmax_iu8ou8+0x81c>
 800e334:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 800e338:	0051      	lsls	r1, r2, #1
 800e33a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800e33e:	bfd8      	it	le
 800e340:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
 800e344:	e775      	b.n	800e232 <_lite_kernel_nl_softmax_iu8ou8+0x6a2>
 800e346:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800e34a:	2500      	movs	r5, #0
 800e34c:	e6cd      	b.n	800e0ea <_lite_kernel_nl_softmax_iu8ou8+0x55a>
 800e34e:	bbb9      	cbnz	r1, 800e3c0 <_lite_kernel_nl_softmax_iu8ou8+0x830>
 800e350:	f04f 0a03 	mov.w	sl, #3
 800e354:	f04f 0920 	mov.w	r9, #32
 800e358:	2000      	movs	r0, #0
 800e35a:	f04f 33ff 	mov.w	r3, #4294967295
 800e35e:	f04f 355a 	mov.w	r5, #1515870810	; 0x5a5a5a5a
 800e362:	4a1a      	ldr	r2, [pc, #104]	; (800e3cc <_lite_kernel_nl_softmax_iu8ou8+0x83c>)
 800e364:	4604      	mov	r4, r0
 800e366:	4619      	mov	r1, r3
 800e368:	462e      	mov	r6, r5
 800e36a:	469c      	mov	ip, r3
 800e36c:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 800e370:	4680      	mov	r8, r0
 800e372:	e64d      	b.n	800e010 <_lite_kernel_nl_softmax_iu8ou8+0x480>
 800e374:	17c4      	asrs	r4, r0, #31
 800e376:	fba3 2500 	umull	r2, r5, r3, r0
 800e37a:	fb03 f604 	mul.w	r6, r3, r4
 800e37e:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
 800e382:	fb00 6601 	mla	r6, r0, r1, r6
 800e386:	eb46 0505 	adc.w	r5, r6, r5
 800e38a:	2d00      	cmp	r5, #0
 800e38c:	da05      	bge.n	800e39a <_lite_kernel_nl_softmax_iu8ou8+0x80a>
 800e38e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 800e392:	1996      	adds	r6, r2, r6
 800e394:	4632      	mov	r2, r6
 800e396:	f145 0500 	adc.w	r5, r5, #0
 800e39a:	0fd2      	lsrs	r2, r2, #31
 800e39c:	f04f 36ff 	mov.w	r6, #4294967295
 800e3a0:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800e3a4:	4d0a      	ldr	r5, [pc, #40]	; (800e3d0 <_lite_kernel_nl_softmax_iu8ou8+0x840>)
 800e3a6:	f1c2 5200 	rsb	r2, r2, #536870912	; 0x20000000
 800e3aa:	e67b      	b.n	800e0a4 <_lite_kernel_nl_softmax_iu8ou8+0x514>
 800e3ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e3b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3b4:	db02      	blt.n	800e3bc <_lite_kernel_nl_softmax_iu8ou8+0x82c>
 800e3b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e3ba:	e73a      	b.n	800e232 <_lite_kernel_nl_softmax_iu8ou8+0x6a2>
 800e3bc:	0059      	lsls	r1, r3, #1
 800e3be:	e7bc      	b.n	800e33a <_lite_kernel_nl_softmax_iu8ou8+0x7aa>
 800e3c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e3c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e3c4:	4413      	add	r3, r2
 800e3c6:	9305      	str	r3, [sp, #20]
 800e3c8:	e40b      	b.n	800dbe2 <_lite_kernel_nl_softmax_iu8ou8+0x52>
 800e3ca:	bf00      	nop
 800e3cc:	20000001 	.word	0x20000001
 800e3d0:	c0000001 	.word	0xc0000001

0800e3d4 <malloc>:
 800e3d4:	4b02      	ldr	r3, [pc, #8]	; (800e3e0 <malloc+0xc>)
 800e3d6:	4601      	mov	r1, r0
 800e3d8:	6818      	ldr	r0, [r3, #0]
 800e3da:	f000 b82b 	b.w	800e434 <_malloc_r>
 800e3de:	bf00      	nop
 800e3e0:	200040d8 	.word	0x200040d8

0800e3e4 <free>:
 800e3e4:	4b02      	ldr	r3, [pc, #8]	; (800e3f0 <free+0xc>)
 800e3e6:	4601      	mov	r1, r0
 800e3e8:	6818      	ldr	r0, [r3, #0]
 800e3ea:	f001 bc95 	b.w	800fd18 <_free_r>
 800e3ee:	bf00      	nop
 800e3f0:	200040d8 	.word	0x200040d8

0800e3f4 <sbrk_aligned>:
 800e3f4:	b570      	push	{r4, r5, r6, lr}
 800e3f6:	4e0e      	ldr	r6, [pc, #56]	; (800e430 <sbrk_aligned+0x3c>)
 800e3f8:	460c      	mov	r4, r1
 800e3fa:	6831      	ldr	r1, [r6, #0]
 800e3fc:	4605      	mov	r5, r0
 800e3fe:	b911      	cbnz	r1, 800e406 <sbrk_aligned+0x12>
 800e400:	f000 fe38 	bl	800f074 <_sbrk_r>
 800e404:	6030      	str	r0, [r6, #0]
 800e406:	4621      	mov	r1, r4
 800e408:	4628      	mov	r0, r5
 800e40a:	f000 fe33 	bl	800f074 <_sbrk_r>
 800e40e:	1c43      	adds	r3, r0, #1
 800e410:	d00a      	beq.n	800e428 <sbrk_aligned+0x34>
 800e412:	1cc4      	adds	r4, r0, #3
 800e414:	f024 0403 	bic.w	r4, r4, #3
 800e418:	42a0      	cmp	r0, r4
 800e41a:	d007      	beq.n	800e42c <sbrk_aligned+0x38>
 800e41c:	1a21      	subs	r1, r4, r0
 800e41e:	4628      	mov	r0, r5
 800e420:	f000 fe28 	bl	800f074 <_sbrk_r>
 800e424:	3001      	adds	r0, #1
 800e426:	d101      	bne.n	800e42c <sbrk_aligned+0x38>
 800e428:	f04f 34ff 	mov.w	r4, #4294967295
 800e42c:	4620      	mov	r0, r4
 800e42e:	bd70      	pop	{r4, r5, r6, pc}
 800e430:	2000ebdc 	.word	0x2000ebdc

0800e434 <_malloc_r>:
 800e434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e438:	1ccd      	adds	r5, r1, #3
 800e43a:	f025 0503 	bic.w	r5, r5, #3
 800e43e:	3508      	adds	r5, #8
 800e440:	2d0c      	cmp	r5, #12
 800e442:	bf38      	it	cc
 800e444:	250c      	movcc	r5, #12
 800e446:	2d00      	cmp	r5, #0
 800e448:	4607      	mov	r7, r0
 800e44a:	db01      	blt.n	800e450 <_malloc_r+0x1c>
 800e44c:	42a9      	cmp	r1, r5
 800e44e:	d905      	bls.n	800e45c <_malloc_r+0x28>
 800e450:	230c      	movs	r3, #12
 800e452:	603b      	str	r3, [r7, #0]
 800e454:	2600      	movs	r6, #0
 800e456:	4630      	mov	r0, r6
 800e458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e45c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e530 <_malloc_r+0xfc>
 800e460:	f000 f868 	bl	800e534 <__malloc_lock>
 800e464:	f8d8 3000 	ldr.w	r3, [r8]
 800e468:	461c      	mov	r4, r3
 800e46a:	bb5c      	cbnz	r4, 800e4c4 <_malloc_r+0x90>
 800e46c:	4629      	mov	r1, r5
 800e46e:	4638      	mov	r0, r7
 800e470:	f7ff ffc0 	bl	800e3f4 <sbrk_aligned>
 800e474:	1c43      	adds	r3, r0, #1
 800e476:	4604      	mov	r4, r0
 800e478:	d155      	bne.n	800e526 <_malloc_r+0xf2>
 800e47a:	f8d8 4000 	ldr.w	r4, [r8]
 800e47e:	4626      	mov	r6, r4
 800e480:	2e00      	cmp	r6, #0
 800e482:	d145      	bne.n	800e510 <_malloc_r+0xdc>
 800e484:	2c00      	cmp	r4, #0
 800e486:	d048      	beq.n	800e51a <_malloc_r+0xe6>
 800e488:	6823      	ldr	r3, [r4, #0]
 800e48a:	4631      	mov	r1, r6
 800e48c:	4638      	mov	r0, r7
 800e48e:	eb04 0903 	add.w	r9, r4, r3
 800e492:	f000 fdef 	bl	800f074 <_sbrk_r>
 800e496:	4581      	cmp	r9, r0
 800e498:	d13f      	bne.n	800e51a <_malloc_r+0xe6>
 800e49a:	6821      	ldr	r1, [r4, #0]
 800e49c:	1a6d      	subs	r5, r5, r1
 800e49e:	4629      	mov	r1, r5
 800e4a0:	4638      	mov	r0, r7
 800e4a2:	f7ff ffa7 	bl	800e3f4 <sbrk_aligned>
 800e4a6:	3001      	adds	r0, #1
 800e4a8:	d037      	beq.n	800e51a <_malloc_r+0xe6>
 800e4aa:	6823      	ldr	r3, [r4, #0]
 800e4ac:	442b      	add	r3, r5
 800e4ae:	6023      	str	r3, [r4, #0]
 800e4b0:	f8d8 3000 	ldr.w	r3, [r8]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d038      	beq.n	800e52a <_malloc_r+0xf6>
 800e4b8:	685a      	ldr	r2, [r3, #4]
 800e4ba:	42a2      	cmp	r2, r4
 800e4bc:	d12b      	bne.n	800e516 <_malloc_r+0xe2>
 800e4be:	2200      	movs	r2, #0
 800e4c0:	605a      	str	r2, [r3, #4]
 800e4c2:	e00f      	b.n	800e4e4 <_malloc_r+0xb0>
 800e4c4:	6822      	ldr	r2, [r4, #0]
 800e4c6:	1b52      	subs	r2, r2, r5
 800e4c8:	d41f      	bmi.n	800e50a <_malloc_r+0xd6>
 800e4ca:	2a0b      	cmp	r2, #11
 800e4cc:	d917      	bls.n	800e4fe <_malloc_r+0xca>
 800e4ce:	1961      	adds	r1, r4, r5
 800e4d0:	42a3      	cmp	r3, r4
 800e4d2:	6025      	str	r5, [r4, #0]
 800e4d4:	bf18      	it	ne
 800e4d6:	6059      	strne	r1, [r3, #4]
 800e4d8:	6863      	ldr	r3, [r4, #4]
 800e4da:	bf08      	it	eq
 800e4dc:	f8c8 1000 	streq.w	r1, [r8]
 800e4e0:	5162      	str	r2, [r4, r5]
 800e4e2:	604b      	str	r3, [r1, #4]
 800e4e4:	4638      	mov	r0, r7
 800e4e6:	f104 060b 	add.w	r6, r4, #11
 800e4ea:	f000 f829 	bl	800e540 <__malloc_unlock>
 800e4ee:	f026 0607 	bic.w	r6, r6, #7
 800e4f2:	1d23      	adds	r3, r4, #4
 800e4f4:	1af2      	subs	r2, r6, r3
 800e4f6:	d0ae      	beq.n	800e456 <_malloc_r+0x22>
 800e4f8:	1b9b      	subs	r3, r3, r6
 800e4fa:	50a3      	str	r3, [r4, r2]
 800e4fc:	e7ab      	b.n	800e456 <_malloc_r+0x22>
 800e4fe:	42a3      	cmp	r3, r4
 800e500:	6862      	ldr	r2, [r4, #4]
 800e502:	d1dd      	bne.n	800e4c0 <_malloc_r+0x8c>
 800e504:	f8c8 2000 	str.w	r2, [r8]
 800e508:	e7ec      	b.n	800e4e4 <_malloc_r+0xb0>
 800e50a:	4623      	mov	r3, r4
 800e50c:	6864      	ldr	r4, [r4, #4]
 800e50e:	e7ac      	b.n	800e46a <_malloc_r+0x36>
 800e510:	4634      	mov	r4, r6
 800e512:	6876      	ldr	r6, [r6, #4]
 800e514:	e7b4      	b.n	800e480 <_malloc_r+0x4c>
 800e516:	4613      	mov	r3, r2
 800e518:	e7cc      	b.n	800e4b4 <_malloc_r+0x80>
 800e51a:	230c      	movs	r3, #12
 800e51c:	603b      	str	r3, [r7, #0]
 800e51e:	4638      	mov	r0, r7
 800e520:	f000 f80e 	bl	800e540 <__malloc_unlock>
 800e524:	e797      	b.n	800e456 <_malloc_r+0x22>
 800e526:	6025      	str	r5, [r4, #0]
 800e528:	e7dc      	b.n	800e4e4 <_malloc_r+0xb0>
 800e52a:	605b      	str	r3, [r3, #4]
 800e52c:	deff      	udf	#255	; 0xff
 800e52e:	bf00      	nop
 800e530:	2000ebd8 	.word	0x2000ebd8

0800e534 <__malloc_lock>:
 800e534:	4801      	ldr	r0, [pc, #4]	; (800e53c <__malloc_lock+0x8>)
 800e536:	f000 bdea 	b.w	800f10e <__retarget_lock_acquire_recursive>
 800e53a:	bf00      	nop
 800e53c:	2000ed20 	.word	0x2000ed20

0800e540 <__malloc_unlock>:
 800e540:	4801      	ldr	r0, [pc, #4]	; (800e548 <__malloc_unlock+0x8>)
 800e542:	f000 bde5 	b.w	800f110 <__retarget_lock_release_recursive>
 800e546:	bf00      	nop
 800e548:	2000ed20 	.word	0x2000ed20

0800e54c <__cvt>:
 800e54c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e54e:	ed2d 8b02 	vpush	{d8}
 800e552:	eeb0 8b40 	vmov.f64	d8, d0
 800e556:	b085      	sub	sp, #20
 800e558:	4617      	mov	r7, r2
 800e55a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e55c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e55e:	ee18 2a90 	vmov	r2, s17
 800e562:	f025 0520 	bic.w	r5, r5, #32
 800e566:	2a00      	cmp	r2, #0
 800e568:	bfb6      	itet	lt
 800e56a:	222d      	movlt	r2, #45	; 0x2d
 800e56c:	2200      	movge	r2, #0
 800e56e:	eeb1 8b40 	vneglt.f64	d8, d0
 800e572:	2d46      	cmp	r5, #70	; 0x46
 800e574:	460c      	mov	r4, r1
 800e576:	701a      	strb	r2, [r3, #0]
 800e578:	d004      	beq.n	800e584 <__cvt+0x38>
 800e57a:	2d45      	cmp	r5, #69	; 0x45
 800e57c:	d100      	bne.n	800e580 <__cvt+0x34>
 800e57e:	3401      	adds	r4, #1
 800e580:	2102      	movs	r1, #2
 800e582:	e000      	b.n	800e586 <__cvt+0x3a>
 800e584:	2103      	movs	r1, #3
 800e586:	ab03      	add	r3, sp, #12
 800e588:	9301      	str	r3, [sp, #4]
 800e58a:	ab02      	add	r3, sp, #8
 800e58c:	9300      	str	r3, [sp, #0]
 800e58e:	4622      	mov	r2, r4
 800e590:	4633      	mov	r3, r6
 800e592:	eeb0 0b48 	vmov.f64	d0, d8
 800e596:	f000 fe53 	bl	800f240 <_dtoa_r>
 800e59a:	2d47      	cmp	r5, #71	; 0x47
 800e59c:	d101      	bne.n	800e5a2 <__cvt+0x56>
 800e59e:	07fb      	lsls	r3, r7, #31
 800e5a0:	d51a      	bpl.n	800e5d8 <__cvt+0x8c>
 800e5a2:	2d46      	cmp	r5, #70	; 0x46
 800e5a4:	eb00 0204 	add.w	r2, r0, r4
 800e5a8:	d10c      	bne.n	800e5c4 <__cvt+0x78>
 800e5aa:	7803      	ldrb	r3, [r0, #0]
 800e5ac:	2b30      	cmp	r3, #48	; 0x30
 800e5ae:	d107      	bne.n	800e5c0 <__cvt+0x74>
 800e5b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5b8:	bf1c      	itt	ne
 800e5ba:	f1c4 0401 	rsbne	r4, r4, #1
 800e5be:	6034      	strne	r4, [r6, #0]
 800e5c0:	6833      	ldr	r3, [r6, #0]
 800e5c2:	441a      	add	r2, r3
 800e5c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5cc:	bf08      	it	eq
 800e5ce:	9203      	streq	r2, [sp, #12]
 800e5d0:	2130      	movs	r1, #48	; 0x30
 800e5d2:	9b03      	ldr	r3, [sp, #12]
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d307      	bcc.n	800e5e8 <__cvt+0x9c>
 800e5d8:	9b03      	ldr	r3, [sp, #12]
 800e5da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5dc:	1a1b      	subs	r3, r3, r0
 800e5de:	6013      	str	r3, [r2, #0]
 800e5e0:	b005      	add	sp, #20
 800e5e2:	ecbd 8b02 	vpop	{d8}
 800e5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5e8:	1c5c      	adds	r4, r3, #1
 800e5ea:	9403      	str	r4, [sp, #12]
 800e5ec:	7019      	strb	r1, [r3, #0]
 800e5ee:	e7f0      	b.n	800e5d2 <__cvt+0x86>

0800e5f0 <__exponent>:
 800e5f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2900      	cmp	r1, #0
 800e5f6:	bfb8      	it	lt
 800e5f8:	4249      	neglt	r1, r1
 800e5fa:	f803 2b02 	strb.w	r2, [r3], #2
 800e5fe:	bfb4      	ite	lt
 800e600:	222d      	movlt	r2, #45	; 0x2d
 800e602:	222b      	movge	r2, #43	; 0x2b
 800e604:	2909      	cmp	r1, #9
 800e606:	7042      	strb	r2, [r0, #1]
 800e608:	dd2a      	ble.n	800e660 <__exponent+0x70>
 800e60a:	f10d 0207 	add.w	r2, sp, #7
 800e60e:	4617      	mov	r7, r2
 800e610:	260a      	movs	r6, #10
 800e612:	4694      	mov	ip, r2
 800e614:	fb91 f5f6 	sdiv	r5, r1, r6
 800e618:	fb06 1415 	mls	r4, r6, r5, r1
 800e61c:	3430      	adds	r4, #48	; 0x30
 800e61e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e622:	460c      	mov	r4, r1
 800e624:	2c63      	cmp	r4, #99	; 0x63
 800e626:	f102 32ff 	add.w	r2, r2, #4294967295
 800e62a:	4629      	mov	r1, r5
 800e62c:	dcf1      	bgt.n	800e612 <__exponent+0x22>
 800e62e:	3130      	adds	r1, #48	; 0x30
 800e630:	f1ac 0402 	sub.w	r4, ip, #2
 800e634:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e638:	1c41      	adds	r1, r0, #1
 800e63a:	4622      	mov	r2, r4
 800e63c:	42ba      	cmp	r2, r7
 800e63e:	d30a      	bcc.n	800e656 <__exponent+0x66>
 800e640:	f10d 0209 	add.w	r2, sp, #9
 800e644:	eba2 020c 	sub.w	r2, r2, ip
 800e648:	42bc      	cmp	r4, r7
 800e64a:	bf88      	it	hi
 800e64c:	2200      	movhi	r2, #0
 800e64e:	4413      	add	r3, r2
 800e650:	1a18      	subs	r0, r3, r0
 800e652:	b003      	add	sp, #12
 800e654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e656:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e65a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e65e:	e7ed      	b.n	800e63c <__exponent+0x4c>
 800e660:	2330      	movs	r3, #48	; 0x30
 800e662:	3130      	adds	r1, #48	; 0x30
 800e664:	7083      	strb	r3, [r0, #2]
 800e666:	70c1      	strb	r1, [r0, #3]
 800e668:	1d03      	adds	r3, r0, #4
 800e66a:	e7f1      	b.n	800e650 <__exponent+0x60>
 800e66c:	0000      	movs	r0, r0
	...

0800e670 <_printf_float>:
 800e670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e674:	b08b      	sub	sp, #44	; 0x2c
 800e676:	460c      	mov	r4, r1
 800e678:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e67c:	4616      	mov	r6, r2
 800e67e:	461f      	mov	r7, r3
 800e680:	4605      	mov	r5, r0
 800e682:	f000 fcbf 	bl	800f004 <_localeconv_r>
 800e686:	f8d0 b000 	ldr.w	fp, [r0]
 800e68a:	4658      	mov	r0, fp
 800e68c:	f7f1 fe28 	bl	80002e0 <strlen>
 800e690:	2300      	movs	r3, #0
 800e692:	9308      	str	r3, [sp, #32]
 800e694:	f8d8 3000 	ldr.w	r3, [r8]
 800e698:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e69c:	6822      	ldr	r2, [r4, #0]
 800e69e:	3307      	adds	r3, #7
 800e6a0:	f023 0307 	bic.w	r3, r3, #7
 800e6a4:	f103 0108 	add.w	r1, r3, #8
 800e6a8:	f8c8 1000 	str.w	r1, [r8]
 800e6ac:	ed93 0b00 	vldr	d0, [r3]
 800e6b0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800e910 <_printf_float+0x2a0>
 800e6b4:	eeb0 7bc0 	vabs.f64	d7, d0
 800e6b8:	eeb4 7b46 	vcmp.f64	d7, d6
 800e6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6c0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800e6c4:	4682      	mov	sl, r0
 800e6c6:	dd24      	ble.n	800e712 <_printf_float+0xa2>
 800e6c8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6d0:	d502      	bpl.n	800e6d8 <_printf_float+0x68>
 800e6d2:	232d      	movs	r3, #45	; 0x2d
 800e6d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6d8:	498f      	ldr	r1, [pc, #572]	; (800e918 <_printf_float+0x2a8>)
 800e6da:	4b90      	ldr	r3, [pc, #576]	; (800e91c <_printf_float+0x2ac>)
 800e6dc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e6e0:	bf94      	ite	ls
 800e6e2:	4688      	movls	r8, r1
 800e6e4:	4698      	movhi	r8, r3
 800e6e6:	2303      	movs	r3, #3
 800e6e8:	6123      	str	r3, [r4, #16]
 800e6ea:	f022 0204 	bic.w	r2, r2, #4
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	6022      	str	r2, [r4, #0]
 800e6f2:	9304      	str	r3, [sp, #16]
 800e6f4:	9700      	str	r7, [sp, #0]
 800e6f6:	4633      	mov	r3, r6
 800e6f8:	aa09      	add	r2, sp, #36	; 0x24
 800e6fa:	4621      	mov	r1, r4
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	f000 f9d1 	bl	800eaa4 <_printf_common>
 800e702:	3001      	adds	r0, #1
 800e704:	f040 808a 	bne.w	800e81c <_printf_float+0x1ac>
 800e708:	f04f 30ff 	mov.w	r0, #4294967295
 800e70c:	b00b      	add	sp, #44	; 0x2c
 800e70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e712:	eeb4 0b40 	vcmp.f64	d0, d0
 800e716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e71a:	d709      	bvc.n	800e730 <_printf_float+0xc0>
 800e71c:	ee10 3a90 	vmov	r3, s1
 800e720:	2b00      	cmp	r3, #0
 800e722:	bfbc      	itt	lt
 800e724:	232d      	movlt	r3, #45	; 0x2d
 800e726:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e72a:	497d      	ldr	r1, [pc, #500]	; (800e920 <_printf_float+0x2b0>)
 800e72c:	4b7d      	ldr	r3, [pc, #500]	; (800e924 <_printf_float+0x2b4>)
 800e72e:	e7d5      	b.n	800e6dc <_printf_float+0x6c>
 800e730:	6863      	ldr	r3, [r4, #4]
 800e732:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e736:	9104      	str	r1, [sp, #16]
 800e738:	1c59      	adds	r1, r3, #1
 800e73a:	d13c      	bne.n	800e7b6 <_printf_float+0x146>
 800e73c:	2306      	movs	r3, #6
 800e73e:	6063      	str	r3, [r4, #4]
 800e740:	2300      	movs	r3, #0
 800e742:	9303      	str	r3, [sp, #12]
 800e744:	ab08      	add	r3, sp, #32
 800e746:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e74a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e74e:	ab07      	add	r3, sp, #28
 800e750:	6861      	ldr	r1, [r4, #4]
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	6022      	str	r2, [r4, #0]
 800e756:	f10d 031b 	add.w	r3, sp, #27
 800e75a:	4628      	mov	r0, r5
 800e75c:	f7ff fef6 	bl	800e54c <__cvt>
 800e760:	9b04      	ldr	r3, [sp, #16]
 800e762:	9907      	ldr	r1, [sp, #28]
 800e764:	2b47      	cmp	r3, #71	; 0x47
 800e766:	4680      	mov	r8, r0
 800e768:	d108      	bne.n	800e77c <_printf_float+0x10c>
 800e76a:	1cc8      	adds	r0, r1, #3
 800e76c:	db02      	blt.n	800e774 <_printf_float+0x104>
 800e76e:	6863      	ldr	r3, [r4, #4]
 800e770:	4299      	cmp	r1, r3
 800e772:	dd41      	ble.n	800e7f8 <_printf_float+0x188>
 800e774:	f1a9 0902 	sub.w	r9, r9, #2
 800e778:	fa5f f989 	uxtb.w	r9, r9
 800e77c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e780:	d820      	bhi.n	800e7c4 <_printf_float+0x154>
 800e782:	3901      	subs	r1, #1
 800e784:	464a      	mov	r2, r9
 800e786:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e78a:	9107      	str	r1, [sp, #28]
 800e78c:	f7ff ff30 	bl	800e5f0 <__exponent>
 800e790:	9a08      	ldr	r2, [sp, #32]
 800e792:	9004      	str	r0, [sp, #16]
 800e794:	1813      	adds	r3, r2, r0
 800e796:	2a01      	cmp	r2, #1
 800e798:	6123      	str	r3, [r4, #16]
 800e79a:	dc02      	bgt.n	800e7a2 <_printf_float+0x132>
 800e79c:	6822      	ldr	r2, [r4, #0]
 800e79e:	07d2      	lsls	r2, r2, #31
 800e7a0:	d501      	bpl.n	800e7a6 <_printf_float+0x136>
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	6123      	str	r3, [r4, #16]
 800e7a6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d0a2      	beq.n	800e6f4 <_printf_float+0x84>
 800e7ae:	232d      	movs	r3, #45	; 0x2d
 800e7b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7b4:	e79e      	b.n	800e6f4 <_printf_float+0x84>
 800e7b6:	9904      	ldr	r1, [sp, #16]
 800e7b8:	2947      	cmp	r1, #71	; 0x47
 800e7ba:	d1c1      	bne.n	800e740 <_printf_float+0xd0>
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d1bf      	bne.n	800e740 <_printf_float+0xd0>
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	e7bc      	b.n	800e73e <_printf_float+0xce>
 800e7c4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e7c8:	d118      	bne.n	800e7fc <_printf_float+0x18c>
 800e7ca:	2900      	cmp	r1, #0
 800e7cc:	6863      	ldr	r3, [r4, #4]
 800e7ce:	dd0b      	ble.n	800e7e8 <_printf_float+0x178>
 800e7d0:	6121      	str	r1, [r4, #16]
 800e7d2:	b913      	cbnz	r3, 800e7da <_printf_float+0x16a>
 800e7d4:	6822      	ldr	r2, [r4, #0]
 800e7d6:	07d0      	lsls	r0, r2, #31
 800e7d8:	d502      	bpl.n	800e7e0 <_printf_float+0x170>
 800e7da:	3301      	adds	r3, #1
 800e7dc:	440b      	add	r3, r1
 800e7de:	6123      	str	r3, [r4, #16]
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	65a1      	str	r1, [r4, #88]	; 0x58
 800e7e4:	9304      	str	r3, [sp, #16]
 800e7e6:	e7de      	b.n	800e7a6 <_printf_float+0x136>
 800e7e8:	b913      	cbnz	r3, 800e7f0 <_printf_float+0x180>
 800e7ea:	6822      	ldr	r2, [r4, #0]
 800e7ec:	07d2      	lsls	r2, r2, #31
 800e7ee:	d501      	bpl.n	800e7f4 <_printf_float+0x184>
 800e7f0:	3302      	adds	r3, #2
 800e7f2:	e7f4      	b.n	800e7de <_printf_float+0x16e>
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	e7f2      	b.n	800e7de <_printf_float+0x16e>
 800e7f8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e7fc:	9b08      	ldr	r3, [sp, #32]
 800e7fe:	4299      	cmp	r1, r3
 800e800:	db05      	blt.n	800e80e <_printf_float+0x19e>
 800e802:	6823      	ldr	r3, [r4, #0]
 800e804:	6121      	str	r1, [r4, #16]
 800e806:	07d8      	lsls	r0, r3, #31
 800e808:	d5ea      	bpl.n	800e7e0 <_printf_float+0x170>
 800e80a:	1c4b      	adds	r3, r1, #1
 800e80c:	e7e7      	b.n	800e7de <_printf_float+0x16e>
 800e80e:	2900      	cmp	r1, #0
 800e810:	bfd4      	ite	le
 800e812:	f1c1 0202 	rsble	r2, r1, #2
 800e816:	2201      	movgt	r2, #1
 800e818:	4413      	add	r3, r2
 800e81a:	e7e0      	b.n	800e7de <_printf_float+0x16e>
 800e81c:	6823      	ldr	r3, [r4, #0]
 800e81e:	055a      	lsls	r2, r3, #21
 800e820:	d407      	bmi.n	800e832 <_printf_float+0x1c2>
 800e822:	6923      	ldr	r3, [r4, #16]
 800e824:	4642      	mov	r2, r8
 800e826:	4631      	mov	r1, r6
 800e828:	4628      	mov	r0, r5
 800e82a:	47b8      	blx	r7
 800e82c:	3001      	adds	r0, #1
 800e82e:	d12a      	bne.n	800e886 <_printf_float+0x216>
 800e830:	e76a      	b.n	800e708 <_printf_float+0x98>
 800e832:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e836:	f240 80e0 	bls.w	800e9fa <_printf_float+0x38a>
 800e83a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e83e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e846:	d133      	bne.n	800e8b0 <_printf_float+0x240>
 800e848:	4a37      	ldr	r2, [pc, #220]	; (800e928 <_printf_float+0x2b8>)
 800e84a:	2301      	movs	r3, #1
 800e84c:	4631      	mov	r1, r6
 800e84e:	4628      	mov	r0, r5
 800e850:	47b8      	blx	r7
 800e852:	3001      	adds	r0, #1
 800e854:	f43f af58 	beq.w	800e708 <_printf_float+0x98>
 800e858:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	db02      	blt.n	800e866 <_printf_float+0x1f6>
 800e860:	6823      	ldr	r3, [r4, #0]
 800e862:	07d8      	lsls	r0, r3, #31
 800e864:	d50f      	bpl.n	800e886 <_printf_float+0x216>
 800e866:	4653      	mov	r3, sl
 800e868:	465a      	mov	r2, fp
 800e86a:	4631      	mov	r1, r6
 800e86c:	4628      	mov	r0, r5
 800e86e:	47b8      	blx	r7
 800e870:	3001      	adds	r0, #1
 800e872:	f43f af49 	beq.w	800e708 <_printf_float+0x98>
 800e876:	f04f 0800 	mov.w	r8, #0
 800e87a:	f104 091a 	add.w	r9, r4, #26
 800e87e:	9b08      	ldr	r3, [sp, #32]
 800e880:	3b01      	subs	r3, #1
 800e882:	4543      	cmp	r3, r8
 800e884:	dc09      	bgt.n	800e89a <_printf_float+0x22a>
 800e886:	6823      	ldr	r3, [r4, #0]
 800e888:	079b      	lsls	r3, r3, #30
 800e88a:	f100 8106 	bmi.w	800ea9a <_printf_float+0x42a>
 800e88e:	68e0      	ldr	r0, [r4, #12]
 800e890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e892:	4298      	cmp	r0, r3
 800e894:	bfb8      	it	lt
 800e896:	4618      	movlt	r0, r3
 800e898:	e738      	b.n	800e70c <_printf_float+0x9c>
 800e89a:	2301      	movs	r3, #1
 800e89c:	464a      	mov	r2, r9
 800e89e:	4631      	mov	r1, r6
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	47b8      	blx	r7
 800e8a4:	3001      	adds	r0, #1
 800e8a6:	f43f af2f 	beq.w	800e708 <_printf_float+0x98>
 800e8aa:	f108 0801 	add.w	r8, r8, #1
 800e8ae:	e7e6      	b.n	800e87e <_printf_float+0x20e>
 800e8b0:	9b07      	ldr	r3, [sp, #28]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	dc3a      	bgt.n	800e92c <_printf_float+0x2bc>
 800e8b6:	4a1c      	ldr	r2, [pc, #112]	; (800e928 <_printf_float+0x2b8>)
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	4631      	mov	r1, r6
 800e8bc:	4628      	mov	r0, r5
 800e8be:	47b8      	blx	r7
 800e8c0:	3001      	adds	r0, #1
 800e8c2:	f43f af21 	beq.w	800e708 <_printf_float+0x98>
 800e8c6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	d102      	bne.n	800e8d4 <_printf_float+0x264>
 800e8ce:	6823      	ldr	r3, [r4, #0]
 800e8d0:	07d9      	lsls	r1, r3, #31
 800e8d2:	d5d8      	bpl.n	800e886 <_printf_float+0x216>
 800e8d4:	4653      	mov	r3, sl
 800e8d6:	465a      	mov	r2, fp
 800e8d8:	4631      	mov	r1, r6
 800e8da:	4628      	mov	r0, r5
 800e8dc:	47b8      	blx	r7
 800e8de:	3001      	adds	r0, #1
 800e8e0:	f43f af12 	beq.w	800e708 <_printf_float+0x98>
 800e8e4:	f04f 0900 	mov.w	r9, #0
 800e8e8:	f104 0a1a 	add.w	sl, r4, #26
 800e8ec:	9b07      	ldr	r3, [sp, #28]
 800e8ee:	425b      	negs	r3, r3
 800e8f0:	454b      	cmp	r3, r9
 800e8f2:	dc01      	bgt.n	800e8f8 <_printf_float+0x288>
 800e8f4:	9b08      	ldr	r3, [sp, #32]
 800e8f6:	e795      	b.n	800e824 <_printf_float+0x1b4>
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	4652      	mov	r2, sl
 800e8fc:	4631      	mov	r1, r6
 800e8fe:	4628      	mov	r0, r5
 800e900:	47b8      	blx	r7
 800e902:	3001      	adds	r0, #1
 800e904:	f43f af00 	beq.w	800e708 <_printf_float+0x98>
 800e908:	f109 0901 	add.w	r9, r9, #1
 800e90c:	e7ee      	b.n	800e8ec <_printf_float+0x27c>
 800e90e:	bf00      	nop
 800e910:	ffffffff 	.word	0xffffffff
 800e914:	7fefffff 	.word	0x7fefffff
 800e918:	0801dc0c 	.word	0x0801dc0c
 800e91c:	0801dc10 	.word	0x0801dc10
 800e920:	0801dc14 	.word	0x0801dc14
 800e924:	0801dc18 	.word	0x0801dc18
 800e928:	080116b9 	.word	0x080116b9
 800e92c:	9a08      	ldr	r2, [sp, #32]
 800e92e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e930:	429a      	cmp	r2, r3
 800e932:	bfa8      	it	ge
 800e934:	461a      	movge	r2, r3
 800e936:	2a00      	cmp	r2, #0
 800e938:	4691      	mov	r9, r2
 800e93a:	dc38      	bgt.n	800e9ae <_printf_float+0x33e>
 800e93c:	2300      	movs	r3, #0
 800e93e:	9305      	str	r3, [sp, #20]
 800e940:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e944:	f104 021a 	add.w	r2, r4, #26
 800e948:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e94a:	9905      	ldr	r1, [sp, #20]
 800e94c:	9304      	str	r3, [sp, #16]
 800e94e:	eba3 0309 	sub.w	r3, r3, r9
 800e952:	428b      	cmp	r3, r1
 800e954:	dc33      	bgt.n	800e9be <_printf_float+0x34e>
 800e956:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	db3c      	blt.n	800e9d8 <_printf_float+0x368>
 800e95e:	6823      	ldr	r3, [r4, #0]
 800e960:	07da      	lsls	r2, r3, #31
 800e962:	d439      	bmi.n	800e9d8 <_printf_float+0x368>
 800e964:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800e968:	eba2 0903 	sub.w	r9, r2, r3
 800e96c:	9b04      	ldr	r3, [sp, #16]
 800e96e:	1ad2      	subs	r2, r2, r3
 800e970:	4591      	cmp	r9, r2
 800e972:	bfa8      	it	ge
 800e974:	4691      	movge	r9, r2
 800e976:	f1b9 0f00 	cmp.w	r9, #0
 800e97a:	dc35      	bgt.n	800e9e8 <_printf_float+0x378>
 800e97c:	f04f 0800 	mov.w	r8, #0
 800e980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e984:	f104 0a1a 	add.w	sl, r4, #26
 800e988:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e98c:	1a9b      	subs	r3, r3, r2
 800e98e:	eba3 0309 	sub.w	r3, r3, r9
 800e992:	4543      	cmp	r3, r8
 800e994:	f77f af77 	ble.w	800e886 <_printf_float+0x216>
 800e998:	2301      	movs	r3, #1
 800e99a:	4652      	mov	r2, sl
 800e99c:	4631      	mov	r1, r6
 800e99e:	4628      	mov	r0, r5
 800e9a0:	47b8      	blx	r7
 800e9a2:	3001      	adds	r0, #1
 800e9a4:	f43f aeb0 	beq.w	800e708 <_printf_float+0x98>
 800e9a8:	f108 0801 	add.w	r8, r8, #1
 800e9ac:	e7ec      	b.n	800e988 <_printf_float+0x318>
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	4631      	mov	r1, r6
 800e9b2:	4642      	mov	r2, r8
 800e9b4:	4628      	mov	r0, r5
 800e9b6:	47b8      	blx	r7
 800e9b8:	3001      	adds	r0, #1
 800e9ba:	d1bf      	bne.n	800e93c <_printf_float+0x2cc>
 800e9bc:	e6a4      	b.n	800e708 <_printf_float+0x98>
 800e9be:	2301      	movs	r3, #1
 800e9c0:	4631      	mov	r1, r6
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	9204      	str	r2, [sp, #16]
 800e9c6:	47b8      	blx	r7
 800e9c8:	3001      	adds	r0, #1
 800e9ca:	f43f ae9d 	beq.w	800e708 <_printf_float+0x98>
 800e9ce:	9b05      	ldr	r3, [sp, #20]
 800e9d0:	9a04      	ldr	r2, [sp, #16]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	9305      	str	r3, [sp, #20]
 800e9d6:	e7b7      	b.n	800e948 <_printf_float+0x2d8>
 800e9d8:	4653      	mov	r3, sl
 800e9da:	465a      	mov	r2, fp
 800e9dc:	4631      	mov	r1, r6
 800e9de:	4628      	mov	r0, r5
 800e9e0:	47b8      	blx	r7
 800e9e2:	3001      	adds	r0, #1
 800e9e4:	d1be      	bne.n	800e964 <_printf_float+0x2f4>
 800e9e6:	e68f      	b.n	800e708 <_printf_float+0x98>
 800e9e8:	9a04      	ldr	r2, [sp, #16]
 800e9ea:	464b      	mov	r3, r9
 800e9ec:	4442      	add	r2, r8
 800e9ee:	4631      	mov	r1, r6
 800e9f0:	4628      	mov	r0, r5
 800e9f2:	47b8      	blx	r7
 800e9f4:	3001      	adds	r0, #1
 800e9f6:	d1c1      	bne.n	800e97c <_printf_float+0x30c>
 800e9f8:	e686      	b.n	800e708 <_printf_float+0x98>
 800e9fa:	9a08      	ldr	r2, [sp, #32]
 800e9fc:	2a01      	cmp	r2, #1
 800e9fe:	dc01      	bgt.n	800ea04 <_printf_float+0x394>
 800ea00:	07db      	lsls	r3, r3, #31
 800ea02:	d537      	bpl.n	800ea74 <_printf_float+0x404>
 800ea04:	2301      	movs	r3, #1
 800ea06:	4642      	mov	r2, r8
 800ea08:	4631      	mov	r1, r6
 800ea0a:	4628      	mov	r0, r5
 800ea0c:	47b8      	blx	r7
 800ea0e:	3001      	adds	r0, #1
 800ea10:	f43f ae7a 	beq.w	800e708 <_printf_float+0x98>
 800ea14:	4653      	mov	r3, sl
 800ea16:	465a      	mov	r2, fp
 800ea18:	4631      	mov	r1, r6
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	47b8      	blx	r7
 800ea1e:	3001      	adds	r0, #1
 800ea20:	f43f ae72 	beq.w	800e708 <_printf_float+0x98>
 800ea24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ea28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea30:	9b08      	ldr	r3, [sp, #32]
 800ea32:	d01a      	beq.n	800ea6a <_printf_float+0x3fa>
 800ea34:	3b01      	subs	r3, #1
 800ea36:	f108 0201 	add.w	r2, r8, #1
 800ea3a:	4631      	mov	r1, r6
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	47b8      	blx	r7
 800ea40:	3001      	adds	r0, #1
 800ea42:	d10e      	bne.n	800ea62 <_printf_float+0x3f2>
 800ea44:	e660      	b.n	800e708 <_printf_float+0x98>
 800ea46:	2301      	movs	r3, #1
 800ea48:	464a      	mov	r2, r9
 800ea4a:	4631      	mov	r1, r6
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	47b8      	blx	r7
 800ea50:	3001      	adds	r0, #1
 800ea52:	f43f ae59 	beq.w	800e708 <_printf_float+0x98>
 800ea56:	f108 0801 	add.w	r8, r8, #1
 800ea5a:	9b08      	ldr	r3, [sp, #32]
 800ea5c:	3b01      	subs	r3, #1
 800ea5e:	4543      	cmp	r3, r8
 800ea60:	dcf1      	bgt.n	800ea46 <_printf_float+0x3d6>
 800ea62:	9b04      	ldr	r3, [sp, #16]
 800ea64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ea68:	e6dd      	b.n	800e826 <_printf_float+0x1b6>
 800ea6a:	f04f 0800 	mov.w	r8, #0
 800ea6e:	f104 091a 	add.w	r9, r4, #26
 800ea72:	e7f2      	b.n	800ea5a <_printf_float+0x3ea>
 800ea74:	2301      	movs	r3, #1
 800ea76:	4642      	mov	r2, r8
 800ea78:	e7df      	b.n	800ea3a <_printf_float+0x3ca>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	464a      	mov	r2, r9
 800ea7e:	4631      	mov	r1, r6
 800ea80:	4628      	mov	r0, r5
 800ea82:	47b8      	blx	r7
 800ea84:	3001      	adds	r0, #1
 800ea86:	f43f ae3f 	beq.w	800e708 <_printf_float+0x98>
 800ea8a:	f108 0801 	add.w	r8, r8, #1
 800ea8e:	68e3      	ldr	r3, [r4, #12]
 800ea90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea92:	1a5b      	subs	r3, r3, r1
 800ea94:	4543      	cmp	r3, r8
 800ea96:	dcf0      	bgt.n	800ea7a <_printf_float+0x40a>
 800ea98:	e6f9      	b.n	800e88e <_printf_float+0x21e>
 800ea9a:	f04f 0800 	mov.w	r8, #0
 800ea9e:	f104 0919 	add.w	r9, r4, #25
 800eaa2:	e7f4      	b.n	800ea8e <_printf_float+0x41e>

0800eaa4 <_printf_common>:
 800eaa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaa8:	4616      	mov	r6, r2
 800eaaa:	4699      	mov	r9, r3
 800eaac:	688a      	ldr	r2, [r1, #8]
 800eaae:	690b      	ldr	r3, [r1, #16]
 800eab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eab4:	4293      	cmp	r3, r2
 800eab6:	bfb8      	it	lt
 800eab8:	4613      	movlt	r3, r2
 800eaba:	6033      	str	r3, [r6, #0]
 800eabc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eac0:	4607      	mov	r7, r0
 800eac2:	460c      	mov	r4, r1
 800eac4:	b10a      	cbz	r2, 800eaca <_printf_common+0x26>
 800eac6:	3301      	adds	r3, #1
 800eac8:	6033      	str	r3, [r6, #0]
 800eaca:	6823      	ldr	r3, [r4, #0]
 800eacc:	0699      	lsls	r1, r3, #26
 800eace:	bf42      	ittt	mi
 800ead0:	6833      	ldrmi	r3, [r6, #0]
 800ead2:	3302      	addmi	r3, #2
 800ead4:	6033      	strmi	r3, [r6, #0]
 800ead6:	6825      	ldr	r5, [r4, #0]
 800ead8:	f015 0506 	ands.w	r5, r5, #6
 800eadc:	d106      	bne.n	800eaec <_printf_common+0x48>
 800eade:	f104 0a19 	add.w	sl, r4, #25
 800eae2:	68e3      	ldr	r3, [r4, #12]
 800eae4:	6832      	ldr	r2, [r6, #0]
 800eae6:	1a9b      	subs	r3, r3, r2
 800eae8:	42ab      	cmp	r3, r5
 800eaea:	dc26      	bgt.n	800eb3a <_printf_common+0x96>
 800eaec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eaf0:	1e13      	subs	r3, r2, #0
 800eaf2:	6822      	ldr	r2, [r4, #0]
 800eaf4:	bf18      	it	ne
 800eaf6:	2301      	movne	r3, #1
 800eaf8:	0692      	lsls	r2, r2, #26
 800eafa:	d42b      	bmi.n	800eb54 <_printf_common+0xb0>
 800eafc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb00:	4649      	mov	r1, r9
 800eb02:	4638      	mov	r0, r7
 800eb04:	47c0      	blx	r8
 800eb06:	3001      	adds	r0, #1
 800eb08:	d01e      	beq.n	800eb48 <_printf_common+0xa4>
 800eb0a:	6823      	ldr	r3, [r4, #0]
 800eb0c:	6922      	ldr	r2, [r4, #16]
 800eb0e:	f003 0306 	and.w	r3, r3, #6
 800eb12:	2b04      	cmp	r3, #4
 800eb14:	bf02      	ittt	eq
 800eb16:	68e5      	ldreq	r5, [r4, #12]
 800eb18:	6833      	ldreq	r3, [r6, #0]
 800eb1a:	1aed      	subeq	r5, r5, r3
 800eb1c:	68a3      	ldr	r3, [r4, #8]
 800eb1e:	bf0c      	ite	eq
 800eb20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb24:	2500      	movne	r5, #0
 800eb26:	4293      	cmp	r3, r2
 800eb28:	bfc4      	itt	gt
 800eb2a:	1a9b      	subgt	r3, r3, r2
 800eb2c:	18ed      	addgt	r5, r5, r3
 800eb2e:	2600      	movs	r6, #0
 800eb30:	341a      	adds	r4, #26
 800eb32:	42b5      	cmp	r5, r6
 800eb34:	d11a      	bne.n	800eb6c <_printf_common+0xc8>
 800eb36:	2000      	movs	r0, #0
 800eb38:	e008      	b.n	800eb4c <_printf_common+0xa8>
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	4652      	mov	r2, sl
 800eb3e:	4649      	mov	r1, r9
 800eb40:	4638      	mov	r0, r7
 800eb42:	47c0      	blx	r8
 800eb44:	3001      	adds	r0, #1
 800eb46:	d103      	bne.n	800eb50 <_printf_common+0xac>
 800eb48:	f04f 30ff 	mov.w	r0, #4294967295
 800eb4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb50:	3501      	adds	r5, #1
 800eb52:	e7c6      	b.n	800eae2 <_printf_common+0x3e>
 800eb54:	18e1      	adds	r1, r4, r3
 800eb56:	1c5a      	adds	r2, r3, #1
 800eb58:	2030      	movs	r0, #48	; 0x30
 800eb5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eb5e:	4422      	add	r2, r4
 800eb60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eb64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eb68:	3302      	adds	r3, #2
 800eb6a:	e7c7      	b.n	800eafc <_printf_common+0x58>
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	4622      	mov	r2, r4
 800eb70:	4649      	mov	r1, r9
 800eb72:	4638      	mov	r0, r7
 800eb74:	47c0      	blx	r8
 800eb76:	3001      	adds	r0, #1
 800eb78:	d0e6      	beq.n	800eb48 <_printf_common+0xa4>
 800eb7a:	3601      	adds	r6, #1
 800eb7c:	e7d9      	b.n	800eb32 <_printf_common+0x8e>
	...

0800eb80 <_printf_i>:
 800eb80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb84:	7e0f      	ldrb	r7, [r1, #24]
 800eb86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb88:	2f78      	cmp	r7, #120	; 0x78
 800eb8a:	4691      	mov	r9, r2
 800eb8c:	4680      	mov	r8, r0
 800eb8e:	460c      	mov	r4, r1
 800eb90:	469a      	mov	sl, r3
 800eb92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eb96:	d807      	bhi.n	800eba8 <_printf_i+0x28>
 800eb98:	2f62      	cmp	r7, #98	; 0x62
 800eb9a:	d80a      	bhi.n	800ebb2 <_printf_i+0x32>
 800eb9c:	2f00      	cmp	r7, #0
 800eb9e:	f000 80d4 	beq.w	800ed4a <_printf_i+0x1ca>
 800eba2:	2f58      	cmp	r7, #88	; 0x58
 800eba4:	f000 80c0 	beq.w	800ed28 <_printf_i+0x1a8>
 800eba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ebb0:	e03a      	b.n	800ec28 <_printf_i+0xa8>
 800ebb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ebb6:	2b15      	cmp	r3, #21
 800ebb8:	d8f6      	bhi.n	800eba8 <_printf_i+0x28>
 800ebba:	a101      	add	r1, pc, #4	; (adr r1, 800ebc0 <_printf_i+0x40>)
 800ebbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ebc0:	0800ec19 	.word	0x0800ec19
 800ebc4:	0800ec2d 	.word	0x0800ec2d
 800ebc8:	0800eba9 	.word	0x0800eba9
 800ebcc:	0800eba9 	.word	0x0800eba9
 800ebd0:	0800eba9 	.word	0x0800eba9
 800ebd4:	0800eba9 	.word	0x0800eba9
 800ebd8:	0800ec2d 	.word	0x0800ec2d
 800ebdc:	0800eba9 	.word	0x0800eba9
 800ebe0:	0800eba9 	.word	0x0800eba9
 800ebe4:	0800eba9 	.word	0x0800eba9
 800ebe8:	0800eba9 	.word	0x0800eba9
 800ebec:	0800ed31 	.word	0x0800ed31
 800ebf0:	0800ec59 	.word	0x0800ec59
 800ebf4:	0800eceb 	.word	0x0800eceb
 800ebf8:	0800eba9 	.word	0x0800eba9
 800ebfc:	0800eba9 	.word	0x0800eba9
 800ec00:	0800ed53 	.word	0x0800ed53
 800ec04:	0800eba9 	.word	0x0800eba9
 800ec08:	0800ec59 	.word	0x0800ec59
 800ec0c:	0800eba9 	.word	0x0800eba9
 800ec10:	0800eba9 	.word	0x0800eba9
 800ec14:	0800ecf3 	.word	0x0800ecf3
 800ec18:	682b      	ldr	r3, [r5, #0]
 800ec1a:	1d1a      	adds	r2, r3, #4
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	602a      	str	r2, [r5, #0]
 800ec20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec28:	2301      	movs	r3, #1
 800ec2a:	e09f      	b.n	800ed6c <_printf_i+0x1ec>
 800ec2c:	6820      	ldr	r0, [r4, #0]
 800ec2e:	682b      	ldr	r3, [r5, #0]
 800ec30:	0607      	lsls	r7, r0, #24
 800ec32:	f103 0104 	add.w	r1, r3, #4
 800ec36:	6029      	str	r1, [r5, #0]
 800ec38:	d501      	bpl.n	800ec3e <_printf_i+0xbe>
 800ec3a:	681e      	ldr	r6, [r3, #0]
 800ec3c:	e003      	b.n	800ec46 <_printf_i+0xc6>
 800ec3e:	0646      	lsls	r6, r0, #25
 800ec40:	d5fb      	bpl.n	800ec3a <_printf_i+0xba>
 800ec42:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ec46:	2e00      	cmp	r6, #0
 800ec48:	da03      	bge.n	800ec52 <_printf_i+0xd2>
 800ec4a:	232d      	movs	r3, #45	; 0x2d
 800ec4c:	4276      	negs	r6, r6
 800ec4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec52:	485a      	ldr	r0, [pc, #360]	; (800edbc <_printf_i+0x23c>)
 800ec54:	230a      	movs	r3, #10
 800ec56:	e012      	b.n	800ec7e <_printf_i+0xfe>
 800ec58:	682b      	ldr	r3, [r5, #0]
 800ec5a:	6820      	ldr	r0, [r4, #0]
 800ec5c:	1d19      	adds	r1, r3, #4
 800ec5e:	6029      	str	r1, [r5, #0]
 800ec60:	0605      	lsls	r5, r0, #24
 800ec62:	d501      	bpl.n	800ec68 <_printf_i+0xe8>
 800ec64:	681e      	ldr	r6, [r3, #0]
 800ec66:	e002      	b.n	800ec6e <_printf_i+0xee>
 800ec68:	0641      	lsls	r1, r0, #25
 800ec6a:	d5fb      	bpl.n	800ec64 <_printf_i+0xe4>
 800ec6c:	881e      	ldrh	r6, [r3, #0]
 800ec6e:	4853      	ldr	r0, [pc, #332]	; (800edbc <_printf_i+0x23c>)
 800ec70:	2f6f      	cmp	r7, #111	; 0x6f
 800ec72:	bf0c      	ite	eq
 800ec74:	2308      	moveq	r3, #8
 800ec76:	230a      	movne	r3, #10
 800ec78:	2100      	movs	r1, #0
 800ec7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec7e:	6865      	ldr	r5, [r4, #4]
 800ec80:	60a5      	str	r5, [r4, #8]
 800ec82:	2d00      	cmp	r5, #0
 800ec84:	bfa2      	ittt	ge
 800ec86:	6821      	ldrge	r1, [r4, #0]
 800ec88:	f021 0104 	bicge.w	r1, r1, #4
 800ec8c:	6021      	strge	r1, [r4, #0]
 800ec8e:	b90e      	cbnz	r6, 800ec94 <_printf_i+0x114>
 800ec90:	2d00      	cmp	r5, #0
 800ec92:	d04b      	beq.n	800ed2c <_printf_i+0x1ac>
 800ec94:	4615      	mov	r5, r2
 800ec96:	fbb6 f1f3 	udiv	r1, r6, r3
 800ec9a:	fb03 6711 	mls	r7, r3, r1, r6
 800ec9e:	5dc7      	ldrb	r7, [r0, r7]
 800eca0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eca4:	4637      	mov	r7, r6
 800eca6:	42bb      	cmp	r3, r7
 800eca8:	460e      	mov	r6, r1
 800ecaa:	d9f4      	bls.n	800ec96 <_printf_i+0x116>
 800ecac:	2b08      	cmp	r3, #8
 800ecae:	d10b      	bne.n	800ecc8 <_printf_i+0x148>
 800ecb0:	6823      	ldr	r3, [r4, #0]
 800ecb2:	07de      	lsls	r6, r3, #31
 800ecb4:	d508      	bpl.n	800ecc8 <_printf_i+0x148>
 800ecb6:	6923      	ldr	r3, [r4, #16]
 800ecb8:	6861      	ldr	r1, [r4, #4]
 800ecba:	4299      	cmp	r1, r3
 800ecbc:	bfde      	ittt	le
 800ecbe:	2330      	movle	r3, #48	; 0x30
 800ecc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ecc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ecc8:	1b52      	subs	r2, r2, r5
 800ecca:	6122      	str	r2, [r4, #16]
 800eccc:	f8cd a000 	str.w	sl, [sp]
 800ecd0:	464b      	mov	r3, r9
 800ecd2:	aa03      	add	r2, sp, #12
 800ecd4:	4621      	mov	r1, r4
 800ecd6:	4640      	mov	r0, r8
 800ecd8:	f7ff fee4 	bl	800eaa4 <_printf_common>
 800ecdc:	3001      	adds	r0, #1
 800ecde:	d14a      	bne.n	800ed76 <_printf_i+0x1f6>
 800ece0:	f04f 30ff 	mov.w	r0, #4294967295
 800ece4:	b004      	add	sp, #16
 800ece6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecea:	6823      	ldr	r3, [r4, #0]
 800ecec:	f043 0320 	orr.w	r3, r3, #32
 800ecf0:	6023      	str	r3, [r4, #0]
 800ecf2:	4833      	ldr	r0, [pc, #204]	; (800edc0 <_printf_i+0x240>)
 800ecf4:	2778      	movs	r7, #120	; 0x78
 800ecf6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ecfa:	6823      	ldr	r3, [r4, #0]
 800ecfc:	6829      	ldr	r1, [r5, #0]
 800ecfe:	061f      	lsls	r7, r3, #24
 800ed00:	f851 6b04 	ldr.w	r6, [r1], #4
 800ed04:	d402      	bmi.n	800ed0c <_printf_i+0x18c>
 800ed06:	065f      	lsls	r7, r3, #25
 800ed08:	bf48      	it	mi
 800ed0a:	b2b6      	uxthmi	r6, r6
 800ed0c:	07df      	lsls	r7, r3, #31
 800ed0e:	bf48      	it	mi
 800ed10:	f043 0320 	orrmi.w	r3, r3, #32
 800ed14:	6029      	str	r1, [r5, #0]
 800ed16:	bf48      	it	mi
 800ed18:	6023      	strmi	r3, [r4, #0]
 800ed1a:	b91e      	cbnz	r6, 800ed24 <_printf_i+0x1a4>
 800ed1c:	6823      	ldr	r3, [r4, #0]
 800ed1e:	f023 0320 	bic.w	r3, r3, #32
 800ed22:	6023      	str	r3, [r4, #0]
 800ed24:	2310      	movs	r3, #16
 800ed26:	e7a7      	b.n	800ec78 <_printf_i+0xf8>
 800ed28:	4824      	ldr	r0, [pc, #144]	; (800edbc <_printf_i+0x23c>)
 800ed2a:	e7e4      	b.n	800ecf6 <_printf_i+0x176>
 800ed2c:	4615      	mov	r5, r2
 800ed2e:	e7bd      	b.n	800ecac <_printf_i+0x12c>
 800ed30:	682b      	ldr	r3, [r5, #0]
 800ed32:	6826      	ldr	r6, [r4, #0]
 800ed34:	6961      	ldr	r1, [r4, #20]
 800ed36:	1d18      	adds	r0, r3, #4
 800ed38:	6028      	str	r0, [r5, #0]
 800ed3a:	0635      	lsls	r5, r6, #24
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	d501      	bpl.n	800ed44 <_printf_i+0x1c4>
 800ed40:	6019      	str	r1, [r3, #0]
 800ed42:	e002      	b.n	800ed4a <_printf_i+0x1ca>
 800ed44:	0670      	lsls	r0, r6, #25
 800ed46:	d5fb      	bpl.n	800ed40 <_printf_i+0x1c0>
 800ed48:	8019      	strh	r1, [r3, #0]
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	6123      	str	r3, [r4, #16]
 800ed4e:	4615      	mov	r5, r2
 800ed50:	e7bc      	b.n	800eccc <_printf_i+0x14c>
 800ed52:	682b      	ldr	r3, [r5, #0]
 800ed54:	1d1a      	adds	r2, r3, #4
 800ed56:	602a      	str	r2, [r5, #0]
 800ed58:	681d      	ldr	r5, [r3, #0]
 800ed5a:	6862      	ldr	r2, [r4, #4]
 800ed5c:	2100      	movs	r1, #0
 800ed5e:	4628      	mov	r0, r5
 800ed60:	f7f1 fa6e 	bl	8000240 <memchr>
 800ed64:	b108      	cbz	r0, 800ed6a <_printf_i+0x1ea>
 800ed66:	1b40      	subs	r0, r0, r5
 800ed68:	6060      	str	r0, [r4, #4]
 800ed6a:	6863      	ldr	r3, [r4, #4]
 800ed6c:	6123      	str	r3, [r4, #16]
 800ed6e:	2300      	movs	r3, #0
 800ed70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed74:	e7aa      	b.n	800eccc <_printf_i+0x14c>
 800ed76:	6923      	ldr	r3, [r4, #16]
 800ed78:	462a      	mov	r2, r5
 800ed7a:	4649      	mov	r1, r9
 800ed7c:	4640      	mov	r0, r8
 800ed7e:	47d0      	blx	sl
 800ed80:	3001      	adds	r0, #1
 800ed82:	d0ad      	beq.n	800ece0 <_printf_i+0x160>
 800ed84:	6823      	ldr	r3, [r4, #0]
 800ed86:	079b      	lsls	r3, r3, #30
 800ed88:	d413      	bmi.n	800edb2 <_printf_i+0x232>
 800ed8a:	68e0      	ldr	r0, [r4, #12]
 800ed8c:	9b03      	ldr	r3, [sp, #12]
 800ed8e:	4298      	cmp	r0, r3
 800ed90:	bfb8      	it	lt
 800ed92:	4618      	movlt	r0, r3
 800ed94:	e7a6      	b.n	800ece4 <_printf_i+0x164>
 800ed96:	2301      	movs	r3, #1
 800ed98:	4632      	mov	r2, r6
 800ed9a:	4649      	mov	r1, r9
 800ed9c:	4640      	mov	r0, r8
 800ed9e:	47d0      	blx	sl
 800eda0:	3001      	adds	r0, #1
 800eda2:	d09d      	beq.n	800ece0 <_printf_i+0x160>
 800eda4:	3501      	adds	r5, #1
 800eda6:	68e3      	ldr	r3, [r4, #12]
 800eda8:	9903      	ldr	r1, [sp, #12]
 800edaa:	1a5b      	subs	r3, r3, r1
 800edac:	42ab      	cmp	r3, r5
 800edae:	dcf2      	bgt.n	800ed96 <_printf_i+0x216>
 800edb0:	e7eb      	b.n	800ed8a <_printf_i+0x20a>
 800edb2:	2500      	movs	r5, #0
 800edb4:	f104 0619 	add.w	r6, r4, #25
 800edb8:	e7f5      	b.n	800eda6 <_printf_i+0x226>
 800edba:	bf00      	nop
 800edbc:	0801dc1c 	.word	0x0801dc1c
 800edc0:	0801dc2d 	.word	0x0801dc2d

0800edc4 <std>:
 800edc4:	2300      	movs	r3, #0
 800edc6:	b510      	push	{r4, lr}
 800edc8:	4604      	mov	r4, r0
 800edca:	e9c0 3300 	strd	r3, r3, [r0]
 800edce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800edd2:	6083      	str	r3, [r0, #8]
 800edd4:	8181      	strh	r1, [r0, #12]
 800edd6:	6643      	str	r3, [r0, #100]	; 0x64
 800edd8:	81c2      	strh	r2, [r0, #14]
 800edda:	6183      	str	r3, [r0, #24]
 800eddc:	4619      	mov	r1, r3
 800edde:	2208      	movs	r2, #8
 800ede0:	305c      	adds	r0, #92	; 0x5c
 800ede2:	f000 f8f4 	bl	800efce <memset>
 800ede6:	4b0d      	ldr	r3, [pc, #52]	; (800ee1c <std+0x58>)
 800ede8:	6263      	str	r3, [r4, #36]	; 0x24
 800edea:	4b0d      	ldr	r3, [pc, #52]	; (800ee20 <std+0x5c>)
 800edec:	62a3      	str	r3, [r4, #40]	; 0x28
 800edee:	4b0d      	ldr	r3, [pc, #52]	; (800ee24 <std+0x60>)
 800edf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800edf2:	4b0d      	ldr	r3, [pc, #52]	; (800ee28 <std+0x64>)
 800edf4:	6323      	str	r3, [r4, #48]	; 0x30
 800edf6:	4b0d      	ldr	r3, [pc, #52]	; (800ee2c <std+0x68>)
 800edf8:	6224      	str	r4, [r4, #32]
 800edfa:	429c      	cmp	r4, r3
 800edfc:	d006      	beq.n	800ee0c <std+0x48>
 800edfe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ee02:	4294      	cmp	r4, r2
 800ee04:	d002      	beq.n	800ee0c <std+0x48>
 800ee06:	33d0      	adds	r3, #208	; 0xd0
 800ee08:	429c      	cmp	r4, r3
 800ee0a:	d105      	bne.n	800ee18 <std+0x54>
 800ee0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee14:	f000 b97a 	b.w	800f10c <__retarget_lock_init_recursive>
 800ee18:	bd10      	pop	{r4, pc}
 800ee1a:	bf00      	nop
 800ee1c:	0800ef49 	.word	0x0800ef49
 800ee20:	0800ef6b 	.word	0x0800ef6b
 800ee24:	0800efa3 	.word	0x0800efa3
 800ee28:	0800efc7 	.word	0x0800efc7
 800ee2c:	2000ebe0 	.word	0x2000ebe0

0800ee30 <stdio_exit_handler>:
 800ee30:	4a02      	ldr	r2, [pc, #8]	; (800ee3c <stdio_exit_handler+0xc>)
 800ee32:	4903      	ldr	r1, [pc, #12]	; (800ee40 <stdio_exit_handler+0x10>)
 800ee34:	4803      	ldr	r0, [pc, #12]	; (800ee44 <stdio_exit_handler+0x14>)
 800ee36:	f000 b869 	b.w	800ef0c <_fwalk_sglue>
 800ee3a:	bf00      	nop
 800ee3c:	20004080 	.word	0x20004080
 800ee40:	080105b5 	.word	0x080105b5
 800ee44:	2000408c 	.word	0x2000408c

0800ee48 <cleanup_stdio>:
 800ee48:	6841      	ldr	r1, [r0, #4]
 800ee4a:	4b0c      	ldr	r3, [pc, #48]	; (800ee7c <cleanup_stdio+0x34>)
 800ee4c:	4299      	cmp	r1, r3
 800ee4e:	b510      	push	{r4, lr}
 800ee50:	4604      	mov	r4, r0
 800ee52:	d001      	beq.n	800ee58 <cleanup_stdio+0x10>
 800ee54:	f001 fbae 	bl	80105b4 <_fflush_r>
 800ee58:	68a1      	ldr	r1, [r4, #8]
 800ee5a:	4b09      	ldr	r3, [pc, #36]	; (800ee80 <cleanup_stdio+0x38>)
 800ee5c:	4299      	cmp	r1, r3
 800ee5e:	d002      	beq.n	800ee66 <cleanup_stdio+0x1e>
 800ee60:	4620      	mov	r0, r4
 800ee62:	f001 fba7 	bl	80105b4 <_fflush_r>
 800ee66:	68e1      	ldr	r1, [r4, #12]
 800ee68:	4b06      	ldr	r3, [pc, #24]	; (800ee84 <cleanup_stdio+0x3c>)
 800ee6a:	4299      	cmp	r1, r3
 800ee6c:	d004      	beq.n	800ee78 <cleanup_stdio+0x30>
 800ee6e:	4620      	mov	r0, r4
 800ee70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee74:	f001 bb9e 	b.w	80105b4 <_fflush_r>
 800ee78:	bd10      	pop	{r4, pc}
 800ee7a:	bf00      	nop
 800ee7c:	2000ebe0 	.word	0x2000ebe0
 800ee80:	2000ec48 	.word	0x2000ec48
 800ee84:	2000ecb0 	.word	0x2000ecb0

0800ee88 <global_stdio_init.part.0>:
 800ee88:	b510      	push	{r4, lr}
 800ee8a:	4b0b      	ldr	r3, [pc, #44]	; (800eeb8 <global_stdio_init.part.0+0x30>)
 800ee8c:	4c0b      	ldr	r4, [pc, #44]	; (800eebc <global_stdio_init.part.0+0x34>)
 800ee8e:	4a0c      	ldr	r2, [pc, #48]	; (800eec0 <global_stdio_init.part.0+0x38>)
 800ee90:	601a      	str	r2, [r3, #0]
 800ee92:	4620      	mov	r0, r4
 800ee94:	2200      	movs	r2, #0
 800ee96:	2104      	movs	r1, #4
 800ee98:	f7ff ff94 	bl	800edc4 <std>
 800ee9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800eea0:	2201      	movs	r2, #1
 800eea2:	2109      	movs	r1, #9
 800eea4:	f7ff ff8e 	bl	800edc4 <std>
 800eea8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800eeac:	2202      	movs	r2, #2
 800eeae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eeb2:	2112      	movs	r1, #18
 800eeb4:	f7ff bf86 	b.w	800edc4 <std>
 800eeb8:	2000ed18 	.word	0x2000ed18
 800eebc:	2000ebe0 	.word	0x2000ebe0
 800eec0:	0800ee31 	.word	0x0800ee31

0800eec4 <__sfp_lock_acquire>:
 800eec4:	4801      	ldr	r0, [pc, #4]	; (800eecc <__sfp_lock_acquire+0x8>)
 800eec6:	f000 b922 	b.w	800f10e <__retarget_lock_acquire_recursive>
 800eeca:	bf00      	nop
 800eecc:	2000ed21 	.word	0x2000ed21

0800eed0 <__sfp_lock_release>:
 800eed0:	4801      	ldr	r0, [pc, #4]	; (800eed8 <__sfp_lock_release+0x8>)
 800eed2:	f000 b91d 	b.w	800f110 <__retarget_lock_release_recursive>
 800eed6:	bf00      	nop
 800eed8:	2000ed21 	.word	0x2000ed21

0800eedc <__sinit>:
 800eedc:	b510      	push	{r4, lr}
 800eede:	4604      	mov	r4, r0
 800eee0:	f7ff fff0 	bl	800eec4 <__sfp_lock_acquire>
 800eee4:	6a23      	ldr	r3, [r4, #32]
 800eee6:	b11b      	cbz	r3, 800eef0 <__sinit+0x14>
 800eee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eeec:	f7ff bff0 	b.w	800eed0 <__sfp_lock_release>
 800eef0:	4b04      	ldr	r3, [pc, #16]	; (800ef04 <__sinit+0x28>)
 800eef2:	6223      	str	r3, [r4, #32]
 800eef4:	4b04      	ldr	r3, [pc, #16]	; (800ef08 <__sinit+0x2c>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d1f5      	bne.n	800eee8 <__sinit+0xc>
 800eefc:	f7ff ffc4 	bl	800ee88 <global_stdio_init.part.0>
 800ef00:	e7f2      	b.n	800eee8 <__sinit+0xc>
 800ef02:	bf00      	nop
 800ef04:	0800ee49 	.word	0x0800ee49
 800ef08:	2000ed18 	.word	0x2000ed18

0800ef0c <_fwalk_sglue>:
 800ef0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef10:	4607      	mov	r7, r0
 800ef12:	4688      	mov	r8, r1
 800ef14:	4614      	mov	r4, r2
 800ef16:	2600      	movs	r6, #0
 800ef18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef1c:	f1b9 0901 	subs.w	r9, r9, #1
 800ef20:	d505      	bpl.n	800ef2e <_fwalk_sglue+0x22>
 800ef22:	6824      	ldr	r4, [r4, #0]
 800ef24:	2c00      	cmp	r4, #0
 800ef26:	d1f7      	bne.n	800ef18 <_fwalk_sglue+0xc>
 800ef28:	4630      	mov	r0, r6
 800ef2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef2e:	89ab      	ldrh	r3, [r5, #12]
 800ef30:	2b01      	cmp	r3, #1
 800ef32:	d907      	bls.n	800ef44 <_fwalk_sglue+0x38>
 800ef34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef38:	3301      	adds	r3, #1
 800ef3a:	d003      	beq.n	800ef44 <_fwalk_sglue+0x38>
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	4638      	mov	r0, r7
 800ef40:	47c0      	blx	r8
 800ef42:	4306      	orrs	r6, r0
 800ef44:	3568      	adds	r5, #104	; 0x68
 800ef46:	e7e9      	b.n	800ef1c <_fwalk_sglue+0x10>

0800ef48 <__sread>:
 800ef48:	b510      	push	{r4, lr}
 800ef4a:	460c      	mov	r4, r1
 800ef4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef50:	f000 f87e 	bl	800f050 <_read_r>
 800ef54:	2800      	cmp	r0, #0
 800ef56:	bfab      	itete	ge
 800ef58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef5a:	89a3      	ldrhlt	r3, [r4, #12]
 800ef5c:	181b      	addge	r3, r3, r0
 800ef5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef62:	bfac      	ite	ge
 800ef64:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef66:	81a3      	strhlt	r3, [r4, #12]
 800ef68:	bd10      	pop	{r4, pc}

0800ef6a <__swrite>:
 800ef6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef6e:	461f      	mov	r7, r3
 800ef70:	898b      	ldrh	r3, [r1, #12]
 800ef72:	05db      	lsls	r3, r3, #23
 800ef74:	4605      	mov	r5, r0
 800ef76:	460c      	mov	r4, r1
 800ef78:	4616      	mov	r6, r2
 800ef7a:	d505      	bpl.n	800ef88 <__swrite+0x1e>
 800ef7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef80:	2302      	movs	r3, #2
 800ef82:	2200      	movs	r2, #0
 800ef84:	f000 f852 	bl	800f02c <_lseek_r>
 800ef88:	89a3      	ldrh	r3, [r4, #12]
 800ef8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef92:	81a3      	strh	r3, [r4, #12]
 800ef94:	4632      	mov	r2, r6
 800ef96:	463b      	mov	r3, r7
 800ef98:	4628      	mov	r0, r5
 800ef9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef9e:	f000 b879 	b.w	800f094 <_write_r>

0800efa2 <__sseek>:
 800efa2:	b510      	push	{r4, lr}
 800efa4:	460c      	mov	r4, r1
 800efa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efaa:	f000 f83f 	bl	800f02c <_lseek_r>
 800efae:	1c43      	adds	r3, r0, #1
 800efb0:	89a3      	ldrh	r3, [r4, #12]
 800efb2:	bf15      	itete	ne
 800efb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800efb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800efba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800efbe:	81a3      	strheq	r3, [r4, #12]
 800efc0:	bf18      	it	ne
 800efc2:	81a3      	strhne	r3, [r4, #12]
 800efc4:	bd10      	pop	{r4, pc}

0800efc6 <__sclose>:
 800efc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efca:	f000 b81f 	b.w	800f00c <_close_r>

0800efce <memset>:
 800efce:	4402      	add	r2, r0
 800efd0:	4603      	mov	r3, r0
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d100      	bne.n	800efd8 <memset+0xa>
 800efd6:	4770      	bx	lr
 800efd8:	f803 1b01 	strb.w	r1, [r3], #1
 800efdc:	e7f9      	b.n	800efd2 <memset+0x4>

0800efde <strncmp>:
 800efde:	b510      	push	{r4, lr}
 800efe0:	b16a      	cbz	r2, 800effe <strncmp+0x20>
 800efe2:	3901      	subs	r1, #1
 800efe4:	1884      	adds	r4, r0, r2
 800efe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800efee:	429a      	cmp	r2, r3
 800eff0:	d103      	bne.n	800effa <strncmp+0x1c>
 800eff2:	42a0      	cmp	r0, r4
 800eff4:	d001      	beq.n	800effa <strncmp+0x1c>
 800eff6:	2a00      	cmp	r2, #0
 800eff8:	d1f5      	bne.n	800efe6 <strncmp+0x8>
 800effa:	1ad0      	subs	r0, r2, r3
 800effc:	bd10      	pop	{r4, pc}
 800effe:	4610      	mov	r0, r2
 800f000:	e7fc      	b.n	800effc <strncmp+0x1e>
	...

0800f004 <_localeconv_r>:
 800f004:	4800      	ldr	r0, [pc, #0]	; (800f008 <_localeconv_r+0x4>)
 800f006:	4770      	bx	lr
 800f008:	200041cc 	.word	0x200041cc

0800f00c <_close_r>:
 800f00c:	b538      	push	{r3, r4, r5, lr}
 800f00e:	4d06      	ldr	r5, [pc, #24]	; (800f028 <_close_r+0x1c>)
 800f010:	2300      	movs	r3, #0
 800f012:	4604      	mov	r4, r0
 800f014:	4608      	mov	r0, r1
 800f016:	602b      	str	r3, [r5, #0]
 800f018:	f001 fe02 	bl	8010c20 <_close>
 800f01c:	1c43      	adds	r3, r0, #1
 800f01e:	d102      	bne.n	800f026 <_close_r+0x1a>
 800f020:	682b      	ldr	r3, [r5, #0]
 800f022:	b103      	cbz	r3, 800f026 <_close_r+0x1a>
 800f024:	6023      	str	r3, [r4, #0]
 800f026:	bd38      	pop	{r3, r4, r5, pc}
 800f028:	2000ed1c 	.word	0x2000ed1c

0800f02c <_lseek_r>:
 800f02c:	b538      	push	{r3, r4, r5, lr}
 800f02e:	4d07      	ldr	r5, [pc, #28]	; (800f04c <_lseek_r+0x20>)
 800f030:	4604      	mov	r4, r0
 800f032:	4608      	mov	r0, r1
 800f034:	4611      	mov	r1, r2
 800f036:	2200      	movs	r2, #0
 800f038:	602a      	str	r2, [r5, #0]
 800f03a:	461a      	mov	r2, r3
 800f03c:	f001 fe18 	bl	8010c70 <_lseek>
 800f040:	1c43      	adds	r3, r0, #1
 800f042:	d102      	bne.n	800f04a <_lseek_r+0x1e>
 800f044:	682b      	ldr	r3, [r5, #0]
 800f046:	b103      	cbz	r3, 800f04a <_lseek_r+0x1e>
 800f048:	6023      	str	r3, [r4, #0]
 800f04a:	bd38      	pop	{r3, r4, r5, pc}
 800f04c:	2000ed1c 	.word	0x2000ed1c

0800f050 <_read_r>:
 800f050:	b538      	push	{r3, r4, r5, lr}
 800f052:	4d07      	ldr	r5, [pc, #28]	; (800f070 <_read_r+0x20>)
 800f054:	4604      	mov	r4, r0
 800f056:	4608      	mov	r0, r1
 800f058:	4611      	mov	r1, r2
 800f05a:	2200      	movs	r2, #0
 800f05c:	602a      	str	r2, [r5, #0]
 800f05e:	461a      	mov	r2, r3
 800f060:	f001 fe0e 	bl	8010c80 <_read>
 800f064:	1c43      	adds	r3, r0, #1
 800f066:	d102      	bne.n	800f06e <_read_r+0x1e>
 800f068:	682b      	ldr	r3, [r5, #0]
 800f06a:	b103      	cbz	r3, 800f06e <_read_r+0x1e>
 800f06c:	6023      	str	r3, [r4, #0]
 800f06e:	bd38      	pop	{r3, r4, r5, pc}
 800f070:	2000ed1c 	.word	0x2000ed1c

0800f074 <_sbrk_r>:
 800f074:	b538      	push	{r3, r4, r5, lr}
 800f076:	4d06      	ldr	r5, [pc, #24]	; (800f090 <_sbrk_r+0x1c>)
 800f078:	2300      	movs	r3, #0
 800f07a:	4604      	mov	r4, r0
 800f07c:	4608      	mov	r0, r1
 800f07e:	602b      	str	r3, [r5, #0]
 800f080:	f7f6 fb98 	bl	80057b4 <_sbrk>
 800f084:	1c43      	adds	r3, r0, #1
 800f086:	d102      	bne.n	800f08e <_sbrk_r+0x1a>
 800f088:	682b      	ldr	r3, [r5, #0]
 800f08a:	b103      	cbz	r3, 800f08e <_sbrk_r+0x1a>
 800f08c:	6023      	str	r3, [r4, #0]
 800f08e:	bd38      	pop	{r3, r4, r5, pc}
 800f090:	2000ed1c 	.word	0x2000ed1c

0800f094 <_write_r>:
 800f094:	b538      	push	{r3, r4, r5, lr}
 800f096:	4d07      	ldr	r5, [pc, #28]	; (800f0b4 <_write_r+0x20>)
 800f098:	4604      	mov	r4, r0
 800f09a:	4608      	mov	r0, r1
 800f09c:	4611      	mov	r1, r2
 800f09e:	2200      	movs	r2, #0
 800f0a0:	602a      	str	r2, [r5, #0]
 800f0a2:	461a      	mov	r2, r3
 800f0a4:	f7f3 fb8e 	bl	80027c4 <_write>
 800f0a8:	1c43      	adds	r3, r0, #1
 800f0aa:	d102      	bne.n	800f0b2 <_write_r+0x1e>
 800f0ac:	682b      	ldr	r3, [r5, #0]
 800f0ae:	b103      	cbz	r3, 800f0b2 <_write_r+0x1e>
 800f0b0:	6023      	str	r3, [r4, #0]
 800f0b2:	bd38      	pop	{r3, r4, r5, pc}
 800f0b4:	2000ed1c 	.word	0x2000ed1c

0800f0b8 <__errno>:
 800f0b8:	4b01      	ldr	r3, [pc, #4]	; (800f0c0 <__errno+0x8>)
 800f0ba:	6818      	ldr	r0, [r3, #0]
 800f0bc:	4770      	bx	lr
 800f0be:	bf00      	nop
 800f0c0:	200040d8 	.word	0x200040d8

0800f0c4 <__libc_init_array>:
 800f0c4:	b570      	push	{r4, r5, r6, lr}
 800f0c6:	4d0d      	ldr	r5, [pc, #52]	; (800f0fc <__libc_init_array+0x38>)
 800f0c8:	4c0d      	ldr	r4, [pc, #52]	; (800f100 <__libc_init_array+0x3c>)
 800f0ca:	1b64      	subs	r4, r4, r5
 800f0cc:	10a4      	asrs	r4, r4, #2
 800f0ce:	2600      	movs	r6, #0
 800f0d0:	42a6      	cmp	r6, r4
 800f0d2:	d109      	bne.n	800f0e8 <__libc_init_array+0x24>
 800f0d4:	4d0b      	ldr	r5, [pc, #44]	; (800f104 <__libc_init_array+0x40>)
 800f0d6:	4c0c      	ldr	r4, [pc, #48]	; (800f108 <__libc_init_array+0x44>)
 800f0d8:	f001 fddc 	bl	8010c94 <_init>
 800f0dc:	1b64      	subs	r4, r4, r5
 800f0de:	10a4      	asrs	r4, r4, #2
 800f0e0:	2600      	movs	r6, #0
 800f0e2:	42a6      	cmp	r6, r4
 800f0e4:	d105      	bne.n	800f0f2 <__libc_init_array+0x2e>
 800f0e6:	bd70      	pop	{r4, r5, r6, pc}
 800f0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0ec:	4798      	blx	r3
 800f0ee:	3601      	adds	r6, #1
 800f0f0:	e7ee      	b.n	800f0d0 <__libc_init_array+0xc>
 800f0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0f6:	4798      	blx	r3
 800f0f8:	3601      	adds	r6, #1
 800f0fa:	e7f2      	b.n	800f0e2 <__libc_init_array+0x1e>
 800f0fc:	0801df84 	.word	0x0801df84
 800f100:	0801df84 	.word	0x0801df84
 800f104:	0801df84 	.word	0x0801df84
 800f108:	0801df88 	.word	0x0801df88

0800f10c <__retarget_lock_init_recursive>:
 800f10c:	4770      	bx	lr

0800f10e <__retarget_lock_acquire_recursive>:
 800f10e:	4770      	bx	lr

0800f110 <__retarget_lock_release_recursive>:
 800f110:	4770      	bx	lr

0800f112 <memcpy>:
 800f112:	440a      	add	r2, r1
 800f114:	4291      	cmp	r1, r2
 800f116:	f100 33ff 	add.w	r3, r0, #4294967295
 800f11a:	d100      	bne.n	800f11e <memcpy+0xc>
 800f11c:	4770      	bx	lr
 800f11e:	b510      	push	{r4, lr}
 800f120:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f124:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f128:	4291      	cmp	r1, r2
 800f12a:	d1f9      	bne.n	800f120 <memcpy+0xe>
 800f12c:	bd10      	pop	{r4, pc}

0800f12e <quorem>:
 800f12e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f132:	6903      	ldr	r3, [r0, #16]
 800f134:	690c      	ldr	r4, [r1, #16]
 800f136:	42a3      	cmp	r3, r4
 800f138:	4607      	mov	r7, r0
 800f13a:	db7e      	blt.n	800f23a <quorem+0x10c>
 800f13c:	3c01      	subs	r4, #1
 800f13e:	f101 0814 	add.w	r8, r1, #20
 800f142:	f100 0514 	add.w	r5, r0, #20
 800f146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f14a:	9301      	str	r3, [sp, #4]
 800f14c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f154:	3301      	adds	r3, #1
 800f156:	429a      	cmp	r2, r3
 800f158:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f15c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f160:	fbb2 f6f3 	udiv	r6, r2, r3
 800f164:	d331      	bcc.n	800f1ca <quorem+0x9c>
 800f166:	f04f 0e00 	mov.w	lr, #0
 800f16a:	4640      	mov	r0, r8
 800f16c:	46ac      	mov	ip, r5
 800f16e:	46f2      	mov	sl, lr
 800f170:	f850 2b04 	ldr.w	r2, [r0], #4
 800f174:	b293      	uxth	r3, r2
 800f176:	fb06 e303 	mla	r3, r6, r3, lr
 800f17a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f17e:	0c1a      	lsrs	r2, r3, #16
 800f180:	b29b      	uxth	r3, r3
 800f182:	ebaa 0303 	sub.w	r3, sl, r3
 800f186:	f8dc a000 	ldr.w	sl, [ip]
 800f18a:	fa13 f38a 	uxtah	r3, r3, sl
 800f18e:	fb06 220e 	mla	r2, r6, lr, r2
 800f192:	9300      	str	r3, [sp, #0]
 800f194:	9b00      	ldr	r3, [sp, #0]
 800f196:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f19a:	b292      	uxth	r2, r2
 800f19c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f1a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f1a4:	f8bd 3000 	ldrh.w	r3, [sp]
 800f1a8:	4581      	cmp	r9, r0
 800f1aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1ae:	f84c 3b04 	str.w	r3, [ip], #4
 800f1b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f1b6:	d2db      	bcs.n	800f170 <quorem+0x42>
 800f1b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800f1bc:	b92b      	cbnz	r3, 800f1ca <quorem+0x9c>
 800f1be:	9b01      	ldr	r3, [sp, #4]
 800f1c0:	3b04      	subs	r3, #4
 800f1c2:	429d      	cmp	r5, r3
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	d32c      	bcc.n	800f222 <quorem+0xf4>
 800f1c8:	613c      	str	r4, [r7, #16]
 800f1ca:	4638      	mov	r0, r7
 800f1cc:	f001 f86c 	bl	80102a8 <__mcmp>
 800f1d0:	2800      	cmp	r0, #0
 800f1d2:	db22      	blt.n	800f21a <quorem+0xec>
 800f1d4:	3601      	adds	r6, #1
 800f1d6:	4629      	mov	r1, r5
 800f1d8:	2000      	movs	r0, #0
 800f1da:	f858 2b04 	ldr.w	r2, [r8], #4
 800f1de:	f8d1 c000 	ldr.w	ip, [r1]
 800f1e2:	b293      	uxth	r3, r2
 800f1e4:	1ac3      	subs	r3, r0, r3
 800f1e6:	0c12      	lsrs	r2, r2, #16
 800f1e8:	fa13 f38c 	uxtah	r3, r3, ip
 800f1ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f1f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1fa:	45c1      	cmp	r9, r8
 800f1fc:	f841 3b04 	str.w	r3, [r1], #4
 800f200:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f204:	d2e9      	bcs.n	800f1da <quorem+0xac>
 800f206:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f20a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f20e:	b922      	cbnz	r2, 800f21a <quorem+0xec>
 800f210:	3b04      	subs	r3, #4
 800f212:	429d      	cmp	r5, r3
 800f214:	461a      	mov	r2, r3
 800f216:	d30a      	bcc.n	800f22e <quorem+0x100>
 800f218:	613c      	str	r4, [r7, #16]
 800f21a:	4630      	mov	r0, r6
 800f21c:	b003      	add	sp, #12
 800f21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f222:	6812      	ldr	r2, [r2, #0]
 800f224:	3b04      	subs	r3, #4
 800f226:	2a00      	cmp	r2, #0
 800f228:	d1ce      	bne.n	800f1c8 <quorem+0x9a>
 800f22a:	3c01      	subs	r4, #1
 800f22c:	e7c9      	b.n	800f1c2 <quorem+0x94>
 800f22e:	6812      	ldr	r2, [r2, #0]
 800f230:	3b04      	subs	r3, #4
 800f232:	2a00      	cmp	r2, #0
 800f234:	d1f0      	bne.n	800f218 <quorem+0xea>
 800f236:	3c01      	subs	r4, #1
 800f238:	e7eb      	b.n	800f212 <quorem+0xe4>
 800f23a:	2000      	movs	r0, #0
 800f23c:	e7ee      	b.n	800f21c <quorem+0xee>
	...

0800f240 <_dtoa_r>:
 800f240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f244:	ed2d 8b02 	vpush	{d8}
 800f248:	69c5      	ldr	r5, [r0, #28]
 800f24a:	b091      	sub	sp, #68	; 0x44
 800f24c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f250:	ec59 8b10 	vmov	r8, r9, d0
 800f254:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f256:	9106      	str	r1, [sp, #24]
 800f258:	4606      	mov	r6, r0
 800f25a:	9208      	str	r2, [sp, #32]
 800f25c:	930c      	str	r3, [sp, #48]	; 0x30
 800f25e:	b975      	cbnz	r5, 800f27e <_dtoa_r+0x3e>
 800f260:	2010      	movs	r0, #16
 800f262:	f7f3 fb09 	bl	8002878 <__wrap_malloc>
 800f266:	4602      	mov	r2, r0
 800f268:	61f0      	str	r0, [r6, #28]
 800f26a:	b920      	cbnz	r0, 800f276 <_dtoa_r+0x36>
 800f26c:	4ba6      	ldr	r3, [pc, #664]	; (800f508 <_dtoa_r+0x2c8>)
 800f26e:	21ef      	movs	r1, #239	; 0xef
 800f270:	48a6      	ldr	r0, [pc, #664]	; (800f50c <_dtoa_r+0x2cc>)
 800f272:	f001 f9c7 	bl	8010604 <__assert_func>
 800f276:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f27a:	6005      	str	r5, [r0, #0]
 800f27c:	60c5      	str	r5, [r0, #12]
 800f27e:	69f3      	ldr	r3, [r6, #28]
 800f280:	6819      	ldr	r1, [r3, #0]
 800f282:	b151      	cbz	r1, 800f29a <_dtoa_r+0x5a>
 800f284:	685a      	ldr	r2, [r3, #4]
 800f286:	604a      	str	r2, [r1, #4]
 800f288:	2301      	movs	r3, #1
 800f28a:	4093      	lsls	r3, r2
 800f28c:	608b      	str	r3, [r1, #8]
 800f28e:	4630      	mov	r0, r6
 800f290:	f000 fdce 	bl	800fe30 <_Bfree>
 800f294:	69f3      	ldr	r3, [r6, #28]
 800f296:	2200      	movs	r2, #0
 800f298:	601a      	str	r2, [r3, #0]
 800f29a:	f1b9 0300 	subs.w	r3, r9, #0
 800f29e:	bfbb      	ittet	lt
 800f2a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f2a4:	9303      	strlt	r3, [sp, #12]
 800f2a6:	2300      	movge	r3, #0
 800f2a8:	2201      	movlt	r2, #1
 800f2aa:	bfac      	ite	ge
 800f2ac:	6023      	strge	r3, [r4, #0]
 800f2ae:	6022      	strlt	r2, [r4, #0]
 800f2b0:	4b97      	ldr	r3, [pc, #604]	; (800f510 <_dtoa_r+0x2d0>)
 800f2b2:	9c03      	ldr	r4, [sp, #12]
 800f2b4:	43a3      	bics	r3, r4
 800f2b6:	d11c      	bne.n	800f2f2 <_dtoa_r+0xb2>
 800f2b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f2ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800f2be:	6013      	str	r3, [r2, #0]
 800f2c0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800f2c4:	ea53 0308 	orrs.w	r3, r3, r8
 800f2c8:	f000 84fb 	beq.w	800fcc2 <_dtoa_r+0xa82>
 800f2cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f2ce:	b963      	cbnz	r3, 800f2ea <_dtoa_r+0xaa>
 800f2d0:	4b90      	ldr	r3, [pc, #576]	; (800f514 <_dtoa_r+0x2d4>)
 800f2d2:	e020      	b.n	800f316 <_dtoa_r+0xd6>
 800f2d4:	4b90      	ldr	r3, [pc, #576]	; (800f518 <_dtoa_r+0x2d8>)
 800f2d6:	9301      	str	r3, [sp, #4]
 800f2d8:	3308      	adds	r3, #8
 800f2da:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f2dc:	6013      	str	r3, [r2, #0]
 800f2de:	9801      	ldr	r0, [sp, #4]
 800f2e0:	b011      	add	sp, #68	; 0x44
 800f2e2:	ecbd 8b02 	vpop	{d8}
 800f2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ea:	4b8a      	ldr	r3, [pc, #552]	; (800f514 <_dtoa_r+0x2d4>)
 800f2ec:	9301      	str	r3, [sp, #4]
 800f2ee:	3303      	adds	r3, #3
 800f2f0:	e7f3      	b.n	800f2da <_dtoa_r+0x9a>
 800f2f2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f2f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2fe:	d10c      	bne.n	800f31a <_dtoa_r+0xda>
 800f300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f302:	2301      	movs	r3, #1
 800f304:	6013      	str	r3, [r2, #0]
 800f306:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f000 84d7 	beq.w	800fcbc <_dtoa_r+0xa7c>
 800f30e:	4b83      	ldr	r3, [pc, #524]	; (800f51c <_dtoa_r+0x2dc>)
 800f310:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f312:	6013      	str	r3, [r2, #0]
 800f314:	3b01      	subs	r3, #1
 800f316:	9301      	str	r3, [sp, #4]
 800f318:	e7e1      	b.n	800f2de <_dtoa_r+0x9e>
 800f31a:	aa0e      	add	r2, sp, #56	; 0x38
 800f31c:	a90f      	add	r1, sp, #60	; 0x3c
 800f31e:	4630      	mov	r0, r6
 800f320:	eeb0 0b48 	vmov.f64	d0, d8
 800f324:	f001 f866 	bl	80103f4 <__d2b>
 800f328:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800f32c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f32e:	4605      	mov	r5, r0
 800f330:	2b00      	cmp	r3, #0
 800f332:	d046      	beq.n	800f3c2 <_dtoa_r+0x182>
 800f334:	eeb0 7b48 	vmov.f64	d7, d8
 800f338:	ee18 1a90 	vmov	r1, s17
 800f33c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f340:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800f344:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f348:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f34c:	2000      	movs	r0, #0
 800f34e:	ee07 1a90 	vmov	s15, r1
 800f352:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800f356:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800f4f0 <_dtoa_r+0x2b0>
 800f35a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f35e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800f4f8 <_dtoa_r+0x2b8>
 800f362:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f366:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800f500 <_dtoa_r+0x2c0>
 800f36a:	ee07 3a90 	vmov	s15, r3
 800f36e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f372:	eeb0 7b46 	vmov.f64	d7, d6
 800f376:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f37a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f37e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f386:	ee16 ba90 	vmov	fp, s13
 800f38a:	9009      	str	r0, [sp, #36]	; 0x24
 800f38c:	d508      	bpl.n	800f3a0 <_dtoa_r+0x160>
 800f38e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f392:	eeb4 6b47 	vcmp.f64	d6, d7
 800f396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f39a:	bf18      	it	ne
 800f39c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f3a0:	f1bb 0f16 	cmp.w	fp, #22
 800f3a4:	d82b      	bhi.n	800f3fe <_dtoa_r+0x1be>
 800f3a6:	495e      	ldr	r1, [pc, #376]	; (800f520 <_dtoa_r+0x2e0>)
 800f3a8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800f3ac:	ed91 7b00 	vldr	d7, [r1]
 800f3b0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b8:	d501      	bpl.n	800f3be <_dtoa_r+0x17e>
 800f3ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f3be:	2100      	movs	r1, #0
 800f3c0:	e01e      	b.n	800f400 <_dtoa_r+0x1c0>
 800f3c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f3c4:	4413      	add	r3, r2
 800f3c6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800f3ca:	2920      	cmp	r1, #32
 800f3cc:	bfc1      	itttt	gt
 800f3ce:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800f3d2:	408c      	lslgt	r4, r1
 800f3d4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800f3d8:	fa28 f101 	lsrgt.w	r1, r8, r1
 800f3dc:	bfd6      	itet	le
 800f3de:	f1c1 0120 	rsble	r1, r1, #32
 800f3e2:	4321      	orrgt	r1, r4
 800f3e4:	fa08 f101 	lslle.w	r1, r8, r1
 800f3e8:	ee07 1a90 	vmov	s15, r1
 800f3ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f3f0:	3b01      	subs	r3, #1
 800f3f2:	ee17 1a90 	vmov	r1, s15
 800f3f6:	2001      	movs	r0, #1
 800f3f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800f3fc:	e7a7      	b.n	800f34e <_dtoa_r+0x10e>
 800f3fe:	2101      	movs	r1, #1
 800f400:	1ad2      	subs	r2, r2, r3
 800f402:	1e53      	subs	r3, r2, #1
 800f404:	9305      	str	r3, [sp, #20]
 800f406:	bf45      	ittet	mi
 800f408:	f1c2 0301 	rsbmi	r3, r2, #1
 800f40c:	9304      	strmi	r3, [sp, #16]
 800f40e:	2300      	movpl	r3, #0
 800f410:	2300      	movmi	r3, #0
 800f412:	bf4c      	ite	mi
 800f414:	9305      	strmi	r3, [sp, #20]
 800f416:	9304      	strpl	r3, [sp, #16]
 800f418:	f1bb 0f00 	cmp.w	fp, #0
 800f41c:	910b      	str	r1, [sp, #44]	; 0x2c
 800f41e:	db18      	blt.n	800f452 <_dtoa_r+0x212>
 800f420:	9b05      	ldr	r3, [sp, #20]
 800f422:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800f426:	445b      	add	r3, fp
 800f428:	9305      	str	r3, [sp, #20]
 800f42a:	2300      	movs	r3, #0
 800f42c:	9a06      	ldr	r2, [sp, #24]
 800f42e:	2a09      	cmp	r2, #9
 800f430:	d848      	bhi.n	800f4c4 <_dtoa_r+0x284>
 800f432:	2a05      	cmp	r2, #5
 800f434:	bfc4      	itt	gt
 800f436:	3a04      	subgt	r2, #4
 800f438:	9206      	strgt	r2, [sp, #24]
 800f43a:	9a06      	ldr	r2, [sp, #24]
 800f43c:	f1a2 0202 	sub.w	r2, r2, #2
 800f440:	bfcc      	ite	gt
 800f442:	2400      	movgt	r4, #0
 800f444:	2401      	movle	r4, #1
 800f446:	2a03      	cmp	r2, #3
 800f448:	d847      	bhi.n	800f4da <_dtoa_r+0x29a>
 800f44a:	e8df f002 	tbb	[pc, r2]
 800f44e:	2d0b      	.short	0x2d0b
 800f450:	392b      	.short	0x392b
 800f452:	9b04      	ldr	r3, [sp, #16]
 800f454:	2200      	movs	r2, #0
 800f456:	eba3 030b 	sub.w	r3, r3, fp
 800f45a:	9304      	str	r3, [sp, #16]
 800f45c:	920a      	str	r2, [sp, #40]	; 0x28
 800f45e:	f1cb 0300 	rsb	r3, fp, #0
 800f462:	e7e3      	b.n	800f42c <_dtoa_r+0x1ec>
 800f464:	2200      	movs	r2, #0
 800f466:	9207      	str	r2, [sp, #28]
 800f468:	9a08      	ldr	r2, [sp, #32]
 800f46a:	2a00      	cmp	r2, #0
 800f46c:	dc38      	bgt.n	800f4e0 <_dtoa_r+0x2a0>
 800f46e:	f04f 0a01 	mov.w	sl, #1
 800f472:	46d1      	mov	r9, sl
 800f474:	4652      	mov	r2, sl
 800f476:	f8cd a020 	str.w	sl, [sp, #32]
 800f47a:	69f7      	ldr	r7, [r6, #28]
 800f47c:	2100      	movs	r1, #0
 800f47e:	2004      	movs	r0, #4
 800f480:	f100 0c14 	add.w	ip, r0, #20
 800f484:	4594      	cmp	ip, r2
 800f486:	d930      	bls.n	800f4ea <_dtoa_r+0x2aa>
 800f488:	6079      	str	r1, [r7, #4]
 800f48a:	4630      	mov	r0, r6
 800f48c:	930d      	str	r3, [sp, #52]	; 0x34
 800f48e:	f000 fc8f 	bl	800fdb0 <_Balloc>
 800f492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f494:	9001      	str	r0, [sp, #4]
 800f496:	4602      	mov	r2, r0
 800f498:	2800      	cmp	r0, #0
 800f49a:	d145      	bne.n	800f528 <_dtoa_r+0x2e8>
 800f49c:	4b21      	ldr	r3, [pc, #132]	; (800f524 <_dtoa_r+0x2e4>)
 800f49e:	f240 11af 	movw	r1, #431	; 0x1af
 800f4a2:	e6e5      	b.n	800f270 <_dtoa_r+0x30>
 800f4a4:	2201      	movs	r2, #1
 800f4a6:	e7de      	b.n	800f466 <_dtoa_r+0x226>
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	9207      	str	r2, [sp, #28]
 800f4ac:	9a08      	ldr	r2, [sp, #32]
 800f4ae:	eb0b 0a02 	add.w	sl, fp, r2
 800f4b2:	f10a 0901 	add.w	r9, sl, #1
 800f4b6:	464a      	mov	r2, r9
 800f4b8:	2a01      	cmp	r2, #1
 800f4ba:	bfb8      	it	lt
 800f4bc:	2201      	movlt	r2, #1
 800f4be:	e7dc      	b.n	800f47a <_dtoa_r+0x23a>
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	e7f2      	b.n	800f4aa <_dtoa_r+0x26a>
 800f4c4:	2401      	movs	r4, #1
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800f4cc:	f04f 3aff 	mov.w	sl, #4294967295
 800f4d0:	2100      	movs	r1, #0
 800f4d2:	46d1      	mov	r9, sl
 800f4d4:	2212      	movs	r2, #18
 800f4d6:	9108      	str	r1, [sp, #32]
 800f4d8:	e7cf      	b.n	800f47a <_dtoa_r+0x23a>
 800f4da:	2201      	movs	r2, #1
 800f4dc:	9207      	str	r2, [sp, #28]
 800f4de:	e7f5      	b.n	800f4cc <_dtoa_r+0x28c>
 800f4e0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f4e4:	46d1      	mov	r9, sl
 800f4e6:	4652      	mov	r2, sl
 800f4e8:	e7c7      	b.n	800f47a <_dtoa_r+0x23a>
 800f4ea:	3101      	adds	r1, #1
 800f4ec:	0040      	lsls	r0, r0, #1
 800f4ee:	e7c7      	b.n	800f480 <_dtoa_r+0x240>
 800f4f0:	636f4361 	.word	0x636f4361
 800f4f4:	3fd287a7 	.word	0x3fd287a7
 800f4f8:	8b60c8b3 	.word	0x8b60c8b3
 800f4fc:	3fc68a28 	.word	0x3fc68a28
 800f500:	509f79fb 	.word	0x509f79fb
 800f504:	3fd34413 	.word	0x3fd34413
 800f508:	0801dc4b 	.word	0x0801dc4b
 800f50c:	0801dc62 	.word	0x0801dc62
 800f510:	7ff00000 	.word	0x7ff00000
 800f514:	0801dc47 	.word	0x0801dc47
 800f518:	0801dc3e 	.word	0x0801dc3e
 800f51c:	080116ba 	.word	0x080116ba
 800f520:	0801dd50 	.word	0x0801dd50
 800f524:	0801dcba 	.word	0x0801dcba
 800f528:	69f2      	ldr	r2, [r6, #28]
 800f52a:	9901      	ldr	r1, [sp, #4]
 800f52c:	6011      	str	r1, [r2, #0]
 800f52e:	f1b9 0f0e 	cmp.w	r9, #14
 800f532:	d86c      	bhi.n	800f60e <_dtoa_r+0x3ce>
 800f534:	2c00      	cmp	r4, #0
 800f536:	d06a      	beq.n	800f60e <_dtoa_r+0x3ce>
 800f538:	f1bb 0f00 	cmp.w	fp, #0
 800f53c:	f340 80a0 	ble.w	800f680 <_dtoa_r+0x440>
 800f540:	4ac1      	ldr	r2, [pc, #772]	; (800f848 <_dtoa_r+0x608>)
 800f542:	f00b 010f 	and.w	r1, fp, #15
 800f546:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f54a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f54e:	ed92 7b00 	vldr	d7, [r2]
 800f552:	ea4f 122b 	mov.w	r2, fp, asr #4
 800f556:	f000 8087 	beq.w	800f668 <_dtoa_r+0x428>
 800f55a:	49bc      	ldr	r1, [pc, #752]	; (800f84c <_dtoa_r+0x60c>)
 800f55c:	ed91 6b08 	vldr	d6, [r1, #32]
 800f560:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f564:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f568:	f002 020f 	and.w	r2, r2, #15
 800f56c:	2103      	movs	r1, #3
 800f56e:	48b7      	ldr	r0, [pc, #732]	; (800f84c <_dtoa_r+0x60c>)
 800f570:	2a00      	cmp	r2, #0
 800f572:	d17b      	bne.n	800f66c <_dtoa_r+0x42c>
 800f574:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f578:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f57c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f582:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f586:	2a00      	cmp	r2, #0
 800f588:	f000 80a0 	beq.w	800f6cc <_dtoa_r+0x48c>
 800f58c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f590:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f598:	f140 8098 	bpl.w	800f6cc <_dtoa_r+0x48c>
 800f59c:	f1b9 0f00 	cmp.w	r9, #0
 800f5a0:	f000 8094 	beq.w	800f6cc <_dtoa_r+0x48c>
 800f5a4:	f1ba 0f00 	cmp.w	sl, #0
 800f5a8:	dd2f      	ble.n	800f60a <_dtoa_r+0x3ca>
 800f5aa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f5ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f5b2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f5b6:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f5ba:	3101      	adds	r1, #1
 800f5bc:	4654      	mov	r4, sl
 800f5be:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f5c2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f5c6:	ee07 1a90 	vmov	s15, r1
 800f5ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f5ce:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f5d2:	ee15 7a90 	vmov	r7, s11
 800f5d6:	ec51 0b15 	vmov	r0, r1, d5
 800f5da:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800f5de:	2c00      	cmp	r4, #0
 800f5e0:	d177      	bne.n	800f6d2 <_dtoa_r+0x492>
 800f5e2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f5e6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f5ea:	ec41 0b17 	vmov	d7, r0, r1
 800f5ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f6:	f300 826a 	bgt.w	800face <_dtoa_r+0x88e>
 800f5fa:	eeb1 7b47 	vneg.f64	d7, d7
 800f5fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f606:	f100 8260 	bmi.w	800faca <_dtoa_r+0x88a>
 800f60a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f60e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f610:	2a00      	cmp	r2, #0
 800f612:	f2c0 811d 	blt.w	800f850 <_dtoa_r+0x610>
 800f616:	f1bb 0f0e 	cmp.w	fp, #14
 800f61a:	f300 8119 	bgt.w	800f850 <_dtoa_r+0x610>
 800f61e:	4b8a      	ldr	r3, [pc, #552]	; (800f848 <_dtoa_r+0x608>)
 800f620:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f624:	ed93 6b00 	vldr	d6, [r3]
 800f628:	9b08      	ldr	r3, [sp, #32]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	f280 80b7 	bge.w	800f79e <_dtoa_r+0x55e>
 800f630:	f1b9 0f00 	cmp.w	r9, #0
 800f634:	f300 80b3 	bgt.w	800f79e <_dtoa_r+0x55e>
 800f638:	f040 8246 	bne.w	800fac8 <_dtoa_r+0x888>
 800f63c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f640:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f644:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f648:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f650:	464c      	mov	r4, r9
 800f652:	464f      	mov	r7, r9
 800f654:	f280 821c 	bge.w	800fa90 <_dtoa_r+0x850>
 800f658:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f65c:	2331      	movs	r3, #49	; 0x31
 800f65e:	f808 3b01 	strb.w	r3, [r8], #1
 800f662:	f10b 0b01 	add.w	fp, fp, #1
 800f666:	e218      	b.n	800fa9a <_dtoa_r+0x85a>
 800f668:	2102      	movs	r1, #2
 800f66a:	e780      	b.n	800f56e <_dtoa_r+0x32e>
 800f66c:	07d4      	lsls	r4, r2, #31
 800f66e:	d504      	bpl.n	800f67a <_dtoa_r+0x43a>
 800f670:	ed90 6b00 	vldr	d6, [r0]
 800f674:	3101      	adds	r1, #1
 800f676:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f67a:	1052      	asrs	r2, r2, #1
 800f67c:	3008      	adds	r0, #8
 800f67e:	e777      	b.n	800f570 <_dtoa_r+0x330>
 800f680:	d022      	beq.n	800f6c8 <_dtoa_r+0x488>
 800f682:	f1cb 0200 	rsb	r2, fp, #0
 800f686:	4970      	ldr	r1, [pc, #448]	; (800f848 <_dtoa_r+0x608>)
 800f688:	f002 000f 	and.w	r0, r2, #15
 800f68c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f690:	ed91 7b00 	vldr	d7, [r1]
 800f694:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f698:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f69c:	486b      	ldr	r0, [pc, #428]	; (800f84c <_dtoa_r+0x60c>)
 800f69e:	1112      	asrs	r2, r2, #4
 800f6a0:	2400      	movs	r4, #0
 800f6a2:	2102      	movs	r1, #2
 800f6a4:	b92a      	cbnz	r2, 800f6b2 <_dtoa_r+0x472>
 800f6a6:	2c00      	cmp	r4, #0
 800f6a8:	f43f af6a 	beq.w	800f580 <_dtoa_r+0x340>
 800f6ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f6b0:	e766      	b.n	800f580 <_dtoa_r+0x340>
 800f6b2:	07d7      	lsls	r7, r2, #31
 800f6b4:	d505      	bpl.n	800f6c2 <_dtoa_r+0x482>
 800f6b6:	ed90 6b00 	vldr	d6, [r0]
 800f6ba:	3101      	adds	r1, #1
 800f6bc:	2401      	movs	r4, #1
 800f6be:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f6c2:	1052      	asrs	r2, r2, #1
 800f6c4:	3008      	adds	r0, #8
 800f6c6:	e7ed      	b.n	800f6a4 <_dtoa_r+0x464>
 800f6c8:	2102      	movs	r1, #2
 800f6ca:	e759      	b.n	800f580 <_dtoa_r+0x340>
 800f6cc:	465a      	mov	r2, fp
 800f6ce:	464c      	mov	r4, r9
 800f6d0:	e775      	b.n	800f5be <_dtoa_r+0x37e>
 800f6d2:	ec41 0b17 	vmov	d7, r0, r1
 800f6d6:	495c      	ldr	r1, [pc, #368]	; (800f848 <_dtoa_r+0x608>)
 800f6d8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800f6dc:	ed11 4b02 	vldr	d4, [r1, #-8]
 800f6e0:	9901      	ldr	r1, [sp, #4]
 800f6e2:	440c      	add	r4, r1
 800f6e4:	9907      	ldr	r1, [sp, #28]
 800f6e6:	b351      	cbz	r1, 800f73e <_dtoa_r+0x4fe>
 800f6e8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f6ec:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f6f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f6f4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f6f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f6fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f700:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f704:	ee14 1a90 	vmov	r1, s9
 800f708:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f70c:	3130      	adds	r1, #48	; 0x30
 800f70e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f712:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f71a:	f808 1b01 	strb.w	r1, [r8], #1
 800f71e:	d439      	bmi.n	800f794 <_dtoa_r+0x554>
 800f720:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f724:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f72c:	d472      	bmi.n	800f814 <_dtoa_r+0x5d4>
 800f72e:	45a0      	cmp	r8, r4
 800f730:	f43f af6b 	beq.w	800f60a <_dtoa_r+0x3ca>
 800f734:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f738:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f73c:	e7e0      	b.n	800f700 <_dtoa_r+0x4c0>
 800f73e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f742:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f746:	4620      	mov	r0, r4
 800f748:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f74c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f750:	ee14 1a90 	vmov	r1, s9
 800f754:	3130      	adds	r1, #48	; 0x30
 800f756:	f808 1b01 	strb.w	r1, [r8], #1
 800f75a:	45a0      	cmp	r8, r4
 800f75c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f760:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f764:	d118      	bne.n	800f798 <_dtoa_r+0x558>
 800f766:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f76a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f76e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f776:	dc4d      	bgt.n	800f814 <_dtoa_r+0x5d4>
 800f778:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f77c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f784:	f57f af41 	bpl.w	800f60a <_dtoa_r+0x3ca>
 800f788:	4680      	mov	r8, r0
 800f78a:	3801      	subs	r0, #1
 800f78c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f790:	2b30      	cmp	r3, #48	; 0x30
 800f792:	d0f9      	beq.n	800f788 <_dtoa_r+0x548>
 800f794:	4693      	mov	fp, r2
 800f796:	e02a      	b.n	800f7ee <_dtoa_r+0x5ae>
 800f798:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f79c:	e7d6      	b.n	800f74c <_dtoa_r+0x50c>
 800f79e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f7a2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f7a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f7aa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f7ae:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f7b2:	ee15 3a10 	vmov	r3, s10
 800f7b6:	3330      	adds	r3, #48	; 0x30
 800f7b8:	f808 3b01 	strb.w	r3, [r8], #1
 800f7bc:	9b01      	ldr	r3, [sp, #4]
 800f7be:	eba8 0303 	sub.w	r3, r8, r3
 800f7c2:	4599      	cmp	r9, r3
 800f7c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f7c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f7cc:	d133      	bne.n	800f836 <_dtoa_r+0x5f6>
 800f7ce:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f7d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7da:	dc1a      	bgt.n	800f812 <_dtoa_r+0x5d2>
 800f7dc:	eeb4 7b46 	vcmp.f64	d7, d6
 800f7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7e4:	d103      	bne.n	800f7ee <_dtoa_r+0x5ae>
 800f7e6:	ee15 3a10 	vmov	r3, s10
 800f7ea:	07d9      	lsls	r1, r3, #31
 800f7ec:	d411      	bmi.n	800f812 <_dtoa_r+0x5d2>
 800f7ee:	4629      	mov	r1, r5
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	f000 fb1d 	bl	800fe30 <_Bfree>
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f7fa:	f888 3000 	strb.w	r3, [r8]
 800f7fe:	f10b 0301 	add.w	r3, fp, #1
 800f802:	6013      	str	r3, [r2, #0]
 800f804:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f806:	2b00      	cmp	r3, #0
 800f808:	f43f ad69 	beq.w	800f2de <_dtoa_r+0x9e>
 800f80c:	f8c3 8000 	str.w	r8, [r3]
 800f810:	e565      	b.n	800f2de <_dtoa_r+0x9e>
 800f812:	465a      	mov	r2, fp
 800f814:	4643      	mov	r3, r8
 800f816:	4698      	mov	r8, r3
 800f818:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800f81c:	2939      	cmp	r1, #57	; 0x39
 800f81e:	d106      	bne.n	800f82e <_dtoa_r+0x5ee>
 800f820:	9901      	ldr	r1, [sp, #4]
 800f822:	4299      	cmp	r1, r3
 800f824:	d1f7      	bne.n	800f816 <_dtoa_r+0x5d6>
 800f826:	9801      	ldr	r0, [sp, #4]
 800f828:	2130      	movs	r1, #48	; 0x30
 800f82a:	3201      	adds	r2, #1
 800f82c:	7001      	strb	r1, [r0, #0]
 800f82e:	7819      	ldrb	r1, [r3, #0]
 800f830:	3101      	adds	r1, #1
 800f832:	7019      	strb	r1, [r3, #0]
 800f834:	e7ae      	b.n	800f794 <_dtoa_r+0x554>
 800f836:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f83a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f842:	d1b2      	bne.n	800f7aa <_dtoa_r+0x56a>
 800f844:	e7d3      	b.n	800f7ee <_dtoa_r+0x5ae>
 800f846:	bf00      	nop
 800f848:	0801dd50 	.word	0x0801dd50
 800f84c:	0801dd28 	.word	0x0801dd28
 800f850:	9907      	ldr	r1, [sp, #28]
 800f852:	2900      	cmp	r1, #0
 800f854:	f000 80d0 	beq.w	800f9f8 <_dtoa_r+0x7b8>
 800f858:	9906      	ldr	r1, [sp, #24]
 800f85a:	2901      	cmp	r1, #1
 800f85c:	f300 80b4 	bgt.w	800f9c8 <_dtoa_r+0x788>
 800f860:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f862:	2900      	cmp	r1, #0
 800f864:	f000 80ac 	beq.w	800f9c0 <_dtoa_r+0x780>
 800f868:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f86c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f870:	461c      	mov	r4, r3
 800f872:	9309      	str	r3, [sp, #36]	; 0x24
 800f874:	9b04      	ldr	r3, [sp, #16]
 800f876:	4413      	add	r3, r2
 800f878:	9304      	str	r3, [sp, #16]
 800f87a:	9b05      	ldr	r3, [sp, #20]
 800f87c:	2101      	movs	r1, #1
 800f87e:	4413      	add	r3, r2
 800f880:	4630      	mov	r0, r6
 800f882:	9305      	str	r3, [sp, #20]
 800f884:	f000 fb8a 	bl	800ff9c <__i2b>
 800f888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f88a:	4607      	mov	r7, r0
 800f88c:	f1b8 0f00 	cmp.w	r8, #0
 800f890:	d00d      	beq.n	800f8ae <_dtoa_r+0x66e>
 800f892:	9a05      	ldr	r2, [sp, #20]
 800f894:	2a00      	cmp	r2, #0
 800f896:	dd0a      	ble.n	800f8ae <_dtoa_r+0x66e>
 800f898:	4542      	cmp	r2, r8
 800f89a:	9904      	ldr	r1, [sp, #16]
 800f89c:	bfa8      	it	ge
 800f89e:	4642      	movge	r2, r8
 800f8a0:	1a89      	subs	r1, r1, r2
 800f8a2:	9104      	str	r1, [sp, #16]
 800f8a4:	9905      	ldr	r1, [sp, #20]
 800f8a6:	eba8 0802 	sub.w	r8, r8, r2
 800f8aa:	1a8a      	subs	r2, r1, r2
 800f8ac:	9205      	str	r2, [sp, #20]
 800f8ae:	b303      	cbz	r3, 800f8f2 <_dtoa_r+0x6b2>
 800f8b0:	9a07      	ldr	r2, [sp, #28]
 800f8b2:	2a00      	cmp	r2, #0
 800f8b4:	f000 80a5 	beq.w	800fa02 <_dtoa_r+0x7c2>
 800f8b8:	2c00      	cmp	r4, #0
 800f8ba:	dd13      	ble.n	800f8e4 <_dtoa_r+0x6a4>
 800f8bc:	4639      	mov	r1, r7
 800f8be:	4622      	mov	r2, r4
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	930d      	str	r3, [sp, #52]	; 0x34
 800f8c4:	f000 fc2a 	bl	801011c <__pow5mult>
 800f8c8:	462a      	mov	r2, r5
 800f8ca:	4601      	mov	r1, r0
 800f8cc:	4607      	mov	r7, r0
 800f8ce:	4630      	mov	r0, r6
 800f8d0:	f000 fb7a 	bl	800ffc8 <__multiply>
 800f8d4:	4629      	mov	r1, r5
 800f8d6:	9009      	str	r0, [sp, #36]	; 0x24
 800f8d8:	4630      	mov	r0, r6
 800f8da:	f000 faa9 	bl	800fe30 <_Bfree>
 800f8de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8e2:	4615      	mov	r5, r2
 800f8e4:	1b1a      	subs	r2, r3, r4
 800f8e6:	d004      	beq.n	800f8f2 <_dtoa_r+0x6b2>
 800f8e8:	4629      	mov	r1, r5
 800f8ea:	4630      	mov	r0, r6
 800f8ec:	f000 fc16 	bl	801011c <__pow5mult>
 800f8f0:	4605      	mov	r5, r0
 800f8f2:	2101      	movs	r1, #1
 800f8f4:	4630      	mov	r0, r6
 800f8f6:	f000 fb51 	bl	800ff9c <__i2b>
 800f8fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	4604      	mov	r4, r0
 800f900:	f340 8081 	ble.w	800fa06 <_dtoa_r+0x7c6>
 800f904:	461a      	mov	r2, r3
 800f906:	4601      	mov	r1, r0
 800f908:	4630      	mov	r0, r6
 800f90a:	f000 fc07 	bl	801011c <__pow5mult>
 800f90e:	9b06      	ldr	r3, [sp, #24]
 800f910:	2b01      	cmp	r3, #1
 800f912:	4604      	mov	r4, r0
 800f914:	dd7a      	ble.n	800fa0c <_dtoa_r+0x7cc>
 800f916:	2300      	movs	r3, #0
 800f918:	9309      	str	r3, [sp, #36]	; 0x24
 800f91a:	6922      	ldr	r2, [r4, #16]
 800f91c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f920:	6910      	ldr	r0, [r2, #16]
 800f922:	f000 faed 	bl	800ff00 <__hi0bits>
 800f926:	f1c0 0020 	rsb	r0, r0, #32
 800f92a:	9b05      	ldr	r3, [sp, #20]
 800f92c:	4418      	add	r0, r3
 800f92e:	f010 001f 	ands.w	r0, r0, #31
 800f932:	f000 8093 	beq.w	800fa5c <_dtoa_r+0x81c>
 800f936:	f1c0 0220 	rsb	r2, r0, #32
 800f93a:	2a04      	cmp	r2, #4
 800f93c:	f340 8085 	ble.w	800fa4a <_dtoa_r+0x80a>
 800f940:	9b04      	ldr	r3, [sp, #16]
 800f942:	f1c0 001c 	rsb	r0, r0, #28
 800f946:	4403      	add	r3, r0
 800f948:	9304      	str	r3, [sp, #16]
 800f94a:	9b05      	ldr	r3, [sp, #20]
 800f94c:	4480      	add	r8, r0
 800f94e:	4403      	add	r3, r0
 800f950:	9305      	str	r3, [sp, #20]
 800f952:	9b04      	ldr	r3, [sp, #16]
 800f954:	2b00      	cmp	r3, #0
 800f956:	dd05      	ble.n	800f964 <_dtoa_r+0x724>
 800f958:	4629      	mov	r1, r5
 800f95a:	461a      	mov	r2, r3
 800f95c:	4630      	mov	r0, r6
 800f95e:	f000 fc37 	bl	80101d0 <__lshift>
 800f962:	4605      	mov	r5, r0
 800f964:	9b05      	ldr	r3, [sp, #20]
 800f966:	2b00      	cmp	r3, #0
 800f968:	dd05      	ble.n	800f976 <_dtoa_r+0x736>
 800f96a:	4621      	mov	r1, r4
 800f96c:	461a      	mov	r2, r3
 800f96e:	4630      	mov	r0, r6
 800f970:	f000 fc2e 	bl	80101d0 <__lshift>
 800f974:	4604      	mov	r4, r0
 800f976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d071      	beq.n	800fa60 <_dtoa_r+0x820>
 800f97c:	4621      	mov	r1, r4
 800f97e:	4628      	mov	r0, r5
 800f980:	f000 fc92 	bl	80102a8 <__mcmp>
 800f984:	2800      	cmp	r0, #0
 800f986:	da6b      	bge.n	800fa60 <_dtoa_r+0x820>
 800f988:	2300      	movs	r3, #0
 800f98a:	4629      	mov	r1, r5
 800f98c:	220a      	movs	r2, #10
 800f98e:	4630      	mov	r0, r6
 800f990:	f000 fa70 	bl	800fe74 <__multadd>
 800f994:	9b07      	ldr	r3, [sp, #28]
 800f996:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f99a:	4605      	mov	r5, r0
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f000 8197 	beq.w	800fcd0 <_dtoa_r+0xa90>
 800f9a2:	4639      	mov	r1, r7
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	220a      	movs	r2, #10
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	f000 fa63 	bl	800fe74 <__multadd>
 800f9ae:	f1ba 0f00 	cmp.w	sl, #0
 800f9b2:	4607      	mov	r7, r0
 800f9b4:	f300 8093 	bgt.w	800fade <_dtoa_r+0x89e>
 800f9b8:	9b06      	ldr	r3, [sp, #24]
 800f9ba:	2b02      	cmp	r3, #2
 800f9bc:	dc57      	bgt.n	800fa6e <_dtoa_r+0x82e>
 800f9be:	e08e      	b.n	800fade <_dtoa_r+0x89e>
 800f9c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f9c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f9c6:	e751      	b.n	800f86c <_dtoa_r+0x62c>
 800f9c8:	f109 34ff 	add.w	r4, r9, #4294967295
 800f9cc:	42a3      	cmp	r3, r4
 800f9ce:	bfbf      	itttt	lt
 800f9d0:	1ae2      	sublt	r2, r4, r3
 800f9d2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f9d4:	189b      	addlt	r3, r3, r2
 800f9d6:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f9d8:	bfae      	itee	ge
 800f9da:	1b1c      	subge	r4, r3, r4
 800f9dc:	4623      	movlt	r3, r4
 800f9de:	2400      	movlt	r4, #0
 800f9e0:	f1b9 0f00 	cmp.w	r9, #0
 800f9e4:	bfb5      	itete	lt
 800f9e6:	9a04      	ldrlt	r2, [sp, #16]
 800f9e8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800f9ec:	eba2 0809 	sublt.w	r8, r2, r9
 800f9f0:	464a      	movge	r2, r9
 800f9f2:	bfb8      	it	lt
 800f9f4:	2200      	movlt	r2, #0
 800f9f6:	e73c      	b.n	800f872 <_dtoa_r+0x632>
 800f9f8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f9fc:	9f07      	ldr	r7, [sp, #28]
 800f9fe:	461c      	mov	r4, r3
 800fa00:	e744      	b.n	800f88c <_dtoa_r+0x64c>
 800fa02:	461a      	mov	r2, r3
 800fa04:	e770      	b.n	800f8e8 <_dtoa_r+0x6a8>
 800fa06:	9b06      	ldr	r3, [sp, #24]
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	dc18      	bgt.n	800fa3e <_dtoa_r+0x7fe>
 800fa0c:	9b02      	ldr	r3, [sp, #8]
 800fa0e:	b9b3      	cbnz	r3, 800fa3e <_dtoa_r+0x7fe>
 800fa10:	9b03      	ldr	r3, [sp, #12]
 800fa12:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800fa16:	b9a2      	cbnz	r2, 800fa42 <_dtoa_r+0x802>
 800fa18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800fa1c:	0d12      	lsrs	r2, r2, #20
 800fa1e:	0512      	lsls	r2, r2, #20
 800fa20:	b18a      	cbz	r2, 800fa46 <_dtoa_r+0x806>
 800fa22:	9b04      	ldr	r3, [sp, #16]
 800fa24:	3301      	adds	r3, #1
 800fa26:	9304      	str	r3, [sp, #16]
 800fa28:	9b05      	ldr	r3, [sp, #20]
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	9305      	str	r3, [sp, #20]
 800fa2e:	2301      	movs	r3, #1
 800fa30:	9309      	str	r3, [sp, #36]	; 0x24
 800fa32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	f47f af70 	bne.w	800f91a <_dtoa_r+0x6da>
 800fa3a:	2001      	movs	r0, #1
 800fa3c:	e775      	b.n	800f92a <_dtoa_r+0x6ea>
 800fa3e:	2300      	movs	r3, #0
 800fa40:	e7f6      	b.n	800fa30 <_dtoa_r+0x7f0>
 800fa42:	9b02      	ldr	r3, [sp, #8]
 800fa44:	e7f4      	b.n	800fa30 <_dtoa_r+0x7f0>
 800fa46:	9209      	str	r2, [sp, #36]	; 0x24
 800fa48:	e7f3      	b.n	800fa32 <_dtoa_r+0x7f2>
 800fa4a:	d082      	beq.n	800f952 <_dtoa_r+0x712>
 800fa4c:	9b04      	ldr	r3, [sp, #16]
 800fa4e:	321c      	adds	r2, #28
 800fa50:	4413      	add	r3, r2
 800fa52:	9304      	str	r3, [sp, #16]
 800fa54:	9b05      	ldr	r3, [sp, #20]
 800fa56:	4490      	add	r8, r2
 800fa58:	4413      	add	r3, r2
 800fa5a:	e779      	b.n	800f950 <_dtoa_r+0x710>
 800fa5c:	4602      	mov	r2, r0
 800fa5e:	e7f5      	b.n	800fa4c <_dtoa_r+0x80c>
 800fa60:	f1b9 0f00 	cmp.w	r9, #0
 800fa64:	dc36      	bgt.n	800fad4 <_dtoa_r+0x894>
 800fa66:	9b06      	ldr	r3, [sp, #24]
 800fa68:	2b02      	cmp	r3, #2
 800fa6a:	dd33      	ble.n	800fad4 <_dtoa_r+0x894>
 800fa6c:	46ca      	mov	sl, r9
 800fa6e:	f1ba 0f00 	cmp.w	sl, #0
 800fa72:	d10d      	bne.n	800fa90 <_dtoa_r+0x850>
 800fa74:	4621      	mov	r1, r4
 800fa76:	4653      	mov	r3, sl
 800fa78:	2205      	movs	r2, #5
 800fa7a:	4630      	mov	r0, r6
 800fa7c:	f000 f9fa 	bl	800fe74 <__multadd>
 800fa80:	4601      	mov	r1, r0
 800fa82:	4604      	mov	r4, r0
 800fa84:	4628      	mov	r0, r5
 800fa86:	f000 fc0f 	bl	80102a8 <__mcmp>
 800fa8a:	2800      	cmp	r0, #0
 800fa8c:	f73f ade4 	bgt.w	800f658 <_dtoa_r+0x418>
 800fa90:	9b08      	ldr	r3, [sp, #32]
 800fa92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fa96:	ea6f 0b03 	mvn.w	fp, r3
 800fa9a:	f04f 0900 	mov.w	r9, #0
 800fa9e:	4621      	mov	r1, r4
 800faa0:	4630      	mov	r0, r6
 800faa2:	f000 f9c5 	bl	800fe30 <_Bfree>
 800faa6:	2f00      	cmp	r7, #0
 800faa8:	f43f aea1 	beq.w	800f7ee <_dtoa_r+0x5ae>
 800faac:	f1b9 0f00 	cmp.w	r9, #0
 800fab0:	d005      	beq.n	800fabe <_dtoa_r+0x87e>
 800fab2:	45b9      	cmp	r9, r7
 800fab4:	d003      	beq.n	800fabe <_dtoa_r+0x87e>
 800fab6:	4649      	mov	r1, r9
 800fab8:	4630      	mov	r0, r6
 800faba:	f000 f9b9 	bl	800fe30 <_Bfree>
 800fabe:	4639      	mov	r1, r7
 800fac0:	4630      	mov	r0, r6
 800fac2:	f000 f9b5 	bl	800fe30 <_Bfree>
 800fac6:	e692      	b.n	800f7ee <_dtoa_r+0x5ae>
 800fac8:	2400      	movs	r4, #0
 800faca:	4627      	mov	r7, r4
 800facc:	e7e0      	b.n	800fa90 <_dtoa_r+0x850>
 800face:	4693      	mov	fp, r2
 800fad0:	4627      	mov	r7, r4
 800fad2:	e5c1      	b.n	800f658 <_dtoa_r+0x418>
 800fad4:	9b07      	ldr	r3, [sp, #28]
 800fad6:	46ca      	mov	sl, r9
 800fad8:	2b00      	cmp	r3, #0
 800fada:	f000 8100 	beq.w	800fcde <_dtoa_r+0xa9e>
 800fade:	f1b8 0f00 	cmp.w	r8, #0
 800fae2:	dd05      	ble.n	800faf0 <_dtoa_r+0x8b0>
 800fae4:	4639      	mov	r1, r7
 800fae6:	4642      	mov	r2, r8
 800fae8:	4630      	mov	r0, r6
 800faea:	f000 fb71 	bl	80101d0 <__lshift>
 800faee:	4607      	mov	r7, r0
 800faf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d05d      	beq.n	800fbb2 <_dtoa_r+0x972>
 800faf6:	6879      	ldr	r1, [r7, #4]
 800faf8:	4630      	mov	r0, r6
 800fafa:	f000 f959 	bl	800fdb0 <_Balloc>
 800fafe:	4680      	mov	r8, r0
 800fb00:	b928      	cbnz	r0, 800fb0e <_dtoa_r+0x8ce>
 800fb02:	4b82      	ldr	r3, [pc, #520]	; (800fd0c <_dtoa_r+0xacc>)
 800fb04:	4602      	mov	r2, r0
 800fb06:	f240 21ef 	movw	r1, #751	; 0x2ef
 800fb0a:	f7ff bbb1 	b.w	800f270 <_dtoa_r+0x30>
 800fb0e:	693a      	ldr	r2, [r7, #16]
 800fb10:	3202      	adds	r2, #2
 800fb12:	0092      	lsls	r2, r2, #2
 800fb14:	f107 010c 	add.w	r1, r7, #12
 800fb18:	300c      	adds	r0, #12
 800fb1a:	f7ff fafa 	bl	800f112 <memcpy>
 800fb1e:	2201      	movs	r2, #1
 800fb20:	4641      	mov	r1, r8
 800fb22:	4630      	mov	r0, r6
 800fb24:	f000 fb54 	bl	80101d0 <__lshift>
 800fb28:	9b01      	ldr	r3, [sp, #4]
 800fb2a:	3301      	adds	r3, #1
 800fb2c:	9304      	str	r3, [sp, #16]
 800fb2e:	9b01      	ldr	r3, [sp, #4]
 800fb30:	4453      	add	r3, sl
 800fb32:	9308      	str	r3, [sp, #32]
 800fb34:	9b02      	ldr	r3, [sp, #8]
 800fb36:	f003 0301 	and.w	r3, r3, #1
 800fb3a:	46b9      	mov	r9, r7
 800fb3c:	9307      	str	r3, [sp, #28]
 800fb3e:	4607      	mov	r7, r0
 800fb40:	9b04      	ldr	r3, [sp, #16]
 800fb42:	4621      	mov	r1, r4
 800fb44:	3b01      	subs	r3, #1
 800fb46:	4628      	mov	r0, r5
 800fb48:	9302      	str	r3, [sp, #8]
 800fb4a:	f7ff faf0 	bl	800f12e <quorem>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	3330      	adds	r3, #48	; 0x30
 800fb52:	9005      	str	r0, [sp, #20]
 800fb54:	4649      	mov	r1, r9
 800fb56:	4628      	mov	r0, r5
 800fb58:	9309      	str	r3, [sp, #36]	; 0x24
 800fb5a:	f000 fba5 	bl	80102a8 <__mcmp>
 800fb5e:	463a      	mov	r2, r7
 800fb60:	4682      	mov	sl, r0
 800fb62:	4621      	mov	r1, r4
 800fb64:	4630      	mov	r0, r6
 800fb66:	f000 fbbb 	bl	80102e0 <__mdiff>
 800fb6a:	68c2      	ldr	r2, [r0, #12]
 800fb6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb6e:	4680      	mov	r8, r0
 800fb70:	bb0a      	cbnz	r2, 800fbb6 <_dtoa_r+0x976>
 800fb72:	4601      	mov	r1, r0
 800fb74:	4628      	mov	r0, r5
 800fb76:	f000 fb97 	bl	80102a8 <__mcmp>
 800fb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb7c:	4602      	mov	r2, r0
 800fb7e:	4641      	mov	r1, r8
 800fb80:	4630      	mov	r0, r6
 800fb82:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800fb86:	f000 f953 	bl	800fe30 <_Bfree>
 800fb8a:	9b06      	ldr	r3, [sp, #24]
 800fb8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb8e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fb92:	ea43 0102 	orr.w	r1, r3, r2
 800fb96:	9b07      	ldr	r3, [sp, #28]
 800fb98:	4319      	orrs	r1, r3
 800fb9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb9c:	d10d      	bne.n	800fbba <_dtoa_r+0x97a>
 800fb9e:	2b39      	cmp	r3, #57	; 0x39
 800fba0:	d029      	beq.n	800fbf6 <_dtoa_r+0x9b6>
 800fba2:	f1ba 0f00 	cmp.w	sl, #0
 800fba6:	dd01      	ble.n	800fbac <_dtoa_r+0x96c>
 800fba8:	9b05      	ldr	r3, [sp, #20]
 800fbaa:	3331      	adds	r3, #49	; 0x31
 800fbac:	9a02      	ldr	r2, [sp, #8]
 800fbae:	7013      	strb	r3, [r2, #0]
 800fbb0:	e775      	b.n	800fa9e <_dtoa_r+0x85e>
 800fbb2:	4638      	mov	r0, r7
 800fbb4:	e7b8      	b.n	800fb28 <_dtoa_r+0x8e8>
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	e7e1      	b.n	800fb7e <_dtoa_r+0x93e>
 800fbba:	f1ba 0f00 	cmp.w	sl, #0
 800fbbe:	db06      	blt.n	800fbce <_dtoa_r+0x98e>
 800fbc0:	9906      	ldr	r1, [sp, #24]
 800fbc2:	ea41 0a0a 	orr.w	sl, r1, sl
 800fbc6:	9907      	ldr	r1, [sp, #28]
 800fbc8:	ea5a 0a01 	orrs.w	sl, sl, r1
 800fbcc:	d120      	bne.n	800fc10 <_dtoa_r+0x9d0>
 800fbce:	2a00      	cmp	r2, #0
 800fbd0:	ddec      	ble.n	800fbac <_dtoa_r+0x96c>
 800fbd2:	4629      	mov	r1, r5
 800fbd4:	2201      	movs	r2, #1
 800fbd6:	4630      	mov	r0, r6
 800fbd8:	9304      	str	r3, [sp, #16]
 800fbda:	f000 faf9 	bl	80101d0 <__lshift>
 800fbde:	4621      	mov	r1, r4
 800fbe0:	4605      	mov	r5, r0
 800fbe2:	f000 fb61 	bl	80102a8 <__mcmp>
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	9b04      	ldr	r3, [sp, #16]
 800fbea:	dc02      	bgt.n	800fbf2 <_dtoa_r+0x9b2>
 800fbec:	d1de      	bne.n	800fbac <_dtoa_r+0x96c>
 800fbee:	07da      	lsls	r2, r3, #31
 800fbf0:	d5dc      	bpl.n	800fbac <_dtoa_r+0x96c>
 800fbf2:	2b39      	cmp	r3, #57	; 0x39
 800fbf4:	d1d8      	bne.n	800fba8 <_dtoa_r+0x968>
 800fbf6:	9a02      	ldr	r2, [sp, #8]
 800fbf8:	2339      	movs	r3, #57	; 0x39
 800fbfa:	7013      	strb	r3, [r2, #0]
 800fbfc:	4643      	mov	r3, r8
 800fbfe:	4698      	mov	r8, r3
 800fc00:	3b01      	subs	r3, #1
 800fc02:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800fc06:	2a39      	cmp	r2, #57	; 0x39
 800fc08:	d051      	beq.n	800fcae <_dtoa_r+0xa6e>
 800fc0a:	3201      	adds	r2, #1
 800fc0c:	701a      	strb	r2, [r3, #0]
 800fc0e:	e746      	b.n	800fa9e <_dtoa_r+0x85e>
 800fc10:	2a00      	cmp	r2, #0
 800fc12:	dd03      	ble.n	800fc1c <_dtoa_r+0x9dc>
 800fc14:	2b39      	cmp	r3, #57	; 0x39
 800fc16:	d0ee      	beq.n	800fbf6 <_dtoa_r+0x9b6>
 800fc18:	3301      	adds	r3, #1
 800fc1a:	e7c7      	b.n	800fbac <_dtoa_r+0x96c>
 800fc1c:	9a04      	ldr	r2, [sp, #16]
 800fc1e:	9908      	ldr	r1, [sp, #32]
 800fc20:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fc24:	428a      	cmp	r2, r1
 800fc26:	d02b      	beq.n	800fc80 <_dtoa_r+0xa40>
 800fc28:	4629      	mov	r1, r5
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	220a      	movs	r2, #10
 800fc2e:	4630      	mov	r0, r6
 800fc30:	f000 f920 	bl	800fe74 <__multadd>
 800fc34:	45b9      	cmp	r9, r7
 800fc36:	4605      	mov	r5, r0
 800fc38:	f04f 0300 	mov.w	r3, #0
 800fc3c:	f04f 020a 	mov.w	r2, #10
 800fc40:	4649      	mov	r1, r9
 800fc42:	4630      	mov	r0, r6
 800fc44:	d107      	bne.n	800fc56 <_dtoa_r+0xa16>
 800fc46:	f000 f915 	bl	800fe74 <__multadd>
 800fc4a:	4681      	mov	r9, r0
 800fc4c:	4607      	mov	r7, r0
 800fc4e:	9b04      	ldr	r3, [sp, #16]
 800fc50:	3301      	adds	r3, #1
 800fc52:	9304      	str	r3, [sp, #16]
 800fc54:	e774      	b.n	800fb40 <_dtoa_r+0x900>
 800fc56:	f000 f90d 	bl	800fe74 <__multadd>
 800fc5a:	4639      	mov	r1, r7
 800fc5c:	4681      	mov	r9, r0
 800fc5e:	2300      	movs	r3, #0
 800fc60:	220a      	movs	r2, #10
 800fc62:	4630      	mov	r0, r6
 800fc64:	f000 f906 	bl	800fe74 <__multadd>
 800fc68:	4607      	mov	r7, r0
 800fc6a:	e7f0      	b.n	800fc4e <_dtoa_r+0xa0e>
 800fc6c:	f1ba 0f00 	cmp.w	sl, #0
 800fc70:	9a01      	ldr	r2, [sp, #4]
 800fc72:	bfcc      	ite	gt
 800fc74:	46d0      	movgt	r8, sl
 800fc76:	f04f 0801 	movle.w	r8, #1
 800fc7a:	4490      	add	r8, r2
 800fc7c:	f04f 0900 	mov.w	r9, #0
 800fc80:	4629      	mov	r1, r5
 800fc82:	2201      	movs	r2, #1
 800fc84:	4630      	mov	r0, r6
 800fc86:	9302      	str	r3, [sp, #8]
 800fc88:	f000 faa2 	bl	80101d0 <__lshift>
 800fc8c:	4621      	mov	r1, r4
 800fc8e:	4605      	mov	r5, r0
 800fc90:	f000 fb0a 	bl	80102a8 <__mcmp>
 800fc94:	2800      	cmp	r0, #0
 800fc96:	dcb1      	bgt.n	800fbfc <_dtoa_r+0x9bc>
 800fc98:	d102      	bne.n	800fca0 <_dtoa_r+0xa60>
 800fc9a:	9b02      	ldr	r3, [sp, #8]
 800fc9c:	07db      	lsls	r3, r3, #31
 800fc9e:	d4ad      	bmi.n	800fbfc <_dtoa_r+0x9bc>
 800fca0:	4643      	mov	r3, r8
 800fca2:	4698      	mov	r8, r3
 800fca4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fca8:	2a30      	cmp	r2, #48	; 0x30
 800fcaa:	d0fa      	beq.n	800fca2 <_dtoa_r+0xa62>
 800fcac:	e6f7      	b.n	800fa9e <_dtoa_r+0x85e>
 800fcae:	9a01      	ldr	r2, [sp, #4]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d1a4      	bne.n	800fbfe <_dtoa_r+0x9be>
 800fcb4:	f10b 0b01 	add.w	fp, fp, #1
 800fcb8:	2331      	movs	r3, #49	; 0x31
 800fcba:	e778      	b.n	800fbae <_dtoa_r+0x96e>
 800fcbc:	4b14      	ldr	r3, [pc, #80]	; (800fd10 <_dtoa_r+0xad0>)
 800fcbe:	f7ff bb2a 	b.w	800f316 <_dtoa_r+0xd6>
 800fcc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	f47f ab05 	bne.w	800f2d4 <_dtoa_r+0x94>
 800fcca:	4b12      	ldr	r3, [pc, #72]	; (800fd14 <_dtoa_r+0xad4>)
 800fccc:	f7ff bb23 	b.w	800f316 <_dtoa_r+0xd6>
 800fcd0:	f1ba 0f00 	cmp.w	sl, #0
 800fcd4:	dc03      	bgt.n	800fcde <_dtoa_r+0xa9e>
 800fcd6:	9b06      	ldr	r3, [sp, #24]
 800fcd8:	2b02      	cmp	r3, #2
 800fcda:	f73f aec8 	bgt.w	800fa6e <_dtoa_r+0x82e>
 800fcde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fce2:	4621      	mov	r1, r4
 800fce4:	4628      	mov	r0, r5
 800fce6:	f7ff fa22 	bl	800f12e <quorem>
 800fcea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fcee:	f808 3b01 	strb.w	r3, [r8], #1
 800fcf2:	9a01      	ldr	r2, [sp, #4]
 800fcf4:	eba8 0202 	sub.w	r2, r8, r2
 800fcf8:	4592      	cmp	sl, r2
 800fcfa:	ddb7      	ble.n	800fc6c <_dtoa_r+0xa2c>
 800fcfc:	4629      	mov	r1, r5
 800fcfe:	2300      	movs	r3, #0
 800fd00:	220a      	movs	r2, #10
 800fd02:	4630      	mov	r0, r6
 800fd04:	f000 f8b6 	bl	800fe74 <__multadd>
 800fd08:	4605      	mov	r5, r0
 800fd0a:	e7ea      	b.n	800fce2 <_dtoa_r+0xaa2>
 800fd0c:	0801dcba 	.word	0x0801dcba
 800fd10:	080116b9 	.word	0x080116b9
 800fd14:	0801dc3e 	.word	0x0801dc3e

0800fd18 <_free_r>:
 800fd18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd1a:	2900      	cmp	r1, #0
 800fd1c:	d044      	beq.n	800fda8 <_free_r+0x90>
 800fd1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd22:	9001      	str	r0, [sp, #4]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f1a1 0404 	sub.w	r4, r1, #4
 800fd2a:	bfb8      	it	lt
 800fd2c:	18e4      	addlt	r4, r4, r3
 800fd2e:	f7fe fc01 	bl	800e534 <__malloc_lock>
 800fd32:	4a1e      	ldr	r2, [pc, #120]	; (800fdac <_free_r+0x94>)
 800fd34:	9801      	ldr	r0, [sp, #4]
 800fd36:	6813      	ldr	r3, [r2, #0]
 800fd38:	b933      	cbnz	r3, 800fd48 <_free_r+0x30>
 800fd3a:	6063      	str	r3, [r4, #4]
 800fd3c:	6014      	str	r4, [r2, #0]
 800fd3e:	b003      	add	sp, #12
 800fd40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd44:	f7fe bbfc 	b.w	800e540 <__malloc_unlock>
 800fd48:	42a3      	cmp	r3, r4
 800fd4a:	d908      	bls.n	800fd5e <_free_r+0x46>
 800fd4c:	6825      	ldr	r5, [r4, #0]
 800fd4e:	1961      	adds	r1, r4, r5
 800fd50:	428b      	cmp	r3, r1
 800fd52:	bf01      	itttt	eq
 800fd54:	6819      	ldreq	r1, [r3, #0]
 800fd56:	685b      	ldreq	r3, [r3, #4]
 800fd58:	1949      	addeq	r1, r1, r5
 800fd5a:	6021      	streq	r1, [r4, #0]
 800fd5c:	e7ed      	b.n	800fd3a <_free_r+0x22>
 800fd5e:	461a      	mov	r2, r3
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	b10b      	cbz	r3, 800fd68 <_free_r+0x50>
 800fd64:	42a3      	cmp	r3, r4
 800fd66:	d9fa      	bls.n	800fd5e <_free_r+0x46>
 800fd68:	6811      	ldr	r1, [r2, #0]
 800fd6a:	1855      	adds	r5, r2, r1
 800fd6c:	42a5      	cmp	r5, r4
 800fd6e:	d10b      	bne.n	800fd88 <_free_r+0x70>
 800fd70:	6824      	ldr	r4, [r4, #0]
 800fd72:	4421      	add	r1, r4
 800fd74:	1854      	adds	r4, r2, r1
 800fd76:	42a3      	cmp	r3, r4
 800fd78:	6011      	str	r1, [r2, #0]
 800fd7a:	d1e0      	bne.n	800fd3e <_free_r+0x26>
 800fd7c:	681c      	ldr	r4, [r3, #0]
 800fd7e:	685b      	ldr	r3, [r3, #4]
 800fd80:	6053      	str	r3, [r2, #4]
 800fd82:	440c      	add	r4, r1
 800fd84:	6014      	str	r4, [r2, #0]
 800fd86:	e7da      	b.n	800fd3e <_free_r+0x26>
 800fd88:	d902      	bls.n	800fd90 <_free_r+0x78>
 800fd8a:	230c      	movs	r3, #12
 800fd8c:	6003      	str	r3, [r0, #0]
 800fd8e:	e7d6      	b.n	800fd3e <_free_r+0x26>
 800fd90:	6825      	ldr	r5, [r4, #0]
 800fd92:	1961      	adds	r1, r4, r5
 800fd94:	428b      	cmp	r3, r1
 800fd96:	bf04      	itt	eq
 800fd98:	6819      	ldreq	r1, [r3, #0]
 800fd9a:	685b      	ldreq	r3, [r3, #4]
 800fd9c:	6063      	str	r3, [r4, #4]
 800fd9e:	bf04      	itt	eq
 800fda0:	1949      	addeq	r1, r1, r5
 800fda2:	6021      	streq	r1, [r4, #0]
 800fda4:	6054      	str	r4, [r2, #4]
 800fda6:	e7ca      	b.n	800fd3e <_free_r+0x26>
 800fda8:	b003      	add	sp, #12
 800fdaa:	bd30      	pop	{r4, r5, pc}
 800fdac:	2000ebd8 	.word	0x2000ebd8

0800fdb0 <_Balloc>:
 800fdb0:	b570      	push	{r4, r5, r6, lr}
 800fdb2:	69c6      	ldr	r6, [r0, #28]
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	460d      	mov	r5, r1
 800fdb8:	b976      	cbnz	r6, 800fdd8 <_Balloc+0x28>
 800fdba:	2010      	movs	r0, #16
 800fdbc:	f7f2 fd5c 	bl	8002878 <__wrap_malloc>
 800fdc0:	4602      	mov	r2, r0
 800fdc2:	61e0      	str	r0, [r4, #28]
 800fdc4:	b920      	cbnz	r0, 800fdd0 <_Balloc+0x20>
 800fdc6:	4b18      	ldr	r3, [pc, #96]	; (800fe28 <_Balloc+0x78>)
 800fdc8:	4818      	ldr	r0, [pc, #96]	; (800fe2c <_Balloc+0x7c>)
 800fdca:	216b      	movs	r1, #107	; 0x6b
 800fdcc:	f000 fc1a 	bl	8010604 <__assert_func>
 800fdd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdd4:	6006      	str	r6, [r0, #0]
 800fdd6:	60c6      	str	r6, [r0, #12]
 800fdd8:	69e6      	ldr	r6, [r4, #28]
 800fdda:	68f3      	ldr	r3, [r6, #12]
 800fddc:	b183      	cbz	r3, 800fe00 <_Balloc+0x50>
 800fdde:	69e3      	ldr	r3, [r4, #28]
 800fde0:	68db      	ldr	r3, [r3, #12]
 800fde2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fde6:	b9b8      	cbnz	r0, 800fe18 <_Balloc+0x68>
 800fde8:	2101      	movs	r1, #1
 800fdea:	fa01 f605 	lsl.w	r6, r1, r5
 800fdee:	1d72      	adds	r2, r6, #5
 800fdf0:	0092      	lsls	r2, r2, #2
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	f000 fc24 	bl	8010640 <_calloc_r>
 800fdf8:	b160      	cbz	r0, 800fe14 <_Balloc+0x64>
 800fdfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fdfe:	e00e      	b.n	800fe1e <_Balloc+0x6e>
 800fe00:	2221      	movs	r2, #33	; 0x21
 800fe02:	2104      	movs	r1, #4
 800fe04:	4620      	mov	r0, r4
 800fe06:	f000 fc1b 	bl	8010640 <_calloc_r>
 800fe0a:	69e3      	ldr	r3, [r4, #28]
 800fe0c:	60f0      	str	r0, [r6, #12]
 800fe0e:	68db      	ldr	r3, [r3, #12]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d1e4      	bne.n	800fdde <_Balloc+0x2e>
 800fe14:	2000      	movs	r0, #0
 800fe16:	bd70      	pop	{r4, r5, r6, pc}
 800fe18:	6802      	ldr	r2, [r0, #0]
 800fe1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe1e:	2300      	movs	r3, #0
 800fe20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe24:	e7f7      	b.n	800fe16 <_Balloc+0x66>
 800fe26:	bf00      	nop
 800fe28:	0801dc4b 	.word	0x0801dc4b
 800fe2c:	0801dccb 	.word	0x0801dccb

0800fe30 <_Bfree>:
 800fe30:	b570      	push	{r4, r5, r6, lr}
 800fe32:	69c6      	ldr	r6, [r0, #28]
 800fe34:	4605      	mov	r5, r0
 800fe36:	460c      	mov	r4, r1
 800fe38:	b976      	cbnz	r6, 800fe58 <_Bfree+0x28>
 800fe3a:	2010      	movs	r0, #16
 800fe3c:	f7f2 fd1c 	bl	8002878 <__wrap_malloc>
 800fe40:	4602      	mov	r2, r0
 800fe42:	61e8      	str	r0, [r5, #28]
 800fe44:	b920      	cbnz	r0, 800fe50 <_Bfree+0x20>
 800fe46:	4b09      	ldr	r3, [pc, #36]	; (800fe6c <_Bfree+0x3c>)
 800fe48:	4809      	ldr	r0, [pc, #36]	; (800fe70 <_Bfree+0x40>)
 800fe4a:	218f      	movs	r1, #143	; 0x8f
 800fe4c:	f000 fbda 	bl	8010604 <__assert_func>
 800fe50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe54:	6006      	str	r6, [r0, #0]
 800fe56:	60c6      	str	r6, [r0, #12]
 800fe58:	b13c      	cbz	r4, 800fe6a <_Bfree+0x3a>
 800fe5a:	69eb      	ldr	r3, [r5, #28]
 800fe5c:	6862      	ldr	r2, [r4, #4]
 800fe5e:	68db      	ldr	r3, [r3, #12]
 800fe60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe64:	6021      	str	r1, [r4, #0]
 800fe66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fe6a:	bd70      	pop	{r4, r5, r6, pc}
 800fe6c:	0801dc4b 	.word	0x0801dc4b
 800fe70:	0801dccb 	.word	0x0801dccb

0800fe74 <__multadd>:
 800fe74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe78:	690d      	ldr	r5, [r1, #16]
 800fe7a:	4607      	mov	r7, r0
 800fe7c:	460c      	mov	r4, r1
 800fe7e:	461e      	mov	r6, r3
 800fe80:	f101 0c14 	add.w	ip, r1, #20
 800fe84:	2000      	movs	r0, #0
 800fe86:	f8dc 3000 	ldr.w	r3, [ip]
 800fe8a:	b299      	uxth	r1, r3
 800fe8c:	fb02 6101 	mla	r1, r2, r1, r6
 800fe90:	0c1e      	lsrs	r6, r3, #16
 800fe92:	0c0b      	lsrs	r3, r1, #16
 800fe94:	fb02 3306 	mla	r3, r2, r6, r3
 800fe98:	b289      	uxth	r1, r1
 800fe9a:	3001      	adds	r0, #1
 800fe9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fea0:	4285      	cmp	r5, r0
 800fea2:	f84c 1b04 	str.w	r1, [ip], #4
 800fea6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800feaa:	dcec      	bgt.n	800fe86 <__multadd+0x12>
 800feac:	b30e      	cbz	r6, 800fef2 <__multadd+0x7e>
 800feae:	68a3      	ldr	r3, [r4, #8]
 800feb0:	42ab      	cmp	r3, r5
 800feb2:	dc19      	bgt.n	800fee8 <__multadd+0x74>
 800feb4:	6861      	ldr	r1, [r4, #4]
 800feb6:	4638      	mov	r0, r7
 800feb8:	3101      	adds	r1, #1
 800feba:	f7ff ff79 	bl	800fdb0 <_Balloc>
 800febe:	4680      	mov	r8, r0
 800fec0:	b928      	cbnz	r0, 800fece <__multadd+0x5a>
 800fec2:	4602      	mov	r2, r0
 800fec4:	4b0c      	ldr	r3, [pc, #48]	; (800fef8 <__multadd+0x84>)
 800fec6:	480d      	ldr	r0, [pc, #52]	; (800fefc <__multadd+0x88>)
 800fec8:	21ba      	movs	r1, #186	; 0xba
 800feca:	f000 fb9b 	bl	8010604 <__assert_func>
 800fece:	6922      	ldr	r2, [r4, #16]
 800fed0:	3202      	adds	r2, #2
 800fed2:	f104 010c 	add.w	r1, r4, #12
 800fed6:	0092      	lsls	r2, r2, #2
 800fed8:	300c      	adds	r0, #12
 800feda:	f7ff f91a 	bl	800f112 <memcpy>
 800fede:	4621      	mov	r1, r4
 800fee0:	4638      	mov	r0, r7
 800fee2:	f7ff ffa5 	bl	800fe30 <_Bfree>
 800fee6:	4644      	mov	r4, r8
 800fee8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800feec:	3501      	adds	r5, #1
 800feee:	615e      	str	r6, [r3, #20]
 800fef0:	6125      	str	r5, [r4, #16]
 800fef2:	4620      	mov	r0, r4
 800fef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fef8:	0801dcba 	.word	0x0801dcba
 800fefc:	0801dccb 	.word	0x0801dccb

0800ff00 <__hi0bits>:
 800ff00:	0c03      	lsrs	r3, r0, #16
 800ff02:	041b      	lsls	r3, r3, #16
 800ff04:	b9d3      	cbnz	r3, 800ff3c <__hi0bits+0x3c>
 800ff06:	0400      	lsls	r0, r0, #16
 800ff08:	2310      	movs	r3, #16
 800ff0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ff0e:	bf04      	itt	eq
 800ff10:	0200      	lsleq	r0, r0, #8
 800ff12:	3308      	addeq	r3, #8
 800ff14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ff18:	bf04      	itt	eq
 800ff1a:	0100      	lsleq	r0, r0, #4
 800ff1c:	3304      	addeq	r3, #4
 800ff1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ff22:	bf04      	itt	eq
 800ff24:	0080      	lsleq	r0, r0, #2
 800ff26:	3302      	addeq	r3, #2
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	db05      	blt.n	800ff38 <__hi0bits+0x38>
 800ff2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ff30:	f103 0301 	add.w	r3, r3, #1
 800ff34:	bf08      	it	eq
 800ff36:	2320      	moveq	r3, #32
 800ff38:	4618      	mov	r0, r3
 800ff3a:	4770      	bx	lr
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	e7e4      	b.n	800ff0a <__hi0bits+0xa>

0800ff40 <__lo0bits>:
 800ff40:	6803      	ldr	r3, [r0, #0]
 800ff42:	f013 0207 	ands.w	r2, r3, #7
 800ff46:	d00c      	beq.n	800ff62 <__lo0bits+0x22>
 800ff48:	07d9      	lsls	r1, r3, #31
 800ff4a:	d422      	bmi.n	800ff92 <__lo0bits+0x52>
 800ff4c:	079a      	lsls	r2, r3, #30
 800ff4e:	bf49      	itett	mi
 800ff50:	085b      	lsrmi	r3, r3, #1
 800ff52:	089b      	lsrpl	r3, r3, #2
 800ff54:	6003      	strmi	r3, [r0, #0]
 800ff56:	2201      	movmi	r2, #1
 800ff58:	bf5c      	itt	pl
 800ff5a:	6003      	strpl	r3, [r0, #0]
 800ff5c:	2202      	movpl	r2, #2
 800ff5e:	4610      	mov	r0, r2
 800ff60:	4770      	bx	lr
 800ff62:	b299      	uxth	r1, r3
 800ff64:	b909      	cbnz	r1, 800ff6a <__lo0bits+0x2a>
 800ff66:	0c1b      	lsrs	r3, r3, #16
 800ff68:	2210      	movs	r2, #16
 800ff6a:	b2d9      	uxtb	r1, r3
 800ff6c:	b909      	cbnz	r1, 800ff72 <__lo0bits+0x32>
 800ff6e:	3208      	adds	r2, #8
 800ff70:	0a1b      	lsrs	r3, r3, #8
 800ff72:	0719      	lsls	r1, r3, #28
 800ff74:	bf04      	itt	eq
 800ff76:	091b      	lsreq	r3, r3, #4
 800ff78:	3204      	addeq	r2, #4
 800ff7a:	0799      	lsls	r1, r3, #30
 800ff7c:	bf04      	itt	eq
 800ff7e:	089b      	lsreq	r3, r3, #2
 800ff80:	3202      	addeq	r2, #2
 800ff82:	07d9      	lsls	r1, r3, #31
 800ff84:	d403      	bmi.n	800ff8e <__lo0bits+0x4e>
 800ff86:	085b      	lsrs	r3, r3, #1
 800ff88:	f102 0201 	add.w	r2, r2, #1
 800ff8c:	d003      	beq.n	800ff96 <__lo0bits+0x56>
 800ff8e:	6003      	str	r3, [r0, #0]
 800ff90:	e7e5      	b.n	800ff5e <__lo0bits+0x1e>
 800ff92:	2200      	movs	r2, #0
 800ff94:	e7e3      	b.n	800ff5e <__lo0bits+0x1e>
 800ff96:	2220      	movs	r2, #32
 800ff98:	e7e1      	b.n	800ff5e <__lo0bits+0x1e>
	...

0800ff9c <__i2b>:
 800ff9c:	b510      	push	{r4, lr}
 800ff9e:	460c      	mov	r4, r1
 800ffa0:	2101      	movs	r1, #1
 800ffa2:	f7ff ff05 	bl	800fdb0 <_Balloc>
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	b928      	cbnz	r0, 800ffb6 <__i2b+0x1a>
 800ffaa:	4b05      	ldr	r3, [pc, #20]	; (800ffc0 <__i2b+0x24>)
 800ffac:	4805      	ldr	r0, [pc, #20]	; (800ffc4 <__i2b+0x28>)
 800ffae:	f240 1145 	movw	r1, #325	; 0x145
 800ffb2:	f000 fb27 	bl	8010604 <__assert_func>
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	6144      	str	r4, [r0, #20]
 800ffba:	6103      	str	r3, [r0, #16]
 800ffbc:	bd10      	pop	{r4, pc}
 800ffbe:	bf00      	nop
 800ffc0:	0801dcba 	.word	0x0801dcba
 800ffc4:	0801dccb 	.word	0x0801dccb

0800ffc8 <__multiply>:
 800ffc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffcc:	4691      	mov	r9, r2
 800ffce:	690a      	ldr	r2, [r1, #16]
 800ffd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	bfb8      	it	lt
 800ffd8:	460b      	movlt	r3, r1
 800ffda:	460c      	mov	r4, r1
 800ffdc:	bfbc      	itt	lt
 800ffde:	464c      	movlt	r4, r9
 800ffe0:	4699      	movlt	r9, r3
 800ffe2:	6927      	ldr	r7, [r4, #16]
 800ffe4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ffe8:	68a3      	ldr	r3, [r4, #8]
 800ffea:	6861      	ldr	r1, [r4, #4]
 800ffec:	eb07 060a 	add.w	r6, r7, sl
 800fff0:	42b3      	cmp	r3, r6
 800fff2:	b085      	sub	sp, #20
 800fff4:	bfb8      	it	lt
 800fff6:	3101      	addlt	r1, #1
 800fff8:	f7ff feda 	bl	800fdb0 <_Balloc>
 800fffc:	b930      	cbnz	r0, 801000c <__multiply+0x44>
 800fffe:	4602      	mov	r2, r0
 8010000:	4b44      	ldr	r3, [pc, #272]	; (8010114 <__multiply+0x14c>)
 8010002:	4845      	ldr	r0, [pc, #276]	; (8010118 <__multiply+0x150>)
 8010004:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010008:	f000 fafc 	bl	8010604 <__assert_func>
 801000c:	f100 0514 	add.w	r5, r0, #20
 8010010:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010014:	462b      	mov	r3, r5
 8010016:	2200      	movs	r2, #0
 8010018:	4543      	cmp	r3, r8
 801001a:	d321      	bcc.n	8010060 <__multiply+0x98>
 801001c:	f104 0314 	add.w	r3, r4, #20
 8010020:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010024:	f109 0314 	add.w	r3, r9, #20
 8010028:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801002c:	9202      	str	r2, [sp, #8]
 801002e:	1b3a      	subs	r2, r7, r4
 8010030:	3a15      	subs	r2, #21
 8010032:	f022 0203 	bic.w	r2, r2, #3
 8010036:	3204      	adds	r2, #4
 8010038:	f104 0115 	add.w	r1, r4, #21
 801003c:	428f      	cmp	r7, r1
 801003e:	bf38      	it	cc
 8010040:	2204      	movcc	r2, #4
 8010042:	9201      	str	r2, [sp, #4]
 8010044:	9a02      	ldr	r2, [sp, #8]
 8010046:	9303      	str	r3, [sp, #12]
 8010048:	429a      	cmp	r2, r3
 801004a:	d80c      	bhi.n	8010066 <__multiply+0x9e>
 801004c:	2e00      	cmp	r6, #0
 801004e:	dd03      	ble.n	8010058 <__multiply+0x90>
 8010050:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010054:	2b00      	cmp	r3, #0
 8010056:	d05b      	beq.n	8010110 <__multiply+0x148>
 8010058:	6106      	str	r6, [r0, #16]
 801005a:	b005      	add	sp, #20
 801005c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010060:	f843 2b04 	str.w	r2, [r3], #4
 8010064:	e7d8      	b.n	8010018 <__multiply+0x50>
 8010066:	f8b3 a000 	ldrh.w	sl, [r3]
 801006a:	f1ba 0f00 	cmp.w	sl, #0
 801006e:	d024      	beq.n	80100ba <__multiply+0xf2>
 8010070:	f104 0e14 	add.w	lr, r4, #20
 8010074:	46a9      	mov	r9, r5
 8010076:	f04f 0c00 	mov.w	ip, #0
 801007a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801007e:	f8d9 1000 	ldr.w	r1, [r9]
 8010082:	fa1f fb82 	uxth.w	fp, r2
 8010086:	b289      	uxth	r1, r1
 8010088:	fb0a 110b 	mla	r1, sl, fp, r1
 801008c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010090:	f8d9 2000 	ldr.w	r2, [r9]
 8010094:	4461      	add	r1, ip
 8010096:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801009a:	fb0a c20b 	mla	r2, sl, fp, ip
 801009e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80100a2:	b289      	uxth	r1, r1
 80100a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80100a8:	4577      	cmp	r7, lr
 80100aa:	f849 1b04 	str.w	r1, [r9], #4
 80100ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80100b2:	d8e2      	bhi.n	801007a <__multiply+0xb2>
 80100b4:	9a01      	ldr	r2, [sp, #4]
 80100b6:	f845 c002 	str.w	ip, [r5, r2]
 80100ba:	9a03      	ldr	r2, [sp, #12]
 80100bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80100c0:	3304      	adds	r3, #4
 80100c2:	f1b9 0f00 	cmp.w	r9, #0
 80100c6:	d021      	beq.n	801010c <__multiply+0x144>
 80100c8:	6829      	ldr	r1, [r5, #0]
 80100ca:	f104 0c14 	add.w	ip, r4, #20
 80100ce:	46ae      	mov	lr, r5
 80100d0:	f04f 0a00 	mov.w	sl, #0
 80100d4:	f8bc b000 	ldrh.w	fp, [ip]
 80100d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80100dc:	fb09 220b 	mla	r2, r9, fp, r2
 80100e0:	4452      	add	r2, sl
 80100e2:	b289      	uxth	r1, r1
 80100e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80100e8:	f84e 1b04 	str.w	r1, [lr], #4
 80100ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80100f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80100f4:	f8be 1000 	ldrh.w	r1, [lr]
 80100f8:	fb09 110a 	mla	r1, r9, sl, r1
 80100fc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010100:	4567      	cmp	r7, ip
 8010102:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010106:	d8e5      	bhi.n	80100d4 <__multiply+0x10c>
 8010108:	9a01      	ldr	r2, [sp, #4]
 801010a:	50a9      	str	r1, [r5, r2]
 801010c:	3504      	adds	r5, #4
 801010e:	e799      	b.n	8010044 <__multiply+0x7c>
 8010110:	3e01      	subs	r6, #1
 8010112:	e79b      	b.n	801004c <__multiply+0x84>
 8010114:	0801dcba 	.word	0x0801dcba
 8010118:	0801dccb 	.word	0x0801dccb

0801011c <__pow5mult>:
 801011c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010120:	4615      	mov	r5, r2
 8010122:	f012 0203 	ands.w	r2, r2, #3
 8010126:	4606      	mov	r6, r0
 8010128:	460f      	mov	r7, r1
 801012a:	d007      	beq.n	801013c <__pow5mult+0x20>
 801012c:	4c25      	ldr	r4, [pc, #148]	; (80101c4 <__pow5mult+0xa8>)
 801012e:	3a01      	subs	r2, #1
 8010130:	2300      	movs	r3, #0
 8010132:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010136:	f7ff fe9d 	bl	800fe74 <__multadd>
 801013a:	4607      	mov	r7, r0
 801013c:	10ad      	asrs	r5, r5, #2
 801013e:	d03d      	beq.n	80101bc <__pow5mult+0xa0>
 8010140:	69f4      	ldr	r4, [r6, #28]
 8010142:	b97c      	cbnz	r4, 8010164 <__pow5mult+0x48>
 8010144:	2010      	movs	r0, #16
 8010146:	f7f2 fb97 	bl	8002878 <__wrap_malloc>
 801014a:	4602      	mov	r2, r0
 801014c:	61f0      	str	r0, [r6, #28]
 801014e:	b928      	cbnz	r0, 801015c <__pow5mult+0x40>
 8010150:	4b1d      	ldr	r3, [pc, #116]	; (80101c8 <__pow5mult+0xac>)
 8010152:	481e      	ldr	r0, [pc, #120]	; (80101cc <__pow5mult+0xb0>)
 8010154:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010158:	f000 fa54 	bl	8010604 <__assert_func>
 801015c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010160:	6004      	str	r4, [r0, #0]
 8010162:	60c4      	str	r4, [r0, #12]
 8010164:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010168:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801016c:	b94c      	cbnz	r4, 8010182 <__pow5mult+0x66>
 801016e:	f240 2171 	movw	r1, #625	; 0x271
 8010172:	4630      	mov	r0, r6
 8010174:	f7ff ff12 	bl	800ff9c <__i2b>
 8010178:	2300      	movs	r3, #0
 801017a:	f8c8 0008 	str.w	r0, [r8, #8]
 801017e:	4604      	mov	r4, r0
 8010180:	6003      	str	r3, [r0, #0]
 8010182:	f04f 0900 	mov.w	r9, #0
 8010186:	07eb      	lsls	r3, r5, #31
 8010188:	d50a      	bpl.n	80101a0 <__pow5mult+0x84>
 801018a:	4639      	mov	r1, r7
 801018c:	4622      	mov	r2, r4
 801018e:	4630      	mov	r0, r6
 8010190:	f7ff ff1a 	bl	800ffc8 <__multiply>
 8010194:	4639      	mov	r1, r7
 8010196:	4680      	mov	r8, r0
 8010198:	4630      	mov	r0, r6
 801019a:	f7ff fe49 	bl	800fe30 <_Bfree>
 801019e:	4647      	mov	r7, r8
 80101a0:	106d      	asrs	r5, r5, #1
 80101a2:	d00b      	beq.n	80101bc <__pow5mult+0xa0>
 80101a4:	6820      	ldr	r0, [r4, #0]
 80101a6:	b938      	cbnz	r0, 80101b8 <__pow5mult+0x9c>
 80101a8:	4622      	mov	r2, r4
 80101aa:	4621      	mov	r1, r4
 80101ac:	4630      	mov	r0, r6
 80101ae:	f7ff ff0b 	bl	800ffc8 <__multiply>
 80101b2:	6020      	str	r0, [r4, #0]
 80101b4:	f8c0 9000 	str.w	r9, [r0]
 80101b8:	4604      	mov	r4, r0
 80101ba:	e7e4      	b.n	8010186 <__pow5mult+0x6a>
 80101bc:	4638      	mov	r0, r7
 80101be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101c2:	bf00      	nop
 80101c4:	0801de18 	.word	0x0801de18
 80101c8:	0801dc4b 	.word	0x0801dc4b
 80101cc:	0801dccb 	.word	0x0801dccb

080101d0 <__lshift>:
 80101d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101d4:	460c      	mov	r4, r1
 80101d6:	6849      	ldr	r1, [r1, #4]
 80101d8:	6923      	ldr	r3, [r4, #16]
 80101da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80101de:	68a3      	ldr	r3, [r4, #8]
 80101e0:	4607      	mov	r7, r0
 80101e2:	4691      	mov	r9, r2
 80101e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80101e8:	f108 0601 	add.w	r6, r8, #1
 80101ec:	42b3      	cmp	r3, r6
 80101ee:	db0b      	blt.n	8010208 <__lshift+0x38>
 80101f0:	4638      	mov	r0, r7
 80101f2:	f7ff fddd 	bl	800fdb0 <_Balloc>
 80101f6:	4605      	mov	r5, r0
 80101f8:	b948      	cbnz	r0, 801020e <__lshift+0x3e>
 80101fa:	4602      	mov	r2, r0
 80101fc:	4b28      	ldr	r3, [pc, #160]	; (80102a0 <__lshift+0xd0>)
 80101fe:	4829      	ldr	r0, [pc, #164]	; (80102a4 <__lshift+0xd4>)
 8010200:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010204:	f000 f9fe 	bl	8010604 <__assert_func>
 8010208:	3101      	adds	r1, #1
 801020a:	005b      	lsls	r3, r3, #1
 801020c:	e7ee      	b.n	80101ec <__lshift+0x1c>
 801020e:	2300      	movs	r3, #0
 8010210:	f100 0114 	add.w	r1, r0, #20
 8010214:	f100 0210 	add.w	r2, r0, #16
 8010218:	4618      	mov	r0, r3
 801021a:	4553      	cmp	r3, sl
 801021c:	db33      	blt.n	8010286 <__lshift+0xb6>
 801021e:	6920      	ldr	r0, [r4, #16]
 8010220:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010224:	f104 0314 	add.w	r3, r4, #20
 8010228:	f019 091f 	ands.w	r9, r9, #31
 801022c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010230:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010234:	d02b      	beq.n	801028e <__lshift+0xbe>
 8010236:	f1c9 0e20 	rsb	lr, r9, #32
 801023a:	468a      	mov	sl, r1
 801023c:	2200      	movs	r2, #0
 801023e:	6818      	ldr	r0, [r3, #0]
 8010240:	fa00 f009 	lsl.w	r0, r0, r9
 8010244:	4310      	orrs	r0, r2
 8010246:	f84a 0b04 	str.w	r0, [sl], #4
 801024a:	f853 2b04 	ldr.w	r2, [r3], #4
 801024e:	459c      	cmp	ip, r3
 8010250:	fa22 f20e 	lsr.w	r2, r2, lr
 8010254:	d8f3      	bhi.n	801023e <__lshift+0x6e>
 8010256:	ebac 0304 	sub.w	r3, ip, r4
 801025a:	3b15      	subs	r3, #21
 801025c:	f023 0303 	bic.w	r3, r3, #3
 8010260:	3304      	adds	r3, #4
 8010262:	f104 0015 	add.w	r0, r4, #21
 8010266:	4584      	cmp	ip, r0
 8010268:	bf38      	it	cc
 801026a:	2304      	movcc	r3, #4
 801026c:	50ca      	str	r2, [r1, r3]
 801026e:	b10a      	cbz	r2, 8010274 <__lshift+0xa4>
 8010270:	f108 0602 	add.w	r6, r8, #2
 8010274:	3e01      	subs	r6, #1
 8010276:	4638      	mov	r0, r7
 8010278:	612e      	str	r6, [r5, #16]
 801027a:	4621      	mov	r1, r4
 801027c:	f7ff fdd8 	bl	800fe30 <_Bfree>
 8010280:	4628      	mov	r0, r5
 8010282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010286:	f842 0f04 	str.w	r0, [r2, #4]!
 801028a:	3301      	adds	r3, #1
 801028c:	e7c5      	b.n	801021a <__lshift+0x4a>
 801028e:	3904      	subs	r1, #4
 8010290:	f853 2b04 	ldr.w	r2, [r3], #4
 8010294:	f841 2f04 	str.w	r2, [r1, #4]!
 8010298:	459c      	cmp	ip, r3
 801029a:	d8f9      	bhi.n	8010290 <__lshift+0xc0>
 801029c:	e7ea      	b.n	8010274 <__lshift+0xa4>
 801029e:	bf00      	nop
 80102a0:	0801dcba 	.word	0x0801dcba
 80102a4:	0801dccb 	.word	0x0801dccb

080102a8 <__mcmp>:
 80102a8:	b530      	push	{r4, r5, lr}
 80102aa:	6902      	ldr	r2, [r0, #16]
 80102ac:	690c      	ldr	r4, [r1, #16]
 80102ae:	1b12      	subs	r2, r2, r4
 80102b0:	d10e      	bne.n	80102d0 <__mcmp+0x28>
 80102b2:	f100 0314 	add.w	r3, r0, #20
 80102b6:	3114      	adds	r1, #20
 80102b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80102bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80102c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80102c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80102c8:	42a5      	cmp	r5, r4
 80102ca:	d003      	beq.n	80102d4 <__mcmp+0x2c>
 80102cc:	d305      	bcc.n	80102da <__mcmp+0x32>
 80102ce:	2201      	movs	r2, #1
 80102d0:	4610      	mov	r0, r2
 80102d2:	bd30      	pop	{r4, r5, pc}
 80102d4:	4283      	cmp	r3, r0
 80102d6:	d3f3      	bcc.n	80102c0 <__mcmp+0x18>
 80102d8:	e7fa      	b.n	80102d0 <__mcmp+0x28>
 80102da:	f04f 32ff 	mov.w	r2, #4294967295
 80102de:	e7f7      	b.n	80102d0 <__mcmp+0x28>

080102e0 <__mdiff>:
 80102e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102e4:	460c      	mov	r4, r1
 80102e6:	4606      	mov	r6, r0
 80102e8:	4611      	mov	r1, r2
 80102ea:	4620      	mov	r0, r4
 80102ec:	4690      	mov	r8, r2
 80102ee:	f7ff ffdb 	bl	80102a8 <__mcmp>
 80102f2:	1e05      	subs	r5, r0, #0
 80102f4:	d110      	bne.n	8010318 <__mdiff+0x38>
 80102f6:	4629      	mov	r1, r5
 80102f8:	4630      	mov	r0, r6
 80102fa:	f7ff fd59 	bl	800fdb0 <_Balloc>
 80102fe:	b930      	cbnz	r0, 801030e <__mdiff+0x2e>
 8010300:	4b3a      	ldr	r3, [pc, #232]	; (80103ec <__mdiff+0x10c>)
 8010302:	4602      	mov	r2, r0
 8010304:	f240 2137 	movw	r1, #567	; 0x237
 8010308:	4839      	ldr	r0, [pc, #228]	; (80103f0 <__mdiff+0x110>)
 801030a:	f000 f97b 	bl	8010604 <__assert_func>
 801030e:	2301      	movs	r3, #1
 8010310:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010314:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010318:	bfa4      	itt	ge
 801031a:	4643      	movge	r3, r8
 801031c:	46a0      	movge	r8, r4
 801031e:	4630      	mov	r0, r6
 8010320:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010324:	bfa6      	itte	ge
 8010326:	461c      	movge	r4, r3
 8010328:	2500      	movge	r5, #0
 801032a:	2501      	movlt	r5, #1
 801032c:	f7ff fd40 	bl	800fdb0 <_Balloc>
 8010330:	b920      	cbnz	r0, 801033c <__mdiff+0x5c>
 8010332:	4b2e      	ldr	r3, [pc, #184]	; (80103ec <__mdiff+0x10c>)
 8010334:	4602      	mov	r2, r0
 8010336:	f240 2145 	movw	r1, #581	; 0x245
 801033a:	e7e5      	b.n	8010308 <__mdiff+0x28>
 801033c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010340:	6926      	ldr	r6, [r4, #16]
 8010342:	60c5      	str	r5, [r0, #12]
 8010344:	f104 0914 	add.w	r9, r4, #20
 8010348:	f108 0514 	add.w	r5, r8, #20
 801034c:	f100 0e14 	add.w	lr, r0, #20
 8010350:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010354:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010358:	f108 0210 	add.w	r2, r8, #16
 801035c:	46f2      	mov	sl, lr
 801035e:	2100      	movs	r1, #0
 8010360:	f859 3b04 	ldr.w	r3, [r9], #4
 8010364:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010368:	fa11 f88b 	uxtah	r8, r1, fp
 801036c:	b299      	uxth	r1, r3
 801036e:	0c1b      	lsrs	r3, r3, #16
 8010370:	eba8 0801 	sub.w	r8, r8, r1
 8010374:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010378:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801037c:	fa1f f888 	uxth.w	r8, r8
 8010380:	1419      	asrs	r1, r3, #16
 8010382:	454e      	cmp	r6, r9
 8010384:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010388:	f84a 3b04 	str.w	r3, [sl], #4
 801038c:	d8e8      	bhi.n	8010360 <__mdiff+0x80>
 801038e:	1b33      	subs	r3, r6, r4
 8010390:	3b15      	subs	r3, #21
 8010392:	f023 0303 	bic.w	r3, r3, #3
 8010396:	3304      	adds	r3, #4
 8010398:	3415      	adds	r4, #21
 801039a:	42a6      	cmp	r6, r4
 801039c:	bf38      	it	cc
 801039e:	2304      	movcc	r3, #4
 80103a0:	441d      	add	r5, r3
 80103a2:	4473      	add	r3, lr
 80103a4:	469e      	mov	lr, r3
 80103a6:	462e      	mov	r6, r5
 80103a8:	4566      	cmp	r6, ip
 80103aa:	d30e      	bcc.n	80103ca <__mdiff+0xea>
 80103ac:	f10c 0203 	add.w	r2, ip, #3
 80103b0:	1b52      	subs	r2, r2, r5
 80103b2:	f022 0203 	bic.w	r2, r2, #3
 80103b6:	3d03      	subs	r5, #3
 80103b8:	45ac      	cmp	ip, r5
 80103ba:	bf38      	it	cc
 80103bc:	2200      	movcc	r2, #0
 80103be:	4413      	add	r3, r2
 80103c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80103c4:	b17a      	cbz	r2, 80103e6 <__mdiff+0x106>
 80103c6:	6107      	str	r7, [r0, #16]
 80103c8:	e7a4      	b.n	8010314 <__mdiff+0x34>
 80103ca:	f856 8b04 	ldr.w	r8, [r6], #4
 80103ce:	fa11 f288 	uxtah	r2, r1, r8
 80103d2:	1414      	asrs	r4, r2, #16
 80103d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80103d8:	b292      	uxth	r2, r2
 80103da:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80103de:	f84e 2b04 	str.w	r2, [lr], #4
 80103e2:	1421      	asrs	r1, r4, #16
 80103e4:	e7e0      	b.n	80103a8 <__mdiff+0xc8>
 80103e6:	3f01      	subs	r7, #1
 80103e8:	e7ea      	b.n	80103c0 <__mdiff+0xe0>
 80103ea:	bf00      	nop
 80103ec:	0801dcba 	.word	0x0801dcba
 80103f0:	0801dccb 	.word	0x0801dccb

080103f4 <__d2b>:
 80103f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80103f8:	460f      	mov	r7, r1
 80103fa:	2101      	movs	r1, #1
 80103fc:	ec59 8b10 	vmov	r8, r9, d0
 8010400:	4616      	mov	r6, r2
 8010402:	f7ff fcd5 	bl	800fdb0 <_Balloc>
 8010406:	4604      	mov	r4, r0
 8010408:	b930      	cbnz	r0, 8010418 <__d2b+0x24>
 801040a:	4602      	mov	r2, r0
 801040c:	4b24      	ldr	r3, [pc, #144]	; (80104a0 <__d2b+0xac>)
 801040e:	4825      	ldr	r0, [pc, #148]	; (80104a4 <__d2b+0xb0>)
 8010410:	f240 310f 	movw	r1, #783	; 0x30f
 8010414:	f000 f8f6 	bl	8010604 <__assert_func>
 8010418:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801041c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010420:	bb2d      	cbnz	r5, 801046e <__d2b+0x7a>
 8010422:	9301      	str	r3, [sp, #4]
 8010424:	f1b8 0300 	subs.w	r3, r8, #0
 8010428:	d026      	beq.n	8010478 <__d2b+0x84>
 801042a:	4668      	mov	r0, sp
 801042c:	9300      	str	r3, [sp, #0]
 801042e:	f7ff fd87 	bl	800ff40 <__lo0bits>
 8010432:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010436:	b1e8      	cbz	r0, 8010474 <__d2b+0x80>
 8010438:	f1c0 0320 	rsb	r3, r0, #32
 801043c:	fa02 f303 	lsl.w	r3, r2, r3
 8010440:	430b      	orrs	r3, r1
 8010442:	40c2      	lsrs	r2, r0
 8010444:	6163      	str	r3, [r4, #20]
 8010446:	9201      	str	r2, [sp, #4]
 8010448:	9b01      	ldr	r3, [sp, #4]
 801044a:	61a3      	str	r3, [r4, #24]
 801044c:	2b00      	cmp	r3, #0
 801044e:	bf14      	ite	ne
 8010450:	2202      	movne	r2, #2
 8010452:	2201      	moveq	r2, #1
 8010454:	6122      	str	r2, [r4, #16]
 8010456:	b1bd      	cbz	r5, 8010488 <__d2b+0x94>
 8010458:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801045c:	4405      	add	r5, r0
 801045e:	603d      	str	r5, [r7, #0]
 8010460:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010464:	6030      	str	r0, [r6, #0]
 8010466:	4620      	mov	r0, r4
 8010468:	b003      	add	sp, #12
 801046a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801046e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010472:	e7d6      	b.n	8010422 <__d2b+0x2e>
 8010474:	6161      	str	r1, [r4, #20]
 8010476:	e7e7      	b.n	8010448 <__d2b+0x54>
 8010478:	a801      	add	r0, sp, #4
 801047a:	f7ff fd61 	bl	800ff40 <__lo0bits>
 801047e:	9b01      	ldr	r3, [sp, #4]
 8010480:	6163      	str	r3, [r4, #20]
 8010482:	3020      	adds	r0, #32
 8010484:	2201      	movs	r2, #1
 8010486:	e7e5      	b.n	8010454 <__d2b+0x60>
 8010488:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801048c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010490:	6038      	str	r0, [r7, #0]
 8010492:	6918      	ldr	r0, [r3, #16]
 8010494:	f7ff fd34 	bl	800ff00 <__hi0bits>
 8010498:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801049c:	e7e2      	b.n	8010464 <__d2b+0x70>
 801049e:	bf00      	nop
 80104a0:	0801dcba 	.word	0x0801dcba
 80104a4:	0801dccb 	.word	0x0801dccb

080104a8 <__sflush_r>:
 80104a8:	898a      	ldrh	r2, [r1, #12]
 80104aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104ae:	4605      	mov	r5, r0
 80104b0:	0710      	lsls	r0, r2, #28
 80104b2:	460c      	mov	r4, r1
 80104b4:	d458      	bmi.n	8010568 <__sflush_r+0xc0>
 80104b6:	684b      	ldr	r3, [r1, #4]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	dc05      	bgt.n	80104c8 <__sflush_r+0x20>
 80104bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80104be:	2b00      	cmp	r3, #0
 80104c0:	dc02      	bgt.n	80104c8 <__sflush_r+0x20>
 80104c2:	2000      	movs	r0, #0
 80104c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104ca:	2e00      	cmp	r6, #0
 80104cc:	d0f9      	beq.n	80104c2 <__sflush_r+0x1a>
 80104ce:	2300      	movs	r3, #0
 80104d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80104d4:	682f      	ldr	r7, [r5, #0]
 80104d6:	6a21      	ldr	r1, [r4, #32]
 80104d8:	602b      	str	r3, [r5, #0]
 80104da:	d032      	beq.n	8010542 <__sflush_r+0x9a>
 80104dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80104de:	89a3      	ldrh	r3, [r4, #12]
 80104e0:	075a      	lsls	r2, r3, #29
 80104e2:	d505      	bpl.n	80104f0 <__sflush_r+0x48>
 80104e4:	6863      	ldr	r3, [r4, #4]
 80104e6:	1ac0      	subs	r0, r0, r3
 80104e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104ea:	b10b      	cbz	r3, 80104f0 <__sflush_r+0x48>
 80104ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104ee:	1ac0      	subs	r0, r0, r3
 80104f0:	2300      	movs	r3, #0
 80104f2:	4602      	mov	r2, r0
 80104f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104f6:	6a21      	ldr	r1, [r4, #32]
 80104f8:	4628      	mov	r0, r5
 80104fa:	47b0      	blx	r6
 80104fc:	1c43      	adds	r3, r0, #1
 80104fe:	89a3      	ldrh	r3, [r4, #12]
 8010500:	d106      	bne.n	8010510 <__sflush_r+0x68>
 8010502:	6829      	ldr	r1, [r5, #0]
 8010504:	291d      	cmp	r1, #29
 8010506:	d82b      	bhi.n	8010560 <__sflush_r+0xb8>
 8010508:	4a29      	ldr	r2, [pc, #164]	; (80105b0 <__sflush_r+0x108>)
 801050a:	410a      	asrs	r2, r1
 801050c:	07d6      	lsls	r6, r2, #31
 801050e:	d427      	bmi.n	8010560 <__sflush_r+0xb8>
 8010510:	2200      	movs	r2, #0
 8010512:	6062      	str	r2, [r4, #4]
 8010514:	04d9      	lsls	r1, r3, #19
 8010516:	6922      	ldr	r2, [r4, #16]
 8010518:	6022      	str	r2, [r4, #0]
 801051a:	d504      	bpl.n	8010526 <__sflush_r+0x7e>
 801051c:	1c42      	adds	r2, r0, #1
 801051e:	d101      	bne.n	8010524 <__sflush_r+0x7c>
 8010520:	682b      	ldr	r3, [r5, #0]
 8010522:	b903      	cbnz	r3, 8010526 <__sflush_r+0x7e>
 8010524:	6560      	str	r0, [r4, #84]	; 0x54
 8010526:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010528:	602f      	str	r7, [r5, #0]
 801052a:	2900      	cmp	r1, #0
 801052c:	d0c9      	beq.n	80104c2 <__sflush_r+0x1a>
 801052e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010532:	4299      	cmp	r1, r3
 8010534:	d002      	beq.n	801053c <__sflush_r+0x94>
 8010536:	4628      	mov	r0, r5
 8010538:	f7ff fbee 	bl	800fd18 <_free_r>
 801053c:	2000      	movs	r0, #0
 801053e:	6360      	str	r0, [r4, #52]	; 0x34
 8010540:	e7c0      	b.n	80104c4 <__sflush_r+0x1c>
 8010542:	2301      	movs	r3, #1
 8010544:	4628      	mov	r0, r5
 8010546:	47b0      	blx	r6
 8010548:	1c41      	adds	r1, r0, #1
 801054a:	d1c8      	bne.n	80104de <__sflush_r+0x36>
 801054c:	682b      	ldr	r3, [r5, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d0c5      	beq.n	80104de <__sflush_r+0x36>
 8010552:	2b1d      	cmp	r3, #29
 8010554:	d001      	beq.n	801055a <__sflush_r+0xb2>
 8010556:	2b16      	cmp	r3, #22
 8010558:	d101      	bne.n	801055e <__sflush_r+0xb6>
 801055a:	602f      	str	r7, [r5, #0]
 801055c:	e7b1      	b.n	80104c2 <__sflush_r+0x1a>
 801055e:	89a3      	ldrh	r3, [r4, #12]
 8010560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010564:	81a3      	strh	r3, [r4, #12]
 8010566:	e7ad      	b.n	80104c4 <__sflush_r+0x1c>
 8010568:	690f      	ldr	r7, [r1, #16]
 801056a:	2f00      	cmp	r7, #0
 801056c:	d0a9      	beq.n	80104c2 <__sflush_r+0x1a>
 801056e:	0793      	lsls	r3, r2, #30
 8010570:	680e      	ldr	r6, [r1, #0]
 8010572:	bf08      	it	eq
 8010574:	694b      	ldreq	r3, [r1, #20]
 8010576:	600f      	str	r7, [r1, #0]
 8010578:	bf18      	it	ne
 801057a:	2300      	movne	r3, #0
 801057c:	eba6 0807 	sub.w	r8, r6, r7
 8010580:	608b      	str	r3, [r1, #8]
 8010582:	f1b8 0f00 	cmp.w	r8, #0
 8010586:	dd9c      	ble.n	80104c2 <__sflush_r+0x1a>
 8010588:	6a21      	ldr	r1, [r4, #32]
 801058a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801058c:	4643      	mov	r3, r8
 801058e:	463a      	mov	r2, r7
 8010590:	4628      	mov	r0, r5
 8010592:	47b0      	blx	r6
 8010594:	2800      	cmp	r0, #0
 8010596:	dc06      	bgt.n	80105a6 <__sflush_r+0xfe>
 8010598:	89a3      	ldrh	r3, [r4, #12]
 801059a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801059e:	81a3      	strh	r3, [r4, #12]
 80105a0:	f04f 30ff 	mov.w	r0, #4294967295
 80105a4:	e78e      	b.n	80104c4 <__sflush_r+0x1c>
 80105a6:	4407      	add	r7, r0
 80105a8:	eba8 0800 	sub.w	r8, r8, r0
 80105ac:	e7e9      	b.n	8010582 <__sflush_r+0xda>
 80105ae:	bf00      	nop
 80105b0:	dfbffffe 	.word	0xdfbffffe

080105b4 <_fflush_r>:
 80105b4:	b538      	push	{r3, r4, r5, lr}
 80105b6:	690b      	ldr	r3, [r1, #16]
 80105b8:	4605      	mov	r5, r0
 80105ba:	460c      	mov	r4, r1
 80105bc:	b913      	cbnz	r3, 80105c4 <_fflush_r+0x10>
 80105be:	2500      	movs	r5, #0
 80105c0:	4628      	mov	r0, r5
 80105c2:	bd38      	pop	{r3, r4, r5, pc}
 80105c4:	b118      	cbz	r0, 80105ce <_fflush_r+0x1a>
 80105c6:	6a03      	ldr	r3, [r0, #32]
 80105c8:	b90b      	cbnz	r3, 80105ce <_fflush_r+0x1a>
 80105ca:	f7fe fc87 	bl	800eedc <__sinit>
 80105ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d0f3      	beq.n	80105be <_fflush_r+0xa>
 80105d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80105d8:	07d0      	lsls	r0, r2, #31
 80105da:	d404      	bmi.n	80105e6 <_fflush_r+0x32>
 80105dc:	0599      	lsls	r1, r3, #22
 80105de:	d402      	bmi.n	80105e6 <_fflush_r+0x32>
 80105e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105e2:	f7fe fd94 	bl	800f10e <__retarget_lock_acquire_recursive>
 80105e6:	4628      	mov	r0, r5
 80105e8:	4621      	mov	r1, r4
 80105ea:	f7ff ff5d 	bl	80104a8 <__sflush_r>
 80105ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105f0:	07da      	lsls	r2, r3, #31
 80105f2:	4605      	mov	r5, r0
 80105f4:	d4e4      	bmi.n	80105c0 <_fflush_r+0xc>
 80105f6:	89a3      	ldrh	r3, [r4, #12]
 80105f8:	059b      	lsls	r3, r3, #22
 80105fa:	d4e1      	bmi.n	80105c0 <_fflush_r+0xc>
 80105fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105fe:	f7fe fd87 	bl	800f110 <__retarget_lock_release_recursive>
 8010602:	e7dd      	b.n	80105c0 <_fflush_r+0xc>

08010604 <__assert_func>:
 8010604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010606:	4614      	mov	r4, r2
 8010608:	461a      	mov	r2, r3
 801060a:	4b09      	ldr	r3, [pc, #36]	; (8010630 <__assert_func+0x2c>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	4605      	mov	r5, r0
 8010610:	68d8      	ldr	r0, [r3, #12]
 8010612:	b14c      	cbz	r4, 8010628 <__assert_func+0x24>
 8010614:	4b07      	ldr	r3, [pc, #28]	; (8010634 <__assert_func+0x30>)
 8010616:	9100      	str	r1, [sp, #0]
 8010618:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801061c:	4906      	ldr	r1, [pc, #24]	; (8010638 <__assert_func+0x34>)
 801061e:	462b      	mov	r3, r5
 8010620:	f000 f844 	bl	80106ac <fiprintf>
 8010624:	f000 f854 	bl	80106d0 <abort>
 8010628:	4b04      	ldr	r3, [pc, #16]	; (801063c <__assert_func+0x38>)
 801062a:	461c      	mov	r4, r3
 801062c:	e7f3      	b.n	8010616 <__assert_func+0x12>
 801062e:	bf00      	nop
 8010630:	200040d8 	.word	0x200040d8
 8010634:	0801de2e 	.word	0x0801de2e
 8010638:	0801de3b 	.word	0x0801de3b
 801063c:	0801de69 	.word	0x0801de69

08010640 <_calloc_r>:
 8010640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010642:	fba1 2402 	umull	r2, r4, r1, r2
 8010646:	b94c      	cbnz	r4, 801065c <_calloc_r+0x1c>
 8010648:	4611      	mov	r1, r2
 801064a:	9201      	str	r2, [sp, #4]
 801064c:	f7fd fef2 	bl	800e434 <_malloc_r>
 8010650:	9a01      	ldr	r2, [sp, #4]
 8010652:	4605      	mov	r5, r0
 8010654:	b930      	cbnz	r0, 8010664 <_calloc_r+0x24>
 8010656:	4628      	mov	r0, r5
 8010658:	b003      	add	sp, #12
 801065a:	bd30      	pop	{r4, r5, pc}
 801065c:	220c      	movs	r2, #12
 801065e:	6002      	str	r2, [r0, #0]
 8010660:	2500      	movs	r5, #0
 8010662:	e7f8      	b.n	8010656 <_calloc_r+0x16>
 8010664:	4621      	mov	r1, r4
 8010666:	f7fe fcb2 	bl	800efce <memset>
 801066a:	e7f4      	b.n	8010656 <_calloc_r+0x16>

0801066c <__ascii_mbtowc>:
 801066c:	b082      	sub	sp, #8
 801066e:	b901      	cbnz	r1, 8010672 <__ascii_mbtowc+0x6>
 8010670:	a901      	add	r1, sp, #4
 8010672:	b142      	cbz	r2, 8010686 <__ascii_mbtowc+0x1a>
 8010674:	b14b      	cbz	r3, 801068a <__ascii_mbtowc+0x1e>
 8010676:	7813      	ldrb	r3, [r2, #0]
 8010678:	600b      	str	r3, [r1, #0]
 801067a:	7812      	ldrb	r2, [r2, #0]
 801067c:	1e10      	subs	r0, r2, #0
 801067e:	bf18      	it	ne
 8010680:	2001      	movne	r0, #1
 8010682:	b002      	add	sp, #8
 8010684:	4770      	bx	lr
 8010686:	4610      	mov	r0, r2
 8010688:	e7fb      	b.n	8010682 <__ascii_mbtowc+0x16>
 801068a:	f06f 0001 	mvn.w	r0, #1
 801068e:	e7f8      	b.n	8010682 <__ascii_mbtowc+0x16>

08010690 <__ascii_wctomb>:
 8010690:	b149      	cbz	r1, 80106a6 <__ascii_wctomb+0x16>
 8010692:	2aff      	cmp	r2, #255	; 0xff
 8010694:	bf85      	ittet	hi
 8010696:	238a      	movhi	r3, #138	; 0x8a
 8010698:	6003      	strhi	r3, [r0, #0]
 801069a:	700a      	strbls	r2, [r1, #0]
 801069c:	f04f 30ff 	movhi.w	r0, #4294967295
 80106a0:	bf98      	it	ls
 80106a2:	2001      	movls	r0, #1
 80106a4:	4770      	bx	lr
 80106a6:	4608      	mov	r0, r1
 80106a8:	4770      	bx	lr
	...

080106ac <fiprintf>:
 80106ac:	b40e      	push	{r1, r2, r3}
 80106ae:	b503      	push	{r0, r1, lr}
 80106b0:	4601      	mov	r1, r0
 80106b2:	ab03      	add	r3, sp, #12
 80106b4:	4805      	ldr	r0, [pc, #20]	; (80106cc <fiprintf+0x20>)
 80106b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80106ba:	6800      	ldr	r0, [r0, #0]
 80106bc:	9301      	str	r3, [sp, #4]
 80106be:	f000 f837 	bl	8010730 <_vfiprintf_r>
 80106c2:	b002      	add	sp, #8
 80106c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80106c8:	b003      	add	sp, #12
 80106ca:	4770      	bx	lr
 80106cc:	200040d8 	.word	0x200040d8

080106d0 <abort>:
 80106d0:	b508      	push	{r3, lr}
 80106d2:	2006      	movs	r0, #6
 80106d4:	f000 fa04 	bl	8010ae0 <raise>
 80106d8:	2001      	movs	r0, #1
 80106da:	f000 fad9 	bl	8010c90 <_exit>

080106de <__sfputc_r>:
 80106de:	6893      	ldr	r3, [r2, #8]
 80106e0:	3b01      	subs	r3, #1
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	b410      	push	{r4}
 80106e6:	6093      	str	r3, [r2, #8]
 80106e8:	da08      	bge.n	80106fc <__sfputc_r+0x1e>
 80106ea:	6994      	ldr	r4, [r2, #24]
 80106ec:	42a3      	cmp	r3, r4
 80106ee:	db01      	blt.n	80106f4 <__sfputc_r+0x16>
 80106f0:	290a      	cmp	r1, #10
 80106f2:	d103      	bne.n	80106fc <__sfputc_r+0x1e>
 80106f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106f8:	f000 b934 	b.w	8010964 <__swbuf_r>
 80106fc:	6813      	ldr	r3, [r2, #0]
 80106fe:	1c58      	adds	r0, r3, #1
 8010700:	6010      	str	r0, [r2, #0]
 8010702:	7019      	strb	r1, [r3, #0]
 8010704:	4608      	mov	r0, r1
 8010706:	f85d 4b04 	ldr.w	r4, [sp], #4
 801070a:	4770      	bx	lr

0801070c <__sfputs_r>:
 801070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801070e:	4606      	mov	r6, r0
 8010710:	460f      	mov	r7, r1
 8010712:	4614      	mov	r4, r2
 8010714:	18d5      	adds	r5, r2, r3
 8010716:	42ac      	cmp	r4, r5
 8010718:	d101      	bne.n	801071e <__sfputs_r+0x12>
 801071a:	2000      	movs	r0, #0
 801071c:	e007      	b.n	801072e <__sfputs_r+0x22>
 801071e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010722:	463a      	mov	r2, r7
 8010724:	4630      	mov	r0, r6
 8010726:	f7ff ffda 	bl	80106de <__sfputc_r>
 801072a:	1c43      	adds	r3, r0, #1
 801072c:	d1f3      	bne.n	8010716 <__sfputs_r+0xa>
 801072e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010730 <_vfiprintf_r>:
 8010730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010734:	460d      	mov	r5, r1
 8010736:	b09d      	sub	sp, #116	; 0x74
 8010738:	4614      	mov	r4, r2
 801073a:	4698      	mov	r8, r3
 801073c:	4606      	mov	r6, r0
 801073e:	b118      	cbz	r0, 8010748 <_vfiprintf_r+0x18>
 8010740:	6a03      	ldr	r3, [r0, #32]
 8010742:	b90b      	cbnz	r3, 8010748 <_vfiprintf_r+0x18>
 8010744:	f7fe fbca 	bl	800eedc <__sinit>
 8010748:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801074a:	07d9      	lsls	r1, r3, #31
 801074c:	d405      	bmi.n	801075a <_vfiprintf_r+0x2a>
 801074e:	89ab      	ldrh	r3, [r5, #12]
 8010750:	059a      	lsls	r2, r3, #22
 8010752:	d402      	bmi.n	801075a <_vfiprintf_r+0x2a>
 8010754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010756:	f7fe fcda 	bl	800f10e <__retarget_lock_acquire_recursive>
 801075a:	89ab      	ldrh	r3, [r5, #12]
 801075c:	071b      	lsls	r3, r3, #28
 801075e:	d501      	bpl.n	8010764 <_vfiprintf_r+0x34>
 8010760:	692b      	ldr	r3, [r5, #16]
 8010762:	b99b      	cbnz	r3, 801078c <_vfiprintf_r+0x5c>
 8010764:	4629      	mov	r1, r5
 8010766:	4630      	mov	r0, r6
 8010768:	f000 f93a 	bl	80109e0 <__swsetup_r>
 801076c:	b170      	cbz	r0, 801078c <_vfiprintf_r+0x5c>
 801076e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010770:	07dc      	lsls	r4, r3, #31
 8010772:	d504      	bpl.n	801077e <_vfiprintf_r+0x4e>
 8010774:	f04f 30ff 	mov.w	r0, #4294967295
 8010778:	b01d      	add	sp, #116	; 0x74
 801077a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801077e:	89ab      	ldrh	r3, [r5, #12]
 8010780:	0598      	lsls	r0, r3, #22
 8010782:	d4f7      	bmi.n	8010774 <_vfiprintf_r+0x44>
 8010784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010786:	f7fe fcc3 	bl	800f110 <__retarget_lock_release_recursive>
 801078a:	e7f3      	b.n	8010774 <_vfiprintf_r+0x44>
 801078c:	2300      	movs	r3, #0
 801078e:	9309      	str	r3, [sp, #36]	; 0x24
 8010790:	2320      	movs	r3, #32
 8010792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010796:	f8cd 800c 	str.w	r8, [sp, #12]
 801079a:	2330      	movs	r3, #48	; 0x30
 801079c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010950 <_vfiprintf_r+0x220>
 80107a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80107a4:	f04f 0901 	mov.w	r9, #1
 80107a8:	4623      	mov	r3, r4
 80107aa:	469a      	mov	sl, r3
 80107ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107b0:	b10a      	cbz	r2, 80107b6 <_vfiprintf_r+0x86>
 80107b2:	2a25      	cmp	r2, #37	; 0x25
 80107b4:	d1f9      	bne.n	80107aa <_vfiprintf_r+0x7a>
 80107b6:	ebba 0b04 	subs.w	fp, sl, r4
 80107ba:	d00b      	beq.n	80107d4 <_vfiprintf_r+0xa4>
 80107bc:	465b      	mov	r3, fp
 80107be:	4622      	mov	r2, r4
 80107c0:	4629      	mov	r1, r5
 80107c2:	4630      	mov	r0, r6
 80107c4:	f7ff ffa2 	bl	801070c <__sfputs_r>
 80107c8:	3001      	adds	r0, #1
 80107ca:	f000 80a9 	beq.w	8010920 <_vfiprintf_r+0x1f0>
 80107ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107d0:	445a      	add	r2, fp
 80107d2:	9209      	str	r2, [sp, #36]	; 0x24
 80107d4:	f89a 3000 	ldrb.w	r3, [sl]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	f000 80a1 	beq.w	8010920 <_vfiprintf_r+0x1f0>
 80107de:	2300      	movs	r3, #0
 80107e0:	f04f 32ff 	mov.w	r2, #4294967295
 80107e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107e8:	f10a 0a01 	add.w	sl, sl, #1
 80107ec:	9304      	str	r3, [sp, #16]
 80107ee:	9307      	str	r3, [sp, #28]
 80107f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80107f4:	931a      	str	r3, [sp, #104]	; 0x68
 80107f6:	4654      	mov	r4, sl
 80107f8:	2205      	movs	r2, #5
 80107fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107fe:	4854      	ldr	r0, [pc, #336]	; (8010950 <_vfiprintf_r+0x220>)
 8010800:	f7ef fd1e 	bl	8000240 <memchr>
 8010804:	9a04      	ldr	r2, [sp, #16]
 8010806:	b9d8      	cbnz	r0, 8010840 <_vfiprintf_r+0x110>
 8010808:	06d1      	lsls	r1, r2, #27
 801080a:	bf44      	itt	mi
 801080c:	2320      	movmi	r3, #32
 801080e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010812:	0713      	lsls	r3, r2, #28
 8010814:	bf44      	itt	mi
 8010816:	232b      	movmi	r3, #43	; 0x2b
 8010818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801081c:	f89a 3000 	ldrb.w	r3, [sl]
 8010820:	2b2a      	cmp	r3, #42	; 0x2a
 8010822:	d015      	beq.n	8010850 <_vfiprintf_r+0x120>
 8010824:	9a07      	ldr	r2, [sp, #28]
 8010826:	4654      	mov	r4, sl
 8010828:	2000      	movs	r0, #0
 801082a:	f04f 0c0a 	mov.w	ip, #10
 801082e:	4621      	mov	r1, r4
 8010830:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010834:	3b30      	subs	r3, #48	; 0x30
 8010836:	2b09      	cmp	r3, #9
 8010838:	d94d      	bls.n	80108d6 <_vfiprintf_r+0x1a6>
 801083a:	b1b0      	cbz	r0, 801086a <_vfiprintf_r+0x13a>
 801083c:	9207      	str	r2, [sp, #28]
 801083e:	e014      	b.n	801086a <_vfiprintf_r+0x13a>
 8010840:	eba0 0308 	sub.w	r3, r0, r8
 8010844:	fa09 f303 	lsl.w	r3, r9, r3
 8010848:	4313      	orrs	r3, r2
 801084a:	9304      	str	r3, [sp, #16]
 801084c:	46a2      	mov	sl, r4
 801084e:	e7d2      	b.n	80107f6 <_vfiprintf_r+0xc6>
 8010850:	9b03      	ldr	r3, [sp, #12]
 8010852:	1d19      	adds	r1, r3, #4
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	9103      	str	r1, [sp, #12]
 8010858:	2b00      	cmp	r3, #0
 801085a:	bfbb      	ittet	lt
 801085c:	425b      	neglt	r3, r3
 801085e:	f042 0202 	orrlt.w	r2, r2, #2
 8010862:	9307      	strge	r3, [sp, #28]
 8010864:	9307      	strlt	r3, [sp, #28]
 8010866:	bfb8      	it	lt
 8010868:	9204      	strlt	r2, [sp, #16]
 801086a:	7823      	ldrb	r3, [r4, #0]
 801086c:	2b2e      	cmp	r3, #46	; 0x2e
 801086e:	d10c      	bne.n	801088a <_vfiprintf_r+0x15a>
 8010870:	7863      	ldrb	r3, [r4, #1]
 8010872:	2b2a      	cmp	r3, #42	; 0x2a
 8010874:	d134      	bne.n	80108e0 <_vfiprintf_r+0x1b0>
 8010876:	9b03      	ldr	r3, [sp, #12]
 8010878:	1d1a      	adds	r2, r3, #4
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	9203      	str	r2, [sp, #12]
 801087e:	2b00      	cmp	r3, #0
 8010880:	bfb8      	it	lt
 8010882:	f04f 33ff 	movlt.w	r3, #4294967295
 8010886:	3402      	adds	r4, #2
 8010888:	9305      	str	r3, [sp, #20]
 801088a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010960 <_vfiprintf_r+0x230>
 801088e:	7821      	ldrb	r1, [r4, #0]
 8010890:	2203      	movs	r2, #3
 8010892:	4650      	mov	r0, sl
 8010894:	f7ef fcd4 	bl	8000240 <memchr>
 8010898:	b138      	cbz	r0, 80108aa <_vfiprintf_r+0x17a>
 801089a:	9b04      	ldr	r3, [sp, #16]
 801089c:	eba0 000a 	sub.w	r0, r0, sl
 80108a0:	2240      	movs	r2, #64	; 0x40
 80108a2:	4082      	lsls	r2, r0
 80108a4:	4313      	orrs	r3, r2
 80108a6:	3401      	adds	r4, #1
 80108a8:	9304      	str	r3, [sp, #16]
 80108aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108ae:	4829      	ldr	r0, [pc, #164]	; (8010954 <_vfiprintf_r+0x224>)
 80108b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80108b4:	2206      	movs	r2, #6
 80108b6:	f7ef fcc3 	bl	8000240 <memchr>
 80108ba:	2800      	cmp	r0, #0
 80108bc:	d03f      	beq.n	801093e <_vfiprintf_r+0x20e>
 80108be:	4b26      	ldr	r3, [pc, #152]	; (8010958 <_vfiprintf_r+0x228>)
 80108c0:	bb1b      	cbnz	r3, 801090a <_vfiprintf_r+0x1da>
 80108c2:	9b03      	ldr	r3, [sp, #12]
 80108c4:	3307      	adds	r3, #7
 80108c6:	f023 0307 	bic.w	r3, r3, #7
 80108ca:	3308      	adds	r3, #8
 80108cc:	9303      	str	r3, [sp, #12]
 80108ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108d0:	443b      	add	r3, r7
 80108d2:	9309      	str	r3, [sp, #36]	; 0x24
 80108d4:	e768      	b.n	80107a8 <_vfiprintf_r+0x78>
 80108d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80108da:	460c      	mov	r4, r1
 80108dc:	2001      	movs	r0, #1
 80108de:	e7a6      	b.n	801082e <_vfiprintf_r+0xfe>
 80108e0:	2300      	movs	r3, #0
 80108e2:	3401      	adds	r4, #1
 80108e4:	9305      	str	r3, [sp, #20]
 80108e6:	4619      	mov	r1, r3
 80108e8:	f04f 0c0a 	mov.w	ip, #10
 80108ec:	4620      	mov	r0, r4
 80108ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108f2:	3a30      	subs	r2, #48	; 0x30
 80108f4:	2a09      	cmp	r2, #9
 80108f6:	d903      	bls.n	8010900 <_vfiprintf_r+0x1d0>
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d0c6      	beq.n	801088a <_vfiprintf_r+0x15a>
 80108fc:	9105      	str	r1, [sp, #20]
 80108fe:	e7c4      	b.n	801088a <_vfiprintf_r+0x15a>
 8010900:	fb0c 2101 	mla	r1, ip, r1, r2
 8010904:	4604      	mov	r4, r0
 8010906:	2301      	movs	r3, #1
 8010908:	e7f0      	b.n	80108ec <_vfiprintf_r+0x1bc>
 801090a:	ab03      	add	r3, sp, #12
 801090c:	9300      	str	r3, [sp, #0]
 801090e:	462a      	mov	r2, r5
 8010910:	4b12      	ldr	r3, [pc, #72]	; (801095c <_vfiprintf_r+0x22c>)
 8010912:	a904      	add	r1, sp, #16
 8010914:	4630      	mov	r0, r6
 8010916:	f7fd feab 	bl	800e670 <_printf_float>
 801091a:	4607      	mov	r7, r0
 801091c:	1c78      	adds	r0, r7, #1
 801091e:	d1d6      	bne.n	80108ce <_vfiprintf_r+0x19e>
 8010920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010922:	07d9      	lsls	r1, r3, #31
 8010924:	d405      	bmi.n	8010932 <_vfiprintf_r+0x202>
 8010926:	89ab      	ldrh	r3, [r5, #12]
 8010928:	059a      	lsls	r2, r3, #22
 801092a:	d402      	bmi.n	8010932 <_vfiprintf_r+0x202>
 801092c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801092e:	f7fe fbef 	bl	800f110 <__retarget_lock_release_recursive>
 8010932:	89ab      	ldrh	r3, [r5, #12]
 8010934:	065b      	lsls	r3, r3, #25
 8010936:	f53f af1d 	bmi.w	8010774 <_vfiprintf_r+0x44>
 801093a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801093c:	e71c      	b.n	8010778 <_vfiprintf_r+0x48>
 801093e:	ab03      	add	r3, sp, #12
 8010940:	9300      	str	r3, [sp, #0]
 8010942:	462a      	mov	r2, r5
 8010944:	4b05      	ldr	r3, [pc, #20]	; (801095c <_vfiprintf_r+0x22c>)
 8010946:	a904      	add	r1, sp, #16
 8010948:	4630      	mov	r0, r6
 801094a:	f7fe f919 	bl	800eb80 <_printf_i>
 801094e:	e7e4      	b.n	801091a <_vfiprintf_r+0x1ea>
 8010950:	0801df6b 	.word	0x0801df6b
 8010954:	0801df75 	.word	0x0801df75
 8010958:	0800e671 	.word	0x0800e671
 801095c:	0801070d 	.word	0x0801070d
 8010960:	0801df71 	.word	0x0801df71

08010964 <__swbuf_r>:
 8010964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010966:	460e      	mov	r6, r1
 8010968:	4614      	mov	r4, r2
 801096a:	4605      	mov	r5, r0
 801096c:	b118      	cbz	r0, 8010976 <__swbuf_r+0x12>
 801096e:	6a03      	ldr	r3, [r0, #32]
 8010970:	b90b      	cbnz	r3, 8010976 <__swbuf_r+0x12>
 8010972:	f7fe fab3 	bl	800eedc <__sinit>
 8010976:	69a3      	ldr	r3, [r4, #24]
 8010978:	60a3      	str	r3, [r4, #8]
 801097a:	89a3      	ldrh	r3, [r4, #12]
 801097c:	071a      	lsls	r2, r3, #28
 801097e:	d525      	bpl.n	80109cc <__swbuf_r+0x68>
 8010980:	6923      	ldr	r3, [r4, #16]
 8010982:	b31b      	cbz	r3, 80109cc <__swbuf_r+0x68>
 8010984:	6823      	ldr	r3, [r4, #0]
 8010986:	6922      	ldr	r2, [r4, #16]
 8010988:	1a98      	subs	r0, r3, r2
 801098a:	6963      	ldr	r3, [r4, #20]
 801098c:	b2f6      	uxtb	r6, r6
 801098e:	4283      	cmp	r3, r0
 8010990:	4637      	mov	r7, r6
 8010992:	dc04      	bgt.n	801099e <__swbuf_r+0x3a>
 8010994:	4621      	mov	r1, r4
 8010996:	4628      	mov	r0, r5
 8010998:	f7ff fe0c 	bl	80105b4 <_fflush_r>
 801099c:	b9e0      	cbnz	r0, 80109d8 <__swbuf_r+0x74>
 801099e:	68a3      	ldr	r3, [r4, #8]
 80109a0:	3b01      	subs	r3, #1
 80109a2:	60a3      	str	r3, [r4, #8]
 80109a4:	6823      	ldr	r3, [r4, #0]
 80109a6:	1c5a      	adds	r2, r3, #1
 80109a8:	6022      	str	r2, [r4, #0]
 80109aa:	701e      	strb	r6, [r3, #0]
 80109ac:	6962      	ldr	r2, [r4, #20]
 80109ae:	1c43      	adds	r3, r0, #1
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d004      	beq.n	80109be <__swbuf_r+0x5a>
 80109b4:	89a3      	ldrh	r3, [r4, #12]
 80109b6:	07db      	lsls	r3, r3, #31
 80109b8:	d506      	bpl.n	80109c8 <__swbuf_r+0x64>
 80109ba:	2e0a      	cmp	r6, #10
 80109bc:	d104      	bne.n	80109c8 <__swbuf_r+0x64>
 80109be:	4621      	mov	r1, r4
 80109c0:	4628      	mov	r0, r5
 80109c2:	f7ff fdf7 	bl	80105b4 <_fflush_r>
 80109c6:	b938      	cbnz	r0, 80109d8 <__swbuf_r+0x74>
 80109c8:	4638      	mov	r0, r7
 80109ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109cc:	4621      	mov	r1, r4
 80109ce:	4628      	mov	r0, r5
 80109d0:	f000 f806 	bl	80109e0 <__swsetup_r>
 80109d4:	2800      	cmp	r0, #0
 80109d6:	d0d5      	beq.n	8010984 <__swbuf_r+0x20>
 80109d8:	f04f 37ff 	mov.w	r7, #4294967295
 80109dc:	e7f4      	b.n	80109c8 <__swbuf_r+0x64>
	...

080109e0 <__swsetup_r>:
 80109e0:	b538      	push	{r3, r4, r5, lr}
 80109e2:	4b2a      	ldr	r3, [pc, #168]	; (8010a8c <__swsetup_r+0xac>)
 80109e4:	4605      	mov	r5, r0
 80109e6:	6818      	ldr	r0, [r3, #0]
 80109e8:	460c      	mov	r4, r1
 80109ea:	b118      	cbz	r0, 80109f4 <__swsetup_r+0x14>
 80109ec:	6a03      	ldr	r3, [r0, #32]
 80109ee:	b90b      	cbnz	r3, 80109f4 <__swsetup_r+0x14>
 80109f0:	f7fe fa74 	bl	800eedc <__sinit>
 80109f4:	89a3      	ldrh	r3, [r4, #12]
 80109f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109fa:	0718      	lsls	r0, r3, #28
 80109fc:	d422      	bmi.n	8010a44 <__swsetup_r+0x64>
 80109fe:	06d9      	lsls	r1, r3, #27
 8010a00:	d407      	bmi.n	8010a12 <__swsetup_r+0x32>
 8010a02:	2309      	movs	r3, #9
 8010a04:	602b      	str	r3, [r5, #0]
 8010a06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010a0a:	81a3      	strh	r3, [r4, #12]
 8010a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a10:	e034      	b.n	8010a7c <__swsetup_r+0x9c>
 8010a12:	0758      	lsls	r0, r3, #29
 8010a14:	d512      	bpl.n	8010a3c <__swsetup_r+0x5c>
 8010a16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a18:	b141      	cbz	r1, 8010a2c <__swsetup_r+0x4c>
 8010a1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a1e:	4299      	cmp	r1, r3
 8010a20:	d002      	beq.n	8010a28 <__swsetup_r+0x48>
 8010a22:	4628      	mov	r0, r5
 8010a24:	f7ff f978 	bl	800fd18 <_free_r>
 8010a28:	2300      	movs	r3, #0
 8010a2a:	6363      	str	r3, [r4, #52]	; 0x34
 8010a2c:	89a3      	ldrh	r3, [r4, #12]
 8010a2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010a32:	81a3      	strh	r3, [r4, #12]
 8010a34:	2300      	movs	r3, #0
 8010a36:	6063      	str	r3, [r4, #4]
 8010a38:	6923      	ldr	r3, [r4, #16]
 8010a3a:	6023      	str	r3, [r4, #0]
 8010a3c:	89a3      	ldrh	r3, [r4, #12]
 8010a3e:	f043 0308 	orr.w	r3, r3, #8
 8010a42:	81a3      	strh	r3, [r4, #12]
 8010a44:	6923      	ldr	r3, [r4, #16]
 8010a46:	b94b      	cbnz	r3, 8010a5c <__swsetup_r+0x7c>
 8010a48:	89a3      	ldrh	r3, [r4, #12]
 8010a4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a52:	d003      	beq.n	8010a5c <__swsetup_r+0x7c>
 8010a54:	4621      	mov	r1, r4
 8010a56:	4628      	mov	r0, r5
 8010a58:	f000 f884 	bl	8010b64 <__smakebuf_r>
 8010a5c:	89a0      	ldrh	r0, [r4, #12]
 8010a5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010a62:	f010 0301 	ands.w	r3, r0, #1
 8010a66:	d00a      	beq.n	8010a7e <__swsetup_r+0x9e>
 8010a68:	2300      	movs	r3, #0
 8010a6a:	60a3      	str	r3, [r4, #8]
 8010a6c:	6963      	ldr	r3, [r4, #20]
 8010a6e:	425b      	negs	r3, r3
 8010a70:	61a3      	str	r3, [r4, #24]
 8010a72:	6923      	ldr	r3, [r4, #16]
 8010a74:	b943      	cbnz	r3, 8010a88 <__swsetup_r+0xa8>
 8010a76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010a7a:	d1c4      	bne.n	8010a06 <__swsetup_r+0x26>
 8010a7c:	bd38      	pop	{r3, r4, r5, pc}
 8010a7e:	0781      	lsls	r1, r0, #30
 8010a80:	bf58      	it	pl
 8010a82:	6963      	ldrpl	r3, [r4, #20]
 8010a84:	60a3      	str	r3, [r4, #8]
 8010a86:	e7f4      	b.n	8010a72 <__swsetup_r+0x92>
 8010a88:	2000      	movs	r0, #0
 8010a8a:	e7f7      	b.n	8010a7c <__swsetup_r+0x9c>
 8010a8c:	200040d8 	.word	0x200040d8

08010a90 <_raise_r>:
 8010a90:	291f      	cmp	r1, #31
 8010a92:	b538      	push	{r3, r4, r5, lr}
 8010a94:	4604      	mov	r4, r0
 8010a96:	460d      	mov	r5, r1
 8010a98:	d904      	bls.n	8010aa4 <_raise_r+0x14>
 8010a9a:	2316      	movs	r3, #22
 8010a9c:	6003      	str	r3, [r0, #0]
 8010a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa2:	bd38      	pop	{r3, r4, r5, pc}
 8010aa4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010aa6:	b112      	cbz	r2, 8010aae <_raise_r+0x1e>
 8010aa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010aac:	b94b      	cbnz	r3, 8010ac2 <_raise_r+0x32>
 8010aae:	4620      	mov	r0, r4
 8010ab0:	f000 f830 	bl	8010b14 <_getpid_r>
 8010ab4:	462a      	mov	r2, r5
 8010ab6:	4601      	mov	r1, r0
 8010ab8:	4620      	mov	r0, r4
 8010aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010abe:	f000 b817 	b.w	8010af0 <_kill_r>
 8010ac2:	2b01      	cmp	r3, #1
 8010ac4:	d00a      	beq.n	8010adc <_raise_r+0x4c>
 8010ac6:	1c59      	adds	r1, r3, #1
 8010ac8:	d103      	bne.n	8010ad2 <_raise_r+0x42>
 8010aca:	2316      	movs	r3, #22
 8010acc:	6003      	str	r3, [r0, #0]
 8010ace:	2001      	movs	r0, #1
 8010ad0:	e7e7      	b.n	8010aa2 <_raise_r+0x12>
 8010ad2:	2400      	movs	r4, #0
 8010ad4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010ad8:	4628      	mov	r0, r5
 8010ada:	4798      	blx	r3
 8010adc:	2000      	movs	r0, #0
 8010ade:	e7e0      	b.n	8010aa2 <_raise_r+0x12>

08010ae0 <raise>:
 8010ae0:	4b02      	ldr	r3, [pc, #8]	; (8010aec <raise+0xc>)
 8010ae2:	4601      	mov	r1, r0
 8010ae4:	6818      	ldr	r0, [r3, #0]
 8010ae6:	f7ff bfd3 	b.w	8010a90 <_raise_r>
 8010aea:	bf00      	nop
 8010aec:	200040d8 	.word	0x200040d8

08010af0 <_kill_r>:
 8010af0:	b538      	push	{r3, r4, r5, lr}
 8010af2:	4d07      	ldr	r5, [pc, #28]	; (8010b10 <_kill_r+0x20>)
 8010af4:	2300      	movs	r3, #0
 8010af6:	4604      	mov	r4, r0
 8010af8:	4608      	mov	r0, r1
 8010afa:	4611      	mov	r1, r2
 8010afc:	602b      	str	r3, [r5, #0]
 8010afe:	f000 f8af 	bl	8010c60 <_kill>
 8010b02:	1c43      	adds	r3, r0, #1
 8010b04:	d102      	bne.n	8010b0c <_kill_r+0x1c>
 8010b06:	682b      	ldr	r3, [r5, #0]
 8010b08:	b103      	cbz	r3, 8010b0c <_kill_r+0x1c>
 8010b0a:	6023      	str	r3, [r4, #0]
 8010b0c:	bd38      	pop	{r3, r4, r5, pc}
 8010b0e:	bf00      	nop
 8010b10:	2000ed1c 	.word	0x2000ed1c

08010b14 <_getpid_r>:
 8010b14:	f000 b894 	b.w	8010c40 <_getpid>

08010b18 <__swhatbuf_r>:
 8010b18:	b570      	push	{r4, r5, r6, lr}
 8010b1a:	460c      	mov	r4, r1
 8010b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b20:	2900      	cmp	r1, #0
 8010b22:	b096      	sub	sp, #88	; 0x58
 8010b24:	4615      	mov	r5, r2
 8010b26:	461e      	mov	r6, r3
 8010b28:	da0d      	bge.n	8010b46 <__swhatbuf_r+0x2e>
 8010b2a:	89a3      	ldrh	r3, [r4, #12]
 8010b2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010b30:	f04f 0100 	mov.w	r1, #0
 8010b34:	bf0c      	ite	eq
 8010b36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010b3a:	2340      	movne	r3, #64	; 0x40
 8010b3c:	2000      	movs	r0, #0
 8010b3e:	6031      	str	r1, [r6, #0]
 8010b40:	602b      	str	r3, [r5, #0]
 8010b42:	b016      	add	sp, #88	; 0x58
 8010b44:	bd70      	pop	{r4, r5, r6, pc}
 8010b46:	466a      	mov	r2, sp
 8010b48:	f000 f848 	bl	8010bdc <_fstat_r>
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	dbec      	blt.n	8010b2a <__swhatbuf_r+0x12>
 8010b50:	9901      	ldr	r1, [sp, #4]
 8010b52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010b56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010b5a:	4259      	negs	r1, r3
 8010b5c:	4159      	adcs	r1, r3
 8010b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b62:	e7eb      	b.n	8010b3c <__swhatbuf_r+0x24>

08010b64 <__smakebuf_r>:
 8010b64:	898b      	ldrh	r3, [r1, #12]
 8010b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b68:	079d      	lsls	r5, r3, #30
 8010b6a:	4606      	mov	r6, r0
 8010b6c:	460c      	mov	r4, r1
 8010b6e:	d507      	bpl.n	8010b80 <__smakebuf_r+0x1c>
 8010b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b74:	6023      	str	r3, [r4, #0]
 8010b76:	6123      	str	r3, [r4, #16]
 8010b78:	2301      	movs	r3, #1
 8010b7a:	6163      	str	r3, [r4, #20]
 8010b7c:	b002      	add	sp, #8
 8010b7e:	bd70      	pop	{r4, r5, r6, pc}
 8010b80:	ab01      	add	r3, sp, #4
 8010b82:	466a      	mov	r2, sp
 8010b84:	f7ff ffc8 	bl	8010b18 <__swhatbuf_r>
 8010b88:	9900      	ldr	r1, [sp, #0]
 8010b8a:	4605      	mov	r5, r0
 8010b8c:	4630      	mov	r0, r6
 8010b8e:	f7fd fc51 	bl	800e434 <_malloc_r>
 8010b92:	b948      	cbnz	r0, 8010ba8 <__smakebuf_r+0x44>
 8010b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b98:	059a      	lsls	r2, r3, #22
 8010b9a:	d4ef      	bmi.n	8010b7c <__smakebuf_r+0x18>
 8010b9c:	f023 0303 	bic.w	r3, r3, #3
 8010ba0:	f043 0302 	orr.w	r3, r3, #2
 8010ba4:	81a3      	strh	r3, [r4, #12]
 8010ba6:	e7e3      	b.n	8010b70 <__smakebuf_r+0xc>
 8010ba8:	89a3      	ldrh	r3, [r4, #12]
 8010baa:	6020      	str	r0, [r4, #0]
 8010bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bb0:	81a3      	strh	r3, [r4, #12]
 8010bb2:	9b00      	ldr	r3, [sp, #0]
 8010bb4:	6163      	str	r3, [r4, #20]
 8010bb6:	9b01      	ldr	r3, [sp, #4]
 8010bb8:	6120      	str	r0, [r4, #16]
 8010bba:	b15b      	cbz	r3, 8010bd4 <__smakebuf_r+0x70>
 8010bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bc0:	4630      	mov	r0, r6
 8010bc2:	f000 f81d 	bl	8010c00 <_isatty_r>
 8010bc6:	b128      	cbz	r0, 8010bd4 <__smakebuf_r+0x70>
 8010bc8:	89a3      	ldrh	r3, [r4, #12]
 8010bca:	f023 0303 	bic.w	r3, r3, #3
 8010bce:	f043 0301 	orr.w	r3, r3, #1
 8010bd2:	81a3      	strh	r3, [r4, #12]
 8010bd4:	89a3      	ldrh	r3, [r4, #12]
 8010bd6:	431d      	orrs	r5, r3
 8010bd8:	81a5      	strh	r5, [r4, #12]
 8010bda:	e7cf      	b.n	8010b7c <__smakebuf_r+0x18>

08010bdc <_fstat_r>:
 8010bdc:	b538      	push	{r3, r4, r5, lr}
 8010bde:	4d07      	ldr	r5, [pc, #28]	; (8010bfc <_fstat_r+0x20>)
 8010be0:	2300      	movs	r3, #0
 8010be2:	4604      	mov	r4, r0
 8010be4:	4608      	mov	r0, r1
 8010be6:	4611      	mov	r1, r2
 8010be8:	602b      	str	r3, [r5, #0]
 8010bea:	f000 f821 	bl	8010c30 <_fstat>
 8010bee:	1c43      	adds	r3, r0, #1
 8010bf0:	d102      	bne.n	8010bf8 <_fstat_r+0x1c>
 8010bf2:	682b      	ldr	r3, [r5, #0]
 8010bf4:	b103      	cbz	r3, 8010bf8 <_fstat_r+0x1c>
 8010bf6:	6023      	str	r3, [r4, #0]
 8010bf8:	bd38      	pop	{r3, r4, r5, pc}
 8010bfa:	bf00      	nop
 8010bfc:	2000ed1c 	.word	0x2000ed1c

08010c00 <_isatty_r>:
 8010c00:	b538      	push	{r3, r4, r5, lr}
 8010c02:	4d06      	ldr	r5, [pc, #24]	; (8010c1c <_isatty_r+0x1c>)
 8010c04:	2300      	movs	r3, #0
 8010c06:	4604      	mov	r4, r0
 8010c08:	4608      	mov	r0, r1
 8010c0a:	602b      	str	r3, [r5, #0]
 8010c0c:	f000 f820 	bl	8010c50 <_isatty>
 8010c10:	1c43      	adds	r3, r0, #1
 8010c12:	d102      	bne.n	8010c1a <_isatty_r+0x1a>
 8010c14:	682b      	ldr	r3, [r5, #0]
 8010c16:	b103      	cbz	r3, 8010c1a <_isatty_r+0x1a>
 8010c18:	6023      	str	r3, [r4, #0]
 8010c1a:	bd38      	pop	{r3, r4, r5, pc}
 8010c1c:	2000ed1c 	.word	0x2000ed1c

08010c20 <_close>:
 8010c20:	4b02      	ldr	r3, [pc, #8]	; (8010c2c <_close+0xc>)
 8010c22:	2258      	movs	r2, #88	; 0x58
 8010c24:	601a      	str	r2, [r3, #0]
 8010c26:	f04f 30ff 	mov.w	r0, #4294967295
 8010c2a:	4770      	bx	lr
 8010c2c:	2000ed1c 	.word	0x2000ed1c

08010c30 <_fstat>:
 8010c30:	4b02      	ldr	r3, [pc, #8]	; (8010c3c <_fstat+0xc>)
 8010c32:	2258      	movs	r2, #88	; 0x58
 8010c34:	601a      	str	r2, [r3, #0]
 8010c36:	f04f 30ff 	mov.w	r0, #4294967295
 8010c3a:	4770      	bx	lr
 8010c3c:	2000ed1c 	.word	0x2000ed1c

08010c40 <_getpid>:
 8010c40:	4b02      	ldr	r3, [pc, #8]	; (8010c4c <_getpid+0xc>)
 8010c42:	2258      	movs	r2, #88	; 0x58
 8010c44:	601a      	str	r2, [r3, #0]
 8010c46:	f04f 30ff 	mov.w	r0, #4294967295
 8010c4a:	4770      	bx	lr
 8010c4c:	2000ed1c 	.word	0x2000ed1c

08010c50 <_isatty>:
 8010c50:	4b02      	ldr	r3, [pc, #8]	; (8010c5c <_isatty+0xc>)
 8010c52:	2258      	movs	r2, #88	; 0x58
 8010c54:	601a      	str	r2, [r3, #0]
 8010c56:	2000      	movs	r0, #0
 8010c58:	4770      	bx	lr
 8010c5a:	bf00      	nop
 8010c5c:	2000ed1c 	.word	0x2000ed1c

08010c60 <_kill>:
 8010c60:	4b02      	ldr	r3, [pc, #8]	; (8010c6c <_kill+0xc>)
 8010c62:	2258      	movs	r2, #88	; 0x58
 8010c64:	601a      	str	r2, [r3, #0]
 8010c66:	f04f 30ff 	mov.w	r0, #4294967295
 8010c6a:	4770      	bx	lr
 8010c6c:	2000ed1c 	.word	0x2000ed1c

08010c70 <_lseek>:
 8010c70:	4b02      	ldr	r3, [pc, #8]	; (8010c7c <_lseek+0xc>)
 8010c72:	2258      	movs	r2, #88	; 0x58
 8010c74:	601a      	str	r2, [r3, #0]
 8010c76:	f04f 30ff 	mov.w	r0, #4294967295
 8010c7a:	4770      	bx	lr
 8010c7c:	2000ed1c 	.word	0x2000ed1c

08010c80 <_read>:
 8010c80:	4b02      	ldr	r3, [pc, #8]	; (8010c8c <_read+0xc>)
 8010c82:	2258      	movs	r2, #88	; 0x58
 8010c84:	601a      	str	r2, [r3, #0]
 8010c86:	f04f 30ff 	mov.w	r0, #4294967295
 8010c8a:	4770      	bx	lr
 8010c8c:	2000ed1c 	.word	0x2000ed1c

08010c90 <_exit>:
 8010c90:	e7fe      	b.n	8010c90 <_exit>
	...

08010c94 <_init>:
 8010c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c96:	bf00      	nop
 8010c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c9a:	bc08      	pop	{r3}
 8010c9c:	469e      	mov	lr, r3
 8010c9e:	4770      	bx	lr

08010ca0 <_fini>:
 8010ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ca2:	bf00      	nop
 8010ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ca6:	bc08      	pop	{r3}
 8010ca8:	469e      	mov	lr, r3
 8010caa:	4770      	bx	lr
