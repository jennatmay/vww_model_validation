
NUCLEO-F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c014  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000cf498  0800c220  0800c220  0001c220  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080db6b8  080db6b8  000f4370  2**0
                  CONTENTS
  4 .ARM          00000008  080db6b8  080db6b8  000eb6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080db6c0  080db6c0  000f4370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080db6c0  080db6c0  000eb6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080db6c4  080db6c4  000eb6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004370  20000000  080db6c8  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008dc  20004370  080dfa38  000f4370  2**3
                  ALLOC
 10 ._user_heap_stack 00001004  20004c4c  080dfa38  000f4c4c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000f4370  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000f439e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026c83  00000000  00000000  000f43e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005999  00000000  00000000  0011b064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000d325  00000000  00000000  001209fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010d8  00000000  00000000  0012dd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013df  00000000  00000000  0012ee00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ea60  00000000  00000000  001301df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002291e  00000000  00000000  0015ec3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00116a67  00000000  00000000  0018155d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000436c  00000000  00000000  00297fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0029c330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20004370 	.word	0x20004370
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c1fc 	.word	0x0800c1fc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20004374 	.word	0x20004374
 800023c:	0800c1fc 	.word	0x0800c1fc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_frsub>:
 80002f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__addsf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_fsub>:
 80002f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002fc <__addsf3>:
 80002fc:	0042      	lsls	r2, r0, #1
 80002fe:	bf1f      	itttt	ne
 8000300:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000304:	ea92 0f03 	teqne	r2, r3
 8000308:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800030c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000310:	d06a      	beq.n	80003e8 <__addsf3+0xec>
 8000312:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000316:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800031a:	bfc1      	itttt	gt
 800031c:	18d2      	addgt	r2, r2, r3
 800031e:	4041      	eorgt	r1, r0
 8000320:	4048      	eorgt	r0, r1
 8000322:	4041      	eorgt	r1, r0
 8000324:	bfb8      	it	lt
 8000326:	425b      	neglt	r3, r3
 8000328:	2b19      	cmp	r3, #25
 800032a:	bf88      	it	hi
 800032c:	4770      	bxhi	lr
 800032e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000332:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000336:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800033a:	bf18      	it	ne
 800033c:	4240      	negne	r0, r0
 800033e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000342:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000346:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800034a:	bf18      	it	ne
 800034c:	4249      	negne	r1, r1
 800034e:	ea92 0f03 	teq	r2, r3
 8000352:	d03f      	beq.n	80003d4 <__addsf3+0xd8>
 8000354:	f1a2 0201 	sub.w	r2, r2, #1
 8000358:	fa41 fc03 	asr.w	ip, r1, r3
 800035c:	eb10 000c 	adds.w	r0, r0, ip
 8000360:	f1c3 0320 	rsb	r3, r3, #32
 8000364:	fa01 f103 	lsl.w	r1, r1, r3
 8000368:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800036c:	d502      	bpl.n	8000374 <__addsf3+0x78>
 800036e:	4249      	negs	r1, r1
 8000370:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000374:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000378:	d313      	bcc.n	80003a2 <__addsf3+0xa6>
 800037a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800037e:	d306      	bcc.n	800038e <__addsf3+0x92>
 8000380:	0840      	lsrs	r0, r0, #1
 8000382:	ea4f 0131 	mov.w	r1, r1, rrx
 8000386:	f102 0201 	add.w	r2, r2, #1
 800038a:	2afe      	cmp	r2, #254	; 0xfe
 800038c:	d251      	bcs.n	8000432 <__addsf3+0x136>
 800038e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000392:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000396:	bf08      	it	eq
 8000398:	f020 0001 	biceq.w	r0, r0, #1
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	4770      	bx	lr
 80003a2:	0049      	lsls	r1, r1, #1
 80003a4:	eb40 0000 	adc.w	r0, r0, r0
 80003a8:	3a01      	subs	r2, #1
 80003aa:	bf28      	it	cs
 80003ac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003b0:	d2ed      	bcs.n	800038e <__addsf3+0x92>
 80003b2:	fab0 fc80 	clz	ip, r0
 80003b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80003ba:	ebb2 020c 	subs.w	r2, r2, ip
 80003be:	fa00 f00c 	lsl.w	r0, r0, ip
 80003c2:	bfaa      	itet	ge
 80003c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003c8:	4252      	neglt	r2, r2
 80003ca:	4318      	orrge	r0, r3
 80003cc:	bfbc      	itt	lt
 80003ce:	40d0      	lsrlt	r0, r2
 80003d0:	4318      	orrlt	r0, r3
 80003d2:	4770      	bx	lr
 80003d4:	f092 0f00 	teq	r2, #0
 80003d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003dc:	bf06      	itte	eq
 80003de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003e2:	3201      	addeq	r2, #1
 80003e4:	3b01      	subne	r3, #1
 80003e6:	e7b5      	b.n	8000354 <__addsf3+0x58>
 80003e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003f0:	bf18      	it	ne
 80003f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003f6:	d021      	beq.n	800043c <__addsf3+0x140>
 80003f8:	ea92 0f03 	teq	r2, r3
 80003fc:	d004      	beq.n	8000408 <__addsf3+0x10c>
 80003fe:	f092 0f00 	teq	r2, #0
 8000402:	bf08      	it	eq
 8000404:	4608      	moveq	r0, r1
 8000406:	4770      	bx	lr
 8000408:	ea90 0f01 	teq	r0, r1
 800040c:	bf1c      	itt	ne
 800040e:	2000      	movne	r0, #0
 8000410:	4770      	bxne	lr
 8000412:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000416:	d104      	bne.n	8000422 <__addsf3+0x126>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	bf28      	it	cs
 800041c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000420:	4770      	bx	lr
 8000422:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000426:	bf3c      	itt	cc
 8000428:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800042c:	4770      	bxcc	lr
 800042e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000432:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000436:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800043a:	4770      	bx	lr
 800043c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000440:	bf16      	itet	ne
 8000442:	4608      	movne	r0, r1
 8000444:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000448:	4601      	movne	r1, r0
 800044a:	0242      	lsls	r2, r0, #9
 800044c:	bf06      	itte	eq
 800044e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000452:	ea90 0f01 	teqeq	r0, r1
 8000456:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800045a:	4770      	bx	lr

0800045c <__aeabi_ui2f>:
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e004      	b.n	800046c <__aeabi_i2f+0x8>
 8000462:	bf00      	nop

08000464 <__aeabi_i2f>:
 8000464:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000468:	bf48      	it	mi
 800046a:	4240      	negmi	r0, r0
 800046c:	ea5f 0c00 	movs.w	ip, r0
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000478:	4601      	mov	r1, r0
 800047a:	f04f 0000 	mov.w	r0, #0
 800047e:	e01c      	b.n	80004ba <__aeabi_l2f+0x2a>

08000480 <__aeabi_ul2f>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	f04f 0300 	mov.w	r3, #0
 800048c:	e00a      	b.n	80004a4 <__aeabi_l2f+0x14>
 800048e:	bf00      	nop

08000490 <__aeabi_l2f>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800049c:	d502      	bpl.n	80004a4 <__aeabi_l2f+0x14>
 800049e:	4240      	negs	r0, r0
 80004a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a4:	ea5f 0c01 	movs.w	ip, r1
 80004a8:	bf02      	ittt	eq
 80004aa:	4684      	moveq	ip, r0
 80004ac:	4601      	moveq	r1, r0
 80004ae:	2000      	moveq	r0, #0
 80004b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004b4:	bf08      	it	eq
 80004b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004be:	fabc f28c 	clz	r2, ip
 80004c2:	3a08      	subs	r2, #8
 80004c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004c8:	db10      	blt.n	80004ec <__aeabi_l2f+0x5c>
 80004ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80004ce:	4463      	add	r3, ip
 80004d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004d4:	f1c2 0220 	rsb	r2, r2, #32
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	fa20 f202 	lsr.w	r2, r0, r2
 80004e0:	eb43 0002 	adc.w	r0, r3, r2
 80004e4:	bf08      	it	eq
 80004e6:	f020 0001 	biceq.w	r0, r0, #1
 80004ea:	4770      	bx	lr
 80004ec:	f102 0220 	add.w	r2, r2, #32
 80004f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004f4:	f1c2 0220 	rsb	r2, r2, #32
 80004f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004fc:	fa21 f202 	lsr.w	r2, r1, r2
 8000500:	eb43 0002 	adc.w	r0, r3, r2
 8000504:	bf08      	it	eq
 8000506:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800050a:	4770      	bx	lr

0800050c <__aeabi_uldivmod>:
 800050c:	b953      	cbnz	r3, 8000524 <__aeabi_uldivmod+0x18>
 800050e:	b94a      	cbnz	r2, 8000524 <__aeabi_uldivmod+0x18>
 8000510:	2900      	cmp	r1, #0
 8000512:	bf08      	it	eq
 8000514:	2800      	cmpeq	r0, #0
 8000516:	bf1c      	itt	ne
 8000518:	f04f 31ff 	movne.w	r1, #4294967295
 800051c:	f04f 30ff 	movne.w	r0, #4294967295
 8000520:	f000 b992 	b.w	8000848 <__aeabi_idiv0>
 8000524:	f1ad 0c08 	sub.w	ip, sp, #8
 8000528:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800052c:	f000 f828 	bl	8000580 <__udivmoddi4>
 8000530:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000538:	b004      	add	sp, #16
 800053a:	4770      	bx	lr
 800053c:	0000      	movs	r0, r0
	...

08000540 <__aeabi_d2ulz>:
 8000540:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000570 <__aeabi_d2ulz+0x30>
 8000544:	ec41 0b17 	vmov	d7, r0, r1
 8000548:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000578 <__aeabi_d2ulz+0x38>
 800054c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000550:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000554:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000558:	eea4 7b45 	vfms.f64	d7, d4, d5
 800055c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000560:	ee16 1a10 	vmov	r1, s12
 8000564:	ee17 0a90 	vmov	r0, s15
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	f3af 8000 	nop.w
 8000570:	00000000 	.word	0x00000000
 8000574:	3df00000 	.word	0x3df00000
 8000578:	00000000 	.word	0x00000000
 800057c:	41f00000 	.word	0x41f00000

08000580 <__udivmoddi4>:
 8000580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000584:	9e08      	ldr	r6, [sp, #32]
 8000586:	460d      	mov	r5, r1
 8000588:	4604      	mov	r4, r0
 800058a:	460f      	mov	r7, r1
 800058c:	2b00      	cmp	r3, #0
 800058e:	d14a      	bne.n	8000626 <__udivmoddi4+0xa6>
 8000590:	428a      	cmp	r2, r1
 8000592:	4694      	mov	ip, r2
 8000594:	d965      	bls.n	8000662 <__udivmoddi4+0xe2>
 8000596:	fab2 f382 	clz	r3, r2
 800059a:	b143      	cbz	r3, 80005ae <__udivmoddi4+0x2e>
 800059c:	fa02 fc03 	lsl.w	ip, r2, r3
 80005a0:	f1c3 0220 	rsb	r2, r3, #32
 80005a4:	409f      	lsls	r7, r3
 80005a6:	fa20 f202 	lsr.w	r2, r0, r2
 80005aa:	4317      	orrs	r7, r2
 80005ac:	409c      	lsls	r4, r3
 80005ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80005b2:	fa1f f58c 	uxth.w	r5, ip
 80005b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80005ba:	0c22      	lsrs	r2, r4, #16
 80005bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80005c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80005c4:	fb01 f005 	mul.w	r0, r1, r5
 80005c8:	4290      	cmp	r0, r2
 80005ca:	d90a      	bls.n	80005e2 <__udivmoddi4+0x62>
 80005cc:	eb1c 0202 	adds.w	r2, ip, r2
 80005d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80005d4:	f080 811c 	bcs.w	8000810 <__udivmoddi4+0x290>
 80005d8:	4290      	cmp	r0, r2
 80005da:	f240 8119 	bls.w	8000810 <__udivmoddi4+0x290>
 80005de:	3902      	subs	r1, #2
 80005e0:	4462      	add	r2, ip
 80005e2:	1a12      	subs	r2, r2, r0
 80005e4:	b2a4      	uxth	r4, r4
 80005e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80005ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80005ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005f2:	fb00 f505 	mul.w	r5, r0, r5
 80005f6:	42a5      	cmp	r5, r4
 80005f8:	d90a      	bls.n	8000610 <__udivmoddi4+0x90>
 80005fa:	eb1c 0404 	adds.w	r4, ip, r4
 80005fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000602:	f080 8107 	bcs.w	8000814 <__udivmoddi4+0x294>
 8000606:	42a5      	cmp	r5, r4
 8000608:	f240 8104 	bls.w	8000814 <__udivmoddi4+0x294>
 800060c:	4464      	add	r4, ip
 800060e:	3802      	subs	r0, #2
 8000610:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000614:	1b64      	subs	r4, r4, r5
 8000616:	2100      	movs	r1, #0
 8000618:	b11e      	cbz	r6, 8000622 <__udivmoddi4+0xa2>
 800061a:	40dc      	lsrs	r4, r3
 800061c:	2300      	movs	r3, #0
 800061e:	e9c6 4300 	strd	r4, r3, [r6]
 8000622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000626:	428b      	cmp	r3, r1
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0xbc>
 800062a:	2e00      	cmp	r6, #0
 800062c:	f000 80ed 	beq.w	800080a <__udivmoddi4+0x28a>
 8000630:	2100      	movs	r1, #0
 8000632:	e9c6 0500 	strd	r0, r5, [r6]
 8000636:	4608      	mov	r0, r1
 8000638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800063c:	fab3 f183 	clz	r1, r3
 8000640:	2900      	cmp	r1, #0
 8000642:	d149      	bne.n	80006d8 <__udivmoddi4+0x158>
 8000644:	42ab      	cmp	r3, r5
 8000646:	d302      	bcc.n	800064e <__udivmoddi4+0xce>
 8000648:	4282      	cmp	r2, r0
 800064a:	f200 80f8 	bhi.w	800083e <__udivmoddi4+0x2be>
 800064e:	1a84      	subs	r4, r0, r2
 8000650:	eb65 0203 	sbc.w	r2, r5, r3
 8000654:	2001      	movs	r0, #1
 8000656:	4617      	mov	r7, r2
 8000658:	2e00      	cmp	r6, #0
 800065a:	d0e2      	beq.n	8000622 <__udivmoddi4+0xa2>
 800065c:	e9c6 4700 	strd	r4, r7, [r6]
 8000660:	e7df      	b.n	8000622 <__udivmoddi4+0xa2>
 8000662:	b902      	cbnz	r2, 8000666 <__udivmoddi4+0xe6>
 8000664:	deff      	udf	#255	; 0xff
 8000666:	fab2 f382 	clz	r3, r2
 800066a:	2b00      	cmp	r3, #0
 800066c:	f040 8090 	bne.w	8000790 <__udivmoddi4+0x210>
 8000670:	1a8a      	subs	r2, r1, r2
 8000672:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000676:	fa1f fe8c 	uxth.w	lr, ip
 800067a:	2101      	movs	r1, #1
 800067c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000680:	fb07 2015 	mls	r0, r7, r5, r2
 8000684:	0c22      	lsrs	r2, r4, #16
 8000686:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800068a:	fb0e f005 	mul.w	r0, lr, r5
 800068e:	4290      	cmp	r0, r2
 8000690:	d908      	bls.n	80006a4 <__udivmoddi4+0x124>
 8000692:	eb1c 0202 	adds.w	r2, ip, r2
 8000696:	f105 38ff 	add.w	r8, r5, #4294967295
 800069a:	d202      	bcs.n	80006a2 <__udivmoddi4+0x122>
 800069c:	4290      	cmp	r0, r2
 800069e:	f200 80cb 	bhi.w	8000838 <__udivmoddi4+0x2b8>
 80006a2:	4645      	mov	r5, r8
 80006a4:	1a12      	subs	r2, r2, r0
 80006a6:	b2a4      	uxth	r4, r4
 80006a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80006ac:	fb07 2210 	mls	r2, r7, r0, r2
 80006b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006b4:	fb0e fe00 	mul.w	lr, lr, r0
 80006b8:	45a6      	cmp	lr, r4
 80006ba:	d908      	bls.n	80006ce <__udivmoddi4+0x14e>
 80006bc:	eb1c 0404 	adds.w	r4, ip, r4
 80006c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80006c4:	d202      	bcs.n	80006cc <__udivmoddi4+0x14c>
 80006c6:	45a6      	cmp	lr, r4
 80006c8:	f200 80bb 	bhi.w	8000842 <__udivmoddi4+0x2c2>
 80006cc:	4610      	mov	r0, r2
 80006ce:	eba4 040e 	sub.w	r4, r4, lr
 80006d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80006d6:	e79f      	b.n	8000618 <__udivmoddi4+0x98>
 80006d8:	f1c1 0720 	rsb	r7, r1, #32
 80006dc:	408b      	lsls	r3, r1
 80006de:	fa22 fc07 	lsr.w	ip, r2, r7
 80006e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80006e6:	fa05 f401 	lsl.w	r4, r5, r1
 80006ea:	fa20 f307 	lsr.w	r3, r0, r7
 80006ee:	40fd      	lsrs	r5, r7
 80006f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006f4:	4323      	orrs	r3, r4
 80006f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80006fa:	fa1f fe8c 	uxth.w	lr, ip
 80006fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000702:	0c1c      	lsrs	r4, r3, #16
 8000704:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000708:	fb08 f50e 	mul.w	r5, r8, lr
 800070c:	42a5      	cmp	r5, r4
 800070e:	fa02 f201 	lsl.w	r2, r2, r1
 8000712:	fa00 f001 	lsl.w	r0, r0, r1
 8000716:	d90b      	bls.n	8000730 <__udivmoddi4+0x1b0>
 8000718:	eb1c 0404 	adds.w	r4, ip, r4
 800071c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000720:	f080 8088 	bcs.w	8000834 <__udivmoddi4+0x2b4>
 8000724:	42a5      	cmp	r5, r4
 8000726:	f240 8085 	bls.w	8000834 <__udivmoddi4+0x2b4>
 800072a:	f1a8 0802 	sub.w	r8, r8, #2
 800072e:	4464      	add	r4, ip
 8000730:	1b64      	subs	r4, r4, r5
 8000732:	b29d      	uxth	r5, r3
 8000734:	fbb4 f3f9 	udiv	r3, r4, r9
 8000738:	fb09 4413 	mls	r4, r9, r3, r4
 800073c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000740:	fb03 fe0e 	mul.w	lr, r3, lr
 8000744:	45a6      	cmp	lr, r4
 8000746:	d908      	bls.n	800075a <__udivmoddi4+0x1da>
 8000748:	eb1c 0404 	adds.w	r4, ip, r4
 800074c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000750:	d26c      	bcs.n	800082c <__udivmoddi4+0x2ac>
 8000752:	45a6      	cmp	lr, r4
 8000754:	d96a      	bls.n	800082c <__udivmoddi4+0x2ac>
 8000756:	3b02      	subs	r3, #2
 8000758:	4464      	add	r4, ip
 800075a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800075e:	fba3 9502 	umull	r9, r5, r3, r2
 8000762:	eba4 040e 	sub.w	r4, r4, lr
 8000766:	42ac      	cmp	r4, r5
 8000768:	46c8      	mov	r8, r9
 800076a:	46ae      	mov	lr, r5
 800076c:	d356      	bcc.n	800081c <__udivmoddi4+0x29c>
 800076e:	d053      	beq.n	8000818 <__udivmoddi4+0x298>
 8000770:	b156      	cbz	r6, 8000788 <__udivmoddi4+0x208>
 8000772:	ebb0 0208 	subs.w	r2, r0, r8
 8000776:	eb64 040e 	sbc.w	r4, r4, lr
 800077a:	fa04 f707 	lsl.w	r7, r4, r7
 800077e:	40ca      	lsrs	r2, r1
 8000780:	40cc      	lsrs	r4, r1
 8000782:	4317      	orrs	r7, r2
 8000784:	e9c6 7400 	strd	r7, r4, [r6]
 8000788:	4618      	mov	r0, r3
 800078a:	2100      	movs	r1, #0
 800078c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000790:	f1c3 0120 	rsb	r1, r3, #32
 8000794:	fa02 fc03 	lsl.w	ip, r2, r3
 8000798:	fa20 f201 	lsr.w	r2, r0, r1
 800079c:	fa25 f101 	lsr.w	r1, r5, r1
 80007a0:	409d      	lsls	r5, r3
 80007a2:	432a      	orrs	r2, r5
 80007a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007a8:	fa1f fe8c 	uxth.w	lr, ip
 80007ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80007b0:	fb07 1510 	mls	r5, r7, r0, r1
 80007b4:	0c11      	lsrs	r1, r2, #16
 80007b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80007ba:	fb00 f50e 	mul.w	r5, r0, lr
 80007be:	428d      	cmp	r5, r1
 80007c0:	fa04 f403 	lsl.w	r4, r4, r3
 80007c4:	d908      	bls.n	80007d8 <__udivmoddi4+0x258>
 80007c6:	eb1c 0101 	adds.w	r1, ip, r1
 80007ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80007ce:	d22f      	bcs.n	8000830 <__udivmoddi4+0x2b0>
 80007d0:	428d      	cmp	r5, r1
 80007d2:	d92d      	bls.n	8000830 <__udivmoddi4+0x2b0>
 80007d4:	3802      	subs	r0, #2
 80007d6:	4461      	add	r1, ip
 80007d8:	1b49      	subs	r1, r1, r5
 80007da:	b292      	uxth	r2, r2
 80007dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80007e0:	fb07 1115 	mls	r1, r7, r5, r1
 80007e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007e8:	fb05 f10e 	mul.w	r1, r5, lr
 80007ec:	4291      	cmp	r1, r2
 80007ee:	d908      	bls.n	8000802 <__udivmoddi4+0x282>
 80007f0:	eb1c 0202 	adds.w	r2, ip, r2
 80007f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80007f8:	d216      	bcs.n	8000828 <__udivmoddi4+0x2a8>
 80007fa:	4291      	cmp	r1, r2
 80007fc:	d914      	bls.n	8000828 <__udivmoddi4+0x2a8>
 80007fe:	3d02      	subs	r5, #2
 8000800:	4462      	add	r2, ip
 8000802:	1a52      	subs	r2, r2, r1
 8000804:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000808:	e738      	b.n	800067c <__udivmoddi4+0xfc>
 800080a:	4631      	mov	r1, r6
 800080c:	4630      	mov	r0, r6
 800080e:	e708      	b.n	8000622 <__udivmoddi4+0xa2>
 8000810:	4639      	mov	r1, r7
 8000812:	e6e6      	b.n	80005e2 <__udivmoddi4+0x62>
 8000814:	4610      	mov	r0, r2
 8000816:	e6fb      	b.n	8000610 <__udivmoddi4+0x90>
 8000818:	4548      	cmp	r0, r9
 800081a:	d2a9      	bcs.n	8000770 <__udivmoddi4+0x1f0>
 800081c:	ebb9 0802 	subs.w	r8, r9, r2
 8000820:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000824:	3b01      	subs	r3, #1
 8000826:	e7a3      	b.n	8000770 <__udivmoddi4+0x1f0>
 8000828:	4645      	mov	r5, r8
 800082a:	e7ea      	b.n	8000802 <__udivmoddi4+0x282>
 800082c:	462b      	mov	r3, r5
 800082e:	e794      	b.n	800075a <__udivmoddi4+0x1da>
 8000830:	4640      	mov	r0, r8
 8000832:	e7d1      	b.n	80007d8 <__udivmoddi4+0x258>
 8000834:	46d0      	mov	r8, sl
 8000836:	e77b      	b.n	8000730 <__udivmoddi4+0x1b0>
 8000838:	3d02      	subs	r5, #2
 800083a:	4462      	add	r2, ip
 800083c:	e732      	b.n	80006a4 <__udivmoddi4+0x124>
 800083e:	4608      	mov	r0, r1
 8000840:	e70a      	b.n	8000658 <__udivmoddi4+0xd8>
 8000842:	4464      	add	r4, ip
 8000844:	3802      	subs	r0, #2
 8000846:	e742      	b.n	80006ce <__udivmoddi4+0x14e>

08000848 <__aeabi_idiv0>:
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop

0800084c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_InitTick+0x3c>)
{
 8000850:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000852:	781a      	ldrb	r2, [r3, #0]
 8000854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000858:	fbb3 f3f2 	udiv	r3, r3, r2
 800085c:	4a0b      	ldr	r2, [pc, #44]	; (800088c <HAL_InitTick+0x40>)
 800085e:	6810      	ldr	r0, [r2, #0]
 8000860:	fbb0 f0f3 	udiv	r0, r0, r3
 8000864:	f000 f8aa 	bl	80009bc <HAL_SYSTICK_Config>
 8000868:	4604      	mov	r4, r0
 800086a:	b958      	cbnz	r0, 8000884 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086c:	2d0f      	cmp	r5, #15
 800086e:	d809      	bhi.n	8000884 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000870:	4602      	mov	r2, r0
 8000872:	4629      	mov	r1, r5
 8000874:	f04f 30ff 	mov.w	r0, #4294967295
 8000878:	f000 f860 	bl	800093c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <HAL_InitTick+0x44>)
 800087e:	4620      	mov	r0, r4
 8000880:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000882:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000884:	2001      	movs	r0, #1
 8000886:	e7fc      	b.n	8000882 <HAL_InitTick+0x36>
 8000888:	20000000 	.word	0x20000000
 800088c:	2000005c 	.word	0x2000005c
 8000890:	20000004 	.word	0x20000004

08000894 <HAL_Init>:
{
 8000894:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000896:	2003      	movs	r0, #3
 8000898:	f000 f83e 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff ffd5 	bl	800084c <HAL_InitTick>
  HAL_MspInit();
 80008a2:	f005 f891 	bl	80059c8 <HAL_MspInit>
}
 80008a6:	2000      	movs	r0, #0
 80008a8:	bd08      	pop	{r3, pc}
	...

080008ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80008ac:	4a03      	ldr	r2, [pc, #12]	; (80008bc <HAL_IncTick+0x10>)
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <HAL_IncTick+0x14>)
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	440b      	add	r3, r1
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	2000438c 	.word	0x2000438c
 80008c0:	20000000 	.word	0x20000000

080008c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008c4:	4b01      	ldr	r3, [pc, #4]	; (80008cc <HAL_GetTick+0x8>)
 80008c6:	6818      	ldr	r0, [r3, #0]
}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	2000438c 	.word	0x2000438c

080008d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008d0:	b538      	push	{r3, r4, r5, lr}
 80008d2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008d4:	f7ff fff6 	bl	80008c4 <HAL_GetTick>
 80008d8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008da:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80008dc:	bf1e      	ittt	ne
 80008de:	4b04      	ldrne	r3, [pc, #16]	; (80008f0 <HAL_Delay+0x20>)
 80008e0:	781b      	ldrbne	r3, [r3, #0]
 80008e2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008e4:	f7ff ffee 	bl	80008c4 <HAL_GetTick>
 80008e8:	1b43      	subs	r3, r0, r5
 80008ea:	42a3      	cmp	r3, r4
 80008ec:	d3fa      	bcc.n	80008e4 <HAL_Delay+0x14>
  {
  }
}
 80008ee:	bd38      	pop	{r3, r4, r5, pc}
 80008f0:	20000000 	.word	0x20000000

080008f4 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F7xx_HAL_VERSION;
}
 80008f4:	4800      	ldr	r0, [pc, #0]	; (80008f8 <HAL_GetHalVersion+0x4>)
 80008f6:	4770      	bx	lr
 80008f8:	01030100 	.word	0x01030100

080008fc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 80008fc:	4b01      	ldr	r3, [pc, #4]	; (8000904 <HAL_GetREVID+0x8>)
 80008fe:	6818      	ldr	r0, [r3, #0]
}
 8000900:	0c00      	lsrs	r0, r0, #16
 8000902:	4770      	bx	lr
 8000904:	e0042000 	.word	0xe0042000

08000908 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000908:	4b02      	ldr	r3, [pc, #8]	; (8000914 <HAL_GetDEVID+0xc>)
 800090a:	6818      	ldr	r0, [r3, #0]
}
 800090c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e0042000 	.word	0xe0042000

08000918 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4907      	ldr	r1, [pc, #28]	; (8000938 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800091a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800091c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800091e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000922:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000926:	0412      	lsls	r2, r2, #16
 8000928:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800092a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800092c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000934:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800093e:	b530      	push	{r4, r5, lr}
 8000940:	68dc      	ldr	r4, [r3, #12]
 8000942:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000946:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800094c:	2b04      	cmp	r3, #4
 800094e:	bf28      	it	cs
 8000950:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000952:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000958:	bf8c      	ite	hi
 800095a:	3c03      	subhi	r4, #3
 800095c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8000962:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000964:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	fa03 f304 	lsl.w	r3, r3, r4
 8000974:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000978:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800097c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800097e:	db06      	blt.n	800098e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000984:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000988:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800098c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098e:	f000 000f 	and.w	r0, r0, #15
 8000992:	4a02      	ldr	r2, [pc, #8]	; (800099c <HAL_NVIC_SetPriority+0x60>)
 8000994:	5413      	strb	r3, [r2, r0]
 8000996:	e7f9      	b.n	800098c <HAL_NVIC_SetPriority+0x50>
 8000998:	e000ed00 	.word	0xe000ed00
 800099c:	e000ed14 	.word	0xe000ed14

080009a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80009a0:	2800      	cmp	r0, #0
 80009a2:	db07      	blt.n	80009b4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a4:	0941      	lsrs	r1, r0, #5
 80009a6:	2301      	movs	r3, #1
 80009a8:	f000 001f 	and.w	r0, r0, #31
 80009ac:	4a02      	ldr	r2, [pc, #8]	; (80009b8 <HAL_NVIC_EnableIRQ+0x18>)
 80009ae:	4083      	lsls	r3, r0
 80009b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000e100 	.word	0xe000e100

080009bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009bc:	3801      	subs	r0, #1
 80009be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009c2:	d20b      	bcs.n	80009dc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <HAL_SYSTICK_Config+0x24>)
 80009ca:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009cc:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ce:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009da:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80009e4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80009e6:	4604      	mov	r4, r0
 80009e8:	b908      	cbnz	r0, 80009ee <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80009ea:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80009ec:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80009ee:	7f43      	ldrb	r3, [r0, #29]
 80009f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009f4:	b913      	cbnz	r3, 80009fc <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80009f6:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80009f8:	f004 fffe 	bl	80059f8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80009fc:	2302      	movs	r3, #2
 80009fe:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000a00:	7923      	ldrb	r3, [r4, #4]
 8000a02:	b9e3      	cbnz	r3, 8000a3e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000a04:	6823      	ldr	r3, [r4, #0]
 8000a06:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <HAL_CRC_Init+0x70>)
 8000a08:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000a0a:	689a      	ldr	r2, [r3, #8]
 8000a0c:	f022 0218 	bic.w	r2, r2, #24
 8000a10:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000a12:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000a14:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000a16:	b9d2      	cbnz	r2, 8000a4e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000a1c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8000a1e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000a20:	689a      	ldr	r2, [r3, #8]
 8000a22:	6961      	ldr	r1, [r4, #20]
 8000a24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000a28:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000a2a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000a2c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a34:	430a      	orrs	r2, r1
 8000a36:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8000a3c:	e7d6      	b.n	80009ec <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000a3e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8000a42:	4620      	mov	r0, r4
 8000a44:	f000 f808 	bl	8000a58 <HAL_CRCEx_Polynomial_Set>
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	d0e2      	beq.n	8000a12 <HAL_CRC_Init+0x2e>
 8000a4c:	e7cd      	b.n	80009ea <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000a4e:	6922      	ldr	r2, [r4, #16]
 8000a50:	e7e4      	b.n	8000a1c <HAL_CRC_Init+0x38>
 8000a52:	bf00      	nop
 8000a54:	04c11db7 	.word	0x04c11db7

08000a58 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000a58:	07cb      	lsls	r3, r1, #31
{
 8000a5a:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000a5c:	d50c      	bpl.n	8000a78 <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000a5e:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000a60:	3b01      	subs	r3, #1
 8000a62:	d31c      	bcc.n	8000a9e <HAL_CRCEx_Polynomial_Set+0x46>
 8000a64:	fa21 f403 	lsr.w	r4, r1, r3
 8000a68:	07e4      	lsls	r4, r4, #31
 8000a6a:	d5f9      	bpl.n	8000a60 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8000a6c:	2a10      	cmp	r2, #16
 8000a6e:	d012      	beq.n	8000a96 <HAL_CRCEx_Polynomial_Set+0x3e>
 8000a70:	d804      	bhi.n	8000a7c <HAL_CRCEx_Polynomial_Set+0x24>
 8000a72:	b13a      	cbz	r2, 8000a84 <HAL_CRCEx_Polynomial_Set+0x2c>
 8000a74:	2a08      	cmp	r2, #8
 8000a76:	d010      	beq.n	8000a9a <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 8000a78:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8000a7a:	e00b      	b.n	8000a94 <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 8000a7c:	2a18      	cmp	r2, #24
 8000a7e:	d1fb      	bne.n	8000a78 <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 8000a80:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8000a82:	d8f9      	bhi.n	8000a78 <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000a84:	6800      	ldr	r0, [r0, #0]
 8000a86:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000a88:	6883      	ldr	r3, [r0, #8]
 8000a8a:	f023 0318 	bic.w	r3, r3, #24
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	6083      	str	r3, [r0, #8]
 8000a92:	2000      	movs	r0, #0
}
 8000a94:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8000a96:	2b07      	cmp	r3, #7
 8000a98:	e7f3      	b.n	8000a82 <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 8000a9a:	2b0f      	cmp	r3, #15
 8000a9c:	e7f1      	b.n	8000a82 <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 8000a9e:	2a00      	cmp	r2, #0
 8000aa0:	d1ea      	bne.n	8000a78 <HAL_CRCEx_Polynomial_Set+0x20>
 8000aa2:	e7ef      	b.n	8000a84 <HAL_CRCEx_Polynomial_Set+0x2c>

08000aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000aa8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8000c64 <HAL_GPIO_Init+0x1c0>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aae:	4a6b      	ldr	r2, [pc, #428]	; (8000c5c <HAL_GPIO_Init+0x1b8>)
    ioposition = ((uint32_t)0x01) << position;
 8000ab0:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ab2:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000ab4:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ab6:	ea04 0c05 	and.w	ip, r4, r5
    if (iocurrent == ioposition)
 8000aba:	43ac      	bics	r4, r5
 8000abc:	f040 80b4 	bne.w	8000c28 <HAL_GPIO_Init+0x184>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ac0:	684d      	ldr	r5, [r1, #4]
 8000ac2:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ac6:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ac8:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000acc:	fa06 f608 	lsl.w	r6, r6, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ad0:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ad2:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ad4:	2f01      	cmp	r7, #1
 8000ad6:	d834      	bhi.n	8000b42 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 8000ad8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ada:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ade:	68cf      	ldr	r7, [r1, #12]
 8000ae0:	fa07 f708 	lsl.w	r7, r7, r8
 8000ae4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000ae8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000aea:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aec:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000af0:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000af4:	409f      	lsls	r7, r3
 8000af6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000afa:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000afc:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000afe:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b00:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000b04:	688f      	ldr	r7, [r1, #8]
 8000b06:	fa07 f708 	lsl.w	r7, r7, r8
 8000b0a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8000b0e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b10:	d119      	bne.n	8000b46 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8000b12:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b16:	f003 0b07 	and.w	fp, r3, #7
 8000b1a:	f04f 0e0f 	mov.w	lr, #15
 8000b1e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000b22:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000b26:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b2a:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000b2e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b32:	690f      	ldr	r7, [r1, #16]
 8000b34:	fa07 f70b 	lsl.w	r7, r7, fp
 8000b38:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8000b3c:	f8ca 7020 	str.w	r7, [sl, #32]
 8000b40:	e001      	b.n	8000b46 <HAL_GPIO_Init+0xa2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b42:	2c03      	cmp	r4, #3
 8000b44:	d1da      	bne.n	8000afc <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8000b46:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b48:	fa04 f408 	lsl.w	r4, r4, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b4c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b50:	ea07 0706 	and.w	r7, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b54:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8000b58:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b5a:	d065      	beq.n	8000c28 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5c:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8000b60:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b64:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b68:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000b6c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b70:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8000b76:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8000b7a:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8000b7e:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8000b82:	9401      	str	r4, [sp, #4]
 8000b84:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b86:	240f      	movs	r4, #15
        temp = SYSCFG->EXTICR[position >> 2];
 8000b88:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b8c:	40bc      	lsls	r4, r7
 8000b8e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b92:	4c33      	ldr	r4, [pc, #204]	; (8000c60 <HAL_GPIO_Init+0x1bc>)
 8000b94:	42a0      	cmp	r0, r4
 8000b96:	d04e      	beq.n	8000c36 <HAL_GPIO_Init+0x192>
 8000b98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000b9c:	42a0      	cmp	r0, r4
 8000b9e:	d04c      	beq.n	8000c3a <HAL_GPIO_Init+0x196>
 8000ba0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000ba4:	42a0      	cmp	r0, r4
 8000ba6:	d04a      	beq.n	8000c3e <HAL_GPIO_Init+0x19a>
 8000ba8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bac:	42a0      	cmp	r0, r4
 8000bae:	d048      	beq.n	8000c42 <HAL_GPIO_Init+0x19e>
 8000bb0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bb4:	42a0      	cmp	r0, r4
 8000bb6:	d046      	beq.n	8000c46 <HAL_GPIO_Init+0x1a2>
 8000bb8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bbc:	42a0      	cmp	r0, r4
 8000bbe:	d044      	beq.n	8000c4a <HAL_GPIO_Init+0x1a6>
 8000bc0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bc4:	42a0      	cmp	r0, r4
 8000bc6:	d042      	beq.n	8000c4e <HAL_GPIO_Init+0x1aa>
 8000bc8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bcc:	42a0      	cmp	r0, r4
 8000bce:	d040      	beq.n	8000c52 <HAL_GPIO_Init+0x1ae>
 8000bd0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bd4:	42a0      	cmp	r0, r4
 8000bd6:	d03e      	beq.n	8000c56 <HAL_GPIO_Init+0x1b2>
 8000bd8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bdc:	42a0      	cmp	r0, r4
 8000bde:	bf0c      	ite	eq
 8000be0:	2409      	moveq	r4, #9
 8000be2:	240a      	movne	r4, #10
 8000be4:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000be6:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000be8:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bec:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bee:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8000bf2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bf4:	bf54      	ite	pl
 8000bf6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000bf8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bfc:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8000bfe:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8000c00:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c02:	bf54      	ite	pl
 8000c04:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000c06:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c0a:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8000c0c:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8000c0e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000c10:	bf54      	ite	pl
 8000c12:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000c14:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c18:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8000c1a:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8000c1c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c1e:	bf54      	ite	pl
 8000c20:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000c22:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000c26:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000c28:	3301      	adds	r3, #1
 8000c2a:	2b10      	cmp	r3, #16
 8000c2c:	f47f af40 	bne.w	8000ab0 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000c30:	b003      	add	sp, #12
 8000c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c36:	2400      	movs	r4, #0
 8000c38:	e7d4      	b.n	8000be4 <HAL_GPIO_Init+0x140>
 8000c3a:	2401      	movs	r4, #1
 8000c3c:	e7d2      	b.n	8000be4 <HAL_GPIO_Init+0x140>
 8000c3e:	2402      	movs	r4, #2
 8000c40:	e7d0      	b.n	8000be4 <HAL_GPIO_Init+0x140>
 8000c42:	2403      	movs	r4, #3
 8000c44:	e7ce      	b.n	8000be4 <HAL_GPIO_Init+0x140>
 8000c46:	2404      	movs	r4, #4
 8000c48:	e7cc      	b.n	8000be4 <HAL_GPIO_Init+0x140>
 8000c4a:	2405      	movs	r4, #5
 8000c4c:	e7ca      	b.n	8000be4 <HAL_GPIO_Init+0x140>
 8000c4e:	2406      	movs	r4, #6
 8000c50:	e7c8      	b.n	8000be4 <HAL_GPIO_Init+0x140>
 8000c52:	2407      	movs	r4, #7
 8000c54:	e7c6      	b.n	8000be4 <HAL_GPIO_Init+0x140>
 8000c56:	2408      	movs	r4, #8
 8000c58:	e7c4      	b.n	8000be4 <HAL_GPIO_Init+0x140>
 8000c5a:	bf00      	nop
 8000c5c:	40013c00 	.word	0x40013c00
 8000c60:	40020000 	.word	0x40020000
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c68:	b10a      	cbz	r2, 8000c6e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c6a:	6181      	str	r1, [r0, #24]
  }
}
 8000c6c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c6e:	0409      	lsls	r1, r1, #16
 8000c70:	e7fb      	b.n	8000c6a <HAL_GPIO_WritePin+0x2>
	...

08000c74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c78:	4604      	mov	r4, r0
 8000c7a:	b340      	cbz	r0, 8000cce <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7c:	6803      	ldr	r3, [r0, #0]
 8000c7e:	07db      	lsls	r3, r3, #31
 8000c80:	d410      	bmi.n	8000ca4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c82:	6823      	ldr	r3, [r4, #0]
 8000c84:	079f      	lsls	r7, r3, #30
 8000c86:	d461      	bmi.n	8000d4c <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c88:	6823      	ldr	r3, [r4, #0]
 8000c8a:	0719      	lsls	r1, r3, #28
 8000c8c:	f100 80a6 	bmi.w	8000ddc <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c90:	6823      	ldr	r3, [r4, #0]
 8000c92:	075a      	lsls	r2, r3, #29
 8000c94:	f100 80c7 	bmi.w	8000e26 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c98:	69a2      	ldr	r2, [r4, #24]
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	f040 8130 	bne.w	8000f00 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	e02c      	b.n	8000cfe <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ca4:	4b94      	ldr	r3, [pc, #592]	; (8000ef8 <HAL_RCC_OscConfig+0x284>)
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	f002 020c 	and.w	r2, r2, #12
 8000cac:	2a04      	cmp	r2, #4
 8000cae:	d007      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	f002 020c 	and.w	r2, r2, #12
 8000cb6:	2a08      	cmp	r2, #8
 8000cb8:	d10b      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x5e>
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	025e      	lsls	r6, r3, #9
 8000cbe:	d508      	bpl.n	8000cd2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc0:	4b8d      	ldr	r3, [pc, #564]	; (8000ef8 <HAL_RCC_OscConfig+0x284>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	039d      	lsls	r5, r3, #14
 8000cc6:	d5dc      	bpl.n	8000c82 <HAL_RCC_OscConfig+0xe>
 8000cc8:	6863      	ldr	r3, [r4, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1d9      	bne.n	8000c82 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8000cce:	2001      	movs	r0, #1
 8000cd0:	e015      	b.n	8000cfe <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd2:	6863      	ldr	r3, [r4, #4]
 8000cd4:	4d88      	ldr	r5, [pc, #544]	; (8000ef8 <HAL_RCC_OscConfig+0x284>)
 8000cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cda:	d113      	bne.n	8000d04 <HAL_RCC_OscConfig+0x90>
 8000cdc:	682b      	ldr	r3, [r5, #0]
 8000cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ce4:	f7ff fdee 	bl	80008c4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce8:	4e83      	ldr	r6, [pc, #524]	; (8000ef8 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8000cea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cec:	6833      	ldr	r3, [r6, #0]
 8000cee:	0398      	lsls	r0, r3, #14
 8000cf0:	d4c7      	bmi.n	8000c82 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cf2:	f7ff fde7 	bl	80008c4 <HAL_GetTick>
 8000cf6:	1b40      	subs	r0, r0, r5
 8000cf8:	2864      	cmp	r0, #100	; 0x64
 8000cfa:	d9f7      	bls.n	8000cec <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8000cfc:	2003      	movs	r0, #3
}
 8000cfe:	b002      	add	sp, #8
 8000d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d04:	b99b      	cbnz	r3, 8000d2e <HAL_RCC_OscConfig+0xba>
 8000d06:	682b      	ldr	r3, [r5, #0]
 8000d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0c:	602b      	str	r3, [r5, #0]
 8000d0e:	682b      	ldr	r3, [r5, #0]
 8000d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d14:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d16:	f7ff fdd5 	bl	80008c4 <HAL_GetTick>
 8000d1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1c:	682b      	ldr	r3, [r5, #0]
 8000d1e:	0399      	lsls	r1, r3, #14
 8000d20:	d5af      	bpl.n	8000c82 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d22:	f7ff fdcf 	bl	80008c4 <HAL_GetTick>
 8000d26:	1b80      	subs	r0, r0, r6
 8000d28:	2864      	cmp	r0, #100	; 0x64
 8000d2a:	d9f7      	bls.n	8000d1c <HAL_RCC_OscConfig+0xa8>
 8000d2c:	e7e6      	b.n	8000cfc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d32:	682b      	ldr	r3, [r5, #0]
 8000d34:	d103      	bne.n	8000d3e <HAL_RCC_OscConfig+0xca>
 8000d36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3a:	602b      	str	r3, [r5, #0]
 8000d3c:	e7ce      	b.n	8000cdc <HAL_RCC_OscConfig+0x68>
 8000d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d42:	602b      	str	r3, [r5, #0]
 8000d44:	682b      	ldr	r3, [r5, #0]
 8000d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4a:	e7ca      	b.n	8000ce2 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d4c:	4b6a      	ldr	r3, [pc, #424]	; (8000ef8 <HAL_RCC_OscConfig+0x284>)
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	f012 0f0c 	tst.w	r2, #12
 8000d54:	d007      	beq.n	8000d66 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	f002 020c 	and.w	r2, r2, #12
 8000d5c:	2a08      	cmp	r2, #8
 8000d5e:	d111      	bne.n	8000d84 <HAL_RCC_OscConfig+0x110>
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	025a      	lsls	r2, r3, #9
 8000d64:	d40e      	bmi.n	8000d84 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d66:	4a64      	ldr	r2, [pc, #400]	; (8000ef8 <HAL_RCC_OscConfig+0x284>)
 8000d68:	6813      	ldr	r3, [r2, #0]
 8000d6a:	079b      	lsls	r3, r3, #30
 8000d6c:	d502      	bpl.n	8000d74 <HAL_RCC_OscConfig+0x100>
 8000d6e:	68e3      	ldr	r3, [r4, #12]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d1ac      	bne.n	8000cce <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d74:	6813      	ldr	r3, [r2, #0]
 8000d76:	6921      	ldr	r1, [r4, #16]
 8000d78:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d7c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d80:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d82:	e781      	b.n	8000c88 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d84:	68e3      	ldr	r3, [r4, #12]
 8000d86:	4d5c      	ldr	r5, [pc, #368]	; (8000ef8 <HAL_RCC_OscConfig+0x284>)
 8000d88:	b1bb      	cbz	r3, 8000dba <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8000d8a:	682b      	ldr	r3, [r5, #0]
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d92:	f7ff fd97 	bl	80008c4 <HAL_GetTick>
 8000d96:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	079f      	lsls	r7, r3, #30
 8000d9c:	d507      	bpl.n	8000dae <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d9e:	682b      	ldr	r3, [r5, #0]
 8000da0:	6922      	ldr	r2, [r4, #16]
 8000da2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000da6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000daa:	602b      	str	r3, [r5, #0]
 8000dac:	e76c      	b.n	8000c88 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dae:	f7ff fd89 	bl	80008c4 <HAL_GetTick>
 8000db2:	1b80      	subs	r0, r0, r6
 8000db4:	2802      	cmp	r0, #2
 8000db6:	d9ef      	bls.n	8000d98 <HAL_RCC_OscConfig+0x124>
 8000db8:	e7a0      	b.n	8000cfc <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8000dba:	682b      	ldr	r3, [r5, #0]
 8000dbc:	f023 0301 	bic.w	r3, r3, #1
 8000dc0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000dc2:	f7ff fd7f 	bl	80008c4 <HAL_GetTick>
 8000dc6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dc8:	682b      	ldr	r3, [r5, #0]
 8000dca:	0798      	lsls	r0, r3, #30
 8000dcc:	f57f af5c 	bpl.w	8000c88 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fd78 	bl	80008c4 <HAL_GetTick>
 8000dd4:	1b80      	subs	r0, r0, r6
 8000dd6:	2802      	cmp	r0, #2
 8000dd8:	d9f6      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x154>
 8000dda:	e78f      	b.n	8000cfc <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000ddc:	6963      	ldr	r3, [r4, #20]
 8000dde:	4d46      	ldr	r5, [pc, #280]	; (8000ef8 <HAL_RCC_OscConfig+0x284>)
 8000de0:	b183      	cbz	r3, 8000e04 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8000de2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000dea:	f7ff fd6b 	bl	80008c4 <HAL_GetTick>
 8000dee:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000df2:	079b      	lsls	r3, r3, #30
 8000df4:	f53f af4c 	bmi.w	8000c90 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df8:	f7ff fd64 	bl	80008c4 <HAL_GetTick>
 8000dfc:	1b80      	subs	r0, r0, r6
 8000dfe:	2802      	cmp	r0, #2
 8000e00:	d9f6      	bls.n	8000df0 <HAL_RCC_OscConfig+0x17c>
 8000e02:	e77b      	b.n	8000cfc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8000e04:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000e0c:	f7ff fd5a 	bl	80008c4 <HAL_GetTick>
 8000e10:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e12:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e14:	079f      	lsls	r7, r3, #30
 8000e16:	f57f af3b 	bpl.w	8000c90 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e1a:	f7ff fd53 	bl	80008c4 <HAL_GetTick>
 8000e1e:	1b80      	subs	r0, r0, r6
 8000e20:	2802      	cmp	r0, #2
 8000e22:	d9f6      	bls.n	8000e12 <HAL_RCC_OscConfig+0x19e>
 8000e24:	e76a      	b.n	8000cfc <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e26:	4b34      	ldr	r3, [pc, #208]	; (8000ef8 <HAL_RCC_OscConfig+0x284>)
 8000e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2a:	00d0      	lsls	r0, r2, #3
 8000e2c:	d427      	bmi.n	8000e7e <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000e30:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e36:	641a      	str	r2, [r3, #64]	; 0x40
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e42:	4d2e      	ldr	r5, [pc, #184]	; (8000efc <HAL_RCC_OscConfig+0x288>)
 8000e44:	682b      	ldr	r3, [r5, #0]
 8000e46:	05d9      	lsls	r1, r3, #23
 8000e48:	d51b      	bpl.n	8000e82 <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e4a:	68a3      	ldr	r3, [r4, #8]
 8000e4c:	4d2a      	ldr	r5, [pc, #168]	; (8000ef8 <HAL_RCC_OscConfig+0x284>)
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d127      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x22e>
 8000e52:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e5a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e5e:	f7ff fd31 	bl	80008c4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e62:	4e25      	ldr	r6, [pc, #148]	; (8000ef8 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8000e64:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e66:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000e68:	079b      	lsls	r3, r3, #30
 8000e6a:	d53f      	bpl.n	8000eec <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8000e6c:	2f00      	cmp	r7, #0
 8000e6e:	f43f af13 	beq.w	8000c98 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e72:	4a21      	ldr	r2, [pc, #132]	; (8000ef8 <HAL_RCC_OscConfig+0x284>)
 8000e74:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7c:	e70c      	b.n	8000c98 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8000e7e:	2700      	movs	r7, #0
 8000e80:	e7df      	b.n	8000e42 <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 8000e82:	682b      	ldr	r3, [r5, #0]
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000e8a:	f7ff fd1b 	bl	80008c4 <HAL_GetTick>
 8000e8e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e90:	682b      	ldr	r3, [r5, #0]
 8000e92:	05da      	lsls	r2, r3, #23
 8000e94:	d4d9      	bmi.n	8000e4a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e96:	f7ff fd15 	bl	80008c4 <HAL_GetTick>
 8000e9a:	1b80      	subs	r0, r0, r6
 8000e9c:	2864      	cmp	r0, #100	; 0x64
 8000e9e:	d9f7      	bls.n	8000e90 <HAL_RCC_OscConfig+0x21c>
 8000ea0:	e72c      	b.n	8000cfc <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea2:	b9ab      	cbnz	r3, 8000ed0 <HAL_RCC_OscConfig+0x25c>
 8000ea4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ea6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eaa:	f023 0301 	bic.w	r3, r3, #1
 8000eae:	672b      	str	r3, [r5, #112]	; 0x70
 8000eb0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000eb2:	f023 0304 	bic.w	r3, r3, #4
 8000eb6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000eb8:	f7ff fd04 	bl	80008c4 <HAL_GetTick>
 8000ebc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ebe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ec0:	0798      	lsls	r0, r3, #30
 8000ec2:	d5d3      	bpl.n	8000e6c <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ec4:	f7ff fcfe 	bl	80008c4 <HAL_GetTick>
 8000ec8:	1b80      	subs	r0, r0, r6
 8000eca:	4540      	cmp	r0, r8
 8000ecc:	d9f7      	bls.n	8000ebe <HAL_RCC_OscConfig+0x24a>
 8000ece:	e715      	b.n	8000cfc <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed0:	2b05      	cmp	r3, #5
 8000ed2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ed4:	d103      	bne.n	8000ede <HAL_RCC_OscConfig+0x26a>
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	672b      	str	r3, [r5, #112]	; 0x70
 8000edc:	e7b9      	b.n	8000e52 <HAL_RCC_OscConfig+0x1de>
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	672b      	str	r3, [r5, #112]	; 0x70
 8000ee4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ee6:	f023 0304 	bic.w	r3, r3, #4
 8000eea:	e7b5      	b.n	8000e58 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eec:	f7ff fcea 	bl	80008c4 <HAL_GetTick>
 8000ef0:	1b40      	subs	r0, r0, r5
 8000ef2:	4540      	cmp	r0, r8
 8000ef4:	d9b7      	bls.n	8000e66 <HAL_RCC_OscConfig+0x1f2>
 8000ef6:	e701      	b.n	8000cfc <HAL_RCC_OscConfig+0x88>
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f00:	4d3c      	ldr	r5, [pc, #240]	; (8000ff4 <HAL_RCC_OscConfig+0x380>)
 8000f02:	68ab      	ldr	r3, [r5, #8]
 8000f04:	f003 030c 	and.w	r3, r3, #12
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	d042      	beq.n	8000f92 <HAL_RCC_OscConfig+0x31e>
        __HAL_RCC_PLL_DISABLE();
 8000f0c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f0e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f14:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f16:	d12f      	bne.n	8000f78 <HAL_RCC_OscConfig+0x304>
        tickstart = HAL_GetTick();
 8000f18:	f7ff fcd4 	bl	80008c4 <HAL_GetTick>
 8000f1c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f1e:	682b      	ldr	r3, [r5, #0]
 8000f20:	0199      	lsls	r1, r3, #6
 8000f22:	d423      	bmi.n	8000f6c <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f24:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f2c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000f30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f36:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f38:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000f3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f3e:	0852      	lsrs	r2, r2, #1
 8000f40:	3a01      	subs	r2, #1
 8000f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f46:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f48:	682b      	ldr	r3, [r5, #0]
 8000f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f4e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f50:	f7ff fcb8 	bl	80008c4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f54:	4d27      	ldr	r5, [pc, #156]	; (8000ff4 <HAL_RCC_OscConfig+0x380>)
        tickstart = HAL_GetTick();
 8000f56:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	019a      	lsls	r2, r3, #6
 8000f5c:	f53f aea0 	bmi.w	8000ca0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f60:	f7ff fcb0 	bl	80008c4 <HAL_GetTick>
 8000f64:	1b00      	subs	r0, r0, r4
 8000f66:	2802      	cmp	r0, #2
 8000f68:	d9f6      	bls.n	8000f58 <HAL_RCC_OscConfig+0x2e4>
 8000f6a:	e6c7      	b.n	8000cfc <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6c:	f7ff fcaa 	bl	80008c4 <HAL_GetTick>
 8000f70:	1b80      	subs	r0, r0, r6
 8000f72:	2802      	cmp	r0, #2
 8000f74:	d9d3      	bls.n	8000f1e <HAL_RCC_OscConfig+0x2aa>
 8000f76:	e6c1      	b.n	8000cfc <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8000f78:	f7ff fca4 	bl	80008c4 <HAL_GetTick>
 8000f7c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	019b      	lsls	r3, r3, #6
 8000f82:	f57f ae8d 	bpl.w	8000ca0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f86:	f7ff fc9d 	bl	80008c4 <HAL_GetTick>
 8000f8a:	1b00      	subs	r0, r0, r4
 8000f8c:	2802      	cmp	r0, #2
 8000f8e:	d9f6      	bls.n	8000f7e <HAL_RCC_OscConfig+0x30a>
 8000f90:	e6b4      	b.n	8000cfc <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f92:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8000f94:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f96:	f43f ae9a 	beq.w	8000cce <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f9e:	69e1      	ldr	r1, [r4, #28]
 8000fa0:	428a      	cmp	r2, r1
 8000fa2:	f47f ae94 	bne.w	8000cce <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000faa:	6a21      	ldr	r1, [r4, #32]
 8000fac:	428a      	cmp	r2, r1
 8000fae:	f47f ae8e 	bne.w	8000cce <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fb2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fb8:	401a      	ands	r2, r3
 8000fba:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000fbe:	f47f ae86 	bne.w	8000cce <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000fc2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fc4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000fc8:	0852      	lsrs	r2, r2, #1
 8000fca:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fcc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000fd0:	f47f ae7d 	bne.w	8000cce <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000fd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000fd8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000fda:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8000fde:	f47f ae76 	bne.w	8000cce <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8000fe2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8000fe6:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000fe8:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8000fec:	f43f ae58 	beq.w	8000ca0 <HAL_RCC_OscConfig+0x2c>
 8000ff0:	e66d      	b.n	8000cce <HAL_RCC_OscConfig+0x5a>
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ff8:	4913      	ldr	r1, [pc, #76]	; (8001048 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000ffa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ffc:	688b      	ldr	r3, [r1, #8]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b04      	cmp	r3, #4
 8001004:	d01b      	beq.n	800103e <HAL_RCC_GetSysClockFreq+0x46>
 8001006:	2b08      	cmp	r3, #8
 8001008:	d11b      	bne.n	8001042 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800100a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800100c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800100e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001010:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001014:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001018:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800101c:	bf1a      	itte	ne
 800101e:	480b      	ldrne	r0, [pc, #44]	; (800104c <HAL_RCC_GetSysClockFreq+0x54>)
 8001020:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001022:	480b      	ldreq	r0, [pc, #44]	; (8001050 <HAL_RCC_GetSysClockFreq+0x58>)
 8001024:	fba1 0100 	umull	r0, r1, r1, r0
 8001028:	f7ff fa70 	bl	800050c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_RCC_GetSysClockFreq+0x50>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001034:	3301      	adds	r3, #1
 8001036:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001038:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800103c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <HAL_RCC_GetSysClockFreq+0x54>)
 8001040:	e7fc      	b.n	800103c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8001042:	4803      	ldr	r0, [pc, #12]	; (8001050 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001044:	e7fa      	b.n	800103c <HAL_RCC_GetSysClockFreq+0x44>
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	007a1200 	.word	0x007a1200
 8001050:	00f42400 	.word	0x00f42400

08001054 <HAL_RCC_ClockConfig>:
{
 8001054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001058:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800105a:	4604      	mov	r4, r0
 800105c:	b910      	cbnz	r0, 8001064 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800105e:	2001      	movs	r0, #1
}
 8001060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001064:	4a45      	ldr	r2, [pc, #276]	; (800117c <HAL_RCC_ClockConfig+0x128>)
 8001066:	6813      	ldr	r3, [r2, #0]
 8001068:	f003 030f 	and.w	r3, r3, #15
 800106c:	428b      	cmp	r3, r1
 800106e:	d328      	bcc.n	80010c2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001070:	6821      	ldr	r1, [r4, #0]
 8001072:	078f      	lsls	r7, r1, #30
 8001074:	d430      	bmi.n	80010d8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001076:	07c8      	lsls	r0, r1, #31
 8001078:	d443      	bmi.n	8001102 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800107a:	4a40      	ldr	r2, [pc, #256]	; (800117c <HAL_RCC_ClockConfig+0x128>)
 800107c:	6813      	ldr	r3, [r2, #0]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	42ab      	cmp	r3, r5
 8001084:	d866      	bhi.n	8001154 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001086:	6822      	ldr	r2, [r4, #0]
 8001088:	0751      	lsls	r1, r2, #29
 800108a:	d46f      	bmi.n	800116c <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800108c:	0713      	lsls	r3, r2, #28
 800108e:	d507      	bpl.n	80010a0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001090:	4a3b      	ldr	r2, [pc, #236]	; (8001180 <HAL_RCC_ClockConfig+0x12c>)
 8001092:	6921      	ldr	r1, [r4, #16]
 8001094:	6893      	ldr	r3, [r2, #8]
 8001096:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800109a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800109e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010a0:	f7ff ffaa 	bl	8000ff8 <HAL_RCC_GetSysClockFreq>
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <HAL_RCC_ClockConfig+0x12c>)
 80010a6:	4a37      	ldr	r2, [pc, #220]	; (8001184 <HAL_RCC_ClockConfig+0x130>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010ae:	5cd3      	ldrb	r3, [r2, r3]
 80010b0:	40d8      	lsrs	r0, r3
 80010b2:	4b35      	ldr	r3, [pc, #212]	; (8001188 <HAL_RCC_ClockConfig+0x134>)
 80010b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <HAL_RCC_ClockConfig+0x138>)
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	f7ff fbc7 	bl	800084c <HAL_InitTick>
  return HAL_OK;
 80010be:	2000      	movs	r0, #0
 80010c0:	e7ce      	b.n	8001060 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c2:	6813      	ldr	r3, [r2, #0]
 80010c4:	f023 030f 	bic.w	r3, r3, #15
 80010c8:	430b      	orrs	r3, r1
 80010ca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010cc:	6813      	ldr	r3, [r2, #0]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	428b      	cmp	r3, r1
 80010d4:	d1c3      	bne.n	800105e <HAL_RCC_ClockConfig+0xa>
 80010d6:	e7cb      	b.n	8001070 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d8:	f011 0f04 	tst.w	r1, #4
 80010dc:	4b28      	ldr	r3, [pc, #160]	; (8001180 <HAL_RCC_ClockConfig+0x12c>)
 80010de:	d003      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80010e6:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e8:	070e      	lsls	r6, r1, #28
 80010ea:	d503      	bpl.n	80010f4 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80010f2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	68a0      	ldr	r0, [r4, #8]
 80010f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010fc:	4302      	orrs	r2, r0
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	e7b9      	b.n	8001076 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001102:	6861      	ldr	r1, [r4, #4]
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <HAL_RCC_ClockConfig+0x12c>)
 8001106:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001108:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800110a:	d11b      	bne.n	8001144 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001110:	d0a5      	beq.n	800105e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001112:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001114:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001118:	4f19      	ldr	r7, [pc, #100]	; (8001180 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800111a:	f022 0203 	bic.w	r2, r2, #3
 800111e:	430a      	orrs	r2, r1
 8001120:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001122:	f7ff fbcf 	bl	80008c4 <HAL_GetTick>
 8001126:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	6862      	ldr	r2, [r4, #4]
 800112c:	f003 030c 	and.w	r3, r3, #12
 8001130:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001134:	d0a1      	beq.n	800107a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001136:	f7ff fbc5 	bl	80008c4 <HAL_GetTick>
 800113a:	1b80      	subs	r0, r0, r6
 800113c:	4540      	cmp	r0, r8
 800113e:	d9f3      	bls.n	8001128 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001140:	2003      	movs	r0, #3
 8001142:	e78d      	b.n	8001060 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001144:	2902      	cmp	r1, #2
 8001146:	d102      	bne.n	800114e <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001148:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800114c:	e7e0      	b.n	8001110 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114e:	f012 0f02 	tst.w	r2, #2
 8001152:	e7dd      	b.n	8001110 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001154:	6813      	ldr	r3, [r2, #0]
 8001156:	f023 030f 	bic.w	r3, r3, #15
 800115a:	432b      	orrs	r3, r5
 800115c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800115e:	6813      	ldr	r3, [r2, #0]
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	42ab      	cmp	r3, r5
 8001166:	f47f af7a 	bne.w	800105e <HAL_RCC_ClockConfig+0xa>
 800116a:	e78c      	b.n	8001086 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800116c:	4904      	ldr	r1, [pc, #16]	; (8001180 <HAL_RCC_ClockConfig+0x12c>)
 800116e:	68e0      	ldr	r0, [r4, #12]
 8001170:	688b      	ldr	r3, [r1, #8]
 8001172:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001176:	4303      	orrs	r3, r0
 8001178:	608b      	str	r3, [r1, #8]
 800117a:	e787      	b.n	800108c <HAL_RCC_ClockConfig+0x38>
 800117c:	40023c00 	.word	0x40023c00
 8001180:	40023800 	.word	0x40023800
 8001184:	0800d108 	.word	0x0800d108
 8001188:	2000005c 	.word	0x2000005c
 800118c:	20000004 	.word	0x20000004

08001190 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001190:	4b01      	ldr	r3, [pc, #4]	; (8001198 <HAL_RCC_GetHCLKFreq+0x8>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	2000005c 	.word	0x2000005c

0800119c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80011a6:	5cd3      	ldrb	r3, [r2, r3]
 80011a8:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80011aa:	6810      	ldr	r0, [r2, #0]
}
 80011ac:	40d8      	lsrs	r0, r3
 80011ae:	4770      	bx	lr
 80011b0:	40023800 	.word	0x40023800
 80011b4:	0800d118 	.word	0x0800d118
 80011b8:	2000005c 	.word	0x2000005c

080011bc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	4a03      	ldr	r2, [pc, #12]	; (80011d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80011ca:	6810      	ldr	r0, [r2, #0]
}
 80011cc:	40d8      	lsrs	r0, r3
 80011ce:	4770      	bx	lr
 80011d0:	40023800 	.word	0x40023800
 80011d4:	0800d118 	.word	0x0800d118
 80011d8:	2000005c 	.word	0x2000005c

080011dc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80011dc:	6803      	ldr	r3, [r0, #0]
{
 80011de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80011e2:	f013 0601 	ands.w	r6, r3, #1
{
 80011e6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80011e8:	d00b      	beq.n	8001202 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80011ea:	4ab1      	ldr	r2, [pc, #708]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80011ec:	6891      	ldr	r1, [r2, #8]
 80011ee:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80011f2:	6091      	str	r1, [r2, #8]
 80011f4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80011f6:	6891      	ldr	r1, [r2, #8]
 80011f8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80011fa:	fab6 f686 	clz	r6, r6
 80011fe:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001200:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001202:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001206:	d012      	beq.n	800122e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001208:	49a9      	ldr	r1, [pc, #676]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800120a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800120c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001210:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001214:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001218:	bf08      	it	eq
 800121a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800121c:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001220:	bf16      	itet	ne
 8001222:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001226:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001228:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800122a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800122e:	02d9      	lsls	r1, r3, #11
 8001230:	d510      	bpl.n	8001254 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001232:	489f      	ldr	r0, [pc, #636]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001234:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001236:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800123a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800123e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001242:	ea42 0201 	orr.w	r2, r2, r1
 8001246:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800124a:	f000 81aa 	beq.w	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800124e:	2900      	cmp	r1, #0
 8001250:	bf08      	it	eq
 8001252:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001254:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001258:	bf18      	it	ne
 800125a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800125c:	069a      	lsls	r2, r3, #26
 800125e:	d532      	bpl.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001260:	4b93      	ldr	r3, [pc, #588]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001262:	4f94      	ldr	r7, [pc, #592]	; (80014b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001266:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800126a:	641a      	str	r2, [r3, #64]	; 0x40
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800127e:	f7ff fb21 	bl	80008c4 <HAL_GetTick>
 8001282:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	05db      	lsls	r3, r3, #23
 8001288:	f140 818d 	bpl.w	80015a6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800128c:	4f88      	ldr	r7, [pc, #544]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800128e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001292:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001296:	f040 8191 	bne.w	80015bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800129a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800129c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80012a0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80012a4:	4a82      	ldr	r2, [pc, #520]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80012a6:	f040 81ae 	bne.w	8001606 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80012aa:	6891      	ldr	r1, [r2, #8]
 80012ac:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80012b0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80012b4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80012b8:	4301      	orrs	r1, r0
 80012ba:	6091      	str	r1, [r2, #8]
 80012bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80012c2:	430b      	orrs	r3, r1
 80012c4:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	06da      	lsls	r2, r3, #27
 80012ca:	d50c      	bpl.n	80012e6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80012cc:	4a78      	ldr	r2, [pc, #480]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80012ce:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80012d2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80012d6:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80012da:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80012de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80012e0:	4301      	orrs	r1, r0
 80012e2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80012e6:	045f      	lsls	r7, r3, #17
 80012e8:	d508      	bpl.n	80012fc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80012ea:	4971      	ldr	r1, [pc, #452]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80012ec:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80012ee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012f2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80012f6:	4302      	orrs	r2, r0
 80012f8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80012fc:	0418      	lsls	r0, r3, #16
 80012fe:	d508      	bpl.n	8001312 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001300:	496b      	ldr	r1, [pc, #428]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001302:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001304:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001308:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800130c:	4302      	orrs	r2, r0
 800130e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001312:	03d9      	lsls	r1, r3, #15
 8001314:	d508      	bpl.n	8001328 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001316:	4966      	ldr	r1, [pc, #408]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001318:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800131a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800131e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001322:	4302      	orrs	r2, r0
 8001324:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001328:	039a      	lsls	r2, r3, #14
 800132a:	d508      	bpl.n	800133e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800132c:	4960      	ldr	r1, [pc, #384]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800132e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001330:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001334:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001338:	4302      	orrs	r2, r0
 800133a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800133e:	065f      	lsls	r7, r3, #25
 8001340:	d508      	bpl.n	8001354 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001342:	495b      	ldr	r1, [pc, #364]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001344:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001346:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800134a:	f022 0203 	bic.w	r2, r2, #3
 800134e:	4302      	orrs	r2, r0
 8001350:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001354:	0618      	lsls	r0, r3, #24
 8001356:	d508      	bpl.n	800136a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001358:	4955      	ldr	r1, [pc, #340]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800135a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800135c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001360:	f022 020c 	bic.w	r2, r2, #12
 8001364:	4302      	orrs	r2, r0
 8001366:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800136a:	05d9      	lsls	r1, r3, #23
 800136c:	d508      	bpl.n	8001380 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800136e:	4950      	ldr	r1, [pc, #320]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001370:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001372:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001376:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800137a:	4302      	orrs	r2, r0
 800137c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001380:	059a      	lsls	r2, r3, #22
 8001382:	d508      	bpl.n	8001396 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001384:	494a      	ldr	r1, [pc, #296]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001386:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001388:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800138c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001390:	4302      	orrs	r2, r0
 8001392:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001396:	055f      	lsls	r7, r3, #21
 8001398:	d508      	bpl.n	80013ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800139a:	4945      	ldr	r1, [pc, #276]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800139c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800139e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013a6:	4302      	orrs	r2, r0
 80013a8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80013ac:	0518      	lsls	r0, r3, #20
 80013ae:	d508      	bpl.n	80013c2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80013b0:	493f      	ldr	r1, [pc, #252]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80013b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80013bc:	4302      	orrs	r2, r0
 80013be:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80013c2:	04d9      	lsls	r1, r3, #19
 80013c4:	d508      	bpl.n	80013d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80013c6:	493a      	ldr	r1, [pc, #232]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80013c8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80013ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013ce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80013d2:	4302      	orrs	r2, r0
 80013d4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80013d8:	049a      	lsls	r2, r3, #18
 80013da:	d508      	bpl.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80013dc:	4934      	ldr	r1, [pc, #208]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80013de:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80013e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013e4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80013e8:	4302      	orrs	r2, r0
 80013ea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80013ee:	025f      	lsls	r7, r3, #9
 80013f0:	d508      	bpl.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80013f2:	492f      	ldr	r1, [pc, #188]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80013f4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80013f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013fa:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80013fe:	4302      	orrs	r2, r0
 8001400:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001404:	0298      	lsls	r0, r3, #10
 8001406:	d50c      	bpl.n	8001422 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001408:	4829      	ldr	r0, [pc, #164]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800140a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800140c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001410:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001414:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001418:	bf08      	it	eq
 800141a:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800141c:	430a      	orrs	r2, r1
 800141e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001422:	f013 0f08 	tst.w	r3, #8
 8001426:	bf18      	it	ne
 8001428:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800142a:	0359      	lsls	r1, r3, #13
 800142c:	d508      	bpl.n	8001440 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800142e:	4920      	ldr	r1, [pc, #128]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001430:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001432:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001436:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800143a:	4302      	orrs	r2, r0
 800143c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001440:	021a      	lsls	r2, r3, #8
 8001442:	d509      	bpl.n	8001458 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001444:	491a      	ldr	r1, [pc, #104]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001446:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800144a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800144e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001452:	4302      	orrs	r2, r0
 8001454:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001458:	015f      	lsls	r7, r3, #5
 800145a:	d509      	bpl.n	8001470 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800145c:	4914      	ldr	r1, [pc, #80]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800145e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001462:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001466:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800146a:	4302      	orrs	r2, r0
 800146c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001470:	0118      	lsls	r0, r3, #4
 8001472:	d509      	bpl.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001474:	490e      	ldr	r1, [pc, #56]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001476:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800147a:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800147e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001482:	4302      	orrs	r2, r0
 8001484:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001488:	00d9      	lsls	r1, r3, #3
 800148a:	d509      	bpl.n	80014a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800148c:	4908      	ldr	r1, [pc, #32]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800148e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001492:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001496:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800149a:	4302      	orrs	r2, r0
 800149c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80014a0:	2e01      	cmp	r6, #1
 80014a2:	f000 80b4 	beq.w	800160e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80014a6:	019a      	lsls	r2, r3, #6
 80014a8:	f100 80b1 	bmi.w	800160e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80014ac:	e004      	b.n	80014b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80014b8:	2d01      	cmp	r5, #1
 80014ba:	d170      	bne.n	800159e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80014bc:	4d9d      	ldr	r5, [pc, #628]	; (8001734 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80014be:	682b      	ldr	r3, [r5, #0]
 80014c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014c6:	f7ff f9fd 	bl	80008c4 <HAL_GetTick>
 80014ca:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80014cc:	682b      	ldr	r3, [r5, #0]
 80014ce:	009f      	lsls	r7, r3, #2
 80014d0:	f100 8121 	bmi.w	8001716 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80014d4:	6821      	ldr	r1, [r4, #0]
 80014d6:	030e      	lsls	r6, r1, #12
 80014d8:	d501      	bpl.n	80014de <HAL_RCCEx_PeriphCLKConfig+0x302>
 80014da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014dc:	b11b      	cbz	r3, 80014e6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80014de:	02cd      	lsls	r5, r1, #11
 80014e0:	d51d      	bpl.n	800151e <HAL_RCCEx_PeriphCLKConfig+0x342>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80014e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014e4:	b9db      	cbnz	r3, 800151e <HAL_RCCEx_PeriphCLKConfig+0x342>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80014e6:	4a93      	ldr	r2, [pc, #588]	; (8001734 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80014e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80014ec:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80014f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014f4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80014f8:	4303      	orrs	r3, r0
 80014fa:	6960      	ldr	r0, [r4, #20]
 80014fc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001500:	69a0      	ldr	r0, [r4, #24]
 8001502:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001506:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800150a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800150e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001510:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001514:	3801      	subs	r0, #1
 8001516:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800151a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800151e:	0288      	lsls	r0, r1, #10
 8001520:	d515      	bpl.n	800154e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8001522:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001528:	d111      	bne.n	800154e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800152a:	4a82      	ldr	r2, [pc, #520]	; (8001734 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800152c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001530:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001534:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001538:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800153c:	4303      	orrs	r3, r0
 800153e:	6960      	ldr	r0, [r4, #20]
 8001540:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001544:	6a20      	ldr	r0, [r4, #32]
 8001546:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800154a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800154e:	070a      	lsls	r2, r1, #28
 8001550:	d519      	bpl.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001552:	4a78      	ldr	r2, [pc, #480]	; (8001734 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001554:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001558:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800155c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001560:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001564:	430b      	orrs	r3, r1
 8001566:	6961      	ldr	r1, [r4, #20]
 8001568:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800156c:	69e1      	ldr	r1, [r4, #28]
 800156e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001572:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001576:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800157a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800157c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001580:	430b      	orrs	r3, r1
 8001582:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001586:	4c6b      	ldr	r4, [pc, #428]	; (8001734 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001590:	f7ff f998 	bl	80008c4 <HAL_GetTick>
 8001594:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	f140 80c3 	bpl.w	8001724 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800159e:	2000      	movs	r0, #0
 80015a0:	e009      	b.n	80015b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      plli2sused = 1;
 80015a2:	2601      	movs	r6, #1
 80015a4:	e656      	b.n	8001254 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a6:	f7ff f98d 	bl	80008c4 <HAL_GetTick>
 80015aa:	eba0 0008 	sub.w	r0, r0, r8
 80015ae:	2864      	cmp	r0, #100	; 0x64
 80015b0:	f67f ae68 	bls.w	8001284 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80015b4:	2003      	movs	r0, #3
}
 80015b6:	b003      	add	sp, #12
 80015b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015bc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f43f ae6a 	beq.w	800129a <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80015c8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80015ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015d2:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80015d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015da:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80015dc:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80015de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015e0:	07d8      	lsls	r0, r3, #31
 80015e2:	f57f ae5a 	bpl.w	800129a <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 80015e6:	f7ff f96d 	bl	80008c4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80015ee:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015f2:	0799      	lsls	r1, r3, #30
 80015f4:	f53f ae51 	bmi.w	800129a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff f964 	bl	80008c4 <HAL_GetTick>
 80015fc:	eba0 0008 	sub.w	r0, r0, r8
 8001600:	4548      	cmp	r0, r9
 8001602:	d9f5      	bls.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001604:	e7d6      	b.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001606:	6891      	ldr	r1, [r2, #8]
 8001608:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800160c:	e655      	b.n	80012ba <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 800160e:	4e49      	ldr	r6, [pc, #292]	; (8001734 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001610:	6833      	ldr	r3, [r6, #0]
 8001612:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001616:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001618:	f7ff f954 	bl	80008c4 <HAL_GetTick>
 800161c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800161e:	6833      	ldr	r3, [r6, #0]
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	d472      	bmi.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001624:	6822      	ldr	r2, [r4, #0]
 8001626:	07d7      	lsls	r7, r2, #31
 8001628:	d512      	bpl.n	8001650 <HAL_RCCEx_PeriphCLKConfig+0x474>
 800162a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800162c:	b983      	cbnz	r3, 8001650 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800162e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001632:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001636:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800163a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800163e:	430b      	orrs	r3, r1
 8001640:	6861      	ldr	r1, [r4, #4]
 8001642:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001646:	68a1      	ldr	r1, [r4, #8]
 8001648:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800164c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001650:	0316      	lsls	r6, r2, #12
 8001652:	d503      	bpl.n	800165c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001654:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800165a:	d005      	beq.n	8001668 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800165c:	02d0      	lsls	r0, r2, #11
 800165e:	d51e      	bpl.n	800169e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001666:	d11a      	bne.n	800169e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001668:	4932      	ldr	r1, [pc, #200]	; (8001734 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800166a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800166e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001676:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800167a:	4303      	orrs	r3, r0
 800167c:	6860      	ldr	r0, [r4, #4]
 800167e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001682:	68e0      	ldr	r0, [r4, #12]
 8001684:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001688:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800168c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001692:	f020 001f 	bic.w	r0, r0, #31
 8001696:	3b01      	subs	r3, #1
 8001698:	4303      	orrs	r3, r0
 800169a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800169e:	01d1      	lsls	r1, r2, #7
 80016a0:	d511      	bpl.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80016a2:	4924      	ldr	r1, [pc, #144]	; (8001734 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80016a4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80016a8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80016ac:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80016b0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80016b4:	4303      	orrs	r3, r0
 80016b6:	6860      	ldr	r0, [r4, #4]
 80016b8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80016bc:	6920      	ldr	r0, [r4, #16]
 80016be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80016c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80016c6:	0192      	lsls	r2, r2, #6
 80016c8:	d50d      	bpl.n	80016e6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80016ca:	6923      	ldr	r3, [r4, #16]
 80016cc:	6862      	ldr	r2, [r4, #4]
 80016ce:	041b      	lsls	r3, r3, #16
 80016d0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80016d4:	68e2      	ldr	r2, [r4, #12]
 80016d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016da:	68a2      	ldr	r2, [r4, #8]
 80016dc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80016e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80016e6:	4e13      	ldr	r6, [pc, #76]	; (8001734 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80016e8:	6833      	ldr	r3, [r6, #0]
 80016ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016ee:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80016f0:	f7ff f8e8 	bl	80008c4 <HAL_GetTick>
 80016f4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80016f6:	6833      	ldr	r3, [r6, #0]
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	f53f aedd 	bmi.w	80014b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80016fe:	f7ff f8e1 	bl	80008c4 <HAL_GetTick>
 8001702:	1bc0      	subs	r0, r0, r7
 8001704:	2864      	cmp	r0, #100	; 0x64
 8001706:	d9f6      	bls.n	80016f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001708:	e754      	b.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800170a:	f7ff f8db 	bl	80008c4 <HAL_GetTick>
 800170e:	1bc0      	subs	r0, r0, r7
 8001710:	2864      	cmp	r0, #100	; 0x64
 8001712:	d984      	bls.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001714:	e74e      	b.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001716:	f7ff f8d5 	bl	80008c4 <HAL_GetTick>
 800171a:	1b80      	subs	r0, r0, r6
 800171c:	2864      	cmp	r0, #100	; 0x64
 800171e:	f67f aed5 	bls.w	80014cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8001722:	e747      	b.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001724:	f7ff f8ce 	bl	80008c4 <HAL_GetTick>
 8001728:	1b40      	subs	r0, r0, r5
 800172a:	2864      	cmp	r0, #100	; 0x64
 800172c:	f67f af33 	bls.w	8001596 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8001730:	e740      	b.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800

08001738 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001738:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800173c:	2b01      	cmp	r3, #1
 800173e:	d133      	bne.n	80017a8 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001740:	2302      	movs	r3, #2
 8001742:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001746:	6803      	ldr	r3, [r0, #0]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	f042 0201 	orr.w	r2, r2, #1
 800174e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001750:	4a16      	ldr	r2, [pc, #88]	; (80017ac <HAL_TIM_Base_Start_IT+0x74>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01a      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x54>
 8001756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800175a:	d017      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x54>
 800175c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001760:	4293      	cmp	r3, r2
 8001762:	d013      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x54>
 8001764:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001768:	4293      	cmp	r3, r2
 800176a:	d00f      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x54>
 800176c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001770:	4293      	cmp	r3, r2
 8001772:	d00b      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x54>
 8001774:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001778:	4293      	cmp	r3, r2
 800177a:	d007      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x54>
 800177c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001780:	4293      	cmp	r3, r2
 8001782:	d003      	beq.n	800178c <HAL_TIM_Base_Start_IT+0x54>
 8001784:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001788:	4293      	cmp	r3, r2
 800178a:	d107      	bne.n	800179c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800178c:	6899      	ldr	r1, [r3, #8]
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_TIM_Base_Start_IT+0x78>)
 8001790:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001792:	2a06      	cmp	r2, #6
 8001794:	d006      	beq.n	80017a4 <HAL_TIM_Base_Start_IT+0x6c>
 8001796:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800179a:	d003      	beq.n	80017a4 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017a4:	2000      	movs	r0, #0
}
 80017a6:	4770      	bx	lr
    return HAL_ERROR;
 80017a8:	2001      	movs	r0, #1
 80017aa:	4770      	bx	lr
 80017ac:	40010000 	.word	0x40010000
 80017b0:	00010007 	.word	0x00010007

080017b4 <HAL_TIM_PeriodElapsedCallback>:
 80017b4:	4770      	bx	lr

080017b6 <HAL_TIM_OC_DelayElapsedCallback>:
 80017b6:	4770      	bx	lr

080017b8 <HAL_TIM_IC_CaptureCallback>:
 80017b8:	4770      	bx	lr

080017ba <HAL_TIM_PWM_PulseFinishedCallback>:
 80017ba:	4770      	bx	lr

080017bc <HAL_TIM_TriggerCallback>:
 80017bc:	4770      	bx	lr

080017be <HAL_TIM_IRQHandler>:
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  uint32_t itsource = htim->Instance->DIER;
 80017be:	6803      	ldr	r3, [r0, #0]
{
 80017c0:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80017c2:	68dd      	ldr	r5, [r3, #12]
{
 80017c4:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 80017c6:	691e      	ldr	r6, [r3, #16]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80017c8:	07b2      	lsls	r2, r6, #30
 80017ca:	d50d      	bpl.n	80017e8 <HAL_TIM_IRQHandler+0x2a>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80017cc:	07a9      	lsls	r1, r5, #30
 80017ce:	d50b      	bpl.n	80017e8 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80017d0:	f06f 0202 	mvn.w	r2, #2
 80017d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017d6:	2201      	movs	r2, #1
 80017d8:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	079a      	lsls	r2, r3, #30
 80017de:	d075      	beq.n	80018cc <HAL_TIM_IRQHandler+0x10e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017e0:	f7ff ffea 	bl	80017b8 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e4:	2300      	movs	r3, #0
 80017e6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80017e8:	0773      	lsls	r3, r6, #29
 80017ea:	d510      	bpl.n	800180e <HAL_TIM_IRQHandler+0x50>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80017ec:	0768      	lsls	r0, r5, #29
 80017ee:	d50e      	bpl.n	800180e <HAL_TIM_IRQHandler+0x50>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017fa:	2202      	movs	r2, #2
 80017fc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001804:	d068      	beq.n	80018d8 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001806:	f7ff ffd7 	bl	80017b8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800180a:	2300      	movs	r3, #0
 800180c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800180e:	0731      	lsls	r1, r6, #28
 8001810:	d50f      	bpl.n	8001832 <HAL_TIM_IRQHandler+0x74>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001812:	072a      	lsls	r2, r5, #28
 8001814:	d50d      	bpl.n	8001832 <HAL_TIM_IRQHandler+0x74>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800181c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800181e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001820:	2204      	movs	r2, #4
 8001822:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	079b      	lsls	r3, r3, #30
 8001828:	d05c      	beq.n	80018e4 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800182a:	f7ff ffc5 	bl	80017b8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800182e:	2300      	movs	r3, #0
 8001830:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001832:	06f1      	lsls	r1, r6, #27
 8001834:	d510      	bpl.n	8001858 <HAL_TIM_IRQHandler+0x9a>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001836:	06ea      	lsls	r2, r5, #27
 8001838:	d50e      	bpl.n	8001858 <HAL_TIM_IRQHandler+0x9a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800183a:	6823      	ldr	r3, [r4, #0]
 800183c:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001840:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001844:	2208      	movs	r2, #8
 8001846:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800184e:	d04f      	beq.n	80018f0 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 8001850:	f7ff ffb2 	bl	80017b8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001854:	2300      	movs	r3, #0
 8001856:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001858:	07f3      	lsls	r3, r6, #31
 800185a:	d508      	bpl.n	800186e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800185c:	07e8      	lsls	r0, r5, #31
 800185e:	d506      	bpl.n	800186e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001866:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001868:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800186a:	f7ff ffa3 	bl	80017b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800186e:	f416 5f02 	tst.w	r6, #8320	; 0x2080
 8001872:	d008      	beq.n	8001886 <HAL_TIM_IRQHandler+0xc8>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001874:	0629      	lsls	r1, r5, #24
 8001876:	d506      	bpl.n	8001886 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800187e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001880:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001882:	f000 f9ca 	bl	8001c1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001886:	05f2      	lsls	r2, r6, #23
 8001888:	d508      	bpl.n	800189c <HAL_TIM_IRQHandler+0xde>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800188a:	062b      	lsls	r3, r5, #24
 800188c:	d506      	bpl.n	800189c <HAL_TIM_IRQHandler+0xde>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001894:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001896:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001898:	f000 f9c0 	bl	8001c1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800189c:	0670      	lsls	r0, r6, #25
 800189e:	d508      	bpl.n	80018b2 <HAL_TIM_IRQHandler+0xf4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80018a0:	0669      	lsls	r1, r5, #25
 80018a2:	d506      	bpl.n	80018b2 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80018ae:	f7ff ff85 	bl	80017bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80018b2:	06b2      	lsls	r2, r6, #26
 80018b4:	d522      	bpl.n	80018fc <HAL_TIM_IRQHandler+0x13e>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80018b6:	06ab      	lsls	r3, r5, #26
 80018b8:	d520      	bpl.n	80018fc <HAL_TIM_IRQHandler+0x13e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018c0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018c2:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80018c8:	f000 b9a6 	b.w	8001c18 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018cc:	f7ff ff73 	bl	80017b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d0:	4620      	mov	r0, r4
 80018d2:	f7ff ff72 	bl	80017ba <HAL_TIM_PWM_PulseFinishedCallback>
 80018d6:	e785      	b.n	80017e4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d8:	f7ff ff6d 	bl	80017b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018dc:	4620      	mov	r0, r4
 80018de:	f7ff ff6c 	bl	80017ba <HAL_TIM_PWM_PulseFinishedCallback>
 80018e2:	e792      	b.n	800180a <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e4:	f7ff ff67 	bl	80017b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e8:	4620      	mov	r0, r4
 80018ea:	f7ff ff66 	bl	80017ba <HAL_TIM_PWM_PulseFinishedCallback>
 80018ee:	e79e      	b.n	800182e <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f0:	f7ff ff61 	bl	80017b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f4:	4620      	mov	r0, r4
 80018f6:	f7ff ff60 	bl	80017ba <HAL_TIM_PWM_PulseFinishedCallback>
 80018fa:	e7ab      	b.n	8001854 <HAL_TIM_IRQHandler+0x96>
}
 80018fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001900 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001900:	4a33      	ldr	r2, [pc, #204]	; (80019d0 <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
 8001902:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001904:	4290      	cmp	r0, r2
 8001906:	d012      	beq.n	800192e <TIM_Base_SetConfig+0x2e>
 8001908:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800190c:	d00f      	beq.n	800192e <TIM_Base_SetConfig+0x2e>
 800190e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001912:	4290      	cmp	r0, r2
 8001914:	d00b      	beq.n	800192e <TIM_Base_SetConfig+0x2e>
 8001916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800191a:	4290      	cmp	r0, r2
 800191c:	d007      	beq.n	800192e <TIM_Base_SetConfig+0x2e>
 800191e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001922:	4290      	cmp	r0, r2
 8001924:	d003      	beq.n	800192e <TIM_Base_SetConfig+0x2e>
 8001926:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800192a:	4290      	cmp	r0, r2
 800192c:	d119      	bne.n	8001962 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800192e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001934:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001936:	4a26      	ldr	r2, [pc, #152]	; (80019d0 <TIM_Base_SetConfig+0xd0>)
 8001938:	4290      	cmp	r0, r2
 800193a:	d029      	beq.n	8001990 <TIM_Base_SetConfig+0x90>
 800193c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001940:	d026      	beq.n	8001990 <TIM_Base_SetConfig+0x90>
 8001942:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001946:	4290      	cmp	r0, r2
 8001948:	d022      	beq.n	8001990 <TIM_Base_SetConfig+0x90>
 800194a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800194e:	4290      	cmp	r0, r2
 8001950:	d01e      	beq.n	8001990 <TIM_Base_SetConfig+0x90>
 8001952:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001956:	4290      	cmp	r0, r2
 8001958:	d01a      	beq.n	8001990 <TIM_Base_SetConfig+0x90>
 800195a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800195e:	4290      	cmp	r0, r2
 8001960:	d016      	beq.n	8001990 <TIM_Base_SetConfig+0x90>
 8001962:	4a1c      	ldr	r2, [pc, #112]	; (80019d4 <TIM_Base_SetConfig+0xd4>)
 8001964:	4290      	cmp	r0, r2
 8001966:	d013      	beq.n	8001990 <TIM_Base_SetConfig+0x90>
 8001968:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800196c:	4290      	cmp	r0, r2
 800196e:	d00f      	beq.n	8001990 <TIM_Base_SetConfig+0x90>
 8001970:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001974:	4290      	cmp	r0, r2
 8001976:	d00b      	beq.n	8001990 <TIM_Base_SetConfig+0x90>
 8001978:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800197c:	4290      	cmp	r0, r2
 800197e:	d007      	beq.n	8001990 <TIM_Base_SetConfig+0x90>
 8001980:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001984:	4290      	cmp	r0, r2
 8001986:	d003      	beq.n	8001990 <TIM_Base_SetConfig+0x90>
 8001988:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800198c:	4290      	cmp	r0, r2
 800198e:	d103      	bne.n	8001998 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001994:	68ca      	ldr	r2, [r1, #12]
 8001996:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001998:	694a      	ldr	r2, [r1, #20]
 800199a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800199e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80019a0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019a2:	688b      	ldr	r3, [r1, #8]
 80019a4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019a6:	680b      	ldr	r3, [r1, #0]
 80019a8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <TIM_Base_SetConfig+0xd0>)
 80019ac:	4298      	cmp	r0, r3
 80019ae:	d003      	beq.n	80019b8 <TIM_Base_SetConfig+0xb8>
 80019b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019b4:	4298      	cmp	r0, r3
 80019b6:	d101      	bne.n	80019bc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019b8:	690b      	ldr	r3, [r1, #16]
 80019ba:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019bc:	2301      	movs	r3, #1
 80019be:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80019c0:	6903      	ldr	r3, [r0, #16]
 80019c2:	07db      	lsls	r3, r3, #31
 80019c4:	d503      	bpl.n	80019ce <TIM_Base_SetConfig+0xce>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80019c6:	6903      	ldr	r3, [r0, #16]
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	6103      	str	r3, [r0, #16]
  }
}
 80019ce:	4770      	bx	lr
 80019d0:	40010000 	.word	0x40010000
 80019d4:	40014000 	.word	0x40014000

080019d8 <HAL_TIM_Base_Init>:
{
 80019d8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80019da:	4604      	mov	r4, r0
 80019dc:	b350      	cbz	r0, 8001a34 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80019de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019e6:	b91b      	cbnz	r3, 80019f0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80019ec:	f004 f81a 	bl	8005a24 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80019f0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f2:	6820      	ldr	r0, [r4, #0]
 80019f4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80019f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019fa:	f7ff ff81 	bl	8001900 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019fe:	2301      	movs	r3, #1
  return HAL_OK;
 8001a00:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a02:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001a0a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001a0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001a12:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001a16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001a26:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8001a2a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8001a2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001a32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a34:	2001      	movs	r0, #1
 8001a36:	e7fc      	b.n	8001a32 <HAL_TIM_Base_Init+0x5a>

08001a38 <TIM_ETR_SetConfig>:

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a38:	4311      	orrs	r1, r2
{
 8001a3a:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8001a3c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a3e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a42:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a46:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a48:	6083      	str	r3, [r0, #8]
}
 8001a4a:	bd10      	pop	{r4, pc}

08001a4c <HAL_TIM_ConfigClockSource>:
{
 8001a4c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001a4e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001a52:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	f04f 0302 	mov.w	r3, #2
 8001a5a:	f000 808c 	beq.w	8001b76 <HAL_TIM_ConfigClockSource+0x12a>
 8001a5e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001a60:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a64:	4b45      	ldr	r3, [pc, #276]	; (8001b7c <HAL_TIM_ConfigClockSource+0x130>)
  __HAL_LOCK(htim);
 8001a66:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001a6a:	6800      	ldr	r0, [r0, #0]
 8001a6c:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a6e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8001a70:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001a72:	680b      	ldr	r3, [r1, #0]
 8001a74:	2b60      	cmp	r3, #96	; 0x60
 8001a76:	d04f      	beq.n	8001b18 <HAL_TIM_ConfigClockSource+0xcc>
 8001a78:	d832      	bhi.n	8001ae0 <HAL_TIM_ConfigClockSource+0x94>
 8001a7a:	2b40      	cmp	r3, #64	; 0x40
 8001a7c:	d064      	beq.n	8001b48 <HAL_TIM_ConfigClockSource+0xfc>
 8001a7e:	d816      	bhi.n	8001aae <HAL_TIM_ConfigClockSource+0x62>
 8001a80:	2b20      	cmp	r3, #32
 8001a82:	d00d      	beq.n	8001aa0 <HAL_TIM_ConfigClockSource+0x54>
 8001a84:	d80a      	bhi.n	8001a9c <HAL_TIM_ConfigClockSource+0x50>
 8001a86:	f033 0110 	bics.w	r1, r3, #16
 8001a8a:	d009      	beq.n	8001aa0 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001a92:	2300      	movs	r3, #0
 8001a94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001a98:	4610      	mov	r0, r2
 8001a9a:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8001a9c:	2b30      	cmp	r3, #48	; 0x30
 8001a9e:	d1f5      	bne.n	8001a8c <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8001aa0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001aa2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	f043 0307 	orr.w	r3, r3, #7
 8001aac:	e028      	b.n	8001b00 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8001aae:	2b50      	cmp	r3, #80	; 0x50
 8001ab0:	d1ec      	bne.n	8001a8c <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 8001ab2:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001ab4:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8001ab6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ab8:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001aba:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001abe:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
 8001ac2:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ac4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ac6:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001acc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001ad0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ad2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001ad4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ada:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001ade:	e00f      	b.n	8001b00 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8001ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae4:	d00d      	beq.n	8001b02 <HAL_TIM_ConfigClockSource+0xb6>
 8001ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aea:	d00c      	beq.n	8001b06 <HAL_TIM_ConfigClockSource+0xba>
 8001aec:	2b70      	cmp	r3, #112	; 0x70
 8001aee:	d1cd      	bne.n	8001a8c <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8001af0:	68cb      	ldr	r3, [r1, #12]
 8001af2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001af6:	f7ff ff9f 	bl	8001a38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001afa:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001afc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8001b00:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001b02:	2200      	movs	r2, #0
 8001b04:	e7c2      	b.n	8001a8c <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 8001b06:	68cb      	ldr	r3, [r1, #12]
 8001b08:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001b0c:	f7ff ff94 	bl	8001a38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b10:	6883      	ldr	r3, [r0, #8]
 8001b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b16:	e7f3      	b.n	8001b00 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 8001b18:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b1a:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8001b1c:	684d      	ldr	r5, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001b1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b22:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8001b26:	68c9      	ldr	r1, [r1, #12]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001b28:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b2c:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b2e:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001b30:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001b34:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001b38:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001b3a:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001b3c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b42:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8001b46:	e7db      	b.n	8001b00 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8001b48:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001b4a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8001b4c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b4e:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b50:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b54:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
 8001b58:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b5a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b5c:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b62:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001b66:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001b68:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001b6a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b70:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8001b74:	e7c4      	b.n	8001b00 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8001b76:	461a      	mov	r2, r3
 8001b78:	e78e      	b.n	8001a98 <HAL_TIM_ConfigClockSource+0x4c>
 8001b7a:	bf00      	nop
 8001b7c:	fffe0088 	.word	0xfffe0088

08001b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b80:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b82:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	f04f 0302 	mov.w	r3, #2
 8001b8c:	d03b      	beq.n	8001c06 <HAL_TIMEx_MasterConfigSynchronization+0x86>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b8e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001b92:	4d1e      	ldr	r5, [pc, #120]	; (8001c0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  tmpcr2 = htim->Instance->CR2;
 8001b94:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001b96:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8001b98:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001b9a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001b9c:	d002      	beq.n	8001ba4 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 8001b9e:	4e1c      	ldr	r6, [pc, #112]	; (8001c10 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8001ba0:	42b3      	cmp	r3, r6
 8001ba2:	d103      	bne.n	8001bac <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001ba4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001ba8:	684e      	ldr	r6, [r1, #4]
 8001baa:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bac:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001bae:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bb2:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bb4:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 8001bb8:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bba:	d019      	beq.n	8001bf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc0:	d016      	beq.n	8001bf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001bc2:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d013      	beq.n	8001bf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001bc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d00f      	beq.n	8001bf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001bd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d00b      	beq.n	8001bf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001bd8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d007      	beq.n	8001bf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001be0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d003      	beq.n	8001bf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001be8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d104      	bne.n	8001bfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bf0:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001bf2:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bf6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001bf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c00:	2300      	movs	r3, #0
 8001c02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001c06:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001c08:	bd70      	pop	{r4, r5, r6, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40010000 	.word	0x40010000
 8001c10:	40010400 	.word	0x40010400
 8001c14:	40000400 	.word	0x40000400

08001c18 <HAL_TIMEx_CommutCallback>:
 8001c18:	4770      	bx	lr

08001c1a <HAL_TIMEx_BreakCallback>:
 8001c1a:	4770      	bx	lr

08001c1c <HAL_TIMEx_Break2Callback>:
 8001c1c:	4770      	bx	lr

08001c1e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c1e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c20:	e852 3f00 	ldrex	r3, [r2]
 8001c24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c28:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8001c2c:	6802      	ldr	r2, [r0, #0]
 8001c2e:	2900      	cmp	r1, #0
 8001c30:	d1f5      	bne.n	8001c1e <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c32:	f102 0308 	add.w	r3, r2, #8
 8001c36:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c3e:	f102 0c08 	add.w	ip, r2, #8
 8001c42:	e84c 3100 	strex	r1, r3, [ip]
 8001c46:	2900      	cmp	r1, #0
 8001c48:	d1f3      	bne.n	8001c32 <UART_EndRxTransfer+0x14>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c4a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d107      	bne.n	8001c60 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c50:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c54:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c58:	e842 3100 	strex	r1, r3, [r2]
 8001c5c:	2900      	cmp	r1, #0
 8001c5e:	d1f7      	bne.n	8001c50 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c60:	2320      	movs	r3, #32
 8001c62:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c66:	2300      	movs	r3, #0
 8001c68:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001c6a:	6683      	str	r3, [r0, #104]	; 0x68
}
 8001c6c:	4770      	bx	lr
	...

08001c70 <UART_SetConfig>:
{
 8001c70:	b538      	push	{r3, r4, r5, lr}
 8001c72:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c74:	69c0      	ldr	r0, [r0, #28]
 8001c76:	6921      	ldr	r1, [r4, #16]
 8001c78:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c7a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c80:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c82:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c84:	498e      	ldr	r1, [pc, #568]	; (8001ec0 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c86:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c88:	4029      	ands	r1, r5
  tmpreg |= huart->Init.OneBitSampling;
 8001c8a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c8c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c8e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c90:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c9c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c9e:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001ca0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ca2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <UART_SetConfig+0x254>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d117      	bne.n	8001ce0 <UART_SetConfig+0x70>
 8001cb0:	4b85      	ldr	r3, [pc, #532]	; (8001ec8 <UART_SetConfig+0x258>)
 8001cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	f200 80e2 	bhi.w	8001e86 <UART_SetConfig+0x216>
 8001cc2:	4a82      	ldr	r2, [pc, #520]	; (8001ecc <UART_SetConfig+0x25c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cc4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001cc8:	5cd3      	ldrb	r3, [r2, r3]
 8001cca:	f040 80b3 	bne.w	8001e34 <UART_SetConfig+0x1c4>
    switch (clocksource)
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d822      	bhi.n	8001d18 <UART_SetConfig+0xa8>
 8001cd2:	e8df f003 	tbb	[pc, r3]
 8001cd6:	db90      	.short	0xdb90
 8001cd8:	21d52198 	.word	0x21d52198
 8001cdc:	2121      	.short	0x2121
 8001cde:	99          	.byte	0x99
 8001cdf:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ce0:	4a7b      	ldr	r2, [pc, #492]	; (8001ed0 <UART_SetConfig+0x260>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d106      	bne.n	8001cf4 <UART_SetConfig+0x84>
 8001ce6:	4b78      	ldr	r3, [pc, #480]	; (8001ec8 <UART_SetConfig+0x258>)
 8001ce8:	4a7a      	ldr	r2, [pc, #488]	; (8001ed4 <UART_SetConfig+0x264>)
 8001cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	e7e7      	b.n	8001cc4 <UART_SetConfig+0x54>
 8001cf4:	4a78      	ldr	r2, [pc, #480]	; (8001ed8 <UART_SetConfig+0x268>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d118      	bne.n	8001d2c <UART_SetConfig+0xbc>
 8001cfa:	4b73      	ldr	r3, [pc, #460]	; (8001ec8 <UART_SetConfig+0x258>)
 8001cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	f000 80b3 	beq.w	8001e70 <UART_SetConfig+0x200>
 8001d0a:	d807      	bhi.n	8001d1c <UART_SetConfig+0xac>
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80c0 	beq.w	8001e92 <UART_SetConfig+0x222>
 8001d12:	2b10      	cmp	r3, #16
 8001d14:	f000 80b1 	beq.w	8001e7a <UART_SetConfig+0x20a>
    switch (clocksource)
 8001d18:	2001      	movs	r0, #1
 8001d1a:	e070      	b.n	8001dfe <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d1c:	2b30      	cmp	r3, #48	; 0x30
 8001d1e:	d1fb      	bne.n	8001d18 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d20:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001d24:	d070      	beq.n	8001e08 <UART_SetConfig+0x198>
        pclk = (uint32_t) LSE_VALUE;
 8001d26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d2a:	e0b9      	b.n	8001ea0 <UART_SetConfig+0x230>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d2c:	4a6b      	ldr	r2, [pc, #428]	; (8001edc <UART_SetConfig+0x26c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d10f      	bne.n	8001d52 <UART_SetConfig+0xe2>
 8001d32:	4b65      	ldr	r3, [pc, #404]	; (8001ec8 <UART_SetConfig+0x258>)
 8001d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001d3c:	2b80      	cmp	r3, #128	; 0x80
 8001d3e:	f000 8097 	beq.w	8001e70 <UART_SetConfig+0x200>
 8001d42:	d804      	bhi.n	8001d4e <UART_SetConfig+0xde>
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80a4 	beq.w	8001e92 <UART_SetConfig+0x222>
 8001d4a:	2b40      	cmp	r3, #64	; 0x40
 8001d4c:	e7e2      	b.n	8001d14 <UART_SetConfig+0xa4>
 8001d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8001d50:	e7e5      	b.n	8001d1e <UART_SetConfig+0xae>
 8001d52:	4a63      	ldr	r2, [pc, #396]	; (8001ee0 <UART_SetConfig+0x270>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d112      	bne.n	8001d7e <UART_SetConfig+0x10e>
 8001d58:	4b5b      	ldr	r3, [pc, #364]	; (8001ec8 <UART_SetConfig+0x258>)
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d66:	f000 8083 	beq.w	8001e70 <UART_SetConfig+0x200>
 8001d6a:	d805      	bhi.n	8001d78 <UART_SetConfig+0x108>
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 8090 	beq.w	8001e92 <UART_SetConfig+0x222>
 8001d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d76:	e7cd      	b.n	8001d14 <UART_SetConfig+0xa4>
 8001d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d7c:	e7cf      	b.n	8001d1e <UART_SetConfig+0xae>
 8001d7e:	4a59      	ldr	r2, [pc, #356]	; (8001ee4 <UART_SetConfig+0x274>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d110      	bne.n	8001da6 <UART_SetConfig+0x136>
 8001d84:	4b50      	ldr	r3, [pc, #320]	; (8001ec8 <UART_SetConfig+0x258>)
 8001d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d92:	d06d      	beq.n	8001e70 <UART_SetConfig+0x200>
 8001d94:	d804      	bhi.n	8001da0 <UART_SetConfig+0x130>
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d075      	beq.n	8001e86 <UART_SetConfig+0x216>
 8001d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9e:	e7b9      	b.n	8001d14 <UART_SetConfig+0xa4>
 8001da0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001da4:	e7bb      	b.n	8001d1e <UART_SetConfig+0xae>
 8001da6:	4a50      	ldr	r2, [pc, #320]	; (8001ee8 <UART_SetConfig+0x278>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d110      	bne.n	8001dce <UART_SetConfig+0x15e>
 8001dac:	4b46      	ldr	r3, [pc, #280]	; (8001ec8 <UART_SetConfig+0x258>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dba:	d059      	beq.n	8001e70 <UART_SetConfig+0x200>
 8001dbc:	d804      	bhi.n	8001dc8 <UART_SetConfig+0x158>
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d067      	beq.n	8001e92 <UART_SetConfig+0x222>
 8001dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc6:	e7a5      	b.n	8001d14 <UART_SetConfig+0xa4>
 8001dc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001dcc:	e7a7      	b.n	8001d1e <UART_SetConfig+0xae>
 8001dce:	4a47      	ldr	r2, [pc, #284]	; (8001eec <UART_SetConfig+0x27c>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d1a1      	bne.n	8001d18 <UART_SetConfig+0xa8>
 8001dd4:	4b3c      	ldr	r3, [pc, #240]	; (8001ec8 <UART_SetConfig+0x258>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001de2:	d045      	beq.n	8001e70 <UART_SetConfig+0x200>
 8001de4:	d804      	bhi.n	8001df0 <UART_SetConfig+0x180>
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d053      	beq.n	8001e92 <UART_SetConfig+0x222>
 8001dea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dee:	e791      	b.n	8001d14 <UART_SetConfig+0xa4>
 8001df0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001df4:	e793      	b.n	8001d1e <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001df6:	f7ff f9d1 	bl	800119c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001dfa:	b928      	cbnz	r0, 8001e08 <UART_SetConfig+0x198>
 8001dfc:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8001dfe:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8001e00:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8001e04:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 8001e06:	483a      	ldr	r0, [pc, #232]	; (8001ef0 <UART_SetConfig+0x280>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001e08:	6862      	ldr	r2, [r4, #4]
 8001e0a:	0853      	lsrs	r3, r2, #1
 8001e0c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001e10:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e14:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001e18:	f1a3 0110 	sub.w	r1, r3, #16
 8001e1c:	4291      	cmp	r1, r2
 8001e1e:	f63f af7b 	bhi.w	8001d18 <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e22:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e26:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8001e2a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e2c:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60cb      	str	r3, [r1, #12]
 8001e32:	e7e3      	b.n	8001dfc <UART_SetConfig+0x18c>
    switch (clocksource)
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	f63f af6f 	bhi.w	8001d18 <UART_SetConfig+0xa8>
 8001e3a:	a201      	add	r2, pc, #4	; (adr r2, 8001e40 <UART_SetConfig+0x1d0>)
 8001e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e40:	08001e99 	.word	0x08001e99
 8001e44:	08001e65 	.word	0x08001e65
 8001e48:	08001e77 	.word	0x08001e77
 8001e4c:	08001d19 	.word	0x08001d19
 8001e50:	08001e6b 	.word	0x08001e6b
 8001e54:	08001d19 	.word	0x08001d19
 8001e58:	08001d19 	.word	0x08001d19
 8001e5c:	08001d19 	.word	0x08001d19
 8001e60:	08001d27 	.word	0x08001d27
        pclk = HAL_RCC_GetPCLK2Freq();
 8001e64:	f7ff f9aa 	bl	80011bc <HAL_RCC_GetPCLK2Freq>
        break;
 8001e68:	e018      	b.n	8001e9c <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetSysClockFreq();
 8001e6a:	f7ff f8c5 	bl	8000ff8 <HAL_RCC_GetSysClockFreq>
        break;
 8001e6e:	e015      	b.n	8001e9c <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e70:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001e74:	d0c7      	beq.n	8001e06 <UART_SetConfig+0x196>
        pclk = (uint32_t) HSI_VALUE;
 8001e76:	481e      	ldr	r0, [pc, #120]	; (8001ef0 <UART_SetConfig+0x280>)
 8001e78:	e012      	b.n	8001ea0 <UART_SetConfig+0x230>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e7a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001e7e:	d1f4      	bne.n	8001e6a <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 8001e80:	f7ff f8ba 	bl	8000ff8 <HAL_RCC_GetSysClockFreq>
        break;
 8001e84:	e7b9      	b.n	8001dfa <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e86:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001e8a:	d1eb      	bne.n	8001e64 <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001e8c:	f7ff f996 	bl	80011bc <HAL_RCC_GetPCLK2Freq>
        break;
 8001e90:	e7b3      	b.n	8001dfa <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e92:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001e96:	d0ae      	beq.n	8001df6 <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e98:	f7ff f980 	bl	800119c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001e9c:	2800      	cmp	r0, #0
 8001e9e:	d0ad      	beq.n	8001dfc <UART_SetConfig+0x18c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001ea0:	6862      	ldr	r2, [r4, #4]
 8001ea2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001ea6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001eaa:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001eae:	f1a3 0110 	sub.w	r1, r3, #16
 8001eb2:	4291      	cmp	r1, r2
 8001eb4:	f63f af30 	bhi.w	8001d18 <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001eb8:	6822      	ldr	r2, [r4, #0]
 8001eba:	60d3      	str	r3, [r2, #12]
 8001ebc:	e79e      	b.n	8001dfc <UART_SetConfig+0x18c>
 8001ebe:	bf00      	nop
 8001ec0:	efff69f3 	.word	0xefff69f3
 8001ec4:	40011000 	.word	0x40011000
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	0800cb28 	.word	0x0800cb28
 8001ed0:	40004400 	.word	0x40004400
 8001ed4:	0800cb2b 	.word	0x0800cb2b
 8001ed8:	40004800 	.word	0x40004800
 8001edc:	40004c00 	.word	0x40004c00
 8001ee0:	40005000 	.word	0x40005000
 8001ee4:	40011400 	.word	0x40011400
 8001ee8:	40007800 	.word	0x40007800
 8001eec:	40007c00 	.word	0x40007c00
 8001ef0:	00f42400 	.word	0x00f42400

08001ef4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001ef4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ef6:	071a      	lsls	r2, r3, #28
{
 8001ef8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001efa:	d506      	bpl.n	8001f0a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001efc:	6801      	ldr	r1, [r0, #0]
 8001efe:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001f00:	684a      	ldr	r2, [r1, #4]
 8001f02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f06:	4322      	orrs	r2, r4
 8001f08:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f0a:	07dc      	lsls	r4, r3, #31
 8001f0c:	d506      	bpl.n	8001f1c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f0e:	6801      	ldr	r1, [r0, #0]
 8001f10:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001f12:	684a      	ldr	r2, [r1, #4]
 8001f14:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001f18:	4322      	orrs	r2, r4
 8001f1a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f1c:	0799      	lsls	r1, r3, #30
 8001f1e:	d506      	bpl.n	8001f2e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f20:	6801      	ldr	r1, [r0, #0]
 8001f22:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001f24:	684a      	ldr	r2, [r1, #4]
 8001f26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f2a:	4322      	orrs	r2, r4
 8001f2c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f2e:	075a      	lsls	r2, r3, #29
 8001f30:	d506      	bpl.n	8001f40 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f32:	6801      	ldr	r1, [r0, #0]
 8001f34:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001f36:	684a      	ldr	r2, [r1, #4]
 8001f38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f3c:	4322      	orrs	r2, r4
 8001f3e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f40:	06dc      	lsls	r4, r3, #27
 8001f42:	d506      	bpl.n	8001f52 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f44:	6801      	ldr	r1, [r0, #0]
 8001f46:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001f48:	688a      	ldr	r2, [r1, #8]
 8001f4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f4e:	4322      	orrs	r2, r4
 8001f50:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f52:	0699      	lsls	r1, r3, #26
 8001f54:	d506      	bpl.n	8001f64 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f56:	6801      	ldr	r1, [r0, #0]
 8001f58:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001f5a:	688a      	ldr	r2, [r1, #8]
 8001f5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f60:	4322      	orrs	r2, r4
 8001f62:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f64:	065a      	lsls	r2, r3, #25
 8001f66:	d510      	bpl.n	8001f8a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f68:	6801      	ldr	r1, [r0, #0]
 8001f6a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001f6c:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f6e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f72:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001f76:	ea42 0204 	orr.w	r2, r2, r4
 8001f7a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f7c:	d105      	bne.n	8001f8a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f7e:	684a      	ldr	r2, [r1, #4]
 8001f80:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f82:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001f86:	4322      	orrs	r2, r4
 8001f88:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f8a:	061b      	lsls	r3, r3, #24
 8001f8c:	d506      	bpl.n	8001f9c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f8e:	6802      	ldr	r2, [r0, #0]
 8001f90:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001f92:	6853      	ldr	r3, [r2, #4]
 8001f94:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	6053      	str	r3, [r2, #4]
}
 8001f9c:	bd10      	pop	{r4, pc}

08001f9e <UART_WaitOnFlagUntilTimeout>:
{
 8001f9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fa2:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	460d      	mov	r5, r1
 8001faa:	4617      	mov	r7, r2
 8001fac:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fae:	6822      	ldr	r2, [r4, #0]
 8001fb0:	69d3      	ldr	r3, [r2, #28]
 8001fb2:	ea35 0303 	bics.w	r3, r5, r3
 8001fb6:	bf0c      	ite	eq
 8001fb8:	2301      	moveq	r3, #1
 8001fba:	2300      	movne	r3, #0
 8001fbc:	42bb      	cmp	r3, r7
 8001fbe:	d001      	beq.n	8001fc4 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	e022      	b.n	800200a <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8001fc4:	f1b9 3fff 	cmp.w	r9, #4294967295
 8001fc8:	d0f2      	beq.n	8001fb0 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fca:	f7fe fc7b 	bl	80008c4 <HAL_GetTick>
 8001fce:	eba0 0008 	sub.w	r0, r0, r8
 8001fd2:	4548      	cmp	r0, r9
 8001fd4:	d829      	bhi.n	800202a <UART_WaitOnFlagUntilTimeout+0x8c>
 8001fd6:	f1b9 0f00 	cmp.w	r9, #0
 8001fda:	d026      	beq.n	800202a <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001fdc:	6821      	ldr	r1, [r4, #0]
 8001fde:	680b      	ldr	r3, [r1, #0]
 8001fe0:	075a      	lsls	r2, r3, #29
 8001fe2:	d5e4      	bpl.n	8001fae <UART_WaitOnFlagUntilTimeout+0x10>
 8001fe4:	2d80      	cmp	r5, #128	; 0x80
 8001fe6:	d0e2      	beq.n	8001fae <UART_WaitOnFlagUntilTimeout+0x10>
 8001fe8:	2d40      	cmp	r5, #64	; 0x40
 8001fea:	d0e0      	beq.n	8001fae <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001fec:	69ce      	ldr	r6, [r1, #28]
 8001fee:	f016 0608 	ands.w	r6, r6, #8
 8001ff2:	d00c      	beq.n	800200e <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001ff4:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8001ff6:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001ff8:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8001ffa:	f7ff fe10 	bl	8001c1e <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8001ffe:	2300      	movs	r3, #0
          return HAL_ERROR;
 8002000:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002002:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8002006:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 800200a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800200e:	69cb      	ldr	r3, [r1, #28]
 8002010:	051b      	lsls	r3, r3, #20
 8002012:	d5cc      	bpl.n	8001fae <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002014:	f44f 6300 	mov.w	r3, #2048	; 0x800
          UART_EndRxTransfer(huart);
 8002018:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800201a:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 800201c:	f7ff fdff 	bl	8001c1e <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002020:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8002022:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002026:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_TIMEOUT;
 800202a:	2003      	movs	r0, #3
 800202c:	e7ed      	b.n	800200a <UART_WaitOnFlagUntilTimeout+0x6c>

0800202e <HAL_UART_Transmit>:
{
 800202e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002032:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002034:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8002036:	4604      	mov	r4, r0
 8002038:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800203a:	2b20      	cmp	r3, #32
{
 800203c:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800203e:	d144      	bne.n	80020ca <HAL_UART_Transmit+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8002040:	2900      	cmp	r1, #0
 8002042:	d044      	beq.n	80020ce <HAL_UART_Transmit+0xa0>
 8002044:	2a00      	cmp	r2, #0
 8002046:	d042      	beq.n	80020ce <HAL_UART_Transmit+0xa0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002048:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800204a:	2500      	movs	r5, #0
 800204c:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002050:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8002052:	f7fe fc37 	bl	80008c4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002056:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002058:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 800205a:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800205e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8002062:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002066:	d103      	bne.n	8002070 <HAL_UART_Transmit+0x42>
 8002068:	6922      	ldr	r2, [r4, #16]
 800206a:	b90a      	cbnz	r2, 8002070 <HAL_UART_Transmit+0x42>
 800206c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800206e:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 8002070:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002074:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002078:	b292      	uxth	r2, r2
 800207a:	b94a      	cbnz	r2, 8002090 <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800207c:	2140      	movs	r1, #64	; 0x40
 800207e:	4620      	mov	r0, r4
 8002080:	f7ff ff8d 	bl	8001f9e <UART_WaitOnFlagUntilTimeout>
 8002084:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8002086:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002088:	b960      	cbnz	r0, 80020a4 <HAL_UART_Transmit+0x76>
}
 800208a:	b004      	add	sp, #16
 800208c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002090:	2200      	movs	r2, #0
 8002092:	2180      	movs	r1, #128	; 0x80
 8002094:	4620      	mov	r0, r4
 8002096:	9303      	str	r3, [sp, #12]
 8002098:	f7ff ff81 	bl	8001f9e <UART_WaitOnFlagUntilTimeout>
 800209c:	9b03      	ldr	r3, [sp, #12]
 800209e:	b118      	cbz	r0, 80020a8 <HAL_UART_Transmit+0x7a>
        huart->gState = HAL_UART_STATE_READY;
 80020a0:	2320      	movs	r3, #32
 80020a2:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80020a4:	2003      	movs	r0, #3
 80020a6:	e7f0      	b.n	800208a <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020a8:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 80020aa:	b95e      	cbnz	r6, 80020c4 <HAL_UART_Transmit+0x96>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020ac:	f835 2b02 	ldrh.w	r2, [r5], #2
 80020b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80020b4:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80020b6:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80020ba:	3a01      	subs	r2, #1
 80020bc:	b292      	uxth	r2, r2
 80020be:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80020c2:	e7d5      	b.n	8002070 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80020c4:	f816 2b01 	ldrb.w	r2, [r6], #1
 80020c8:	e7f4      	b.n	80020b4 <HAL_UART_Transmit+0x86>
    return HAL_BUSY;
 80020ca:	2002      	movs	r0, #2
 80020cc:	e7dd      	b.n	800208a <HAL_UART_Transmit+0x5c>
      return  HAL_ERROR;
 80020ce:	2001      	movs	r0, #1
 80020d0:	e7db      	b.n	800208a <HAL_UART_Transmit+0x5c>

080020d2 <HAL_UART_Receive>:
{
 80020d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80020d6:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80020d8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 80020dc:	4604      	mov	r4, r0
 80020de:	460e      	mov	r6, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 80020e0:	2b20      	cmp	r3, #32
{
 80020e2:	4617      	mov	r7, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80020e4:	d15e      	bne.n	80021a4 <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 80020e6:	2900      	cmp	r1, #0
 80020e8:	d05e      	beq.n	80021a8 <HAL_UART_Receive+0xd6>
 80020ea:	2a00      	cmp	r2, #0
 80020ec:	d05c      	beq.n	80021a8 <HAL_UART_Receive+0xd6>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020ee:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f0:	2500      	movs	r5, #0
 80020f2:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020f6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020fa:	6605      	str	r5, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 80020fc:	f7fe fbe2 	bl	80008c4 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8002100:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002102:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 8002104:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 800210c:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002110:	d116      	bne.n	8002140 <HAL_UART_Receive+0x6e>
 8002112:	6922      	ldr	r2, [r4, #16]
 8002114:	42aa      	cmp	r2, r5
 8002116:	f240 15ff 	movw	r5, #511	; 0x1ff
 800211a:	bf18      	it	ne
 800211c:	25ff      	movne	r5, #255	; 0xff
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800211e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    UART_MASK_COMPUTATION(huart);
 8002122:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002126:	d11b      	bne.n	8002160 <HAL_UART_Receive+0x8e>
 8002128:	6923      	ldr	r3, [r4, #16]
 800212a:	b9cb      	cbnz	r3, 8002160 <HAL_UART_Receive+0x8e>
 800212c:	4637      	mov	r7, r6
      pdata8bits  = NULL;
 800212e:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 8002130:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8002134:	b290      	uxth	r0, r2
 8002136:	b9a8      	cbnz	r0, 8002164 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8002138:	2320      	movs	r3, #32
 800213a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 800213e:	e01e      	b.n	800217e <HAL_UART_Receive+0xac>
    UART_MASK_COMPUTATION(huart);
 8002140:	b92b      	cbnz	r3, 800214e <HAL_UART_Receive+0x7c>
 8002142:	6922      	ldr	r2, [r4, #16]
 8002144:	2a00      	cmp	r2, #0
 8002146:	bf14      	ite	ne
 8002148:	257f      	movne	r5, #127	; 0x7f
 800214a:	25ff      	moveq	r5, #255	; 0xff
 800214c:	e7e7      	b.n	800211e <HAL_UART_Receive+0x4c>
 800214e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002152:	d1e4      	bne.n	800211e <HAL_UART_Receive+0x4c>
 8002154:	6922      	ldr	r2, [r4, #16]
 8002156:	2a00      	cmp	r2, #0
 8002158:	bf0c      	ite	eq
 800215a:	257f      	moveq	r5, #127	; 0x7f
 800215c:	253f      	movne	r5, #63	; 0x3f
 800215e:	e7de      	b.n	800211e <HAL_UART_Receive+0x4c>
      pdata16bits = NULL;
 8002160:	2700      	movs	r7, #0
 8002162:	e7e5      	b.n	8002130 <HAL_UART_Receive+0x5e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002164:	464b      	mov	r3, r9
 8002166:	2200      	movs	r2, #0
 8002168:	2120      	movs	r1, #32
 800216a:	4620      	mov	r0, r4
 800216c:	f8cd 8000 	str.w	r8, [sp]
 8002170:	f7ff ff15 	bl	8001f9e <UART_WaitOnFlagUntilTimeout>
 8002174:	b130      	cbz	r0, 8002184 <HAL_UART_Receive+0xb2>
        huart->RxState = HAL_UART_STATE_READY;
 8002176:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8002178:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 800217a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800217e:	b003      	add	sp, #12
 8002180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	402b      	ands	r3, r5
      if (pdata8bits == NULL)
 800218a:	b946      	cbnz	r6, 800219e <HAL_UART_Receive+0xcc>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800218c:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 8002190:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8002194:	3a01      	subs	r2, #1
 8002196:	b292      	uxth	r2, r2
 8002198:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800219c:	e7c8      	b.n	8002130 <HAL_UART_Receive+0x5e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800219e:	f806 3b01 	strb.w	r3, [r6], #1
        pdata8bits++;
 80021a2:	e7f5      	b.n	8002190 <HAL_UART_Receive+0xbe>
    return HAL_BUSY;
 80021a4:	2002      	movs	r0, #2
 80021a6:	e7ea      	b.n	800217e <HAL_UART_Receive+0xac>
      return  HAL_ERROR;
 80021a8:	2001      	movs	r0, #1
 80021aa:	e7e8      	b.n	800217e <HAL_UART_Receive+0xac>

080021ac <UART_CheckIdleState>:
{
 80021ac:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ae:	2500      	movs	r5, #0
{
 80021b0:	4604      	mov	r4, r0
 80021b2:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b4:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 80021b8:	f7fe fb84 	bl	80008c4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021bc:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80021be:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	0711      	lsls	r1, r2, #28
 80021c4:	d51c      	bpl.n	8002200 <UART_CheckIdleState+0x54>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021c6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80021ca:	9003      	str	r0, [sp, #12]
 80021cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80021d0:	4620      	mov	r0, r4
 80021d2:	9200      	str	r2, [sp, #0]
 80021d4:	462a      	mov	r2, r5
 80021d6:	f7ff fee2 	bl	8001f9e <UART_WaitOnFlagUntilTimeout>
 80021da:	9b03      	ldr	r3, [sp, #12]
 80021dc:	b180      	cbz	r0, 8002200 <UART_CheckIdleState+0x54>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80021de:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e0:	e852 3f00 	ldrex	r3, [r2]
 80021e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021e8:	e842 3100 	strex	r1, r3, [r2]
 80021ec:	2900      	cmp	r1, #0
 80021ee:	d1f6      	bne.n	80021de <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 80021f0:	2320      	movs	r3, #32
 80021f2:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80021f4:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 80021f6:	2300      	movs	r3, #0
 80021f8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 80021fc:	b005      	add	sp, #20
 80021fe:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002200:	6822      	ldr	r2, [r4, #0]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	0752      	lsls	r2, r2, #29
 8002206:	d523      	bpl.n	8002250 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002208:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800220c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002210:	4620      	mov	r0, r4
 8002212:	9200      	str	r2, [sp, #0]
 8002214:	2200      	movs	r2, #0
 8002216:	f7ff fec2 	bl	8001f9e <UART_WaitOnFlagUntilTimeout>
 800221a:	b1c8      	cbz	r0, 8002250 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800221c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221e:	e852 3f00 	ldrex	r3, [r2]
 8002222:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002226:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800222a:	6822      	ldr	r2, [r4, #0]
 800222c:	2900      	cmp	r1, #0
 800222e:	d1f5      	bne.n	800221c <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002230:	f102 0308 	add.w	r3, r2, #8
 8002234:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002238:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223c:	f102 0008 	add.w	r0, r2, #8
 8002240:	e840 3100 	strex	r1, r3, [r0]
 8002244:	2900      	cmp	r1, #0
 8002246:	d1f3      	bne.n	8002230 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8002248:	2320      	movs	r3, #32
 800224a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800224e:	e7d1      	b.n	80021f4 <UART_CheckIdleState+0x48>
  huart->gState = HAL_UART_STATE_READY;
 8002250:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002252:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002254:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002256:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800225a:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800225c:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 800225e:	e7ca      	b.n	80021f6 <UART_CheckIdleState+0x4a>

08002260 <HAL_UART_Init>:
{
 8002260:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002262:	4604      	mov	r4, r0
 8002264:	b340      	cbz	r0, 80022b8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002266:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002268:	b91b      	cbnz	r3, 8002272 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800226a:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 800226e:	f003 fbf9 	bl	8005a64 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002272:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002274:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002276:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8002278:	6813      	ldr	r3, [r2, #0]
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002282:	b113      	cbz	r3, 800228a <HAL_UART_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8002284:	4620      	mov	r0, r4
 8002286:	f7ff fe35 	bl	8001ef4 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800228a:	4620      	mov	r0, r4
 800228c:	f7ff fcf0 	bl	8001c70 <UART_SetConfig>
 8002290:	2801      	cmp	r0, #1
 8002292:	d011      	beq.n	80022b8 <HAL_UART_Init+0x58>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002294:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002296:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800229e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022a6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
}
 80022ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80022b2:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80022b4:	f7ff bf7a 	b.w	80021ac <UART_CheckIdleState>
}
 80022b8:	2001      	movs	r0, #1
 80022ba:	bd10      	pop	{r4, pc}

080022bc <write_callback>:
  o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool res = true;
 80022be:	2001      	movs	r0, #1
{
 80022c0:	460e      	mov	r6, r1
 80022c2:	4614      	mov	r4, r2
  uint8_t *pr = (uint8_t *)buf;

  UNUSED(stream);

  while (count) {
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 80022c4:	4d0c      	ldr	r5, [pc, #48]	; (80022f8 <write_callback+0x3c>)
      pr++;
      count--;
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
      res = write_packet();
      o_packet.pw = 0;
 80022c6:	2700      	movs	r7, #0
  while (count) {
 80022c8:	b93c      	cbnz	r4, 80022da <write_callback+0x1e>
 80022ca:	e00b      	b.n	80022e4 <write_callback+0x28>
      o_packet.payload[o_packet.pw] = *pr;
 80022cc:	f816 1b01 	ldrb.w	r1, [r6], #1
 80022d0:	18ea      	adds	r2, r5, r3
      count--;
 80022d2:	3c01      	subs	r4, #1
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 80022d4:	3301      	adds	r3, #1
      o_packet.payload[o_packet.pw] = *pr;
 80022d6:	7051      	strb	r1, [r2, #1]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 80022d8:	702b      	strb	r3, [r5, #0]
 80022da:	782b      	ldrb	r3, [r5, #0]
 80022dc:	2b1f      	cmp	r3, #31
 80022de:	d802      	bhi.n	80022e6 <write_callback+0x2a>
 80022e0:	2c00      	cmp	r4, #0
 80022e2:	d1f3      	bne.n	80022cc <write_callback+0x10>
    }
  }
  return res;
}
 80022e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	d1ee      	bne.n	80022c8 <write_callback+0xc>
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 80022ea:	2121      	movs	r1, #33	; 0x21
 80022ec:	4628      	mov	r0, r5
 80022ee:	f000 fc95 	bl	8002c1c <ioRawWriteBuffer>
      o_packet.pw = 0;
 80022f2:	702f      	strb	r7, [r5, #0]
 80022f4:	e7e8      	b.n	80022c8 <write_callback+0xc>
 80022f6:	bf00      	nop
 80022f8:	200043b8 	.word	0x200043b8

080022fc <read_callback>:
  i_packet.pr = 0xFF;
  i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 80022fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002300:	460c      	mov	r4, r1
  bool res = true;
  uint8_t *pw = (uint8_t *)buf;

  UNUSED(stream);

  if (count == 0)
 8002302:	4615      	mov	r5, r2
 8002304:	b35a      	cbz	r2, 800235e <read_callback+0x62>
    return true;

  if (i_packet.pr == 0xFF)
 8002306:	4e20      	ldr	r6, [pc, #128]	; (8002388 <read_callback+0x8c>)
 8002308:	4f20      	ldr	r7, [pc, #128]	; (800238c <read_callback+0x90>)
 800230a:	7833      	ldrb	r3, [r6, #0]
 800230c:	2bff      	cmp	r3, #255	; 0xff
 800230e:	d008      	beq.n	8002322 <read_callback+0x26>

  if (res == false)
    return res;

  while (count) {
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002310:	f04f 0900 	mov.w	r9, #0
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002314:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002388 <read_callback+0x8c>
 8002318:	683b      	ldr	r3, [r7, #0]
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 800231a:	2200      	movs	r2, #0
 800231c:	18f0      	adds	r0, r6, r3
 800231e:	1b1b      	subs	r3, r3, r4
 8002320:	e013      	b.n	800234a <read_callback+0x4e>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002322:	2121      	movs	r1, #33	; 0x21
 8002324:	4630      	mov	r0, r6
 8002326:	f000 fc87 	bl	8002c38 <ioRawReadBuffer>
  i_ridx = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	603b      	str	r3, [r7, #0]
  if (res == false)
 800232e:	2800      	cmp	r0, #0
 8002330:	d1ee      	bne.n	8002310 <read_callback+0x14>
      read_packet();
    }
  }

  return res;
}
 8002332:	b003      	add	sp, #12
 8002334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *pw = i_packet.payload[i_ridx];
 8002338:	f810 2f01 	ldrb.w	r2, [r0, #1]!
      count--;
 800233c:	3d01      	subs	r5, #1
      *pw = i_packet.payload[i_ridx];
 800233e:	f804 2b01 	strb.w	r2, [r4], #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002342:	7832      	ldrb	r2, [r6, #0]
 8002344:	3a01      	subs	r2, #1
 8002346:	7032      	strb	r2, [r6, #0]
 8002348:	2201      	movs	r2, #1
 800234a:	f896 c000 	ldrb.w	ip, [r6]
 800234e:	18e1      	adds	r1, r4, r3
 8002350:	f1bc 0f00 	cmp.w	ip, #0
 8002354:	d005      	beq.n	8002362 <read_callback+0x66>
 8002356:	2d00      	cmp	r5, #0
 8002358:	d1ee      	bne.n	8002338 <read_callback+0x3c>
 800235a:	b102      	cbz	r2, 800235e <read_callback+0x62>
 800235c:	6039      	str	r1, [r7, #0]
 800235e:	2001      	movs	r0, #1
 8002360:	e7e7      	b.n	8002332 <read_callback+0x36>
 8002362:	b102      	cbz	r2, 8002366 <read_callback+0x6a>
 8002364:	6039      	str	r1, [r7, #0]
    if (count && i_packet.pr == 0) {
 8002366:	2d00      	cmp	r5, #0
 8002368:	d0f9      	beq.n	800235e <read_callback+0x62>
      uint8_t sync = 0xAA;
 800236a:	23aa      	movs	r3, #170	; 0xaa
      ioRawWriteBuffer(&sync, 1);
 800236c:	2101      	movs	r1, #1
 800236e:	f10d 0007 	add.w	r0, sp, #7
      uint8_t sync = 0xAA;
 8002372:	f88d 3007 	strb.w	r3, [sp, #7]
      ioRawWriteBuffer(&sync, 1);
 8002376:	f000 fc51 	bl	8002c1c <ioRawWriteBuffer>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 800237a:	2121      	movs	r1, #33	; 0x21
 800237c:	4640      	mov	r0, r8
 800237e:	f000 fc5b 	bl	8002c38 <ioRawReadBuffer>
  i_ridx = 0;
 8002382:	f8c7 9000 	str.w	r9, [r7]
  while (count) {
 8002386:	e7c7      	b.n	8002318 <read_callback+0x1c>
 8002388:	20004390 	.word	0x20004390
 800238c:	200043b4 	.word	0x200043b4

08002390 <pb_io_flush_ostream>:
{
 8002390:	b510      	push	{r4, lr}
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8002392:	4c06      	ldr	r4, [pc, #24]	; (80023ac <pb_io_flush_ostream+0x1c>)
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002394:	2121      	movs	r1, #33	; 0x21
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8002396:	7823      	ldrb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002398:	4620      	mov	r0, r4
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 800239a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800239e:	7023      	strb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 80023a0:	f000 fc3c 	bl	8002c1c <ioRawWriteBuffer>
  o_packet.pw = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	7023      	strb	r3, [r4, #0]
}
 80023a8:	bd10      	pop	{r4, pc}
 80023aa:	bf00      	nop
 80023ac:	200043b8 	.word	0x200043b8

080023b0 <pb_io_flush_istream>:
  i_packet.pr = 0xFF;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <pb_io_flush_istream+0x10>)
 80023b2:	22ff      	movs	r2, #255	; 0xff
 80023b4:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 80023b6:	2200      	movs	r2, #0
 80023b8:	4b02      	ldr	r3, [pc, #8]	; (80023c4 <pb_io_flush_istream+0x14>)
 80023ba:	601a      	str	r2, [r3, #0]
}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20004390 	.word	0x20004390
 80023c4:	200043b4 	.word	0x200043b4

080023c8 <pb_io_ostream>:
#ifndef PB_NO_ERRMSG
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0, NULL};
#else
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
#endif
  return stream;
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <pb_io_ostream+0x14>)
 80023ca:	e9c0 2100 	strd	r2, r1, [r0]
 80023ce:	f04f 31ff 	mov.w	r1, #4294967295
 80023d2:	2200      	movs	r2, #0
 80023d4:	e9c0 1202 	strd	r1, r2, [r0, #8]
}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	080022bd 	.word	0x080022bd

080023e0 <pb_io_istream>:
#ifndef PB_NO_ERRMSG
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX, NULL};
#else
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
#endif
  return stream;
 80023e0:	4a03      	ldr	r2, [pc, #12]	; (80023f0 <pb_io_istream+0x10>)
 80023e2:	e9c0 2100 	strd	r2, r1, [r0]
 80023e6:	f04f 32ff 	mov.w	r2, #4294967295
 80023ea:	6082      	str	r2, [r0, #8]
}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	080022fd 	.word	0x080022fd

080023f4 <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 80023f4:	b508      	push	{r3, lr}
  ioRawDisableLLWrite();
 80023f6:	f000 fc2d 	bl	8002c54 <ioRawDisableLLWrite>
  return 0;
}
 80023fa:	2000      	movs	r0, #0
 80023fc:	bd08      	pop	{r3, pc}

080023fe <encode_uint32>:
/*
 * Callback function to encode array of uint32
 */
bool encode_uint32(pb_ostream_t *stream, const pb_field_t *field,
                   void * const *arg)
{
 80023fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct _encode_uint32* array = (struct _encode_uint32 *)*arg;
 8002402:	f8d2 8000 	ldr.w	r8, [r2]
  int offset = (array->offset == 0)?4:array->offset;
  for (size_t i = 0; i < array->size; i++)
 8002406:	2600      	movs	r6, #0
{
 8002408:	4607      	mov	r7, r0
 800240a:	4689      	mov	r9, r1
  int offset = (array->offset == 0)?4:array->offset;
 800240c:	f8d8 4008 	ldr.w	r4, [r8, #8]
  for (size_t i = 0; i < array->size; i++)
 8002410:	4635      	mov	r5, r6
 8002412:	2c00      	cmp	r4, #0
 8002414:	bf08      	it	eq
 8002416:	2404      	moveq	r4, #4
 8002418:	f8d8 3000 	ldr.w	r3, [r8]
 800241c:	42ab      	cmp	r3, r5
 800241e:	d801      	bhi.n	8002424 <encode_uint32+0x26>
    else
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
      return false;
  }
  return true;
 8002420:	2001      	movs	r0, #1
 8002422:	e005      	b.n	8002430 <encode_uint32+0x32>
    if (!pb_encode_tag_for_field(stream, field))
 8002424:	4649      	mov	r1, r9
 8002426:	4638      	mov	r0, r7
 8002428:	f003 f914 	bl	8005654 <pb_encode_tag_for_field>
 800242c:	b910      	cbnz	r0, 8002434 <encode_uint32+0x36>
      return false;
 800242e:	2000      	movs	r0, #0
}
 8002430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8002434:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (offset == 2)
 8002438:	2c02      	cmp	r4, #2
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 800243a:	4638      	mov	r0, r7
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
 800243c:	bf18      	it	ne
 800243e:	599a      	ldrne	r2, [r3, r6]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8002440:	4426      	add	r6, r4
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8002442:	bf08      	it	eq
 8002444:	f833 2015 	ldrheq.w	r2, [r3, r5, lsl #1]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8002448:	17d3      	asrs	r3, r2, #31
 800244a:	f003 f85a 	bl	8005502 <pb_encode_varint>
 800244e:	2800      	cmp	r0, #0
 8002450:	d0ed      	beq.n	800242e <encode_uint32+0x30>
  for (size_t i = 0; i < array->size; i++)
 8002452:	3501      	adds	r5, #1
 8002454:	e7e0      	b.n	8002418 <encode_uint32+0x1a>

08002456 <encode_data_cb>:
/*
 * Local callback function to encode datas field from aiDataMsg msg
 */
bool encode_data_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 8002456:	b570      	push	{r4, r5, r6, lr}
  aiPbData *data = (aiPbData *)*arg;
 8002458:	6815      	ldr	r5, [r2, #0]
{
 800245a:	4604      	mov	r4, r0

  pb_byte_t *pr = (pb_byte_t *)data->addr;
 800245c:	68ae      	ldr	r6, [r5, #8]

  if (!pb_encode_tag_for_field(stream, field))
 800245e:	f003 f8f9 	bl	8005654 <pb_encode_tag_for_field>
 8002462:	b130      	cbz	r0, 8002472 <encode_data_cb+0x1c>
    return false;

  if (!pb_encode_string(stream, pr, data->size))
 8002464:	686a      	ldr	r2, [r5, #4]
 8002466:	4631      	mov	r1, r6
 8002468:	4620      	mov	r0, r4
    return false;

  return true;
}
 800246a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (!pb_encode_string(stream, pr, data->size))
 800246e:	f003 ba25 	b.w	80058bc <pb_encode_string>
}
 8002472:	bd70      	pop	{r4, r5, r6, pc}

08002474 <decode_data_cb>:
{
 8002474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  aiPbData *data = (aiPbData *)*arg;
 8002476:	6814      	ldr	r4, [r2, #0]
{
 8002478:	4605      	mov	r5, r0
  data->nb_read = 0;
 800247a:	2300      	movs	r3, #0
  uint8_t *pw = (uint8_t *)data->addr;
 800247c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
    data->nb_read += itsize;
 8002480:	60e3      	str	r3, [r4, #12]
  while (stream->bytes_left) {
 8002482:	68ab      	ldr	r3, [r5, #8]
 8002484:	b913      	cbnz	r3, 800248c <decode_data_cb+0x18>
  return true;
 8002486:	2001      	movs	r0, #1
}
 8002488:	b003      	add	sp, #12
 800248a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 800248c:	2201      	movs	r2, #1
 800248e:	4669      	mov	r1, sp
 8002490:	4628      	mov	r0, r5
 8002492:	f002 fbdb 	bl	8004c4c <pb_read>
 8002496:	2800      	cmp	r0, #0
 8002498:	d0f6      	beq.n	8002488 <decode_data_cb+0x14>
    if ((pw) && (maxr > 0)) /* additional data are skipped */
 800249a:	b13f      	cbz	r7, 80024ac <decode_data_cb+0x38>
 800249c:	2e00      	cmp	r6, #0
      *pw = *(uint8_t *)&number;
 800249e:	bfc2      	ittt	gt
 80024a0:	f89d 3000 	ldrbgt.w	r3, [sp]
      maxr--;
 80024a4:	f106 36ff 	addgt.w	r6, r6, #4294967295
      *pw = *(uint8_t *)&number;
 80024a8:	f807 3b01 	strbgt.w	r3, [r7], #1
    data->nb_read += itsize;
 80024ac:	68e3      	ldr	r3, [r4, #12]
 80024ae:	3301      	adds	r3, #1
 80024b0:	e7e6      	b.n	8002480 <decode_data_cb+0xc>
	...

080024b4 <aiPbMgrInit>:
{
 80024b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b6:	b089      	sub	sp, #36	; 0x24
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80024b8:	4c1a      	ldr	r4, [pc, #104]	; (8002524 <aiPbMgrInit+0x70>)
 80024ba:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80024be:	2100      	movs	r1, #0
  pbContextMgr.input = pb_io_istream(0);
 80024c0:	ae04      	add	r6, sp, #16
{
 80024c2:	4605      	mov	r5, r0
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80024c4:	4620      	mov	r0, r4
  pbContextMgr.output = pb_io_ostream(0);
 80024c6:	f104 070c 	add.w	r7, r4, #12
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80024ca:	f007 ff98 	bl	800a3fe <memset>
  pb_io_stream_init();
 80024ce:	f7ff ff91 	bl	80023f4 <pb_io_stream_init>
  pbContextMgr.input = pb_io_istream(0);
 80024d2:	4630      	mov	r0, r6
 80024d4:	2100      	movs	r1, #0
 80024d6:	f7ff ff83 	bl	80023e0 <pb_io_istream>
 80024da:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  pbContextMgr.output = pb_io_ostream(0);
 80024de:	466e      	mov	r6, sp
  pbContextMgr.input = pb_io_istream(0);
 80024e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pbContextMgr.output = pb_io_ostream(0);
 80024e4:	2100      	movs	r1, #0
 80024e6:	4630      	mov	r0, r6
 80024e8:	f7ff ff6e 	bl	80023c8 <pb_io_ostream>
 80024ec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80024f0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
  pbContextMgr.n_func = 0;
 80024f4:	2300      	movs	r3, #0
  pbContextMgr.funcs = NULL;
 80024f6:	e9c4 3307 	strd	r3, r3, [r4, #28]
  if (funcs) {
 80024fa:	b97d      	cbnz	r5, 800251c <aiPbMgrInit+0x68>
  pbContextMgr.state = PB_MGR_READY;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
}
 8002502:	b009      	add	sp, #36	; 0x24
 8002504:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cfunc++;
 8002506:	320c      	adds	r2, #12
 8002508:	4633      	mov	r3, r6
 800250a:	2101      	movs	r1, #1
    while (cfunc->process) {
 800250c:	6850      	ldr	r0, [r2, #4]
 800250e:	1c5e      	adds	r6, r3, #1
 8002510:	2800      	cmp	r0, #0
 8002512:	d1f8      	bne.n	8002506 <aiPbMgrInit+0x52>
 8002514:	b101      	cbz	r1, 8002518 <aiPbMgrInit+0x64>
 8002516:	6223      	str	r3, [r4, #32]
    pbContextMgr.funcs = funcs;
 8002518:	61e5      	str	r5, [r4, #28]
 800251a:	e7ef      	b.n	80024fc <aiPbMgrInit+0x48>
 800251c:	462a      	mov	r2, r5
 800251e:	4619      	mov	r1, r3
 8002520:	e7f4      	b.n	800250c <aiPbMgrInit+0x58>
 8002522:	bf00      	nop
 8002524:	200043e0 	.word	0x200043e0

08002528 <aiPbStrCopy>:
{
 8002528:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800252a:	4616      	mov	r6, r2
  const char undef[] = "UNDEFINED";
 800252c:	4a10      	ldr	r2, [pc, #64]	; (8002570 <aiPbStrCopy+0x48>)
{
 800252e:	4605      	mov	r5, r0
 8002530:	460c      	mov	r4, r1
  const char undef[] = "UNDEFINED";
 8002532:	6810      	ldr	r0, [r2, #0]
 8002534:	ab01      	add	r3, sp, #4
 8002536:	6851      	ldr	r1, [r2, #4]
 8002538:	8912      	ldrh	r2, [r2, #8]
 800253a:	c303      	stmia	r3!, {r0, r1}
  size_t l = strlen(src);
 800253c:	4628      	mov	r0, r5
  const char undef[] = "UNDEFINED";
 800253e:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 8002540:	f7fd fece 	bl	80002e0 <strlen>
  if (l > max)
 8002544:	42b0      	cmp	r0, r6
    l = max-1;
 8002546:	bf88      	it	hi
 8002548:	f106 30ff 	addhi.w	r0, r6, #4294967295
  if (!dst)
 800254c:	b174      	cbz	r4, 800256c <aiPbStrCopy+0x44>
  if (src && l)
 800254e:	b138      	cbz	r0, 8002560 <aiPbStrCopy+0x38>
    memcpy(dst, src, l+1);
 8002550:	1c42      	adds	r2, r0, #1
 8002552:	4629      	mov	r1, r5
 8002554:	4620      	mov	r0, r4
}
 8002556:	b004      	add	sp, #16
 8002558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(dst, src, l+1);
 800255c:	f007 bff1 	b.w	800a542 <memcpy>
    memcpy(dst, undef, strlen(undef)+1);
 8002560:	ab01      	add	r3, sp, #4
 8002562:	cb03      	ldmia	r3!, {r0, r1}
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	6020      	str	r0, [r4, #0]
 8002568:	6061      	str	r1, [r4, #4]
 800256a:	8123      	strh	r3, [r4, #8]
}
 800256c:	b004      	add	sp, #16
 800256e:	bd70      	pop	{r4, r5, r6, pc}
 8002570:	0800cb38 	.word	0x0800cb38

08002574 <encode_tensor_desc>:
{
 8002574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002578:	4605      	mov	r5, r0
 800257a:	b09c      	sub	sp, #112	; 0x70
 800257c:	4688      	mov	r8, r1
  struct _encode_tensor_desc* tensors = (struct _encode_tensor_desc *)*arg;
 800257e:	6816      	ldr	r6, [r2, #0]
  for (size_t i = 0; i < tensors->size; i++)
 8002580:	2400      	movs	r4, #0
    msg.dims.funcs.encode = encode_uint32;
 8002582:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80025d4 <encode_tensor_desc+0x60>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 8002586:	f8df a050 	ldr.w	sl, [pc, #80]	; 80025d8 <encode_tensor_desc+0x64>
  for (size_t i = 0; i < tensors->size; i++)
 800258a:	6873      	ldr	r3, [r6, #4]
 800258c:	42a3      	cmp	r3, r4
 800258e:	d801      	bhi.n	8002594 <encode_tensor_desc+0x20>
  return true;
 8002590:	2001      	movs	r0, #1
 8002592:	e01c      	b.n	80025ce <encode_tensor_desc+0x5a>
    aiTensorDescMsg msg = aiTensorDescMsg_init_zero;
 8002594:	2264      	movs	r2, #100	; 0x64
 8002596:	2100      	movs	r1, #0
 8002598:	a803      	add	r0, sp, #12
 800259a:	f007 ff30 	bl	800a3fe <memset>
    tensors->cb(i, tensors->data, &msg, &array_u32);
 800259e:	68b1      	ldr	r1, [r6, #8]
 80025a0:	4620      	mov	r0, r4
 80025a2:	466b      	mov	r3, sp
 80025a4:	aa03      	add	r2, sp, #12
 80025a6:	6837      	ldr	r7, [r6, #0]
 80025a8:	47b8      	blx	r7
    if (!pb_encode_tag_for_field(stream, field))
 80025aa:	4641      	mov	r1, r8
 80025ac:	4628      	mov	r0, r5
    msg.dims.funcs.encode = encode_uint32;
 80025ae:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
    msg.dims.arg = &array_u32;
 80025b2:	f8cd d05c 	str.w	sp, [sp, #92]	; 0x5c
    if (!pb_encode_tag_for_field(stream, field))
 80025b6:	f003 f84d 	bl	8005654 <pb_encode_tag_for_field>
 80025ba:	b138      	cbz	r0, 80025cc <encode_tensor_desc+0x58>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 80025bc:	aa03      	add	r2, sp, #12
 80025be:	4651      	mov	r1, sl
 80025c0:	4628      	mov	r0, r5
 80025c2:	f003 f9be 	bl	8005942 <pb_encode_submessage>
 80025c6:	b108      	cbz	r0, 80025cc <encode_tensor_desc+0x58>
  for (size_t i = 0; i < tensors->size; i++)
 80025c8:	3401      	adds	r4, #1
 80025ca:	e7de      	b.n	800258a <encode_tensor_desc+0x16>
      return false;
 80025cc:	2000      	movs	r0, #0
}
 80025ce:	b01c      	add	sp, #112	; 0x70
 80025d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025d4:	080023ff 	.word	0x080023ff
 80025d8:	0800ce3c 	.word	0x0800ce3c

080025dc <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
    EnumState state)
{
 80025dc:	b508      	push	{r3, lr}
  resp->reqid = req->reqid;
 80025de:	6803      	ldr	r3, [r0, #0]
  resp->state = state;
 80025e0:	710a      	strb	r2, [r1, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 80025e2:	460a      	mov	r2, r1
  resp->reqid = req->reqid;
 80025e4:	600b      	str	r3, [r1, #0]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 80025e6:	4804      	ldr	r0, [pc, #16]	; (80025f8 <aiPbMgrSendResp+0x1c>)
 80025e8:	4904      	ldr	r1, [pc, #16]	; (80025fc <aiPbMgrSendResp+0x20>)
 80025ea:	f003 f933 	bl	8005854 <pb_encode>
  pb_io_flush_ostream();
}
 80025ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pb_io_flush_ostream();
 80025f2:	f7ff becd 	b.w	8002390 <pb_io_flush_ostream>
 80025f6:	bf00      	nop
 80025f8:	200043ec 	.word	0x200043ec
 80025fc:	0800cfb8 	.word	0x0800cfb8

08002600 <aiPbMgrWaitAndProcess>:
{
 8002600:	b570      	push	{r4, r5, r6, lr}
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8002602:	4c1d      	ldr	r4, [pc, #116]	; (8002678 <aiPbMgrWaitAndProcess+0x78>)
  pb_io_flush_istream();
 8002604:	f7ff fed4 	bl	80023b0 <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8002608:	491c      	ldr	r1, [pc, #112]	; (800267c <aiPbMgrWaitAndProcess+0x7c>)
 800260a:	f104 0224 	add.w	r2, r4, #36	; 0x24
 800260e:	4620      	mov	r0, r4
 8002610:	f002 fea1 	bl	8005356 <pb_decode_delimited>
 8002614:	b348      	cbz	r0, 800266a <aiPbMgrWaitAndProcess+0x6a>
    pb_io_flush_istream();
 8002616:	f7ff fecb 	bl	80023b0 <pb_io_flush_istream>
    pbContextMgr.state = PB_MGR_ON_GOING;
 800261a:	2302      	movs	r3, #2
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 800261c:	6a21      	ldr	r1, [r4, #32]
 800261e:	2500      	movs	r5, #0
    pbContextMgr.state = PB_MGR_ON_GOING;
 8002620:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8002624:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8002628:	69e3      	ldr	r3, [r4, #28]
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 800262a:	42a9      	cmp	r1, r5
 800262c:	d00d      	beq.n	800264a <aiPbMgrWaitAndProcess+0x4a>
      cfunc = &pbContextMgr.funcs[idx];
 800262e:	461a      	mov	r2, r3
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8002630:	f813 6b0c 	ldrb.w	r6, [r3], #12
 8002634:	4286      	cmp	r6, r0
 8002636:	d11c      	bne.n	8002672 <aiPbMgrWaitAndProcess+0x72>
        cfunc->process(&(pbContextMgr.req), &(pbContextMgr.resp), cfunc->param);
 8002638:	4911      	ldr	r1, [pc, #68]	; (8002680 <aiPbMgrWaitAndProcess+0x80>)
 800263a:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
 800263e:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
 8002642:	4798      	blx	r3
    if (idx == pbContextMgr.n_func) {
 8002644:	6a23      	ldr	r3, [r4, #32]
 8002646:	42ab      	cmp	r3, r5
 8002648:	d10c      	bne.n	8002664 <aiPbMgrWaitAndProcess+0x64>
    EnumState state, uint32_t param, EnumError error)
{
  resp->which_payload = respMsg_ack_tag;
  resp->payload.ack.param = param;
  resp->payload.ack.error = error;
  aiPbMgrSendResp(req, resp, state);
 800264a:	490d      	ldr	r1, [pc, #52]	; (8002680 <aiPbMgrWaitAndProcess+0x80>)
  resp->payload.ack.param = param;
 800264c:	2204      	movs	r2, #4
  resp->which_payload = respMsg_ack_tag;
 800264e:	230c      	movs	r3, #12
  aiPbMgrSendResp(req, resp, state);
 8002650:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
  resp->payload.ack.param = param;
 8002654:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  resp->which_payload = respMsg_ack_tag;
 8002658:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
  resp->payload.ack.error = error;
 800265c:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  aiPbMgrSendResp(req, resp, state);
 8002660:	f7ff ffbc 	bl	80025dc <aiPbMgrSendResp>
    pbContextMgr.state = PB_MGR_READY;
 8002664:	2301      	movs	r3, #1
 8002666:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
  pb_io_flush_istream();
 800266a:	f7ff fea1 	bl	80023b0 <pb_io_flush_istream>
}
 800266e:	2000      	movs	r0, #0
 8002670:	bd70      	pop	{r4, r5, r6, pc}
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002672:	3501      	adds	r5, #1
 8002674:	e7d9      	b.n	800262a <aiPbMgrWaitAndProcess+0x2a>
 8002676:	bf00      	nop
 8002678:	200043e0 	.word	0x200043e0
 800267c:	0800cf58 	.word	0x0800cf58
 8002680:	20004458 	.word	0x20004458

08002684 <aiPbMgrSendAck>:
{
 8002684:	b470      	push	{r4, r5, r6}
  resp->which_payload = respMsg_ack_tag;
 8002686:	260c      	movs	r6, #12
{
 8002688:	f89d 500c 	ldrb.w	r5, [sp, #12]
  resp->payload.ack.param = param;
 800268c:	608b      	str	r3, [r1, #8]
  resp->which_payload = respMsg_ack_tag;
 800268e:	80ce      	strh	r6, [r1, #6]
  resp->payload.ack.error = error;
 8002690:	730d      	strb	r5, [r1, #12]
}
 8002692:	bc70      	pop	{r4, r5, r6}
  aiPbMgrSendResp(req, resp, state);
 8002694:	f7ff bfa2 	b.w	80025dc <aiPbMgrSendResp>

08002698 <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 8002698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;
 800269a:	2300      	movs	r3, #0
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 800269c:	aa02      	add	r2, sp, #8
 800269e:	4907      	ldr	r1, [pc, #28]	; (80026bc <aiPbMgrWaitAck+0x24>)
 80026a0:	4807      	ldr	r0, [pc, #28]	; (80026c0 <aiPbMgrWaitAck+0x28>)
  ackMsg ack = ackMsg_init_default;
 80026a2:	9302      	str	r3, [sp, #8]
 80026a4:	f88d 300c 	strb.w	r3, [sp, #12]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 80026a8:	f002 fe55 	bl	8005356 <pb_decode_delimited>
 80026ac:	9001      	str	r0, [sp, #4]
  pb_io_flush_istream();
 80026ae:	f7ff fe7f 	bl	80023b0 <pb_io_flush_istream>
  return res;
}
 80026b2:	9801      	ldr	r0, [sp, #4]
 80026b4:	b005      	add	sp, #20
 80026b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80026ba:	bf00      	nop
 80026bc:	0800cc00 	.word	0x0800cc00
 80026c0:	200043e0 	.word	0x200043e0

080026c4 <aiPbMgrSendLogV2>:
  pb_io_flush_istream();
  return res;
}

bool aiPbMgrSendLogV2(EnumState state, uint32_t lvl, const char *str)
{
 80026c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;

  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80026c6:	4c19      	ldr	r4, [pc, #100]	; (800272c <aiPbMgrSendLogV2+0x68>)
{
 80026c8:	460e      	mov	r6, r1
 80026ca:	4611      	mov	r1, r2
  ackMsg ack = ackMsg_init_default;
 80026cc:	2300      	movs	r3, #0
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80026ce:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
{
 80026d2:	4605      	mov	r5, r0
  ackMsg ack = ackMsg_init_default;
 80026d4:	9302      	str	r3, [sp, #8]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80026d6:	2a02      	cmp	r2, #2
  ackMsg ack = ackMsg_init_default;
 80026d8:	f88d 300c 	strb.w	r3, [sp, #12]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 80026dc:	d124      	bne.n	8002728 <aiPbMgrSendLogV2+0x64>
    return false;

  size_t len = strlen(str);
 80026de:	4608      	mov	r0, r1
 80026e0:	9101      	str	r1, [sp, #4]
 80026e2:	f7fd fdfd 	bl	80002e0 <strlen>
  pbContextMgr.resp.which_payload = respMsg_log_tag;
  pbContextMgr.resp.payload.log.level = lvl;
  if (len >= sizeof(pbContextMgr.resp.payload.log.str))
    len = sizeof(pbContextMgr.resp.payload.log.str) - 1;

  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 80026e6:	287f      	cmp	r0, #127	; 0x7f
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 80026e8:	f04f 030d 	mov.w	r3, #13
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 80026ec:	9901      	ldr	r1, [sp, #4]
 80026ee:	bf28      	it	cs
 80026f0:	207f      	movcs	r0, #127	; 0x7f
  pbContextMgr.resp.payload.log.level = lvl;
 80026f2:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 80026f6:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 80026fa:	1c42      	adds	r2, r0, #1
 80026fc:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8002700:	f007 ff1f 	bl	800a542 <memcpy>

  aiPbMgrSendResp(&(pbContextMgr.req), &(pbContextMgr.resp), state);
 8002704:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8002708:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800270c:	462a      	mov	r2, r5
 800270e:	f7ff ff65 	bl	80025dc <aiPbMgrSendResp>

  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002712:	4620      	mov	r0, r4
 8002714:	aa02      	add	r2, sp, #8
 8002716:	4906      	ldr	r1, [pc, #24]	; (8002730 <aiPbMgrSendLogV2+0x6c>)
 8002718:	f002 fe1d 	bl	8005356 <pb_decode_delimited>
 800271c:	4604      	mov	r4, r0
  pb_io_flush_istream();
 800271e:	f7ff fe47 	bl	80023b0 <pb_io_flush_istream>
  return res;
}
 8002722:	4620      	mov	r0, r4
 8002724:	b004      	add	sp, #16
 8002726:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8002728:	461c      	mov	r4, r3
 800272a:	e7fa      	b.n	8002722 <aiPbMgrSendLogV2+0x5e>
 800272c:	200043e0 	.word	0x200043e0
 8002730:	0800cc00 	.word	0x0800cc00

08002734 <aiPbMgrReceiveData>:

bool aiPbMgrReceiveData(aiPbData *data)
{
 8002734:	b510      	push	{r4, lr}
  aiDataMsg msg;

  msg.datas.funcs.decode = &decode_data_cb;
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <aiPbMgrReceiveData+0x28>)
{
 8002738:	b086      	sub	sp, #24
 800273a:	4604      	mov	r4, r0
  msg.datas.arg = (void *)data;

  /* Waiting and decoding aiDataMsg message */
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 800273c:	4908      	ldr	r1, [pc, #32]	; (8002760 <aiPbMgrReceiveData+0x2c>)
 800273e:	aa01      	add	r2, sp, #4
  msg.datas.arg = (void *)data;
 8002740:	e9cd 3004 	strd	r3, r0, [sp, #16]
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 8002744:	4807      	ldr	r0, [pc, #28]	; (8002764 <aiPbMgrReceiveData+0x30>)
 8002746:	f002 fe06 	bl	8005356 <pb_decode_delimited>
  pb_io_flush_istream();
 800274a:	f7ff fe31 	bl	80023b0 <pb_io_flush_istream>

  data->type = msg.type;
 800274e:	9b01      	ldr	r3, [sp, #4]
  data->addr = msg.addr;

  return true;
}
 8002750:	2001      	movs	r0, #1
  data->type = msg.type;
 8002752:	6023      	str	r3, [r4, #0]
  data->addr = msg.addr;
 8002754:	9b03      	ldr	r3, [sp, #12]
 8002756:	60a3      	str	r3, [r4, #8]
}
 8002758:	b006      	add	sp, #24
 800275a:	bd10      	pop	{r4, pc}
 800275c:	08002475 	.word	0x08002475
 8002760:	0800cc34 	.word	0x0800cc34
 8002764:	200043e0 	.word	0x200043e0

08002768 <aiPbMgrSendOperator>:


bool aiPbMgrSendOperator(const reqMsg *req, respMsg *resp,
    EnumState state, const char *name, const uint32_t type, const uint32_t id,
    aiOpPerf *perf)
{
 8002768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800276a:	4617      	mov	r7, r2
 800276c:	b085      	sub	sp, #20
  struct _encode_uint32 array;
  resp->which_payload = respMsg_op_tag;
 800276e:	2210      	movs	r2, #16
{
 8002770:	4606      	mov	r6, r0
 8002772:	460c      	mov	r4, r1
 8002774:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (name)
 8002776:	4618      	mov	r0, r3
  resp->which_payload = respMsg_op_tag;
 8002778:	80ca      	strh	r2, [r1, #6]
  if (name)
 800277a:	b31b      	cbz	r3, 80027c4 <aiPbMgrSendOperator+0x5c>
    aiPbStrCopy(name, &resp->payload.op.name[0], sizeof(resp->payload.op.name));
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	3108      	adds	r1, #8
 8002780:	f7ff fed2 	bl	8002528 <aiPbStrCopy>
  else
    resp->payload.op.name[0] = 0;
  resp->payload.op.type = type;
 8002784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002786:	64a3      	str	r3, [r4, #72]	; 0x48
  resp->payload.op.id = id;
 8002788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800278a:	64e3      	str	r3, [r4, #76]	; 0x4c

  if (perf) {
 800278c:	b1f5      	cbz	r5, 80027cc <aiPbMgrSendOperator+0x64>
    resp->payload.op.stack_used = perf->stack_usage;
 800278e:	692b      	ldr	r3, [r5, #16]
 8002790:	6623      	str	r3, [r4, #96]	; 0x60
    resp->payload.op.heap_used = perf->heap_usage;
 8002792:	696b      	ldr	r3, [r5, #20]
 8002794:	6663      	str	r3, [r4, #100]	; 0x64
    resp->payload.op.duration = perf->duration;
 8002796:	682b      	ldr	r3, [r5, #0]
 8002798:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = perf->counter_type;
 800279a:	686b      	ldr	r3, [r5, #4]
 800279c:	6563      	str	r3, [r4, #84]	; 0x54
    if (perf->counters) {
 800279e:	68eb      	ldr	r3, [r5, #12]
 80027a0:	b193      	cbz	r3, 80027c8 <aiPbMgrSendOperator+0x60>
      array.size = perf->counter_n;
 80027a2:	68aa      	ldr	r2, [r5, #8]
	  array.data = (void *)perf->counters;
 80027a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
	  array.offset = 4;
 80027a8:	2304      	movs	r3, #4
 80027aa:	9303      	str	r3, [sp, #12]
      resp->payload.op.counters.funcs.encode = encode_uint32;
 80027ac:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <aiPbMgrSendOperator+0x70>)
 80027ae:	65a3      	str	r3, [r4, #88]	; 0x58
      resp->payload.op.counters.arg = &array;
 80027b0:	ab01      	add	r3, sp, #4
 80027b2:	65e3      	str	r3, [r4, #92]	; 0x5c
    resp->payload.op.duration = 0.0f;
    resp->payload.op.counter_type = 0;
    resp->payload.op.counters.funcs.encode = NULL;
  }

  aiPbMgrSendResp(req, resp, state);
 80027b4:	4630      	mov	r0, r6
 80027b6:	463a      	mov	r2, r7
 80027b8:	4621      	mov	r1, r4
 80027ba:	f7ff ff0f 	bl	80025dc <aiPbMgrSendResp>
  // aiPbMgrWaitAck();

  return true;
}
 80027be:	2001      	movs	r0, #1
 80027c0:	b005      	add	sp, #20
 80027c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    resp->payload.op.name[0] = 0;
 80027c4:	720b      	strb	r3, [r1, #8]
 80027c6:	e7dd      	b.n	8002784 <aiPbMgrSendOperator+0x1c>
      resp->payload.op.counters.funcs.encode = NULL;
 80027c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80027ca:	e7f3      	b.n	80027b4 <aiPbMgrSendOperator+0x4c>
    resp->payload.op.duration = 0.0f;
 80027cc:	2300      	movs	r3, #0
    resp->payload.op.counters.funcs.encode = NULL;
 80027ce:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
    resp->payload.op.duration = 0.0f;
 80027d2:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = 0;
 80027d4:	e7ee      	b.n	80027b4 <aiPbMgrSendOperator+0x4c>
 80027d6:	bf00      	nop
 80027d8:	080023ff 	.word	0x080023ff

080027dc <aiPbCmdSync>:
#if defined(_IS_GHS_COMPILER) && _IS_GHS_COMPILER
#define _ARM_TOOLS_ID       EnumTools_AI_GHS
#endif

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 80027dc:	b410      	push	{r4}
  resp->which_payload = respMsg_sync_tag;
 80027de:	240a      	movs	r4, #10
 80027e0:	80cc      	strh	r4, [r1, #6]
  resp->payload.sync.version =
 80027e2:	f240 3401 	movw	r4, #769	; 0x301
 80027e6:	608c      	str	r4, [r1, #8]
   *  b15..b8  8b : API variant (EnumAiApiRuntime value)
   *  b23..b16 8b : TOOL-CHAIN ID (EnumTools value)
   */

  resp->payload.sync.rtid = ((uint32_t)param >> 16) & 0xFFFF;
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 80027e8:	b294      	uxth	r4, r2
  resp->payload.sync.rtid = ((uint32_t)param >> 16) & 0xFFFF;
 80027ea:	0c12      	lsrs	r2, r2, #16
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 80027ec:	60cc      	str	r4, [r1, #12]

  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << EnumTools_AI_TOOLS_POS);
 80027ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
}
 80027f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << EnumTools_AI_TOOLS_POS);
 80027f6:	610a      	str	r2, [r1, #16]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80027f8:	2200      	movs	r2, #0
 80027fa:	f7ff beef 	b.w	80025dc <aiPbMgrSendResp>
	...

08002800 <_aiPrintDataInfo>:
    );
}


static void _aiPrintDataInfo(const int idx, const ai_buffer *buffer)
{
 8002800:	b537      	push	{r0, r1, r2, r4, r5, lr}
  const ai_buffer_format fmt = buffer->format;
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 8002802:	e9d1 5200 	ldrd	r5, r2, [r1]
{
 8002806:	4604      	mov	r4, r0
 8002808:	4608      	mov	r0, r1
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 800280a:	2101      	movs	r1, #1
 800280c:	9201      	str	r2, [sp, #4]
 800280e:	f003 ff4d 	bl	80066ac <ai_buffer_get_size>
 8002812:	4629      	mov	r1, r5
 8002814:	f003 ff7e 	bl	8006714 <ai_buffer_get_byte_size>
 8002818:	9a01      	ldr	r2, [sp, #4]
 800281a:	4603      	mov	r3, r0
 800281c:	4621      	mov	r1, r4
 800281e:	4803      	ldr	r0, [pc, #12]	; (800282c <_aiPrintDataInfo+0x2c>)
      idx,
      (int)buffer->data,
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
  );
}
 8002820:	b003      	add	sp, #12
 8002822:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  LC_PRINT("  [%d]  @0x%X/%d\r\n",
 8002826:	f000 ba53 	b.w	8002cd0 <lc_print>
 800282a:	bf00      	nop
 800282c:	0800c220 	.word	0x0800c220

08002830 <aiPlatformVersion>:
{
 8002830:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 8002832:	f004 f8d3 	bl	80069dc <ai_platform_runtime_get_version>
  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8002836:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800283a:	2201      	movs	r2, #1
 800283c:	9302      	str	r3, [sp, #8]
 800283e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002842:	b2c0      	uxtb	r0, r0
 8002844:	4611      	mov	r1, r2
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	2300      	movs	r3, #0
 800284a:	9000      	str	r0, [sp, #0]
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <aiPlatformVersion+0x28>)
 800284e:	f000 fa3f 	bl	8002cd0 <lc_print>
}
 8002852:	b007      	add	sp, #28
 8002854:	f85d fb04 	ldr.w	pc, [sp], #4
 8002858:	0800c233 	.word	0x0800c233

0800285c <aiLogErr>:
{
 800285c:	b410      	push	{r4}
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800285e:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8002862:	b2c4      	uxtb	r4, r0
  if (fct)
 8002864:	b129      	cbz	r1, 8002872 <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8002866:	4622      	mov	r2, r4
 8002868:	4805      	ldr	r0, [pc, #20]	; (8002880 <aiLogErr+0x24>)
}
 800286a:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800286e:	f000 ba2f 	b.w	8002cd0 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8002872:	4621      	mov	r1, r4
 8002874:	461a      	mov	r2, r3
 8002876:	4803      	ldr	r0, [pc, #12]	; (8002884 <aiLogErr+0x28>)
}
 8002878:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800287c:	f000 ba28 	b.w	8002cd0 <lc_print>
 8002880:	0800c265 	.word	0x0800c265
 8002884:	0800c292 	.word	0x0800c292

08002888 <aiPrintBufferInfo>:
  LC_PRINT("(%d,%d,%d,",
 8002888:	6981      	ldr	r1, [r0, #24]
{
 800288a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800288e:	4604      	mov	r4, r0
  const ai_buffer_format fmt = buffer->format;
 8002890:	6806      	ldr	r6, [r0, #0]
  LC_PRINT("(%d,%d,%d,",
 8002892:	4870      	ldr	r0, [pc, #448]	; (8002a54 <aiPrintBufferInfo+0x1cc>)
 8002894:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
{
 8002898:	ed2d 8b02 	vpush	{d8}
  LC_PRINT("(%d,%d,%d,",
 800289c:	6809      	ldr	r1, [r1, #0]
{
 800289e:	b083      	sub	sp, #12
  LC_PRINT("(%d,%d,%d,",
 80028a0:	f000 fa16 	bl	8002cd0 <lc_print>
  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 80028a4:	6962      	ldr	r2, [r4, #20]
 80028a6:	69a0      	ldr	r0, [r4, #24]
 80028a8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028ac:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 80028b0:	d119      	bne.n	80028e6 <aiPrintBufferInfo+0x5e>
    LC_PRINT("%d,%d)",
 80028b2:	6842      	ldr	r2, [r0, #4]
 80028b4:	6901      	ldr	r1, [r0, #16]
 80028b6:	4868      	ldr	r0, [pc, #416]	; (8002a58 <aiPrintBufferInfo+0x1d0>)
 80028b8:	f000 fa0a 	bl	8002cd0 <lc_print>
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 80028bc:	2101      	movs	r1, #1
 80028be:	4620      	mov	r0, r4
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 80028c0:	f3c6 4743 	ubfx	r7, r6, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 80028c4:	f003 fef2 	bl	80066ac <ai_buffer_get_size>
 80028c8:	4601      	mov	r1, r0
 80028ca:	4864      	ldr	r0, [pc, #400]	; (8002a5c <aiPrintBufferInfo+0x1d4>)
 80028cc:	f000 fa00 	bl	8002cd0 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 80028d0:	2f01      	cmp	r7, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80028d2:	ea4f 18e6 	mov.w	r8, r6, asr #7
 80028d6:	f3c6 15c6 	ubfx	r5, r6, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 80028da:	d113      	bne.n	8002904 <aiPrintBufferInfo+0x7c>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80028dc:	4629      	mov	r1, r5
 80028de:	4860      	ldr	r0, [pc, #384]	; (8002a60 <aiPrintBufferInfo+0x1d8>)
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80028e0:	f000 f9f6 	bl	8002cd0 <lc_print>
 80028e4:	e044      	b.n	8002970 <aiPrintBufferInfo+0xe8>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 80028e6:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 80028ea:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 80028ec:	d105      	bne.n	80028fa <aiPrintBufferInfo+0x72>
    LC_PRINT("%d,%d,%d)",
 80028ee:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 80028f2:	485c      	ldr	r0, [pc, #368]	; (8002a64 <aiPrintBufferInfo+0x1dc>)
 80028f4:	f000 f9ec 	bl	8002cd0 <lc_print>
 80028f8:	e7e0      	b.n	80028bc <aiPrintBufferInfo+0x34>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 80028fa:	4619      	mov	r1, r3
 80028fc:	485a      	ldr	r0, [pc, #360]	; (8002a68 <aiPrintBufferInfo+0x1e0>)
 80028fe:	f000 f9e7 	bl	8002cd0 <lc_print>
 8002902:	e7db      	b.n	80028bc <aiPrintBufferInfo+0x34>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8002904:	2f03      	cmp	r7, #3
 8002906:	d102      	bne.n	800290e <aiPrintBufferInfo+0x86>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8002908:	4629      	mov	r1, r5
 800290a:	4858      	ldr	r0, [pc, #352]	; (8002a6c <aiPrintBufferInfo+0x1e4>)
 800290c:	e7e8      	b.n	80028e0 <aiPrintBufferInfo+0x58>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 800290e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8002a88 <aiPrintBufferInfo+0x200>
 8002912:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
 8002916:	462a      	mov	r2, r5
 8002918:	f109 0102 	add.w	r1, r9, #2
 800291c:	f109 003b 	add.w	r0, r9, #59	; 0x3b
 8002920:	bf18      	it	ne
 8002922:	4649      	movne	r1, r9
 8002924:	f000 f9d4 	bl	8002cd0 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 8002928:	2f02      	cmp	r7, #2
 800292a:	d121      	bne.n	8002970 <aiPrintBufferInfo+0xe8>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800292c:	68a3      	ldr	r3, [r4, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d06a      	beq.n	8002a08 <aiPrintBufferInfo+0x180>
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	07d2      	lsls	r2, r2, #31
 8002936:	d567      	bpl.n	8002a08 <aiPrintBufferInfo+0x180>
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d064      	beq.n	8002a08 <aiPrintBufferInfo+0x180>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 800293e:	f8b3 8002 	ldrh.w	r8, [r3, #2]
      LC_PRINT(" %d:", s_);
 8002942:	f109 0040 	add.w	r0, r9, #64	; 0x40
      for (int idx=0; idx<max_; idx++) {
 8002946:	2500      	movs	r5, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8002948:	ed9f 8a49 	vldr	s16, [pc, #292]	; 8002a70 <aiPrintBufferInfo+0x1e8>
      const int max_ = s_> 4?4:s_;
 800294c:	4647      	mov	r7, r8
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 800294e:	f109 0945 	add.w	r9, r9, #69	; 0x45
      LC_PRINT(" %d:", s_);
 8002952:	4641      	mov	r1, r8
      const int max_ = s_> 4?4:s_;
 8002954:	2f04      	cmp	r7, #4
 8002956:	bf28      	it	cs
 8002958:	2704      	movcs	r7, #4
      LC_PRINT(" %d:", s_);
 800295a:	f000 f9b9 	bl	8002cd0 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 800295e:	42bd      	cmp	r5, r7
 8002960:	db1a      	blt.n	8002998 <aiPrintBufferInfo+0x110>
      LC_PRINT((s_ > max_)?"..":"");
 8002962:	4b44      	ldr	r3, [pc, #272]	; (8002a74 <aiPrintBufferInfo+0x1ec>)
 8002964:	1cd8      	adds	r0, r3, #3
 8002966:	4547      	cmp	r7, r8
 8002968:	bf38      	it	cc
 800296a:	4618      	movcc	r0, r3
 800296c:	f000 f9b0 	bl	8002cd0 <lc_print>
  if (buffer->data)
 8002970:	6865      	ldr	r5, [r4, #4]
    LC_PRINT(" @0x%X/%d",
 8002972:	2101      	movs	r1, #1
 8002974:	4620      	mov	r0, r4
  if (buffer->data)
 8002976:	2d00      	cmp	r5, #0
 8002978:	d057      	beq.n	8002a2a <aiPrintBufferInfo+0x1a2>
    LC_PRINT(" @0x%X/%d",
 800297a:	f003 fe97 	bl	80066ac <ai_buffer_get_size>
 800297e:	4631      	mov	r1, r6
 8002980:	f003 fec8 	bl	8006714 <ai_buffer_get_byte_size>
 8002984:	4629      	mov	r1, r5
 8002986:	4602      	mov	r2, r0
 8002988:	483b      	ldr	r0, [pc, #236]	; (8002a78 <aiPrintBufferInfo+0x1f0>)
}
 800298a:	b003      	add	sp, #12
 800298c:	ecbd 8b02 	vpop	{d8}
 8002990:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" @0x%X/%d",
 8002994:	f000 b99c 	b.w	8002cd0 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8002998:	68a2      	ldr	r2, [r4, #8]
 800299a:	2a00      	cmp	r2, #0
 800299c:	d053      	beq.n	8002a46 <aiPrintBufferInfo+0x1be>
 800299e:	6813      	ldr	r3, [r2, #0]
 80029a0:	f013 0301 	ands.w	r3, r3, #1
 80029a4:	d02b      	beq.n	80029fe <aiPrintBufferInfo+0x176>
 80029a6:	6852      	ldr	r2, [r2, #4]
 80029a8:	2a00      	cmp	r2, #0
 80029aa:	d04c      	beq.n	8002a46 <aiPrintBufferInfo+0x1be>
 80029ac:	6853      	ldr	r3, [r2, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d04d      	beq.n	8002a4e <aiPrintBufferInfo+0x1c6>
 80029b2:	8851      	ldrh	r1, [r2, #2]
 80029b4:	42a9      	cmp	r1, r5
 80029b6:	dd4a      	ble.n	8002a4e <aiPrintBufferInfo+0x1c6>
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80029be:	edd3 7a00 	vldr	s15, [r3]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80029c2:	2a00      	cmp	r2, #0
 80029c4:	d041      	beq.n	8002a4a <aiPrintBufferInfo+0x1c2>
 80029c6:	8813      	ldrh	r3, [r2, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80029c8:	6851      	ldr	r1, [r2, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80029ca:	f013 0302 	ands.w	r3, r3, #2
 80029ce:	d00f      	beq.n	80029f0 <aiPrintBufferInfo+0x168>
 80029d0:	b1c1      	cbz	r1, 8002a04 <aiPrintBufferInfo+0x17c>
 80029d2:	8853      	ldrh	r3, [r2, #2]
 80029d4:	42ab      	cmp	r3, r5
 80029d6:	dd38      	ble.n	8002a4a <aiPrintBufferInfo+0x1c2>
 80029d8:	684b      	ldr	r3, [r1, #4]
 80029da:	5d5b      	ldrb	r3, [r3, r5]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 80029dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	4648      	mov	r0, r9
      for (int idx=0; idx<max_; idx++) {
 80029e4:	3501      	adds	r5, #1
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 80029e6:	ec53 2b17 	vmov	r2, r3, d7
 80029ea:	f000 f971 	bl	8002cd0 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 80029ee:	e7b6      	b.n	800295e <aiPrintBufferInfo+0xd6>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80029f0:	b141      	cbz	r1, 8002a04 <aiPrintBufferInfo+0x17c>
 80029f2:	8852      	ldrh	r2, [r2, #2]
 80029f4:	42aa      	cmp	r2, r5
 80029f6:	ddf1      	ble.n	80029dc <aiPrintBufferInfo+0x154>
 80029f8:	684b      	ldr	r3, [r1, #4]
 80029fa:	575b      	ldrsb	r3, [r3, r5]
 80029fc:	e7ee      	b.n	80029dc <aiPrintBufferInfo+0x154>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80029fe:	eef0 7a48 	vmov.f32	s15, s16
 8002a02:	e7eb      	b.n	80029dc <aiPrintBufferInfo+0x154>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8002a04:	460b      	mov	r3, r1
 8002a06:	e7e9      	b.n	80029dc <aiPrintBufferInfo+0x154>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 8002a08:	f018 0f78 	tst.w	r8, #120	; 0x78
 8002a0c:	d102      	bne.n	8002a14 <aiPrintBufferInfo+0x18c>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8002a0e:	4629      	mov	r1, r5
 8002a10:	481a      	ldr	r0, [pc, #104]	; (8002a7c <aiPrintBufferInfo+0x1f4>)
 8002a12:	e765      	b.n	80028e0 <aiPrintBufferInfo+0x58>
      LC_PRINT(" Q%d.%d",
 8002a14:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 8002a18:	f3c6 51c0 	ubfx	r1, r6, #23, #1
 8002a1c:	4818      	ldr	r0, [pc, #96]	; (8002a80 <aiPrintBufferInfo+0x1f8>)
 8002a1e:	3a40      	subs	r2, #64	; 0x40
 8002a20:	4411      	add	r1, r2
 8002a22:	1a69      	subs	r1, r5, r1
 8002a24:	f000 f954 	bl	8002cd0 <lc_print>
 8002a28:	e7a2      	b.n	8002970 <aiPrintBufferInfo+0xe8>
    LC_PRINT(" (User Domain)/%d",
 8002a2a:	f003 fe3f 	bl	80066ac <ai_buffer_get_size>
 8002a2e:	4631      	mov	r1, r6
 8002a30:	f003 fe70 	bl	8006714 <ai_buffer_get_byte_size>
 8002a34:	4601      	mov	r1, r0
 8002a36:	4813      	ldr	r0, [pc, #76]	; (8002a84 <aiPrintBufferInfo+0x1fc>)
}
 8002a38:	b003      	add	sp, #12
 8002a3a:	ecbd 8b02 	vpop	{d8}
 8002a3e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" (User Domain)/%d",
 8002a42:	f000 b945 	b.w	8002cd0 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8002a46:	eef0 7a48 	vmov.f32	s15, s16
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e7c6      	b.n	80029dc <aiPrintBufferInfo+0x154>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8002a4e:	eef0 7a48 	vmov.f32	s15, s16
 8002a52:	e7b6      	b.n	80029c2 <aiPrintBufferInfo+0x13a>
 8002a54:	0800c2c2 	.word	0x0800c2c2
 8002a58:	0800c2cd 	.word	0x0800c2cd
 8002a5c:	0800c2e2 	.word	0x0800c2e2
 8002a60:	0800c2e6 	.word	0x0800c2e6
 8002a64:	0800c2d4 	.word	0x0800c2d4
 8002a68:	0800c2de 	.word	0x0800c2de
 8002a6c:	0800c2ee 	.word	0x0800c2ee
 8002a70:	00000000 	.word	0x00000000
 8002a74:	0800c2be 	.word	0x0800c2be
 8002a78:	0800c31b 	.word	0x0800c31b
 8002a7c:	0800c308 	.word	0x0800c308
 8002a80:	0800c313 	.word	0x0800c313
 8002a84:	0800c325 	.word	0x0800c325
 8002a88:	0800c2ba 	.word	0x0800c2ba

08002a8c <aiPrintNetworkInfo>:


void aiPrintNetworkInfo(const ai_network_report* report)
{
 8002a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a90:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 8002a92:	4842      	ldr	r0, [pc, #264]	; (8002b9c <aiPrintNetworkInfo+0x110>)
 8002a94:	f000 f91c 	bl	8002cd0 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8002a98:	4841      	ldr	r0, [pc, #260]	; (8002ba0 <aiPrintNetworkInfo+0x114>)
 8002a9a:	6821      	ldr	r1, [r4, #0]
 8002a9c:	f000 f918 	bl	8002cd0 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8002aa0:	6861      	ldr	r1, [r4, #4]
 8002aa2:	4840      	ldr	r0, [pc, #256]	; (8002ba4 <aiPrintNetworkInfo+0x118>)
 8002aa4:	f000 f914 	bl	8002cd0 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8002aa8:	68a1      	ldr	r1, [r4, #8]
 8002aaa:	483f      	ldr	r0, [pc, #252]	; (8002ba8 <aiPrintNetworkInfo+0x11c>)
 8002aac:	f000 f910 	bl	8002cd0 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8002ab0:	68e1      	ldr	r1, [r4, #12]
 8002ab2:	483e      	ldr	r0, [pc, #248]	; (8002bac <aiPrintNetworkInfo+0x120>)
 8002ab4:	f000 f90c 	bl	8002cd0 <lc_print>

  if (report->tool_revision[0])
 8002ab8:	69a1      	ldr	r1, [r4, #24]
 8002aba:	780b      	ldrb	r3, [r1, #0]
 8002abc:	b113      	cbz	r3, 8002ac4 <aiPrintNetworkInfo+0x38>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8002abe:	483c      	ldr	r0, [pc, #240]	; (8002bb0 <aiPrintNetworkInfo+0x124>)
 8002ac0:	f000 f906 	bl	8002cd0 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8002ac4:	7fa3      	ldrb	r3, [r4, #30]
      report->tool_version.micro);
  LC_PRINT(" complexity         : %s MACC\r\n", uint64ToDecimal(report->n_macc));
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8002ac6:	2500      	movs	r5, #0
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8002ac8:	7f62      	ldrb	r2, [r4, #29]
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8002aca:	261c      	movs	r6, #28
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8002acc:	7f21      	ldrb	r1, [r4, #28]
 8002ace:	4839      	ldr	r0, [pc, #228]	; (8002bb4 <aiPrintNetworkInfo+0x128>)
 8002ad0:	f000 f8fe 	bl	8002cd0 <lc_print>
  LC_PRINT(" complexity         : %s MACC\r\n", uint64ToDecimal(report->n_macc));
 8002ad4:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8002ad8:	f000 f8e2 	bl	8002ca0 <uint64ToDecimal>
 8002adc:	4601      	mov	r1, r0
 8002ade:	4836      	ldr	r0, [pc, #216]	; (8002bb8 <aiPrintNetworkInfo+0x12c>)
 8002ae0:	f000 f8f6 	bl	8002cd0 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8002ae4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002ae6:	4835      	ldr	r0, [pc, #212]	; (8002bbc <aiPrintNetworkInfo+0x130>)
 8002ae8:	f000 f8f2 	bl	8002cd0 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8002aec:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 8002af0:	4833      	ldr	r0, [pc, #204]	; (8002bc0 <aiPrintNetworkInfo+0x134>)
 8002af2:	f000 f8ed 	bl	8002cd0 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8002af6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002afa:	42ab      	cmp	r3, r5
 8002afc:	dc21      	bgt.n	8002b42 <aiPrintNetworkInfo+0xb6>
      _aiPrintDataInfo(idx, buffer);
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8002afe:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8002b00:	261c      	movs	r6, #28
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8002b02:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8002b06:	482f      	ldr	r0, [pc, #188]	; (8002bc4 <aiPrintNetworkInfo+0x138>)
 8002b08:	f000 f8e2 	bl	8002cd0 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8002b0c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8002b10:	42ab      	cmp	r3, r5
 8002b12:	dc1e      	bgt.n	8002b52 <aiPrintNetworkInfo+0xc6>

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    LC_PRINT("  I[%d] ", i);
 8002b14:	4e2c      	ldr	r6, [pc, #176]	; (8002bc8 <aiPrintNetworkInfo+0x13c>)
  for (int i=0; i<report->n_inputs; i++) {
 8002b16:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 8002b18:	271c      	movs	r7, #28
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8002b1a:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    LC_PRINT("\r\n");
 8002b1c:	f106 0809 	add.w	r8, r6, #9
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8002b20:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8002b22:	482a      	ldr	r0, [pc, #168]	; (8002bcc <aiPrintNetworkInfo+0x140>)
 8002b24:	f000 f8d4 	bl	8002cd0 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8002b28:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8002b2a:	42ab      	cmp	r3, r5
 8002b2c:	dc19      	bgt.n	8002b62 <aiPrintNetworkInfo+0xd6>
  }

  for (int i=0; i<report->n_outputs; i++) {
    LC_PRINT("  O[%d] ", i);
 8002b2e:	4e28      	ldr	r6, [pc, #160]	; (8002bd0 <aiPrintNetworkInfo+0x144>)
  for (int i=0; i<report->n_outputs; i++) {
 8002b30:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 8002b32:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8002b34:	f1a6 0803 	sub.w	r8, r6, #3
  for (int i=0; i<report->n_outputs; i++) {
 8002b38:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8002b3a:	42ab      	cmp	r3, r5
 8002b3c:	dc1f      	bgt.n	8002b7e <aiPrintNetworkInfo+0xf2>
  }
}
 8002b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8002b42:	6d61      	ldr	r1, [r4, #84]	; 0x54
      _aiPrintDataInfo(idx, buffer);
 8002b44:	4628      	mov	r0, r5
 8002b46:	fb06 1105 	mla	r1, r6, r5, r1
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8002b4a:	3501      	adds	r5, #1
      _aiPrintDataInfo(idx, buffer);
 8002b4c:	f7ff fe58 	bl	8002800 <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8002b50:	e7d1      	b.n	8002af6 <aiPrintNetworkInfo+0x6a>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8002b52:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      _aiPrintDataInfo(idx, buffer);
 8002b54:	4628      	mov	r0, r5
 8002b56:	fb06 1105 	mla	r1, r6, r5, r1
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8002b5a:	3501      	adds	r5, #1
      _aiPrintDataInfo(idx, buffer);
 8002b5c:	f7ff fe50 	bl	8002800 <_aiPrintDataInfo>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8002b60:	e7d4      	b.n	8002b0c <aiPrintNetworkInfo+0x80>
    LC_PRINT("  I[%d] ", i);
 8002b62:	4629      	mov	r1, r5
 8002b64:	4630      	mov	r0, r6
 8002b66:	f000 f8b3 	bl	8002cd0 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 8002b6a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002b6c:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_inputs; i++) {
 8002b70:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->inputs[i]);
 8002b72:	f7ff fe89 	bl	8002888 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8002b76:	4640      	mov	r0, r8
 8002b78:	f000 f8aa 	bl	8002cd0 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8002b7c:	e7d4      	b.n	8002b28 <aiPrintNetworkInfo+0x9c>
    LC_PRINT("  O[%d] ", i);
 8002b7e:	4629      	mov	r1, r5
 8002b80:	4630      	mov	r0, r6
 8002b82:	f000 f8a5 	bl	8002cd0 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 8002b86:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002b88:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_outputs; i++) {
 8002b8c:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->outputs[i]);
 8002b8e:	f7ff fe7b 	bl	8002888 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8002b92:	4640      	mov	r0, r8
 8002b94:	f000 f89c 	bl	8002cd0 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 8002b98:	e7ce      	b.n	8002b38 <aiPrintNetworkInfo+0xac>
 8002b9a:	bf00      	nop
 8002b9c:	0800c337 	.word	0x0800c337
 8002ba0:	0800c351 	.word	0x0800c351
 8002ba4:	0800c36c 	.word	0x0800c36c
 8002ba8:	0800c387 	.word	0x0800c387
 8002bac:	0800c3a2 	.word	0x0800c3a2
 8002bb0:	0800c3bd 	.word	0x0800c3bd
 8002bb4:	0800c3d8 	.word	0x0800c3d8
 8002bb8:	0800c3f9 	.word	0x0800c3f9
 8002bbc:	0800c419 	.word	0x0800c419
 8002bc0:	0800c434 	.word	0x0800c434
 8002bc4:	0800c44f 	.word	0x0800c44f
 8002bc8:	0800c488 	.word	0x0800c488
 8002bcc:	0800c46a 	.word	0x0800c46a
 8002bd0:	0800c494 	.word	0x0800c494

08002bd4 <_put_c_buffer_cb>:
};

static void _put_c_buffer_cb(void *user, const char c)
{
  struct _buffer *buffer = (struct _buffer *)user;
  if (buffer->pos < (buffer->size - 1)) {
 8002bd4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d207      	bcs.n	8002bee <_put_c_buffer_cb+0x1a>
    buffer->buffer[buffer->pos] = c;
 8002bde:	6803      	ldr	r3, [r0, #0]
 8002be0:	5499      	strb	r1, [r3, r2]
    buffer->pos++;
    buffer->buffer[buffer->pos] = 0;
 8002be2:	2100      	movs	r1, #0
    buffer->pos++;
 8002be4:	6883      	ldr	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 8002be6:	6802      	ldr	r2, [r0, #0]
    buffer->pos++;
 8002be8:	3301      	adds	r3, #1
 8002bea:	6083      	str	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 8002bec:	54d1      	strb	r1, [r2, r3]
  }
}
 8002bee:	4770      	bx	lr

08002bf0 <_put_c_driver>:
  if (_ioWriteAllowed)
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <_put_c_driver+0x24>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
{
 8002bf4:	b507      	push	{r0, r1, r2, lr}
 8002bf6:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 8002bfa:	b13b      	cbz	r3, 8002c0c <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8002bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002c00:	2201      	movs	r2, #1
 8002c02:	f10d 0107 	add.w	r1, sp, #7
 8002c06:	4804      	ldr	r0, [pc, #16]	; (8002c18 <_put_c_driver+0x28>)
 8002c08:	f7ff fa11 	bl	800202e <HAL_UART_Transmit>
}
 8002c0c:	b003      	add	sp, #12
 8002c0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c12:	bf00      	nop
 8002c14:	20000008 	.word	0x20000008
 8002c18:	20004804 	.word	0x20004804

08002c1c <ioRawWriteBuffer>:
 8002c1c:	b28a      	uxth	r2, r1
 8002c1e:	4601      	mov	r1, r0
 8002c20:	4804      	ldr	r0, [pc, #16]	; (8002c34 <ioRawWriteBuffer+0x18>)
{
 8002c22:	b508      	push	{r3, lr}
 8002c24:	f04f 33ff 	mov.w	r3, #4294967295
 8002c28:	f7ff fa01 	bl	800202e <HAL_UART_Transmit>
}
 8002c2c:	fab0 f080 	clz	r0, r0
 8002c30:	0940      	lsrs	r0, r0, #5
 8002c32:	bd08      	pop	{r3, pc}
 8002c34:	20004804 	.word	0x20004804

08002c38 <ioRawReadBuffer>:

__STATIC_INLINE bool port_io_read(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 8002c38:	b28a      	uxth	r2, r1
 8002c3a:	4601      	mov	r1, r0
 8002c3c:	4804      	ldr	r0, [pc, #16]	; (8002c50 <ioRawReadBuffer+0x18>)
{
 8002c3e:	b508      	push	{r3, lr}
 8002c40:	f04f 33ff 	mov.w	r3, #4294967295
 8002c44:	f7ff fa45 	bl	80020d2 <HAL_UART_Receive>
}
 8002c48:	fab0 f080 	clz	r0, r0
 8002c4c:	0940      	lsrs	r0, r0, #5
 8002c4e:	bd08      	pop	{r3, pc}
 8002c50:	20004804 	.word	0x20004804

08002c54 <ioRawDisableLLWrite>:
  _ioWriteAllowed = false;
 8002c54:	4b01      	ldr	r3, [pc, #4]	; (8002c5c <ioRawDisableLLWrite+0x8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
}
 8002c5a:	4770      	bx	lr
 8002c5c:	20000008 	.word	0x20000008

08002c60 <_write>:
{
 8002c60:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8002c62:	1e14      	subs	r4, r2, #0
 8002c64:	da0a      	bge.n	8002c7c <_write+0x1c>
 8002c66:	3801      	subs	r0, #1
 8002c68:	2801      	cmp	r0, #1
 8002c6a:	d907      	bls.n	8002c7c <_write+0x1c>
    errno = EBADF;
 8002c6c:	f007 fc3c 	bl	800a4e8 <__errno>
    return -1;
 8002c70:	f04f 34ff 	mov.w	r4, #4294967295
    errno = EBADF;
 8002c74:	2309      	movs	r3, #9
 8002c76:	6003      	str	r3, [r0, #0]
}
 8002c78:	4620      	mov	r0, r4
 8002c7a:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <_write+0x38>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f9      	beq.n	8002c78 <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8002c84:	b2a2      	uxth	r2, r4
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8a:	4804      	ldr	r0, [pc, #16]	; (8002c9c <_write+0x3c>)
 8002c8c:	f7ff f9cf 	bl	800202e <HAL_UART_Transmit>
  return (status ? count : 0);
 8002c90:	2800      	cmp	r0, #0
 8002c92:	bf18      	it	ne
 8002c94:	2400      	movne	r4, #0
 8002c96:	e7ef      	b.n	8002c78 <_write+0x18>
 8002c98:	20000008 	.word	0x20000008
 8002c9c:	20004804 	.word	0x20004804

08002ca0 <uint64ToDecimal>:
  *(--p) = '\0';
 8002ca0:	2300      	movs	r3, #0
{ /* see https://www.eevblog.com/forum/microcontrollers/printf-uint64_t-with-arm-gcc/ */
 8002ca2:	b510      	push	{r4, lr}
  *(--p) = '\0';
 8002ca4:	4c09      	ldr	r4, [pc, #36]	; (8002ccc <uint64ToDecimal+0x2c>)
 8002ca6:	f804 3f14 	strb.w	r3, [r4, #20]!
  for (bool first = true; v || first; first = false) {
 8002caa:	2301      	movs	r3, #1
 8002cac:	ea50 0201 	orrs.w	r2, r0, r1
 8002cb0:	d102      	bne.n	8002cb8 <uint64ToDecimal+0x18>
 8002cb2:	b90b      	cbnz	r3, 8002cb8 <uint64ToDecimal+0x18>
}
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	bd10      	pop	{r4, pc}
    const uint32_t digit = v % 10;
 8002cb8:	220a      	movs	r2, #10
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f7fd fc26 	bl	800050c <__aeabi_uldivmod>
    const char c = '0' + digit;
 8002cc0:	3230      	adds	r2, #48	; 0x30
  for (bool first = true; v || first; first = false) {
 8002cc2:	2300      	movs	r3, #0
    *(--p) = c;
 8002cc4:	f804 2d01 	strb.w	r2, [r4, #-1]!
  for (bool first = true; v || first; first = false) {
 8002cc8:	e7f0      	b.n	8002cac <uint64ToDecimal+0xc>
 8002cca:	bf00      	nop
 8002ccc:	200045b8 	.word	0x200045b8

08002cd0 <lc_print>:
{
 8002cd0:	b40f      	push	{r0, r1, r2, r3}
 8002cd2:	b507      	push	{r0, r1, r2, lr}
 8002cd4:	ab04      	add	r3, sp, #16
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <lc_print+0x20>)
{
 8002cda:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8002cde:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8002ce0:	f001 fa2e 	bl	8004140 <vlc_print>
}
 8002ce4:	b003      	add	sp, #12
 8002ce6:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cea:	b004      	add	sp, #16
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	08002bf1 	.word	0x08002bf1

08002cf4 <lc_vsnprint>:

size_t lc_vsnprint(char *buff, size_t size, const char* fmt, va_list vlist)
{
 8002cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  struct _buffer buffer = {buff, size, 0};
 8002cf6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002cfa:	2100      	movs	r1, #0
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 8002cfc:	4804      	ldr	r0, [pc, #16]	; (8002d10 <lc_vsnprint+0x1c>)
  struct _buffer buffer = {buff, size, 0};
 8002cfe:	9103      	str	r1, [sp, #12]
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 8002d00:	a901      	add	r1, sp, #4
 8002d02:	f001 fa1d 	bl	8004140 <vlc_print>
  return buffer.pos - 1;
}
 8002d06:	9803      	ldr	r0, [sp, #12]
 8002d08:	3801      	subs	r0, #1
 8002d0a:	b005      	add	sp, #20
 8002d0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d10:	08002bd5 	.word	0x08002bd5

08002d14 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8002d14:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8002d16:	4d11      	ldr	r5, [pc, #68]	; (8002d5c <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8002d18:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 8002d1a:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8002d1c:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8002d20:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8002d24:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8002d28:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8002d2a:	f006 fd6b 	bl	8009804 <malloc>

  /* remember size */
  if (ptr) {
 8002d2e:	b1a0      	cbz	r0, 8002d5a <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8002d30:	1903      	adds	r3, r0, r4
 8002d32:	4a0b      	ldr	r2, [pc, #44]	; (8002d60 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8002d34:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8002d36:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8002d38:	682b      	ldr	r3, [r5, #0]
 8002d3a:	07db      	lsls	r3, r3, #31
 8002d3c:	d50c      	bpl.n	8002d58 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8002d3e:	68eb      	ldr	r3, [r5, #12]
 8002d40:	3301      	adds	r3, #1
 8002d42:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8002d44:	686b      	ldr	r3, [r5, #4]
 8002d46:	4423      	add	r3, r4
 8002d48:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8002d4a:	69ab      	ldr	r3, [r5, #24]
 8002d4c:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8002d4e:	696b      	ldr	r3, [r5, #20]
 8002d50:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 8002d52:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 8002d54:	bf88      	it	hi
 8002d56:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8002d58:	3004      	adds	r0, #4
}
 8002d5a:	bd38      	pop	{r3, r4, r5, pc}
 8002d5c:	200045dc 	.word	0x200045dc
 8002d60:	efdcba98 	.word	0xefdcba98

08002d64 <__wrap_free>:
void __wrap_free(void *ptr)
{
  uint8_t* p;
  uint32_t bytes;

  io_malloc.cfg |= 1 << 2;
 8002d64:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <__wrap_free+0x44>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	f042 0204 	orr.w	r2, r2, #4
{
 8002d6c:	b430      	push	{r4, r5}
  io_malloc.cfg |= 1 << 2;
 8002d6e:	601a      	str	r2, [r3, #0]

  if (!ptr)
 8002d70:	4602      	mov	r2, r0
 8002d72:	b1b8      	cbz	r0, 8002da4 <__wrap_free+0x40>
    return;

  p = (uint8_t*)ptr - 4;
  bytes = *((uint32_t*)p);
 8002d74:	f852 1c04 	ldr.w	r1, [r2, #-4]
  p = (uint8_t*)ptr - 4;
 8002d78:	3804      	subs	r0, #4

  if (*((uint32_t*)(p + 4 + bytes)) == MAGIC_MALLOC_NUMBER) {
 8002d7a:	4c0c      	ldr	r4, [pc, #48]	; (8002dac <__wrap_free+0x48>)
 8002d7c:	5855      	ldr	r5, [r2, r1]
 8002d7e:	42a5      	cmp	r5, r4
    *((uint32_t*)(p + 4 + bytes)) = 0;
 8002d80:	bf04      	itt	eq
 8002d82:	2400      	moveq	r4, #0
 8002d84:	5054      	streq	r4, [r2, r1]
  }

  if (io_malloc.cfg & 1UL) {
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	07d2      	lsls	r2, r2, #31
 8002d8a:	d508      	bpl.n	8002d9e <__wrap_free+0x3a>
    io_malloc.free_req++;
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	3201      	adds	r2, #1
 8002d90:	611a      	str	r2, [r3, #16]
    io_malloc.free += bytes;
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	440a      	add	r2, r1
 8002d96:	609a      	str	r2, [r3, #8]
    io_malloc.used -= bytes;
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	1a52      	subs	r2, r2, r1
 8002d9c:	619a      	str	r2, [r3, #24]
    if (io_malloc.f_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.f_idx = 0;
#endif
  }
  __real_free(p);
}
 8002d9e:	bc30      	pop	{r4, r5}
  __real_free(p);
 8002da0:	f006 bd38 	b.w	8009814 <free>
}
 8002da4:	bc30      	pop	{r4, r5}
 8002da6:	4770      	bx	lr
 8002da8:	200045dc 	.word	0x200045dc
 8002dac:	efdcba98 	.word	0xefdcba98

08002db0 <stackMonInit>:
#endif

struct io_stack io_stack;

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 8002db0:	b538      	push	{r3, r4, r5, lr}
  memset(&io_stack, 0, sizeof(struct io_stack));
 8002db2:	4c11      	ldr	r4, [pc, #68]	; (8002df8 <stackMonInit+0x48>)
 8002db4:	2500      	movs	r5, #0
  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
  io_stack.cstack = cstack;

#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  io_stack.estack = (uint32_t)_estack;
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <stackMonInit+0x4c>)
  memset(&io_stack, 0, sizeof(struct io_stack));
 8002db8:	60e5      	str	r5, [r4, #12]
  io_stack.estack = (uint32_t)_estack;
 8002dba:	6123      	str	r3, [r4, #16]
  io_stack.bstack = io_stack.estack - msize;
 8002dbc:	1a9b      	subs	r3, r3, r2
  io_stack.ctrl = ctrl;
 8002dbe:	6020      	str	r0, [r4, #0]
  io_stack.bstack = io_stack.estack - msize;
 8002dc0:	61e3      	str	r3, [r4, #28]
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  (void)msize;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8002dc2:	0783      	lsls	r3, r0, #30
  io_stack.cstack = cstack;
 8002dc4:	61a1      	str	r1, [r4, #24]
  io_stack.mstack_size = msize;
 8002dc6:	6162      	str	r2, [r4, #20]
  memset(&io_stack, 0, sizeof(struct io_stack));
 8002dc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 8002dcc:	d511      	bpl.n	8002df2 <stackMonInit+0x42>
    LC_PRINT("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 8002dce:	480c      	ldr	r0, [pc, #48]	; (8002e00 <stackMonInit+0x50>)
 8002dd0:	f7ff ff7e 	bl	8002cd0 <lc_print>
    io_stack.stack_mon = false;
  } else
    io_stack.stack_mon = true;

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8002dd4:	6921      	ldr	r1, [r4, #16]
 8002dd6:	69a3      	ldr	r3, [r4, #24]
    io_stack.stack_mon = false;
 8002dd8:	7125      	strb	r5, [r4, #4]
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 8002dda:	1ac9      	subs	r1, r1, r3
 8002ddc:	60e1      	str	r1, [r4, #12]

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 8002dde:	b13d      	cbz	r5, 8002df0 <stackMonInit+0x40>
 8002de0:	6962      	ldr	r2, [r4, #20]
 8002de2:	4291      	cmp	r1, r2
 8002de4:	d904      	bls.n	8002df0 <stackMonInit+0x40>
    LC_PRINT("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 8002de6:	4807      	ldr	r0, [pc, #28]	; (8002e04 <stackMonInit+0x54>)
 8002de8:	f7ff ff72 	bl	8002cd0 <lc_print>
        (int)io_stack.mstack_size);
    io_stack.stack_mon = false;
 8002dec:	2300      	movs	r3, #0
 8002dee:	7123      	strb	r3, [r4, #4]
  }
}
 8002df0:	bd38      	pop	{r3, r4, r5, pc}
 8002df2:	2501      	movs	r5, #1
 8002df4:	e7ee      	b.n	8002dd4 <stackMonInit+0x24>
 8002df6:	bf00      	nop
 8002df8:	200045f8 	.word	0x200045f8
 8002dfc:	20080000 	.word	0x20080000
 8002e00:	0800c49d 	.word	0x0800c49d
 8002e04:	0800c4dd 	.word	0x0800c4dd

08002e08 <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8002e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	468a      	mov	sl, r1
  if (!t)
 8002e10:	4617      	mov	r7, r2
 8002e12:	b382      	cbz	r2, 8002e76 <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
  uint64_t s  = clks / fcpu;
  uint64_t ms = (clks * 1000) / fcpu;
 8002e14:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint32_t fcpu = port_hal_get_cpu_freq();
 8002e18:	f7fe f9ba 	bl	8001190 <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 8002e1c:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 8002e1e:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8002e20:	9001      	str	r0, [sp, #4]
 8002e22:	4651      	mov	r1, sl
 8002e24:	4620      	mov	r0, r4
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8002e26:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8002e7c <dwtCyclesToTime+0x74>
  uint64_t s  = clks / fcpu;
 8002e2a:	f7fd fb6f 	bl	800050c <__aeabi_uldivmod>
 8002e2e:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8002e30:	fba4 0106 	umull	r0, r1, r4, r6
 8002e34:	9a01      	ldr	r2, [sp, #4]
 8002e36:	2300      	movs	r3, #0
 8002e38:	fb06 110a 	mla	r1, r6, sl, r1
 8002e3c:	f7fd fb66 	bl	800050c <__aeabi_uldivmod>
  ms -= (s * 1000);
 8002e40:	fbab 3106 	umull	r3, r1, fp, r6
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8002e44:	9a01      	ldr	r2, [sp, #4]
  ms -= (s * 1000);
 8002e46:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8002e48:	fba4 0109 	umull	r0, r1, r4, r9
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	fb09 110a 	mla	r1, r9, sl, r1
  us -= (ms * 1000 + s * 1000000);
 8002e52:	fbab 8909 	umull	r8, r9, fp, r9
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8002e56:	f7fd fb59 	bl	800050c <__aeabi_uldivmod>
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 8002e5a:	60bd      	str	r5, [r7, #8]
 8002e5c:	eba0 0008 	sub.w	r0, r0, r8
  us -= (ms * 1000 + s * 1000000);
 8002e60:	fba5 5606 	umull	r5, r6, r5, r6
  t->fcpu = fcpu;
 8002e64:	9a01      	ldr	r2, [sp, #4]
  us -= (ms * 1000 + s * 1000000);
 8002e66:	1b40      	subs	r0, r0, r5
  t->us = us;
 8002e68:	60f8      	str	r0, [r7, #12]
  return 0;
 8002e6a:	2000      	movs	r0, #0
  t->s = s;
 8002e6c:	e9c7 2b00 	strd	r2, fp, [r7]
}
 8002e70:	b003      	add	sp, #12
 8002e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 8002e76:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7a:	e7f9      	b.n	8002e70 <dwtCyclesToTime+0x68>
 8002e7c:	000f4240 	.word	0x000f4240

08002e80 <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 8002e80:	b510      	push	{r4, lr}
 8002e82:	4604      	mov	r4, r0
 8002e84:	ed2d 8b02 	vpush	{d8}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	9101      	str	r1, [sp, #4]
  float res;
  float fcpu = (float)port_hal_get_cpu_freq();
 8002e8c:	f7fe f980 	bl	8001190 <HAL_RCC_GetHCLKFreq>
  res = ((float)clks * (float)1000.0) / fcpu;
 8002e90:	9901      	ldr	r1, [sp, #4]
  float fcpu = (float)port_hal_get_cpu_freq();
 8002e92:	ee08 0a10 	vmov	s16, r0
  res = ((float)clks * (float)1000.0) / fcpu;
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7fd faf2 	bl	8000480 <__aeabi_ul2f>
 8002e9c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002eb8 <dwtCyclesToFloatMs+0x38>
 8002ea0:	ee07 0a10 	vmov	s14, r0
  float fcpu = (float)port_hal_get_cpu_freq();
 8002ea4:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  res = ((float)clks * (float)1000.0) / fcpu;
 8002ea8:	ee27 0a27 	vmul.f32	s0, s14, s15
  return res;
}
 8002eac:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8002eb0:	b002      	add	sp, #8
 8002eb2:	ecbd 8b02 	vpop	{d8}
 8002eb6:	bd10      	pop	{r4, pc}
 8002eb8:	447a0000 	.word	0x447a0000

08002ebc <getFlashCacheConf>:

#if defined(STM32F7)

  mconf |= MCONF_F7;

  __I uint32_t acr = FLASH->ACR;
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <getFlashCacheConf+0x48>)
{
 8002ebe:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR;
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	9300      	str	r3, [sp, #0]
  __I uint32_t ccr = SCB->CCR;
 8002ec4:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <getFlashCacheConf+0x4c>)
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8002eca:	9800      	ldr	r0, [sp, #0]
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8002ecc:	9b00      	ldr	r3, [sp, #0]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8002ece:	f000 000f 	and.w	r0, r0, #15
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8002ed2:	05db      	lsls	r3, r3, #23
    mconf |= MCONF_ART_PREF;
  if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 8002ed4:	9b00      	ldr	r3, [sp, #0]
    mconf |= MCONF_ART_PREF;
 8002ed6:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8002eda:	bf48      	it	mi
 8002edc:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 8002ee0:	0599      	lsls	r1, r3, #22
    mconf |= MCONF_ART_EN;

  if (ccr & SCB_CCR_IC_Msk)
 8002ee2:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_EN;
 8002ee4:	bf48      	it	mi
 8002ee6:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if (ccr & SCB_CCR_IC_Msk)
 8002eea:	039a      	lsls	r2, r3, #14
    mconf |= MCONF_CORE_ICACHE;
  if (ccr & SCB_CCR_DC_Msk)
 8002eec:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_CORE_ICACHE;
 8002eee:	bf48      	it	mi
 8002ef0:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
  if (ccr & SCB_CCR_DC_Msk)
 8002ef4:	03db      	lsls	r3, r3, #15
    mconf |= MCONF_CORE_DCACHE;
 8002ef6:	bf48      	it	mi
 8002ef8:	f440 6000 	orrmi.w	r0, r0, #2048	; 0x800
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 8002efc:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8002f00:	b002      	add	sp, #8
 8002f02:	4770      	bx	lr
 8002f04:	40023c00 	.word	0x40023c00
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 8002f0c:	b510      	push	{r4, lr}
 8002f0e:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 8002f10:	f7fe f93e 	bl	8001190 <HAL_RCC_GetHCLKFreq>
 8002f14:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 8002f16:	f7fe f93b 	bl	8001190 <HAL_RCC_GetHCLKFreq>
 8002f1a:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8002f1c:	f7ff ffce 	bl	8002ebc <getFlashCacheConf>
 8002f20:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 8002f22:	f7fd fcf1 	bl	8000908 <HAL_GetDEVID>
 8002f26:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8002f28:	f7fd fce8 	bl	80008fc <HAL_GetREVID>
 8002f2c:	6120      	str	r0, [r4, #16]
}
 8002f2e:	bd10      	pop	{r4, pc}

08002f30 <getSysConf>:
  if (!conf)
 8002f30:	b108      	cbz	r0, 8002f36 <getSysConf+0x6>
 8002f32:	f7ff bfeb 	b.w	8002f0c <getSysConf.part.0>
}
 8002f36:	4770      	bx	lr

08002f38 <systemSettingLog>:

void systemSettingLog(void)
{
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	b088      	sub	sp, #32
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	2301      	movs	r3, #1
 8002f40:	210b      	movs	r1, #11
 8002f42:	482d      	ldr	r0, [pc, #180]	; (8002ff8 <systemSettingLog+0xc0>)
 8002f44:	f7ff fec4 	bl	8002cd0 <lc_print>
  if (!conf)
 8002f48:	a803      	add	r0, sp, #12
 8002f4a:	f7ff ffdf 	bl	8002f0c <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 8002f4e:	482b      	ldr	r0, [pc, #172]	; (8002ffc <systemSettingLog+0xc4>)
 8002f50:	f7ff febe 	bl	8002cd0 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8002f54:	9906      	ldr	r1, [sp, #24]
  switch (dev_id) {
 8002f56:	f46f 6389 	mvn.w	r3, #1096	; 0x448
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8002f5a:	4829      	ldr	r0, [pc, #164]	; (8003000 <systemSettingLog+0xc8>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8002f5c:	4c29      	ldr	r4, [pc, #164]	; (8003004 <systemSettingLog+0xcc>)
 8002f5e:	18cb      	adds	r3, r1, r3
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b09      	cmp	r3, #9
 8002f64:	bf96      	itet	ls
 8002f66:	4a28      	ldrls	r2, [pc, #160]	; (8003008 <systemSettingLog+0xd0>)
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8002f68:	4a28      	ldrhi	r2, [pc, #160]	; (800300c <systemSettingLog+0xd4>)
 8002f6a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 8002f6e:	9b07      	ldr	r3, [sp, #28]
 8002f70:	f7ff feae 	bl	8002cd0 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 8002f74:	4b26      	ldr	r3, [pc, #152]	; (8003010 <systemSettingLog+0xd8>)
 8002f76:	2107      	movs	r1, #7
 8002f78:	1d5a      	adds	r2, r3, #5
 8002f7a:	f103 000a 	add.w	r0, r3, #10
 8002f7e:	f7ff fea7 	bl	8002cd0 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 8002f82:	f7fd fcb7 	bl	80008f4 <HAL_GetHalVersion>
 8002f86:	4601      	mov	r1, r0
 8002f88:	4822      	ldr	r0, [pc, #136]	; (8003014 <systemSettingLog+0xdc>)
 8002f8a:	f7ff fea1 	bl	8002cd0 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8002f8e:	9903      	ldr	r1, [sp, #12]
 8002f90:	4821      	ldr	r0, [pc, #132]	; (8003018 <systemSettingLog+0xe0>)
 8002f92:	fb91 f1f4 	sdiv	r1, r1, r4
 8002f96:	f7ff fe9b 	bl	8002cd0 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 8002f9a:	9904      	ldr	r1, [sp, #16]
 8002f9c:	481f      	ldr	r0, [pc, #124]	; (800301c <systemSettingLog+0xe4>)
 8002f9e:	fb91 f1f4 	sdiv	r1, r1, r4
 8002fa2:	f7ff fe95 	bl	8002cd0 <lc_print>

#if defined(STM32F7)
  uint32_t acr = FLASH->ACR;
 8002fa6:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <systemSettingLog+0xe8>)
    return "False";
 8002fa8:	4c1e      	ldr	r4, [pc, #120]	; (8003024 <systemSettingLog+0xec>)
  uint32_t acr = FLASH->ACR;
 8002faa:	6819      	ldr	r1, [r3, #0]
    return "False";
 8002fac:	1d65      	adds	r5, r4, #5
  uint32_t ccr = SCB->CCR;
 8002fae:	4b1e      	ldr	r3, [pc, #120]	; (8003028 <systemSettingLog+0xf0>)
    return "False";
 8002fb0:	f411 7f80 	tst.w	r1, #256	; 0x100
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8002fb4:	f104 00ec 	add.w	r0, r4, #236	; 0xec
  uint32_t ccr = SCB->CCR;
 8002fb8:	695e      	ldr	r6, [r3, #20]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8002fba:	f001 030f 	and.w	r3, r1, #15
    return "False";
 8002fbe:	bf14      	ite	ne
 8002fc0:	4622      	movne	r2, r4
 8002fc2:	462a      	moveq	r2, r5
 8002fc4:	f411 7f00 	tst.w	r1, #512	; 0x200
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	bf14      	ite	ne
 8002fcc:	4623      	movne	r3, r4
 8002fce:	462b      	moveq	r3, r5
 8002fd0:	f7ff fe7e 	bl	8002cd0 <lc_print>
    return "False";
 8002fd4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
      (int)acr,
      bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
      bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8002fd8:	f204 1029 	addw	r0, r4, #297	; 0x129
    return "False";
 8002fdc:	bf14      	ite	ne
 8002fde:	4621      	movne	r1, r4
 8002fe0:	4629      	moveq	r1, r5
 8002fe2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8002fe6:	bf14      	ite	ne
 8002fe8:	4622      	movne	r2, r4
 8002fea:	462a      	moveq	r2, r5
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8002fec:	b008      	add	sp, #32
 8002fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8002ff2:	f7ff be6d 	b.w	8002cd0 <lc_print>
 8002ff6:	bf00      	nop
 8002ff8:	0800c516 	.word	0x0800c516
 8002ffc:	0800c533 	.word	0x0800c533
 8003000:	0800c553 	.word	0x0800c553
 8003004:	000f4240 	.word	0x000f4240
 8003008:	0800cb44 	.word	0x0800cb44
 800300c:	0800c503 	.word	0x0800c503
 8003010:	0800c584 	.word	0x0800c584
 8003014:	0800c5ac 	.word	0x0800c5ac
 8003018:	0800c5c5 	.word	0x0800c5c5
 800301c:	0800c5de 	.word	0x0800c5de
 8003020:	40023c00 	.word	0x40023c00
 8003024:	0800c50b 	.word	0x0800c50b
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <_mon_alloc_reset>:

#include <stdlib.h>

#pragma GCC push_options
#pragma GCC optimize ("O0")
static inline void _mon_alloc_reset(void) {
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
    memset((void *)&io_malloc, 0, sizeof(struct io_malloc));
 8003030:	221c      	movs	r2, #28
 8003032:	2100      	movs	r1, #0
 8003034:	4805      	ldr	r0, [pc, #20]	; (800304c <_mon_alloc_reset+0x20>)
 8003036:	f007 f9e2 	bl	800a3fe <memset>
    /* force a call of wrap functions */\
    free(malloc(10));
 800303a:	200a      	movs	r0, #10
 800303c:	f7ff fe6a 	bl	8002d14 <__wrap_malloc>
 8003040:	4603      	mov	r3, r0
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fe8e 	bl	8002d64 <__wrap_free>
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200045dc 	.word	0x200045dc

08003050 <aiPbCmdSysInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8003050:	b530      	push	{r4, r5, lr}
 8003052:	b089      	sub	sp, #36	; 0x24
 8003054:	4605      	mov	r5, r0
 8003056:	460c      	mov	r4, r1
  UNUSED(param);
  struct mcu_conf conf;
  struct _encode_uint32 array_u32;

  getSysConf(&conf);
 8003058:	a803      	add	r0, sp, #12
 800305a:	f7ff ff69 	bl	8002f30 <getSysConf>

  resp->which_payload = respMsg_sinfo_tag;
 800305e:	230b      	movs	r3, #11
#if defined(HAS_EXTRA_CONF) && HAS_EXTRA_CONF > 0
  array_u32.size = HAS_EXTRA_CONF;
  array_u32.offset = 4;
  array_u32.data = &conf.extra[0];
#else
  array_u32.size = 0;
 8003060:	2200      	movs	r2, #0
#endif

  resp->payload.sinfo.extra.funcs.encode = encode_uint32;
  resp->payload.sinfo.extra.arg = &array_u32;

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003062:	4621      	mov	r1, r4
  resp->which_payload = respMsg_sinfo_tag;
 8003064:	80e3      	strh	r3, [r4, #6]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003066:	4628      	mov	r0, r5
  resp->payload.sinfo.devid = conf.devid;
 8003068:	9b06      	ldr	r3, [sp, #24]
  resp->payload.sinfo.extra.arg = &array_u32;
 800306a:	f8c4 d01c 	str.w	sp, [r4, #28]
  resp->payload.sinfo.devid = conf.devid;
 800306e:	60a3      	str	r3, [r4, #8]
  resp->payload.sinfo.sclock = conf.sclk;
 8003070:	9b03      	ldr	r3, [sp, #12]
  array_u32.size = 0;
 8003072:	9200      	str	r2, [sp, #0]
  resp->payload.sinfo.sclock = conf.sclk;
 8003074:	60e3      	str	r3, [r4, #12]
  resp->payload.sinfo.hclock = conf.hclk;
 8003076:	9b04      	ldr	r3, [sp, #16]
 8003078:	6123      	str	r3, [r4, #16]
  resp->payload.sinfo.cache = conf.conf;
 800307a:	9b05      	ldr	r3, [sp, #20]
 800307c:	6163      	str	r3, [r4, #20]
  array_u32.offset = 4;
 800307e:	2304      	movs	r3, #4
  array_u32.data = NULL;
 8003080:	e9cd 2301 	strd	r2, r3, [sp, #4]
  resp->payload.sinfo.extra.funcs.encode = encode_uint32;
 8003084:	4b02      	ldr	r3, [pc, #8]	; (8003090 <aiPbCmdSysInfo+0x40>)
 8003086:	61a3      	str	r3, [r4, #24]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003088:	f7ff faa8 	bl	80025dc <aiPbMgrSendResp>
}
 800308c:	b009      	add	sp, #36	; 0x24
 800308e:	bd30      	pop	{r4, r5, pc}
 8003090:	080023ff 	.word	0x080023ff

08003094 <encode_mempool_to_tensor_desc>:
{
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	461e      	mov	r6, r3
  array_u32->size = 1;
 8003098:	2301      	movs	r3, #1
  if (info->name)
 800309a:	6808      	ldr	r0, [r1, #0]
{
 800309c:	460d      	mov	r5, r1
  array_u32->size = 1;
 800309e:	6033      	str	r3, [r6, #0]
  array_u32->data = (void *)&info->size;
 80030a0:	1d0b      	adds	r3, r1, #4
{
 80030a2:	4614      	mov	r4, r2
  array_u32->data = (void *)&info->size;
 80030a4:	6073      	str	r3, [r6, #4]
  array_u32->offset = 4;
 80030a6:	2304      	movs	r3, #4
 80030a8:	60b3      	str	r3, [r6, #8]
  if (info->name)
 80030aa:	b1a0      	cbz	r0, 80030d6 <encode_mempool_to_tensor_desc+0x42>
    aiPbStrCopy(info->name, &msg->name[0],
 80030ac:	2240      	movs	r2, #64	; 0x40
 80030ae:	4621      	mov	r1, r4
 80030b0:	f7ff fa3a 	bl	8002528 <aiPbStrCopy>
  msg->format = AI_BUFFER_FORMAT_U8;
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <encode_mempool_to_tensor_desc+0x48>)
 80030b6:	6423      	str	r3, [r4, #64]	; 0x40
  msg->size = info->size;
 80030b8:	686b      	ldr	r3, [r5, #4]
 80030ba:	6463      	str	r3, [r4, #68]	; 0x44
  msg->n_dims = EnumShapeFmt_F_SHAPE_FMT_BCWH << EnumShapeFmt_F_SHAPE_FMT_POS | array_u32->size;
 80030bc:	6833      	ldr	r3, [r6, #0]
 80030be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c2:	64a3      	str	r3, [r4, #72]	; 0x48
  msg->scale = 0.0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	6563      	str	r3, [r4, #84]	; 0x54
  msg->zeropoint = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	65a3      	str	r3, [r4, #88]	; 0x58
  msg->addr = (uint32_t)info->addr;
 80030cc:	68ab      	ldr	r3, [r5, #8]
 80030ce:	65e3      	str	r3, [r4, #92]	; 0x5c
  msg->flags = EnumTensorFlag_TENSOR_FLAG_MEMPOOL;
 80030d0:	2308      	movs	r3, #8
 80030d2:	6623      	str	r3, [r4, #96]	; 0x60
}
 80030d4:	bd70      	pop	{r4, r5, r6, pc}
    msg->name[0] = 0;
 80030d6:	7010      	strb	r0, [r2, #0]
 80030d8:	e7ec      	b.n	80030b4 <encode_mempool_to_tensor_desc+0x20>
 80030da:	bf00      	nop
 80030dc:	00040440 	.word	0x00040440

080030e0 <fill_tensor_desc_msg>:
{
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	460c      	mov	r4, r1
  array_u32->size = buff->shape.size;
 80030e4:	6941      	ldr	r1, [r0, #20]
  array_u32->data = (uint32_t *)buff->shape.data;
 80030e6:	6986      	ldr	r6, [r0, #24]
  array_u32->offset = sizeof(buff->shape.data[0]);
 80030e8:	f04f 0c04 	mov.w	ip, #4
  array_u32->size = buff->shape.size;
 80030ec:	f3c1 2117 	ubfx	r1, r1, #8, #24
{
 80030f0:	4605      	mov	r5, r0
 80030f2:	ed2d 8b02 	vpush	{d8}
  array_u32->offset = sizeof(buff->shape.data[0]);
 80030f6:	f8c2 c008 	str.w	ip, [r2, #8]
{
 80030fa:	eeb0 8a40 	vmov.f32	s16, s0
  array_u32->size = buff->shape.size;
 80030fe:	6011      	str	r1, [r2, #0]
  array_u32->data = (uint32_t *)buff->shape.data;
 8003100:	6056      	str	r6, [r2, #4]
  msg->name[0] = 0;
 8003102:	2200      	movs	r2, #0
 8003104:	7022      	strb	r2, [r4, #0]
  msg->format = (uint32_t)buff->format;
 8003106:	6802      	ldr	r2, [r0, #0]
  msg->flags = flags;
 8003108:	6623      	str	r3, [r4, #96]	; 0x60
  if (buff->shape.type == AI_SHAPE_BCWH)
 800310a:	7d03      	ldrb	r3, [r0, #20]
  msg->format = (uint32_t)buff->format;
 800310c:	6422      	str	r2, [r4, #64]	; 0x40
  if (buff->shape.type == AI_SHAPE_BCWH)
 800310e:	f103 3cff 	add.w	ip, r3, #4294967295
 8003112:	f1dc 0300 	rsbs	r3, ip, #0
 8003116:	eb43 030c 	adc.w	r3, r3, ip
  n_dims = shape_fmt << EnumShapeFmt_F_SHAPE_FMT_POS | buff->shape.size;
 800311a:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
  msg->n_dims = _shape_to_n_dims(buff);
 800311e:	64a1      	str	r1, [r4, #72]	; 0x48
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8003120:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8003122:	6836      	ldr	r6, [r6, #0]
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8003124:	f003 fac2 	bl	80066ac <ai_buffer_get_size>
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buff);
 8003128:	68ab      	ldr	r3, [r5, #8]
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 800312a:	4370      	muls	r0, r6
  msg->zeropoint = zero_point;
 800312c:	9a06      	ldr	r2, [sp, #24]
  msg->scale = scale;
 800312e:	ed84 8a15 	vstr	s16, [r4, #84]	; 0x54
  msg->size = _get_buffer_element_size(buff);
 8003132:	6460      	str	r0, [r4, #68]	; 0x44
  msg->zeropoint = zero_point;
 8003134:	65a2      	str	r2, [r4, #88]	; 0x58
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 8003136:	b1a3      	cbz	r3, 8003162 <fill_tensor_desc_msg+0x82>
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	07d0      	lsls	r0, r2, #31
 800313c:	d511      	bpl.n	8003162 <fill_tensor_desc_msg+0x82>
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	b17b      	cbz	r3, 8003162 <fill_tensor_desc_msg+0x82>
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	b192      	cbz	r2, 800316c <fill_tensor_desc_msg+0x8c>
 8003146:	8859      	ldrh	r1, [r3, #2]
 8003148:	b181      	cbz	r1, 800316c <fill_tensor_desc_msg+0x8c>
 800314a:	6811      	ldr	r1, [r2, #0]
 800314c:	6809      	ldr	r1, [r1, #0]
 800314e:	6561      	str	r1, [r4, #84]	; 0x54
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 8003150:	8819      	ldrh	r1, [r3, #0]
 8003152:	0789      	lsls	r1, r1, #30
 8003154:	d50c      	bpl.n	8003170 <fill_tensor_desc_msg+0x90>
 8003156:	b19a      	cbz	r2, 8003180 <fill_tensor_desc_msg+0xa0>
 8003158:	885b      	ldrh	r3, [r3, #2]
 800315a:	b10b      	cbz	r3, 8003160 <fill_tensor_desc_msg+0x80>
 800315c:	6853      	ldr	r3, [r2, #4]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	65a3      	str	r3, [r4, #88]	; 0x58
  msg->addr = (uint32_t)buff->data;
 8003162:	686b      	ldr	r3, [r5, #4]
}
 8003164:	ecbd 8b02 	vpop	{d8}
  msg->addr = (uint32_t)buff->data;
 8003168:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800316a:	bd70      	pop	{r4, r5, r6, pc}
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 800316c:	2100      	movs	r1, #0
 800316e:	e7ee      	b.n	800314e <fill_tensor_desc_msg+0x6e>
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 8003170:	b132      	cbz	r2, 8003180 <fill_tensor_desc_msg+0xa0>
 8003172:	885b      	ldrh	r3, [r3, #2]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f3      	beq.n	8003160 <fill_tensor_desc_msg+0x80>
 8003178:	6853      	ldr	r3, [r2, #4]
 800317a:	f993 3000 	ldrsb.w	r3, [r3]
 800317e:	e7ef      	b.n	8003160 <fill_tensor_desc_msg+0x80>
 8003180:	4613      	mov	r3, r2
 8003182:	e7ed      	b.n	8003160 <fill_tensor_desc_msg+0x80>

08003184 <encode_ai_buffer_to_tensor_desc>:
{
 8003184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003186:	460c      	mov	r4, r1
 8003188:	4611      	mov	r1, r2
 800318a:	461a      	mov	r2, r3
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 800318c:	68e3      	ldr	r3, [r4, #12]
  ai_buffer *buff = &((ai_buffer *)(info->buffer))[index];
 800318e:	6825      	ldr	r5, [r4, #0]
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	ed94 0a02 	vldr	s0, [r4, #8]
 8003196:	6863      	ldr	r3, [r4, #4]
 8003198:	241c      	movs	r4, #28
 800319a:	fb04 5000 	mla	r0, r4, r0, r5
 800319e:	f7ff ff9f 	bl	80030e0 <fill_tensor_desc_msg>
}
 80031a2:	b003      	add	sp, #12
 80031a4:	bd30      	pop	{r4, r5, pc}
	...

080031a8 <cyclesCounterStart>:
  port_dwt_init();
#endif /* !USE_SYSTICK_ONLY */
}

__STATIC_INLINE void cyclesCounterStart(void)
{
 80031a8:	b508      	push	{r3, lr}
#else
#if USE_CORE_CLOCK_ONLY == 1
  port_dwt_reset();
  cyclesCount.dwt_start = port_dwt_get_cycles();
#else
  cyclesCount.tick_start = port_hal_get_tick();
 80031aa:	f7fd fb8b 	bl	80008c4 <HAL_GetTick>
 80031ae:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <cyclesCounterStart+0x18>)
  port_dwt_reset();
 80031b0:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <cyclesCounterStart+0x1c>)
 80031b2:	2100      	movs	r1, #0
  cyclesCount.tick_start = port_hal_get_tick();
 80031b4:	6098      	str	r0, [r3, #8]
  port_dwt_reset();
 80031b6:	6051      	str	r1, [r2, #4]
  cyclesCount.dwt_start = port_dwt_get_cycles();
 80031b8:	6852      	ldr	r2, [r2, #4]
 80031ba:	605a      	str	r2, [r3, #4]
#endif
#endif
}
 80031bc:	bd08      	pop	{r3, pc}
 80031be:	bf00      	nop
 80031c0:	200045d0 	.word	0x200045d0
 80031c4:	e0001000 	.word	0xe0001000

080031c8 <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 80031c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(port_dwt_get_cycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <cyclesCounterEnd+0x44>)
 80031cc:	4d10      	ldr	r5, [pc, #64]	; (8003210 <cyclesCounterEnd+0x48>)
 80031ce:	685c      	ldr	r4, [r3, #4]
 80031d0:	686b      	ldr	r3, [r5, #4]
 80031d2:	1ae4      	subs	r4, r4, r3
 80031d4:	2300      	movs	r3, #0
 80031d6:	9301      	str	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 80031d8:	f7fd fb74 	bl	80008c4 <HAL_GetTick>
 80031dc:	68aa      	ldr	r2, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 80031de:	9b01      	ldr	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 80031e0:	1a80      	subs	r0, r0, r2
  if (tick_e > cyclesCount.dwt_max) {
 80031e2:	682a      	ldr	r2, [r5, #0]
 80031e4:	4290      	cmp	r0, r2
 80031e6:	d90c      	bls.n	8003202 <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 80031e8:	4619      	mov	r1, r3
 80031ea:	f7fd f98f 	bl	800050c <__aeabi_uldivmod>
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
 80031f2:	fba0 0303 	umull	r0, r3, r0, r3
 80031f6:	1900      	adds	r0, r0, r4
 80031f8:	eba3 0301 	sub.w	r3, r3, r1
 80031fc:	4604      	mov	r4, r0
 80031fe:	f143 0300 	adc.w	r3, r3, #0
  }
  return dwt_e;
#endif
#endif
}
 8003202:	4620      	mov	r0, r4
 8003204:	4619      	mov	r1, r3
 8003206:	b003      	add	sp, #12
 8003208:	bd30      	pop	{r4, r5, pc}
 800320a:	bf00      	nop
 800320c:	e0001000 	.word	0xe0001000
 8003210:	200045d0 	.word	0x200045d0

08003214 <_get_buffer_size>:
{
 8003214:	b538      	push	{r3, r4, r5, lr}
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 8003216:	6983      	ldr	r3, [r0, #24]
{
 8003218:	4604      	mov	r4, r0
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 800321a:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 800321c:	681d      	ldr	r5, [r3, #0]
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 800321e:	f003 fa45 	bl	80066ac <ai_buffer_get_size>
 8003222:	6821      	ldr	r1, [r4, #0]
 8003224:	4368      	muls	r0, r5
}
 8003226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 800322a:	f003 ba73 	b.w	8006714 <ai_buffer_get_byte_size>
	...

08003230 <aiExecCtx>:
{
 8003230:	e92d 4178 	stmdb	sp!, {r3, r4, r5, r6, r8, lr}
 8003234:	4604      	mov	r4, r0
  if (!nn_name[0]) {
 8003236:	7800      	ldrb	r0, [r0, #0]
 8003238:	b938      	cbnz	r0, 800324a <aiExecCtx+0x1a>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 800323a:	b921      	cbnz	r1, 8003246 <aiExecCtx+0x16>
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <aiExecCtx+0x50>)
 800323e:	6818      	ldr	r0, [r3, #0]
      cur = &net_exec_ctx[pos];
 8003240:	2800      	cmp	r0, #0
 8003242:	bf18      	it	ne
 8003244:	4618      	movne	r0, r3
}
 8003246:	e8bd 8178 	ldmia.w	sp!, {r3, r4, r5, r6, r8, pc}
      if (cur->handle &&
 800324a:	4e0d      	ldr	r6, [pc, #52]	; (8003280 <aiExecCtx+0x50>)
 800324c:	6830      	ldr	r0, [r6, #0]
 800324e:	2800      	cmp	r0, #0
 8003250:	d0f9      	beq.n	8003246 <aiExecCtx+0x16>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8003252:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8003256:	4640      	mov	r0, r8
 8003258:	f7fd f842 	bl	80002e0 <strlen>
 800325c:	4605      	mov	r5, r0
 800325e:	4620      	mov	r0, r4
 8003260:	f7fd f83e 	bl	80002e0 <strlen>
      if (cur->handle &&
 8003264:	4285      	cmp	r5, r0
 8003266:	d109      	bne.n	800327c <aiExecCtx+0x4c>
          (strncmp(cur->report.model_name, nn_name,
 8003268:	462a      	mov	r2, r5
 800326a:	4621      	mov	r1, r4
 800326c:	4640      	mov	r0, r8
 800326e:	f007 f8ce 	bl	800a40e <strncmp>
      cur = &net_exec_ctx[pos];
 8003272:	2800      	cmp	r0, #0
 8003274:	bf0c      	ite	eq
 8003276:	4630      	moveq	r0, r6
 8003278:	2000      	movne	r0, #0
 800327a:	e7e4      	b.n	8003246 <aiExecCtx+0x16>
 800327c:	2000      	movs	r0, #0
 800327e:	e7e2      	b.n	8003246 <aiExecCtx+0x16>
 8003280:	20004668 	.word	0x20004668

08003284 <send_ai_io_tensor.isra.0>:
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8003284:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8003288:	461d      	mov	r5, r3
 800328a:	b08b      	sub	sp, #44	; 0x2c
  resp->which_payload = respMsg_tensor_tag;
 800328c:	2311      	movs	r3, #17
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 800328e:	460c      	mov	r4, r1
 8003290:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8003294:	f10d 0a0c 	add.w	sl, sp, #12
  resp->which_payload = respMsg_tensor_tag;
 8003298:	80cb      	strh	r3, [r1, #6]
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 800329a:	4606      	mov	r6, r0
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 800329c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 800329e:	4690      	mov	r8, r2
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 80032a0:	3108      	adds	r1, #8
 80032a2:	4652      	mov	r2, sl
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	4628      	mov	r0, r5
 80032a8:	464b      	mov	r3, r9
 80032aa:	f7ff ff19 	bl	80030e0 <fill_tensor_desc_msg>
  resp->payload.tensor.desc.dims.funcs.encode = encode_uint32;
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <send_ai_io_tensor.isra.0+0x6c>)
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 80032b0:	f419 7f00 	tst.w	r9, #512	; 0x200
  resp->payload.tensor.desc.dims.arg = &array_u32;
 80032b4:	e9c4 3a15 	strd	r3, sl, [r4, #84]	; 0x54
  resp->payload.tensor.data.addr = (uint32_t)buffer->data;
 80032b8:	686b      	ldr	r3, [r5, #4]
 80032ba:	6763      	str	r3, [r4, #116]	; 0x74
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 80032bc:	d115      	bne.n	80032ea <send_ai_io_tensor.isra.0+0x66>
    resp->payload.tensor.data.size = _get_buffer_size(buffer);
 80032be:	4628      	mov	r0, r5
 80032c0:	f7ff ffa8 	bl	8003214 <_get_buffer_size>
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 80032c4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80032c6:	2200      	movs	r2, #0
    resp->payload.tensor.data.size = 0;
 80032c8:	6720      	str	r0, [r4, #112]	; 0x70
  aiPbMgrSendResp(req, resp, state);
 80032ca:	4621      	mov	r1, r4
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 80032cc:	e9cd 3208 	strd	r3, r2, [sp, #32]
  resp->payload.tensor.data.datas.funcs.encode = &encode_data_cb;
 80032d0:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <send_ai_io_tensor.isra.0+0x70>)
 80032d2:	67a3      	str	r3, [r4, #120]	; 0x78
  resp->payload.tensor.data.datas.arg = (void *)&data;
 80032d4:	ab06      	add	r3, sp, #24
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 80032d6:	e9cd 2006 	strd	r2, r0, [sp, #24]
  aiPbMgrSendResp(req, resp, state);
 80032da:	4642      	mov	r2, r8
 80032dc:	4630      	mov	r0, r6
  resp->payload.tensor.data.datas.arg = (void *)&data;
 80032de:	67e3      	str	r3, [r4, #124]	; 0x7c
  aiPbMgrSendResp(req, resp, state);
 80032e0:	f7ff f97c 	bl	80025dc <aiPbMgrSendResp>
}
 80032e4:	b00b      	add	sp, #44	; 0x2c
 80032e6:	e8bd 8770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, pc}
 80032ea:	2000      	movs	r0, #0
 80032ec:	e7ea      	b.n	80032c4 <send_ai_io_tensor.isra.0+0x40>
 80032ee:	bf00      	nop
 80032f0:	080023ff 	.word	0x080023ff
 80032f4:	08002457 	.word	0x08002457

080032f8 <aiOnExecNode_cb>:
    const ai_observer_node *node) {
 80032f8:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 80032fc:	4688      	mov	r8, r1
 80032fe:	4615      	mov	r5, r2
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8003300:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
    const ai_observer_node *node) {
 8003304:	ed2d 8b02 	vpush	{d8}
 8003308:	b095      	sub	sp, #84	; 0x54
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 800330a:	f7ff ff5d 	bl	80031c8 <cyclesCounterEnd>
  if (flags & AI_OBSERVER_PRE_EVT) {
 800330e:	f018 0602 	ands.w	r6, r8, #2
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 8003312:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if (flags & AI_OBSERVER_PRE_EVT) {
 8003316:	d012      	beq.n	800333e <aiOnExecNode_cb+0x46>
    obs_ctx->n_cb_in++;
 8003318:	6863      	ldr	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 800331a:	f418 7f80 	tst.w	r8, #256	; 0x100
    obs_ctx->n_cb_in++;
 800331e:	f103 0301 	add.w	r3, r3, #1
 8003322:	6063      	str	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8003324:	d003      	beq.n	800332e <aiOnExecNode_cb+0x36>
      obs_ctx->tnodes = ts;
 8003326:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800332a:	e9c4 2308 	strd	r2, r3, [r4, #32]
  cyclesCounterStart();
 800332e:	f7ff ff3b 	bl	80031a8 <cyclesCounterStart>
}
 8003332:	2000      	movs	r0, #0
 8003334:	b015      	add	sp, #84	; 0x54
 8003336:	ecbd 8b02 	vpop	{d8}
 800333a:	e8bd 8770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, pc}
  } else if (flags & AI_OBSERVER_POST_EVT) {
 800333e:	f018 0f04 	tst.w	r8, #4
 8003342:	d0f4      	beq.n	800332e <aiOnExecNode_cb+0x36>
    cyclesCounterStart();
 8003344:	f7ff ff30 	bl	80031a8 <cyclesCounterStart>
    obs_ctx->tnodes += ts;
 8003348:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800334c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8003350:	181b      	adds	r3, r3, r0
 8003352:	eb42 0201 	adc.w	r2, r2, r1
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 8003356:	f418 7f00 	tst.w	r8, #512	; 0x200
    type |= (node->type & (ai_u16)0x7FFF);
 800335a:	f8b5 8002 	ldrh.w	r8, [r5, #2]
    obs_ctx->tnodes += ts;
 800335e:	e9c4 3208 	strd	r3, r2, [r4, #32]
    obs_ctx->n_cb_out++;
 8003362:	68a3      	ldr	r3, [r4, #8]
    type |= (node->type & (ai_u16)0x7FFF);
 8003364:	f3c8 080e 	ubfx	r8, r8, #0, #15
    obs_ctx->n_cb_out++;
 8003368:	f103 0301 	add.w	r3, r3, #1
 800336c:	60a3      	str	r3, [r4, #8]
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 800336e:	bf0c      	ite	eq
 8003370:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8003374:	f04f 7340 	movne.w	r3, #50331648	; 0x3000000
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8003378:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    type |= (node->type & (ai_u16)0x7FFF);
 800337c:	ea48 0803 	orr.w	r8, r8, r3
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts, -1, -1};
 8003380:	f7ff fd7e 	bl	8002e80 <dwtCyclesToFloatMs>
 8003384:	ab04      	add	r3, sp, #16
 8003386:	2202      	movs	r2, #2
 8003388:	ed8d 0a07 	vstr	s0, [sp, #28]
 800338c:	930a      	str	r3, [sp, #40]	; 0x28
 800338e:	f04f 33ff 	mov.w	r3, #4294967295
 8003392:	9209      	str	r2, [sp, #36]	; 0x24
 8003394:	9608      	str	r6, [sp, #32]
 8003396:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 800339a:	ab07      	add	r3, sp, #28
 800339c:	9302      	str	r3, [sp, #8]
 800339e:	88ab      	ldrh	r3, [r5, #4]
 80033a0:	e9cd 8300 	strd	r8, r3, [sp]
 80033a4:	4633      	mov	r3, r6
 80033a6:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80033aa:	f7ff f9dd 	bl	8002768 <aiPbMgrSendOperator>
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 80033ae:	68eb      	ldr	r3, [r5, #12]
 80033b0:	881a      	ldrh	r2, [r3, #0]
 80033b2:	2a01      	cmp	r2, #1
 80033b4:	d910      	bls.n	80033d8 <aiOnExecNode_cb+0xe0>
 80033b6:	f8d3 9004 	ldr.w	r9, [r3, #4]
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 80033ba:	46b2      	mov	sl, r6
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 80033bc:	eddf 8a3c 	vldr	s17, [pc, #240]	; 80034b0 <aiOnExecNode_cb+0x1b8>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 80033c0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80033c4:	429e      	cmp	r6, r3
 80033c6:	d207      	bcs.n	80033d8 <aiOnExecNode_cb+0xe0>
 80033c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80033cc:	b123      	cbz	r3, 80033d8 <aiOnExecNode_cb+0xe0>
 80033ce:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 80033d2:	f1b8 0f00 	cmp.w	r8, #0
 80033d6:	d109      	bne.n	80033ec <aiOnExecNode_cb+0xf4>
    obs_ctx->tcom += cyclesCounterEnd();
 80033d8:	f7ff fef6 	bl	80031c8 <cyclesCounterEnd>
 80033dc:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 80033e0:	1818      	adds	r0, r3, r0
 80033e2:	eb42 0101 	adc.w	r1, r2, r1
 80033e6:	e9c4 0106 	strd	r0, r1, [r4, #24]
 80033ea:	e7a0      	b.n	800332e <aiOnExecNode_cb+0x36>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 80033ec:	f8d8 3000 	ldr.w	r3, [r8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d04a      	beq.n	800348a <aiOnExecNode_cb+0x192>
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	2a00      	cmp	r2, #0
 80033f8:	d047      	beq.n	800348a <aiOnExecNode_cb+0x192>
 80033fa:	8859      	ldrh	r1, [r3, #2]
 80033fc:	2900      	cmp	r1, #0
 80033fe:	d044      	beq.n	800348a <aiOnExecNode_cb+0x192>
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	ed92 8a00 	vldr	s16, [r2]
      if (AI_TENSOR_FMT_GET_SIGN(t))
 8003406:	f8d8 0018 	ldr.w	r0, [r8, #24]
 800340a:	6802      	ldr	r2, [r0, #0]
 800340c:	f412 0500 	ands.w	r5, r2, #8388608	; 0x800000
 8003410:	d03e      	beq.n	8003490 <aiOnExecNode_cb+0x198>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003412:	2b00      	cmp	r3, #0
 8003414:	d047      	beq.n	80034a6 <aiOnExecNode_cb+0x1ae>
 8003416:	6859      	ldr	r1, [r3, #4]
 8003418:	2900      	cmp	r1, #0
 800341a:	d046      	beq.n	80034aa <aiOnExecNode_cb+0x1b2>
 800341c:	885d      	ldrh	r5, [r3, #2]
 800341e:	b115      	cbz	r5, 8003426 <aiOnExecNode_cb+0x12e>
 8003420:	684b      	ldr	r3, [r1, #4]
 8003422:	f993 5000 	ldrsb.w	r5, [r3]
      ai_buffer buffer =
 8003426:	68c3      	ldr	r3, [r0, #12]
          AI_BUFFER_INIT(
 8003428:	2101      	movs	r1, #1
 800342a:	4640      	mov	r0, r8
      ai_buffer buffer =
 800342c:	920d      	str	r2, [sp, #52]	; 0x34
 800342e:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003432:	e9cd 3a0e 	strd	r3, sl, [sp, #56]	; 0x38
          AI_BUFFER_INIT(
 8003436:	f003 f90f 	bl	8006658 <get_tensor_size>
      ai_buffer buffer =
 800343a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800343e:	9011      	str	r0, [sp, #68]	; 0x44
 8003440:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
          AI_BUFFER_INIT(
 8003444:	f8d8 3008 	ldr.w	r3, [r8, #8]
      ai_buffer buffer =
 8003448:	9a12      	ldr	r2, [sp, #72]	; 0x48
          AI_BUFFER_INIT(
 800344a:	f3c3 2317 	ubfx	r3, r3, #8, #24
      ai_buffer buffer =
 800344e:	f363 221f 	bfi	r2, r3, #8, #24
 8003452:	9212      	str	r2, [sp, #72]	; 0x48
 8003454:	f8d8 300c 	ldr.w	r3, [r8, #12]
      if (obs_ctx->no_data)
 8003458:	7d22      	ldrb	r2, [r4, #20]
      ai_buffer buffer =
 800345a:	9313      	str	r3, [sp, #76]	; 0x4c
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1U))
 800345c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003460:	3b01      	subs	r3, #1
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8003462:	429e      	cmp	r6, r3
 8003464:	bf14      	ite	ne
 8003466:	2304      	movne	r3, #4
 8003468:	f44f 7382 	moveq.w	r3, #260	; 0x104
      if (obs_ctx->no_data)
 800346c:	b10a      	cbz	r2, 8003472 <aiOnExecNode_cb+0x17a>
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 800346e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003472:	eeb0 0a48 	vmov.f32	s0, s16
 8003476:	2202      	movs	r2, #2
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8003478:	3601      	adds	r6, #1
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 800347a:	e9cd 3500 	strd	r3, r5, [sp]
 800347e:	ab0d      	add	r3, sp, #52	; 0x34
 8003480:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8003484:	f7ff fefe 	bl	8003284 <send_ai_io_tensor.isra.0>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8003488:	e79a      	b.n	80033c0 <aiOnExecNode_cb+0xc8>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 800348a:	eeb0 8a68 	vmov.f32	s16, s17
 800348e:	e7ba      	b.n	8003406 <aiOnExecNode_cb+0x10e>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0c8      	beq.n	8003426 <aiOnExecNode_cb+0x12e>
 8003494:	6859      	ldr	r1, [r3, #4]
 8003496:	2900      	cmp	r1, #0
 8003498:	d0c5      	beq.n	8003426 <aiOnExecNode_cb+0x12e>
 800349a:	885b      	ldrh	r3, [r3, #2]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0c2      	beq.n	8003426 <aiOnExecNode_cb+0x12e>
 80034a0:	684b      	ldr	r3, [r1, #4]
 80034a2:	781d      	ldrb	r5, [r3, #0]
 80034a4:	e7bf      	b.n	8003426 <aiOnExecNode_cb+0x12e>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 80034a6:	461d      	mov	r5, r3
 80034a8:	e7bd      	b.n	8003426 <aiOnExecNode_cb+0x12e>
 80034aa:	460d      	mov	r5, r1
 80034ac:	e7bb      	b.n	8003426 <aiOnExecNode_cb+0x12e>
 80034ae:	bf00      	nop
 80034b0:	00000000 	.word	0x00000000

080034b4 <aiPbCmdNNInfo>:

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 80034b4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80034b8:	4606      	mov	r6, r0
 80034ba:	b0a2      	sub	sp, #136	; 0x88
 80034bc:	460c      	mov	r4, r1
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 80034be:	300c      	adds	r0, #12
 80034c0:	f850 1c04 	ldr.w	r1, [r0, #-4]
 80034c4:	f7ff feb4 	bl	8003230 <aiExecCtx>
  if (ctx)
 80034c8:	4605      	mov	r5, r0
 80034ca:	2800      	cmp	r0, #0
 80034cc:	f000 80d6 	beq.w	800367c <aiPbCmdNNInfo+0x1c8>
  resp->which_payload = respMsg_minfo_tag;
 80034d0:	2316      	movs	r3, #22
    send_model_info(req, resp, EnumState_S_IDLE, &ctx->report,
 80034d2:	f890 9090 	ldrb.w	r9, [r0, #144]	; 0x90
 80034d6:	f890 8091 	ldrb.w	r8, [r0, #145]	; 0x91
  stai_runtime_get_info(&rt_info);
 80034da:	a81c      	add	r0, sp, #112	; 0x70
  resp->which_payload = respMsg_minfo_tag;
 80034dc:	80e3      	strh	r3, [r4, #6]
  stai_runtime_get_info(&rt_info);
 80034de:	f003 f88b 	bl	80065f8 <stai_runtime_get_info>
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 80034e2:	2240      	movs	r2, #64	; 0x40
 80034e4:	f104 0108 	add.w	r1, r4, #8
 80034e8:	68a8      	ldr	r0, [r5, #8]
 80034ea:	f7ff f81d 	bl	8002528 <aiPbStrCopy>
  aiPbStrCopy(nn->model_signature, &resp->payload.minfo.signature[0],
 80034ee:	2240      	movs	r2, #64	; 0x40
 80034f0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 80034f4:	68e8      	ldr	r0, [r5, #12]
 80034f6:	f7ff f817 	bl	8002528 <aiPbStrCopy>
  aiPbStrCopy(nn->compile_datetime, &resp->payload.minfo.compile_datetime[0],
 80034fa:	2240      	movs	r2, #64	; 0x40
 80034fc:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 8003500:	6968      	ldr	r0, [r5, #20]
 8003502:	f7ff f811 	bl	8002528 <aiPbStrCopy>
  resp->payload.minfo.runtime_version = _ai_version_to_uint32((const ai_platform_version *)&rt_info.runtime_version);
 8003506:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003508:	ba1b      	rev	r3, r3
 800350a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 800350e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003510:	ba1b      	rev	r3, r3
 8003512:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 8003516:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
  if (id == STAI_COMPILER_ID_GCC) {
 800351a:	2b01      	cmp	r3, #1
 800351c:	d00f      	beq.n	800353e <aiPbCmdNNInfo+0x8a>
  else if (id == STAI_COMPILER_ID_GHS) {
 800351e:	2b10      	cmp	r3, #16
 8003520:	f000 80a0 	beq.w	8003664 <aiPbCmdNNInfo+0x1b0>
  else if  (id == STAI_COMPILER_ID_HIGHTECH) {
 8003524:	2b20      	cmp	r3, #32
 8003526:	f000 809f 	beq.w	8003668 <aiPbCmdNNInfo+0x1b4>
  else if  (id == STAI_COMPILER_ID_IAR) {
 800352a:	2b30      	cmp	r3, #48	; 0x30
 800352c:	f000 809e 	beq.w	800366c <aiPbCmdNNInfo+0x1b8>
  else if  (id == STAI_COMPILER_ID_KEIL_AC6) {
 8003530:	2b50      	cmp	r3, #80	; 0x50
 8003532:	f000 809d 	beq.w	8003670 <aiPbCmdNNInfo+0x1bc>
    return EnumTools_AI_MDK_5;
 8003536:	2b40      	cmp	r3, #64	; 0x40
 8003538:	bf14      	ite	ne
 800353a:	2300      	movne	r3, #0
 800353c:	2303      	moveq	r3, #3
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 800353e:	041b      	lsls	r3, r3, #16
  aiPbStrCopy(rt_info.compiler_desc, &resp->payload.minfo.runtime_desc[0],
 8003540:	2240      	movs	r2, #64	; 0x40
 8003542:	f504 718a 	add.w	r1, r4, #276	; 0x114
 8003546:	9821      	ldr	r0, [sp, #132]	; 0x84
  resp->payload.minfo.rtid = _AI_RUNTIME_ID | _stai_compiler_id_to(rt_info.compiler_id) << EnumTools_AI_TOOLS_POS;
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	64a3      	str	r3, [r4, #72]	; 0x48
  aiPbStrCopy(rt_info.compiler_desc, &resp->payload.minfo.runtime_desc[0],
 800354e:	f7fe ffeb 	bl	8002528 <aiPbStrCopy>
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003552:	f1b9 0f00 	cmp.w	r9, #0
  struct _encode_tensor_desc tensor_ins = {
 8003556:	a914      	add	r1, sp, #80	; 0x50
 8003558:	484c      	ldr	r0, [pc, #304]	; (800368c <aiPbCmdNNInfo+0x1d8>)
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 800355a:	f04f 0e00 	mov.w	lr, #0
  struct _encode_tensor_desc tensor_ins = {
 800355e:	9104      	str	r1, [sp, #16]
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 8003560:	494b      	ldr	r1, [pc, #300]	; (8003690 <aiPbCmdNNInfo+0x1dc>)
  struct _encode_tensor_desc tensor_ins = {
 8003562:	9002      	str	r0, [sp, #8]
  struct _encode_tensor_desc tensor_outs = {
 8003564:	9005      	str	r0, [sp, #20]
 8003566:	a818      	add	r0, sp, #96	; 0x60
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003568:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 800356c:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
  struct _encode_tensor_desc tensor_outs = {
 8003570:	9007      	str	r0, [sp, #28]
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 8003572:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
 8003576:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8
  resp->payload.minfo.n_nodes = nn->n_nodes;
 800357a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 800357e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8003580:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003584:	f240 4301 	movw	r3, #1025	; 0x401
 8003588:	bf08      	it	eq
 800358a:	2301      	moveq	r3, #1
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 800358c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
      &encode_ai_buffer_to_tensor_desc, nn->n_inputs, &tensor_desc_ins };
 8003590:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003594:	2300      	movs	r3, #0
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 8003596:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
  struct _encode_tensor_desc tensor_ins = {
 800359a:	9203      	str	r2, [sp, #12]
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 800359c:	4598      	cmp	r8, r3
  resp->payload.minfo.n_inputs = nn->n_inputs;
 800359e:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 80035a2:	aa02      	add	r2, sp, #8
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 80035a4:	bf08      	it	eq
 80035a6:	f04f 0c02 	moveq.w	ip, #2
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 80035aa:	9317      	str	r3, [sp, #92]	; 0x5c
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 80035ac:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 80035b0:	f240 4202 	movw	r2, #1026	; 0x402
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 80035b4:	931b      	str	r3, [sp, #108]	; 0x6c
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 80035b6:	bf18      	it	ne
 80035b8:	4694      	movne	ip, r2
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 80035ba:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80035bc:	e9cd 2c18 	strd	r2, ip, [sp, #96]	; 0x60
      &encode_ai_buffer_to_tensor_desc, nn->n_outputs, &tensor_desc_outs };
 80035c0:	f8b5 2042 	ldrh.w	r2, [r5, #66]	; 0x42
  if (nn->map_activations.size) {
 80035c4:	f8b5 c05a 	ldrh.w	ip, [r5, #90]	; 0x5a
  struct _encode_tensor_desc tensor_outs = {
 80035c8:	9206      	str	r2, [sp, #24]
  resp->payload.minfo.outputs.funcs.encode = encode_tensor_desc;
 80035ca:	e9c4 213c 	strd	r2, r1, [r4, #240]	; 0xf0
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 80035ce:	aa05      	add	r2, sp, #20
 80035d0:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
  if (nn->map_activations.size) {
 80035d4:	f1bc 0f00 	cmp.w	ip, #0
 80035d8:	d04c      	beq.n	8003674 <aiPbCmdNNInfo+0x1c0>
      size_acts += nn->map_activations.buffer[i].size;
 80035da:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    for (int i=0; i<nn->map_activations.size; i++)
 80035dc:	4618      	mov	r0, r3
      size_acts += nn->map_activations.buffer[i].size;
 80035de:	f04f 081c 	mov.w	r8, #28
 80035e2:	3210      	adds	r2, #16
 80035e4:	fb08 fe00 	mul.w	lr, r8, r0
    for (int i=0; i<nn->map_activations.size; i++)
 80035e8:	3001      	adds	r0, #1
      size_acts += nn->map_activations.buffer[i].size;
 80035ea:	f852 e00e 	ldr.w	lr, [r2, lr]
    for (int i=0; i<nn->map_activations.size; i++)
 80035ee:	4560      	cmp	r0, ip
      size_acts += nn->map_activations.buffer[i].size;
 80035f0:	4473      	add	r3, lr
    for (int i=0; i<nn->map_activations.size; i++)
 80035f2:	dbf7      	blt.n	80035e4 <aiPbCmdNNInfo+0x130>
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 80035f4:	4a27      	ldr	r2, [pc, #156]	; (8003694 <aiPbCmdNNInfo+0x1e0>)
  struct _encode_tensor_desc tensor_acts = {
 80035f6:	a808      	add	r0, sp, #32
 80035f8:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800369c <aiPbCmdNNInfo+0x1e8>
 80035fc:	900d      	str	r0, [sp, #52]	; 0x34
  if (nn->map_weights.size) {
 80035fe:	f8b5 0052 	ldrh.w	r0, [r5, #82]	; 0x52
  struct _encode_tensor_desc tensor_acts = {
 8003602:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003606:	e9cd 2308 	strd	r2, r3, [sp, #32]
  struct _encode_tensor_desc tensor_acts = {
 800360a:	2201      	movs	r2, #1
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 800360c:	2300      	movs	r3, #0
  struct _encode_tensor_desc tensor_acts = {
 800360e:	920c      	str	r2, [sp, #48]	; 0x30
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 8003610:	930a      	str	r3, [sp, #40]	; 0x28
  resp->payload.minfo.activations.funcs.encode = encode_tensor_desc;
 8003612:	e9c4 213f 	strd	r2, r1, [r4, #252]	; 0xfc
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 8003616:	aa0b      	add	r2, sp, #44	; 0x2c
 8003618:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
  if (nn->map_weights.size) {
 800361c:	b360      	cbz	r0, 8003678 <aiPbCmdNNInfo+0x1c4>
      size_params += nn->map_weights.buffer[i].size;
 800361e:	6d6d      	ldr	r5, [r5, #84]	; 0x54
    for (int i=0; i<nn->map_weights.size; i++)
 8003620:	461a      	mov	r2, r3
      size_params += nn->map_weights.buffer[i].size;
 8003622:	f04f 081c 	mov.w	r8, #28
 8003626:	3510      	adds	r5, #16
 8003628:	fb08 fe02 	mul.w	lr, r8, r2
    for (int i=0; i<nn->map_weights.size; i++)
 800362c:	3201      	adds	r2, #1
      size_params += nn->map_weights.buffer[i].size;
 800362e:	f855 e00e 	ldr.w	lr, [r5, lr]
    for (int i=0; i<nn->map_weights.size; i++)
 8003632:	4282      	cmp	r2, r0
      size_params += nn->map_weights.buffer[i].size;
 8003634:	4473      	add	r3, lr
    for (int i=0; i<nn->map_weights.size; i++)
 8003636:	dbf7      	blt.n	8003628 <aiPbCmdNNInfo+0x174>
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 8003638:	4a17      	ldr	r2, [pc, #92]	; (8003698 <aiPbCmdNNInfo+0x1e4>)
  struct _encode_tensor_desc tensor_w = {
 800363a:	a80e      	add	r0, sp, #56	; 0x38
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 800363c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  struct _encode_tensor_desc tensor_w = {
 8003640:	2301      	movs	r3, #1
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 8003642:	2200      	movs	r2, #0
  struct _encode_tensor_desc tensor_w = {
 8003644:	9013      	str	r0, [sp, #76]	; 0x4c
  aiPbMgrSendResp(req, resp, state);
 8003646:	4630      	mov	r0, r6
  struct _encode_tensor_desc tensor_w = {
 8003648:	9312      	str	r3, [sp, #72]	; 0x48
  resp->payload.minfo.params.funcs.encode = encode_tensor_desc;
 800364a:	e9c4 3142 	strd	r3, r1, [r4, #264]	; 0x108
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 800364e:	ab11      	add	r3, sp, #68	; 0x44
  aiPbMgrSendResp(req, resp, state);
 8003650:	4621      	mov	r1, r4
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 8003652:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  struct _encode_tensor_desc tensor_w = {
 8003656:	e9cd 2c10 	strd	r2, ip, [sp, #64]	; 0x40
  aiPbMgrSendResp(req, resp, state);
 800365a:	f7fe ffbf 	bl	80025dc <aiPbMgrSendResp>
        ctx->inputs_in_activations, ctx->outputs_in_activations);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 800365e:	b022      	add	sp, #136	; 0x88
 8003660:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    return EnumTools_AI_GHS;
 8003664:	2306      	movs	r3, #6
 8003666:	e76a      	b.n	800353e <aiPbCmdNNInfo+0x8a>
    return EnumTools_AI_HTC;
 8003668:	2305      	movs	r3, #5
 800366a:	e768      	b.n	800353e <aiPbCmdNNInfo+0x8a>
    return EnumTools_AI_IAR;
 800366c:	2302      	movs	r3, #2
 800366e:	e766      	b.n	800353e <aiPbCmdNNInfo+0x8a>
    return EnumTools_AI_MDK_6;
 8003670:	2304      	movs	r3, #4
 8003672:	e764      	b.n	800353e <aiPbCmdNNInfo+0x8a>
  ai_size size_acts = 0;
 8003674:	4663      	mov	r3, ip
 8003676:	e7bd      	b.n	80035f4 <aiPbCmdNNInfo+0x140>
  ai_size size_params = 0;
 8003678:	4603      	mov	r3, r0
 800367a:	e7dd      	b.n	8003638 <aiPbCmdNNInfo+0x184>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800367c:	2304      	movs	r3, #4
 800367e:	4621      	mov	r1, r4
 8003680:	4630      	mov	r0, r6
 8003682:	461a      	mov	r2, r3
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	f7fe fffd 	bl	8002684 <aiPbMgrSendAck>
}
 800368a:	e7e8      	b.n	800365e <aiPbCmdNNInfo+0x1aa>
 800368c:	08003185 	.word	0x08003185
 8003690:	08002575 	.word	0x08002575
 8003694:	0800c67c 	.word	0x0800c67c
 8003698:	0800c681 	.word	0x0800c681
 800369c:	08003095 	.word	0x08003095

080036a0 <_print_debug>:
{
 80036a0:	b40e      	push	{r1, r2, r3}
 80036a2:	b517      	push	{r0, r1, r2, r4, lr}
  if (!debug)
 80036a4:	b178      	cbz	r0, 80036c6 <_print_debug+0x26>
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 80036a6:	4c0f      	ldr	r4, [pc, #60]	; (80036e4 <_print_debug+0x44>)
  va_start(ap, fmt);
 80036a8:	ab06      	add	r3, sp, #24
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 80036aa:	2150      	movs	r1, #80	; 0x50
 80036ac:	9a05      	ldr	r2, [sp, #20]
 80036ae:	4620      	mov	r0, r4
  va_start(ap, fmt);
 80036b0:	9301      	str	r3, [sp, #4]
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 80036b2:	f7ff fb1f 	bl	8002cf4 <lc_vsnprint>
      _print_buffer[s] = 0;
 80036b6:	2100      	movs	r1, #0
 80036b8:	1823      	adds	r3, r4, r0
  while (s) {
 80036ba:	b948      	cbnz	r0, 80036d0 <_print_debug+0x30>
  aiPbMgrSendLogV2(EnumState_S_WAITING, 1, &_print_buffer[0]);
 80036bc:	2101      	movs	r1, #1
 80036be:	4a09      	ldr	r2, [pc, #36]	; (80036e4 <_print_debug+0x44>)
 80036c0:	4608      	mov	r0, r1
 80036c2:	f7fe ffff 	bl	80026c4 <aiPbMgrSendLogV2>
}
 80036c6:	b003      	add	sp, #12
 80036c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036cc:	b003      	add	sp, #12
 80036ce:	4770      	bx	lr
    if ((_print_buffer[s] == '\n') || (_print_buffer[s] == '\r'))
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	2a0a      	cmp	r2, #10
 80036d4:	d001      	beq.n	80036da <_print_debug+0x3a>
 80036d6:	2a0d      	cmp	r2, #13
 80036d8:	d100      	bne.n	80036dc <_print_debug+0x3c>
      _print_buffer[s] = 0;
 80036da:	7019      	strb	r1, [r3, #0]
    s--;
 80036dc:	3801      	subs	r0, #1
 80036de:	3b01      	subs	r3, #1
 80036e0:	e7eb      	b.n	80036ba <_print_debug+0x1a>
 80036e2:	bf00      	nop
 80036e4:	20004618 	.word	0x20004618

080036e8 <aiPbCmdNNRun>:
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
}


void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 80036e8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 80036ec:	4605      	mov	r5, r0
 80036ee:	460e      	mov	r6, r1
 80036f0:	ed2d 8b02 	vpush	{d8}
 80036f4:	b0a2      	sub	sp, #136	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80036f6:	f3ef 8014 	mrs	r0, CONTROL
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 80036fa:	f3ef 8108 	mrs	r1, MSP
  ai_buffer *ai_input;
  ai_buffer *ai_output;

  UNUSED(param);

  MON_STACK_INIT();
 80036fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003702:	f7ff fb55 	bl	8002db0 <stackMonInit>

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 8003706:	f04f 31ff 	mov.w	r1, #4294967295
 800370a:	f105 000c 	add.w	r0, r5, #12
 800370e:	f7ff fd8f 	bl	8003230 <aiExecCtx>
  if (!ctx) {
 8003712:	4604      	mov	r4, r0
 8003714:	b910      	cbnz	r0, 800371c <aiPbCmdNNRun+0x34>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003716:	2304      	movs	r3, #4

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
  if (batch != 1) {
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	e1a4      	b.n	8003a66 <aiPbCmdNNRun+0x37e>
  _set_context(req, ctx);
 800371c:	68a8      	ldr	r0, [r5, #8]
  ctx->emit_intermediate_data = false;
 800371e:	2300      	movs	r3, #0
  net_obs_ctx.no_data = true;
 8003720:	2201      	movs	r2, #1
  ctx->emit_intermediate_data = false;
 8003722:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER_WITH_DATA) ==
 8003726:	0743      	lsls	r3, r0, #29
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER) ==
 8003728:	bf55      	itete	pl
 800372a:	f3c0 0340 	ubfxpl	r3, r0, #1, #1
    ctx->observer_is_enabled = true;
 800372e:	f240 1301 	movwmi	r3, #257	; 0x101
 8003732:	f884 3092 	strbpl.w	r3, [r4, #146]	; 0x92
 8003736:	f8a4 3092 	strhmi.w	r3, [r4, #146]	; 0x92
  ctx->direct_write = req->param & EnumRunParam_P_RUN_CONF_DIRECT_WRITE?true:false;
 800373a:	f3c0 2380 	ubfx	r3, r0, #10, #1
 800373e:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
 8003742:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  ctx->simple_value = req->param & EnumRunParam_P_RUN_CONF_CONST_VALUE?true:false;
 8003746:	f3c0 2340 	ubfx	r3, r0, #9, #1
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 800374a:	f3c0 2000 	ubfx	r0, r0, #8, #1
  ctx->simple_value = req->param & EnumRunParam_P_RUN_CONF_CONST_VALUE?true:false;
 800374e:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
  net_obs_ctx.no_data = true;
 8003752:	4bcb      	ldr	r3, [pc, #812]	; (8003a80 <aiPbCmdNNRun+0x398>)
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8003754:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
  net_obs_ctx.no_data = true;
 8003758:	7019      	strb	r1, [r3, #0]
  if (ctx->emit_intermediate_data) {
 800375a:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
  net_obs_ctx.no_data = true;
 800375e:	751a      	strb	r2, [r3, #20]
  if (ctx->emit_intermediate_data) {
 8003760:	b111      	cbz	r1, 8003768 <aiPbCmdNNRun+0x80>
    net_obs_ctx.is_enabled = true;
 8003762:	701a      	strb	r2, [r3, #0]
    net_obs_ctx.no_data = false;
 8003764:	2200      	movs	r2, #0
 8003766:	751a      	strb	r2, [r3, #20]
  net_obs_ctx.tcom = 0ULL;
 8003768:	f04f 0800 	mov.w	r8, #0
 800376c:	f04f 0900 	mov.w	r9, #0
  net_obs_ctx.n_cb_in  = 0;
 8003770:	f04f 0a00 	mov.w	sl, #0
  ctx->obs_ctx = &net_obs_ctx;
 8003774:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  PB_LC_PRINT(ctx->debug, "RUN: c-model=%s rtid=%d\r\n", ctx->report.model_name, _AI_RUNTIME_ID);
 8003778:	68a2      	ldr	r2, [r4, #8]
 800377a:	49c2      	ldr	r1, [pc, #776]	; (8003a84 <aiPbCmdNNRun+0x39c>)
  net_obs_ctx.tcom = 0ULL;
 800377c:	e9c3 8906 	strd	r8, r9, [r3, #24]
  net_obs_ctx.tnodes = 0ULL;
 8003780:	e9c3 8908 	strd	r8, r9, [r3, #32]
  net_obs_ctx.n_cb_out = 0;
 8003784:	e9c3 aa01 	strd	sl, sl, [r3, #4]
  ai_output = ctx->report.outputs;
 8003788:	e9d4 9311 	ldrd	r9, r3, [r4, #68]	; 0x44
 800378c:	9306      	str	r3, [sp, #24]
  PB_LC_PRINT(ctx->debug, "RUN: c-model=%s rtid=%d\r\n", ctx->report.model_name, _AI_RUNTIME_ID);
 800378e:	2301      	movs	r3, #1
 8003790:	f7ff ff86 	bl	80036a0 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN:  observer=%d/%d, simple_value=%d, direct_write=%d\r\n",
 8003794:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
 8003798:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
 800379c:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
 80037a0:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 80037a4:	9101      	str	r1, [sp, #4]
 80037a6:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
 80037aa:	9100      	str	r1, [sp, #0]
 80037ac:	49b6      	ldr	r1, [pc, #728]	; (8003a88 <aiPbCmdNNRun+0x3a0>)
 80037ae:	f7ff ff77 	bl	80036a0 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data (%d bytes).. opt=0x%x, param=0x%x\r\n",
 80037b2:	4648      	mov	r0, r9
 80037b4:	f894 8096 	ldrb.w	r8, [r4, #150]	; 0x96
 80037b8:	f7ff fd2c 	bl	8003214 <_get_buffer_size>
 80037bc:	68ab      	ldr	r3, [r5, #8]
 80037be:	4602      	mov	r2, r0
 80037c0:	49b2      	ldr	r1, [pc, #712]	; (8003a8c <aiPbCmdNNRun+0x3a4>)
 80037c2:	4640      	mov	r0, r8
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	46c8      	mov	r8, r9
 80037c8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80037ca:	f7ff ff69 	bl	80036a0 <_print_debug>
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 80037ce:	4648      	mov	r0, r9
 80037d0:	f7ff fd20 	bl	8003214 <_get_buffer_size>
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 80037d4:	2201      	movs	r2, #1
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 80037d6:	4603      	mov	r3, r0
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 80037d8:	4631      	mov	r1, r6
 80037da:	4628      	mov	r0, r5
 80037dc:	f8cd a000 	str.w	sl, [sp]
 80037e0:	f7fe ff50 	bl	8002684 <aiPbMgrSendAck>
  tick = port_hal_get_tick();
 80037e4:	f7fd f86e 	bl	80008c4 <HAL_GetTick>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 80037e8:	f8cd a014 	str.w	sl, [sp, #20]
  tick = port_hal_get_tick();
 80037ec:	9007      	str	r0, [sp, #28]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 80037ee:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80037f2:	9a05      	ldr	r2, [sp, #20]
 80037f4:	4293      	cmp	r3, r2
 80037f6:	f300 80fa 	bgt.w	80039ee <aiPbCmdNNRun+0x306>
  tick = port_hal_get_tick() - tick;
 80037fa:	f7fd f863 	bl	80008c4 <HAL_GetTick>
  PB_LC_PRINT(ctx->debug, "RUN: %d ticks to download %d input(s)\r\n", tick, ctx->report.n_inputs);
 80037fe:	9a07      	ldr	r2, [sp, #28]
 8003800:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8003804:	1a82      	subs	r2, r0, r2
 8003806:	49a2      	ldr	r1, [pc, #648]	; (8003a90 <aiPbCmdNNRun+0x3a8>)
 8003808:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 800380c:	f7ff ff48 	bl	80036a0 <_print_debug>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8003810:	f8d4 8098 	ldr.w	r8, [r4, #152]	; 0x98
  if (obs_ctx->is_enabled == false)
 8003814:	f898 3000 	ldrb.w	r3, [r8]
 8003818:	b193      	cbz	r3, 8003840 <aiPbCmdNNRun+0x158>
  if (ctx->handle == AI_HANDLE_NULL)
 800381a:	6820      	ldr	r0, [r4, #0]
 800381c:	b180      	cbz	r0, 8003840 <aiPbCmdNNRun+0x158>
  ai_mnetwork_get_private_handle(ctx->handle,
 800381e:	a90e      	add	r1, sp, #56	; 0x38
 8003820:	aa14      	add	r2, sp, #80	; 0x50
  obs_ctx->cresp = cresp;
 8003822:	e9c8 5603 	strd	r5, r6, [r8, #12]
  ai_mnetwork_get_private_handle(ctx->handle,
 8003826:	f000 fbdb 	bl	8003fe0 <ai_mnetwork_get_private_handle>
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 800382a:	4b9a      	ldr	r3, [pc, #616]	; (8003a94 <aiPbCmdNNRun+0x3ac>)
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 800382c:	f108 0128 	add.w	r1, r8, #40	; 0x28
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 8003830:	e9c8 340a 	strd	r3, r4, [r8, #40]	; 0x28
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8003834:	2306      	movs	r3, #6
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8003836:	980e      	ldr	r0, [sp, #56]	; 0x38
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8003838:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 800383c:	f003 fe84 	bl	8007548 <ai_platform_observer_register_s>
  MON_ALLOC_ENABLE();
 8003840:	f8df a270 	ldr.w	sl, [pc, #624]	; 8003ab4 <aiPbCmdNNRun+0x3cc>
  MON_ALLOC_RESET();
 8003844:	f7ff fbf2 	bl	800302c <_mon_alloc_reset>
  PB_LC_PRINT(ctx->debug, "RUN: Processing.. current tick=%lu\r\n", (uint32_t)port_hal_get_tick());
 8003848:	f894 8096 	ldrb.w	r8, [r4, #150]	; 0x96
  MON_ALLOC_ENABLE();
 800384c:	f8da 3000 	ldr.w	r3, [sl]
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	f8ca 3000 	str.w	r3, [sl]
  PB_LC_PRINT(ctx->debug, "RUN: Processing.. current tick=%lu\r\n", (uint32_t)port_hal_get_tick());
 8003858:	f7fd f834 	bl	80008c4 <HAL_GetTick>
 800385c:	498e      	ldr	r1, [pc, #568]	; (8003a98 <aiPbCmdNNRun+0x3b0>)
 800385e:	4602      	mov	r2, r0
 8003860:	4640      	mov	r0, r8
 8003862:	f7ff ff1d 	bl	80036a0 <_print_debug>
 8003866:	f3ef 8308 	mrs	r3, MSP
  MON_STACK_CHECK0();
 800386a:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8003ab8 <aiPbCmdNNRun+0x3d0>
 800386e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8003872:	429a      	cmp	r2, r3
 8003874:	d004      	beq.n	8003880 <aiPbCmdNNRun+0x198>
 8003876:	f3ef 8108 	mrs	r1, MSP
 800387a:	4888      	ldr	r0, [pc, #544]	; (8003a9c <aiPbCmdNNRun+0x3b4>)
 800387c:	f7ff fa28 	bl	8002cd0 <lc_print>
  MON_STACK_MARK();
 8003880:	f898 3004 	ldrb.w	r3, [r8, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f040 8149 	bne.w	8003b1c <aiPbCmdNNRun+0x434>
  tick = port_hal_get_tick();
 800388a:	f7fd f81b 	bl	80008c4 <HAL_GetTick>
 800388e:	4683      	mov	fp, r0
  cyclesCounterStart();
 8003890:	f7ff fc8a 	bl	80031a8 <cyclesCounterStart>
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 8003894:	9a06      	ldr	r2, [sp, #24]
 8003896:	4649      	mov	r1, r9
 8003898:	6820      	ldr	r0, [r4, #0]
 800389a:	f000 fb90 	bl	8003fbe <ai_mnetwork_run>
  if (batch != 1) {
 800389e:	2801      	cmp	r0, #1
 80038a0:	f040 814b 	bne.w	8003b3a <aiPbCmdNNRun+0x452>
        EnumError_E_GENERIC, EnumError_E_GENERIC);
    return;
  }
  tend = cyclesCounterEnd();
 80038a4:	f7ff fc90 	bl	80031c8 <cyclesCounterEnd>
 80038a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  tick = port_hal_get_tick() - tick;
 80038ac:	f7fd f80a 	bl	80008c4 <HAL_GetTick>

  MON_ALLOC_DISABLE();
 80038b0:	f8da 3000 	ldr.w	r3, [sl]
  tick = port_hal_get_tick() - tick;
 80038b4:	eba0 020b 	sub.w	r2, r0, fp
  MON_STACK_EVALUATE();
 80038b8:	f898 c004 	ldrb.w	ip, [r8, #4]
  MON_ALLOC_DISABLE();
 80038bc:	f023 0301 	bic.w	r3, r3, #1
  MON_STACK_EVALUATE();
 80038c0:	2000      	movs	r0, #0
  MON_ALLOC_DISABLE();
 80038c2:	f8ca 3000 	str.w	r3, [sl]
  MON_STACK_EVALUATE();
 80038c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80038ca:	f1bc 0f00 	cmp.w	ip, #0
 80038ce:	d029      	beq.n	8003924 <aiPbCmdNNRun+0x23c>
 80038d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80038d4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80038d8:	eba1 0b03 	sub.w	fp, r1, r3
 80038dc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80038e0:	3303      	adds	r3, #3
 80038e2:	f023 0303 	bic.w	r3, r3, #3
 80038e6:	f103 0e20 	add.w	lr, r3, #32
 80038ea:	f853 9b04 	ldr.w	r9, [r3], #4
 80038ee:	f1b9 3fde 	cmp.w	r9, #3739147998	; 0xdededede
 80038f2:	bf18      	it	ne
 80038f4:	4660      	movne	r0, ip
 80038f6:	4573      	cmp	r3, lr
 80038f8:	d1f7      	bne.n	80038ea <aiPbCmdNNRun+0x202>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	f040 812a 	bne.w	8003b54 <aiPbCmdNNRun+0x46c>
 8003900:	2020      	movs	r0, #32
 8003902:	f8d8 e018 	ldr.w	lr, [r8, #24]
 8003906:	f8c8 0008 	str.w	r0, [r8, #8]
 800390a:	6819      	ldr	r1, [r3, #0]
 800390c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003910:	f1b1 3fde 	cmp.w	r1, #3739147998	; 0xdededede
 8003914:	d102      	bne.n	800391c <aiPbCmdNNRun+0x234>
 8003916:	4573      	cmp	r3, lr
 8003918:	f0c0 8117 	bcc.w	8003b4a <aiPbCmdNNRun+0x462>
 800391c:	ebab 0100 	sub.w	r1, fp, r0
 8003920:	f8c8 1008 	str.w	r1, [r8, #8]

  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8003924:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98

  /* 4 - Send basic report (optional) ------------------------------ */

#if defined(_APP_STACK_MONITOR_) && _APP_STACK_MONITOR_ == 1 && defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  PB_LC_PRINT(ctx->debug, "RUN:  used stack/heap=%d/%d\r\n", (int)io_stack.susage, (int)io_malloc.used);
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 8003928:	f04f 0900 	mov.w	r9, #0
    }
    if ((i + 1) == ctx->report.n_outputs) {
      state = EnumState_S_DONE;
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
    }
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 800392c:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8003aa0 <aiPbCmdNNRun+0x3b8>
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 8003930:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
 8003934:	e9d0 c008 	ldrd	ip, r0, [r0, #32]
 8003938:	eb13 030c 	adds.w	r3, r3, ip
 800393c:	eb41 0100 	adc.w	r1, r1, r0
 8003940:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003942:	18c0      	adds	r0, r0, r3
 8003944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003946:	eb41 0303 	adc.w	r3, r1, r3
  PB_LC_PRINT(ctx->debug, "RUN: Processing done. delta_tick=%lu\r\n", tick);
 800394a:	4956      	ldr	r1, [pc, #344]	; (8003aa4 <aiPbCmdNNRun+0x3bc>)
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 800394c:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
  PB_LC_PRINT(ctx->debug, "RUN: Processing done. delta_tick=%lu\r\n", tick);
 8003950:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 8003954:	f7ff fea4 	bl	80036a0 <_print_debug>
  PB_LC_PRINT(ctx->debug, "RUN:  used stack/heap=%d/%d\r\n", (int)io_stack.susage, (int)io_malloc.used);
 8003958:	f8da 3018 	ldr.w	r3, [sl, #24]
 800395c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8003960:	4951      	ldr	r1, [pc, #324]	; (8003aa8 <aiPbCmdNNRun+0x3c0>)
 8003962:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 8003966:	f7ff fe9b 	bl	80036a0 <_print_debug>
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 800396a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800396e:	f7ff fa87 	bl	8002e80 <dwtCyclesToFloatMs>
 8003972:	f8da 1018 	ldr.w	r1, [sl, #24]
 8003976:	ab0c      	add	r3, sp, #48	; 0x30
 8003978:	2202      	movs	r2, #2
 800397a:	9113      	str	r1, [sp, #76]	; 0x4c
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 800397c:	4628      	mov	r0, r5
  if (ctx->observer_is_enabled)
 800397e:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 8003982:	9311      	str	r3, [sp, #68]	; 0x44
    perf.stack_usage = -1;
 8003984:	4549      	cmp	r1, r9
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 8003986:	f8d8 3008 	ldr.w	r3, [r8, #8]
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 800398a:	4631      	mov	r1, r6
 800398c:	f8cd 9000 	str.w	r9, [sp]
    perf.stack_usage = -1;
 8003990:	bf18      	it	ne
 8003992:	f04f 33ff 	movne.w	r3, #4294967295
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 8003996:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800399a:	46c8      	mov	r8, r9
 800399c:	9312      	str	r3, [sp, #72]	; 0x48
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 800399e:	ab0e      	add	r3, sp, #56	; 0x38
 80039a0:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80039a4:	68a3      	ldr	r3, [r4, #8]
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend, io_stack.susage, io_malloc.used};
 80039a6:	e9cd 920f 	strd	r9, r2, [sp, #60]	; 0x3c
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 80039aa:	f7fe fedd 	bl	8002768 <aiPbMgrSendOperator>
  PB_LC_PRINT(ctx->debug, "RUN: send %d output tensors\r\n", ctx->report.n_outputs);
 80039ae:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 80039b2:	493e      	ldr	r1, [pc, #248]	; (8003aac <aiPbCmdNNRun+0x3c4>)
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 80039b4:	f240 2902 	movw	r9, #514	; 0x202
  PB_LC_PRINT(ctx->debug, "RUN: send %d output tensors\r\n", ctx->report.n_outputs);
 80039b8:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
 80039bc:	f7ff fe70 	bl	80036a0 <_print_debug>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80039c0:	f8dd a018 	ldr.w	sl, [sp, #24]
 80039c4:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 80039c8:	4542      	cmp	r2, r8
 80039ca:	f300 80d1 	bgt.w	8003b70 <aiPbCmdNNRun+0x488>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 80039ce:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
  if (obs_ctx->is_enabled == false)
 80039d2:	782b      	ldrb	r3, [r5, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d04b      	beq.n	8003a70 <aiPbCmdNNRun+0x388>
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 80039d8:	a90b      	add	r1, sp, #44	; 0x2c
 80039da:	aa14      	add	r2, sp, #80	; 0x50
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	f000 faff 	bl	8003fe0 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 80039e2:	f105 0128 	add.w	r1, r5, #40	; 0x28
 80039e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80039e8:	f003 fde4 	bl	80075b4 <ai_platform_observer_unregister_s>
  return 0;
 80039ec:	e040      	b.n	8003a70 <aiPbCmdNNRun+0x388>
    if ((i + 1) == ctx->report.n_inputs)
 80039ee:	9a05      	ldr	r2, [sp, #20]
    batch += _get_buffer_size(&ai_input[i]);
 80039f0:	4640      	mov	r0, r8
    if ((i + 1) == ctx->report.n_inputs)
 80039f2:	3201      	adds	r2, #1
      state = EnumState_S_PROCESSING;
 80039f4:	429a      	cmp	r2, r3
 80039f6:	bf14      	ite	ne
 80039f8:	2301      	movne	r3, #1
 80039fa:	2302      	moveq	r3, #2
    if ((i + 1) == ctx->report.n_inputs)
 80039fc:	9205      	str	r2, [sp, #20]
      state = EnumState_S_PROCESSING;
 80039fe:	ee08 3a10 	vmov	s16, r3
    batch += _get_buffer_size(&ai_input[i]);
 8003a02:	f7ff fc07 	bl	8003214 <_get_buffer_size>
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8003a06:	2300      	movs	r3, #0
 8003a08:	4640      	mov	r0, r8
    res = receive_ai_data(req, resp, state, &ai_input[i], ctx->simple_value, ctx->direct_write);
 8003a0a:	f894 b094 	ldrb.w	fp, [r4, #148]	; 0x94
 8003a0e:	f894 a095 	ldrb.w	sl, [r4, #149]	; 0x95
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8003a12:	9314      	str	r3, [sp, #80]	; 0x50
 8003a14:	f7ff fbfe 	bl	8003214 <_get_buffer_size>
 8003a18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003a1c:	9015      	str	r0, [sp, #84]	; 0x54
 8003a1e:	9316      	str	r3, [sp, #88]	; 0x58
 8003a20:	2300      	movs	r3, #0
 8003a22:	9317      	str	r3, [sp, #92]	; 0x5c
  if ((simple_value) || (direct_write))
 8003a24:	f1bb 0f00 	cmp.w	fp, #0
 8003a28:	d102      	bne.n	8003a30 <aiPbCmdNNRun+0x348>
 8003a2a:	f1ba 0f00 	cmp.w	sl, #0
 8003a2e:	d011      	beq.n	8003a54 <aiPbCmdNNRun+0x36c>
    data.size = _get_element_size(buffer);
 8003a30:	f8d8 1000 	ldr.w	r1, [r8]
  if (is_binary)
 8003a34:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <aiPbCmdNNRun+0x3c8>)
 8003a36:	f021 437e 	bic.w	r3, r1, #4261412864	; 0xfe000000
 8003a3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01b      	beq.n	8003a7a <aiPbCmdNNRun+0x392>
  return (size_t)AI_BUFFER_BYTE_SIZE(1, buffer->format);
 8003a42:	2001      	movs	r0, #1
 8003a44:	f002 fe66 	bl	8006714 <ai_buffer_get_byte_size>
    data.size = _get_element_size(buffer);
 8003a48:	9015      	str	r0, [sp, #84]	; 0x54
  if (direct_write)
 8003a4a:	f1ba 0f00 	cmp.w	sl, #0
 8003a4e:	d001      	beq.n	8003a54 <aiPbCmdNNRun+0x36c>
    data.addr = (uintptr_t)&temp;
 8003a50:	ab0e      	add	r3, sp, #56	; 0x38
 8003a52:	9316      	str	r3, [sp, #88]	; 0x58
  aiPbMgrReceiveData(&data);
 8003a54:	a814      	add	r0, sp, #80	; 0x50
 8003a56:	f7fe fe6d 	bl	8002734 <aiPbMgrReceiveData>
  if (data.nb_read != data.size) {
 8003a5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003a5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d02c      	beq.n	8003abc <aiPbCmdNNRun+0x3d4>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003a62:	2201      	movs	r2, #1
 8003a64:	9200      	str	r2, [sp, #0]
 8003a66:	2204      	movs	r2, #4
 8003a68:	4631      	mov	r1, r6
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f7fe fe0a 	bl	8002684 <aiPbMgrSendAck>
  }

  aiObserverUnbind(ctx);
}
 8003a70:	b022      	add	sp, #136	; 0x88
 8003a72:	ecbd 8b02 	vpop	{d8}
 8003a76:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    return 4;
 8003a7a:	2004      	movs	r0, #4
 8003a7c:	e7e4      	b.n	8003a48 <aiPbCmdNNRun+0x360>
 8003a7e:	bf00      	nop
 8003a80:	20004708 	.word	0x20004708
 8003a84:	0800c688 	.word	0x0800c688
 8003a88:	0800c6a2 	.word	0x0800c6a2
 8003a8c:	0800c6db 	.word	0x0800c6db
 8003a90:	0800c711 	.word	0x0800c711
 8003a94:	080032f9 	.word	0x080032f9
 8003a98:	0800c739 	.word	0x0800c739
 8003a9c:	0800c75e 	.word	0x0800c75e
 8003aa0:	00000000 	.word	0x00000000
 8003aa4:	0800c82f 	.word	0x0800c82f
 8003aa8:	0800c856 	.word	0x0800c856
 8003aac:	0800c874 	.word	0x0800c874
 8003ab0:	000400c0 	.word	0x000400c0
 8003ab4:	200045dc 	.word	0x200045dc
 8003ab8:	200045f8 	.word	0x200045f8
  if ((simple_value) && (!direct_write))/* broadcast the value */
 8003abc:	f1bb 0f00 	cmp.w	fp, #0
 8003ac0:	d10d      	bne.n	8003ade <aiPbCmdNNRun+0x3f6>
    aiPbMgrSendAck(req, resp, state, data.size, EnumError_E_NONE);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	ee18 2a10 	vmov	r2, s16
 8003ac8:	4631      	mov	r1, r6
 8003aca:	4628      	mov	r0, r5
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	f108 081c 	add.w	r8, r8, #28
 8003ad2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ad4:	f7fe fdd6 	bl	8002684 <aiPbMgrSendAck>
      aiPbMgrWaitAck();
 8003ad8:	f7fe fdde 	bl	8002698 <aiPbMgrWaitAck>
    if (res != true)
 8003adc:	e687      	b.n	80037ee <aiPbCmdNNRun+0x106>
  if ((simple_value) && (!direct_write))/* broadcast the value */
 8003ade:	f1ba 0f00 	cmp.w	sl, #0
 8003ae2:	d1ee      	bne.n	8003ac2 <aiPbCmdNNRun+0x3da>
      const uintptr_t r_ptr = (uintptr_t)buffer->data;
 8003ae4:	f8d8 1004 	ldr.w	r1, [r8, #4]
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 8003ae8:	f04f 0a01 	mov.w	sl, #1
      uintptr_t w_ptr = r_ptr + el_s;
 8003aec:	eb01 0b02 	add.w	fp, r1, r2
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 8003af0:	4640      	mov	r0, r8
 8003af2:	e9cd 2108 	strd	r2, r1, [sp, #32]
 8003af6:	f7ff fb8d 	bl	8003214 <_get_buffer_size>
 8003afa:	9a08      	ldr	r2, [sp, #32]
 8003afc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003afe:	fbb0 f0f2 	udiv	r0, r0, r2
 8003b02:	4582      	cmp	sl, r0
 8003b04:	d2dd      	bcs.n	8003ac2 <aiPbCmdNNRun+0x3da>
        memcpy((void *)w_ptr, (void *)r_ptr, el_s);
 8003b06:	4658      	mov	r0, fp
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 8003b08:	f10a 0a01 	add.w	sl, sl, #1
        memcpy((void *)w_ptr, (void *)r_ptr, el_s);
 8003b0c:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8003b10:	f006 fd17 	bl	800a542 <memcpy>
        w_ptr += el_s;
 8003b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 8003b16:	9908      	ldr	r1, [sp, #32]
        w_ptr += el_s;
 8003b18:	4493      	add	fp, r2
      for (size_t pos = 1; pos < _get_buffer_size(buffer) / el_s; pos++)
 8003b1a:	e7e9      	b.n	8003af0 <aiPbCmdNNRun+0x408>
  MON_STACK_MARK();
 8003b1c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8003b20:	f04f 31de 	mov.w	r1, #3739147998	; 0xdededede
 8003b24:	3303      	adds	r3, #3
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	f4bf aeab 	bcs.w	800388a <aiPbCmdNNRun+0x1a2>
 8003b34:	f843 1b04 	str.w	r1, [r3], #4
 8003b38:	e7f7      	b.n	8003b2a <aiPbCmdNNRun+0x442>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 8003b3a:	6820      	ldr	r0, [r4, #0]
 8003b3c:	f000 fa13 	bl	8003f66 <ai_mnetwork_get_error>
 8003b40:	4919      	ldr	r1, [pc, #100]	; (8003ba8 <aiPbCmdNNRun+0x4c0>)
 8003b42:	f7fe fe8b 	bl	800285c <aiLogErr>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003b46:	230a      	movs	r3, #10
 8003b48:	e5e6      	b.n	8003718 <aiPbCmdNNRun+0x30>
  MON_STACK_EVALUATE();
 8003b4a:	3004      	adds	r0, #4
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8003b52:	e6da      	b.n	800390a <aiPbCmdNNRun+0x222>
 8003b54:	f04f 33ff 	mov.w	r3, #4294967295
 8003b58:	4659      	mov	r1, fp
 8003b5a:	4814      	ldr	r0, [pc, #80]	; (8003bac <aiPbCmdNNRun+0x4c4>)
 8003b5c:	9205      	str	r2, [sp, #20]
 8003b5e:	f8c8 3008 	str.w	r3, [r8, #8]
 8003b62:	f7ff f8b5 	bl	8002cd0 <lc_print>
 8003b66:	4812      	ldr	r0, [pc, #72]	; (8003bb0 <aiPbCmdNNRun+0x4c8>)
 8003b68:	f7ff f8b2 	bl	8002cd0 <lc_print>
 8003b6c:	9a05      	ldr	r2, [sp, #20]
 8003b6e:	e6d9      	b.n	8003924 <aiPbCmdNNRun+0x23c>
    if (req->param & EnumRunParam_P_RUN_MODE_PERF) {
 8003b70:	68ab      	ldr	r3, [r5, #8]
    if ((i + 1) == ctx->report.n_outputs) {
 8003b72:	f108 0801 	add.w	r8, r8, #1
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8003b76:	2100      	movs	r1, #0
 8003b78:	eeb0 0a48 	vmov.f32	s0, s16
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8003b7c:	f013 0f08 	tst.w	r3, #8
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8003b80:	4628      	mov	r0, r5
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8003b82:	bf0c      	ite	eq
 8003b84:	2302      	moveq	r3, #2
 8003b86:	464b      	movne	r3, r9
    if ((i + 1) == ctx->report.n_outputs) {
 8003b88:	4590      	cmp	r8, r2
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8003b8a:	bf06      	itte	eq
 8003b8c:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
      state = EnumState_S_DONE;
 8003b90:	2203      	moveq	r2, #3
    EnumState state = EnumState_S_PROCESSING;
 8003b92:	2202      	movne	r2, #2
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8003b94:	e9cd 3100 	strd	r3, r1, [sp]
 8003b98:	4653      	mov	r3, sl
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	f10a 0a1c 	add.w	sl, sl, #28
 8003ba0:	f7ff fb70 	bl	8003284 <send_ai_io_tensor.isra.0>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003ba4:	e70e      	b.n	80039c4 <aiPbCmdNNRun+0x2dc>
 8003ba6:	bf00      	nop
 8003ba8:	0800c7a2 	.word	0x0800c7a2
 8003bac:	0800c7b2 	.word	0x0800c7b2
 8003bb0:	0800c7d6 	.word	0x0800c7d6

08003bb4 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 8003bb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 8003bb6:	4c1f      	ldr	r4, [pc, #124]	; (8003c34 <aiValidationInit+0x80>)
  port_dwt_reset();
 8003bb8:	2500      	movs	r5, #0
 8003bba:	4e1f      	ldr	r6, [pc, #124]	; (8003c38 <aiValidationInit+0x84>)
 8003bbc:	f204 2016 	addw	r0, r4, #534	; 0x216
 8003bc0:	f7ff f886 	bl	8002cd0 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f504 7107 	add.w	r1, r4, #540	; 0x21c
 8003bca:	2207      	movs	r2, #7
 8003bcc:	f204 202a 	addw	r0, r4, #554	; 0x22a
 8003bd0:	f7ff f87e 	bl	8002cd0 <lc_print>
  LC_PRINT("#\r\n");
 8003bd4:	f204 2037 	addw	r0, r4, #567	; 0x237
 8003bd8:	f7ff f87a 	bl	8002cd0 <lc_print>

  systemSettingLog();
 8003bdc:	f7ff f9ac 	bl	8002f38 <systemSettingLog>
  port_dwt_init();
 8003be0:	f000 f924 	bl	8003e2c <port_dwt_init_imp>
  port_dwt_reset();
 8003be4:	6075      	str	r5, [r6, #4]
  port_hal_delay(100);
 8003be6:	2064      	movs	r0, #100	; 0x64
 8003be8:	f7fc fe72 	bl	80008d0 <HAL_Delay>
  st = port_dwt_get_cycles();
 8003bec:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 8003bee:	2664      	movs	r6, #100	; 0x64
 8003bf0:	466a      	mov	r2, sp
 8003bf2:	4629      	mov	r1, r5
 8003bf4:	fbb0 f0f6 	udiv	r0, r0, r6
 8003bf8:	f7ff f906 	bl	8002e08 <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 8003bfc:	9a03      	ldr	r2, [sp, #12]
 8003bfe:	f204 203b 	addw	r0, r4, #571	; 0x23b
 8003c02:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8003c06:	fb06 3101 	mla	r1, r6, r1, r3
 8003c0a:	f7ff f861 	bl	8002cd0 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 8003c0e:	466a      	mov	r2, sp
 8003c10:	2100      	movs	r1, #0
 8003c12:	f04f 30ff 	mov.w	r0, #4294967295
 8003c16:	f7ff f8f7 	bl	8002e08 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8003c1a:	9a01      	ldr	r2, [sp, #4]
 8003c1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c20:	9b02      	ldr	r3, [sp, #8]
 8003c22:	fb01 3302 	mla	r3, r1, r2, r3
 8003c26:	4a05      	ldr	r2, [pc, #20]	; (8003c3c <aiValidationInit+0x88>)
 8003c28:	6013      	str	r3, [r2, #0]
  port_dwt_init();
 8003c2a:	f000 f8ff 	bl	8003e2c <port_dwt_init_imp>

  cyclesCounterInit();

  return 0;
}
 8003c2e:	4628      	mov	r0, r5
 8003c30:	b004      	add	sp, #16
 8003c32:	bd70      	pop	{r4, r5, r6, pc}
 8003c34:	0800c67c 	.word	0x0800c67c
 8003c38:	e0001000 	.word	0xe0001000
 8003c3c:	200045d0 	.word	0x200045d0

08003c40 <aiValidationProcess>:

int aiValidationProcess(void)
{
 8003c40:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8003c44:	2500      	movs	r5, #0
 8003c46:	4c67      	ldr	r4, [pc, #412]	; (8003de4 <aiValidationProcess+0x1a4>)
  aiPlatformVersion();
 8003c48:	f7fe fdf2 	bl	8002830 <aiPlatformVersion>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8003c4c:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8003e20 <aiValidationProcess+0x1e0>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8003c50:	f844 5b08 	str.w	r5, [r4], #8
  idx = 0;
 8003c54:	46a8      	mov	r8, r5
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003c56:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8003e24 <aiValidationProcess+0x1e4>
  int res = -1;
 8003c5a:	f04f 35ff 	mov.w	r5, #4294967295
  LC_PRINT("Discovering the network(s)...\r\n");
 8003c5e:	4862      	ldr	r0, [pc, #392]	; (8003de8 <aiValidationProcess+0x1a8>)
 8003c60:	f7ff f836 	bl	8002cd0 <lc_print>
    nn_name = ai_mnetwork_find(NULL, idx);
 8003c64:	4641      	mov	r1, r8
 8003c66:	2000      	movs	r0, #0
 8003c68:	f000 f924 	bl	8003eb4 <ai_mnetwork_find>
    if (nn_name) {
 8003c6c:	4606      	mov	r6, r0
 8003c6e:	b1b0      	cbz	r0, 8003c9e <aiValidationProcess+0x5e>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8003c70:	4601      	mov	r1, r0
 8003c72:	4648      	mov	r0, r9
 8003c74:	f7ff f82c 	bl	8002cd0 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8003c78:	4631      	mov	r1, r6
 8003c7a:	485c      	ldr	r0, [pc, #368]	; (8003dec <aiValidationProcess+0x1ac>)
 8003c7c:	f7ff f828 	bl	8002cd0 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8003c80:	2200      	movs	r2, #0
 8003c82:	f1a4 0108 	sub.w	r1, r4, #8
 8003c86:	4630      	mov	r0, r6
 8003c88:	f000 f922 	bl	8003ed0 <ai_mnetwork_create>
  if (err.type) {
 8003c8c:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 8003c90:	d017      	beq.n	8003cc2 <aiValidationProcess+0x82>
        nn_name = NULL;
 8003c92:	2600      	movs	r6, #0
    return -1;
 8003c94:	f04f 35ff 	mov.w	r5, #4294967295
    aiLogErr(err, "ai_mnetwork_create");
 8003c98:	4955      	ldr	r1, [pc, #340]	; (8003df0 <aiValidationProcess+0x1b0>)
 8003c9a:	f7fe fddf 	bl	800285c <aiLogErr>
    idx++;
 8003c9e:	f108 0801 	add.w	r8, r8, #1
  } while (nn_name);
 8003ca2:	34a0      	adds	r4, #160	; 0xa0
 8003ca4:	2e00      	cmp	r6, #0
 8003ca6:	d1dd      	bne.n	8003c64 <aiValidationProcess+0x24>
  int r;

  r = aiInit();
  if (r) {
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	d077      	beq.n	8003d9c <aiValidationProcess+0x15c>
    LC_PRINT("\r\nE:  aiInit() r=%d\r\n", r);
 8003cac:	4851      	ldr	r0, [pc, #324]	; (8003df4 <aiValidationProcess+0x1b4>)
 8003cae:	4629      	mov	r1, r5
 8003cb0:	f7ff f80e 	bl	8002cd0 <lc_print>
    port_hal_delay(2000);
 8003cb4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003cb8:	f7fc fe0a 	bl	80008d0 <HAL_Delay>
  do {
    r = aiPbMgrWaitAndProcess();
  } while (r==0);

  return r;
}
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 8003cc2:	484d      	ldr	r0, [pc, #308]	; (8003df8 <aiValidationProcess+0x1b8>)
 8003cc4:	f7ff f804 	bl	8002cd0 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8003cc8:	4621      	mov	r1, r4
 8003cca:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8003cce:	f000 f93f 	bl	8003f50 <ai_mnetwork_get_report>
 8003cd2:	4683      	mov	fp, r0
    err = ai_mnetwork_get_error(ctx->handle);
 8003cd4:	f854 0c08 	ldr.w	r0, [r4, #-8]
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8003cd8:	f1bb 0f00 	cmp.w	fp, #0
 8003cdc:	d10e      	bne.n	8003cfc <aiValidationProcess+0xbc>
    err = ai_mnetwork_get_error(ctx->handle);
 8003cde:	f000 f942 	bl	8003f66 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8003ce2:	4946      	ldr	r1, [pc, #280]	; (8003dfc <aiValidationProcess+0x1bc>)
 8003ce4:	f7fe fdba 	bl	800285c <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8003ce8:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8003cec:	f000 f91a 	bl	8003f24 <ai_mnetwork_destroy>
        nn_name = NULL;
 8003cf0:	465e      	mov	r6, fp
    return -2;
 8003cf2:	f06f 0501 	mvn.w	r5, #1
    ctx->handle = AI_HANDLE_NULL;
 8003cf6:	f844 bc08 	str.w	fp, [r4, #-8]
      if (res)
 8003cfa:	e7d0      	b.n	8003c9e <aiValidationProcess+0x5e>
  if (!ai_mnetwork_init(ctx->handle)) {
 8003cfc:	f000 f940 	bl	8003f80 <ai_mnetwork_init>
 8003d00:	4683      	mov	fp, r0
 8003d02:	b980      	cbnz	r0, 8003d26 <aiValidationProcess+0xe6>
    err = ai_mnetwork_get_error(ctx->handle);
 8003d04:	f854 0c08 	ldr.w	r0, [r4, #-8]
        nn_name = NULL;
 8003d08:	465e      	mov	r6, fp
    err = ai_mnetwork_get_error(ctx->handle);
 8003d0a:	f000 f92c 	bl	8003f66 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8003d0e:	493c      	ldr	r1, [pc, #240]	; (8003e00 <aiValidationProcess+0x1c0>)
 8003d10:	f7fe fda4 	bl	800285c <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8003d14:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8003d18:	f000 f904 	bl	8003f24 <ai_mnetwork_destroy>
    return -4;
 8003d1c:	f06f 0503 	mvn.w	r5, #3
    ctx->handle = AI_HANDLE_NULL;
 8003d20:	f844 bc08 	str.w	fp, [r4, #-8]
      if (res)
 8003d24:	e7bb      	b.n	8003c9e <aiValidationProcess+0x5e>
  if (ai_mnetwork_get_report(ctx->handle,
 8003d26:	4621      	mov	r1, r4
 8003d28:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8003d2c:	f000 f910 	bl	8003f50 <ai_mnetwork_get_report>
 8003d30:	4683      	mov	fp, r0
 8003d32:	b1b0      	cbz	r0, 8003d62 <aiValidationProcess+0x122>
    aiPrintNetworkInfo(&ctx->report);
 8003d34:	4620      	mov	r0, r4
 8003d36:	f7fe fea9 	bl	8002a8c <aiPrintNetworkInfo>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8003d3a:	4628      	mov	r0, r5
  ctx->inputs_in_activations = false;
 8003d3c:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
    if (!ctx->report.inputs[i].data)
 8003d40:	211c      	movs	r1, #28
  ctx->outputs_in_activations = false;
 8003d42:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
      ctx->inputs_in_activations = true;
 8003d46:	2501      	movs	r5, #1
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 8003d48:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8003e28 <aiValidationProcess+0x1e8>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8003d4c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003d4e:	4298      	cmp	r0, r3
 8003d50:	db0a      	blt.n	8003d68 <aiValidationProcess+0x128>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003d52:	2300      	movs	r3, #0
    if (!ctx->report.outputs[i].data)
 8003d54:	201c      	movs	r0, #28
      ctx->outputs_in_activations = true;
 8003d56:	2501      	movs	r5, #1
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003d58:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	db11      	blt.n	8003d82 <aiValidationProcess+0x142>
      res = aiBootstrap(&net_exec_ctx[idx], nn_name);
 8003d5e:	2500      	movs	r5, #0
 8003d60:	e79d      	b.n	8003c9e <aiValidationProcess+0x5e>
    err = ai_mnetwork_get_error(ctx->handle);
 8003d62:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8003d66:	e7ba      	b.n	8003cde <aiValidationProcess+0x9e>
    if (!ctx->report.inputs[i].data)
 8003d68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d6a:	fb01 3300 	mla	r3, r1, r0, r3
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	b922      	cbnz	r2, 8003d7c <aiValidationProcess+0x13c>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 8003d72:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 8003d76:	605a      	str	r2, [r3, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8003d78:	3001      	adds	r0, #1
 8003d7a:	e7e7      	b.n	8003d4c <aiValidationProcess+0x10c>
      ctx->inputs_in_activations = true;
 8003d7c:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
 8003d80:	e7fa      	b.n	8003d78 <aiValidationProcess+0x138>
    if (!ctx->report.outputs[i].data)
 8003d82:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d84:	fb00 2203 	mla	r2, r0, r3, r2
 8003d88:	6851      	ldr	r1, [r2, #4]
 8003d8a:	b921      	cbnz	r1, 8003d96 <aiValidationProcess+0x156>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003d8c:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 8003d90:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003d92:	3301      	adds	r3, #1
 8003d94:	e7e0      	b.n	8003d58 <aiValidationProcess+0x118>
      ctx->outputs_in_activations = true;
 8003d96:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 8003d9a:	e7fa      	b.n	8003d92 <aiValidationProcess+0x152>
    LC_PRINT("\r\n");
 8003d9c:	4819      	ldr	r0, [pc, #100]	; (8003e04 <aiValidationProcess+0x1c4>)
 8003d9e:	f7fe ff97 	bl	8002cd0 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8003da2:	4819      	ldr	r0, [pc, #100]	; (8003e08 <aiValidationProcess+0x1c8>)
 8003da4:	f7fe ff94 	bl	8002cd0 <lc_print>
    LC_PRINT("| READY to receive a CMD from the HOST... |\r\n");
 8003da8:	4818      	ldr	r0, [pc, #96]	; (8003e0c <aiValidationProcess+0x1cc>)
 8003daa:	f7fe ff91 	bl	8002cd0 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8003dae:	4816      	ldr	r0, [pc, #88]	; (8003e08 <aiValidationProcess+0x1c8>)
 8003db0:	f7fe ff8e 	bl	8002cd0 <lc_print>
    LC_PRINT("\r\n");
 8003db4:	4813      	ldr	r0, [pc, #76]	; (8003e04 <aiValidationProcess+0x1c4>)
 8003db6:	f7fe ff8b 	bl	8002cd0 <lc_print>
    LC_PRINT("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 8003dba:	4815      	ldr	r0, [pc, #84]	; (8003e10 <aiValidationProcess+0x1d0>)
 8003dbc:	f7fe ff88 	bl	8002cd0 <lc_print>
    LC_PRINT("# and a serial COM interface should be used\r\n");
 8003dc0:	4814      	ldr	r0, [pc, #80]	; (8003e14 <aiValidationProcess+0x1d4>)
 8003dc2:	f7fe ff85 	bl	8002cd0 <lc_print>
    LC_PRINT("# (i.e. Python ai_runner module). Protocol version = %d.%d\r\n",
 8003dc6:	4814      	ldr	r0, [pc, #80]	; (8003e18 <aiValidationProcess+0x1d8>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	2103      	movs	r1, #3
 8003dcc:	f7fe ff80 	bl	8002cd0 <lc_print>
  aiPbMgrInit(pbCmdFuncTab);
 8003dd0:	4812      	ldr	r0, [pc, #72]	; (8003e1c <aiValidationProcess+0x1dc>)
 8003dd2:	f7fe fb6f 	bl	80024b4 <aiPbMgrInit>
    r = aiPbMgrWaitAndProcess();
 8003dd6:	f7fe fc13 	bl	8002600 <aiPbMgrWaitAndProcess>
  } while (r==0);
 8003dda:	4605      	mov	r5, r0
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d0fa      	beq.n	8003dd6 <aiValidationProcess+0x196>
 8003de0:	e76c      	b.n	8003cbc <aiValidationProcess+0x7c>
 8003de2:	bf00      	nop
 8003de4:	20004668 	.word	0x20004668
 8003de8:	0800c8ed 	.word	0x0800c8ed
 8003dec:	0800c924 	.word	0x0800c924
 8003df0:	0800c942 	.word	0x0800c942
 8003df4:	0800c996 	.word	0x0800c996
 8003df8:	0800c955 	.word	0x0800c955
 8003dfc:	0800c970 	.word	0x0800c970
 8003e00:	0800c985 	.word	0x0800c985
 8003e04:	0800c9ac 	.word	0x0800c9ac
 8003e08:	0800c9af 	.word	0x0800c9af
 8003e0c:	0800c9dd 	.word	0x0800c9dd
 8003e10:	0800ca0b 	.word	0x0800ca0b
 8003e14:	0800ca51 	.word	0x0800ca51
 8003e18:	0800ca7f 	.word	0x0800ca7f
 8003e1c:	2000000c 	.word	0x2000000c
 8003e20:	0800c90d 	.word	0x0800c90d
 8003e24:	2000004c 	.word	0x2000004c
 8003e28:	20000048 	.word	0x20000048

08003e2c <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003e2c:	4a08      	ldr	r2, [pc, #32]	; (8003e50 <port_dwt_init_imp+0x24>)
 8003e2e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8003e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e36:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <port_dwt_init_imp+0x28>)
 8003e3c:	4a06      	ldr	r2, [pc, #24]	; (8003e58 <port_dwt_init_imp+0x2c>)
 8003e3e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
#endif
  DWT->CYCCNT = 0;
 8003e42:	2200      	movs	r2, #0
 8003e44:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	f042 0201 	orr.w	r2, r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
}
 8003e4e:	4770      	bx	lr
 8003e50:	e000ed00 	.word	0xe000ed00
 8003e54:	e0001000 	.word	0xe0001000
 8003e58:	c5acce55 	.word	0xc5acce55

08003e5c <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <ai_mnetwork_handle+0x18>)
 8003e5e:	b120      	cbz	r0, 8003e6a <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8003e60:	4298      	cmp	r0, r3
 8003e62:	bf0c      	ite	eq
 8003e64:	4618      	moveq	r0, r3
 8003e66:	2000      	movne	r0, #0
 8003e68:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8003e6a:	681a      	ldr	r2, [r3, #0]
            return inst;
 8003e6c:	2a00      	cmp	r2, #0
 8003e6e:	bf08      	it	eq
 8003e70:	4618      	moveq	r0, r3
}
 8003e72:	4770      	bx	lr
 8003e74:	20004754 	.word	0x20004754

08003e78 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8003e78:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	b160      	cbz	r0, 8003e98 <ai_mnetwork_is_valid.constprop.0+0x20>
 8003e7e:	f7fc fa2f 	bl	80002e0 <strlen>
 8003e82:	280e      	cmp	r0, #14
 8003e84:	4602      	mov	r2, r0
 8003e86:	d107      	bne.n	8003e98 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4804      	ldr	r0, [pc, #16]	; (8003e9c <ai_mnetwork_is_valid.constprop.0+0x24>)
 8003e8c:	f006 fabf 	bl	800a40e <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003e90:	fab0 f080 	clz	r0, r0
 8003e94:	0940      	lsrs	r0, r0, #5
}
 8003e96:	bd10      	pop	{r4, pc}
    return false;
 8003e98:	2000      	movs	r0, #0
 8003e9a:	e7fc      	b.n	8003e96 <ai_mnetwork_is_valid.constprop.0+0x1e>
 8003e9c:	0800cb6c 	.word	0x0800cb6c

08003ea0 <MX_X_CUBE_AI_Init>:
{
 8003ea0:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8003ea2:	f000 fd81 	bl	80049a8 <MX_USART3_UART_Init>
}
 8003ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 8003eaa:	f7ff be83 	b.w	8003bb4 <aiValidationInit>

08003eae <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 8003eae:	f7ff bec7 	b.w	8003c40 <aiValidationProcess>
	...

08003eb4 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8003eb4:	b510      	push	{r4, lr}
 8003eb6:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8003eb8:	f7ff ffde 	bl	8003e78 <ai_mnetwork_is_valid.constprop.0>
 8003ebc:	b920      	cbnz	r0, 8003ec8 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 8003ebe:	2c00      	cmp	r4, #0
 8003ec0:	4802      	ldr	r0, [pc, #8]	; (8003ecc <ai_mnetwork_find+0x18>)
 8003ec2:	bf18      	it	ne
 8003ec4:	2000      	movne	r0, #0
}
 8003ec6:	bd10      	pop	{r4, pc}
            return entry->name;
 8003ec8:	4800      	ldr	r0, [pc, #0]	; (8003ecc <ai_mnetwork_find+0x18>)
 8003eca:	e7fc      	b.n	8003ec6 <ai_mnetwork_find+0x12>
 8003ecc:	0800cb6c 	.word	0x0800cb6c

08003ed0 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8003ed0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ed2:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003ed4:	2000      	movs	r0, #0
{
 8003ed6:	9201      	str	r2, [sp, #4]
 8003ed8:	460d      	mov	r5, r1
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003eda:	f7ff ffbf 	bl	8003e5c <ai_mnetwork_handle>

    if (!inst) {
 8003ede:	4604      	mov	r4, r0
 8003ee0:	b1e0      	cbz	r0, 8003f1c <ai_mnetwork_create+0x4c>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f7ff ffc8 	bl	8003e78 <ai_mnetwork_is_valid.constprop.0>
 8003ee8:	9901      	ldr	r1, [sp, #4]
 8003eea:	b910      	cbnz	r0, 8003ef2 <ai_mnetwork_create+0x22>
 8003eec:	2214      	movs	r2, #20
 8003eee:	2310      	movs	r3, #16
 8003ef0:	e00d      	b.n	8003f0e <ai_mnetwork_create+0x3e>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	f001 fec8 	bl	8005c88 <ai_vww_int8_keras_create>
 8003ef8:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8003efc:	b2c2      	uxtb	r2, r0
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8003efe:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8003f02:	d104      	bne.n	8003f0e <ai_mnetwork_create+0x3e>
        inst->entry = found;
 8003f04:	4906      	ldr	r1, [pc, #24]	; (8003f20 <ai_mnetwork_create+0x50>)
 8003f06:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8003f08:	6829      	ldr	r1, [r5, #0]
 8003f0a:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8003f0c:	602c      	str	r4, [r5, #0]
        return err;
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f362 0007 	bfi	r0, r2, #0, #8
 8003f14:	f363 201f 	bfi	r0, r3, #8, #24
    }

    return err;
}
 8003f18:	b002      	add	sp, #8
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	2231      	movs	r2, #49	; 0x31
 8003f1e:	e7e6      	b.n	8003eee <ai_mnetwork_create+0x1e>
 8003f20:	0800cb7c 	.word	0x0800cb7c

08003f24 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8003f24:	b538      	push	{r3, r4, r5, lr}
 8003f26:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003f28:	f7ff ff98 	bl	8003e5c <ai_mnetwork_handle>
    if (inn) {
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	b158      	cbz	r0, 8003f48 <ai_mnetwork_destroy+0x24>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8003f30:	6803      	ldr	r3, [r0, #0]
 8003f32:	6840      	ldr	r0, [r0, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	4798      	blx	r3
        if (hdl != inn->handle) {
 8003f38:	686b      	ldr	r3, [r5, #4]
 8003f3a:	4283      	cmp	r3, r0
 8003f3c:	d004      	beq.n	8003f48 <ai_mnetwork_destroy+0x24>
        if ((inst) && (&gnetworks[i] == inst)) {
 8003f3e:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <ai_mnetwork_destroy+0x28>)
 8003f40:	2400      	movs	r4, #0
 8003f42:	429d      	cmp	r5, r3
 8003f44:	d100      	bne.n	8003f48 <ai_mnetwork_destroy+0x24>
            gnetworks[i].entry = NULL;
 8003f46:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 8003f48:	4620      	mov	r0, r4
 8003f4a:	bd38      	pop	{r3, r4, r5, pc}
 8003f4c:	20004754 	.word	0x20004754

08003f50 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8003f50:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003f52:	f7ff ff83 	bl	8003e5c <ai_mnetwork_handle>
    if (inn)
 8003f56:	b128      	cbz	r0, 8003f64 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 8003f58:	6802      	ldr	r2, [r0, #0]
 8003f5a:	6840      	ldr	r0, [r0, #4]
 8003f5c:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8003f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 8003f62:	4710      	bx	r2
}
 8003f64:	bd10      	pop	{r4, pc}

08003f66 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8003f66:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003f68:	f7ff ff78 	bl	8003e5c <ai_mnetwork_handle>
    if (inn)
 8003f6c:	b128      	cbz	r0, 8003f7a <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8003f6e:	6803      	ldr	r3, [r0, #0]
 8003f70:	6840      	ldr	r0, [r0, #4]
 8003f72:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8003f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8003f78:	4718      	bx	r3
}
 8003f7a:	f241 0014 	movw	r0, #4116	; 0x1014
 8003f7e:	bd10      	pop	{r4, pc}

08003f80 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8003f80:	b530      	push	{r4, r5, lr}
 8003f82:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003f84:	f7ff ff6a 	bl	8003e5c <ai_mnetwork_handle>
    if (inn) {
 8003f88:	4604      	mov	r4, r0
 8003f8a:	b168      	cbz	r0, 8003fa8 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8003f8c:	6803      	ldr	r3, [r0, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003f8e:	2500      	movs	r5, #0
        inn->entry->ai_data_params_get(&par);
 8003f90:	4668      	mov	r0, sp
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003f96:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003f9a:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003f9c:	42aa      	cmp	r2, r5
 8003f9e:	dc05      	bgt.n	8003fac <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	4669      	mov	r1, sp
 8003fa4:	6860      	ldr	r0, [r4, #4]
 8003fa6:	4798      	blx	r3
    }
    else
        return false;
}
 8003fa8:	b00f      	add	sp, #60	; 0x3c
 8003faa:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	4629      	mov	r1, r5
 8003fb0:	a803      	add	r0, sp, #12
 8003fb2:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003fb6:	3501      	adds	r5, #1
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003fb8:	f002 fbbe 	bl	8006738 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003fbc:	e7eb      	b.n	8003f96 <ai_mnetwork_init+0x16>

08003fbe <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8003fbe:	b513      	push	{r0, r1, r4, lr}
 8003fc0:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003fc2:	f7ff ff4b 	bl	8003e5c <ai_mnetwork_handle>
    if (inn)
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	b140      	cbz	r0, 8003fdc <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 8003fca:	6800      	ldr	r0, [r0, #0]
 8003fcc:	9a01      	ldr	r2, [sp, #4]
 8003fce:	6a04      	ldr	r4, [r0, #32]
 8003fd0:	6858      	ldr	r0, [r3, #4]
 8003fd2:	4623      	mov	r3, r4
    else
        return 0;
}
 8003fd4:	b002      	add	sp, #8
 8003fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 8003fda:	4718      	bx	r3
}
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd10      	pop	{r4, pc}

08003fe0 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003fe4:	f7ff ff3a 	bl	8003e5c <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8003fe8:	b188      	cbz	r0, 800400e <ai_mnetwork_get_private_handle+0x2e>
 8003fea:	b181      	cbz	r1, 800400e <ai_mnetwork_get_private_handle+0x2e>
 8003fec:	b17d      	cbz	r5, 800400e <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8003fee:	6843      	ldr	r3, [r0, #4]
         *pparams = inn->params;
 8003ff0:	f100 0408 	add.w	r4, r0, #8
         *phandle = inn->handle;
 8003ff4:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8003ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004002:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004006:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 800400a:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 800400c:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 800400e:	f04f 30ff 	mov.w	r0, #4294967295
 8004012:	e7fb      	b.n	800400c <ai_mnetwork_get_private_handle+0x2c>

08004014 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8004014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8004018:	6896      	ldr	r6, [r2, #8]
{
 800401a:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 800401c:	2500      	movs	r5, #0
{
 800401e:	4614      	mov	r4, r2
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004020:	f016 0304 	ands.w	r3, r6, #4
  buf[idx--] = 0;
 8004024:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8004028:	d02a      	beq.n	8004080 <_write_number+0x6c>
    if ((int64_t)number < 0) {
 800402a:	42a9      	cmp	r1, r5
 800402c:	da08      	bge.n	8004040 <_write_number+0x2c>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 800402e:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8004030:	4240      	negs	r0, r0
      sign_neg = '-';
 8004032:	f04f 052d 	mov.w	r5, #45	; 0x2d
      specifier->width -= 1;
 8004036:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 800403a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	f016 0f08 	tst.w	r6, #8
 8004044:	f10d 093f 	add.w	r9, sp, #63	; 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004048:	f04f 073e 	mov.w	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 800404c:	f006 0a10 	and.w	sl, r6, #16
 8004050:	bf14      	ite	ne
 8004052:	f04f 0841 	movne.w	r8, #65	; 0x41
 8004056:	f04f 0861 	moveq.w	r8, #97	; 0x61
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800405a:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 800405e:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8004062:	f1ba 0f00 	cmp.w	sl, #0
 8004066:	d033      	beq.n	80040d0 <_write_number+0xbc>
      chr = number & 0x0F;
 8004068:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 800406c:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800406e:	2b09      	cmp	r3, #9
      t = number >> 4;
 8004070:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8004074:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004078:	d906      	bls.n	8004088 <_write_number+0x74>
 800407a:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e004      	b.n	800408a <_write_number+0x76>
  char sign_neg = 0;
 8004080:	461d      	mov	r5, r3
 8004082:	e7dd      	b.n	8004040 <_write_number+0x2c>
    }
    number = t;
    buf[idx--] = chr;
 8004084:	4617      	mov	r7, r2
 8004086:	e7ea      	b.n	800405e <_write_number+0x4a>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004088:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 800408a:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 800408e:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8004092:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 8004096:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 800409a:	d1f3      	bne.n	8004084 <_write_number+0x70>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 800409c:	f006 0101 	and.w	r1, r6, #1
 80040a0:	b155      	cbz	r5, 80040b8 <_write_number+0xa4>
 80040a2:	b949      	cbnz	r1, 80040b8 <_write_number+0xa4>
    buf[idx--] = sign_neg;
 80040a4:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 80040a8:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 80040ac:	eb0d 0203 	add.w	r2, sp, r3
 80040b0:	232d      	movs	r3, #45	; 0x2d
 80040b2:	f802 3c40 	strb.w	r3, [r2, #-64]
 80040b6:	1eba      	subs	r2, r7, #2
 80040b8:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	f006 0602 	and.w	r6, r6, #2
 80040c0:	bf14      	ite	ne
 80040c2:	2130      	movne	r1, #48	; 0x30
 80040c4:	2120      	moveq	r1, #32
 80040c6:	455b      	cmp	r3, fp
 80040c8:	dd13      	ble.n	80040f2 <_write_number+0xde>
 80040ca:	b166      	cbz	r6, 80040e6 <_write_number+0xd2>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 80040cc:	b9a5      	cbnz	r5, 80040f8 <_write_number+0xe4>
 80040ce:	e01c      	b.n	800410a <_write_number+0xf6>
      t = number / 10;
 80040d0:	220a      	movs	r2, #10
 80040d2:	2300      	movs	r3, #0
 80040d4:	f7fc fa1a 	bl	800050c <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 80040d8:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 80040dc:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80040e0:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80040e4:	e7ca      	b.n	800407c <_write_number+0x68>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 80040e6:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 80040ea:	f10b 0b01 	add.w	fp, fp, #1
 80040ee:	3a01      	subs	r2, #1
 80040f0:	e7e9      	b.n	80040c6 <_write_number+0xb2>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 80040f2:	b155      	cbz	r5, 800410a <_write_number+0xf6>
 80040f4:	455b      	cmp	r3, fp
 80040f6:	d108      	bne.n	800410a <_write_number+0xf6>
    buf[idx--] = sign_neg;
 80040f8:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80040fc:	212d      	movs	r1, #45	; 0x2d
    count++;
 80040fe:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8004102:	3a01      	subs	r2, #1
 8004104:	446b      	add	r3, sp
 8004106:	f803 1c40 	strb.w	r1, [r3, #-64]
  }

  idx++;


  for(int i = 0; i < count; i++) {
 800410a:	eb0d 0602 	add.w	r6, sp, r2
 800410e:	2500      	movs	r5, #0
 8004110:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004112:	68e3      	ldr	r3, [r4, #12]
 8004114:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004118:	6920      	ldr	r0, [r4, #16]
 800411a:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 800411c:	45ab      	cmp	fp, r5
 800411e:	d1f7      	bne.n	8004110 <_write_number+0xfc>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8004120:	68a3      	ldr	r3, [r4, #8]
 8004122:	079b      	lsls	r3, r3, #30
 8004124:	d408      	bmi.n	8004138 <_write_number+0x124>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8004126:	4628      	mov	r0, r5
 8004128:	b011      	add	sp, #68	; 0x44
 800412a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 800412e:	3501      	adds	r5, #1
 8004130:	68e3      	ldr	r3, [r4, #12]
 8004132:	2120      	movs	r1, #32
 8004134:	6920      	ldr	r0, [r4, #16]
 8004136:	4798      	blx	r3
    while (count < specifier->width) {
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	42ab      	cmp	r3, r5
 800413c:	dcf7      	bgt.n	800412e <_write_number+0x11a>
 800413e:	e7f2      	b.n	8004126 <_write_number+0x112>

08004140 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8004140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004144:	461c      	mov	r4, r3
 8004146:	4606      	mov	r6, r0
  char c, t;
  int count = 0;
 8004148:	2300      	movs	r3, #0
{
 800414a:	460f      	mov	r7, r1
 800414c:	ed2d 8b02 	vpush	{d8}
 8004150:	b09b      	sub	sp, #108	; 0x6c
  int count = 0;
 8004152:	9301      	str	r3, [sp, #4]
  return *(*fmtP)++;
 8004154:	4613      	mov	r3, r2
 8004156:	f813 1b01 	ldrb.w	r1, [r3], #1
 800415a:	9302      	str	r3, [sp, #8]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 800415c:	b929      	cbnz	r1, 800416a <vlc_print+0x2a>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 800415e:	9801      	ldr	r0, [sp, #4]
 8004160:	b01b      	add	sp, #108	; 0x6c
 8004162:	ecbd 8b02 	vpop	{d8}
 8004166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 800416a:	290a      	cmp	r1, #10
 800416c:	d104      	bne.n	8004178 <vlc_print+0x38>
      putc_fct(user, c);
 800416e:	4638      	mov	r0, r7
 8004170:	47b0      	blx	r6
      count++;
 8004172:	9b01      	ldr	r3, [sp, #4]
 8004174:	3301      	adds	r3, #1
 8004176:	e11d      	b.n	80043b4 <vlc_print+0x274>
    else if (c == '%')
 8004178:	2925      	cmp	r1, #37	; 0x25
 800417a:	d1f8      	bne.n	800416e <vlc_print+0x2e>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 800417c:	2300      	movs	r3, #0
 800417e:	f04f 0a0a 	mov.w	sl, #10
 8004182:	9709      	str	r7, [sp, #36]	; 0x24
 8004184:	469c      	mov	ip, r3
 8004186:	469e      	mov	lr, r3
 8004188:	461a      	mov	r2, r3
 800418a:	4698      	mov	r8, r3
 800418c:	4618      	mov	r0, r3
      bool has_precision = false;
 800418e:	4699      	mov	r9, r3
      int long_type = 0;
 8004190:	9303      	str	r3, [sp, #12]
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004192:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004196:	e9cd 3607 	strd	r3, r6, [sp, #28]
  return *(*fmtP)++;
 800419a:	9d02      	ldr	r5, [sp, #8]
 800419c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80041a0:	9502      	str	r5, [sp, #8]
        if (!c)
 80041a2:	b321      	cbz	r1, 80041ee <vlc_print+0xae>
        else if (c == '0')
 80041a4:	2939      	cmp	r1, #57	; 0x39
 80041a6:	d814      	bhi.n	80041d2 <vlc_print+0x92>
 80041a8:	292c      	cmp	r1, #44	; 0x2c
 80041aa:	d91d      	bls.n	80041e8 <vlc_print+0xa8>
 80041ac:	f1a1 052d 	sub.w	r5, r1, #45	; 0x2d
 80041b0:	2d0c      	cmp	r5, #12
 80041b2:	d810      	bhi.n	80041d6 <vlc_print+0x96>
 80041b4:	e8df f015 	tbh	[pc, r5, lsl #1]
 80041b8:	02210048 	.word	0x02210048
 80041bc:	0033000f 	.word	0x0033000f
 80041c0:	004b004b 	.word	0x004b004b
 80041c4:	004b004b 	.word	0x004b004b
 80041c8:	004b004b 	.word	0x004b004b
 80041cc:	004b004b 	.word	0x004b004b
 80041d0:	004b      	.short	0x004b
 80041d2:	296c      	cmp	r1, #108	; 0x6c
 80041d4:	d045      	beq.n	8004262 <vlc_print+0x122>
          switch(c)
 80041d6:	2978      	cmp	r1, #120	; 0x78
 80041d8:	d809      	bhi.n	80041ee <vlc_print+0xae>
 80041da:	2962      	cmp	r1, #98	; 0x62
 80041dc:	d845      	bhi.n	800426a <vlc_print+0x12a>
 80041de:	2946      	cmp	r1, #70	; 0x46
 80041e0:	f000 8136 	beq.w	8004450 <vlc_print+0x310>
 80041e4:	2958      	cmp	r1, #88	; 0x58
 80041e6:	d073      	beq.n	80042d0 <vlc_print+0x190>
 80041e8:	2925      	cmp	r1, #37	; 0x25
 80041ea:	f000 8099 	beq.w	8004320 <vlc_print+0x1e0>
 80041ee:	b10b      	cbz	r3, 80041f4 <vlc_print+0xb4>
 80041f0:	f8cd c01c 	str.w	ip, [sp, #28]
 80041f4:	f1be 0f00 	cmp.w	lr, #0
 80041f8:	d000      	beq.n	80041fc <vlc_print+0xbc>
 80041fa:	9206      	str	r2, [sp, #24]
 80041fc:	f1b8 0f00 	cmp.w	r8, #0
 8004200:	d000      	beq.n	8004204 <vlc_print+0xc4>
 8004202:	9005      	str	r0, [sp, #20]
        putc_fct(user, '<');
 8004204:	213c      	movs	r1, #60	; 0x3c
 8004206:	4638      	mov	r0, r7
 8004208:	47b0      	blx	r6
        putc_fct(user, '!');
 800420a:	2121      	movs	r1, #33	; 0x21
 800420c:	4638      	mov	r0, r7
        va_arg(vl, signed long);
 800420e:	3404      	adds	r4, #4
        putc_fct(user, '!');
 8004210:	47b0      	blx	r6
        putc_fct(user, '>');
 8004212:	213e      	movs	r1, #62	; 0x3e
 8004214:	4638      	mov	r0, r7
 8004216:	47b0      	blx	r6
        count += 3;
 8004218:	9b01      	ldr	r3, [sp, #4]
 800421a:	3303      	adds	r3, #3
 800421c:	e0ca      	b.n	80043b4 <vlc_print+0x274>
          if (!specifier.width && !specifier.precision) {
 800421e:	ea50 0102 	orrs.w	r1, r0, r2
 8004222:	d105      	bne.n	8004230 <vlc_print+0xf0>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004224:	f04c 0c01 	orr.w	ip, ip, #1
 8004228:	460a      	mov	r2, r1
 800422a:	4608      	mov	r0, r1
 800422c:	2301      	movs	r3, #1
 800422e:	e7b4      	b.n	800419a <vlc_print+0x5a>
          } else if (has_precision) {
 8004230:	f1b9 0f00 	cmp.w	r9, #0
 8004234:	d003      	beq.n	800423e <vlc_print+0xfe>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004236:	fb0a f202 	mul.w	r2, sl, r2
 800423a:	46ce      	mov	lr, r9
 800423c:	e7ad      	b.n	800419a <vlc_print+0x5a>
            specifier.width = specifier.width * 10 + (c - '0');
 800423e:	fb0a f000 	mul.w	r0, sl, r0
            specifier.width = specifier.width * 10 + (c - '0');
 8004242:	f04f 0801 	mov.w	r8, #1
 8004246:	e7a8      	b.n	800419a <vlc_print+0x5a>
          specifier.flags |= FLAG_NEG_PAD;
 8004248:	f04c 0c02 	orr.w	ip, ip, #2
 800424c:	e7ee      	b.n	800422c <vlc_print+0xec>
            specifier.precision = specifier.precision * 10 + (c - '0');
 800424e:	3930      	subs	r1, #48	; 0x30
          if (has_precision) {
 8004250:	f1b9 0f00 	cmp.w	r9, #0
 8004254:	d002      	beq.n	800425c <vlc_print+0x11c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8004256:	fb0a 1202 	mla	r2, sl, r2, r1
 800425a:	e7ee      	b.n	800423a <vlc_print+0xfa>
            specifier.width = specifier.width * 10 + (c - '0');
 800425c:	fb0a 1000 	mla	r0, sl, r0, r1
 8004260:	e7ef      	b.n	8004242 <vlc_print+0x102>
          long_type += 1;
 8004262:	9903      	ldr	r1, [sp, #12]
 8004264:	3101      	adds	r1, #1
 8004266:	9103      	str	r1, [sp, #12]
 8004268:	e797      	b.n	800419a <vlc_print+0x5a>
          switch(c)
 800426a:	3963      	subs	r1, #99	; 0x63
 800426c:	2915      	cmp	r1, #21
 800426e:	d8be      	bhi.n	80041ee <vlc_print+0xae>
 8004270:	f20f 0904 	addw	r9, pc, #4
 8004274:	f859 f021 	ldr.w	pc, [r9, r1, lsl #2]
 8004278:	0800433b 	.word	0x0800433b
 800427c:	08004419 	.word	0x08004419
 8004280:	080041ef 	.word	0x080041ef
 8004284:	08004451 	.word	0x08004451
 8004288:	080041ef 	.word	0x080041ef
 800428c:	080041ef 	.word	0x080041ef
 8004290:	08004419 	.word	0x08004419
 8004294:	080041ef 	.word	0x080041ef
 8004298:	080041ef 	.word	0x080041ef
 800429c:	080041ef 	.word	0x080041ef
 80042a0:	080041ef 	.word	0x080041ef
 80042a4:	080041ef 	.word	0x080041ef
 80042a8:	080041ef 	.word	0x080041ef
 80042ac:	080043fd 	.word	0x080043fd
 80042b0:	080041ef 	.word	0x080041ef
 80042b4:	080041ef 	.word	0x080041ef
 80042b8:	08004357 	.word	0x08004357
 80042bc:	080041ef 	.word	0x080041ef
 80042c0:	08004601 	.word	0x08004601
 80042c4:	080041ef 	.word	0x080041ef
 80042c8:	080041ef 	.word	0x080041ef
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	b10b      	cbz	r3, 80042d6 <vlc_print+0x196>
 80042d2:	f8cd c01c 	str.w	ip, [sp, #28]
 80042d6:	f1be 0f00 	cmp.w	lr, #0
 80042da:	d000      	beq.n	80042de <vlc_print+0x19e>
 80042dc:	9206      	str	r2, [sp, #24]
 80042de:	f1b8 0f00 	cmp.w	r8, #0
 80042e2:	d000      	beq.n	80042e6 <vlc_print+0x1a6>
 80042e4:	9005      	str	r0, [sp, #20]
            specifier.flags |= FLAG_CAPS;
 80042e6:	9b07      	ldr	r3, [sp, #28]
 80042e8:	f043 0308 	orr.w	r3, r3, #8
 80042ec:	9307      	str	r3, [sp, #28]
 80042ee:	e00a      	b.n	8004306 <vlc_print+0x1c6>
 80042f0:	b10b      	cbz	r3, 80042f6 <vlc_print+0x1b6>
 80042f2:	f8cd c01c 	str.w	ip, [sp, #28]
 80042f6:	f1be 0f00 	cmp.w	lr, #0
 80042fa:	d000      	beq.n	80042fe <vlc_print+0x1be>
 80042fc:	9206      	str	r2, [sp, #24]
 80042fe:	f1b8 0f00 	cmp.w	r8, #0
 8004302:	d000      	beq.n	8004306 <vlc_print+0x1c6>
 8004304:	9005      	str	r0, [sp, #20]
            specifier.flags |= FLAG_HEX;
 8004306:	9b07      	ldr	r3, [sp, #28]
            count += _write_number(val, &specifier);
 8004308:	aa05      	add	r2, sp, #20
 800430a:	f854 0b04 	ldr.w	r0, [r4], #4
 800430e:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8004310:	f043 0310 	orr.w	r3, r3, #16
 8004314:	9307      	str	r3, [sp, #28]
            count += _write_number(val, &specifier);
 8004316:	f7ff fe7d 	bl	8004014 <_write_number>
 800431a:	9b01      	ldr	r3, [sp, #4]
 800431c:	4403      	add	r3, r0
 800431e:	e049      	b.n	80043b4 <vlc_print+0x274>
 8004320:	b10b      	cbz	r3, 8004326 <vlc_print+0x1e6>
 8004322:	f8cd c01c 	str.w	ip, [sp, #28]
 8004326:	f1be 0f00 	cmp.w	lr, #0
 800432a:	d000      	beq.n	800432e <vlc_print+0x1ee>
 800432c:	9206      	str	r2, [sp, #24]
 800432e:	f1b8 0f00 	cmp.w	r8, #0
 8004332:	d000      	beq.n	8004336 <vlc_print+0x1f6>
 8004334:	9005      	str	r0, [sp, #20]
            putc_fct(user, c);
 8004336:	2125      	movs	r1, #37	; 0x25
 8004338:	e719      	b.n	800416e <vlc_print+0x2e>
 800433a:	b10b      	cbz	r3, 8004340 <vlc_print+0x200>
 800433c:	f8cd c01c 	str.w	ip, [sp, #28]
 8004340:	f1be 0f00 	cmp.w	lr, #0
 8004344:	d000      	beq.n	8004348 <vlc_print+0x208>
 8004346:	9206      	str	r2, [sp, #24]
 8004348:	f1b8 0f00 	cmp.w	r8, #0
 800434c:	d000      	beq.n	8004350 <vlc_print+0x210>
 800434e:	9005      	str	r0, [sp, #20]
            putc_fct(user, t);
 8004350:	f814 1b04 	ldrb.w	r1, [r4], #4
 8004354:	e70b      	b.n	800416e <vlc_print+0x2e>
 8004356:	b10b      	cbz	r3, 800435c <vlc_print+0x21c>
 8004358:	f8cd c01c 	str.w	ip, [sp, #28]
 800435c:	f1be 0f00 	cmp.w	lr, #0
 8004360:	d000      	beq.n	8004364 <vlc_print+0x224>
 8004362:	9206      	str	r2, [sp, #24]
 8004364:	f1b8 0f00 	cmp.w	r8, #0
 8004368:	d000      	beq.n	800436c <vlc_print+0x22c>
 800436a:	9005      	str	r0, [sp, #20]
            if (!str) str = "(null)";
 800436c:	4bac      	ldr	r3, [pc, #688]	; (8004620 <vlc_print+0x4e0>)
            str = va_arg(vl, char*);
 800436e:	f854 bb04 	ldr.w	fp, [r4], #4
            if (!str) str = "(null)";
 8004372:	f1bb 0f00 	cmp.w	fp, #0
 8004376:	bf08      	it	eq
 8004378:	469b      	moveq	fp, r3
  int len = strlen(str);
 800437a:	4658      	mov	r0, fp
 800437c:	f7fb ffb0 	bl	80002e0 <strlen>
  if (specifier->precision) {
 8004380:	9b06      	ldr	r3, [sp, #24]
  int len = strlen(str);
 8004382:	4681      	mov	r9, r0
  if (specifier->precision) {
 8004384:	b113      	cbz	r3, 800438c <vlc_print+0x24c>
    len = (len > specifier->precision)?specifier->precision:len;
 8004386:	4298      	cmp	r0, r3
 8004388:	bfa8      	it	ge
 800438a:	4699      	movge	r9, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 800438c:	9b07      	ldr	r3, [sp, #28]
 800438e:	f013 0a02 	ands.w	sl, r3, #2
 8004392:	d01c      	beq.n	80043ce <vlc_print+0x28e>
  int count = 0;
 8004394:	f04f 0800 	mov.w	r8, #0
 8004398:	465b      	mov	r3, fp
  for (int i = 0; i < len; i++) {
 800439a:	eba3 020b 	sub.w	r2, r3, fp
 800439e:	4591      	cmp	r9, r2
 80043a0:	dc17      	bgt.n	80043d2 <vlc_print+0x292>
 80043a2:	f1b9 0f00 	cmp.w	r9, #0
 80043a6:	bfa8      	it	ge
 80043a8:	44c8      	addge	r8, r9
  if (specifier->flags & FLAG_NEG_PAD) {
 80043aa:	f1ba 0f00 	cmp.w	sl, #0
 80043ae:	d122      	bne.n	80043f6 <vlc_print+0x2b6>
            count += _write_string(str, &specifier);
 80043b0:	9b01      	ldr	r3, [sp, #4]
 80043b2:	4443      	add	r3, r8
      count++;
 80043b4:	9301      	str	r3, [sp, #4]
 80043b6:	e049      	b.n	800444c <vlc_print+0x30c>
      _WRITE_C(' ');
 80043b8:	f108 0801 	add.w	r8, r8, #1
 80043bc:	2120      	movs	r1, #32
 80043be:	4638      	mov	r0, r7
 80043c0:	47b0      	blx	r6
    for(int i = len; i < specifier->width; i++) {
 80043c2:	eb09 0308 	add.w	r3, r9, r8
 80043c6:	9a05      	ldr	r2, [sp, #20]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	dcf5      	bgt.n	80043b8 <vlc_print+0x278>
 80043cc:	e7e4      	b.n	8004398 <vlc_print+0x258>
  int count = 0;
 80043ce:	46d0      	mov	r8, sl
 80043d0:	e7f7      	b.n	80043c2 <vlc_print+0x282>
    _WRITE_C(*str++);
 80043d2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80043d6:	4638      	mov	r0, r7
 80043d8:	9303      	str	r3, [sp, #12]
 80043da:	47b0      	blx	r6
 80043dc:	9b03      	ldr	r3, [sp, #12]
  for (int i = 0; i < len; i++) {
 80043de:	e7dc      	b.n	800439a <vlc_print+0x25a>
      _WRITE_C(' ');
 80043e0:	f108 0801 	add.w	r8, r8, #1
 80043e4:	2120      	movs	r1, #32
 80043e6:	4638      	mov	r0, r7
 80043e8:	47b0      	blx	r6
    for(int i = len; i < specifier->width; i++) {
 80043ea:	eb09 0308 	add.w	r3, r9, r8
 80043ee:	9a05      	ldr	r2, [sp, #20]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	dcf5      	bgt.n	80043e0 <vlc_print+0x2a0>
 80043f4:	e7dc      	b.n	80043b0 <vlc_print+0x270>
 80043f6:	eba9 0908 	sub.w	r9, r9, r8
 80043fa:	e7f6      	b.n	80043ea <vlc_print+0x2aa>
 80043fc:	b10b      	cbz	r3, 8004402 <vlc_print+0x2c2>
 80043fe:	f8cd c01c 	str.w	ip, [sp, #28]
 8004402:	f1be 0f00 	cmp.w	lr, #0
 8004406:	d000      	beq.n	800440a <vlc_print+0x2ca>
 8004408:	9206      	str	r2, [sp, #24]
            specifier.flags |= FLAG_ZERO_EXTEND;
 800440a:	9b07      	ldr	r3, [sp, #28]
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	9307      	str	r3, [sp, #28]
            specifier.width = 8;
 8004412:	2308      	movs	r3, #8
 8004414:	9305      	str	r3, [sp, #20]
 8004416:	e766      	b.n	80042e6 <vlc_print+0x1a6>
 8004418:	b10b      	cbz	r3, 800441e <vlc_print+0x2de>
 800441a:	f8cd c01c 	str.w	ip, [sp, #28]
 800441e:	f1be 0f00 	cmp.w	lr, #0
 8004422:	d000      	beq.n	8004426 <vlc_print+0x2e6>
 8004424:	9206      	str	r2, [sp, #24]
 8004426:	f1b8 0f00 	cmp.w	r8, #0
 800442a:	d000      	beq.n	800442e <vlc_print+0x2ee>
 800442c:	9005      	str	r0, [sp, #20]
            specifier.flags |= FLAG_IS_SIGNED;
 800442e:	9b07      	ldr	r3, [sp, #28]
            val = va_arg(vl, unsigned int);
 8004430:	f104 0804 	add.w	r8, r4, #4
            specifier.flags |= FLAG_IS_SIGNED;
 8004434:	f043 0304 	orr.w	r3, r3, #4
 8004438:	9307      	str	r3, [sp, #28]
                val = va_arg(vl, signed int);
 800443a:	6820      	ldr	r0, [r4, #0]
 800443c:	17c1      	asrs	r1, r0, #31
            count += _write_number(val, &specifier);
 800443e:	aa05      	add	r2, sp, #20
            break;
 8004440:	4644      	mov	r4, r8
            count += _write_number(val, &specifier);
 8004442:	f7ff fde7 	bl	8004014 <_write_number>
 8004446:	9b01      	ldr	r3, [sp, #4]
 8004448:	4403      	add	r3, r0
 800444a:	9301      	str	r3, [sp, #4]
            break;
 800444c:	9a02      	ldr	r2, [sp, #8]
 800444e:	e681      	b.n	8004154 <vlc_print+0x14>
 8004450:	b10b      	cbz	r3, 8004456 <vlc_print+0x316>
 8004452:	f8cd c01c 	str.w	ip, [sp, #28]
 8004456:	f1be 0f00 	cmp.w	lr, #0
 800445a:	d000      	beq.n	800445e <vlc_print+0x31e>
 800445c:	9206      	str	r2, [sp, #24]
 800445e:	f1b8 0f00 	cmp.w	r8, #0
 8004462:	d000      	beq.n	8004466 <vlc_print+0x326>
 8004464:	9005      	str	r0, [sp, #20]
            dbl = va_arg(vl, double);
 8004466:	3407      	adds	r4, #7
            if (specifier.precision == 0)
 8004468:	9b06      	ldr	r3, [sp, #24]
            dbl = va_arg(vl, double);
 800446a:	f024 0407 	bic.w	r4, r4, #7
 800446e:	ecb4 8b02 	vldmia	r4!, {d8}
            if (specifier.precision == 0)
 8004472:	b90b      	cbnz	r3, 8004478 <vlc_print+0x338>
              specifier.precision = 6;
 8004474:	2306      	movs	r3, #6
 8004476:	9306      	str	r3, [sp, #24]
  double mul = 1.0;
 8004478:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
  for (int i=0;i <specifier->precision; i++)
 800447c:	f8dd 8018 	ldr.w	r8, [sp, #24]
    mul *= 10;
 8004480:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
  for (int i=0;i <specifier->precision; i++)
 8004484:	2300      	movs	r3, #0
 8004486:	4543      	cmp	r3, r8
 8004488:	f2c0 80ab 	blt.w	80045e2 <vlc_print+0x4a2>
  if (is_signed)
 800448c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8004490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004494:	f140 80a9 	bpl.w	80045ea <vlc_print+0x4aa>
    number = -number;
 8004498:	eeb1 5b48 	vneg.f64	d5, d8
  number += (half_ / mul);
 800449c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
  uint32_t count = 0;
 80044a0:	f04f 0900 	mov.w	r9, #0
  uint32_t idx = sizeof(buf) - 1;
 80044a4:	f04f 0a3f 	mov.w	sl, #63	; 0x3f
  number += (half_ / mul);
 80044a8:	ee84 6b07 	vdiv.f64	d6, d4, d7
 80044ac:	ee36 6b05 	vadd.f64	d6, d6, d5
  val = (uint64_t)(number * mul);
 80044b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80044b4:	ec51 0b17 	vmov	r0, r1, d7
 80044b8:	f7fc f842 	bl	8000540 <__aeabi_d2ulz>
 80044bc:	4602      	mov	r2, r0
    uint64_t t = val / 10;
 80044be:	4693      	mov	fp, r2
 80044c0:	2300      	movs	r3, #0
 80044c2:	220a      	movs	r2, #10
 80044c4:	460d      	mov	r5, r1
 80044c6:	4658      	mov	r0, fp
 80044c8:	f7fc f820 	bl	800050c <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 80044cc:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
 80044d0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    uint64_t t = val / 10;
 80044d4:	4602      	mov	r2, r0
    buf[idx--] = chr;
 80044d6:	f10a 3cff 	add.w	ip, sl, #4294967295
    chr = (val - t * 10) + '0';
 80044da:	ebae 0043 	sub.w	r0, lr, r3, lsl #1
    buf[idx--] = chr;
 80044de:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 80044e2:	446b      	add	r3, sp
 80044e4:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 80044e8:	f109 0301 	add.w	r3, r9, #1
    if (count == specifier->precision) {
 80044ec:	4598      	cmp	r8, r3
      buf[idx--] = '.';
 80044ee:	bf09      	itett	eq
 80044f0:	f10c 0368 	addeq.w	r3, ip, #104	; 0x68
    count++;
 80044f4:	4699      	movne	r9, r3
      buf[idx--] = '.';
 80044f6:	f1aa 0a02 	subeq.w	sl, sl, #2
      count++;
 80044fa:	f109 0902 	addeq.w	r9, r9, #2
      buf[idx--] = '.';
 80044fe:	bf05      	ittet	eq
 8004500:	eb0d 0c03 	addeq.w	ip, sp, r3
 8004504:	232e      	moveq	r3, #46	; 0x2e
    buf[idx--] = chr;
 8004506:	46e2      	movne	sl, ip
      buf[idx--] = '.';
 8004508:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
  } while (val);
 800450c:	f1bb 0f0a 	cmp.w	fp, #10
 8004510:	462b      	mov	r3, r5
 8004512:	f173 0300 	sbcs.w	r3, r3, #0
 8004516:	d2d2      	bcs.n	80044be <vlc_print+0x37e>
    buf[idx--] = '0';
 8004518:	45c1      	cmp	r9, r8
 800451a:	f1c8 0001 	rsb	r0, r8, #1
 800451e:	eba8 0b09 	sub.w	fp, r8, r9
 8004522:	ab0a      	add	r3, sp, #40	; 0x28
 8004524:	4448      	add	r0, r9
 8004526:	bf84      	itt	hi
 8004528:	2001      	movhi	r0, #1
 800452a:	f04f 0b00 	movhi.w	fp, #0
 800452e:	2130      	movs	r1, #48	; 0x30
 8004530:	4450      	add	r0, sl
 8004532:	465a      	mov	r2, fp
 8004534:	4418      	add	r0, r3
 8004536:	f005 ff62 	bl	800a3fe <memset>
 800453a:	eba9 0308 	sub.w	r3, r9, r8
 800453e:	45c1      	cmp	r9, r8
 8004540:	bf88      	it	hi
 8004542:	2300      	movhi	r3, #0
 8004544:	44d9      	add	r9, fp
  if (count == specifier->precision) {
 8004546:	45c8      	cmp	r8, r9
 8004548:	449a      	add	sl, r3
 800454a:	f108 0801 	add.w	r8, r8, #1
 800454e:	d108      	bne.n	8004562 <vlc_print+0x422>
    buf[idx--] = '.';
 8004550:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 8004554:	222e      	movs	r2, #46	; 0x2e
    count++;
 8004556:	46c1      	mov	r9, r8
    buf[idx--] = '.';
 8004558:	f10a 3aff 	add.w	sl, sl, #4294967295
 800455c:	446b      	add	r3, sp
 800455e:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (count == specifier->precision + 1)
 8004562:	45c8      	cmp	r8, r9
 8004564:	d109      	bne.n	800457a <vlc_print+0x43a>
    buf[idx--] = '0';
 8004566:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 800456a:	2230      	movs	r2, #48	; 0x30
    count++;
 800456c:	f109 0901 	add.w	r9, r9, #1
    buf[idx--] = '0';
 8004570:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004574:	446b      	add	r3, sp
 8004576:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (is_signed) {
 800457a:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800457e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004582:	d509      	bpl.n	8004598 <vlc_print+0x458>
    buf[idx--] = '-';
 8004584:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 8004588:	222d      	movs	r2, #45	; 0x2d
    count++;
 800458a:	f109 0901 	add.w	r9, r9, #1
    buf[idx--] = '-';
 800458e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004592:	446b      	add	r3, sp
 8004594:	f803 2c40 	strb.w	r2, [r3, #-64]
  while (count < specifier->width) {
 8004598:	f8dd 8014 	ldr.w	r8, [sp, #20]
    buf[idx--] = ' ';
 800459c:	ab0a      	add	r3, sp, #40	; 0x28
 800459e:	2120      	movs	r1, #32
 80045a0:	45c1      	cmp	r9, r8
 80045a2:	f1c8 0001 	rsb	r0, r8, #1
 80045a6:	eba8 0b09 	sub.w	fp, r8, r9
 80045aa:	4448      	add	r0, r9
 80045ac:	bf84      	itt	hi
 80045ae:	2001      	movhi	r0, #1
 80045b0:	f04f 0b00 	movhi.w	fp, #0
 80045b4:	4450      	add	r0, sl
 80045b6:	465a      	mov	r2, fp
 80045b8:	44cb      	add	fp, r9
 80045ba:	4418      	add	r0, r3
 80045bc:	f005 ff1f 	bl	800a3fe <memset>
 80045c0:	eba9 0308 	sub.w	r3, r9, r8
 80045c4:	aa0a      	add	r2, sp, #40	; 0x28
 80045c6:	45c1      	cmp	r9, r8
 80045c8:	bf88      	it	hi
 80045ca:	2300      	movhi	r3, #0
  for(int i = 0; i < count; i++) {
 80045cc:	4453      	add	r3, sl
 80045ce:	eb02 0903 	add.w	r9, r2, r3
 80045d2:	445b      	add	r3, fp
 80045d4:	eb03 0802 	add.w	r8, r3, r2
 80045d8:	45c8      	cmp	r8, r9
 80045da:	d109      	bne.n	80045f0 <vlc_print+0x4b0>
            count += _write_double(dbl, &specifier);
 80045dc:	9b01      	ldr	r3, [sp, #4]
 80045de:	445b      	add	r3, fp
 80045e0:	e6e8      	b.n	80043b4 <vlc_print+0x274>
    mul *= 10;
 80045e2:	ee27 7b06 	vmul.f64	d7, d7, d6
  for (int i=0;i <specifier->precision; i++)
 80045e6:	3301      	adds	r3, #1
 80045e8:	e74d      	b.n	8004486 <vlc_print+0x346>
 80045ea:	eeb0 5b48 	vmov.f64	d5, d8
 80045ee:	e755      	b.n	800449c <vlc_print+0x35c>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80045f0:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80045f4:	4638      	mov	r0, r7
 80045f6:	47b0      	blx	r6
  for(int i = 0; i < count; i++) {
 80045f8:	e7ee      	b.n	80045d8 <vlc_print+0x498>
        if (!c)
 80045fa:	f04f 0901 	mov.w	r9, #1
 80045fe:	e5cc      	b.n	800419a <vlc_print+0x5a>
 8004600:	b10b      	cbz	r3, 8004606 <vlc_print+0x4c6>
 8004602:	f8cd c01c 	str.w	ip, [sp, #28]
 8004606:	f1be 0f00 	cmp.w	lr, #0
 800460a:	d000      	beq.n	800460e <vlc_print+0x4ce>
 800460c:	9206      	str	r2, [sp, #24]
 800460e:	f1b8 0f00 	cmp.w	r8, #0
 8004612:	d000      	beq.n	8004616 <vlc_print+0x4d6>
 8004614:	9005      	str	r0, [sp, #20]
            val = va_arg(vl, unsigned int);
 8004616:	46a0      	mov	r8, r4
 8004618:	2100      	movs	r1, #0
 800461a:	f858 0b04 	ldr.w	r0, [r8], #4
 800461e:	e70e      	b.n	800443e <vlc_print+0x2fe>
 8004620:	0800cba8 	.word	0x0800cba8

08004624 <fillFreeRam>:
 8004624:	f3ef 8308 	mrs	r3, MSP
	uint8_t* sp = (uint8_t*)__get_MSP(); // Main Stack Pointer (MSP)


	uint8_t *ptr = &_end + 1;
	while(ptr < sp){
		*ptr = 0x81;
 8004628:	4803      	ldr	r0, [pc, #12]	; (8004638 <fillFreeRam+0x14>)
 800462a:	2181      	movs	r1, #129	; 0x81
 800462c:	1a1a      	subs	r2, r3, r0
 800462e:	4298      	cmp	r0, r3
 8004630:	bf88      	it	hi
 8004632:	2200      	movhi	r2, #0
 8004634:	f005 bee3 	b.w	800a3fe <memset>
 8004638:	20004c51 	.word	0x20004c51

0800463c <returnUnusedRAM>:
 800463c:	f3ef 8208 	mrs	r2, MSP
	extern uint8_t _estack; // End of SRAM (start of the stack)
	uint8_t* sp = (uint8_t*)__get_MSP(); // Main Stack Pointer (MSP)

	uint32_t ret = 0;

	volatile uint8_t *ptr = &_end + 1;
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <returnUnusedRAM+0x1c>)
	uint32_t ret = 0;
 8004642:	2000      	movs	r0, #0
	while(ptr < sp){
 8004644:	4293      	cmp	r3, r2
 8004646:	d300      	bcc.n	800464a <returnUnusedRAM+0xe>
		}
		ptr++;
	}

	return ret;
}
 8004648:	4770      	bx	lr
		if(*ptr ==  0x81){
 800464a:	7819      	ldrb	r1, [r3, #0]
		ptr++;
 800464c:	3301      	adds	r3, #1
		if(*ptr ==  0x81){
 800464e:	2981      	cmp	r1, #129	; 0x81
			ret++;
 8004650:	bf08      	it	eq
 8004652:	3001      	addeq	r0, #1
		ptr++;
 8004654:	e7f6      	b.n	8004644 <returnUnusedRAM+0x8>
 8004656:	bf00      	nop
 8004658:	20004c51 	.word	0x20004c51

0800465c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800465c:	b510      	push	{r4, lr}
 800465e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004660:	2210      	movs	r2, #16
 8004662:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004664:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004666:	a809      	add	r0, sp, #36	; 0x24
 8004668:	f005 fec9 	bl	800a3fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800466c:	2214      	movs	r2, #20
 800466e:	2100      	movs	r1, #0
 8004670:	a802      	add	r0, sp, #8
 8004672:	f005 fec4 	bl	800a3fe <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8004676:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <SystemClock_Config+0x9c>)
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004678:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
 800467a:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 800467c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800467e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004682:	641a      	str	r2, [r3, #64]	; 0x40
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004686:	4a1d      	ldr	r2, [pc, #116]	; (80046fc <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004690:	6813      	ldr	r3, [r2, #0]
 8004692:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLP = 2;
 800469e:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80046a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046a4:	9301      	str	r3, [sp, #4]
 80046a6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80046a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80046ac:	e9cd 1307 	strd	r1, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80046b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046b4:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 216;
 80046b8:	23d8      	movs	r3, #216	; 0xd8
 80046ba:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80046be:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046c0:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLR = 2;
 80046c2:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046c6:	f7fc fad5 	bl	8000c74 <HAL_RCC_OscConfig>
 80046ca:	b108      	cbz	r0, 80046d0 <SystemClock_Config+0x74>
  __ASM volatile ("cpsid i" : : : "memory");
 80046cc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046ce:	e7fe      	b.n	80046ce <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046d0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80046d2:	2280      	movs	r2, #128	; 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80046d4:	2103      	movs	r1, #3
 80046d6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046d8:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80046dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80046e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80046e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046e8:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80046ea:	f7fc fcb3 	bl	8001054 <HAL_RCC_ClockConfig>
 80046ee:	b108      	cbz	r0, 80046f4 <SystemClock_Config+0x98>
 80046f0:	b672      	cpsid	i
  while (1)
 80046f2:	e7fe      	b.n	80046f2 <SystemClock_Config+0x96>
}
 80046f4:	b014      	add	sp, #80	; 0x50
 80046f6:	bd10      	pop	{r4, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40007000 	.word	0x40007000

08004700 <main>:
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b090      	sub	sp, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
 8004704:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004708:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800470c:	4a9b      	ldr	r2, [pc, #620]	; (800497c <main+0x27c>)
 800470e:	2100      	movs	r1, #0
 8004710:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004714:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004718:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800471c:	6953      	ldr	r3, [r2, #20]
 800471e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004722:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004724:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004728:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800472c:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004730:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004734:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004738:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800473c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004740:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8004744:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004746:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800474a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800474c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8004750:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004752:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8004756:	d2f9      	bcs.n	800474c <main+0x4c>
    } while(sets-- != 0U);
 8004758:	3b20      	subs	r3, #32
 800475a:	f113 0f20 	cmn.w	r3, #32
 800475e:	d1f2      	bne.n	8004746 <main+0x46>
 8004760:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004764:	6953      	ldr	r3, [r2, #20]
 8004766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800476a:	6153      	str	r3, [r2, #20]
 800476c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004770:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8004774:	f7fc f88e 	bl	8000894 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	2400      	movs	r4, #0
  SystemClock_Config();
 800477a:	f7ff ff6f 	bl	800465c <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800477e:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  fillFreeRam();
 8004782:	f7ff ff4f 	bl	8004624 <fillFreeRam>
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004786:	2503      	movs	r5, #3
  uint32_t volatile unusedRam = returnUnusedRAM();
 8004788:	f7ff ff58 	bl	800463c <returnUnusedRAM>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800478c:	2214      	movs	r2, #20
 800478e:	2100      	movs	r1, #0
  uint32_t volatile unusedRam = returnUnusedRAM();
 8004790:	9001      	str	r0, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004792:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004794:	2602      	movs	r6, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004796:	f005 fe32 	bl	800a3fe <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800479a:	4b79      	ldr	r3, [pc, #484]	; (8004980 <main+0x280>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800479c:	f244 0181 	movw	r1, #16513	; 0x4081
 80047a0:	4878      	ldr	r0, [pc, #480]	; (8004984 <main+0x284>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047a4:	270b      	movs	r7, #11
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047a6:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047aa:	f042 0204 	orr.w	r2, r2, #4
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30
 80047b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b2:	f002 0204 	and.w	r2, r2, #4
 80047b6:	9202      	str	r2, [sp, #8]
 80047b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
 80047c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80047c8:	9203      	str	r2, [sp, #12]
 80047ca:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
 80047d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d6:	f002 0201 	and.w	r2, r2, #1
 80047da:	9204      	str	r2, [sp, #16]
 80047dc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e0:	f042 0202 	orr.w	r2, r2, #2
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30
 80047e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e8:	f002 0202 	and.w	r2, r2, #2
 80047ec:	9205      	str	r2, [sp, #20]
 80047ee:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047f2:	f042 0208 	orr.w	r2, r2, #8
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
 80047f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047fa:	f002 0208 	and.w	r2, r2, #8
 80047fe:	9206      	str	r2, [sp, #24]
 8004800:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004808:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800480a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	9307      	str	r3, [sp, #28]
 8004814:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004816:	f7fc fa27 	bl	8000c68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800481a:	2200      	movs	r2, #0
 800481c:	2140      	movs	r1, #64	; 0x40
 800481e:	485a      	ldr	r0, [pc, #360]	; (8004988 <main+0x288>)
 8004820:	f7fc fa22 	bl	8000c68 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004824:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004828:	a90b      	add	r1, sp, #44	; 0x2c
 800482a:	4858      	ldr	r0, [pc, #352]	; (800498c <main+0x28c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800482e:	e9cd 930b 	strd	r9, r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004832:	f7fc f937 	bl	8000aa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004836:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004838:	a90b      	add	r1, sp, #44	; 0x2c
 800483a:	4854      	ldr	r0, [pc, #336]	; (800498c <main+0x28c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483e:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004842:	e9cd 570e 	strd	r5, r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004846:	f7fc f92d 	bl	8000aa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800484a:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800484c:	a90b      	add	r1, sp, #44	; 0x2c
 800484e:	4850      	ldr	r0, [pc, #320]	; (8004990 <main+0x290>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004850:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004852:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004856:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800485a:	f7fc f923 	bl	8000aa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800485e:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004862:	a90b      	add	r1, sp, #44	; 0x2c
 8004864:	4847      	ldr	r0, [pc, #284]	; (8004984 <main+0x284>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004866:	e9cd 380b 	strd	r3, r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800486e:	f7fc f919 	bl	8000aa4 <HAL_GPIO_Init>
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004872:	a90b      	add	r1, sp, #44	; 0x2c
 8004874:	4843      	ldr	r0, [pc, #268]	; (8004984 <main+0x284>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004876:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004878:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487c:	e9cd 960b 	strd	r9, r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004880:	f7fc f910 	bl	8000aa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004884:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004886:	a90b      	add	r1, sp, #44	; 0x2c
 8004888:	483f      	ldr	r0, [pc, #252]	; (8004988 <main+0x288>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800488a:	e9cd 380b 	strd	r3, r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800488e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004892:	f7fc f907 	bl	8000aa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004896:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004898:	a90b      	add	r1, sp, #44	; 0x2c
 800489a:	483b      	ldr	r0, [pc, #236]	; (8004988 <main+0x288>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800489e:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80048a2:	f7fc f8ff 	bl	8000aa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80048a6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048aa:	a90b      	add	r1, sp, #44	; 0x2c
 80048ac:	4838      	ldr	r0, [pc, #224]	; (8004990 <main+0x290>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ae:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80048b2:	230a      	movs	r3, #10
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b4:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80048b8:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ba:	f7fc f8f3 	bl	8000aa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80048be:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80048c2:	a90b      	add	r1, sp, #44	; 0x2c
 80048c4:	4832      	ldr	r0, [pc, #200]	; (8004990 <main+0x290>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048c8:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80048cc:	f7fc f8ea 	bl	8000aa4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80048d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80048d4:	a90b      	add	r1, sp, #44	; 0x2c
 80048d6:	482c      	ldr	r0, [pc, #176]	; (8004988 <main+0x288>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80048d8:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048da:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048de:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80048e2:	f7fc f8df 	bl	8000aa4 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80048e6:	482b      	ldr	r0, [pc, #172]	; (8004994 <main+0x294>)
 80048e8:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <main+0x298>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80048ea:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 80048ec:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80048ee:	f8c0 8020 	str.w	r8, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80048f2:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80048f6:	f7fc f875 	bl	80009e4 <HAL_CRC_Init>
 80048fa:	4605      	mov	r5, r0
 80048fc:	b108      	cbz	r0, 8004902 <main+0x202>
  __ASM volatile ("cpsid i" : : : "memory");
 80048fe:	b672      	cpsid	i
  while (1)
 8004900:	e7fe      	b.n	8004900 <main+0x200>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004902:	2210      	movs	r2, #16
 8004904:	4601      	mov	r1, r0
 8004906:	a80b      	add	r0, sp, #44	; 0x2c
  htim3.Instance = TIM3;
 8004908:	4c24      	ldr	r4, [pc, #144]	; (800499c <main+0x29c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800490a:	f005 fd78 	bl	800a3fe <memset>
  htim3.Init.Prescaler = 63999;
 800490e:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 8004912:	4a23      	ldr	r2, [pc, #140]	; (80049a0 <main+0x2a0>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004914:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004916:	950a      	str	r5, [sp, #40]	; 0x28
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004918:	60a5      	str	r5, [r4, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800491a:	61a5      	str	r5, [r4, #24]
  htim3.Init.Prescaler = 63999;
 800491c:	e9c4 2300 	strd	r2, r3, [r4]
  htim3.Init.Period = 65535;
 8004920:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004924:	e9cd 5508 	strd	r5, r5, [sp, #32]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004928:	e9c4 3503 	strd	r3, r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800492c:	f7fd f854 	bl	80019d8 <HAL_TIM_Base_Init>
 8004930:	b108      	cbz	r0, 8004936 <main+0x236>
 8004932:	b672      	cpsid	i
  while (1)
 8004934:	e7fe      	b.n	8004934 <main+0x234>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800493a:	a90b      	add	r1, sp, #44	; 0x2c
 800493c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800493e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004940:	f7fd f884 	bl	8001a4c <HAL_TIM_ConfigClockSource>
 8004944:	b108      	cbz	r0, 800494a <main+0x24a>
 8004946:	b672      	cpsid	i
  while (1)
 8004948:	e7fe      	b.n	8004948 <main+0x248>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800494a:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800494c:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800494e:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004950:	4620      	mov	r0, r4
 8004952:	f7fd f915 	bl	8001b80 <HAL_TIMEx_MasterConfigSynchronization>
 8004956:	b108      	cbz	r0, 800495c <main+0x25c>
 8004958:	b672      	cpsid	i
  while (1)
 800495a:	e7fe      	b.n	800495a <main+0x25a>
  MX_X_CUBE_AI_Init();
 800495c:	f7ff faa0 	bl	8003ea0 <MX_X_CUBE_AI_Init>
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8004960:	4620      	mov	r0, r4
 8004962:	f7fc fee9 	bl	8001738 <HAL_TIM_Base_Start_IT>
 8004966:	b108      	cbz	r0, 800496c <main+0x26c>
 8004968:	b672      	cpsid	i
  while (1)
 800496a:	e7fe      	b.n	800496a <main+0x26a>
  		  LC_PRINT("\nhello\n");
 800496c:	4c0d      	ldr	r4, [pc, #52]	; (80049a4 <main+0x2a4>)
  MX_X_CUBE_AI_Process();
 800496e:	f7ff fa9e 	bl	8003eae <MX_X_CUBE_AI_Process>
  		  LC_PRINT("\nhello\n");
 8004972:	4620      	mov	r0, r4
 8004974:	f7fe f9ac 	bl	8002cd0 <lc_print>
  	  while(1){
 8004978:	e7fb      	b.n	8004972 <main+0x272>
 800497a:	bf00      	nop
 800497c:	e000ed00 	.word	0xe000ed00
 8004980:	40023800 	.word	0x40023800
 8004984:	40020400 	.word	0x40020400
 8004988:	40021800 	.word	0x40021800
 800498c:	40020800 	.word	0x40020800
 8004990:	40020000 	.word	0x40020000
 8004994:	20004794 	.word	0x20004794
 8004998:	40023000 	.word	0x40023000
 800499c:	200047b8 	.word	0x200047b8
 80049a0:	40000400 	.word	0x40000400
 80049a4:	0800cafd 	.word	0x0800cafd

080049a8 <MX_USART3_UART_Init>:
{
 80049a8:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80049aa:	480b      	ldr	r0, [pc, #44]	; (80049d8 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 80049ac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80049b0:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <MX_USART3_UART_Init+0x34>)
 80049b2:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80049b6:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 80049b8:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 80049ba:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Parity = UART_PARITY_NONE;
 80049be:	6103      	str	r3, [r0, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049c0:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049c2:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049c6:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80049ca:	f7fd fc49 	bl	8002260 <HAL_UART_Init>
 80049ce:	b108      	cbz	r0, 80049d4 <MX_USART3_UART_Init+0x2c>
 80049d0:	b672      	cpsid	i
  while (1)
 80049d2:	e7fe      	b.n	80049d2 <MX_USART3_UART_Init+0x2a>
}
 80049d4:	bd08      	pop	{r3, pc}
 80049d6:	bf00      	nop
 80049d8:	20004804 	.word	0x20004804
 80049dc:	40004800 	.word	0x40004800

080049e0 <Error_Handler>:
 80049e0:	b672      	cpsid	i
  while (1)
 80049e2:	e7fe      	b.n	80049e2 <Error_Handler+0x2>

080049e4 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 80049e4:	2300      	movs	r3, #0
    iter->dest_struct = dest_struct;
 80049e6:	e9c0 3202 	strd	r3, r2, [r0, #8]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 80049ea:	888b      	ldrh	r3, [r1, #4]
 80049ec:	441a      	add	r2, r3
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80049ee:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 80049f2:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80049f4:	441a      	add	r2, r3
    iter->pos = fields;
 80049f6:	e9c0 1100 	strd	r1, r1, [r0]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80049fa:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 80049fc:	8808      	ldrh	r0, [r1, #0]
}
 80049fe:	3800      	subs	r0, #0
 8004a00:	bf18      	it	ne
 8004a02:	2001      	movne	r0, #1
 8004a04:	4770      	bx	lr

08004a06 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 8004a06:	6841      	ldr	r1, [r0, #4]
{
 8004a08:	4603      	mov	r3, r0

    if (prev_field->tag == 0)
 8004a0a:	880a      	ldrh	r2, [r1, #0]
{
 8004a0c:	b570      	push	{r4, r5, r6, lr}
    if (prev_field->tag == 0)
 8004a0e:	2a00      	cmp	r2, #0
 8004a10:	d035      	beq.n	8004a7e <pb_field_iter_next+0x78>
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
    }
    
    iter->pos++;
 8004a12:	f101 0210 	add.w	r2, r1, #16
    
    if (iter->pos->tag == 0)
 8004a16:	8a0c      	ldrh	r4, [r1, #16]
    iter->pos++;
 8004a18:	6042      	str	r2, [r0, #4]
    if (iter->pos->tag == 0)
 8004a1a:	b92c      	cbnz	r4, 8004a28 <pb_field_iter_next+0x22>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 8004a1c:	68c2      	ldr	r2, [r0, #12]
 8004a1e:	6801      	ldr	r1, [r0, #0]
 8004a20:	f7ff ffe0 	bl	80049e4 <pb_field_iter_begin>
        return false;
 8004a24:	4620      	mov	r0, r4
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
 8004a26:	bd70      	pop	{r4, r5, r6, pc}
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8004a28:	7888      	ldrb	r0, [r1, #2]
        size_t prev_size = prev_field->data_size;
 8004a2a:	890a      	ldrh	r2, [r1, #8]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8004a2c:	f000 0630 	and.w	r6, r0, #48	; 0x30
            iter->pos->data_offset == PB_SIZE_MAX)
 8004a30:	8a8c      	ldrh	r4, [r1, #20]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8004a32:	2e30      	cmp	r6, #48	; 0x30
 8004a34:	d10a      	bne.n	8004a4c <pb_field_iter_next+0x46>
 8004a36:	7c8d      	ldrb	r5, [r1, #18]
 8004a38:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8004a3c:	2d30      	cmp	r5, #48	; 0x30
 8004a3e:	d118      	bne.n	8004a72 <pb_field_iter_next+0x6c>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 8004a40:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8004a44:	42ac      	cmp	r4, r5
 8004a46:	d114      	bne.n	8004a72 <pb_field_iter_next+0x6c>
            return true;
 8004a48:	2001      	movs	r0, #1
 8004a4a:	e7ec      	b.n	8004a26 <pb_field_iter_next+0x20>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8004a4c:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 8004a50:	2d20      	cmp	r5, #32
 8004a52:	d10e      	bne.n	8004a72 <pb_field_iter_next+0x6c>
            prev_size *= prev_field->array_size;
 8004a54:	8948      	ldrh	r0, [r1, #10]
 8004a56:	4342      	muls	r2, r0
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 8004a58:	b916      	cbnz	r6, 8004a60 <pb_field_iter_next+0x5a>
            iter->required_field_index++;
 8004a5a:	6898      	ldr	r0, [r3, #8]
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	6098      	str	r0, [r3, #8]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8004a60:	4414      	add	r4, r2
 8004a62:	691a      	ldr	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8004a64:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8004a68:	4422      	add	r2, r4
 8004a6a:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8004a6c:	440a      	add	r2, r1
 8004a6e:	615a      	str	r2, [r3, #20]
        return true;
 8004a70:	e7ea      	b.n	8004a48 <pb_field_iter_next+0x42>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 8004a72:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
            prev_size = sizeof(void*);
 8004a76:	2880      	cmp	r0, #128	; 0x80
 8004a78:	bf08      	it	eq
 8004a7a:	2204      	moveq	r2, #4
 8004a7c:	e7ec      	b.n	8004a58 <pb_field_iter_next+0x52>
        return false;
 8004a7e:	4610      	mov	r0, r2
 8004a80:	e7d1      	b.n	8004a26 <pb_field_iter_next+0x20>

08004a82 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8004a82:	b570      	push	{r4, r5, r6, lr}
 8004a84:	4604      	mov	r4, r0
 8004a86:	460d      	mov	r5, r1
    const pb_field_t *start = iter->pos;
 8004a88:	6846      	ldr	r6, [r0, #4]
    
    do {
        if (iter->pos->tag == tag &&
 8004a8a:	6863      	ldr	r3, [r4, #4]
 8004a8c:	881a      	ldrh	r2, [r3, #0]
 8004a8e:	42aa      	cmp	r2, r5
 8004a90:	d104      	bne.n	8004a9c <pb_field_iter_find+0x1a>
 8004a92:	789b      	ldrb	r3, [r3, #2]
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d107      	bne.n	8004aac <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f7ff ffb2 	bl	8004a06 <pb_field_iter_next>
    } while (iter->pos != start);
 8004aa2:	6863      	ldr	r3, [r4, #4]
 8004aa4:	42b3      	cmp	r3, r6
 8004aa6:	d1f0      	bne.n	8004a8a <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 8004aa8:	2000      	movs	r0, #0
}
 8004aaa:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 8004aac:	2001      	movs	r0, #1
 8004aae:	e7fc      	b.n	8004aaa <pb_field_iter_find+0x28>

08004ab0 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8004ab0:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8004ab2:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 8004ab4:	18a3      	adds	r3, r4, r2
 8004ab6:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 8004ab8:	b939      	cbnz	r1, 8004aca <buf_read+0x1a>
        for (i = 0; i < count; i++)
            buf[i] = source[i];
    }
    
    return true;
}
 8004aba:	2001      	movs	r0, #1
 8004abc:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 8004abe:	5ce0      	ldrb	r0, [r4, r3]
 8004ac0:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d1fa      	bne.n	8004abe <buf_read+0xe>
 8004ac8:	e7f7      	b.n	8004aba <buf_read+0xa>
 8004aca:	2300      	movs	r3, #0
 8004acc:	e7fa      	b.n	8004ac4 <buf_read+0x14>

08004ace <pb_field_set_to_default>:
    return false;
}

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 8004ace:	b570      	push	{r4, r5, r6, lr}
    pb_type_t type;
    type = iter->pos->type;
 8004ad0:	6845      	ldr	r5, [r0, #4]
{
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	4603      	mov	r3, r0
    type = iter->pos->type;
 8004ad6:	78aa      	ldrb	r2, [r5, #2]
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8004ad8:	f002 060f 	and.w	r6, r2, #15
 8004adc:	2e08      	cmp	r6, #8
 8004ade:	d11e      	bne.n	8004b1e <pb_field_set_to_default+0x50>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8004ae0:	6903      	ldr	r3, [r0, #16]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 8004ae2:	2600      	movs	r6, #0
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8004ae4:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
 8004ae6:	b90c      	cbnz	r4, 8004aec <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 8004ae8:	b006      	add	sp, #24
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8004aec:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8004aee:	4668      	mov	r0, sp
 8004af0:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8004af2:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 8004af4:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8004af6:	4629      	mov	r1, r5
 8004af8:	f7ff ff74 	bl	80049e4 <pb_field_iter_begin>
    iter->pData = extension->dest;
 8004afc:	6863      	ldr	r3, [r4, #4]
            pb_field_set_to_default(&ext_iter);
 8004afe:	4668      	mov	r0, sp
    iter->pData = extension->dest;
 8004b00:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 8004b02:	f104 030c 	add.w	r3, r4, #12
 8004b06:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004b08:	78ab      	ldrb	r3, [r5, #2]
 8004b0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b0e:	2b80      	cmp	r3, #128	; 0x80
        iter->pData = &extension->dest;
 8004b10:	bf04      	itt	eq
 8004b12:	1d23      	addeq	r3, r4, #4
 8004b14:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 8004b16:	f7ff ffda 	bl	8004ace <pb_field_set_to_default>
            ext = ext->next;
 8004b1a:	68a4      	ldr	r4, [r4, #8]
 8004b1c:	e7e3      	b.n	8004ae6 <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8004b1e:	f012 01c0 	ands.w	r1, r2, #192	; 0xc0
 8004b22:	d125      	bne.n	8004b70 <pb_field_set_to_default+0xa2>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 8004b24:	f002 0030 	and.w	r0, r2, #48	; 0x30
 8004b28:	2810      	cmp	r0, #16
 8004b2a:	d10f      	bne.n	8004b4c <pb_field_set_to_default+0x7e>
 8004b2c:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 8004b30:	4282      	cmp	r2, r0
 8004b32:	d000      	beq.n	8004b36 <pb_field_set_to_default+0x68>
            *(bool*)iter->pSize = false;
 8004b34:	7011      	strb	r1, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8004b36:	2e07      	cmp	r6, #7
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8004b38:	68ec      	ldr	r4, [r5, #12]
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8004b3a:	6918      	ldr	r0, [r3, #16]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8004b3c:	d10b      	bne.n	8004b56 <pb_field_set_to_default+0x88>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8004b3e:	4601      	mov	r1, r0
 8004b40:	4620      	mov	r0, r4
}
 8004b42:	b006      	add	sp, #24
 8004b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8004b48:	f000 b81a 	b.w	8004b80 <pb_message_set_to_defaults>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004b4c:	0690      	lsls	r0, r2, #26
 8004b4e:	d5f2      	bpl.n	8004b36 <pb_field_set_to_default+0x68>
            *(pb_size_t*)iter->pSize = 0;
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	8019      	strh	r1, [r3, #0]
}
 8004b54:	e7c8      	b.n	8004ae8 <pb_field_set_to_default+0x1a>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8004b56:	892a      	ldrh	r2, [r5, #8]
 8004b58:	4621      	mov	r1, r4
            else if (iter->pos->ptr != NULL)
 8004b5a:	b124      	cbz	r4, 8004b66 <pb_field_set_to_default+0x98>
}
 8004b5c:	b006      	add	sp, #24
 8004b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8004b62:	f005 bcee 	b.w	800a542 <memcpy>
}
 8004b66:	b006      	add	sp, #24
 8004b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(iter->pData, 0, iter->pos->data_size);
 8004b6c:	f005 bc47 	b.w	800a3fe <memset>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8004b70:	2980      	cmp	r1, #128	; 0x80
 8004b72:	d1b9      	bne.n	8004ae8 <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 8004b74:	6900      	ldr	r0, [r0, #16]
 8004b76:	2100      	movs	r1, #0
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004b78:	0692      	lsls	r2, r2, #26
        *(void**)iter->pData = NULL;
 8004b7a:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004b7c:	d5b4      	bpl.n	8004ae8 <pb_field_set_to_default+0x1a>
 8004b7e:	e7e7      	b.n	8004b50 <pb_field_set_to_default+0x82>

08004b80 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 8004b80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004b82:	460a      	mov	r2, r1
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 8004b84:	4601      	mov	r1, r0
 8004b86:	4668      	mov	r0, sp
 8004b88:	f7ff ff2c 	bl	80049e4 <pb_field_iter_begin>
 8004b8c:	b130      	cbz	r0, 8004b9c <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 8004b8e:	4668      	mov	r0, sp
 8004b90:	f7ff ff9d 	bl	8004ace <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 8004b94:	4668      	mov	r0, sp
 8004b96:	f7ff ff36 	bl	8004a06 <pb_field_iter_next>
 8004b9a:	e7f7      	b.n	8004b8c <pb_message_set_to_defaults+0xc>
}
 8004b9c:	b007      	add	sp, #28
 8004b9e:	f85d fb04 	ldr.w	pc, [sp], #4

08004ba2 <pb_readbyte>:
    if (stream->bytes_left == 0)
 8004ba2:	6883      	ldr	r3, [r0, #8]
{
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 8004ba8:	b90b      	cbnz	r3, 8004bae <pb_readbyte+0xc>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8004baa:	2000      	movs	r0, #0
}
 8004bac:	bd10      	pop	{r4, pc}
    if (!stream->callback(stream, buf, 1))
 8004bae:	6803      	ldr	r3, [r0, #0]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	4798      	blx	r3
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	d0f8      	beq.n	8004baa <pb_readbyte+0x8>
    stream->bytes_left--;
 8004bb8:	68a3      	ldr	r3, [r4, #8]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	60a3      	str	r3, [r4, #8]
    return true;    
 8004bbe:	e7f5      	b.n	8004bac <pb_readbyte+0xa>

08004bc0 <pb_decode_varint32_eof>:
{
 8004bc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004bc4:	4688      	mov	r8, r1
    if (!pb_readbyte(stream, &byte))
 8004bc6:	f10d 0107 	add.w	r1, sp, #7
{
 8004bca:	4607      	mov	r7, r0
 8004bcc:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 8004bce:	f7ff ffe8 	bl	8004ba2 <pb_readbyte>
 8004bd2:	4606      	mov	r6, r0
 8004bd4:	b958      	cbnz	r0, 8004bee <pb_decode_varint32_eof+0x2e>
        if (stream->bytes_left == 0)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	b123      	cbz	r3, 8004be4 <pb_decode_varint32_eof+0x24>
        return false;
 8004bda:	2600      	movs	r6, #0
}
 8004bdc:	4630      	mov	r0, r6
 8004bde:	b002      	add	sp, #8
 8004be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (eof)
 8004be4:	2c00      	cmp	r4, #0
 8004be6:	d0f8      	beq.n	8004bda <pb_decode_varint32_eof+0x1a>
                *eof = true;
 8004be8:	2301      	movs	r3, #1
 8004bea:	7023      	strb	r3, [r4, #0]
 8004bec:	e7f6      	b.n	8004bdc <pb_decode_varint32_eof+0x1c>
    if ((byte & 0x80) == 0)
 8004bee:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8004bf2:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	da21      	bge.n	8004c3e <pb_decode_varint32_eof+0x7e>
        result = byte & 0x7F;
 8004bfa:	f004 047f 	and.w	r4, r4, #127	; 0x7f
        uint_fast8_t bitpos = 7;
 8004bfe:	2507      	movs	r5, #7
            if (!pb_readbyte(stream, &byte))
 8004c00:	f10d 0107 	add.w	r1, sp, #7
 8004c04:	4638      	mov	r0, r7
 8004c06:	f7ff ffcc 	bl	8004ba2 <pb_readbyte>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d0e5      	beq.n	8004bda <pb_decode_varint32_eof+0x1a>
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8004c0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if (bitpos >= 32)
 8004c12:	2d1f      	cmp	r5, #31
 8004c14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c18:	d914      	bls.n	8004c44 <pb_decode_varint32_eof+0x84>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8004c1a:	2d3f      	cmp	r5, #63	; 0x3f
 8004c1c:	bf34      	ite	cc
 8004c1e:	21ff      	movcc	r1, #255	; 0xff
 8004c20:	2101      	movcs	r1, #1
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8004c22:	b11a      	cbz	r2, 8004c2c <pb_decode_varint32_eof+0x6c>
 8004c24:	2c00      	cmp	r4, #0
 8004c26:	dad8      	bge.n	8004bda <pb_decode_varint32_eof+0x1a>
 8004c28:	4299      	cmp	r1, r3
 8004c2a:	d1d6      	bne.n	8004bda <pb_decode_varint32_eof+0x1a>
        } while (byte & 0x80);
 8004c2c:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 8004c2e:	f105 0507 	add.w	r5, r5, #7
        } while (byte & 0x80);
 8004c32:	d4e5      	bmi.n	8004c00 <pb_decode_varint32_eof+0x40>
        if (bitpos == 35 && (byte & 0x70) != 0)
 8004c34:	2d23      	cmp	r5, #35	; 0x23
 8004c36:	d102      	bne.n	8004c3e <pb_decode_varint32_eof+0x7e>
 8004c38:	f013 0f70 	tst.w	r3, #112	; 0x70
 8004c3c:	d1cd      	bne.n	8004bda <pb_decode_varint32_eof+0x1a>
   *dest = result;
 8004c3e:	f8c8 4000 	str.w	r4, [r8]
   return true;
 8004c42:	e7cb      	b.n	8004bdc <pb_decode_varint32_eof+0x1c>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8004c44:	40aa      	lsls	r2, r5
 8004c46:	4314      	orrs	r4, r2
 8004c48:	e7f0      	b.n	8004c2c <pb_decode_varint32_eof+0x6c>
	...

08004c4c <pb_read>:
{
 8004c4c:	b530      	push	{r4, r5, lr}
 8004c4e:	4604      	mov	r4, r0
 8004c50:	b085      	sub	sp, #20
 8004c52:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 8004c54:	b9a9      	cbnz	r1, 8004c82 <pb_read+0x36>
 8004c56:	6802      	ldr	r2, [r0, #0]
 8004c58:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <pb_read+0x54>)
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d011      	beq.n	8004c82 <pb_read+0x36>
		while (count > 16)
 8004c5e:	2d10      	cmp	r5, #16
 8004c60:	d806      	bhi.n	8004c70 <pb_read+0x24>
		return pb_read(stream, tmp, count);
 8004c62:	462a      	mov	r2, r5
 8004c64:	4669      	mov	r1, sp
 8004c66:	4620      	mov	r0, r4
 8004c68:	f7ff fff0 	bl	8004c4c <pb_read>
}
 8004c6c:	b005      	add	sp, #20
 8004c6e:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 8004c70:	2210      	movs	r2, #16
 8004c72:	4669      	mov	r1, sp
 8004c74:	4620      	mov	r0, r4
 8004c76:	f7ff ffe9 	bl	8004c4c <pb_read>
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	d0f6      	beq.n	8004c6c <pb_read+0x20>
			count -= 16;
 8004c7e:	3d10      	subs	r5, #16
 8004c80:	e7ed      	b.n	8004c5e <pb_read+0x12>
    if (stream->bytes_left < count)
 8004c82:	68a3      	ldr	r3, [r4, #8]
 8004c84:	42ab      	cmp	r3, r5
 8004c86:	d201      	bcs.n	8004c8c <pb_read+0x40>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8004c88:	2000      	movs	r0, #0
 8004c8a:	e7ef      	b.n	8004c6c <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	462a      	mov	r2, r5
 8004c90:	4620      	mov	r0, r4
 8004c92:	4798      	blx	r3
 8004c94:	2800      	cmp	r0, #0
 8004c96:	d0f7      	beq.n	8004c88 <pb_read+0x3c>
    stream->bytes_left -= count;
 8004c98:	68a3      	ldr	r3, [r4, #8]
 8004c9a:	1b5b      	subs	r3, r3, r5
 8004c9c:	60a3      	str	r3, [r4, #8]
    return true;
 8004c9e:	e7e5      	b.n	8004c6c <pb_read+0x20>
 8004ca0:	08004ab1 	.word	0x08004ab1

08004ca4 <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f7ff bf8b 	b.w	8004bc0 <pb_decode_varint32_eof>

08004caa <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8004caa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cac:	460f      	mov	r7, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8004cae:	a901      	add	r1, sp, #4
{
 8004cb0:	4606      	mov	r6, r0
 8004cb2:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 8004cb4:	f7ff fff6 	bl	8004ca4 <pb_decode_varint32>
 8004cb8:	4604      	mov	r4, r0
 8004cba:	b140      	cbz	r0, 8004cce <pb_dec_fixed_length_bytes+0x24>
        return false;

    if (size > PB_SIZE_MAX)
 8004cbc:	9901      	ldr	r1, [sp, #4]
 8004cbe:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004cc2:	d210      	bcs.n	8004ce6 <pb_dec_fixed_length_bytes+0x3c>
        PB_RETURN_ERROR(stream, "bytes overflow");

    if (size == 0)
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(dest, 0, field->data_size);
 8004cc4:	893a      	ldrh	r2, [r7, #8]
    if (size == 0)
 8004cc6:	b929      	cbnz	r1, 8004cd4 <pb_dec_fixed_length_bytes+0x2a>
        memset(dest, 0, field->data_size);
 8004cc8:	4628      	mov	r0, r5
 8004cca:	f005 fb98 	bl	800a3fe <memset>

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 8004cce:	4620      	mov	r0, r4
 8004cd0:	b003      	add	sp, #12
 8004cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 8004cd4:	428a      	cmp	r2, r1
 8004cd6:	d106      	bne.n	8004ce6 <pb_dec_fixed_length_bytes+0x3c>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 8004cd8:	4629      	mov	r1, r5
 8004cda:	4630      	mov	r0, r6
}
 8004cdc:	b003      	add	sp, #12
 8004cde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 8004ce2:	f7ff bfb3 	b.w	8004c4c <pb_read>
        return false;
 8004ce6:	2400      	movs	r4, #0
 8004ce8:	e7f1      	b.n	8004cce <pb_dec_fixed_length_bytes+0x24>

08004cea <pb_dec_string>:
{
 8004cea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004cee:	460f      	mov	r7, r1
    if (!pb_decode_varint32(stream, &size))
 8004cf0:	a901      	add	r1, sp, #4
{
 8004cf2:	4680      	mov	r8, r0
 8004cf4:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 8004cf6:	f7ff ffd5 	bl	8004ca4 <pb_decode_varint32>
 8004cfa:	b198      	cbz	r0, 8004d24 <pb_dec_string+0x3a>
    alloc_size = size + 1;
 8004cfc:	9c01      	ldr	r4, [sp, #4]
 8004cfe:	2500      	movs	r5, #0
 8004d00:	1c62      	adds	r2, r4, #1
 8004d02:	d204      	bcs.n	8004d0e <pb_dec_string+0x24>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004d04:	78bb      	ldrb	r3, [r7, #2]
 8004d06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d0a:	2b80      	cmp	r3, #128	; 0x80
 8004d0c:	d101      	bne.n	8004d12 <pb_dec_string+0x28>
        return false;
 8004d0e:	4628      	mov	r0, r5
 8004d10:	e008      	b.n	8004d24 <pb_dec_string+0x3a>
        if (alloc_size > field->data_size)
 8004d12:	893b      	ldrh	r3, [r7, #8]
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d3fa      	bcc.n	8004d0e <pb_dec_string+0x24>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 8004d18:	4622      	mov	r2, r4
 8004d1a:	4631      	mov	r1, r6
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	f7ff ff95 	bl	8004c4c <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 8004d22:	5535      	strb	r5, [r6, r4]
}
 8004d24:	b002      	add	sp, #8
 8004d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d2a <pb_dec_bytes>:
{
 8004d2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d2c:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8004d2e:	a901      	add	r1, sp, #4
{
 8004d30:	4606      	mov	r6, r0
 8004d32:	4614      	mov	r4, r2
    if (!pb_decode_varint32(stream, &size))
 8004d34:	f7ff ffb6 	bl	8004ca4 <pb_decode_varint32>
 8004d38:	b1a8      	cbz	r0, 8004d66 <pb_dec_bytes+0x3c>
    if (size > PB_SIZE_MAX)
 8004d3a:	9a01      	ldr	r2, [sp, #4]
 8004d3c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004d40:	d211      	bcs.n	8004d66 <pb_dec_bytes+0x3c>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004d42:	78ab      	ldrb	r3, [r5, #2]
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8004d44:	1c91      	adds	r1, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004d46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d4a:	2b80      	cmp	r3, #128	; 0x80
 8004d4c:	d00b      	beq.n	8004d66 <pb_dec_bytes+0x3c>
        if (alloc_size > field->data_size)
 8004d4e:	892b      	ldrh	r3, [r5, #8]
 8004d50:	428b      	cmp	r3, r1
 8004d52:	d308      	bcc.n	8004d66 <pb_dec_bytes+0x3c>
    bdest->size = (pb_size_t)size;
 8004d54:	4621      	mov	r1, r4
    return pb_read(stream, bdest->bytes, size);
 8004d56:	4630      	mov	r0, r6
    bdest->size = (pb_size_t)size;
 8004d58:	f821 2b02 	strh.w	r2, [r1], #2
}
 8004d5c:	b002      	add	sp, #8
 8004d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_read(stream, bdest->bytes, size);
 8004d62:	f7ff bf73 	b.w	8004c4c <pb_read>
}
 8004d66:	2000      	movs	r0, #0
 8004d68:	b002      	add	sp, #8
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}

08004d6c <pb_decode_varint>:
{
 8004d6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint64_t result = 0;
 8004d70:	2500      	movs	r5, #0
{
 8004d72:	4680      	mov	r8, r0
 8004d74:	460e      	mov	r6, r1
    uint64_t result = 0;
 8004d76:	462f      	mov	r7, r5
    uint_fast8_t bitpos = 0;
 8004d78:	462c      	mov	r4, r5
        if (!pb_readbyte(stream, &byte))
 8004d7a:	f10d 0107 	add.w	r1, sp, #7
 8004d7e:	4640      	mov	r0, r8
 8004d80:	f7ff ff0f 	bl	8004ba2 <pb_readbyte>
 8004d84:	b1d0      	cbz	r0, 8004dbc <pb_decode_varint+0x50>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8004d86:	f89d c007 	ldrb.w	ip, [sp, #7]
 8004d8a:	f1a4 0320 	sub.w	r3, r4, #32
 8004d8e:	f1c4 0120 	rsb	r1, r4, #32
 8004d92:	f00c 027f 	and.w	r2, ip, #127	; 0x7f
    } while (byte & 0x80);
 8004d96:	f01c 0f80 	tst.w	ip, #128	; 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	fa22 f101 	lsr.w	r1, r2, r1
 8004da2:	fa02 f204 	lsl.w	r2, r2, r4
        bitpos = (uint_fast8_t)(bitpos + 7);
 8004da6:	f104 0407 	add.w	r4, r4, #7
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8004daa:	ea43 0301 	orr.w	r3, r3, r1
 8004dae:	ea45 0502 	orr.w	r5, r5, r2
 8004db2:	ea47 0703 	orr.w	r7, r7, r3
    } while (byte & 0x80);
 8004db6:	d104      	bne.n	8004dc2 <pb_decode_varint+0x56>
    *dest = result;
 8004db8:	e9c6 5700 	strd	r5, r7, [r6]
}
 8004dbc:	b002      	add	sp, #8
 8004dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (bitpos >= 64)
 8004dc2:	2c46      	cmp	r4, #70	; 0x46
 8004dc4:	d1d9      	bne.n	8004d7a <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	e7f8      	b.n	8004dbc <pb_decode_varint+0x50>

08004dca <pb_dec_uvarint>:
{
 8004dca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dcc:	460d      	mov	r5, r1
    if (!pb_decode_varint(stream, &value))
 8004dce:	4669      	mov	r1, sp
{
 8004dd0:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 8004dd2:	f7ff ffcb 	bl	8004d6c <pb_decode_varint>
 8004dd6:	b170      	cbz	r0, 8004df6 <pb_dec_uvarint+0x2c>
    if (field->data_size == sizeof(pb_uint64_t))
 8004dd8:	892b      	ldrh	r3, [r5, #8]
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d10d      	bne.n	8004dfa <pb_dec_uvarint+0x30>
        clamped = *(pb_uint64_t*)dest = value;
 8004dde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004de2:	e9c4 3200 	strd	r3, r2, [r4]
    if (clamped != value)
 8004de6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004dea:	4291      	cmp	r1, r2
 8004dec:	bf08      	it	eq
 8004dee:	4298      	cmpeq	r0, r3
 8004df0:	bf0c      	ite	eq
 8004df2:	2001      	moveq	r0, #1
 8004df4:	2000      	movne	r0, #0
}
 8004df6:	b003      	add	sp, #12
 8004df8:	bd30      	pop	{r4, r5, pc}
    else if (field->data_size == sizeof(uint32_t))
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d103      	bne.n	8004e06 <pb_dec_uvarint+0x3c>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 8004dfe:	9b00      	ldr	r3, [sp, #0]
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	2200      	movs	r2, #0
 8004e04:	e7ef      	b.n	8004de6 <pb_dec_uvarint+0x1c>
    else if (field->data_size == sizeof(uint_least16_t))
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d103      	bne.n	8004e12 <pb_dec_uvarint+0x48>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 8004e0a:	9b00      	ldr	r3, [sp, #0]
 8004e0c:	8023      	strh	r3, [r4, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	e7f7      	b.n	8004e02 <pb_dec_uvarint+0x38>
    else if (field->data_size == sizeof(uint_least8_t))
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d104      	bne.n	8004e20 <pb_dec_uvarint+0x56>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 8004e16:	9b00      	ldr	r3, [sp, #0]
 8004e18:	7023      	strb	r3, [r4, #0]
 8004e1a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8004e1e:	e7f0      	b.n	8004e02 <pb_dec_uvarint+0x38>
        return false;
 8004e20:	2000      	movs	r0, #0
 8004e22:	e7e8      	b.n	8004df6 <pb_dec_uvarint+0x2c>

08004e24 <pb_dec_varint>:
{
 8004e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e26:	460d      	mov	r5, r1
    if (!pb_decode_varint(stream, &value))
 8004e28:	4669      	mov	r1, sp
{
 8004e2a:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 8004e2c:	f7ff ff9e 	bl	8004d6c <pb_decode_varint>
 8004e30:	b130      	cbz	r0, 8004e40 <pb_dec_varint+0x1c>
    if (field->data_size == sizeof(pb_int64_t))
 8004e32:	892b      	ldrh	r3, [r5, #8]
 8004e34:	2b08      	cmp	r3, #8
        svalue = (pb_int64_t)value;
 8004e36:	e9dd 1200 	ldrd	r1, r2, [sp]
    if (field->data_size == sizeof(pb_int64_t))
 8004e3a:	d103      	bne.n	8004e44 <pb_dec_varint+0x20>
        clamped = *(pb_int64_t*)dest = svalue;
 8004e3c:	e9c4 1200 	strd	r1, r2, [r4]
}
 8004e40:	b003      	add	sp, #12
 8004e42:	bd30      	pop	{r4, r5, pc}
    else if (field->data_size == sizeof(int32_t))
 8004e44:	2b04      	cmp	r3, #4
        svalue = (int32_t)value;
 8004e46:	ea4f 70e1 	mov.w	r0, r1, asr #31
    else if (field->data_size == sizeof(int32_t))
 8004e4a:	d109      	bne.n	8004e60 <pb_dec_varint+0x3c>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6021      	str	r1, [r4, #0]
    if (clamped != svalue)
 8004e52:	4282      	cmp	r2, r0
 8004e54:	bf08      	it	eq
 8004e56:	428b      	cmpeq	r3, r1
 8004e58:	bf0c      	ite	eq
 8004e5a:	2001      	moveq	r0, #1
 8004e5c:	2000      	movne	r0, #0
 8004e5e:	e7ef      	b.n	8004e40 <pb_dec_varint+0x1c>
    else if (field->data_size == sizeof(int_least16_t))
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d103      	bne.n	8004e6c <pb_dec_varint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 8004e64:	b20b      	sxth	r3, r1
 8004e66:	8023      	strh	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8004e68:	17da      	asrs	r2, r3, #31
 8004e6a:	e7f2      	b.n	8004e52 <pb_dec_varint+0x2e>
    else if (field->data_size == sizeof(int_least8_t))
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d102      	bne.n	8004e76 <pb_dec_varint+0x52>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8004e70:	b24b      	sxtb	r3, r1
 8004e72:	7023      	strb	r3, [r4, #0]
 8004e74:	e7f8      	b.n	8004e68 <pb_dec_varint+0x44>
        return false;
 8004e76:	2000      	movs	r0, #0
 8004e78:	e7e2      	b.n	8004e40 <pb_dec_varint+0x1c>

08004e7a <pb_decode_tag>:
{
 8004e7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e7c:	461d      	mov	r5, r3
    *eof = false;
 8004e7e:	2300      	movs	r3, #0
{
 8004e80:	460e      	mov	r6, r1
 8004e82:	4617      	mov	r7, r2
    *eof = false;
 8004e84:	702b      	strb	r3, [r5, #0]
    *wire_type = (pb_wire_type_t) 0;
 8004e86:	700b      	strb	r3, [r1, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8004e88:	a901      	add	r1, sp, #4
    *tag = 0;
 8004e8a:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8004e8c:	462a      	mov	r2, r5
 8004e8e:	f7ff fe97 	bl	8004bc0 <pb_decode_varint32_eof>
 8004e92:	b120      	cbz	r0, 8004e9e <pb_decode_tag+0x24>
    if (temp == 0)
 8004e94:	9c01      	ldr	r4, [sp, #4]
 8004e96:	b924      	cbnz	r4, 8004ea2 <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 8004e98:	2301      	movs	r3, #1
        return false;
 8004e9a:	4620      	mov	r0, r4
        *eof = true; /* Special feature: allow 0-terminated messages. */
 8004e9c:	702b      	strb	r3, [r5, #0]
}
 8004e9e:	b003      	add	sp, #12
 8004ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *tag = temp >> 3;
 8004ea2:	08e3      	lsrs	r3, r4, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 8004ea4:	f004 0407 	and.w	r4, r4, #7
    *tag = temp >> 3;
 8004ea8:	603b      	str	r3, [r7, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8004eaa:	7034      	strb	r4, [r6, #0]
    return true;
 8004eac:	e7f7      	b.n	8004e9e <pb_decode_tag+0x24>

08004eae <pb_skip_field>:
{
 8004eae:	b513      	push	{r0, r1, r4, lr}
 8004eb0:	4604      	mov	r4, r0
    switch (wire_type)
 8004eb2:	2905      	cmp	r1, #5
 8004eb4:	d821      	bhi.n	8004efa <pb_skip_field+0x4c>
 8004eb6:	e8df f001 	tbb	[pc, r1]
 8004eba:	0f03      	.short	0x0f03
 8004ebc:	1e202017 	.word	0x1e202017
        if (!pb_read(stream, &byte, 1))
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	a901      	add	r1, sp, #4
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f7ff fec1 	bl	8004c4c <pb_read>
 8004eca:	b118      	cbz	r0, 8004ed4 <pb_skip_field+0x26>
    } while (byte & 0x80);
 8004ecc:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	dbf5      	blt.n	8004ec0 <pb_skip_field+0x12>
}
 8004ed4:	b002      	add	sp, #8
 8004ed6:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8004ed8:	2208      	movs	r2, #8
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8004eda:	2100      	movs	r1, #0
 8004edc:	4620      	mov	r0, r4
}
 8004ede:	b002      	add	sp, #8
 8004ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8004ee4:	f7ff beb2 	b.w	8004c4c <pb_read>
    if (!pb_decode_varint32(stream, &length))
 8004ee8:	a901      	add	r1, sp, #4
 8004eea:	f7ff fedb 	bl	8004ca4 <pb_decode_varint32>
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 8004ef2:	9a01      	ldr	r2, [sp, #4]
 8004ef4:	e7f1      	b.n	8004eda <pb_skip_field+0x2c>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	e7ef      	b.n	8004eda <pb_skip_field+0x2c>
    switch (wire_type)
 8004efa:	2000      	movs	r0, #0
 8004efc:	e7ea      	b.n	8004ed4 <pb_skip_field+0x26>

08004efe <pb_make_string_substream>:
{
 8004efe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f00:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8004f02:	a901      	add	r1, sp, #4
{
 8004f04:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 8004f06:	f7ff fecd 	bl	8004ca4 <pb_decode_varint32>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	b918      	cbnz	r0, 8004f16 <pb_make_string_substream+0x18>
        return false;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	b003      	add	sp, #12
 8004f14:	bd30      	pop	{r4, r5, pc}
    *substream = *stream;
 8004f16:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004f1a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (substream->bytes_left < size)
 8004f1e:	9901      	ldr	r1, [sp, #4]
 8004f20:	428a      	cmp	r2, r1
 8004f22:	d3f4      	bcc.n	8004f0e <pb_make_string_substream+0x10>
    substream->bytes_left = size;
 8004f24:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 8004f26:	68a2      	ldr	r2, [r4, #8]
 8004f28:	1a52      	subs	r2, r2, r1
 8004f2a:	60a2      	str	r2, [r4, #8]
    return true;
 8004f2c:	e7f0      	b.n	8004f10 <pb_make_string_substream+0x12>

08004f2e <pb_close_string_substream>:
    if (substream->bytes_left) {
 8004f2e:	688a      	ldr	r2, [r1, #8]
{
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4605      	mov	r5, r0
 8004f34:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 8004f36:	b91a      	cbnz	r2, 8004f40 <pb_close_string_substream+0x12>
    stream->state = substream->state;
 8004f38:	6863      	ldr	r3, [r4, #4]
    return true;
 8004f3a:	2001      	movs	r0, #1
    stream->state = substream->state;
 8004f3c:	606b      	str	r3, [r5, #4]
}
 8004f3e:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 8004f40:	2100      	movs	r1, #0
 8004f42:	4620      	mov	r0, r4
 8004f44:	f7ff fe82 	bl	8004c4c <pb_read>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	d1f5      	bne.n	8004f38 <pb_close_string_substream+0xa>
 8004f4c:	e7f7      	b.n	8004f3e <pb_close_string_substream+0x10>
	...

08004f50 <decode_field>:
{
 8004f50:	460b      	mov	r3, r1
    switch (PB_ATYPE(iter->pos->type))
 8004f52:	6851      	ldr	r1, [r2, #4]
{
 8004f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f58:	4615      	mov	r5, r2
    switch (PB_ATYPE(iter->pos->type))
 8004f5a:	788a      	ldrb	r2, [r1, #2]
{
 8004f5c:	b087      	sub	sp, #28
 8004f5e:	4606      	mov	r6, r0
    switch (PB_ATYPE(iter->pos->type))
 8004f60:	f012 04c0 	ands.w	r4, r2, #192	; 0xc0
 8004f64:	d003      	beq.n	8004f6e <decode_field+0x1e>
 8004f66:	2c40      	cmp	r4, #64	; 0x40
 8004f68:	d070      	beq.n	800504c <decode_field+0xfc>
                    PB_RETURN_ERROR(stream, "array overflow");
 8004f6a:	2400      	movs	r4, #0
 8004f6c:	e00c      	b.n	8004f88 <decode_field+0x38>
    func = PB_DECODERS[PB_LTYPE(type)];
 8004f6e:	f002 0c0f 	and.w	ip, r2, #15
 8004f72:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8004f76:	4f61      	ldr	r7, [pc, #388]	; (80050fc <decode_field+0x1ac>)
    switch (PB_HTYPE(type))
 8004f78:	2a20      	cmp	r2, #32
    func = PB_DECODERS[PB_LTYPE(type)];
 8004f7a:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
    switch (PB_HTYPE(type))
 8004f7e:	d02a      	beq.n	8004fd6 <decode_field+0x86>
 8004f80:	d806      	bhi.n	8004f90 <decode_field+0x40>
 8004f82:	b1d2      	cbz	r2, 8004fba <decode_field+0x6a>
 8004f84:	2a10      	cmp	r2, #16
 8004f86:	d01e      	beq.n	8004fc6 <decode_field+0x76>
}
 8004f88:	4620      	mov	r0, r4
 8004f8a:	b007      	add	sp, #28
 8004f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch (PB_HTYPE(type))
 8004f90:	2a30      	cmp	r2, #48	; 0x30
 8004f92:	d1f9      	bne.n	8004f88 <decode_field+0x38>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8004f94:	880a      	ldrh	r2, [r1, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8004f96:	f1bc 0f07 	cmp.w	ip, #7
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8004f9a:	696b      	ldr	r3, [r5, #20]
 8004f9c:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8004f9e:	d109      	bne.n	8004fb4 <decode_field+0x64>
                memset(iter->pData, 0, iter->pos->data_size);
 8004fa0:	890a      	ldrh	r2, [r1, #8]
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	6928      	ldr	r0, [r5, #16]
 8004fa6:	f005 fa2a 	bl	800a3fe <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 8004faa:	686b      	ldr	r3, [r5, #4]
 8004fac:	6929      	ldr	r1, [r5, #16]
 8004fae:	68d8      	ldr	r0, [r3, #12]
 8004fb0:	f7ff fde6 	bl	8004b80 <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 8004fb4:	692a      	ldr	r2, [r5, #16]
 8004fb6:	6869      	ldr	r1, [r5, #4]
 8004fb8:	e00b      	b.n	8004fd2 <decode_field+0x82>
            return func(stream, iter->pos, iter->pData);
 8004fba:	692a      	ldr	r2, [r5, #16]
            return func(stream, iter->pos, iter->pData);
 8004fbc:	463b      	mov	r3, r7
}
 8004fbe:	b007      	add	sp, #28
 8004fc0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return func(stream, iter->pos, iter->pData);
 8004fc4:	4718      	bx	r3
            if (iter->pSize != iter->pData)
 8004fc6:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8004fca:	4293      	cmp	r3, r2
                *(bool*)iter->pSize = true;
 8004fcc:	bf1c      	itt	ne
 8004fce:	2001      	movne	r0, #1
 8004fd0:	7018      	strbne	r0, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	e7f2      	b.n	8004fbc <decode_field+0x6c>
            if (wire_type == PB_WT_STRING
 8004fd6:	2b02      	cmp	r3, #2
            if (iter->pSize != iter->pData)
 8004fd8:	f8d5 8014 	ldr.w	r8, [r5, #20]
            if (wire_type == PB_WT_STRING
 8004fdc:	d129      	bne.n	8005032 <decode_field+0xe2>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8004fde:	f1bc 0f04 	cmp.w	ip, #4
 8004fe2:	d826      	bhi.n	8005032 <decode_field+0xe2>
                if (!pb_make_string_substream(stream, &substream))
 8004fe4:	a903      	add	r1, sp, #12
 8004fe6:	f7ff ff8a 	bl	8004efe <pb_make_string_substream>
 8004fea:	4604      	mov	r4, r0
 8004fec:	2800      	cmp	r0, #0
 8004fee:	d0bc      	beq.n	8004f6a <decode_field+0x1a>
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 8004ff0:	9b05      	ldr	r3, [sp, #20]
 8004ff2:	b12b      	cbz	r3, 8005000 <decode_field+0xb0>
 8004ff4:	6869      	ldr	r1, [r5, #4]
 8004ff6:	f8b8 3000 	ldrh.w	r3, [r8]
 8004ffa:	894a      	ldrh	r2, [r1, #10]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d809      	bhi.n	8005014 <decode_field+0xc4>
                if (substream.bytes_left != 0)
 8005000:	9b05      	ldr	r3, [sp, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1b1      	bne.n	8004f6a <decode_field+0x1a>
                if (!pb_close_string_substream(stream, &substream))
 8005006:	a903      	add	r1, sp, #12
 8005008:	4630      	mov	r0, r6
 800500a:	f7ff ff90 	bl	8004f2e <pb_close_string_substream>
 800500e:	2800      	cmp	r0, #0
 8005010:	d1ba      	bne.n	8004f88 <decode_field+0x38>
 8005012:	e7aa      	b.n	8004f6a <decode_field+0x1a>
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8005014:	8908      	ldrh	r0, [r1, #8]
 8005016:	692a      	ldr	r2, [r5, #16]
                    if (!func(&substream, iter->pos, pItem))
 8005018:	fb03 2200 	mla	r2, r3, r0, r2
 800501c:	a803      	add	r0, sp, #12
 800501e:	47b8      	blx	r7
 8005020:	b128      	cbz	r0, 800502e <decode_field+0xde>
                    (*size)++;
 8005022:	f8b8 3000 	ldrh.w	r3, [r8]
 8005026:	3301      	adds	r3, #1
 8005028:	f8a8 3000 	strh.w	r3, [r8]
 800502c:	e7e0      	b.n	8004ff0 <decode_field+0xa0>
                        status = false;
 800502e:	4604      	mov	r4, r0
 8005030:	e7e6      	b.n	8005000 <decode_field+0xb0>
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8005032:	f8b8 3000 	ldrh.w	r3, [r8]
 8005036:	692a      	ldr	r2, [r5, #16]
                if ((*size)++ >= iter->pos->array_size)
 8005038:	1c5c      	adds	r4, r3, #1
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800503a:	8908      	ldrh	r0, [r1, #8]
                if ((*size)++ >= iter->pos->array_size)
 800503c:	f8a8 4000 	strh.w	r4, [r8]
 8005040:	894c      	ldrh	r4, [r1, #10]
 8005042:	429c      	cmp	r4, r3
 8005044:	d991      	bls.n	8004f6a <decode_field+0x1a>
                return func(stream, iter->pos, pItem);
 8005046:	fb03 2200 	mla	r2, r3, r0, r2
 800504a:	e7c2      	b.n	8004fd2 <decode_field+0x82>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 800504c:	692f      	ldr	r7, [r5, #16]
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 800504e:	b10f      	cbz	r7, 8005054 <decode_field+0x104>
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	b932      	cbnz	r2, 8005062 <decode_field+0x112>
        return pb_skip_field(stream, wire_type);
 8005054:	4619      	mov	r1, r3
 8005056:	4630      	mov	r0, r6
}
 8005058:	b007      	add	sp, #28
 800505a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return pb_skip_field(stream, wire_type);
 800505e:	f7ff bf26 	b.w	8004eae <pb_skip_field>
    if (wire_type == PB_WT_STRING)
 8005062:	2b02      	cmp	r3, #2
    void **arg = &(pCallback->arg);
 8005064:	f107 0804 	add.w	r8, r7, #4
    if (wire_type == PB_WT_STRING)
 8005068:	d116      	bne.n	8005098 <decode_field+0x148>
        if (!pb_make_string_substream(stream, &substream))
 800506a:	a903      	add	r1, sp, #12
 800506c:	f7ff ff47 	bl	8004efe <pb_make_string_substream>
 8005070:	2800      	cmp	r0, #0
 8005072:	f43f af7a 	beq.w	8004f6a <decode_field+0x1a>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	4642      	mov	r2, r8
 800507a:	6869      	ldr	r1, [r5, #4]
 800507c:	a803      	add	r0, sp, #12
 800507e:	4798      	blx	r3
 8005080:	2800      	cmp	r0, #0
 8005082:	f43f af72 	beq.w	8004f6a <decode_field+0x1a>
        } while (substream.bytes_left);
 8005086:	9b05      	ldr	r3, [sp, #20]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f4      	bne.n	8005076 <decode_field+0x126>
        if (!pb_close_string_substream(stream, &substream))
 800508c:	a903      	add	r1, sp, #12
 800508e:	4630      	mov	r0, r6
 8005090:	f7ff ff4d 	bl	8004f2e <pb_close_string_substream>
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8005094:	4604      	mov	r4, r0
 8005096:	e777      	b.n	8004f88 <decode_field+0x38>
    switch (wire_type)
 8005098:	2b01      	cmp	r3, #1
 800509a:	d021      	beq.n	80050e0 <decode_field+0x190>
 800509c:	2b05      	cmp	r3, #5
 800509e:	d027      	beq.n	80050f0 <decode_field+0x1a0>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f47f af62 	bne.w	8004f6a <decode_field+0x1a>
 80050a6:	461c      	mov	r4, r3
 80050a8:	46e9      	mov	r9, sp
                (*size)++;
 80050aa:	3401      	adds	r4, #1
                if (*size > max_size) return false;
 80050ac:	2c0b      	cmp	r4, #11
 80050ae:	f43f af5c 	beq.w	8004f6a <decode_field+0x1a>
                if (!pb_read(stream, buf, 1)) return false;
 80050b2:	2201      	movs	r2, #1
 80050b4:	4649      	mov	r1, r9
 80050b6:	4630      	mov	r0, r6
 80050b8:	f7ff fdc8 	bl	8004c4c <pb_read>
 80050bc:	2800      	cmp	r0, #0
 80050be:	f43f af54 	beq.w	8004f6a <decode_field+0x1a>
            } while (*buf++ & 0x80);
 80050c2:	f919 3b01 	ldrsb.w	r3, [r9], #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	dbef      	blt.n	80050aa <decode_field+0x15a>
        substream = pb_istream_from_buffer(buffer, size);
 80050ca:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <decode_field+0x1b0>)
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 80050cc:	4642      	mov	r2, r8
 80050ce:	6869      	ldr	r1, [r5, #4]
 80050d0:	a803      	add	r0, sp, #12
        substream = pb_istream_from_buffer(buffer, size);
 80050d2:	9303      	str	r3, [sp, #12]
 80050d4:	f8cd d010 	str.w	sp, [sp, #16]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 80050d8:	683b      	ldr	r3, [r7, #0]
        substream = pb_istream_from_buffer(buffer, size);
 80050da:	9405      	str	r4, [sp, #20]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 80050dc:	4798      	blx	r3
 80050de:	e7d9      	b.n	8005094 <decode_field+0x144>
            *size = 8;
 80050e0:	2408      	movs	r4, #8
            return pb_read(stream, buf, 8);
 80050e2:	2208      	movs	r2, #8
 80050e4:	4669      	mov	r1, sp
 80050e6:	f7ff fdb1 	bl	8004c4c <pb_read>
        if (!read_raw_value(stream, wire_type, buffer, &size))
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d1ed      	bne.n	80050ca <decode_field+0x17a>
 80050ee:	e73c      	b.n	8004f6a <decode_field+0x1a>
            return pb_read(stream, buf, 4);
 80050f0:	2204      	movs	r2, #4
 80050f2:	4669      	mov	r1, sp
            *size = 4;
 80050f4:	2404      	movs	r4, #4
            return pb_read(stream, buf, 4);
 80050f6:	f7ff fda9 	bl	8004c4c <pb_read>
 80050fa:	e7f6      	b.n	80050ea <decode_field+0x19a>
 80050fc:	0800cbb0 	.word	0x0800cbb0
 8005100:	08004ab1 	.word	0x08004ab1

08005104 <pb_decode_noinit>:
{
 8005104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8005108:	2400      	movs	r4, #0
{
 800510a:	b091      	sub	sp, #68	; 0x44
 800510c:	4605      	mov	r5, r0
    uint32_t extension_range_start = 0;
 800510e:	46a0      	mov	r8, r4
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8005110:	a804      	add	r0, sp, #16
    pb_size_t fixed_count_size = 0;
 8005112:	f8ad 4002 	strh.w	r4, [sp, #2]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8005116:	e9cd 4402 	strd	r4, r4, [sp, #8]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 800511a:	f7ff fc63 	bl	80049e4 <pb_field_iter_begin>
    while (stream->bytes_left)
 800511e:	68ab      	ldr	r3, [r5, #8]
 8005120:	b9e3      	cbnz	r3, 800515c <pb_decode_noinit+0x58>
    if (fixed_count_field != NULL &&
 8005122:	b124      	cbz	r4, 800512e <pb_decode_noinit+0x2a>
 8005124:	8962      	ldrh	r2, [r4, #10]
 8005126:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800512a:	429a      	cmp	r2, r3
 800512c:	d122      	bne.n	8005174 <pb_decode_noinit+0x70>
        } while (pb_field_iter_next(&iter));
 800512e:	a804      	add	r0, sp, #16
            last_type = iter.pos->type;
 8005130:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
 8005134:	789d      	ldrb	r5, [r3, #2]
        } while (pb_field_iter_next(&iter));
 8005136:	f7ff fc66 	bl	8004a06 <pb_field_iter_next>
 800513a:	2800      	cmp	r0, #0
 800513c:	d1f7      	bne.n	800512e <pb_decode_noinit+0x2a>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 800513e:	f015 0f30 	tst.w	r5, #48	; 0x30
 8005142:	d103      	bne.n	800514c <pb_decode_noinit+0x48>
 8005144:	9b05      	ldr	r3, [sp, #20]
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b103      	cbz	r3, 800514c <pb_decode_noinit+0x48>
            req_field_count++;
 800514a:	3401      	adds	r4, #1
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 800514c:	2c40      	cmp	r4, #64	; 0x40
 800514e:	f200 80bb 	bhi.w	80052c8 <pb_decode_noinit+0x1c4>
        if (req_field_count > 0)
 8005152:	2c00      	cmp	r4, #0
 8005154:	f040 80b9 	bne.w	80052ca <pb_decode_noinit+0x1c6>
    return true;
 8005158:	2001      	movs	r0, #1
 800515a:	e00c      	b.n	8005176 <pb_decode_noinit+0x72>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 800515c:	f10d 0301 	add.w	r3, sp, #1
 8005160:	aa01      	add	r2, sp, #4
 8005162:	4669      	mov	r1, sp
 8005164:	4628      	mov	r0, r5
 8005166:	f7ff fe88 	bl	8004e7a <pb_decode_tag>
 800516a:	b938      	cbnz	r0, 800517c <pb_decode_noinit+0x78>
            if (eof)
 800516c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1d6      	bne.n	8005122 <pb_decode_noinit+0x1e>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8005174:	2000      	movs	r0, #0
}
 8005176:	b011      	add	sp, #68	; 0x44
 8005178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 800517c:	9f01      	ldr	r7, [sp, #4]
 800517e:	a804      	add	r0, sp, #16
 8005180:	4639      	mov	r1, r7
 8005182:	f7ff fc7e 	bl	8004a82 <pb_field_iter_find>
 8005186:	2800      	cmp	r0, #0
 8005188:	d151      	bne.n	800522e <pb_decode_noinit+0x12a>
            if (tag >= extension_range_start)
 800518a:	4547      	cmp	r7, r8
 800518c:	f0c0 80a4 	bcc.w	80052d8 <pb_decode_noinit+0x1d4>
    const pb_field_t *start = iter->pos;
 8005190:	9e05      	ldr	r6, [sp, #20]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 8005192:	9a05      	ldr	r2, [sp, #20]
 8005194:	7893      	ldrb	r3, [r2, #2]
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	2b08      	cmp	r3, #8
 800519c:	f000 80a5 	beq.w	80052ea <pb_decode_noinit+0x1e6>
        (void)pb_field_iter_next(iter);
 80051a0:	a804      	add	r0, sp, #16
 80051a2:	f7ff fc30 	bl	8004a06 <pb_field_iter_next>
    } while (iter->pos != start);
 80051a6:	9b05      	ldr	r3, [sp, #20]
 80051a8:	429e      	cmp	r6, r3
 80051aa:	d1f2      	bne.n	8005192 <pb_decode_noinit+0x8e>
                    extension_range_start = (uint32_t)-1;
 80051ac:	f04f 38ff 	mov.w	r8, #4294967295
                if (tag >= extension_range_start)
 80051b0:	4547      	cmp	r7, r8
                    if (!decode_extension(stream, tag, wire_type, &iter))
 80051b2:	f89d b000 	ldrb.w	fp, [sp]
                if (tag >= extension_range_start)
 80051b6:	f0c0 808f 	bcc.w	80052d8 <pb_decode_noinit+0x1d4>
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 80051ba:	9a08      	ldr	r2, [sp, #32]
                    size_t pos = stream->bytes_left;
 80051bc:	f8d5 9008 	ldr.w	r9, [r5, #8]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 80051c0:	6816      	ldr	r6, [r2, #0]
    while (extension != NULL && pos == stream->bytes_left)
 80051c2:	68aa      	ldr	r2, [r5, #8]
 80051c4:	2e00      	cmp	r6, #0
 80051c6:	f000 8084 	beq.w	80052d2 <pb_decode_noinit+0x1ce>
 80051ca:	4591      	cmp	r9, r2
 80051cc:	d1a7      	bne.n	800511e <pb_decode_noinit+0x1a>
        if (extension->type->decode)
 80051ce:	6832      	ldr	r2, [r6, #0]
 80051d0:	f8d2 a000 	ldr.w	sl, [r2]
 80051d4:	f1ba 0f00 	cmp.w	sl, #0
 80051d8:	d008      	beq.n	80051ec <pb_decode_noinit+0xe8>
            status = extension->type->decode(stream, extension, tag, wire_type);
 80051da:	465b      	mov	r3, fp
 80051dc:	463a      	mov	r2, r7
 80051de:	4631      	mov	r1, r6
 80051e0:	4628      	mov	r0, r5
 80051e2:	47d0      	blx	sl
        if (!status)
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d0c5      	beq.n	8005174 <pb_decode_noinit+0x70>
        extension = extension->next;
 80051e8:	68b6      	ldr	r6, [r6, #8]
 80051ea:	e7ea      	b.n	80051c2 <pb_decode_noinit+0xbe>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80051ec:	f8d2 a008 	ldr.w	sl, [r2, #8]
    if (field->tag != tag)
 80051f0:	f8ba 2000 	ldrh.w	r2, [sl]
 80051f4:	4297      	cmp	r7, r2
 80051f6:	d1f7      	bne.n	80051e8 <pb_decode_noinit+0xe4>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 80051f8:	6872      	ldr	r2, [r6, #4]
 80051fa:	4651      	mov	r1, sl
 80051fc:	a80a      	add	r0, sp, #40	; 0x28
 80051fe:	f7ff fbf1 	bl	80049e4 <pb_field_iter_begin>
    iter->pData = extension->dest;
 8005202:	6872      	ldr	r2, [r6, #4]
    extension->found = true;
 8005204:	f04f 0301 	mov.w	r3, #1
    return decode_field(stream, wire_type, &iter);
 8005208:	4659      	mov	r1, fp
    iter->pData = extension->dest;
 800520a:	920e      	str	r2, [sp, #56]	; 0x38
    iter->pSize = &extension->found;
 800520c:	f106 020c 	add.w	r2, r6, #12
    return decode_field(stream, wire_type, &iter);
 8005210:	4628      	mov	r0, r5
    iter->pSize = &extension->found;
 8005212:	920f      	str	r2, [sp, #60]	; 0x3c
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005214:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8005218:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800521c:	2a80      	cmp	r2, #128	; 0x80
        iter->pData = &extension->dest;
 800521e:	bf04      	itt	eq
 8005220:	1d32      	addeq	r2, r6, #4
 8005222:	920e      	streq	r2, [sp, #56]	; 0x38
    return decode_field(stream, wire_type, &iter);
 8005224:	aa0a      	add	r2, sp, #40	; 0x28
    extension->found = true;
 8005226:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 8005228:	f7ff fe92 	bl	8004f50 <decode_field>
 800522c:	e7da      	b.n	80051e4 <pb_decode_noinit+0xe0>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 800522e:	9a05      	ldr	r2, [sp, #20]
 8005230:	7893      	ldrb	r3, [r2, #2]
 8005232:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005236:	2b20      	cmp	r3, #32
 8005238:	d119      	bne.n	800526e <pb_decode_noinit+0x16a>
            && iter.pSize == iter.pData)
 800523a:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 800523e:	4299      	cmp	r1, r3
 8005240:	d10e      	bne.n	8005260 <pb_decode_noinit+0x15c>
            if (fixed_count_field != iter.pos) {
 8005242:	42a2      	cmp	r2, r4
 8005244:	d008      	beq.n	8005258 <pb_decode_noinit+0x154>
                if (fixed_count_field != NULL &&
 8005246:	b124      	cbz	r4, 8005252 <pb_decode_noinit+0x14e>
 8005248:	8961      	ldrh	r1, [r4, #10]
 800524a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800524e:	4299      	cmp	r1, r3
 8005250:	d190      	bne.n	8005174 <pb_decode_noinit+0x70>
                fixed_count_size = 0;
 8005252:	2300      	movs	r3, #0
 8005254:	f8ad 3002 	strh.w	r3, [sp, #2]
            iter.pSize = &fixed_count_size;
 8005258:	f10d 0302 	add.w	r3, sp, #2
 800525c:	4614      	mov	r4, r2
 800525e:	9309      	str	r3, [sp, #36]	; 0x24
        if (!decode_field(stream, wire_type, &iter))
 8005260:	aa04      	add	r2, sp, #16
 8005262:	f89d 1000 	ldrb.w	r1, [sp]
 8005266:	4628      	mov	r0, r5
 8005268:	f7ff fe72 	bl	8004f50 <decode_field>
 800526c:	e039      	b.n	80052e2 <pb_decode_noinit+0x1de>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f6      	bne.n	8005260 <pb_decode_noinit+0x15c>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8005272:	9a06      	ldr	r2, [sp, #24]
 8005274:	2a3f      	cmp	r2, #63	; 0x3f
 8005276:	d8f3      	bhi.n	8005260 <pb_decode_noinit+0x15c>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8005278:	0951      	lsrs	r1, r2, #5
 800527a:	ab10      	add	r3, sp, #64	; 0x40
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 800527c:	f002 021f 	and.w	r2, r2, #31
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8005280:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8005284:	2301      	movs	r3, #1
 8005286:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8005288:	f851 2c38 	ldr.w	r2, [r1, #-56]
 800528c:	4313      	orrs	r3, r2
 800528e:	f841 3c38 	str.w	r3, [r1, #-56]
 8005292:	e7e5      	b.n	8005260 <pb_decode_noinit+0x15c>
                if (fields_seen[i] != allbits)
 8005294:	f851 0b04 	ldr.w	r0, [r1], #4
 8005298:	3001      	adds	r0, #1
 800529a:	f47f af6b 	bne.w	8005174 <pb_decode_noinit+0x70>
            for (i = 0; i < (req_field_count >> 5); i++)
 800529e:	3201      	adds	r2, #1
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d1f7      	bne.n	8005294 <pb_decode_noinit+0x190>
            if ((req_field_count & 31) != 0)
 80052a4:	f014 041f 	ands.w	r4, r4, #31
 80052a8:	f43f af56 	beq.w	8005158 <pb_decode_noinit+0x54>
                if (fields_seen[req_field_count >> 5] !=
 80052ac:	aa10      	add	r2, sp, #64	; 0x40
                    (allbits >> (32 - (req_field_count & 31))))
 80052ae:	f1c4 0420 	rsb	r4, r4, #32
 80052b2:	f04f 30ff 	mov.w	r0, #4294967295
                if (fields_seen[req_field_count >> 5] !=
 80052b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 80052ba:	40e0      	lsrs	r0, r4
                if (fields_seen[req_field_count >> 5] !=
 80052bc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80052c0:	1ac3      	subs	r3, r0, r3
 80052c2:	4258      	negs	r0, r3
 80052c4:	4158      	adcs	r0, r3
 80052c6:	e756      	b.n	8005176 <pb_decode_noinit+0x72>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 80052c8:	2440      	movs	r4, #64	; 0x40
            for (i = 0; i < (req_field_count >> 5); i++)
 80052ca:	0963      	lsrs	r3, r4, #5
 80052cc:	a902      	add	r1, sp, #8
 80052ce:	2200      	movs	r2, #0
 80052d0:	e7e6      	b.n	80052a0 <pb_decode_noinit+0x19c>
                    if (pos != stream->bytes_left)
 80052d2:	4591      	cmp	r9, r2
 80052d4:	f47f af23 	bne.w	800511e <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 80052d8:	f89d 1000 	ldrb.w	r1, [sp]
 80052dc:	4628      	mov	r0, r5
 80052de:	f7ff fde6 	bl	8004eae <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 80052e2:	2800      	cmp	r0, #0
 80052e4:	f47f af1b 	bne.w	800511e <pb_decode_noinit+0x1a>
 80052e8:	e744      	b.n	8005174 <pb_decode_noinit+0x70>
                    extension_range_start = iter.pos->tag;
 80052ea:	f8b2 8000 	ldrh.w	r8, [r2]
 80052ee:	e75f      	b.n	80051b0 <pb_decode_noinit+0xac>

080052f0 <pb_decode>:
{
 80052f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052f2:	460c      	mov	r4, r1
 80052f4:	4605      	mov	r5, r0
    pb_message_set_to_defaults(fields, dest_struct);
 80052f6:	4611      	mov	r1, r2
 80052f8:	9201      	str	r2, [sp, #4]
 80052fa:	4620      	mov	r0, r4
 80052fc:	f7ff fc40 	bl	8004b80 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 8005300:	9a01      	ldr	r2, [sp, #4]
 8005302:	4621      	mov	r1, r4
 8005304:	4628      	mov	r0, r5
}
 8005306:	b003      	add	sp, #12
 8005308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 800530c:	f7ff befa 	b.w	8005104 <pb_decode_noinit>

08005310 <pb_dec_submessage>:
{
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	460c      	mov	r4, r1
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 8005316:	68ce      	ldr	r6, [r1, #12]
{
 8005318:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 800531a:	a903      	add	r1, sp, #12
{
 800531c:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 800531e:	f7ff fdee 	bl	8004efe <pb_make_string_substream>
 8005322:	b188      	cbz	r0, 8005348 <pb_dec_submessage+0x38>
    if (field->ptr == NULL)
 8005324:	68e3      	ldr	r3, [r4, #12]
 8005326:	b17b      	cbz	r3, 8005348 <pb_dec_submessage+0x38>
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8005328:	78a3      	ldrb	r3, [r4, #2]
        status = pb_decode(&substream, submsg_fields, dest);
 800532a:	4631      	mov	r1, r6
 800532c:	a803      	add	r0, sp, #12
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800532e:	9a01      	ldr	r2, [sp, #4]
 8005330:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005334:	2b20      	cmp	r3, #32
 8005336:	d10b      	bne.n	8005350 <pb_dec_submessage+0x40>
        status = pb_decode(&substream, submsg_fields, dest);
 8005338:	f7ff ffda 	bl	80052f0 <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 800533c:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 800533e:	a903      	add	r1, sp, #12
 8005340:	4628      	mov	r0, r5
 8005342:	f7ff fdf4 	bl	8004f2e <pb_close_string_substream>
 8005346:	b900      	cbnz	r0, 800534a <pb_dec_submessage+0x3a>
        return false;
 8005348:	2400      	movs	r4, #0
}
 800534a:	4620      	mov	r0, r4
 800534c:	b006      	add	sp, #24
 800534e:	bd70      	pop	{r4, r5, r6, pc}
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8005350:	f7ff fed8 	bl	8005104 <pb_decode_noinit>
 8005354:	e7f2      	b.n	800533c <pb_dec_submessage+0x2c>

08005356 <pb_decode_delimited>:
{
 8005356:	b530      	push	{r4, r5, lr}
 8005358:	b087      	sub	sp, #28
 800535a:	460c      	mov	r4, r1
 800535c:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 800535e:	a903      	add	r1, sp, #12
{
 8005360:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 8005362:	f7ff fdcc 	bl	8004efe <pb_make_string_substream>
 8005366:	b150      	cbz	r0, 800537e <pb_decode_delimited+0x28>
    status = pb_decode(&substream, fields, dest_struct);
 8005368:	4621      	mov	r1, r4
 800536a:	9a01      	ldr	r2, [sp, #4]
 800536c:	a803      	add	r0, sp, #12
 800536e:	f7ff ffbf 	bl	80052f0 <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 8005372:	a903      	add	r1, sp, #12
    status = pb_decode(&substream, fields, dest_struct);
 8005374:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8005376:	4628      	mov	r0, r5
 8005378:	f7ff fdd9 	bl	8004f2e <pb_close_string_substream>
 800537c:	b900      	cbnz	r0, 8005380 <pb_decode_delimited+0x2a>
        return false;
 800537e:	2400      	movs	r4, #0
}
 8005380:	4620      	mov	r0, r4
 8005382:	b007      	add	sp, #28
 8005384:	bd30      	pop	{r4, r5, pc}

08005386 <pb_decode_svarint>:
{
 8005386:	b513      	push	{r0, r1, r4, lr}
 8005388:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 800538a:	4669      	mov	r1, sp
 800538c:	f7ff fcee 	bl	8004d6c <pb_decode_varint>
 8005390:	b160      	cbz	r0, 80053ac <pb_decode_svarint+0x26>
    if (value & 1)
 8005392:	e9dd 1300 	ldrd	r1, r3, [sp]
        *dest = (pb_int64_t)(~(value >> 1));
 8005396:	084a      	lsrs	r2, r1, #1
    if (value & 1)
 8005398:	07c9      	lsls	r1, r1, #31
        *dest = (pb_int64_t)(~(value >> 1));
 800539a:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800539e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80053a2:	bf44      	itt	mi
 80053a4:	43d2      	mvnmi	r2, r2
 80053a6:	43db      	mvnmi	r3, r3
        *dest = (pb_int64_t)(value >> 1);
 80053a8:	e9c4 2300 	strd	r2, r3, [r4]
}
 80053ac:	b002      	add	sp, #8
 80053ae:	bd10      	pop	{r4, pc}

080053b0 <pb_dec_svarint>:
{
 80053b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053b2:	460d      	mov	r5, r1
    if (!pb_decode_svarint(stream, &value))
 80053b4:	4669      	mov	r1, sp
{
 80053b6:	4614      	mov	r4, r2
    if (!pb_decode_svarint(stream, &value))
 80053b8:	f7ff ffe5 	bl	8005386 <pb_decode_svarint>
 80053bc:	b170      	cbz	r0, 80053dc <pb_dec_svarint+0x2c>
    if (field->data_size == sizeof(pb_int64_t))
 80053be:	892b      	ldrh	r3, [r5, #8]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d10d      	bne.n	80053e0 <pb_dec_svarint+0x30>
        clamped = *(pb_int64_t*)dest = value;
 80053c4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80053c8:	e9c4 3200 	strd	r3, r2, [r4]
    if (clamped != value)
 80053cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053d0:	4291      	cmp	r1, r2
 80053d2:	bf08      	it	eq
 80053d4:	4298      	cmpeq	r0, r3
 80053d6:	bf0c      	ite	eq
 80053d8:	2001      	moveq	r0, #1
 80053da:	2000      	movne	r0, #0
}
 80053dc:	b003      	add	sp, #12
 80053de:	bd30      	pop	{r4, r5, pc}
    else if (field->data_size == sizeof(int32_t))
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d103      	bne.n	80053ec <pb_dec_svarint+0x3c>
        clamped = *(int32_t*)dest = (int32_t)value;
 80053e4:	9b00      	ldr	r3, [sp, #0]
 80053e6:	6023      	str	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 80053e8:	17da      	asrs	r2, r3, #31
 80053ea:	e7ef      	b.n	80053cc <pb_dec_svarint+0x1c>
    else if (field->data_size == sizeof(int_least16_t))
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d103      	bne.n	80053f8 <pb_dec_svarint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 80053f0:	f9bd 3000 	ldrsh.w	r3, [sp]
 80053f4:	8023      	strh	r3, [r4, #0]
 80053f6:	e7f7      	b.n	80053e8 <pb_dec_svarint+0x38>
    else if (field->data_size == sizeof(int_least8_t))
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d103      	bne.n	8005404 <pb_dec_svarint+0x54>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 80053fc:	f99d 3000 	ldrsb.w	r3, [sp]
 8005400:	7023      	strb	r3, [r4, #0]
 8005402:	e7f1      	b.n	80053e8 <pb_dec_svarint+0x38>
        return false;
 8005404:	2000      	movs	r0, #0
 8005406:	e7e9      	b.n	80053dc <pb_dec_svarint+0x2c>

08005408 <pb_decode_fixed32>:
    if (!pb_read(stream, bytes, 4))
 8005408:	2204      	movs	r2, #4
{
 800540a:	b513      	push	{r0, r1, r4, lr}
 800540c:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 800540e:	eb0d 0102 	add.w	r1, sp, r2
 8005412:	f7ff fc1b 	bl	8004c4c <pb_read>
 8005416:	b108      	cbz	r0, 800541c <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 8005418:	9b01      	ldr	r3, [sp, #4]
 800541a:	6023      	str	r3, [r4, #0]
}
 800541c:	b002      	add	sp, #8
 800541e:	bd10      	pop	{r4, pc}

08005420 <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 8005420:	4611      	mov	r1, r2
 8005422:	f7ff bff1 	b.w	8005408 <pb_decode_fixed32>

08005426 <pb_decode_fixed64>:
{
 8005426:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 8005428:	2208      	movs	r2, #8
{
 800542a:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 800542c:	4669      	mov	r1, sp
 800542e:	f7ff fc0d 	bl	8004c4c <pb_read>
 8005432:	b118      	cbz	r0, 800543c <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 8005434:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005438:	e9c4 2300 	strd	r2, r3, [r4]
}
 800543c:	b002      	add	sp, #8
 800543e:	bd10      	pop	{r4, pc}

08005440 <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 8005440:	4611      	mov	r1, r2
 8005442:	f7ff bff0 	b.w	8005426 <pb_decode_fixed64>

08005446 <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 8005446:	b510      	push	{r4, lr}
 8005448:	460a      	mov	r2, r1
    pb_type_t type = field->type;
 800544a:	7881      	ldrb	r1, [r0, #2]
{
 800544c:	b086      	sub	sp, #24
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800544e:	f011 0330 	ands.w	r3, r1, #48	; 0x30
 8005452:	d03f      	beq.n	80054d4 <pb_check_proto3_default_value+0x8e>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8005454:	2b20      	cmp	r3, #32
    const void *pSize = (const char*)pData + field->size_offset;
 8005456:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800545a:	d104      	bne.n	8005466 <pb_check_proto3_default_value+0x20>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 800545c:	5b10      	ldrh	r0, [r2, r4]
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
            return bytes->size == 0;
 800545e:	fab0 f080 	clz	r0, r0
 8005462:	0940      	lsrs	r0, r0, #5
 8005464:	e007      	b.n	8005476 <pb_check_proto3_default_value+0x30>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8005466:	2b30      	cmp	r3, #48	; 0x30
 8005468:	d0f8      	beq.n	800545c <pb_check_proto3_default_value+0x16>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 800546a:	2b10      	cmp	r3, #16
 800546c:	d105      	bne.n	800547a <pb_check_proto3_default_value+0x34>
 800546e:	b124      	cbz	r4, 800547a <pb_check_proto3_default_value+0x34>
        return *(const bool*)pSize == false;
 8005470:	5d10      	ldrb	r0, [r2, r4]
 8005472:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 8005476:	b006      	add	sp, #24
 8005478:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800547a:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 800547e:	d005      	beq.n	800548c <pb_check_proto3_default_value+0x46>
 8005480:	8903      	ldrh	r3, [r0, #8]
 8005482:	4413      	add	r3, r2
	    for (i = 0; i < field->data_size; i++)
 8005484:	4293      	cmp	r3, r2
 8005486:	d121      	bne.n	80054cc <pb_check_proto3_default_value+0x86>
	    return true;
 8005488:	2001      	movs	r0, #1
 800548a:	e7f4      	b.n	8005476 <pb_check_proto3_default_value+0x30>
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 800548c:	f001 030f 	and.w	r3, r1, #15
 8005490:	2b05      	cmp	r3, #5
 8005492:	d101      	bne.n	8005498 <pb_check_proto3_default_value+0x52>
            return bytes->size == 0;
 8005494:	8810      	ldrh	r0, [r2, #0]
 8005496:	e7e2      	b.n	800545e <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8005498:	2b06      	cmp	r3, #6
 800549a:	d101      	bne.n	80054a0 <pb_check_proto3_default_value+0x5a>
            return *(const char*)pData == '\0';
 800549c:	7810      	ldrb	r0, [r2, #0]
 800549e:	e7de      	b.n	800545e <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 80054a0:	2b09      	cmp	r3, #9
 80054a2:	d101      	bne.n	80054a8 <pb_check_proto3_default_value+0x62>
            return field->data_size == 0;
 80054a4:	8900      	ldrh	r0, [r0, #8]
 80054a6:	e7da      	b.n	800545e <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 80054a8:	2b07      	cmp	r3, #7
 80054aa:	d1e9      	bne.n	8005480 <pb_check_proto3_default_value+0x3a>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 80054ac:	68c1      	ldr	r1, [r0, #12]
 80054ae:	4668      	mov	r0, sp
 80054b0:	f7ff fa98 	bl	80049e4 <pb_field_iter_begin>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d0e7      	beq.n	8005488 <pb_check_proto3_default_value+0x42>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 80054b8:	9904      	ldr	r1, [sp, #16]
 80054ba:	9801      	ldr	r0, [sp, #4]
 80054bc:	f7ff ffc3 	bl	8005446 <pb_check_proto3_default_value>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d0d8      	beq.n	8005476 <pb_check_proto3_default_value+0x30>
                } while (pb_field_iter_next(&iter));
 80054c4:	4668      	mov	r0, sp
 80054c6:	f7ff fa9e 	bl	8004a06 <pb_field_iter_next>
 80054ca:	e7f3      	b.n	80054b4 <pb_check_proto3_default_value+0x6e>
	        if (p[i] != 0)
 80054cc:	f812 1b01 	ldrb.w	r1, [r2], #1
 80054d0:	2900      	cmp	r1, #0
 80054d2:	d0d7      	beq.n	8005484 <pb_check_proto3_default_value+0x3e>
        return false;
 80054d4:	2000      	movs	r0, #0
 80054d6:	e7ce      	b.n	8005476 <pb_check_proto3_default_value+0x30>

080054d8 <pb_write>:
{
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 80054da:	6806      	ldr	r6, [r0, #0]
{
 80054dc:	4604      	mov	r4, r0
 80054de:	4615      	mov	r5, r2
        if (stream->bytes_written + count > stream->max_size)
 80054e0:	68c3      	ldr	r3, [r0, #12]
    if (stream->callback != NULL)
 80054e2:	b926      	cbnz	r6, 80054ee <pb_write+0x16>
    stream->bytes_written += count;
 80054e4:	68e3      	ldr	r3, [r4, #12]
    return true;
 80054e6:	2001      	movs	r0, #1
    stream->bytes_written += count;
 80054e8:	442b      	add	r3, r5
 80054ea:	60e3      	str	r3, [r4, #12]
}
 80054ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (stream->bytes_written + count > stream->max_size)
 80054ee:	4413      	add	r3, r2
 80054f0:	6887      	ldr	r7, [r0, #8]
 80054f2:	429f      	cmp	r7, r3
 80054f4:	d201      	bcs.n	80054fa <pb_write+0x22>
            PB_RETURN_ERROR(stream, "stream full");
 80054f6:	2000      	movs	r0, #0
 80054f8:	e7f8      	b.n	80054ec <pb_write+0x14>
        if (!stream->callback(stream, buf, count))
 80054fa:	47b0      	blx	r6
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d1f1      	bne.n	80054e4 <pb_write+0xc>
 8005500:	e7f9      	b.n	80054f6 <pb_write+0x1e>

08005502 <pb_encode_varint>:
bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 8005502:	2a80      	cmp	r2, #128	; 0x80
 8005504:	f173 0100 	sbcs.w	r1, r3, #0
{
 8005508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800550a:	4605      	mov	r5, r0
 800550c:	b085      	sub	sp, #20
    if (value <= 0x7F)
 800550e:	d207      	bcs.n	8005520 <pb_encode_varint+0x1e>
    {
        pb_byte_t v = (pb_byte_t)value;
 8005510:	f88d 2004 	strb.w	r2, [sp, #4]
        return pb_write(stream, &v, 1);
 8005514:	a901      	add	r1, sp, #4
 8005516:	2201      	movs	r2, #1
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 8005518:	f7ff ffde 	bl	80054d8 <pb_write>
}
 800551c:	b005      	add	sp, #20
 800551e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005520:	ae01      	add	r6, sp, #4
    size_t i = 0;
 8005522:	2400      	movs	r4, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8005524:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8005528:	b2d0      	uxtb	r0, r2
 800552a:	f806 1b01 	strb.w	r1, [r6], #1
        value >>= 7;
 800552e:	09d1      	lsrs	r1, r2, #7
 8005530:	ea41 6243 	orr.w	r2, r1, r3, lsl #25
 8005534:	4621      	mov	r1, r4
 8005536:	09db      	lsrs	r3, r3, #7
        i++;
 8005538:	3401      	adds	r4, #1
    while (value)
 800553a:	ea52 0703 	orrs.w	r7, r2, r3
 800553e:	d1f1      	bne.n	8005524 <pb_encode_varint+0x22>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8005540:	f101 0310 	add.w	r3, r1, #16
 8005544:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    return pb_write(stream, buffer, i);
 8005548:	a901      	add	r1, sp, #4
 800554a:	4628      	mov	r0, r5
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 800554c:	446b      	add	r3, sp
 800554e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    return pb_write(stream, buffer, i);
 8005552:	4622      	mov	r2, r4
 8005554:	e7e0      	b.n	8005518 <pb_encode_varint+0x16>

08005556 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
 8005556:	890b      	ldrh	r3, [r1, #8]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d104      	bne.n	8005566 <pb_enc_uvarint+0x10>
        value = *(const uint_least8_t*)src;
 800555c:	7811      	ldrb	r1, [r2, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
 800555e:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 8005560:	460a      	mov	r2, r1
 8005562:	f7ff bfce 	b.w	8005502 <pb_encode_varint>
    else if (field->data_size == sizeof(uint_least16_t))
 8005566:	2b02      	cmp	r3, #2
 8005568:	d101      	bne.n	800556e <pb_enc_uvarint+0x18>
        value = *(const uint_least16_t*)src;
 800556a:	8811      	ldrh	r1, [r2, #0]
 800556c:	e7f7      	b.n	800555e <pb_enc_uvarint+0x8>
    else if (field->data_size == sizeof(uint32_t))
 800556e:	2b04      	cmp	r3, #4
 8005570:	d101      	bne.n	8005576 <pb_enc_uvarint+0x20>
        value = *(const uint32_t*)src;
 8005572:	6811      	ldr	r1, [r2, #0]
 8005574:	e7f3      	b.n	800555e <pb_enc_uvarint+0x8>
    else if (field->data_size == sizeof(pb_uint64_t))
 8005576:	2b08      	cmp	r3, #8
 8005578:	d102      	bne.n	8005580 <pb_enc_uvarint+0x2a>
        value = *(const pb_uint64_t*)src;
 800557a:	e9d2 1300 	ldrd	r1, r3, [r2]
 800557e:	e7ef      	b.n	8005560 <pb_enc_uvarint+0xa>
}
 8005580:	2000      	movs	r0, #0
 8005582:	4770      	bx	lr

08005584 <pb_enc_varint>:
{
 8005584:	4613      	mov	r3, r2
    if (field->data_size == sizeof(int_least8_t))
 8005586:	890a      	ldrh	r2, [r1, #8]
 8005588:	2a01      	cmp	r2, #1
 800558a:	d104      	bne.n	8005596 <pb_enc_varint+0x12>
        value = *(const int_least8_t*)src;
 800558c:	f993 2000 	ldrsb.w	r2, [r3]
        value = *(const int_least16_t*)src;
 8005590:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 8005592:	f7ff bfb6 	b.w	8005502 <pb_encode_varint>
    else if (field->data_size == sizeof(int_least16_t))
 8005596:	2a02      	cmp	r2, #2
 8005598:	d102      	bne.n	80055a0 <pb_enc_varint+0x1c>
        value = *(const int_least16_t*)src;
 800559a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800559e:	e7f7      	b.n	8005590 <pb_enc_varint+0xc>
    else if (field->data_size == sizeof(int32_t))
 80055a0:	2a04      	cmp	r2, #4
 80055a2:	d101      	bne.n	80055a8 <pb_enc_varint+0x24>
        value = *(const int32_t*)src;
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	e7f3      	b.n	8005590 <pb_enc_varint+0xc>
    else if (field->data_size == sizeof(pb_int64_t))
 80055a8:	2a08      	cmp	r2, #8
 80055aa:	d102      	bne.n	80055b2 <pb_enc_varint+0x2e>
        value = *(const pb_int64_t*)src;
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	e7ef      	b.n	8005592 <pb_enc_varint+0xe>
}
 80055b2:	2000      	movs	r0, #0
 80055b4:	4770      	bx	lr

080055b6 <pb_encode_svarint>:
        zigzagged = ~((pb_uint64_t)value << 1);
 80055b6:	1892      	adds	r2, r2, r2
 80055b8:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
 80055bc:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
 80055c0:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
 80055c4:	f7ff bf9d 	b.w	8005502 <pb_encode_varint>

080055c8 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80055c8:	4613      	mov	r3, r2
    pb_int64_t value = 0;
    
    if (field->data_size == sizeof(int_least8_t))
 80055ca:	890a      	ldrh	r2, [r1, #8]
 80055cc:	2a01      	cmp	r2, #1
 80055ce:	d104      	bne.n	80055da <pb_enc_svarint+0x12>
        value = *(const int_least8_t*)src;
 80055d0:	f993 2000 	ldrsb.w	r2, [r3]
    else if (field->data_size == sizeof(int_least16_t))
        value = *(const int_least16_t*)src;
 80055d4:	17d3      	asrs	r3, r2, #31
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_svarint(stream, value);
 80055d6:	f7ff bfee 	b.w	80055b6 <pb_encode_svarint>
    else if (field->data_size == sizeof(int_least16_t))
 80055da:	2a02      	cmp	r2, #2
 80055dc:	d102      	bne.n	80055e4 <pb_enc_svarint+0x1c>
        value = *(const int_least16_t*)src;
 80055de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80055e2:	e7f7      	b.n	80055d4 <pb_enc_svarint+0xc>
    else if (field->data_size == sizeof(int32_t))
 80055e4:	2a04      	cmp	r2, #4
 80055e6:	d101      	bne.n	80055ec <pb_enc_svarint+0x24>
        value = *(const int32_t*)src;
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	e7f3      	b.n	80055d4 <pb_enc_svarint+0xc>
    else if (field->data_size == sizeof(pb_int64_t))
 80055ec:	2a08      	cmp	r2, #8
 80055ee:	d102      	bne.n	80055f6 <pb_enc_svarint+0x2e>
        value = *(const pb_int64_t*)src;
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	e7ef      	b.n	80055d6 <pb_enc_svarint+0xe>
}
 80055f6:	2000      	movs	r0, #0
 80055f8:	4770      	bx	lr

080055fa <pb_encode_fixed32>:
{
 80055fa:	b507      	push	{r0, r1, r2, lr}
    return pb_write(stream, bytes, 4);
 80055fc:	2204      	movs	r2, #4
    bytes[0] = (pb_byte_t)(val & 0xFF);
 80055fe:	680b      	ldr	r3, [r1, #0]
    return pb_write(stream, bytes, 4);
 8005600:	eb0d 0102 	add.w	r1, sp, r2
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8005604:	9301      	str	r3, [sp, #4]
    return pb_write(stream, bytes, 4);
 8005606:	f7ff ff67 	bl	80054d8 <pb_write>
}
 800560a:	b003      	add	sp, #12
 800560c:	f85d fb04 	ldr.w	pc, [sp], #4

08005610 <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 8005610:	4611      	mov	r1, r2
 8005612:	f7ff bff2 	b.w	80055fa <pb_encode_fixed32>

08005616 <pb_encode_fixed64>:
{
 8005616:	b507      	push	{r0, r1, r2, lr}
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8005618:	e9d1 2300 	ldrd	r2, r3, [r1]
    return pb_write(stream, bytes, 8);
 800561c:	4669      	mov	r1, sp
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800561e:	9200      	str	r2, [sp, #0]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 8005620:	0a1a      	lsrs	r2, r3, #8
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 8005622:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 8005626:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 800562a:	0c1a      	lsrs	r2, r3, #16
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800562c:	0e1b      	lsrs	r3, r3, #24
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 800562e:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 8);
 8005632:	2208      	movs	r2, #8
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8005634:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 8005638:	f7ff ff4e 	bl	80054d8 <pb_write>
}
 800563c:	b003      	add	sp, #12
 800563e:	f85d fb04 	ldr.w	pc, [sp], #4

08005642 <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 8005642:	4611      	mov	r1, r2
 8005644:	f7ff bfe7 	b.w	8005616 <pb_encode_fixed64>

08005648 <pb_encode_tag>:
{
 8005648:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
 800564a:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 800564e:	0f5b      	lsrs	r3, r3, #29
 8005650:	f7ff bf57 	b.w	8005502 <pb_encode_varint>

08005654 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 8005654:	788b      	ldrb	r3, [r1, #2]
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	2b09      	cmp	r3, #9
 800565c:	d811      	bhi.n	8005682 <pb_encode_tag_for_field+0x2e>
 800565e:	e8df f003 	tbb	[pc, r3]
 8005662:	0e0e      	.short	0x0e0e
 8005664:	0c0a050e 	.word	0x0c0a050e
 8005668:	0c100c0c 	.word	0x0c100c0c
 800566c:	2305      	movs	r3, #5
    return pb_encode_tag(stream, wiretype, field->tag);
 800566e:	880a      	ldrh	r2, [r1, #0]
 8005670:	4619      	mov	r1, r3
 8005672:	f7ff bfe9 	b.w	8005648 <pb_encode_tag>
            wiretype = PB_WT_64BIT;
 8005676:	2301      	movs	r3, #1
            break;
 8005678:	e7f9      	b.n	800566e <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_STRING;
 800567a:	2302      	movs	r3, #2
            break;
 800567c:	e7f7      	b.n	800566e <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_VARINT;
 800567e:	2300      	movs	r3, #0
 8005680:	e7f5      	b.n	800566e <pb_encode_tag_for_field+0x1a>
}
 8005682:	2000      	movs	r0, #0
 8005684:	4770      	bx	lr
	...

08005688 <encode_field>:
{
 8005688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800568c:	4615      	mov	r5, r2
    switch (PB_ATYPE(field->type))
 800568e:	788a      	ldrb	r2, [r1, #2]
{
 8005690:	b086      	sub	sp, #24
 8005692:	4606      	mov	r6, r0
    switch (PB_ATYPE(field->type))
 8005694:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
{
 8005698:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 800569a:	2b40      	cmp	r3, #64	; 0x40
 800569c:	f000 80d2 	beq.w	8005844 <encode_field+0x1bc>
 80056a0:	0653      	lsls	r3, r2, #25
 80056a2:	d41b      	bmi.n	80056dc <encode_field+0x54>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 80056a4:	4b6a      	ldr	r3, [pc, #424]	; (8005850 <encode_field+0x1c8>)
 80056a6:	f002 010f 	and.w	r1, r2, #15
 80056aa:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    if (field->size_offset)
 80056ae:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80056b2:	b1bb      	cbz	r3, 80056e4 <encode_field+0x5c>
        pSize = (const char*)pData + field->size_offset;
 80056b4:	442b      	add	r3, r5
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80056b6:	78a2      	ldrb	r2, [r4, #2]
 80056b8:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 80056bc:	2880      	cmp	r0, #128	; 0x80
 80056be:	d105      	bne.n	80056cc <encode_field+0x44>
        pData = *(const void* const*)pData;
 80056c0:	682d      	ldr	r5, [r5, #0]
        implicit_has = (pData != NULL);
 80056c2:	1e29      	subs	r1, r5, #0
 80056c4:	bf18      	it	ne
 80056c6:	2101      	movne	r1, #1
 80056c8:	f88d 1007 	strb.w	r1, [sp, #7]
    switch (PB_HTYPE(field->type))
 80056cc:	f002 0130 	and.w	r1, r2, #48	; 0x30
 80056d0:	2920      	cmp	r1, #32
 80056d2:	d036      	beq.n	8005742 <encode_field+0xba>
 80056d4:	d819      	bhi.n	800570a <encode_field+0x82>
 80056d6:	b1f9      	cbz	r1, 8005718 <encode_field+0x90>
 80056d8:	2910      	cmp	r1, #16
 80056da:	d02d      	beq.n	8005738 <encode_field+0xb0>
    switch (PB_ATYPE(field->type))
 80056dc:	2000      	movs	r0, #0
}
 80056de:	b006      	add	sp, #24
 80056e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 80056e4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80056e8:	2a10      	cmp	r2, #16
 80056ea:	d10a      	bne.n	8005702 <encode_field+0x7a>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 80056ec:	4629      	mov	r1, r5
 80056ee:	4620      	mov	r0, r4
 80056f0:	f7ff fea9 	bl	8005446 <pb_check_proto3_default_value>
 80056f4:	f080 0001 	eor.w	r0, r0, #1
 80056f8:	f88d 0007 	strb.w	r0, [sp, #7]
    const void *pSize = &implicit_has;
 80056fc:	f10d 0307 	add.w	r3, sp, #7
 8005700:	e7d9      	b.n	80056b6 <encode_field+0x2e>
        implicit_has = true;
 8005702:	2301      	movs	r3, #1
 8005704:	f88d 3007 	strb.w	r3, [sp, #7]
 8005708:	e7f8      	b.n	80056fc <encode_field+0x74>
    switch (PB_HTYPE(field->type))
 800570a:	2930      	cmp	r1, #48	; 0x30
 800570c:	d1e6      	bne.n	80056dc <encode_field+0x54>
            if (*(const pb_size_t*)pSize == field->tag)
 800570e:	881a      	ldrh	r2, [r3, #0]
 8005710:	8823      	ldrh	r3, [r4, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d113      	bne.n	800573e <encode_field+0xb6>
 8005716:	e001      	b.n	800571c <encode_field+0x94>
            if (!pData)
 8005718:	2d00      	cmp	r5, #0
 800571a:	d0df      	beq.n	80056dc <encode_field+0x54>
                if (!pb_encode_tag_for_field(stream, field))
 800571c:	4621      	mov	r1, r4
 800571e:	4630      	mov	r0, r6
 8005720:	f7ff ff98 	bl	8005654 <pb_encode_tag_for_field>
 8005724:	2800      	cmp	r0, #0
 8005726:	d0d9      	beq.n	80056dc <encode_field+0x54>
                if (!func(stream, field, pData))
 8005728:	462a      	mov	r2, r5
 800572a:	4621      	mov	r1, r4
 800572c:	4630      	mov	r0, r6
 800572e:	463b      	mov	r3, r7
}
 8005730:	b006      	add	sp, #24
 8005732:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (!callback->funcs.encode(stream, field, arg))
 8005736:	4718      	bx	r3
            if (*(const bool*)pSize)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1ee      	bne.n	800571c <encode_field+0x94>
    return true;
 800573e:	2001      	movs	r0, #1
 8005740:	e7cd      	b.n	80056de <encode_field+0x56>
            if (field->size_offset != 0) {
 8005742:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8005746:	b359      	cbz	r1, 80057a0 <encode_field+0x118>
                count = *(const pb_size_t*)pSize;
 8005748:	f8b3 8000 	ldrh.w	r8, [r3]
    if (count == 0)
 800574c:	f1b8 0f00 	cmp.w	r8, #0
 8005750:	d0f5      	beq.n	800573e <encode_field+0xb6>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8005752:	2880      	cmp	r0, #128	; 0x80
 8005754:	d002      	beq.n	800575c <encode_field+0xd4>
 8005756:	8963      	ldrh	r3, [r4, #10]
 8005758:	4598      	cmp	r8, r3
 800575a:	d8bf      	bhi.n	80056dc <encode_field+0x54>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800575c:	f002 020f 	and.w	r2, r2, #15
 8005760:	2a04      	cmp	r2, #4
 8005762:	d84c      	bhi.n	80057fe <encode_field+0x176>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8005764:	8822      	ldrh	r2, [r4, #0]
 8005766:	2102      	movs	r1, #2
 8005768:	4630      	mov	r0, r6
 800576a:	f7ff ff6d 	bl	8005648 <pb_encode_tag>
 800576e:	2800      	cmp	r0, #0
 8005770:	d0b4      	beq.n	80056dc <encode_field+0x54>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8005772:	78a3      	ldrb	r3, [r4, #2]
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	2b03      	cmp	r3, #3
 800577a:	d114      	bne.n	80057a6 <encode_field+0x11e>
            size = 4 * count;
 800577c:	ea4f 0988 	mov.w	r9, r8, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005780:	464a      	mov	r2, r9
 8005782:	2300      	movs	r3, #0
 8005784:	4630      	mov	r0, r6
 8005786:	f7ff febc 	bl	8005502 <pb_encode_varint>
 800578a:	2800      	cmp	r0, #0
 800578c:	d0a6      	beq.n	80056dc <encode_field+0x54>
        if (stream->callback == NULL)
 800578e:	6831      	ldr	r1, [r6, #0]
 8005790:	bb29      	cbnz	r1, 80057de <encode_field+0x156>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8005792:	464a      	mov	r2, r9
 8005794:	4630      	mov	r0, r6
}
 8005796:	b006      	add	sp, #24
 8005798:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800579c:	f7ff be9c 	b.w	80054d8 <pb_write>
                count = field->array_size;
 80057a0:	f8b4 800a 	ldrh.w	r8, [r4, #10]
 80057a4:	e7d2      	b.n	800574c <encode_field+0xc4>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d102      	bne.n	80057b0 <encode_field+0x128>
            size = 8 * count;
 80057aa:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80057ae:	e7e7      	b.n	8005780 <encode_field+0xf8>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 80057b0:	46aa      	mov	sl, r5
            for (i = 0; i < count; i++)
 80057b2:	f04f 0900 	mov.w	r9, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 80057b6:	2210      	movs	r2, #16
 80057b8:	2100      	movs	r1, #0
 80057ba:	a802      	add	r0, sp, #8
 80057bc:	f004 fe1f 	bl	800a3fe <memset>
                if (!func(&sizestream, field, p))
 80057c0:	4652      	mov	r2, sl
 80057c2:	4621      	mov	r1, r4
 80057c4:	a802      	add	r0, sp, #8
 80057c6:	47b8      	blx	r7
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d088      	beq.n	80056de <encode_field+0x56>
            for (i = 0; i < count; i++)
 80057cc:	f109 0901 	add.w	r9, r9, #1
                p = (const char*)p + field->data_size;
 80057d0:	8923      	ldrh	r3, [r4, #8]
            for (i = 0; i < count; i++)
 80057d2:	45c8      	cmp	r8, r9
                p = (const char*)p + field->data_size;
 80057d4:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 80057d6:	d8f3      	bhi.n	80057c0 <encode_field+0x138>
            size = sizestream.bytes_written;
 80057d8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80057dc:	e7d0      	b.n	8005780 <encode_field+0xf8>
        for (i = 0; i < count; i++)
 80057de:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 80057e2:	462a      	mov	r2, r5
 80057e4:	4621      	mov	r1, r4
 80057e6:	4630      	mov	r0, r6
 80057e8:	47b8      	blx	r7
 80057ea:	2800      	cmp	r0, #0
 80057ec:	f43f af76 	beq.w	80056dc <encode_field+0x54>
        for (i = 0; i < count; i++)
 80057f0:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 80057f4:	8923      	ldrh	r3, [r4, #8]
        for (i = 0; i < count; i++)
 80057f6:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 80057f8:	441d      	add	r5, r3
        for (i = 0; i < count; i++)
 80057fa:	d8f2      	bhi.n	80057e2 <encode_field+0x15a>
 80057fc:	e79f      	b.n	800573e <encode_field+0xb6>
        for (i = 0; i < count; i++)
 80057fe:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 8005802:	4621      	mov	r1, r4
 8005804:	4630      	mov	r0, r6
 8005806:	f7ff ff25 	bl	8005654 <pb_encode_tag_for_field>
 800580a:	2800      	cmp	r0, #0
 800580c:	f43f af66 	beq.w	80056dc <encode_field+0x54>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8005810:	78a3      	ldrb	r3, [r4, #2]
 8005812:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8005816:	2a80      	cmp	r2, #128	; 0x80
 8005818:	d112      	bne.n	8005840 <encode_field+0x1b8>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8005820:	2b01      	cmp	r3, #1
 8005822:	d80d      	bhi.n	8005840 <encode_field+0x1b8>
                if (!func(stream, field, *(const void* const*)p))
 8005824:	682a      	ldr	r2, [r5, #0]
                if (!func(stream, field, p))
 8005826:	4621      	mov	r1, r4
 8005828:	4630      	mov	r0, r6
 800582a:	47b8      	blx	r7
 800582c:	2800      	cmp	r0, #0
 800582e:	f43f af55 	beq.w	80056dc <encode_field+0x54>
        for (i = 0; i < count; i++)
 8005832:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 8005836:	8923      	ldrh	r3, [r4, #8]
        for (i = 0; i < count; i++)
 8005838:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 800583a:	441d      	add	r5, r3
        for (i = 0; i < count; i++)
 800583c:	d8e1      	bhi.n	8005802 <encode_field+0x17a>
 800583e:	e77e      	b.n	800573e <encode_field+0xb6>
                if (!func(stream, field, p))
 8005840:	462a      	mov	r2, r5
 8005842:	e7f0      	b.n	8005826 <encode_field+0x19e>
    if (callback->funcs.encode != NULL)
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	f43f af79 	beq.w	800573e <encode_field+0xb6>
        if (!callback->funcs.encode(stream, field, arg))
 800584c:	1d2a      	adds	r2, r5, #4
 800584e:	e76f      	b.n	8005730 <encode_field+0xa8>
 8005850:	0800cbd8 	.word	0x0800cbd8

08005854 <pb_encode>:
{
 8005854:	b530      	push	{r4, r5, lr}
 8005856:	b087      	sub	sp, #28
 8005858:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 800585a:	4668      	mov	r0, sp
 800585c:	f7ff f8c2 	bl	80049e4 <pb_field_iter_begin>
 8005860:	b910      	cbnz	r0, 8005868 <pb_encode+0x14>
        return true; /* Empty message type */
 8005862:	2001      	movs	r0, #1
}
 8005864:	b007      	add	sp, #28
 8005866:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8005868:	9901      	ldr	r1, [sp, #4]
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 800586a:	9a04      	ldr	r2, [sp, #16]
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 800586c:	788b      	ldrb	r3, [r1, #2]
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	2b08      	cmp	r3, #8
 8005874:	d11c      	bne.n	80058b0 <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 8005876:	6814      	ldr	r4, [r2, #0]
    while (extension)
 8005878:	b91c      	cbnz	r4, 8005882 <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 800587a:	4668      	mov	r0, sp
 800587c:	f7ff f8c3 	bl	8004a06 <pb_field_iter_next>
 8005880:	e7ee      	b.n	8005860 <pb_encode+0xc>
        if (extension->type->encode)
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	b12a      	cbz	r2, 8005894 <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 8005888:	4621      	mov	r1, r4
 800588a:	4628      	mov	r0, r5
 800588c:	4790      	blx	r2
        if (!status)
 800588e:	b968      	cbnz	r0, 80058ac <pb_encode+0x58>
                return false;
 8005890:	2000      	movs	r0, #0
 8005892:	e7e7      	b.n	8005864 <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8005894:	6899      	ldr	r1, [r3, #8]
        return encode_field(stream, field, extension->dest);
 8005896:	4628      	mov	r0, r5
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005898:	788b      	ldrb	r3, [r1, #2]
 800589a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800589e:	2b80      	cmp	r3, #128	; 0x80
        return encode_field(stream, field, &extension->dest);
 80058a0:	bf0c      	ite	eq
 80058a2:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 80058a4:	6862      	ldrne	r2, [r4, #4]
 80058a6:	f7ff feef 	bl	8005688 <encode_field>
 80058aa:	e7f0      	b.n	800588e <pb_encode+0x3a>
        extension = extension->next;
 80058ac:	68a4      	ldr	r4, [r4, #8]
 80058ae:	e7e3      	b.n	8005878 <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 80058b0:	4628      	mov	r0, r5
 80058b2:	f7ff fee9 	bl	8005688 <encode_field>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d1df      	bne.n	800587a <pb_encode+0x26>
 80058ba:	e7e9      	b.n	8005890 <pb_encode+0x3c>

080058bc <pb_encode_string>:
{
 80058bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80058be:	2300      	movs	r3, #0
{
 80058c0:	4604      	mov	r4, r0
 80058c2:	4615      	mov	r5, r2
 80058c4:	9101      	str	r1, [sp, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80058c6:	f7ff fe1c 	bl	8005502 <pb_encode_varint>
 80058ca:	b138      	cbz	r0, 80058dc <pb_encode_string+0x20>
    return pb_write(stream, buffer, size);
 80058cc:	462a      	mov	r2, r5
 80058ce:	9901      	ldr	r1, [sp, #4]
 80058d0:	4620      	mov	r0, r4
}
 80058d2:	b003      	add	sp, #12
 80058d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return pb_write(stream, buffer, size);
 80058d8:	f7ff bdfe 	b.w	80054d8 <pb_write>
}
 80058dc:	b003      	add	sp, #12
 80058de:	bd30      	pop	{r4, r5, pc}

080058e0 <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80058e0:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 80058e2:	890a      	ldrh	r2, [r1, #8]
 80058e4:	4619      	mov	r1, r3
 80058e6:	f7ff bfe9 	b.w	80058bc <pb_encode_string>

080058ea <pb_enc_string>:
    size_t max_size = field->data_size;
 80058ea:	890b      	ldrh	r3, [r1, #8]
{
 80058ec:	b410      	push	{r4}
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80058ee:	7889      	ldrb	r1, [r1, #2]
 80058f0:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    size_t max_size = field->data_size;
 80058f4:	2980      	cmp	r1, #128	; 0x80
    if (src == NULL)
 80058f6:	4611      	mov	r1, r2
    size_t max_size = field->data_size;
 80058f8:	bf08      	it	eq
 80058fa:	f04f 33ff 	moveq.w	r3, #4294967295
    if (src == NULL)
 80058fe:	b122      	cbz	r2, 800590a <pb_enc_string+0x20>
    size_t size = 0;
 8005900:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 8005902:	429a      	cmp	r2, r3
 8005904:	d001      	beq.n	800590a <pb_enc_string+0x20>
 8005906:	5c8c      	ldrb	r4, [r1, r2]
 8005908:	b91c      	cbnz	r4, 8005912 <pb_enc_string+0x28>
}
 800590a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 800590e:	f7ff bfd5 	b.w	80058bc <pb_encode_string>
            size++;
 8005912:	3201      	adds	r2, #1
            p++;
 8005914:	e7f5      	b.n	8005902 <pb_enc_string+0x18>

08005916 <pb_enc_bytes>:
{
 8005916:	b430      	push	{r4, r5}
 8005918:	460c      	mov	r4, r1
 800591a:	4605      	mov	r5, r0
    if (src == NULL)
 800591c:	4611      	mov	r1, r2
 800591e:	b912      	cbnz	r2, 8005926 <pb_enc_bytes+0x10>
}
 8005920:	bc30      	pop	{r4, r5}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8005922:	f7ff bfcb 	b.w	80058bc <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005926:	78a3      	ldrb	r3, [r4, #2]
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8005928:	8812      	ldrh	r2, [r2, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800592a:	f013 00c0 	ands.w	r0, r3, #192	; 0xc0
 800592e:	d103      	bne.n	8005938 <pb_enc_bytes+0x22>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8005930:	1c93      	adds	r3, r2, #2
 8005932:	8924      	ldrh	r4, [r4, #8]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005934:	42a3      	cmp	r3, r4
 8005936:	d802      	bhi.n	800593e <pb_enc_bytes+0x28>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8005938:	3102      	adds	r1, #2
 800593a:	4628      	mov	r0, r5
 800593c:	e7f0      	b.n	8005920 <pb_enc_bytes+0xa>
}
 800593e:	bc30      	pop	{r4, r5}
 8005940:	4770      	bx	lr

08005942 <pb_encode_submessage>:
{
 8005942:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005946:	460e      	mov	r6, r1
 8005948:	4617      	mov	r7, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800594a:	2100      	movs	r1, #0
 800594c:	2210      	movs	r2, #16
{
 800594e:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8005950:	4668      	mov	r0, sp
 8005952:	f004 fd54 	bl	800a3fe <memset>
    if (!pb_encode(&substream, fields, src_struct))
 8005956:	463a      	mov	r2, r7
 8005958:	4631      	mov	r1, r6
 800595a:	4668      	mov	r0, sp
 800595c:	f7ff ff7a 	bl	8005854 <pb_encode>
 8005960:	b348      	cbz	r0, 80059b6 <pb_encode_submessage+0x74>
    size = substream.bytes_written;
 8005962:	9d03      	ldr	r5, [sp, #12]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005964:	f04f 0800 	mov.w	r8, #0
 8005968:	4620      	mov	r0, r4
 800596a:	462a      	mov	r2, r5
 800596c:	4643      	mov	r3, r8
 800596e:	f7ff fdc8 	bl	8005502 <pb_encode_varint>
 8005972:	b300      	cbz	r0, 80059b6 <pb_encode_submessage+0x74>
    if (stream->callback == NULL)
 8005974:	6821      	ldr	r1, [r4, #0]
 8005976:	b931      	cbnz	r1, 8005986 <pb_encode_submessage+0x44>
        return pb_write(stream, NULL, size); /* Just sizing */
 8005978:	462a      	mov	r2, r5
 800597a:	4620      	mov	r0, r4
 800597c:	f7ff fdac 	bl	80054d8 <pb_write>
}
 8005980:	b004      	add	sp, #16
 8005982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->bytes_written + size > stream->max_size)
 8005986:	68e2      	ldr	r2, [r4, #12]
 8005988:	68a3      	ldr	r3, [r4, #8]
 800598a:	442a      	add	r2, r5
 800598c:	429a      	cmp	r2, r3
 800598e:	d812      	bhi.n	80059b6 <pb_encode_submessage+0x74>
    substream.state = stream->state;
 8005990:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
 8005992:	463a      	mov	r2, r7
    substream.callback = stream->callback;
 8005994:	9100      	str	r1, [sp, #0]
    status = pb_encode(&substream, fields, src_struct);
 8005996:	4668      	mov	r0, sp
 8005998:	4631      	mov	r1, r6
    substream.bytes_written = 0;
 800599a:	f8cd 800c 	str.w	r8, [sp, #12]
    substream.max_size = size;
 800599e:	e9cd 3501 	strd	r3, r5, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
 80059a2:	f7ff ff57 	bl	8005854 <pb_encode>
    stream->bytes_written += substream.bytes_written;
 80059a6:	9a03      	ldr	r2, [sp, #12]
 80059a8:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
 80059aa:	42aa      	cmp	r2, r5
    stream->bytes_written += substream.bytes_written;
 80059ac:	4413      	add	r3, r2
 80059ae:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
 80059b0:	9b01      	ldr	r3, [sp, #4]
 80059b2:	6063      	str	r3, [r4, #4]
    if (substream.bytes_written != size)
 80059b4:	d0e4      	beq.n	8005980 <pb_encode_submessage+0x3e>
        PB_RETURN_ERROR(stream, "submsg size changed");
 80059b6:	2000      	movs	r0, #0
 80059b8:	e7e2      	b.n	8005980 <pb_encode_submessage+0x3e>

080059ba <pb_enc_submessage>:
    if (field->ptr == NULL)
 80059ba:	68c9      	ldr	r1, [r1, #12]
 80059bc:	b109      	cbz	r1, 80059c2 <pb_enc_submessage+0x8>
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 80059be:	f7ff bfc0 	b.w	8005942 <pb_encode_submessage>
}
 80059c2:	4608      	mov	r0, r1
 80059c4:	4770      	bx	lr
	...

080059c8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80059c8:	4b0a      	ldr	r3, [pc, #40]	; (80059f4 <HAL_MspInit+0x2c>)
{
 80059ca:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80059cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80059d2:	641a      	str	r2, [r3, #64]	; 0x40
 80059d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059d6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80059da:	9200      	str	r2, [sp, #0]
 80059dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059e4:	645a      	str	r2, [r3, #68]	; 0x44
 80059e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ec:	9301      	str	r3, [sp, #4]
 80059ee:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059f0:	b002      	add	sp, #8
 80059f2:	4770      	bx	lr
 80059f4:	40023800 	.word	0x40023800

080059f8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80059f8:	6802      	ldr	r2, [r0, #0]
{
 80059fa:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80059fc:	4b08      	ldr	r3, [pc, #32]	; (8005a20 <HAL_CRC_MspInit+0x28>)
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d10b      	bne.n	8005a1a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005a02:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8005a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a16:	9301      	str	r3, [sp, #4]
 8005a18:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8005a1a:	b002      	add	sp, #8
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	40023000 	.word	0x40023000

08005a24 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8005a24:	4b0e      	ldr	r3, [pc, #56]	; (8005a60 <HAL_TIM_Base_MspInit+0x3c>)
{
 8005a26:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8005a28:	6802      	ldr	r2, [r0, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d115      	bne.n	8005a5a <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a2e:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005a32:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a36:	f042 0202 	orr.w	r2, r2, #2
 8005a3a:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005a3c:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005a40:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	9301      	str	r3, [sp, #4]
 8005a48:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005a4a:	f7fa ff77 	bl	800093c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005a4e:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005a50:	b003      	add	sp, #12
 8005a52:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005a56:	f7fa bfa3 	b.w	80009a0 <HAL_NVIC_EnableIRQ>
}
 8005a5a:	b003      	add	sp, #12
 8005a5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a60:	40000400 	.word	0x40000400

08005a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a64:	b570      	push	{r4, r5, r6, lr}
 8005a66:	b0ac      	sub	sp, #176	; 0xb0
 8005a68:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a6a:	2214      	movs	r2, #20
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	a803      	add	r0, sp, #12
 8005a70:	f004 fcc5 	bl	800a3fe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005a74:	2290      	movs	r2, #144	; 0x90
 8005a76:	2100      	movs	r1, #0
 8005a78:	a808      	add	r0, sp, #32
 8005a7a:	f004 fcc0 	bl	800a3fe <memset>
  if(huart->Instance==USART3)
 8005a7e:	6822      	ldr	r2, [r4, #0]
 8005a80:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <HAL_UART_MspInit+0x94>)
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d136      	bne.n	8005af4 <HAL_UART_MspInit+0x90>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005a86:	f44f 7380 	mov.w	r3, #256	; 0x100
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a8a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005a8c:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a8e:	f7fb fba5 	bl	80011dc <HAL_RCCEx_PeriphCLKConfig>
 8005a92:	b108      	cbz	r0, 8005a98 <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 8005a94:	f7fe ffa4 	bl	80049e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005a98:	4b18      	ldr	r3, [pc, #96]	; (8005afc <HAL_UART_MspInit+0x98>)
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a9a:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a9c:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a9e:	2407      	movs	r4, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 8005aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(STLK_RX_GPIO_Port, &GPIO_InitStruct);
 8005aa2:	a903      	add	r1, sp, #12
 8005aa4:	4816      	ldr	r0, [pc, #88]	; (8005b00 <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005aa6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005aaa:	641a      	str	r2, [r3, #64]	; 0x40
 8005aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aae:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005ab2:	9201      	str	r2, [sp, #4]
 8005ab4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ab8:	f042 0208 	orr.w	r2, r2, #8
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005ac0:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	9302      	str	r3, [sp, #8]
 8005ac8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ace:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(STLK_RX_GPIO_Port, &GPIO_InitStruct);
 8005ad8:	f7fa ffe4 	bl	8000aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLK_TX_Pin;
 8005adc:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(STLK_TX_GPIO_Port, &GPIO_InitStruct);
 8005ae0:	a903      	add	r1, sp, #12
 8005ae2:	4807      	ldr	r0, [pc, #28]	; (8005b00 <HAL_UART_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005ae4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae6:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005aea:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aec:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(STLK_TX_GPIO_Port, &GPIO_InitStruct);
 8005af0:	f7fa ffd8 	bl	8000aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005af4:	b02c      	add	sp, #176	; 0xb0
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	40004800 	.word	0x40004800
 8005afc:	40023800 	.word	0x40023800
 8005b00:	40020c00 	.word	0x40020c00

08005b04 <returnEmptyRAM>:
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8005b04:	f3ef 8208 	mrs	r2, MSP
	extern uint8_t _estack; // End of SRAM (start of the stack)
	volatile uint8_t* sp = (uint8_t*)__get_MSP(); // Main Stack Pointer (MSP)

	uint32_t ret = 0;

	volatile uint8_t *ptr = &_end + 1;
 8005b08:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <returnEmptyRAM+0x1c>)
	uint32_t ret = 0;
 8005b0a:	2000      	movs	r0, #0
	while(ptr < sp){
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d300      	bcc.n	8005b12 <returnEmptyRAM+0xe>
			ret++;
		}
		ptr++;
	}
	return ret;
}
 8005b10:	4770      	bx	lr
		if(*ptr ==  0x81){
 8005b12:	7819      	ldrb	r1, [r3, #0]
		ptr++;
 8005b14:	3301      	adds	r3, #1
		if(*ptr ==  0x81){
 8005b16:	2981      	cmp	r1, #129	; 0x81
			ret++;
 8005b18:	bf08      	it	eq
 8005b1a:	3001      	addeq	r0, #1
		ptr++;
 8005b1c:	e7f6      	b.n	8005b0c <returnEmptyRAM+0x8>
 8005b1e:	bf00      	nop
 8005b20:	20004c51 	.word	0x20004c51

08005b24 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b24:	e7fe      	b.n	8005b24 <NMI_Handler>

08005b26 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b26:	e7fe      	b.n	8005b26 <HardFault_Handler>

08005b28 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b28:	e7fe      	b.n	8005b28 <MemManage_Handler>

08005b2a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b2a:	e7fe      	b.n	8005b2a <BusFault_Handler>

08005b2c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b2c:	e7fe      	b.n	8005b2c <UsageFault_Handler>

08005b2e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b2e:	4770      	bx	lr

08005b30 <DebugMon_Handler>:
 8005b30:	4770      	bx	lr

08005b32 <PendSV_Handler>:
 8005b32:	4770      	bx	lr

08005b34 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b34:	f7fa beba 	b.w	80008ac <HAL_IncTick>

08005b38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005b38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
	  HAL_TIM_IRQHandler(&htim3);
 8005b3a:	480e      	ldr	r0, [pc, #56]	; (8005b74 <TIM3_IRQHandler+0x3c>)
 8005b3c:	f7fb fe3f 	bl	80017be <HAL_TIM_IRQHandler>
	  /* USER CODE BEGIN TIM3_IRQn 1 */
	  static char size_string[10]= {'0','0','0','0','0','0','0','0','\n'};

		  // clear string
		  for(int i = 0; i <8; i ++)
					  size_string[i] = '0';
 8005b40:	4c0d      	ldr	r4, [pc, #52]	; (8005b78 <TIM3_IRQHandler+0x40>)
 8005b42:	f04f 3330 	mov.w	r3, #808464432	; 0x30303030
 8005b46:	6023      	str	r3, [r4, #0]
 8005b48:	6063      	str	r3, [r4, #4]

		  // calc new number
		  uint32_t postAiRam = returnEmptyRAM();
 8005b4a:	f7ff ffdb 	bl	8005b04 <returnEmptyRAM>

		  // convert number to string
		  for(int i = 7; i >= 0; i--){
 8005b4e:	2307      	movs	r3, #7
				size_string[i] = postAiRam % 10 + '0';
 8005b50:	210a      	movs	r1, #10
 8005b52:	fbb0 f2f1 	udiv	r2, r0, r1
 8005b56:	fb01 0012 	mls	r0, r1, r2, r0
 8005b5a:	3030      	adds	r0, #48	; 0x30
 8005b5c:	54e0      	strb	r0, [r4, r3]
		  for(int i = 7; i >= 0; i--){
 8005b5e:	3b01      	subs	r3, #1
				postAiRam = postAiRam/10;
 8005b60:	4610      	mov	r0, r2
		  for(int i = 7; i >= 0; i--){
 8005b62:	d2f6      	bcs.n	8005b52 <TIM3_IRQHandler+0x1a>
			}
		  HAL_UART_Transmit(&UartHandle, size_string, 9, HAL_MAX_DELAY);
 8005b64:	2209      	movs	r2, #9
 8005b66:	4904      	ldr	r1, [pc, #16]	; (8005b78 <TIM3_IRQHandler+0x40>)
 8005b68:	4804      	ldr	r0, [pc, #16]	; (8005b7c <TIM3_IRQHandler+0x44>)


  /* USER CODE END TIM3_IRQn 1 */
}
 8005b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		  HAL_UART_Transmit(&UartHandle, size_string, 9, HAL_MAX_DELAY);
 8005b6e:	f7fc ba5e 	b.w	800202e <HAL_UART_Transmit>
 8005b72:	bf00      	nop
 8005b74:	200047b8 	.word	0x200047b8
 8005b78:	20000050 	.word	0x20000050
 8005b7c:	20004804 	.word	0x20004804

08005b80 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b80:	4a0b      	ldr	r2, [pc, #44]	; (8005bb0 <_sbrk+0x30>)
{
 8005b82:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8005b84:	6811      	ldr	r1, [r2, #0]
{
 8005b86:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8005b88:	b909      	cbnz	r1, 8005b8e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8005b8a:	490a      	ldr	r1, [pc, #40]	; (8005bb4 <_sbrk+0x34>)
 8005b8c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b8e:	6810      	ldr	r0, [r2, #0]
 8005b90:	4909      	ldr	r1, [pc, #36]	; (8005bb8 <_sbrk+0x38>)
 8005b92:	4c0a      	ldr	r4, [pc, #40]	; (8005bbc <_sbrk+0x3c>)
 8005b94:	4403      	add	r3, r0
 8005b96:	1b09      	subs	r1, r1, r4
 8005b98:	428b      	cmp	r3, r1
 8005b9a:	d906      	bls.n	8005baa <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8005b9c:	f004 fca4 	bl	800a4e8 <__errno>
 8005ba0:	230c      	movs	r3, #12
 8005ba2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005ba4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8005ba8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8005baa:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8005bac:	e7fc      	b.n	8005ba8 <_sbrk+0x28>
 8005bae:	bf00      	nop
 8005bb0:	2000488c 	.word	0x2000488c
 8005bb4:	20004c50 	.word	0x20004c50
 8005bb8:	20080000 	.word	0x20080000
 8005bbc:	00000800 	.word	0x00000800

08005bc0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bc0:	4a03      	ldr	r2, [pc, #12]	; (8005bd0 <SystemInit+0x10>)
 8005bc2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005bc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005bce:	4770      	bx	lr
 8005bd0:	e000ed00 	.word	0xe000ed00
 8005bd4:	00000000 	.word	0x00000000

08005bd8 <ai_vww_int8_keras_get_report>:


AI_API_ENTRY
ai_bool ai_vww_int8_keras_get_report(
  ai_handle network, ai_network_report* report)
{
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	460d      	mov	r5, r1
 8005bdc:	b0a2      	sub	sp, #136	; 0x88
 8005bde:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005be0:	f000 ff44 	bl	8006a6c <ai_platform_context_acquire>
 8005be4:	4604      	mov	r4, r0

  if (report && net_ctx)
 8005be6:	2d00      	cmp	r5, #0
 8005be8:	d036      	beq.n	8005c58 <ai_vww_int8_keras_get_report+0x80>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d031      	beq.n	8005c52 <ai_vww_int8_keras_get_report+0x7a>
  {
    ai_network_report r = {
 8005bee:	2278      	movs	r2, #120	; 0x78
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	a804      	add	r0, sp, #16
 8005bf4:	f004 fc03 	bl	800a3fe <memset>
 8005bf8:	4b1b      	ldr	r3, [pc, #108]	; (8005c68 <ai_vww_int8_keras_get_report+0x90>)
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <ai_vww_int8_keras_get_report+0x94>)
 8005bfe:	9301      	str	r3, [sp, #4]
 8005c00:	4b1b      	ldr	r3, [pc, #108]	; (8005c70 <ai_vww_int8_keras_get_report+0x98>)
 8005c02:	9302      	str	r3, [sp, #8]
 8005c04:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <ai_vww_int8_keras_get_report+0x9c>)
 8005c06:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_VWW_INT8_KERAS_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005c08:	f000 fee4 	bl	80069d4 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8005c0c:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8005c0e:	f000 fee5 	bl	80069dc <ai_platform_runtime_get_version>
    ai_network_report r = {
 8005c12:	4b19      	ldr	r3, [pc, #100]	; (8005c78 <ai_vww_int8_keras_get_report+0xa0>)
      .runtime_version   = ai_platform_runtime_get_version(),
 8005c14:	9005      	str	r0, [sp, #20]
    ai_network_report r = {
 8005c16:	9306      	str	r3, [sp, #24]
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f88d 301c 	strb.w	r3, [sp, #28]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8005c1e:	f000 fef5 	bl	8006a0c <ai_platform_api_get_version>
 8005c22:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8005c24:	f000 ff0a 	bl	8006a3c <ai_platform_interface_api_get_version>
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x496a7465,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005c28:	4669      	mov	r1, sp
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8005c2a:	900a      	str	r0, [sp, #40]	; 0x28
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005c2c:	4630      	mov	r0, r6
    ai_network_report r = {
 8005c2e:	a30c      	add	r3, pc, #48	; (adr r3, 8005c60 <ai_vww_int8_keras_get_report+0x88>)
 8005c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c34:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005c38:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <ai_vww_int8_keras_get_report+0xa4>)
 8005c3a:	9311      	str	r3, [sp, #68]	; 0x44
 8005c3c:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <ai_vww_int8_keras_get_report+0xa8>)
 8005c3e:	9320      	str	r3, [sp, #128]	; 0x80
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8005c40:	f000 ff2e 	bl	8006aa0 <ai_platform_api_get_network_report>
 8005c44:	4604      	mov	r4, r0
 8005c46:	b120      	cbz	r0, 8005c52 <ai_vww_int8_keras_get_report+0x7a>

    *report = r;
 8005c48:	2288      	movs	r2, #136	; 0x88
 8005c4a:	4669      	mov	r1, sp
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	f004 fc78 	bl	800a542 <memcpy>
    return true;
  }
  return false;
}
 8005c52:	4620      	mov	r0, r4
 8005c54:	b022      	add	sp, #136	; 0x88
 8005c56:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8005c58:	462c      	mov	r4, r5
 8005c5a:	e7fa      	b.n	8005c52 <ai_vww_int8_keras_get_report+0x7a>
 8005c5c:	f3af 8000 	nop.w
 8005c60:	0075e4d0 	.word	0x0075e4d0
 8005c64:	00000000 	.word	0x00000000
 8005c68:	0800cb6c 	.word	0x0800cb6c
 8005c6c:	0800d120 	.word	0x0800d120
 8005c70:	0800d143 	.word	0x0800d143
 8005c74:	0800d15c 	.word	0x0800d15c
 8005c78:	080db459 	.word	0x080db459
 8005c7c:	a1facade 	.word	0xa1facade
 8005c80:	496a7465 	.word	0x496a7465

08005c84 <ai_vww_int8_keras_get_error>:


AI_API_ENTRY
ai_error ai_vww_int8_keras_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8005c84:	f000 befa 	b.w	8006a7c <ai_platform_network_get_error>

08005c88 <ai_vww_int8_keras_create>:


AI_API_ENTRY
ai_error ai_vww_int8_keras_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005c88:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8005c8a:	2305      	movs	r3, #5
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	e9cd 3200 	strd	r3, r2, [sp]
 8005c92:	2301      	movs	r3, #1
 8005c94:	4a02      	ldr	r2, [pc, #8]	; (8005ca0 <ai_vww_int8_keras_create+0x18>)
 8005c96:	f001 f8cd 	bl	8006e34 <ai_platform_network_create>
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005c9a:	b003      	add	sp, #12
 8005c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ca0:	200040d8 	.word	0x200040d8

08005ca4 <ai_vww_int8_keras_destroy>:


AI_API_ENTRY
ai_handle ai_vww_int8_keras_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8005ca4:	f001 b908 	b.w	8006eb8 <ai_platform_network_destroy>

08005ca8 <ai_vww_int8_keras_init>:


AI_API_ENTRY
ai_bool ai_vww_int8_keras_init(
  ai_handle network, const ai_network_params* params)
{
 8005ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cac:	4605      	mov	r5, r0
 8005cae:	460f      	mov	r7, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8005cb0:	f001 f914 	bl	8006edc <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	f000 8436 	beq.w	8006528 <ai_vww_int8_keras_init+0x880>
  if (ai_platform_get_weights_map(g_vww_int8_keras_weights_map, 1, params)) {
 8005cbc:	f8df 83bc 	ldr.w	r8, [pc, #956]	; 800607c <ai_vww_int8_keras_init+0x3d4>
 8005cc0:	463a      	mov	r2, r7
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	f000 fdbb 	bl	8006840 <ai_platform_get_weights_map>
 8005cca:	4604      	mov	r4, r0
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	f000 842d 	beq.w	800652c <ai_vww_int8_keras_init+0x884>
    conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cd2:	4ac1      	ldr	r2, [pc, #772]	; (8005fd8 <ai_vww_int8_keras_init+0x330>)
 8005cd4:	6813      	ldr	r3, [r2, #0]
 8005cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cda:	6013      	str	r3, [r2, #0]
    conv2d_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 0);
 8005cdc:	f8d8 3000 	ldr.w	r3, [r8]
    conv2d_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 0);
 8005ce0:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ce4:	4abd      	ldr	r2, [pc, #756]	; (8005fdc <ai_vww_int8_keras_init+0x334>)
 8005ce6:	6811      	ldr	r1, [r2, #0]
 8005ce8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005cec:	6011      	str	r1, [r2, #0]
    conv2d_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 864);
 8005cee:	f503 7158 	add.w	r1, r3, #864	; 0x360
    conv2d_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 864);
 8005cf2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cf6:	4aba      	ldr	r2, [pc, #744]	; (8005fe0 <ai_vww_int8_keras_init+0x338>)
 8005cf8:	6811      	ldr	r1, [r2, #0]
 8005cfa:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005cfe:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 896);
 8005d00:	f503 7160 	add.w	r1, r3, #896	; 0x380
    depthwise_conv2d_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 896);
 8005d04:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d08:	4ab6      	ldr	r2, [pc, #728]	; (8005fe4 <ai_vww_int8_keras_init+0x33c>)
 8005d0a:	6811      	ldr	r1, [r2, #0]
 8005d0c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d10:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 1184);
 8005d12:	f503 6194 	add.w	r1, r3, #1184	; 0x4a0
    depthwise_conv2d_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 1184);
 8005d16:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d1a:	4ab3      	ldr	r2, [pc, #716]	; (8005fe8 <ai_vww_int8_keras_init+0x340>)
 8005d1c:	6811      	ldr	r1, [r2, #0]
 8005d1e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d22:	6011      	str	r1, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 1216);
 8005d24:	f503 6198 	add.w	r1, r3, #1216	; 0x4c0
    conv2d_1_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 1216);
 8005d28:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d2c:	4aaf      	ldr	r2, [pc, #700]	; (8005fec <ai_vww_int8_keras_init+0x344>)
 8005d2e:	6811      	ldr	r1, [r2, #0]
 8005d30:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d34:	6011      	str	r1, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 1728);
 8005d36:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
    conv2d_1_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 1728);
 8005d3a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d3e:	4aac      	ldr	r2, [pc, #688]	; (8005ff0 <ai_vww_int8_keras_init+0x348>)
 8005d40:	6811      	ldr	r1, [r2, #0]
 8005d42:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d46:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_1_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 1792);
 8005d48:	f503 61e0 	add.w	r1, r3, #1792	; 0x700
    depthwise_conv2d_1_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 1792);
 8005d4c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d50:	4aa8      	ldr	r2, [pc, #672]	; (8005ff4 <ai_vww_int8_keras_init+0x34c>)
 8005d52:	6811      	ldr	r1, [r2, #0]
 8005d54:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d58:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_1_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 2368);
 8005d5a:	f503 6114 	add.w	r1, r3, #2368	; 0x940
    depthwise_conv2d_1_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 2368);
 8005d5e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d62:	4aa5      	ldr	r2, [pc, #660]	; (8005ff8 <ai_vww_int8_keras_init+0x350>)
 8005d64:	6811      	ldr	r1, [r2, #0]
 8005d66:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d6a:	6011      	str	r1, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 2432);
 8005d6c:	f503 6118 	add.w	r1, r3, #2432	; 0x980
    conv2d_2_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 2432);
 8005d70:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d74:	4aa1      	ldr	r2, [pc, #644]	; (8005ffc <ai_vww_int8_keras_init+0x354>)
 8005d76:	6811      	ldr	r1, [r2, #0]
 8005d78:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d7c:	6011      	str	r1, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 4480);
 8005d7e:	f503 518c 	add.w	r1, r3, #4480	; 0x1180
    conv2d_2_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 4480);
 8005d82:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d86:	4a9e      	ldr	r2, [pc, #632]	; (8006000 <ai_vww_int8_keras_init+0x358>)
 8005d88:	6811      	ldr	r1, [r2, #0]
 8005d8a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005d8e:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_2_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 4608);
 8005d90:	f503 5190 	add.w	r1, r3, #4608	; 0x1200
    depthwise_conv2d_2_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 4608);
 8005d94:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d98:	4a9a      	ldr	r2, [pc, #616]	; (8006004 <ai_vww_int8_keras_init+0x35c>)
 8005d9a:	6811      	ldr	r1, [r2, #0]
 8005d9c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005da0:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_2_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 5760);
 8005da2:	f503 51b4 	add.w	r1, r3, #5760	; 0x1680
    depthwise_conv2d_2_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 5760);
 8005da6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005daa:	4a97      	ldr	r2, [pc, #604]	; (8006008 <ai_vww_int8_keras_init+0x360>)
 8005dac:	6811      	ldr	r1, [r2, #0]
 8005dae:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005db2:	6011      	str	r1, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 5888);
 8005db4:	f503 51b8 	add.w	r1, r3, #5888	; 0x1700
    conv2d_3_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 5888);
 8005db8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dbc:	4a93      	ldr	r2, [pc, #588]	; (800600c <ai_vww_int8_keras_init+0x364>)
 8005dbe:	6811      	ldr	r1, [r2, #0]
 8005dc0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005dc4:	6011      	str	r1, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 9984);
 8005dc6:	f503 511c 	add.w	r1, r3, #9984	; 0x2700
    conv2d_3_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 9984);
 8005dca:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dce:	4a90      	ldr	r2, [pc, #576]	; (8006010 <ai_vww_int8_keras_init+0x368>)
 8005dd0:	6811      	ldr	r1, [r2, #0]
 8005dd2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005dd6:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_3_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 10112);
 8005dd8:	f503 511e 	add.w	r1, r3, #10112	; 0x2780
    depthwise_conv2d_3_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 10112);
 8005ddc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005de0:	4a8c      	ldr	r2, [pc, #560]	; (8006014 <ai_vww_int8_keras_init+0x36c>)
 8005de2:	6811      	ldr	r1, [r2, #0]
 8005de4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005de8:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_3_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 11264);
 8005dea:	f503 5130 	add.w	r1, r3, #11264	; 0x2c00
    depthwise_conv2d_3_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 11264);
 8005dee:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005df2:	4a89      	ldr	r2, [pc, #548]	; (8006018 <ai_vww_int8_keras_init+0x370>)
 8005df4:	6811      	ldr	r1, [r2, #0]
 8005df6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005dfa:	6011      	str	r1, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 11392);
 8005dfc:	f503 5132 	add.w	r1, r3, #11392	; 0x2c80
    conv2d_4_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 11392);
 8005e00:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e04:	4a85      	ldr	r2, [pc, #532]	; (800601c <ai_vww_int8_keras_init+0x374>)
 8005e06:	6811      	ldr	r1, [r2, #0]
 8005e08:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e0c:	6011      	str	r1, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 19584);
 8005e0e:	f503 4199 	add.w	r1, r3, #19584	; 0x4c80
    conv2d_4_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 19584);
 8005e12:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e16:	4a82      	ldr	r2, [pc, #520]	; (8006020 <ai_vww_int8_keras_init+0x378>)
 8005e18:	6811      	ldr	r1, [r2, #0]
 8005e1a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e1e:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_4_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 19840);
 8005e20:	f503 419b 	add.w	r1, r3, #19840	; 0x4d80
    depthwise_conv2d_4_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 19840);
 8005e24:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e28:	4a7e      	ldr	r2, [pc, #504]	; (8006024 <ai_vww_int8_keras_init+0x37c>)
 8005e2a:	6811      	ldr	r1, [r2, #0]
 8005e2c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e30:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_4_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 22144);
 8005e32:	f503 41ad 	add.w	r1, r3, #22144	; 0x5680
    depthwise_conv2d_4_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 22144);
 8005e36:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e3a:	4a7b      	ldr	r2, [pc, #492]	; (8006028 <ai_vww_int8_keras_init+0x380>)
 8005e3c:	6811      	ldr	r1, [r2, #0]
 8005e3e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e42:	6011      	str	r1, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 22400);
 8005e44:	f503 41af 	add.w	r1, r3, #22400	; 0x5780
    conv2d_5_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 22400);
 8005e48:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e4c:	4a77      	ldr	r2, [pc, #476]	; (800602c <ai_vww_int8_keras_init+0x384>)
 8005e4e:	6811      	ldr	r1, [r2, #0]
 8005e50:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e54:	6011      	str	r1, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 38784);
 8005e56:	f503 4117 	add.w	r1, r3, #38656	; 0x9700
 8005e5a:	3180      	adds	r1, #128	; 0x80
    conv2d_5_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 38784);
 8005e5c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e60:	4a73      	ldr	r2, [pc, #460]	; (8006030 <ai_vww_int8_keras_init+0x388>)
 8005e62:	6811      	ldr	r1, [r2, #0]
 8005e64:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e68:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_5_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 39040);
 8005e6a:	f503 4118 	add.w	r1, r3, #38912	; 0x9800
 8005e6e:	3180      	adds	r1, #128	; 0x80
    depthwise_conv2d_5_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 39040);
 8005e70:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e74:	4a6f      	ldr	r2, [pc, #444]	; (8006034 <ai_vww_int8_keras_init+0x38c>)
 8005e76:	6811      	ldr	r1, [r2, #0]
 8005e78:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e7c:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_5_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 41344);
 8005e7e:	f503 4121 	add.w	r1, r3, #41216	; 0xa100
 8005e82:	3180      	adds	r1, #128	; 0x80
    depthwise_conv2d_5_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 41344);
 8005e84:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8005e88:	4a6b      	ldr	r2, [pc, #428]	; (8006038 <ai_vww_int8_keras_init+0x390>)
 8005e8a:	6811      	ldr	r1, [r2, #0]
 8005e8c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005e90:	6011      	str	r1, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 41600);
 8005e92:	f503 4122 	add.w	r1, r3, #41472	; 0xa200
 8005e96:	3180      	adds	r1, #128	; 0x80
    conv2d_6_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 41600);
 8005e98:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8005e9c:	4a67      	ldr	r2, [pc, #412]	; (800603c <ai_vww_int8_keras_init+0x394>)
 8005e9e:	6811      	ldr	r1, [r2, #0]
 8005ea0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ea4:	6011      	str	r1, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 74368);
 8005ea6:	f503 3191 	add.w	r1, r3, #74240	; 0x12200
 8005eaa:	3180      	adds	r1, #128	; 0x80
    conv2d_6_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 74368);
 8005eac:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8005eb0:	4a63      	ldr	r2, [pc, #396]	; (8006040 <ai_vww_int8_keras_init+0x398>)
 8005eb2:	6811      	ldr	r1, [r2, #0]
 8005eb4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005eb8:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_6_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 74880);
 8005eba:	f503 3192 	add.w	r1, r3, #74752	; 0x12400
 8005ebe:	3180      	adds	r1, #128	; 0x80
    depthwise_conv2d_6_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 74880);
 8005ec0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ec4:	4a5f      	ldr	r2, [pc, #380]	; (8006044 <ai_vww_int8_keras_init+0x39c>)
 8005ec6:	6811      	ldr	r1, [r2, #0]
 8005ec8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ecc:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_6_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 79488);
 8005ece:	f503 319b 	add.w	r1, r3, #79360	; 0x13600
 8005ed2:	3180      	adds	r1, #128	; 0x80
    depthwise_conv2d_6_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 79488);
 8005ed4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ed8:	4a5b      	ldr	r2, [pc, #364]	; (8006048 <ai_vww_int8_keras_init+0x3a0>)
 8005eda:	6811      	ldr	r1, [r2, #0]
 8005edc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005ee0:	6011      	str	r1, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 80000);
 8005ee2:	f503 319c 	add.w	r1, r3, #79872	; 0x13800
 8005ee6:	3180      	adds	r1, #128	; 0x80
    conv2d_7_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 80000);
 8005ee8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005eec:	4957      	ldr	r1, [pc, #348]	; (800604c <ai_vww_int8_keras_init+0x3a4>)
 8005eee:	680a      	ldr	r2, [r1, #0]
 8005ef0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005ef4:	600a      	str	r2, [r1, #0]
    conv2d_7_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 145536);
 8005ef6:	f503 320e 	add.w	r2, r3, #145408	; 0x23800
 8005efa:	f102 0080 	add.w	r0, r2, #128	; 0x80
    depthwise_conv2d_7_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 146048);
 8005efe:	f502 7220 	add.w	r2, r2, #640	; 0x280
    conv2d_7_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 145536);
 8005f02:	e9c1 0002 	strd	r0, r0, [r1, #8]
    depthwise_conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f06:	4952      	ldr	r1, [pc, #328]	; (8006050 <ai_vww_int8_keras_init+0x3a8>)
 8005f08:	6808      	ldr	r0, [r1, #0]
 8005f0a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    depthwise_conv2d_7_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 146048);
 8005f0e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    depthwise_conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f12:	6008      	str	r0, [r1, #0]
    depthwise_conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f14:	494f      	ldr	r1, [pc, #316]	; (8006054 <ai_vww_int8_keras_init+0x3ac>)
 8005f16:	680a      	ldr	r2, [r1, #0]
 8005f18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005f1c:	600a      	str	r2, [r1, #0]
    depthwise_conv2d_7_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 150656);
 8005f1e:	f503 3213 	add.w	r2, r3, #150528	; 0x24c00
 8005f22:	f102 0080 	add.w	r0, r2, #128	; 0x80
    conv2d_8_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 151168);
 8005f26:	f502 7220 	add.w	r2, r2, #640	; 0x280
    depthwise_conv2d_7_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 150656);
 8005f2a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f2e:	494a      	ldr	r1, [pc, #296]	; (8006058 <ai_vww_int8_keras_init+0x3b0>)
 8005f30:	6808      	ldr	r0, [r1, #0]
    conv2d_8_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 151168);
 8005f32:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f36:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f3a:	4a48      	ldr	r2, [pc, #288]	; (800605c <ai_vww_int8_keras_init+0x3b4>)
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f3c:	6008      	str	r0, [r1, #0]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f3e:	6811      	ldr	r1, [r2, #0]
 8005f40:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005f44:	6011      	str	r1, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 216704);
 8005f46:	f503 3153 	add.w	r1, r3, #216064	; 0x34c00
 8005f4a:	f501 7120 	add.w	r1, r1, #640	; 0x280
    conv2d_8_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 216704);
 8005f4e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f52:	4a43      	ldr	r2, [pc, #268]	; (8006060 <ai_vww_int8_keras_init+0x3b8>)
 8005f54:	6811      	ldr	r1, [r2, #0]
 8005f56:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005f5a:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_8_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 217216);
 8005f5c:	f503 3154 	add.w	r1, r3, #217088	; 0x35000
 8005f60:	3180      	adds	r1, #128	; 0x80
    depthwise_conv2d_8_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 217216);
 8005f62:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f66:	4a3f      	ldr	r2, [pc, #252]	; (8006064 <ai_vww_int8_keras_init+0x3bc>)
 8005f68:	6811      	ldr	r1, [r2, #0]
 8005f6a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005f6e:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_8_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 221824);
 8005f70:	f503 3158 	add.w	r1, r3, #221184	; 0x36000
 8005f74:	f501 7120 	add.w	r1, r1, #640	; 0x280
    depthwise_conv2d_8_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 221824);
 8005f78:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f7c:	4a3a      	ldr	r2, [pc, #232]	; (8006068 <ai_vww_int8_keras_init+0x3c0>)
 8005f7e:	6811      	ldr	r1, [r2, #0]
 8005f80:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005f84:	6011      	str	r1, [r2, #0]
    conv2d_9_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 222336);
 8005f86:	f503 3159 	add.w	r1, r3, #222208	; 0x36400
 8005f8a:	3180      	adds	r1, #128	; 0x80
    conv2d_9_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 222336);
 8005f8c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f90:	4936      	ldr	r1, [pc, #216]	; (800606c <ai_vww_int8_keras_init+0x3c4>)
 8005f92:	680a      	ldr	r2, [r1, #0]
 8005f94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005f98:	600a      	str	r2, [r1, #0]
    conv2d_9_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 287872);
 8005f9a:	f503 228c 	add.w	r2, r3, #286720	; 0x46000
 8005f9e:	f502 6090 	add.w	r0, r2, #1152	; 0x480
    depthwise_conv2d_9_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 288384);
 8005fa2:	f502 62d0 	add.w	r2, r2, #1664	; 0x680
    conv2d_9_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 287872);
 8005fa6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    depthwise_conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8005faa:	4931      	ldr	r1, [pc, #196]	; (8006070 <ai_vww_int8_keras_init+0x3c8>)
 8005fac:	6808      	ldr	r0, [r1, #0]
 8005fae:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    depthwise_conv2d_9_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 288384);
 8005fb2:	e9c1 2202 	strd	r2, r2, [r1, #8]
    depthwise_conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8005fb6:	6008      	str	r0, [r1, #0]
    depthwise_conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8005fb8:	492e      	ldr	r1, [pc, #184]	; (8006074 <ai_vww_int8_keras_init+0x3cc>)
 8005fba:	680a      	ldr	r2, [r1, #0]
 8005fbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005fc0:	600a      	str	r2, [r1, #0]
    depthwise_conv2d_9_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 292992);
 8005fc2:	f503 228f 	add.w	r2, r3, #292864	; 0x47800
 8005fc6:	f102 0080 	add.w	r0, r2, #128	; 0x80
    conv2d_10_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 293504);
 8005fca:	f502 7220 	add.w	r2, r2, #640	; 0x280
    depthwise_conv2d_9_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 292992);
 8005fce:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8005fd2:	4929      	ldr	r1, [pc, #164]	; (8006078 <ai_vww_int8_keras_init+0x3d0>)
 8005fd4:	6808      	ldr	r0, [r1, #0]
 8005fd6:	e053      	b.n	8006080 <ai_vww_int8_keras_init+0x3d8>
 8005fd8:	200035b4 	.word	0x200035b4
 8005fdc:	200034ec 	.word	0x200034ec
 8005fe0:	200040c8 	.word	0x200040c8
 8005fe4:	2000402c 	.word	0x2000402c
 8005fe8:	20002d20 	.word	0x20002d20
 8005fec:	20002c58 	.word	0x20002c58
 8005ff0:	200039c0 	.word	0x200039c0
 8005ff4:	20003924 	.word	0x20003924
 8005ff8:	20002e14 	.word	0x20002e14
 8005ffc:	20002d4c 	.word	0x20002d4c
 8006000:	20003a88 	.word	0x20003a88
 8006004:	200039ec 	.word	0x200039ec
 8006008:	20002f08 	.word	0x20002f08
 800600c:	20002e40 	.word	0x20002e40
 8006010:	20003b50 	.word	0x20003b50
 8006014:	20003ab4 	.word	0x20003ab4
 8006018:	20002ffc 	.word	0x20002ffc
 800601c:	20002f34 	.word	0x20002f34
 8006020:	20003c18 	.word	0x20003c18
 8006024:	20003b7c 	.word	0x20003b7c
 8006028:	200030f0 	.word	0x200030f0
 800602c:	20003028 	.word	0x20003028
 8006030:	20003ce0 	.word	0x20003ce0
 8006034:	20003c44 	.word	0x20003c44
 8006038:	200031e4 	.word	0x200031e4
 800603c:	2000311c 	.word	0x2000311c
 8006040:	20003da8 	.word	0x20003da8
 8006044:	20003d0c 	.word	0x20003d0c
 8006048:	200032d8 	.word	0x200032d8
 800604c:	20003210 	.word	0x20003210
 8006050:	20003e70 	.word	0x20003e70
 8006054:	20003dd4 	.word	0x20003dd4
 8006058:	200033cc 	.word	0x200033cc
 800605c:	20003304 	.word	0x20003304
 8006060:	20003f38 	.word	0x20003f38
 8006064:	20003e9c 	.word	0x20003e9c
 8006068:	200034c0 	.word	0x200034c0
 800606c:	200033f8 	.word	0x200033f8
 8006070:	20004000 	.word	0x20004000
 8006074:	20003f64 	.word	0x20003f64
 8006078:	20002950 	.word	0x20002950
 800607c:	20004afc 	.word	0x20004afc
 8006080:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_10_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 293504);
 8006084:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8006088:	6008      	str	r0, [r1, #0]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 800608a:	49c7      	ldr	r1, [pc, #796]	; (80063a8 <ai_vww_int8_keras_init+0x700>)
 800608c:	680a      	ldr	r2, [r1, #0]
 800608e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006092:	600a      	str	r2, [r1, #0]
    conv2d_10_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 359040);
 8006094:	f503 22af 	add.w	r2, r3, #358400	; 0x57800
 8006098:	f502 7020 	add.w	r0, r2, #640	; 0x280
    depthwise_conv2d_10_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 359552);
 800609c:	f502 6290 	add.w	r2, r2, #1152	; 0x480
    conv2d_10_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 359040);
 80060a0:	e9c1 0002 	strd	r0, r0, [r1, #8]
    depthwise_conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 80060a4:	49c1      	ldr	r1, [pc, #772]	; (80063ac <ai_vww_int8_keras_init+0x704>)
 80060a6:	6808      	ldr	r0, [r1, #0]
    depthwise_conv2d_10_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 359552);
 80060a8:	e9c1 2202 	strd	r2, r2, [r1, #8]
    depthwise_conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 80060ac:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    depthwise_conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 80060b0:	4abf      	ldr	r2, [pc, #764]	; (80063b0 <ai_vww_int8_keras_init+0x708>)
    depthwise_conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 80060b2:	6008      	str	r0, [r1, #0]
    depthwise_conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 80060b4:	6811      	ldr	r1, [r2, #0]
 80060b6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80060ba:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_10_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 364160);
 80060bc:	f503 21b1 	add.w	r1, r3, #362496	; 0x58800
 80060c0:	f501 61d0 	add.w	r1, r1, #1664	; 0x680
    depthwise_conv2d_10_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 364160);
 80060c4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 80060c8:	4aba      	ldr	r2, [pc, #744]	; (80063b4 <ai_vww_int8_keras_init+0x70c>)
 80060ca:	6811      	ldr	r1, [r2, #0]
 80060cc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80060d0:	6011      	str	r1, [r2, #0]
    conv2d_11_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 364672);
 80060d2:	f503 21b2 	add.w	r1, r3, #364544	; 0x59000
 80060d6:	3180      	adds	r1, #128	; 0x80
    conv2d_11_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 364672);
 80060d8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 80060dc:	49b6      	ldr	r1, [pc, #728]	; (80063b8 <ai_vww_int8_keras_init+0x710>)
 80060de:	680a      	ldr	r2, [r1, #0]
 80060e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80060e4:	600a      	str	r2, [r1, #0]
    conv2d_11_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 430208);
 80060e6:	f503 22d2 	add.w	r2, r3, #430080	; 0x69000
 80060ea:	f102 0080 	add.w	r0, r2, #128	; 0x80
    depthwise_conv2d_11_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 430720);
 80060ee:	f502 7220 	add.w	r2, r2, #640	; 0x280
    conv2d_11_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 430208);
 80060f2:	e9c1 0002 	strd	r0, r0, [r1, #8]
    depthwise_conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 80060f6:	49b1      	ldr	r1, [pc, #708]	; (80063bc <ai_vww_int8_keras_init+0x714>)
 80060f8:	6808      	ldr	r0, [r1, #0]
 80060fa:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    depthwise_conv2d_11_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 430720);
 80060fe:	e9c1 2202 	strd	r2, r2, [r1, #8]
    depthwise_conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8006102:	6008      	str	r0, [r1, #0]
    depthwise_conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8006104:	49ae      	ldr	r1, [pc, #696]	; (80063c0 <ai_vww_int8_keras_init+0x718>)
 8006106:	680a      	ldr	r2, [r1, #0]
 8006108:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800610c:	600a      	str	r2, [r1, #0]
    depthwise_conv2d_11_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 435328);
 800610e:	f503 22d4 	add.w	r2, r3, #434176	; 0x6a000
 8006112:	f502 6090 	add.w	r0, r2, #1152	; 0x480
    conv2d_12_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 435840);
 8006116:	f502 62d0 	add.w	r2, r2, #1664	; 0x680
    depthwise_conv2d_11_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 435328);
 800611a:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 800611e:	49a9      	ldr	r1, [pc, #676]	; (80063c4 <ai_vww_int8_keras_init+0x71c>)
 8006120:	6808      	ldr	r0, [r1, #0]
    conv2d_12_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 435840);
 8006122:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8006126:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 800612a:	4aa7      	ldr	r2, [pc, #668]	; (80063c8 <ai_vww_int8_keras_init+0x720>)
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 800612c:	6008      	str	r0, [r1, #0]
    conv2d_12_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 566912);
 800612e:	f503 200a 	add.w	r0, r3, #565248	; 0x8a000
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8006132:	6811      	ldr	r1, [r2, #0]
 8006134:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006138:	6011      	str	r1, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 566912);
 800613a:	f500 61d0 	add.w	r1, r0, #1664	; 0x680
    depthwise_conv2d_12_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 567936);
 800613e:	f500 6028 	add.w	r0, r0, #2688	; 0xa80
    conv2d_12_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 566912);
 8006142:	e9c2 1102 	strd	r1, r1, [r2, #8]
    depthwise_conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8006146:	4aa1      	ldr	r2, [pc, #644]	; (80063cc <ai_vww_int8_keras_init+0x724>)
 8006148:	6811      	ldr	r1, [r2, #0]
 800614a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    depthwise_conv2d_12_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 567936);
 800614e:	e9c2 0002 	strd	r0, r0, [r2, #8]
    depthwise_conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8006152:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 8006154:	4a9e      	ldr	r2, [pc, #632]	; (80063d0 <ai_vww_int8_keras_init+0x728>)
 8006156:	6811      	ldr	r1, [r2, #0]
 8006158:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800615c:	6011      	str	r1, [r2, #0]
    depthwise_conv2d_12_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 577152);
 800615e:	f503 210c 	add.w	r1, r3, #573440	; 0x8c000
 8006162:	f501 6168 	add.w	r1, r1, #3712	; 0xe80
    depthwise_conv2d_12_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 577152);
 8006166:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 800616a:	4a9a      	ldr	r2, [pc, #616]	; (80063d4 <ai_vww_int8_keras_init+0x72c>)
 800616c:	6811      	ldr	r1, [r2, #0]
 800616e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006172:	6011      	str	r1, [r2, #0]
    conv2d_13_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 578176);
 8006174:	f503 210d 	add.w	r1, r3, #577536	; 0x8d000
    conv2d_13_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 840320);
 8006178:	f503 234d 	add.w	r3, r3, #839680	; 0xcd000
    conv2d_13_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 578176);
 800617c:	f501 7120 	add.w	r1, r1, #640	; 0x280
    conv2d_13_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 578176);
 8006180:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8006184:	4a94      	ldr	r2, [pc, #592]	; (80063d8 <ai_vww_int8_keras_init+0x730>)
 8006186:	6811      	ldr	r1, [r2, #0]
 8006188:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800618c:	6011      	str	r1, [r2, #0]
    conv2d_13_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 840320);
 800618e:	f503 7120 	add.w	r1, r3, #640	; 0x280
    conv2d_13_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 840320);
 8006192:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006196:	4a91      	ldr	r2, [pc, #580]	; (80063dc <ai_vww_int8_keras_init+0x734>)
 8006198:	6811      	ldr	r1, [r2, #0]
 800619a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800619e:	6011      	str	r1, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 841344);
 80061a0:	f503 61d0 	add.w	r1, r3, #1664	; 0x680
    dense_dense_bias_array.data = AI_PTR(g_vww_int8_keras_weights_map[0] + 843392);
 80061a4:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
    dense_dense_weights_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 841344);
 80061a8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80061ac:	4a8c      	ldr	r2, [pc, #560]	; (80063e0 <ai_vww_int8_keras_init+0x738>)
 80061ae:	6811      	ldr	r1, [r2, #0]
 80061b0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    dense_dense_bias_array.data_start = AI_PTR(g_vww_int8_keras_weights_map[0] + 843392);
 80061b4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80061b8:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_vww_int8_keras_activations_map, 1, params)) {
 80061ba:	f8df 8320 	ldr.w	r8, [pc, #800]	; 80064dc <ai_vww_int8_keras_init+0x834>
 80061be:	463a      	mov	r2, r7
 80061c0:	2101      	movs	r1, #1
 80061c2:	4640      	mov	r0, r8
 80061c4:	f000 fb94 	bl	80068f0 <ai_platform_get_activations_map>
 80061c8:	4607      	mov	r7, r0
 80061ca:	2800      	cmp	r0, #0
 80061cc:	f000 81b4 	beq.w	8006538 <ai_vww_int8_keras_init+0x890>
    input_1_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 8160);
 80061d0:	f8d8 3000 	ldr.w	r3, [r8]
 80061d4:	4a83      	ldr	r2, [pc, #524]	; (80063e4 <ai_vww_int8_keras_init+0x73c>)
 80061d6:	f503 51ff 	add.w	r1, r3, #8160	; 0x1fe0
    activation_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 79936);
 80061da:	4883      	ldr	r0, [pc, #524]	; (80063e8 <ai_vww_int8_keras_init+0x740>)
    conv2d_4_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18560);
 80061dc:	f503 4c91 	add.w	ip, r3, #18560	; 0x4880
    input_1_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 8160);
 80061e0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 118752);
 80061e4:	f503 32e7 	add.w	r2, r3, #118272	; 0x1ce00
 80061e8:	4980      	ldr	r1, [pc, #512]	; (80063ec <ai_vww_int8_keras_init+0x744>)
 80061ea:	f502 72f0 	add.w	r2, r2, #480	; 0x1e0
    conv2d_scratch0_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 118752);
 80061ee:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 6208);
 80061f2:	f503 51c2 	add.w	r1, r3, #6208	; 0x1840
 80061f6:	4a7e      	ldr	r2, [pc, #504]	; (80063f0 <ai_vww_int8_keras_init+0x748>)
    conv2d_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 6208);
 80061f8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    activation_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 79936);
 80061fc:	f503 329c 	add.w	r2, r3, #79872	; 0x13800
 8006200:	3240      	adds	r2, #64	; 0x40
    activation_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 79936);
 8006202:	e9c0 2202 	strd	r2, r2, [r0, #8]
    depthwise_conv2d_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 6208);
 8006206:	487b      	ldr	r0, [pc, #492]	; (80063f4 <ai_vww_int8_keras_init+0x74c>)
    depthwise_conv2d_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 6208);
 8006208:	e9c0 1102 	strd	r1, r1, [r0, #8]
    activation_1_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 79936);
 800620c:	497a      	ldr	r1, [pc, #488]	; (80063f8 <ai_vww_int8_keras_init+0x750>)
    activation_3_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 36864);
 800620e:	f503 4010 	add.w	r0, r3, #36864	; 0x9000
    activation_1_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 79936);
 8006212:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 153664);
 8006216:	f503 3216 	add.w	r2, r3, #153600	; 0x25800
 800621a:	4978      	ldr	r1, [pc, #480]	; (80063fc <ai_vww_int8_keras_init+0x754>)
 800621c:	3240      	adds	r2, #64	; 0x40
    conv2d_1_scratch0_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 153664);
 800621e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 1600);
 8006222:	f503 62c8 	add.w	r2, r3, #1600	; 0x640
 8006226:	4976      	ldr	r1, [pc, #472]	; (8006400 <ai_vww_int8_keras_init+0x758>)
    conv2d_1_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 1600);
 8006228:	e9c1 2202 	strd	r2, r2, [r1, #8]
    activation_2_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 1600);
 800622c:	4975      	ldr	r1, [pc, #468]	; (8006404 <ai_vww_int8_keras_init+0x75c>)
    activation_2_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 1600);
 800622e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    depthwise_conv2d_1_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006232:	4a75      	ldr	r2, [pc, #468]	; (8006408 <ai_vww_int8_keras_init+0x760>)
    conv2d_2_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 73728);
 8006234:	f503 3190 	add.w	r1, r3, #73728	; 0x12000
    depthwise_conv2d_1_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006238:	e9c2 3302 	strd	r3, r3, [r2, #8]
    activation_3_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 36864);
 800623c:	4a73      	ldr	r2, [pc, #460]	; (800640c <ai_vww_int8_keras_init+0x764>)
    conv2d_3_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 73856);
 800623e:	f101 0680 	add.w	r6, r1, #128	; 0x80
    activation_3_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 36864);
 8006242:	e9c2 0002 	strd	r0, r0, [r2, #8]
    conv2d_2_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006246:	4a72      	ldr	r2, [pc, #456]	; (8006410 <ai_vww_int8_keras_init+0x768>)
    conv2d_2_scratch0_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006248:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_2_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 73728);
 800624c:	4a71      	ldr	r2, [pc, #452]	; (8006414 <ai_vww_int8_keras_init+0x76c>)
    conv2d_2_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 73728);
 800624e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    activation_4_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006252:	4a71      	ldr	r2, [pc, #452]	; (8006418 <ai_vww_int8_keras_init+0x770>)
    activation_4_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006254:	e9c2 3302 	strd	r3, r3, [r2, #8]
    depthwise_conv2d_2_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 73728);
 8006258:	4a70      	ldr	r2, [pc, #448]	; (800641c <ai_vww_int8_keras_init+0x774>)
    depthwise_conv2d_2_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 73728);
 800625a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    activation_5_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 800625e:	4a70      	ldr	r2, [pc, #448]	; (8006420 <ai_vww_int8_keras_init+0x778>)
    activation_5_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006260:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_3_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 73728);
 8006264:	4a6f      	ldr	r2, [pc, #444]	; (8006424 <ai_vww_int8_keras_init+0x77c>)
    conv2d_3_scratch0_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 73728);
 8006266:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_3_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 73856);
 800626a:	4a6f      	ldr	r2, [pc, #444]	; (8006428 <ai_vww_int8_keras_init+0x780>)
    conv2d_3_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 73856);
 800626c:	e9c2 6602 	strd	r6, r6, [r2, #8]
    activation_6_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006270:	4a6e      	ldr	r2, [pc, #440]	; (800642c <ai_vww_int8_keras_init+0x784>)
    conv2d_4_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006272:	4e6f      	ldr	r6, [pc, #444]	; (8006430 <ai_vww_int8_keras_init+0x788>)
    activation_6_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006274:	e9c2 3302 	strd	r3, r3, [r2, #8]
    depthwise_conv2d_3_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 73728);
 8006278:	4a6e      	ldr	r2, [pc, #440]	; (8006434 <ai_vww_int8_keras_init+0x78c>)
    depthwise_conv2d_3_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 73728);
 800627a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    activation_7_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 800627e:	4a6e      	ldr	r2, [pc, #440]	; (8006438 <ai_vww_int8_keras_init+0x790>)
    activation_7_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006280:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_4_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006284:	f503 4290 	add.w	r2, r3, #18432	; 0x4800
    conv2d_4_scratch0_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006288:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_4_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18560);
 800628c:	4e6b      	ldr	r6, [pc, #428]	; (800643c <ai_vww_int8_keras_init+0x794>)
    conv2d_4_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18560);
 800628e:	e9c6 cc02 	strd	ip, ip, [r6, #8]
    activation_8_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 55424);
 8006292:	f503 4658 	add.w	r6, r3, #55296	; 0xd800
 8006296:	f8df c248 	ldr.w	ip, [pc, #584]	; 80064e0 <ai_vww_int8_keras_init+0x838>
 800629a:	3680      	adds	r6, #128	; 0x80
    activation_8_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 55424);
 800629c:	e9cc 6602 	strd	r6, r6, [ip, #8]
    depthwise_conv2d_4_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80062a0:	4e67      	ldr	r6, [pc, #412]	; (8006440 <ai_vww_int8_keras_init+0x798>)
    conv2d_6_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 9472);
 80062a2:	f503 5c14 	add.w	ip, r3, #9472	; 0x2500
    depthwise_conv2d_4_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80062a6:	e9c6 3302 	strd	r3, r3, [r6, #8]
    activation_9_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 36864);
 80062aa:	4e66      	ldr	r6, [pc, #408]	; (8006444 <ai_vww_int8_keras_init+0x79c>)
    activation_9_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 36864);
 80062ac:	e9c6 0002 	strd	r0, r0, [r6, #8]
    conv2d_5_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80062b0:	4e65      	ldr	r6, [pc, #404]	; (8006448 <ai_vww_int8_keras_init+0x7a0>)
    conv2d_5_scratch0_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80062b2:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_5_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 73728);
 80062b6:	4e65      	ldr	r6, [pc, #404]	; (800644c <ai_vww_int8_keras_init+0x7a4>)
    conv2d_5_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 73728);
 80062b8:	e9c6 1102 	strd	r1, r1, [r6, #8]
    activation_10_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80062bc:	4964      	ldr	r1, [pc, #400]	; (8006450 <ai_vww_int8_keras_init+0x7a8>)
    conv2d_6_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 9216);
 80062be:	f503 5610 	add.w	r6, r3, #9216	; 0x2400
    activation_10_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80062c2:	e9c1 3302 	strd	r3, r3, [r1, #8]
    depthwise_conv2d_5_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 36864);
 80062c6:	4963      	ldr	r1, [pc, #396]	; (8006454 <ai_vww_int8_keras_init+0x7ac>)
    depthwise_conv2d_5_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 36864);
 80062c8:	e9c1 0002 	strd	r0, r0, [r1, #8]
    activation_11_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80062cc:	4962      	ldr	r1, [pc, #392]	; (8006458 <ai_vww_int8_keras_init+0x7b0>)
    activation_11_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80062ce:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_6_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 9216);
 80062d2:	4962      	ldr	r1, [pc, #392]	; (800645c <ai_vww_int8_keras_init+0x7b4>)
    conv2d_6_scratch0_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 9216);
 80062d4:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_6_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 9472);
 80062d8:	4961      	ldr	r1, [pc, #388]	; (8006460 <ai_vww_int8_keras_init+0x7b8>)
    conv2d_6_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 9472);
 80062da:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    activation_12_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 27904);
 80062de:	f503 4cda 	add.w	ip, r3, #27904	; 0x6d00
 80062e2:	4960      	ldr	r1, [pc, #384]	; (8006464 <ai_vww_int8_keras_init+0x7bc>)
    activation_12_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 27904);
 80062e4:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    depthwise_conv2d_6_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80062e8:	495f      	ldr	r1, [pc, #380]	; (8006468 <ai_vww_int8_keras_init+0x7c0>)
    depthwise_conv2d_6_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80062ea:	e9c1 3302 	strd	r3, r3, [r1, #8]
    activation_13_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 80062ee:	495f      	ldr	r1, [pc, #380]	; (800646c <ai_vww_int8_keras_init+0x7c4>)
    activation_13_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 80062f0:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_7_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80062f4:	495e      	ldr	r1, [pc, #376]	; (8006470 <ai_vww_int8_keras_init+0x7c8>)
    conv2d_7_scratch0_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80062f6:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_7_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 36864);
 80062fa:	495e      	ldr	r1, [pc, #376]	; (8006474 <ai_vww_int8_keras_init+0x7cc>)
    conv2d_7_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 36864);
 80062fc:	e9c1 0002 	strd	r0, r0, [r1, #8]
    activation_14_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006300:	495d      	ldr	r1, [pc, #372]	; (8006478 <ai_vww_int8_keras_init+0x7d0>)
    conv2d_8_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18944);
 8006302:	485e      	ldr	r0, [pc, #376]	; (800647c <ai_vww_int8_keras_init+0x7d4>)
    activation_14_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006304:	e9c1 3302 	strd	r3, r3, [r1, #8]
    depthwise_conv2d_7_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006308:	495d      	ldr	r1, [pc, #372]	; (8006480 <ai_vww_int8_keras_init+0x7d8>)
    depthwise_conv2d_7_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 800630a:	e9c1 2202 	strd	r2, r2, [r1, #8]
    activation_15_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 800630e:	495d      	ldr	r1, [pc, #372]	; (8006484 <ai_vww_int8_keras_init+0x7dc>)
    activation_15_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006310:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_8_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006314:	495c      	ldr	r1, [pc, #368]	; (8006488 <ai_vww_int8_keras_init+0x7e0>)
    conv2d_8_scratch0_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006316:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_8_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18944);
 800631a:	f503 4194 	add.w	r1, r3, #18944	; 0x4a00
    conv2d_8_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18944);
 800631e:	e9c0 1102 	strd	r1, r1, [r0, #8]
    activation_16_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006322:	485a      	ldr	r0, [pc, #360]	; (800648c <ai_vww_int8_keras_init+0x7e4>)
    activation_16_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006324:	e9c0 3302 	strd	r3, r3, [r0, #8]
    depthwise_conv2d_8_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006328:	4859      	ldr	r0, [pc, #356]	; (8006490 <ai_vww_int8_keras_init+0x7e8>)
    depthwise_conv2d_8_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 800632a:	e9c0 2202 	strd	r2, r2, [r0, #8]
    activation_17_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 800632e:	4859      	ldr	r0, [pc, #356]	; (8006494 <ai_vww_int8_keras_init+0x7ec>)
    activation_17_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006330:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_9_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006334:	4858      	ldr	r0, [pc, #352]	; (8006498 <ai_vww_int8_keras_init+0x7f0>)
    conv2d_9_scratch0_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006336:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_9_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18944);
 800633a:	4858      	ldr	r0, [pc, #352]	; (800649c <ai_vww_int8_keras_init+0x7f4>)
    conv2d_9_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18944);
 800633c:	e9c0 1102 	strd	r1, r1, [r0, #8]
    activation_18_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006340:	4857      	ldr	r0, [pc, #348]	; (80064a0 <ai_vww_int8_keras_init+0x7f8>)
    activation_18_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006342:	e9c0 3302 	strd	r3, r3, [r0, #8]
    depthwise_conv2d_9_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006346:	4857      	ldr	r0, [pc, #348]	; (80064a4 <ai_vww_int8_keras_init+0x7fc>)
    depthwise_conv2d_9_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006348:	e9c0 2202 	strd	r2, r2, [r0, #8]
    activation_19_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 800634c:	4856      	ldr	r0, [pc, #344]	; (80064a8 <ai_vww_int8_keras_init+0x800>)
    activation_19_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 800634e:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_10_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006352:	4856      	ldr	r0, [pc, #344]	; (80064ac <ai_vww_int8_keras_init+0x804>)
    conv2d_10_scratch0_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006354:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_10_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18944);
 8006358:	4855      	ldr	r0, [pc, #340]	; (80064b0 <ai_vww_int8_keras_init+0x808>)
    conv2d_10_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18944);
 800635a:	e9c0 1102 	strd	r1, r1, [r0, #8]
    activation_20_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 800635e:	4855      	ldr	r0, [pc, #340]	; (80064b4 <ai_vww_int8_keras_init+0x80c>)
    activation_20_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006360:	e9c0 3302 	strd	r3, r3, [r0, #8]
    depthwise_conv2d_10_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006364:	4854      	ldr	r0, [pc, #336]	; (80064b8 <ai_vww_int8_keras_init+0x810>)
    depthwise_conv2d_10_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006366:	e9c0 2202 	strd	r2, r2, [r0, #8]
    activation_21_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 800636a:	4854      	ldr	r0, [pc, #336]	; (80064bc <ai_vww_int8_keras_init+0x814>)
    activation_21_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 800636c:	e9c0 3302 	strd	r3, r3, [r0, #8]
    conv2d_11_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006370:	4853      	ldr	r0, [pc, #332]	; (80064c0 <ai_vww_int8_keras_init+0x818>)
    conv2d_11_scratch0_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006372:	e9c0 2202 	strd	r2, r2, [r0, #8]
    conv2d_11_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18944);
 8006376:	4853      	ldr	r0, [pc, #332]	; (80064c4 <ai_vww_int8_keras_init+0x81c>)
    conv2d_11_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18944);
 8006378:	e9c0 1102 	strd	r1, r1, [r0, #8]
    activation_22_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 800637c:	4952      	ldr	r1, [pc, #328]	; (80064c8 <ai_vww_int8_keras_init+0x820>)
    conv2d_12_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 4608);
 800637e:	f503 5090 	add.w	r0, r3, #4608	; 0x1200
    activation_22_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006382:	e9c1 3302 	strd	r3, r3, [r1, #8]
    depthwise_conv2d_11_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006386:	4951      	ldr	r1, [pc, #324]	; (80064cc <ai_vww_int8_keras_init+0x824>)
    depthwise_conv2d_11_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 8006388:	e9c1 2202 	strd	r2, r2, [r1, #8]
    activation_23_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 800638c:	4950      	ldr	r1, [pc, #320]	; (80064d0 <ai_vww_int8_keras_init+0x828>)
    activation_23_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 800638e:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_12_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 4608);
 8006392:	4950      	ldr	r1, [pc, #320]	; (80064d4 <ai_vww_int8_keras_init+0x82c>)
    conv2d_12_scratch0_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 4608);
 8006394:	e9c1 0002 	strd	r0, r0, [r1, #8]
    conv2d_12_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 5120);
 8006398:	f503 50a0 	add.w	r0, r3, #5120	; 0x1400
 800639c:	494e      	ldr	r1, [pc, #312]	; (80064d8 <ai_vww_int8_keras_init+0x830>)
    conv2d_12_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 5120);
 800639e:	e9c1 0002 	strd	r0, r0, [r1, #8]
    activation_24_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 14336);
 80063a2:	f503 5060 	add.w	r0, r3, #14336	; 0x3800
 80063a6:	e09d      	b.n	80064e4 <ai_vww_int8_keras_init+0x83c>
 80063a8:	20002888 	.word	0x20002888
 80063ac:	20003768 	.word	0x20003768
 80063b0:	200036cc 	.word	0x200036cc
 80063b4:	20002a44 	.word	0x20002a44
 80063b8:	2000297c 	.word	0x2000297c
 80063bc:	20003830 	.word	0x20003830
 80063c0:	20003794 	.word	0x20003794
 80063c4:	20002b38 	.word	0x20002b38
 80063c8:	20002a70 	.word	0x20002a70
 80063cc:	200038f8 	.word	0x200038f8
 80063d0:	2000385c 	.word	0x2000385c
 80063d4:	20002c2c 	.word	0x20002c2c
 80063d8:	20002b64 	.word	0x20002b64
 80063dc:	20003654 	.word	0x20003654
 80063e0:	200035e0 	.word	0x200035e0
 80063e4:	20004140 	.word	0x20004140
 80063e8:	200027f8 	.word	0x200027f8
 80063ec:	20003588 	.word	0x20003588
 80063f0:	2000355c 	.word	0x2000355c
 80063f4:	2000409c 	.word	0x2000409c
 80063f8:	20002338 	.word	0x20002338
 80063fc:	20002cf4 	.word	0x20002cf4
 8006400:	20002cc8 	.word	0x20002cc8
 8006404:	20002598 	.word	0x20002598
 8006408:	20003994 	.word	0x20003994
 800640c:	200025e4 	.word	0x200025e4
 8006410:	20002de8 	.word	0x20002de8
 8006414:	20002dbc 	.word	0x20002dbc
 8006418:	20002630 	.word	0x20002630
 800641c:	20003a5c 	.word	0x20003a5c
 8006420:	2000267c 	.word	0x2000267c
 8006424:	20002edc 	.word	0x20002edc
 8006428:	20002eb0 	.word	0x20002eb0
 800642c:	200026c8 	.word	0x200026c8
 8006430:	20002fd0 	.word	0x20002fd0
 8006434:	20003b24 	.word	0x20003b24
 8006438:	20002714 	.word	0x20002714
 800643c:	20002fa4 	.word	0x20002fa4
 8006440:	20003bec 	.word	0x20003bec
 8006444:	200027ac 	.word	0x200027ac
 8006448:	200030c4 	.word	0x200030c4
 800644c:	20003098 	.word	0x20003098
 8006450:	20002040 	.word	0x20002040
 8006454:	20003cb4 	.word	0x20003cb4
 8006458:	2000208c 	.word	0x2000208c
 800645c:	200031b8 	.word	0x200031b8
 8006460:	2000318c 	.word	0x2000318c
 8006464:	200020d8 	.word	0x200020d8
 8006468:	20003d7c 	.word	0x20003d7c
 800646c:	20002124 	.word	0x20002124
 8006470:	200032ac 	.word	0x200032ac
 8006474:	20003280 	.word	0x20003280
 8006478:	20002170 	.word	0x20002170
 800647c:	20003374 	.word	0x20003374
 8006480:	20003e44 	.word	0x20003e44
 8006484:	200021bc 	.word	0x200021bc
 8006488:	200033a0 	.word	0x200033a0
 800648c:	20002208 	.word	0x20002208
 8006490:	20003f0c 	.word	0x20003f0c
 8006494:	20002254 	.word	0x20002254
 8006498:	20003494 	.word	0x20003494
 800649c:	20003468 	.word	0x20003468
 80064a0:	200022a0 	.word	0x200022a0
 80064a4:	20003fd4 	.word	0x20003fd4
 80064a8:	200022ec 	.word	0x200022ec
 80064ac:	20002924 	.word	0x20002924
 80064b0:	200028f8 	.word	0x200028f8
 80064b4:	20002384 	.word	0x20002384
 80064b8:	2000373c 	.word	0x2000373c
 80064bc:	200023d0 	.word	0x200023d0
 80064c0:	20002a18 	.word	0x20002a18
 80064c4:	200029ec 	.word	0x200029ec
 80064c8:	2000241c 	.word	0x2000241c
 80064cc:	20003804 	.word	0x20003804
 80064d0:	20002468 	.word	0x20002468
 80064d4:	20002b0c 	.word	0x20002b0c
 80064d8:	20002ae0 	.word	0x20002ae0
 80064dc:	20004af8 	.word	0x20004af8
 80064e0:	20002760 	.word	0x20002760
 80064e4:	4917      	ldr	r1, [pc, #92]	; (8006544 <ai_vww_int8_keras_init+0x89c>)
    activation_24_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 14336);
 80064e6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    depthwise_conv2d_12_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80064ea:	4917      	ldr	r1, [pc, #92]	; (8006548 <ai_vww_int8_keras_init+0x8a0>)
    depthwise_conv2d_12_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80064ec:	e9c1 3302 	strd	r3, r3, [r1, #8]
    activation_25_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 9216);
 80064f0:	4916      	ldr	r1, [pc, #88]	; (800654c <ai_vww_int8_keras_init+0x8a4>)
    activation_25_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 9216);
 80064f2:	e9c1 6602 	strd	r6, r6, [r1, #8]
    conv2d_13_scratch0_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80064f6:	4916      	ldr	r1, [pc, #88]	; (8006550 <ai_vww_int8_keras_init+0x8a8>)
    conv2d_13_scratch0_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 80064f8:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_13_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 80064fc:	4915      	ldr	r1, [pc, #84]	; (8006554 <ai_vww_int8_keras_init+0x8ac>)
    conv2d_13_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 18432);
 80064fe:	e9c1 2202 	strd	r2, r2, [r1, #8]
    activation_26_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006502:	4a15      	ldr	r2, [pc, #84]	; (8006558 <ai_vww_int8_keras_init+0x8b0>)
    activation_26_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006504:	e9c2 3302 	strd	r3, r3, [r2, #8]
    average_pooling2d_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 9216);
 8006508:	4a14      	ldr	r2, [pc, #80]	; (800655c <ai_vww_int8_keras_init+0x8b4>)
    average_pooling2d_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 9216);
 800650a:	e9c2 6602 	strd	r6, r6, [r2, #8]
    dense_dense_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 800650e:	4a14      	ldr	r2, [pc, #80]	; (8006560 <ai_vww_int8_keras_init+0x8b8>)
    dense_dense_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 0);
 8006510:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_output_array.data = AI_PTR(g_vww_int8_keras_activations_map[0] + 8);
 8006514:	3308      	adds	r3, #8
 8006516:	4a13      	ldr	r2, [pc, #76]	; (8006564 <ai_vww_int8_keras_init+0x8bc>)
    dense_output_array.data_start = AI_PTR(g_vww_int8_keras_activations_map[0] + 8);
 8006518:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ok &= vww_int8_keras_configure_weights(net_ctx, params);
  ok &= vww_int8_keras_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 800651c:	4628      	mov	r0, r5
 800651e:	f000 fd9d 	bl	800705c <ai_platform_network_post_init>
 8006522:	4038      	ands	r0, r7
 8006524:	4004      	ands	r4, r0
 8006526:	b2e0      	uxtb	r0, r4

  return ok;
}
 8006528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800652c:	2212      	movs	r2, #18
 800652e:	2130      	movs	r1, #48	; 0x30
 8006530:	4630      	mov	r0, r6
 8006532:	f000 faaf 	bl	8006a94 <ai_platform_network_set_error>
  return false;
 8006536:	e640      	b.n	80061ba <ai_vww_int8_keras_init+0x512>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8006538:	2213      	movs	r2, #19
 800653a:	2130      	movs	r1, #48	; 0x30
 800653c:	4630      	mov	r0, r6
 800653e:	f000 faa9 	bl	8006a94 <ai_platform_network_set_error>
  return false;
 8006542:	e7eb      	b.n	800651c <ai_vww_int8_keras_init+0x874>
 8006544:	200024b4 	.word	0x200024b4
 8006548:	200038cc 	.word	0x200038cc
 800654c:	20002500 	.word	0x20002500
 8006550:	20002c00 	.word	0x20002c00
 8006554:	20002bd4 	.word	0x20002bd4
 8006558:	2000254c 	.word	0x2000254c
 800655c:	2000285c 	.word	0x2000285c
 8006560:	20003628 	.word	0x20003628
 8006564:	200036a0 	.word	0x200036a0

08006568 <ai_vww_int8_keras_run>:

AI_API_ENTRY
ai_i32 ai_vww_int8_keras_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8006568:	f000 bda8 	b.w	80070bc <ai_platform_network_process>

0800656c <ai_vww_int8_keras_forward>:


AI_API_ENTRY
ai_i32 ai_vww_int8_keras_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 800656c:	2200      	movs	r2, #0
 800656e:	f000 bda5 	b.w	80070bc <ai_platform_network_process>
	...

08006574 <ai_vww_int8_keras_data_params_get>:
 * @ingroup vww_int8_keras_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_vww_int8_keras_data_params_get(ai_network_params* params)
{
 8006574:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8006576:	4603      	mov	r3, r0
{
 8006578:	b085      	sub	sp, #20
  if (!params) return false;
 800657a:	b170      	cbz	r0, 800659a <ai_vww_int8_keras_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 800657c:	4c08      	ldr	r4, [pc, #32]	; (80065a0 <ai_vww_int8_keras_data_params_get+0x2c>)
 800657e:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_VWW_INT8_KERAS_DATA_ACTIVATIONS_COUNT, g_vww_int8_keras_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8006580:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 8006582:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006586:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 800658a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800658e:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_VWW_INT8_KERAS_DATA_WEIGHTS_COUNT, g_vww_int8_keras_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8006592:	4629      	mov	r1, r5
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fa03 	bl	80069a0 <ai_platform_bind_network_params>
}
 800659a:	b005      	add	sp, #20
 800659c:	bd30      	pop	{r4, r5, pc}
 800659e:	bf00      	nop
 80065a0:	0800cb08 	.word	0x0800cb08

080065a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80065a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80065dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80065a8:	480d      	ldr	r0, [pc, #52]	; (80065e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80065aa:	490e      	ldr	r1, [pc, #56]	; (80065e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80065ac:	4a0e      	ldr	r2, [pc, #56]	; (80065e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80065ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80065b0:	e002      	b.n	80065b8 <LoopCopyDataInit>

080065b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80065b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80065b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80065b6:	3304      	adds	r3, #4

080065b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80065b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80065ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80065bc:	d3f9      	bcc.n	80065b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80065be:	4a0b      	ldr	r2, [pc, #44]	; (80065ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80065c0:	4c0b      	ldr	r4, [pc, #44]	; (80065f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80065c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80065c4:	e001      	b.n	80065ca <LoopFillZerobss>

080065c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80065c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80065c8:	3204      	adds	r2, #4

080065ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80065ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80065cc:	d3fb      	bcc.n	80065c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80065ce:	f7ff faf7 	bl	8005bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80065d2:	f003 ff8f 	bl	800a4f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80065d6:	f7fe f893 	bl	8004700 <main>
  bx  lr    
 80065da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80065dc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80065e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80065e4:	20004370 	.word	0x20004370
  ldr r2, =_sidata
 80065e8:	080db6c8 	.word	0x080db6c8
  ldr r2, =_sbss
 80065ec:	20004370 	.word	0x20004370
  ldr r4, =_ebss
 80065f0:	20004c4c 	.word	0x20004c4c

080065f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065f4:	e7fe      	b.n	80065f4 <ADC_IRQHandler>
	...

080065f8 <stai_runtime_get_info>:
 80065f8:	b430      	push	{r4, r5}
 80065fa:	b160      	cbz	r0, 8006616 <stai_runtime_get_info+0x1e>
 80065fc:	4c08      	ldr	r4, [pc, #32]	; (8006620 <stai_runtime_get_info+0x28>)
 80065fe:	4684      	mov	ip, r0
 8006600:	2500      	movs	r5, #0
 8006602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006604:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006608:	e894 0003 	ldmia.w	r4, {r0, r1}
 800660c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006610:	4628      	mov	r0, r5
 8006612:	bc30      	pop	{r4, r5}
 8006614:	4770      	bx	lr
 8006616:	4d03      	ldr	r5, [pc, #12]	; (8006624 <stai_runtime_get_info+0x2c>)
 8006618:	4628      	mov	r0, r5
 800661a:	bc30      	pop	{r4, r5}
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	080db1d4 	.word	0x080db1d4
 8006624:	00020001 	.word	0x00020001

08006628 <ai_version_get>:
 8006628:	0212      	lsls	r2, r2, #8
 800662a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800662e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8006632:	4770      	bx	lr

08006634 <ai_platform_version_get>:
 8006634:	0e01      	lsrs	r1, r0, #24
 8006636:	2300      	movs	r3, #0
 8006638:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800663c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8006640:	f361 0307 	bfi	r3, r1, #0, #8
 8006644:	b082      	sub	sp, #8
 8006646:	f362 230f 	bfi	r3, r2, #8, #8
 800664a:	f360 4317 	bfi	r3, r0, #16, #8
 800664e:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 8006652:	b002      	add	sp, #8
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop

08006658 <get_tensor_size>:
 8006658:	b111      	cbz	r1, 8006660 <get_tensor_size+0x8>
 800665a:	6983      	ldr	r3, [r0, #24]
 800665c:	6858      	ldr	r0, [r3, #4]
 800665e:	4770      	bx	lr
 8006660:	6883      	ldr	r3, [r0, #8]
 8006662:	0a1b      	lsrs	r3, r3, #8
 8006664:	d00a      	beq.n	800667c <get_tensor_size+0x24>
 8006666:	68c1      	ldr	r1, [r0, #12]
 8006668:	2001      	movs	r0, #1
 800666a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800666e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006672:	4299      	cmp	r1, r3
 8006674:	fb02 f000 	mul.w	r0, r2, r0
 8006678:	d1f9      	bne.n	800666e <get_tensor_size+0x16>
 800667a:	4770      	bx	lr
 800667c:	2001      	movs	r0, #1
 800667e:	4770      	bx	lr

08006680 <get_tensor_byte_size>:
 8006680:	b430      	push	{r4, r5}
 8006682:	6985      	ldr	r5, [r0, #24]
 8006684:	68c4      	ldr	r4, [r0, #12]
 8006686:	6941      	ldr	r1, [r0, #20]
 8006688:	4b06      	ldr	r3, [pc, #24]	; (80066a4 <get_tensor_byte_size+0x24>)
 800668a:	6828      	ldr	r0, [r5, #0]
 800668c:	4a06      	ldr	r2, [pc, #24]	; (80066a8 <get_tensor_byte_size+0x28>)
 800668e:	4003      	ands	r3, r0
 8006690:	68c9      	ldr	r1, [r1, #12]
 8006692:	68e0      	ldr	r0, [r4, #12]
 8006694:	4293      	cmp	r3, r2
 8006696:	fb01 f000 	mul.w	r0, r1, r0
 800669a:	d101      	bne.n	80066a0 <get_tensor_byte_size+0x20>
 800669c:	3007      	adds	r0, #7
 800669e:	08c0      	lsrs	r0, r0, #3
 80066a0:	bc30      	pop	{r4, r5}
 80066a2:	4770      	bx	lr
 80066a4:	017fffff 	.word	0x017fffff
 80066a8:	000400c0 	.word	0x000400c0

080066ac <ai_buffer_get_size>:
 80066ac:	b368      	cbz	r0, 800670a <ai_buffer_get_size+0x5e>
 80066ae:	4b17      	ldr	r3, [pc, #92]	; (800670c <ai_buffer_get_size+0x60>)
 80066b0:	4a17      	ldr	r2, [pc, #92]	; (8006710 <ai_buffer_get_size+0x64>)
 80066b2:	b410      	push	{r4}
 80066b4:	6804      	ldr	r4, [r0, #0]
 80066b6:	4023      	ands	r3, r4
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d123      	bne.n	8006704 <ai_buffer_get_size+0x58>
 80066bc:	b311      	cbz	r1, 8006704 <ai_buffer_get_size+0x58>
 80066be:	6984      	ldr	r4, [r0, #24]
 80066c0:	6862      	ldr	r2, [r4, #4]
 80066c2:	321f      	adds	r2, #31
 80066c4:	f022 021f 	bic.w	r2, r2, #31
 80066c8:	7d03      	ldrb	r3, [r0, #20]
 80066ca:	6941      	ldr	r1, [r0, #20]
 80066cc:	f1a3 0301 	sub.w	r3, r3, #1
 80066d0:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80066d4:	fab3 f383 	clz	r3, r3
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80066de:	da0c      	bge.n	80066fa <ai_buffer_get_size+0x4e>
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d103      	bne.n	80066ec <ai_buffer_get_size+0x40>
 80066e4:	2802      	cmp	r0, #2
 80066e6:	f04f 0302 	mov.w	r3, #2
 80066ea:	d006      	beq.n	80066fa <ai_buffer_get_size+0x4e>
 80066ec:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80066f0:	3301      	adds	r3, #1
 80066f2:	4298      	cmp	r0, r3
 80066f4:	fb01 f202 	mul.w	r2, r1, r2
 80066f8:	d1f2      	bne.n	80066e0 <ai_buffer_get_size+0x34>
 80066fa:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80066fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	6984      	ldr	r4, [r0, #24]
 8006706:	6862      	ldr	r2, [r4, #4]
 8006708:	e7de      	b.n	80066c8 <ai_buffer_get_size+0x1c>
 800670a:	4770      	bx	lr
 800670c:	017fffff 	.word	0x017fffff
 8006710:	000400c0 	.word	0x000400c0

08006714 <ai_buffer_get_byte_size>:
 8006714:	b128      	cbz	r0, 8006722 <ai_buffer_get_byte_size+0xe>
 8006716:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 800671a:	fb01 f000 	mul.w	r0, r1, r0
 800671e:	3007      	adds	r0, #7
 8006720:	08c0      	lsrs	r0, r0, #3
 8006722:	4770      	bx	lr

08006724 <ai_buffer_array_sane>:
 8006724:	b138      	cbz	r0, 8006736 <ai_buffer_array_sane+0x12>
 8006726:	6843      	ldr	r3, [r0, #4]
 8006728:	b123      	cbz	r3, 8006734 <ai_buffer_array_sane+0x10>
 800672a:	8840      	ldrh	r0, [r0, #2]
 800672c:	3800      	subs	r0, #0
 800672e:	bf18      	it	ne
 8006730:	2001      	movne	r0, #1
 8006732:	4770      	bx	lr
 8006734:	4618      	mov	r0, r3
 8006736:	4770      	bx	lr

08006738 <ai_buffer_array_item_set_address>:
 8006738:	b150      	cbz	r0, 8006750 <ai_buffer_array_item_set_address+0x18>
 800673a:	6843      	ldr	r3, [r0, #4]
 800673c:	b14b      	cbz	r3, 8006752 <ai_buffer_array_item_set_address+0x1a>
 800673e:	8840      	ldrh	r0, [r0, #2]
 8006740:	b900      	cbnz	r0, 8006744 <ai_buffer_array_item_set_address+0xc>
 8006742:	4770      	bx	lr
 8006744:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006748:	2001      	movs	r0, #1
 800674a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800674e:	605a      	str	r2, [r3, #4]
 8006750:	4770      	bx	lr
 8006752:	4618      	mov	r0, r3
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop

08006758 <_platform_observer_node_exec_cb>:
 8006758:	2a00      	cmp	r2, #0
 800675a:	d04f      	beq.n	80067fc <_platform_observer_node_exec_cb+0xa4>
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	6815      	ldr	r5, [r2, #0]
 8006760:	b084      	sub	sp, #16
 8006762:	4614      	mov	r4, r2
 8006764:	2d00      	cmp	r5, #0
 8006766:	d04b      	beq.n	8006800 <_platform_observer_node_exec_cb+0xa8>
 8006768:	8992      	ldrh	r2, [r2, #12]
 800676a:	460e      	mov	r6, r1
 800676c:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
 8006770:	fab2 f382 	clz	r3, r2
 8006774:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	4594      	cmp	ip, r2
 800677c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8006780:	bf08      	it	eq
 8006782:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8006786:	b140      	cbz	r0, 800679a <_platform_observer_node_exec_cb+0x42>
 8006788:	2801      	cmp	r0, #1
 800678a:	d03c      	beq.n	8006806 <_platform_observer_node_exec_cb+0xae>
 800678c:	2802      	cmp	r0, #2
 800678e:	d01e      	beq.n	80067ce <_platform_observer_node_exec_cb+0x76>
 8006790:	2803      	cmp	r0, #3
 8006792:	d03e      	beq.n	8006812 <_platform_observer_node_exec_cb+0xba>
 8006794:	2000      	movs	r0, #0
 8006796:	b004      	add	sp, #16
 8006798:	bd70      	pop	{r4, r5, r6, pc}
 800679a:	68a1      	ldr	r1, [r4, #8]
 800679c:	07c9      	lsls	r1, r1, #31
 800679e:	d404      	bmi.n	80067aa <_platform_observer_node_exec_cb+0x52>
 80067a0:	3201      	adds	r2, #1
 80067a2:	2000      	movs	r0, #0
 80067a4:	81a2      	strh	r2, [r4, #12]
 80067a6:	b004      	add	sp, #16
 80067a8:	bd70      	pop	{r4, r5, r6, pc}
 80067aa:	f043 0101 	orr.w	r1, r3, #1
 80067ae:	8873      	ldrh	r3, [r6, #2]
 80067b0:	f8ad 2000 	strh.w	r2, [sp]
 80067b4:	466a      	mov	r2, sp
 80067b6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80067ba:	8833      	ldrh	r3, [r6, #0]
 80067bc:	9002      	str	r0, [sp, #8]
 80067be:	f8ad 3002 	strh.w	r3, [sp, #2]
 80067c2:	69b3      	ldr	r3, [r6, #24]
 80067c4:	6860      	ldr	r0, [r4, #4]
 80067c6:	9303      	str	r3, [sp, #12]
 80067c8:	47a8      	blx	r5
 80067ca:	89a2      	ldrh	r2, [r4, #12]
 80067cc:	e7e8      	b.n	80067a0 <_platform_observer_node_exec_cb+0x48>
 80067ce:	6121      	str	r1, [r4, #16]
 80067d0:	68a1      	ldr	r1, [r4, #8]
 80067d2:	0788      	lsls	r0, r1, #30
 80067d4:	d5de      	bpl.n	8006794 <_platform_observer_node_exec_cb+0x3c>
 80067d6:	f043 0102 	orr.w	r1, r3, #2
 80067da:	8873      	ldrh	r3, [r6, #2]
 80067dc:	6860      	ldr	r0, [r4, #4]
 80067de:	2400      	movs	r4, #0
 80067e0:	f8ad 2000 	strh.w	r2, [sp]
 80067e4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80067e8:	8832      	ldrh	r2, [r6, #0]
 80067ea:	69b3      	ldr	r3, [r6, #24]
 80067ec:	f8ad 2002 	strh.w	r2, [sp, #2]
 80067f0:	466a      	mov	r2, sp
 80067f2:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80067f6:	47a8      	blx	r5
 80067f8:	4620      	mov	r0, r4
 80067fa:	e7d4      	b.n	80067a6 <_platform_observer_node_exec_cb+0x4e>
 80067fc:	2001      	movs	r0, #1
 80067fe:	4770      	bx	lr
 8006800:	2001      	movs	r0, #1
 8006802:	b004      	add	sp, #16
 8006804:	bd70      	pop	{r4, r5, r6, pc}
 8006806:	2300      	movs	r3, #0
 8006808:	6121      	str	r1, [r4, #16]
 800680a:	4618      	mov	r0, r3
 800680c:	81a3      	strh	r3, [r4, #12]
 800680e:	b004      	add	sp, #16
 8006810:	bd70      	pop	{r4, r5, r6, pc}
 8006812:	68a1      	ldr	r1, [r4, #8]
 8006814:	0749      	lsls	r1, r1, #29
 8006816:	d5c3      	bpl.n	80067a0 <_platform_observer_node_exec_cb+0x48>
 8006818:	6920      	ldr	r0, [r4, #16]
 800681a:	f043 0104 	orr.w	r1, r3, #4
 800681e:	f8ad 2000 	strh.w	r2, [sp]
 8006822:	2200      	movs	r2, #0
 8006824:	8843      	ldrh	r3, [r0, #2]
 8006826:	f8ad 3004 	strh.w	r3, [sp, #4]
 800682a:	8803      	ldrh	r3, [r0, #0]
 800682c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8006830:	6983      	ldr	r3, [r0, #24]
 8006832:	9202      	str	r2, [sp, #8]
 8006834:	466a      	mov	r2, sp
 8006836:	6860      	ldr	r0, [r4, #4]
 8006838:	9303      	str	r3, [sp, #12]
 800683a:	47a8      	blx	r5
 800683c:	89a2      	ldrh	r2, [r4, #12]
 800683e:	e7af      	b.n	80067a0 <_platform_observer_node_exec_cb+0x48>

08006840 <ai_platform_get_weights_map>:
 8006840:	2900      	cmp	r1, #0
 8006842:	bf18      	it	ne
 8006844:	2800      	cmpne	r0, #0
 8006846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006848:	bf0c      	ite	eq
 800684a:	2401      	moveq	r4, #1
 800684c:	2400      	movne	r4, #0
 800684e:	2a00      	cmp	r2, #0
 8006850:	bf08      	it	eq
 8006852:	f044 0401 	orreq.w	r4, r4, #1
 8006856:	b114      	cbz	r4, 800685e <ai_platform_get_weights_map+0x1e>
 8006858:	2400      	movs	r4, #0
 800685a:	4620      	mov	r0, r4
 800685c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800685e:	4616      	mov	r6, r2
 8006860:	4b22      	ldr	r3, [pc, #136]	; (80068ec <ai_platform_get_weights_map+0xac>)
 8006862:	6812      	ldr	r2, [r2, #0]
 8006864:	4605      	mov	r5, r0
 8006866:	460f      	mov	r7, r1
 8006868:	429a      	cmp	r2, r3
 800686a:	d022      	beq.n	80068b2 <ai_platform_get_weights_map+0x72>
 800686c:	6870      	ldr	r0, [r6, #4]
 800686e:	2800      	cmp	r0, #0
 8006870:	d0f2      	beq.n	8006858 <ai_platform_get_weights_map+0x18>
 8006872:	6806      	ldr	r6, [r0, #0]
 8006874:	429e      	cmp	r6, r3
 8006876:	d006      	beq.n	8006886 <ai_platform_get_weights_map+0x46>
 8006878:	f1a1 0401 	sub.w	r4, r1, #1
 800687c:	6028      	str	r0, [r5, #0]
 800687e:	fab4 f484 	clz	r4, r4
 8006882:	0964      	lsrs	r4, r4, #5
 8006884:	e7e9      	b.n	800685a <ai_platform_get_weights_map+0x1a>
 8006886:	3d04      	subs	r5, #4
 8006888:	4602      	mov	r2, r0
 800688a:	4621      	mov	r1, r4
 800688c:	e000      	b.n	8006890 <ai_platform_get_weights_map+0x50>
 800688e:	4619      	mov	r1, r3
 8006890:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006894:	42b3      	cmp	r3, r6
 8006896:	d025      	beq.n	80068e4 <ai_platform_get_weights_map+0xa4>
 8006898:	f845 3f04 	str.w	r3, [r5, #4]!
 800689c:	1c4b      	adds	r3, r1, #1
 800689e:	429f      	cmp	r7, r3
 80068a0:	d8f5      	bhi.n	800688e <ai_platform_get_weights_map+0x4e>
 80068a2:	d1da      	bne.n	800685a <ai_platform_get_weights_map+0x1a>
 80068a4:	3102      	adds	r1, #2
 80068a6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80068aa:	42b3      	cmp	r3, r6
 80068ac:	d1d5      	bne.n	800685a <ai_platform_get_weights_map+0x1a>
 80068ae:	2401      	movs	r4, #1
 80068b0:	e7d3      	b.n	800685a <ai_platform_get_weights_map+0x1a>
 80068b2:	1d30      	adds	r0, r6, #4
 80068b4:	f7ff ff36 	bl	8006724 <ai_buffer_array_sane>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d0cd      	beq.n	8006858 <ai_platform_get_weights_map+0x18>
 80068bc:	88f3      	ldrh	r3, [r6, #6]
 80068be:	429f      	cmp	r7, r3
 80068c0:	d1ca      	bne.n	8006858 <ai_platform_get_weights_map+0x18>
 80068c2:	3d04      	subs	r5, #4
 80068c4:	4622      	mov	r2, r4
 80068c6:	68b3      	ldr	r3, [r6, #8]
 80068c8:	4423      	add	r3, r4
 80068ca:	341c      	adds	r4, #28
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	b123      	cbz	r3, 80068da <ai_platform_get_weights_map+0x9a>
 80068d0:	3201      	adds	r2, #1
 80068d2:	f845 3f04 	str.w	r3, [r5, #4]!
 80068d6:	4297      	cmp	r7, r2
 80068d8:	d8f5      	bhi.n	80068c6 <ai_platform_get_weights_map+0x86>
 80068da:	1abc      	subs	r4, r7, r2
 80068dc:	fab4 f484 	clz	r4, r4
 80068e0:	0964      	lsrs	r4, r4, #5
 80068e2:	e7ba      	b.n	800685a <ai_platform_get_weights_map+0x1a>
 80068e4:	428f      	cmp	r7, r1
 80068e6:	d1b8      	bne.n	800685a <ai_platform_get_weights_map+0x1a>
 80068e8:	e7e1      	b.n	80068ae <ai_platform_get_weights_map+0x6e>
 80068ea:	bf00      	nop
 80068ec:	a1facade 	.word	0xa1facade

080068f0 <ai_platform_get_activations_map>:
 80068f0:	2900      	cmp	r1, #0
 80068f2:	bf18      	it	ne
 80068f4:	2800      	cmpne	r0, #0
 80068f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f8:	bf0c      	ite	eq
 80068fa:	2401      	moveq	r4, #1
 80068fc:	2400      	movne	r4, #0
 80068fe:	2a00      	cmp	r2, #0
 8006900:	bf08      	it	eq
 8006902:	f044 0401 	orreq.w	r4, r4, #1
 8006906:	b114      	cbz	r4, 800690e <ai_platform_get_activations_map+0x1e>
 8006908:	2400      	movs	r4, #0
 800690a:	4620      	mov	r0, r4
 800690c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800690e:	4616      	mov	r6, r2
 8006910:	4b22      	ldr	r3, [pc, #136]	; (800699c <ai_platform_get_activations_map+0xac>)
 8006912:	6812      	ldr	r2, [r2, #0]
 8006914:	4605      	mov	r5, r0
 8006916:	460f      	mov	r7, r1
 8006918:	429a      	cmp	r2, r3
 800691a:	d022      	beq.n	8006962 <ai_platform_get_activations_map+0x72>
 800691c:	6a30      	ldr	r0, [r6, #32]
 800691e:	2800      	cmp	r0, #0
 8006920:	d0f2      	beq.n	8006908 <ai_platform_get_activations_map+0x18>
 8006922:	6806      	ldr	r6, [r0, #0]
 8006924:	429e      	cmp	r6, r3
 8006926:	d006      	beq.n	8006936 <ai_platform_get_activations_map+0x46>
 8006928:	f1a1 0401 	sub.w	r4, r1, #1
 800692c:	6028      	str	r0, [r5, #0]
 800692e:	fab4 f484 	clz	r4, r4
 8006932:	0964      	lsrs	r4, r4, #5
 8006934:	e7e9      	b.n	800690a <ai_platform_get_activations_map+0x1a>
 8006936:	3d04      	subs	r5, #4
 8006938:	4602      	mov	r2, r0
 800693a:	4621      	mov	r1, r4
 800693c:	e000      	b.n	8006940 <ai_platform_get_activations_map+0x50>
 800693e:	4619      	mov	r1, r3
 8006940:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006944:	42b3      	cmp	r3, r6
 8006946:	d026      	beq.n	8006996 <ai_platform_get_activations_map+0xa6>
 8006948:	f845 3f04 	str.w	r3, [r5, #4]!
 800694c:	1c4b      	adds	r3, r1, #1
 800694e:	429f      	cmp	r7, r3
 8006950:	d8f5      	bhi.n	800693e <ai_platform_get_activations_map+0x4e>
 8006952:	d1da      	bne.n	800690a <ai_platform_get_activations_map+0x1a>
 8006954:	3102      	adds	r1, #2
 8006956:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800695a:	42b3      	cmp	r3, r6
 800695c:	d1d5      	bne.n	800690a <ai_platform_get_activations_map+0x1a>
 800695e:	2401      	movs	r4, #1
 8006960:	e7d3      	b.n	800690a <ai_platform_get_activations_map+0x1a>
 8006962:	f106 000c 	add.w	r0, r6, #12
 8006966:	f7ff fedd 	bl	8006724 <ai_buffer_array_sane>
 800696a:	2800      	cmp	r0, #0
 800696c:	d0cc      	beq.n	8006908 <ai_platform_get_activations_map+0x18>
 800696e:	89f3      	ldrh	r3, [r6, #14]
 8006970:	429f      	cmp	r7, r3
 8006972:	d1c9      	bne.n	8006908 <ai_platform_get_activations_map+0x18>
 8006974:	3d04      	subs	r5, #4
 8006976:	4622      	mov	r2, r4
 8006978:	6933      	ldr	r3, [r6, #16]
 800697a:	4423      	add	r3, r4
 800697c:	341c      	adds	r4, #28
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	b123      	cbz	r3, 800698c <ai_platform_get_activations_map+0x9c>
 8006982:	3201      	adds	r2, #1
 8006984:	f845 3f04 	str.w	r3, [r5, #4]!
 8006988:	4297      	cmp	r7, r2
 800698a:	d8f5      	bhi.n	8006978 <ai_platform_get_activations_map+0x88>
 800698c:	1abc      	subs	r4, r7, r2
 800698e:	fab4 f484 	clz	r4, r4
 8006992:	0964      	lsrs	r4, r4, #5
 8006994:	e7b9      	b.n	800690a <ai_platform_get_activations_map+0x1a>
 8006996:	428f      	cmp	r7, r1
 8006998:	d1b7      	bne.n	800690a <ai_platform_get_activations_map+0x1a>
 800699a:	e7e0      	b.n	800695e <ai_platform_get_activations_map+0x6e>
 800699c:	a1facade 	.word	0xa1facade

080069a0 <ai_platform_bind_network_params>:
 80069a0:	2a00      	cmp	r2, #0
 80069a2:	bf18      	it	ne
 80069a4:	2900      	cmpne	r1, #0
 80069a6:	d010      	beq.n	80069ca <ai_platform_bind_network_params+0x2a>
 80069a8:	b178      	cbz	r0, 80069ca <ai_platform_bind_network_params+0x2a>
 80069aa:	4603      	mov	r3, r0
 80069ac:	4808      	ldr	r0, [pc, #32]	; (80069d0 <ai_platform_bind_network_params+0x30>)
 80069ae:	f103 0c0c 	add.w	ip, r3, #12
 80069b2:	f843 0b04 	str.w	r0, [r3], #4
 80069b6:	c903      	ldmia	r1, {r0, r1}
 80069b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80069bc:	2301      	movs	r3, #1
 80069be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069c2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80069c6:	4618      	mov	r0, r3
 80069c8:	4770      	bx	lr
 80069ca:	2300      	movs	r3, #0
 80069cc:	4618      	mov	r0, r3
 80069ce:	4770      	bx	lr
 80069d0:	a1facade 	.word	0xa1facade

080069d4 <ai_platform_runtime_get_revision>:
 80069d4:	4800      	ldr	r0, [pc, #0]	; (80069d8 <ai_platform_runtime_get_revision+0x4>)
 80069d6:	4770      	bx	lr
 80069d8:	080db1ec 	.word	0x080db1ec

080069dc <ai_platform_runtime_get_version>:
 80069dc:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <ai_platform_runtime_get_version+0x2c>)
 80069de:	2000      	movs	r0, #0
 80069e0:	b082      	sub	sp, #8
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	fa5f fc83 	uxtb.w	ip, r3
 80069e8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80069ec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80069f0:	0e1b      	lsrs	r3, r3, #24
 80069f2:	f36c 0007 	bfi	r0, ip, #0, #8
 80069f6:	f361 200f 	bfi	r0, r1, #8, #8
 80069fa:	f362 4017 	bfi	r0, r2, #16, #8
 80069fe:	f363 601f 	bfi	r0, r3, #24, #8
 8006a02:	b002      	add	sp, #8
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	080db1f0 	.word	0x080db1f0

08006a0c <ai_platform_api_get_version>:
 8006a0c:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <ai_platform_api_get_version+0x2c>)
 8006a0e:	2000      	movs	r0, #0
 8006a10:	b082      	sub	sp, #8
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	fa5f fc83 	uxtb.w	ip, r3
 8006a18:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8006a1c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006a20:	0e1b      	lsrs	r3, r3, #24
 8006a22:	f36c 0007 	bfi	r0, ip, #0, #8
 8006a26:	f361 200f 	bfi	r0, r1, #8, #8
 8006a2a:	f362 4017 	bfi	r0, r2, #16, #8
 8006a2e:	f363 601f 	bfi	r0, r3, #24, #8
 8006a32:	b002      	add	sp, #8
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	080db1f4 	.word	0x080db1f4

08006a3c <ai_platform_interface_api_get_version>:
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <ai_platform_interface_api_get_version+0x2c>)
 8006a3e:	2000      	movs	r0, #0
 8006a40:	b082      	sub	sp, #8
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	fa5f fc83 	uxtb.w	ip, r3
 8006a48:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8006a4c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006a50:	0e1b      	lsrs	r3, r3, #24
 8006a52:	f36c 0007 	bfi	r0, ip, #0, #8
 8006a56:	f361 200f 	bfi	r0, r1, #8, #8
 8006a5a:	f362 4017 	bfi	r0, r2, #16, #8
 8006a5e:	f363 601f 	bfi	r0, r3, #24, #8
 8006a62:	b002      	add	sp, #8
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	080db1f8 	.word	0x080db1f8

08006a6c <ai_platform_context_acquire>:
 8006a6c:	6802      	ldr	r2, [r0, #0]
 8006a6e:	4b02      	ldr	r3, [pc, #8]	; (8006a78 <ai_platform_context_acquire+0xc>)
 8006a70:	4393      	bics	r3, r2
 8006a72:	bf18      	it	ne
 8006a74:	2000      	movne	r0, #0
 8006a76:	4770      	bx	lr
 8006a78:	a1c00100 	.word	0xa1c00100

08006a7c <ai_platform_network_get_error>:
 8006a7c:	4b04      	ldr	r3, [pc, #16]	; (8006a90 <ai_platform_network_get_error+0x14>)
 8006a7e:	6802      	ldr	r2, [r0, #0]
 8006a80:	4393      	bics	r3, r2
 8006a82:	d102      	bne.n	8006a8a <ai_platform_network_get_error+0xe>
 8006a84:	300c      	adds	r0, #12
 8006a86:	f000 bdb1 	b.w	80075ec <core_get_error>
 8006a8a:	f241 0010 	movw	r0, #4112	; 0x1010
 8006a8e:	4770      	bx	lr
 8006a90:	a1c00100 	.word	0xa1c00100

08006a94 <ai_platform_network_set_error>:
 8006a94:	b110      	cbz	r0, 8006a9c <ai_platform_network_set_error+0x8>
 8006a96:	300c      	adds	r0, #12
 8006a98:	f000 bdae 	b.w	80075f8 <core_set_error>
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop

08006aa0 <ai_platform_api_get_network_report>:
 8006aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	4ba3      	ldr	r3, [pc, #652]	; (8006d34 <ai_platform_api_get_network_report+0x294>)
 8006aa6:	b089      	sub	sp, #36	; 0x24
 8006aa8:	6802      	ldr	r2, [r0, #0]
 8006aaa:	9002      	str	r0, [sp, #8]
 8006aac:	4393      	bics	r3, r2
 8006aae:	d177      	bne.n	8006ba0 <ai_platform_api_get_network_report+0x100>
 8006ab0:	4688      	mov	r8, r1
 8006ab2:	2900      	cmp	r1, #0
 8006ab4:	d074      	beq.n	8006ba0 <ai_platform_api_get_network_report+0x100>
 8006ab6:	2400      	movs	r4, #0
 8006ab8:	67cc      	str	r4, [r1, #124]	; 0x7c
 8006aba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006abc:	b14b      	cbz	r3, 8006ad2 <ai_platform_api_get_network_report+0x32>
 8006abe:	3401      	adds	r4, #1
 8006ac0:	f8c8 407c 	str.w	r4, [r8, #124]	; 0x7c
 8006ac4:	691a      	ldr	r2, [r3, #16]
 8006ac6:	b122      	cbz	r2, 8006ad2 <ai_platform_api_get_network_report+0x32>
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d002      	beq.n	8006ad2 <ai_platform_api_get_network_report+0x32>
 8006acc:	4613      	mov	r3, r2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f5      	bne.n	8006abe <ai_platform_api_get_network_report+0x1e>
 8006ad2:	2c00      	cmp	r4, #0
 8006ad4:	f000 8161 	beq.w	8006d9a <ai_platform_api_get_network_report+0x2fa>
 8006ad8:	9a02      	ldr	r2, [sp, #8]
 8006ada:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d050      	beq.n	8006b82 <ai_platform_api_get_network_report+0xe2>
 8006ae0:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8006ae4:	f1ba 0f00 	cmp.w	sl, #0
 8006ae8:	d04b      	beq.n	8006b82 <ai_platform_api_get_network_report+0xe2>
 8006aea:	f04f 0b00 	mov.w	fp, #0
 8006aee:	f8cd 800c 	str.w	r8, [sp, #12]
 8006af2:	465d      	mov	r5, fp
 8006af4:	e015      	b.n	8006b22 <ai_platform_api_get_network_report+0x82>
 8006af6:	00ea      	lsls	r2, r5, #3
 8006af8:	2101      	movs	r1, #1
 8006afa:	50b9      	str	r1, [r7, r2]
 8006afc:	69b2      	ldr	r2, [r6, #24]
 8006afe:	6856      	ldr	r6, [r2, #4]
 8006b00:	f04f 0201 	mov.w	r2, #1
 8006b04:	60a3      	str	r3, [r4, #8]
 8006b06:	3501      	adds	r5, #1
 8006b08:	7522      	strb	r2, [r4, #20]
 8006b0a:	f10b 0b1c 	add.w	fp, fp, #28
 8006b0e:	6963      	ldr	r3, [r4, #20]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f368 231f 	bfi	r3, r8, #8, #24
 8006b16:	e9c4 0c00 	strd	r0, ip, [r4]
 8006b1a:	e9c4 2603 	strd	r2, r6, [r4, #12]
 8006b1e:	e9c4 3905 	strd	r3, r9, [r4, #20]
 8006b22:	f8ba 3000 	ldrh.w	r3, [sl]
 8006b26:	b2aa      	uxth	r2, r5
 8006b28:	429d      	cmp	r5, r3
 8006b2a:	d23e      	bcs.n	8006baa <ai_platform_api_get_network_report+0x10a>
 8006b2c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d03a      	beq.n	8006baa <ai_platform_api_get_network_report+0x10a>
 8006b34:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006b38:	2e00      	cmp	r6, #0
 8006b3a:	d036      	beq.n	8006baa <ai_platform_api_get_network_report+0x10a>
 8006b3c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006b40:	00ea      	lsls	r2, r5, #3
 8006b42:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8006b46:	9201      	str	r2, [sp, #4]
 8006b48:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006b4c:	69b3      	ldr	r3, [r6, #24]
 8006b4e:	445c      	add	r4, fp
 8006b50:	6818      	ldr	r0, [r3, #0]
 8006b52:	68b3      	ldr	r3, [r6, #8]
 8006b54:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8006b58:	f002 fdd2 	bl	8009700 <ai_array_to_buffer_fmt>
 8006b5c:	69b2      	ldr	r2, [r6, #24]
 8006b5e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8006b62:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0c9      	beq.n	8006afe <ai_platform_api_get_network_report+0x5e>
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 8006b70:	6832      	ldr	r2, [r6, #0]
 8006b72:	605a      	str	r2, [r3, #4]
 8006b74:	b112      	cbz	r2, 8006b7c <ai_platform_api_get_network_report+0xdc>
 8006b76:	8852      	ldrh	r2, [r2, #2]
 8006b78:	2a00      	cmp	r2, #0
 8006b7a:	d1bc      	bne.n	8006af6 <ai_platform_api_get_network_report+0x56>
 8006b7c:	69b2      	ldr	r2, [r6, #24]
 8006b7e:	2300      	movs	r3, #0
 8006b80:	e7bd      	b.n	8006afe <ai_platform_api_get_network_report+0x5e>
 8006b82:	2400      	movs	r4, #0
 8006b84:	9802      	ldr	r0, [sp, #8]
 8006b86:	2218      	movs	r2, #24
 8006b88:	2112      	movs	r1, #18
 8006b8a:	300c      	adds	r0, #12
 8006b8c:	f8c8 403c 	str.w	r4, [r8, #60]	; 0x3c
 8006b90:	f8a8 4038 	strh.w	r4, [r8, #56]	; 0x38
 8006b94:	f000 fd30 	bl	80075f8 <core_set_error>
 8006b98:	4620      	mov	r0, r4
 8006b9a:	b009      	add	sp, #36	; 0x24
 8006b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba0:	2400      	movs	r4, #0
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	b009      	add	sp, #36	; 0x24
 8006ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006baa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006bae:	2a00      	cmp	r2, #0
 8006bb0:	d0e7      	beq.n	8006b82 <ai_platform_api_get_network_report+0xe2>
 8006bb2:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f8a8 2038 	strh.w	r2, [r8, #56]	; 0x38
 8006bbc:	f8c8 303c 	str.w	r3, [r8, #60]	; 0x3c
 8006bc0:	9b02      	ldr	r3, [sp, #8]
 8006bc2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	f240 80a5 	bls.w	8006d14 <ai_platform_api_get_network_report+0x274>
 8006bca:	f04f 0a00 	mov.w	sl, #0
 8006bce:	9b02      	ldr	r3, [sp, #8]
 8006bd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bd4:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 8006bd8:	4655      	mov	r5, sl
 8006bda:	e016      	b.n	8006c0a <ai_platform_api_get_network_report+0x16a>
 8006bdc:	00e9      	lsls	r1, r5, #3
 8006bde:	2301      	movs	r3, #1
 8006be0:	507b      	str	r3, [r7, r1]
 8006be2:	69b1      	ldr	r1, [r6, #24]
 8006be4:	f04f 0301 	mov.w	r3, #1
 8006be8:	6849      	ldr	r1, [r1, #4]
 8006bea:	3501      	adds	r5, #1
 8006bec:	f10a 0a1c 	add.w	sl, sl, #28
 8006bf0:	7523      	strb	r3, [r4, #20]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60a0      	str	r0, [r4, #8]
 8006bf6:	f8c4 b018 	str.w	fp, [r4, #24]
 8006bfa:	e9c4 3103 	strd	r3, r1, [r4, #12]
 8006bfe:	6961      	ldr	r1, [r4, #20]
 8006c00:	f368 211f 	bfi	r1, r8, #8, #24
 8006c04:	e9c4 c200 	strd	ip, r2, [r4]
 8006c08:	6161      	str	r1, [r4, #20]
 8006c0a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006c0e:	b2aa      	uxth	r2, r5
 8006c10:	42ab      	cmp	r3, r5
 8006c12:	d928      	bls.n	8006c66 <ai_platform_api_get_network_report+0x1c6>
 8006c14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c18:	b32b      	cbz	r3, 8006c66 <ai_platform_api_get_network_report+0x1c6>
 8006c1a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006c1e:	b316      	cbz	r6, 8006c66 <ai_platform_api_get_network_report+0x1c6>
 8006c20:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006c24:	00ea      	lsls	r2, r5, #3
 8006c26:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8006c2a:	9201      	str	r2, [sp, #4]
 8006c2c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006c30:	69b3      	ldr	r3, [r6, #24]
 8006c32:	4454      	add	r4, sl
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	68b3      	ldr	r3, [r6, #8]
 8006c38:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8006c3c:	f002 fd60 	bl	8009700 <ai_array_to_buffer_fmt>
 8006c40:	69b1      	ldr	r1, [r6, #24]
 8006c42:	4684      	mov	ip, r0
 8006c44:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8006c48:	688a      	ldr	r2, [r1, #8]
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d0ca      	beq.n	8006be4 <ai_platform_api_get_network_report+0x144>
 8006c4e:	2100      	movs	r1, #0
 8006c50:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8006c54:	6831      	ldr	r1, [r6, #0]
 8006c56:	6041      	str	r1, [r0, #4]
 8006c58:	b111      	cbz	r1, 8006c60 <ai_platform_api_get_network_report+0x1c0>
 8006c5a:	8849      	ldrh	r1, [r1, #2]
 8006c5c:	2900      	cmp	r1, #0
 8006c5e:	d1bd      	bne.n	8006bdc <ai_platform_api_get_network_report+0x13c>
 8006c60:	69b1      	ldr	r1, [r6, #24]
 8006c62:	2000      	movs	r0, #0
 8006c64:	e7be      	b.n	8006be4 <ai_platform_api_get_network_report+0x144>
 8006c66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006c6a:	2a00      	cmp	r2, #0
 8006c6c:	d052      	beq.n	8006d14 <ai_platform_api_get_network_report+0x274>
 8006c6e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006c72:	9902      	ldr	r1, [sp, #8]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f101 0628 	add.w	r6, r1, #40	; 0x28
 8006c7a:	f8a8 203a 	strh.w	r2, [r8, #58]	; 0x3a
 8006c7e:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
 8006c82:	4630      	mov	r0, r6
 8006c84:	f7ff fd4e 	bl	8006724 <ai_buffer_array_sane>
 8006c88:	4604      	mov	r4, r0
 8006c8a:	b940      	cbnz	r0, 8006c9e <ai_platform_api_get_network_report+0x1fe>
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	f7ff fd49 	bl	8006724 <ai_buffer_array_sane>
 8006c92:	b120      	cbz	r0, 8006c9e <ai_platform_api_get_network_report+0x1fe>
 8006c94:	9b02      	ldr	r3, [sp, #8]
 8006c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f040 8088 	bne.w	8006dae <ai_platform_api_get_network_report+0x30e>
 8006c9e:	9d02      	ldr	r5, [sp, #8]
 8006ca0:	f105 0720 	add.w	r7, r5, #32
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f7ff fd3d 	bl	8006724 <ai_buffer_array_sane>
 8006caa:	4604      	mov	r4, r0
 8006cac:	b930      	cbnz	r0, 8006cbc <ai_platform_api_get_network_report+0x21c>
 8006cae:	4638      	mov	r0, r7
 8006cb0:	f7ff fd38 	bl	8006724 <ai_buffer_array_sane>
 8006cb4:	b110      	cbz	r0, 8006cbc <ai_platform_api_get_network_report+0x21c>
 8006cb6:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d17f      	bne.n	8006dbc <ai_platform_api_get_network_report+0x31c>
 8006cbc:	9a02      	ldr	r2, [sp, #8]
 8006cbe:	f240 2401 	movw	r4, #513	; 0x201
 8006cc2:	6853      	ldr	r3, [r2, #4]
 8006cc4:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80
 8006cc8:	4b1b      	ldr	r3, [pc, #108]	; (8006d38 <ai_platform_api_get_network_report+0x298>)
 8006cca:	f8c8 3010 	str.w	r3, [r8, #16]
 8006cce:	f240 1309 	movw	r3, #265	; 0x109
 8006cd2:	f8c8 3014 	str.w	r3, [r8, #20]
 8006cd6:	f240 5301 	movw	r3, #1281	; 0x501
 8006cda:	e9c8 4309 	strd	r4, r3, [r8, #36]	; 0x24
 8006cde:	6890      	ldr	r0, [r2, #8]
 8006ce0:	f7ff fca8 	bl	8006634 <ai_platform_version_get>
 8006ce4:	4b15      	ldr	r3, [pc, #84]	; (8006d3c <ai_platform_api_get_network_report+0x29c>)
 8006ce6:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8006cea:	f8c8 0020 	str.w	r0, [r8, #32]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d126      	bne.n	8006d40 <ai_platform_api_get_network_report+0x2a0>
 8006cf2:	f108 0250 	add.w	r2, r8, #80	; 0x50
 8006cf6:	f108 0348 	add.w	r3, r8, #72	; 0x48
 8006cfa:	2401      	movs	r4, #1
 8006cfc:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006d00:	e882 0003 	stmia.w	r2, {r0, r1}
 8006d04:	e897 0003 	ldmia.w	r7, {r0, r1}
 8006d08:	e883 0003 	stmia.w	r3, {r0, r1}
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	b009      	add	sp, #36	; 0x24
 8006d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d14:	2400      	movs	r4, #0
 8006d16:	9802      	ldr	r0, [sp, #8]
 8006d18:	2218      	movs	r2, #24
 8006d1a:	2113      	movs	r1, #19
 8006d1c:	f8c8 4040 	str.w	r4, [r8, #64]	; 0x40
 8006d20:	300c      	adds	r0, #12
 8006d22:	f8a8 403a 	strh.w	r4, [r8, #58]	; 0x3a
 8006d26:	f000 fc67 	bl	80075f8 <core_set_error>
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	b009      	add	sp, #36	; 0x24
 8006d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d32:	bf00      	nop
 8006d34:	a1c00100 	.word	0xa1c00100
 8006d38:	080db1ec 	.word	0x080db1ec
 8006d3c:	a1facade 	.word	0xa1facade
 8006d40:	2200      	movs	r2, #0
 8006d42:	4b3a      	ldr	r3, [pc, #232]	; (8006e2c <ai_platform_api_get_network_report+0x38c>)
 8006d44:	f108 0a44 	add.w	sl, r8, #68	; 0x44
 8006d48:	f10d 0c10 	add.w	ip, sp, #16
 8006d4c:	f108 0960 	add.w	r9, r8, #96	; 0x60
 8006d50:	4655      	mov	r5, sl
 8006d52:	f8c8 c05c 	str.w	ip, [r8, #92]	; 0x5c
 8006d56:	464c      	mov	r4, r9
 8006d58:	e9c8 2212 	strd	r2, r2, [r8, #72]	; 0x48
 8006d5c:	e9c8 2214 	strd	r2, r2, [r8, #80]	; 0x50
 8006d60:	4a33      	ldr	r2, [pc, #204]	; (8006e30 <ai_platform_api_get_network_report+0x390>)
 8006d62:	f8c8 2044 	str.w	r2, [r8, #68]	; 0x44
 8006d66:	f240 4201 	movw	r2, #1025	; 0x401
 8006d6a:	f8c8 2058 	str.w	r2, [r8, #88]	; 0x58
 8006d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d70:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8006d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006d7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d80:	4630      	mov	r0, r6
 8006d82:	f7ff fccf 	bl	8006724 <ai_buffer_array_sane>
 8006d86:	bb78      	cbnz	r0, 8006de8 <ai_platform_api_get_network_report+0x348>
 8006d88:	4638      	mov	r0, r7
 8006d8a:	f7ff fccb 	bl	8006724 <ai_buffer_array_sane>
 8006d8e:	b9e0      	cbnz	r0, 8006dca <ai_platform_api_get_network_report+0x32a>
 8006d90:	2401      	movs	r4, #1
 8006d92:	4620      	mov	r0, r4
 8006d94:	b009      	add	sp, #36	; 0x24
 8006d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d9a:	9802      	ldr	r0, [sp, #8]
 8006d9c:	2218      	movs	r2, #24
 8006d9e:	2111      	movs	r1, #17
 8006da0:	300c      	adds	r0, #12
 8006da2:	f000 fc29 	bl	80075f8 <core_set_error>
 8006da6:	4620      	mov	r0, r4
 8006da8:	b009      	add	sp, #36	; 0x24
 8006daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dae:	9802      	ldr	r0, [sp, #8]
 8006db0:	2213      	movs	r2, #19
 8006db2:	2111      	movs	r1, #17
 8006db4:	300c      	adds	r0, #12
 8006db6:	f000 fc1f 	bl	80075f8 <core_set_error>
 8006dba:	e6ed      	b.n	8006b98 <ai_platform_api_get_network_report+0xf8>
 8006dbc:	9802      	ldr	r0, [sp, #8]
 8006dbe:	2212      	movs	r2, #18
 8006dc0:	2111      	movs	r1, #17
 8006dc2:	300c      	adds	r0, #12
 8006dc4:	f000 fc18 	bl	80075f8 <core_set_error>
 8006dc8:	e6e6      	b.n	8006b98 <ai_platform_api_get_network_report+0xf8>
 8006dca:	4638      	mov	r0, r7
 8006dcc:	f7ff fcaa 	bl	8006724 <ai_buffer_array_sane>
 8006dd0:	b1c0      	cbz	r0, 8006e04 <ai_platform_api_get_network_report+0x364>
 8006dd2:	9b02      	ldr	r3, [sp, #8]
 8006dd4:	46d0      	mov	r8, sl
 8006dd6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006dda:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8006dde:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006de2:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8006de6:	e7d3      	b.n	8006d90 <ai_platform_api_get_network_report+0x2f0>
 8006de8:	4630      	mov	r0, r6
 8006dea:	f7ff fc9b 	bl	8006724 <ai_buffer_array_sane>
 8006dee:	b198      	cbz	r0, 8006e18 <ai_platform_api_get_network_report+0x378>
 8006df0:	9b02      	ldr	r3, [sp, #8]
 8006df2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006df6:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8006dfa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006dfe:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8006e02:	e7c1      	b.n	8006d88 <ai_platform_api_get_network_report+0x2e8>
 8006e04:	4604      	mov	r4, r0
 8006e06:	46d0      	mov	r8, sl
 8006e08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e0a:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8006e0e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006e12:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8006e16:	deff      	udf	#255	; 0xff
 8006e18:	4604      	mov	r4, r0
 8006e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e1c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8006e20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006e24:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 8006e28:	deff      	udf	#255	; 0xff
 8006e2a:	bf00      	nop
 8006e2c:	0800cb18 	.word	0x0800cb18
 8006e30:	00040440 	.word	0x00040440

08006e34 <ai_platform_network_create>:
 8006e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8006e3e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8006e42:	b320      	cbz	r0, 8006e8e <ai_platform_network_create+0x5a>
 8006e44:	6002      	str	r2, [r0, #0]
 8006e46:	4616      	mov	r6, r2
 8006e48:	461f      	mov	r7, r3
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	f000 fbcc 	bl	80075e8 <core_init>
 8006e50:	b970      	cbnz	r0, 8006e70 <ai_platform_network_create+0x3c>
 8006e52:	2530      	movs	r5, #48	; 0x30
 8006e54:	2300      	movs	r3, #0
 8006e56:	6023      	str	r3, [r4, #0]
 8006e58:	2410      	movs	r4, #16
 8006e5a:	464a      	mov	r2, r9
 8006e5c:	4641      	mov	r1, r8
 8006e5e:	4638      	mov	r0, r7
 8006e60:	f7ff fbe2 	bl	8006628 <ai_version_get>
 8006e64:	60b0      	str	r0, [r6, #8]
 8006e66:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8006e6a:	b003      	add	sp, #12
 8006e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e70:	2200      	movs	r2, #0
 8006e72:	4641      	mov	r1, r8
 8006e74:	4638      	mov	r0, r7
 8006e76:	f7ff fbd7 	bl	8006628 <ai_version_get>
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2105      	movs	r1, #5
 8006e80:	2001      	movs	r0, #1
 8006e82:	f7ff fbd1 	bl	8006628 <ai_version_get>
 8006e86:	4285      	cmp	r5, r0
 8006e88:	d008      	beq.n	8006e9c <ai_platform_network_create+0x68>
 8006e8a:	2501      	movs	r5, #1
 8006e8c:	e7e2      	b.n	8006e54 <ai_platform_network_create+0x20>
 8006e8e:	2510      	movs	r5, #16
 8006e90:	462c      	mov	r4, r5
 8006e92:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8006e96:	b003      	add	sp, #12
 8006e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e9c:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <ai_platform_network_create+0x80>)
 8006e9e:	a801      	add	r0, sp, #4
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	f000 fbb5 	bl	8007610 <ai_check_custom_types>
 8006ea6:	b110      	cbz	r0, 8006eae <ai_platform_network_create+0x7a>
 8006ea8:	2400      	movs	r4, #0
 8006eaa:	4625      	mov	r5, r4
 8006eac:	e7d5      	b.n	8006e5a <ai_platform_network_create+0x26>
 8006eae:	2502      	movs	r5, #2
 8006eb0:	e7d0      	b.n	8006e54 <ai_platform_network_create+0x20>
 8006eb2:	bf00      	nop
 8006eb4:	84048403 	.word	0x84048403

08006eb8 <ai_platform_network_destroy>:
 8006eb8:	4a07      	ldr	r2, [pc, #28]	; (8006ed8 <ai_platform_network_destroy+0x20>)
 8006eba:	b508      	push	{r3, lr}
 8006ebc:	6801      	ldr	r1, [r0, #0]
 8006ebe:	ea01 0c02 	and.w	ip, r1, r2
 8006ec2:	438a      	bics	r2, r1
 8006ec4:	d102      	bne.n	8006ecc <ai_platform_network_destroy+0x14>
 8006ec6:	4561      	cmp	r1, ip
 8006ec8:	d001      	beq.n	8006ece <ai_platform_network_destroy+0x16>
 8006eca:	2000      	movs	r0, #0
 8006ecc:	bd08      	pop	{r3, pc}
 8006ece:	f000 fc31 	bl	8007734 <ai_layers_destroy_all>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	bd08      	pop	{r3, pc}
 8006ed6:	bf00      	nop
 8006ed8:	a1c00100 	.word	0xa1c00100

08006edc <ai_platform_network_init>:
 8006edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee0:	4a5c      	ldr	r2, [pc, #368]	; (8007054 <ai_platform_network_init+0x178>)
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	6801      	ldr	r1, [r0, #0]
 8006ee6:	438a      	bics	r2, r1
 8006ee8:	d133      	bne.n	8006f52 <ai_platform_network_init+0x76>
 8006eea:	4605      	mov	r5, r0
 8006eec:	2c00      	cmp	r4, #0
 8006eee:	f000 8093 	beq.w	8007018 <ai_platform_network_init+0x13c>
 8006ef2:	f8d4 b000 	ldr.w	fp, [r4]
 8006ef6:	4a58      	ldr	r2, [pc, #352]	; (8007058 <ai_platform_network_init+0x17c>)
 8006ef8:	4593      	cmp	fp, r2
 8006efa:	d10f      	bne.n	8006f1c <ai_platform_network_init+0x40>
 8006efc:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 8006f00:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8006f04:	4b53      	ldr	r3, [pc, #332]	; (8007054 <ai_platform_network_init+0x178>)
 8006f06:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 8006f0a:	0c32      	lsrs	r2, r6, #16
 8006f0c:	4299      	cmp	r1, r3
 8006f0e:	d02c      	beq.n	8006f6a <ai_platform_network_init+0x8e>
 8006f10:	2303      	movs	r3, #3
 8006f12:	462c      	mov	r4, r5
 8006f14:	612b      	str	r3, [r5, #16]
 8006f16:	4620      	mov	r0, r4
 8006f18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1c:	4627      	mov	r7, r4
 8006f1e:	2101      	movs	r1, #1
 8006f20:	6864      	ldr	r4, [r4, #4]
 8006f22:	4638      	mov	r0, r7
 8006f24:	f107 081c 	add.w	r8, r7, #28
 8006f28:	f7ff fbc0 	bl	80066ac <ai_buffer_get_size>
 8006f2c:	4606      	mov	r6, r0
 8006f2e:	2101      	movs	r1, #1
 8006f30:	4640      	mov	r0, r8
 8006f32:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8006f36:	f7ff fbb9 	bl	80066ac <ai_buffer_get_size>
 8006f3a:	b976      	cbnz	r6, 8006f5a <ai_platform_network_init+0x7e>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d150      	bne.n	8006fe2 <ai_platform_network_init+0x106>
 8006f40:	4680      	mov	r8, r0
 8006f42:	4686      	mov	lr, r0
 8006f44:	4606      	mov	r6, r0
 8006f46:	4607      	mov	r7, r0
 8006f48:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8006f4c:	6829      	ldr	r1, [r5, #0]
 8006f4e:	0436      	lsls	r6, r6, #16
 8006f50:	e7d8      	b.n	8006f04 <ai_platform_network_init+0x28>
 8006f52:	2400      	movs	r4, #0
 8006f54:	4620      	mov	r0, r4
 8006f56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d13b      	bne.n	8006fd6 <ai_platform_network_init+0xfa>
 8006f5e:	4680      	mov	r8, r0
 8006f60:	4686      	mov	lr, r0
 8006f62:	2c00      	cmp	r4, #0
 8006f64:	d05e      	beq.n	8007024 <ai_platform_network_init+0x148>
 8006f66:	2601      	movs	r6, #1
 8006f68:	e7ee      	b.n	8006f48 <ai_platform_network_init+0x6c>
 8006f6a:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	4b3a      	ldr	r3, [pc, #232]	; (8007058 <ai_platform_network_init+0x17c>)
 8006f70:	d33e      	bcc.n	8006ff0 <ai_platform_network_init+0x114>
 8006f72:	459b      	cmp	fp, r3
 8006f74:	d03e      	beq.n	8006ff4 <ai_platform_network_init+0x118>
 8006f76:	b1a2      	cbz	r2, 8006fa2 <ai_platform_network_init+0xc6>
 8006f78:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8006f7c:	f04f 0c00 	mov.w	ip, #0
 8006f80:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8006f84:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8006f86:	eb07 0b0c 	add.w	fp, r7, ip
 8006f8a:	4464      	add	r4, ip
 8006f8c:	f10c 0c1c 	add.w	ip, ip, #28
 8006f90:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8006f94:	45cc      	cmp	ip, r9
 8006f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f98:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8006f9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006fa0:	d1f0      	bne.n	8006f84 <ai_platform_network_init+0xa8>
 8006fa2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8006fa4:	622e      	str	r6, [r5, #32]
 8006fa6:	4553      	cmp	r3, sl
 8006fa8:	d34b      	bcc.n	8007042 <ai_platform_network_init+0x166>
 8006faa:	f1ba 0f00 	cmp.w	sl, #0
 8006fae:	d025      	beq.n	8006ffc <ai_platform_network_init+0x120>
 8006fb0:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8006fb4:	2700      	movs	r7, #0
 8006fb6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8006fba:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8006fbc:	eb08 0607 	add.w	r6, r8, r7
 8006fc0:	443c      	add	r4, r7
 8006fc2:	371c      	adds	r7, #28
 8006fc4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006fc6:	4557      	cmp	r7, sl
 8006fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fca:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006fce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006fd2:	d1f2      	bne.n	8006fba <ai_platform_network_init+0xde>
 8006fd4:	e012      	b.n	8006ffc <ai_platform_network_init+0x120>
 8006fd6:	f1b9 0f00 	cmp.w	r9, #0
 8006fda:	d015      	beq.n	8007008 <ai_platform_network_init+0x12c>
 8006fdc:	f04f 0e01 	mov.w	lr, #1
 8006fe0:	e7bf      	b.n	8006f62 <ai_platform_network_init+0x86>
 8006fe2:	f1b9 0f00 	cmp.w	r9, #0
 8006fe6:	d00f      	beq.n	8007008 <ai_platform_network_init+0x12c>
 8006fe8:	f04f 0e01 	mov.w	lr, #1
 8006fec:	4637      	mov	r7, r6
 8006fee:	e7ab      	b.n	8006f48 <ai_platform_network_init+0x6c>
 8006ff0:	459b      	cmp	fp, r3
 8006ff2:	d11e      	bne.n	8007032 <ai_platform_network_init+0x156>
 8006ff4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8006ff8:	e9c5 6708 	strd	r6, r7, [r5, #32]
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f8c5 e028 	str.w	lr, [r5, #40]	; 0x28
 8007002:	f000 fb2d 	bl	8007660 <ai_layers_init_all>
 8007006:	e783      	b.n	8006f10 <ai_platform_network_init+0x34>
 8007008:	2213      	movs	r2, #19
 800700a:	2110      	movs	r1, #16
 800700c:	f105 000c 	add.w	r0, r5, #12
 8007010:	2400      	movs	r4, #0
 8007012:	f000 faf1 	bl	80075f8 <core_set_error>
 8007016:	e77e      	b.n	8006f16 <ai_platform_network_init+0x3a>
 8007018:	2211      	movs	r2, #17
 800701a:	2110      	movs	r1, #16
 800701c:	300c      	adds	r0, #12
 800701e:	f000 faeb 	bl	80075f8 <core_set_error>
 8007022:	e778      	b.n	8006f16 <ai_platform_network_init+0x3a>
 8007024:	2212      	movs	r2, #18
 8007026:	2110      	movs	r1, #16
 8007028:	f105 000c 	add.w	r0, r5, #12
 800702c:	f000 fae4 	bl	80075f8 <core_set_error>
 8007030:	e771      	b.n	8006f16 <ai_platform_network_init+0x3a>
 8007032:	2212      	movs	r2, #18
 8007034:	2116      	movs	r1, #22
 8007036:	f105 000c 	add.w	r0, r5, #12
 800703a:	2400      	movs	r4, #0
 800703c:	f000 fadc 	bl	80075f8 <core_set_error>
 8007040:	e769      	b.n	8006f16 <ai_platform_network_init+0x3a>
 8007042:	2213      	movs	r2, #19
 8007044:	2116      	movs	r1, #22
 8007046:	f105 000c 	add.w	r0, r5, #12
 800704a:	2400      	movs	r4, #0
 800704c:	f000 fad4 	bl	80075f8 <core_set_error>
 8007050:	e761      	b.n	8006f16 <ai_platform_network_init+0x3a>
 8007052:	bf00      	nop
 8007054:	a1c00100 	.word	0xa1c00100
 8007058:	a1facade 	.word	0xa1facade

0800705c <ai_platform_network_post_init>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4b16      	ldr	r3, [pc, #88]	; (80070b8 <ai_platform_network_post_init+0x5c>)
 8007060:	6802      	ldr	r2, [r0, #0]
 8007062:	ea02 0103 	and.w	r1, r2, r3
 8007066:	4393      	bics	r3, r2
 8007068:	d108      	bne.n	800707c <ai_platform_network_post_init+0x20>
 800706a:	6903      	ldr	r3, [r0, #16]
 800706c:	4604      	mov	r4, r0
 800706e:	f013 0502 	ands.w	r5, r3, #2
 8007072:	d005      	beq.n	8007080 <ai_platform_network_post_init+0x24>
 8007074:	428a      	cmp	r2, r1
 8007076:	d00a      	beq.n	800708e <ai_platform_network_post_init+0x32>
 8007078:	2001      	movs	r0, #1
 800707a:	bd38      	pop	{r3, r4, r5, pc}
 800707c:	2000      	movs	r0, #0
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	2210      	movs	r2, #16
 8007082:	2111      	movs	r1, #17
 8007084:	300c      	adds	r0, #12
 8007086:	f000 fab7 	bl	80075f8 <core_set_error>
 800708a:	4628      	mov	r0, r5
 800708c:	bd38      	pop	{r3, r4, r5, pc}
 800708e:	f000 faf5 	bl	800767c <ai_layers_post_init_all>
 8007092:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0ef      	beq.n	8007078 <ai_platform_network_post_init+0x1c>
 8007098:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800709a:	e008      	b.n	80070ae <ai_platform_network_post_init+0x52>
 800709c:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 80070a0:	4798      	blx	r3
 80070a2:	692b      	ldr	r3, [r5, #16]
 80070a4:	42ab      	cmp	r3, r5
 80070a6:	461d      	mov	r5, r3
 80070a8:	d0e6      	beq.n	8007078 <ai_platform_network_post_init+0x1c>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0e4      	beq.n	8007078 <ai_platform_network_post_init+0x1c>
 80070ae:	4629      	mov	r1, r5
 80070b0:	2000      	movs	r0, #0
 80070b2:	2d00      	cmp	r5, #0
 80070b4:	d1f2      	bne.n	800709c <ai_platform_network_post_init+0x40>
 80070b6:	e7df      	b.n	8007078 <ai_platform_network_post_init+0x1c>
 80070b8:	a1c00100 	.word	0xa1c00100

080070bc <ai_platform_network_process>:
 80070bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c0:	b085      	sub	sp, #20
 80070c2:	4bb7      	ldr	r3, [pc, #732]	; (80073a0 <ai_platform_network_process+0x2e4>)
 80070c4:	9202      	str	r2, [sp, #8]
 80070c6:	6802      	ldr	r2, [r0, #0]
 80070c8:	4393      	bics	r3, r2
 80070ca:	f040 8142 	bne.w	8007352 <ai_platform_network_process+0x296>
 80070ce:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80070d0:	4605      	mov	r5, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 8126 	beq.w	8007324 <ai_platform_network_process+0x268>
 80070d8:	6903      	ldr	r3, [r0, #16]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8d0 8034 	ldr.w	r8, [r0, #52]	; 0x34
 80070e0:	f003 0303 	and.w	r3, r3, #3
 80070e4:	6182      	str	r2, [r0, #24]
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	f040 8122 	bne.w	8007330 <ai_platform_network_process+0x274>
 80070ec:	2900      	cmp	r1, #0
 80070ee:	f000 8136 	beq.w	800735e <ai_platform_network_process+0x2a2>
 80070f2:	fab8 f788 	clz	r7, r8
 80070f6:	097f      	lsrs	r7, r7, #5
 80070f8:	f1b8 0f00 	cmp.w	r8, #0
 80070fc:	f000 812f 	beq.w	800735e <ai_platform_network_process+0x2a2>
 8007100:	f8b8 3000 	ldrh.w	r3, [r8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 812a 	beq.w	800735e <ai_platform_network_process+0x2a2>
 800710a:	698b      	ldr	r3, [r1, #24]
 800710c:	460e      	mov	r6, r1
 800710e:	9003      	str	r0, [sp, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	9301      	str	r3, [sp, #4]
 8007114:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d072      	beq.n	8007202 <ai_platform_network_process+0x146>
 800711c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007120:	2c00      	cmp	r4, #0
 8007122:	d06e      	beq.n	8007202 <ai_platform_network_process+0x146>
 8007124:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007128:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800712c:	f8d3 a000 	ldr.w	sl, [r3]
 8007130:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8007134:	f000 8112 	beq.w	800735c <ai_platform_network_process+0x2a0>
 8007138:	69a3      	ldr	r3, [r4, #24]
 800713a:	2101      	movs	r1, #1
 800713c:	4630      	mov	r0, r6
 800713e:	685d      	ldr	r5, [r3, #4]
 8007140:	f7ff fab4 	bl	80066ac <ai_buffer_get_size>
 8007144:	4285      	cmp	r5, r0
 8007146:	f0c0 8115 	bcc.w	8007374 <ai_platform_network_process+0x2b8>
 800714a:	68e0      	ldr	r0, [r4, #12]
 800714c:	69b1      	ldr	r1, [r6, #24]
 800714e:	68c2      	ldr	r2, [r0, #12]
 8007150:	68cb      	ldr	r3, [r1, #12]
 8007152:	429a      	cmp	r2, r3
 8007154:	f040 810e 	bne.w	8007374 <ai_platform_network_process+0x2b8>
 8007158:	6882      	ldr	r2, [r0, #8]
 800715a:	688b      	ldr	r3, [r1, #8]
 800715c:	429a      	cmp	r2, r3
 800715e:	f040 8109 	bne.w	8007374 <ai_platform_network_process+0x2b8>
 8007162:	6842      	ldr	r2, [r0, #4]
 8007164:	684b      	ldr	r3, [r1, #4]
 8007166:	429a      	cmp	r2, r3
 8007168:	f040 8104 	bne.w	8007374 <ai_platform_network_process+0x2b8>
 800716c:	69a3      	ldr	r3, [r4, #24]
 800716e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007172:	f002 fb35 	bl	80097e0 <ai_array_get_data_byte_size>
 8007176:	4605      	mov	r5, r0
 8007178:	4620      	mov	r0, r4
 800717a:	f7ff fa81 	bl	8006680 <get_tensor_byte_size>
 800717e:	4285      	cmp	r5, r0
 8007180:	f0c0 80f8 	bcc.w	8007374 <ai_platform_network_process+0x2b8>
 8007184:	69a3      	ldr	r3, [r4, #24]
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	f002 faba 	bl	8009700 <ai_array_to_buffer_fmt>
 800718c:	6833      	ldr	r3, [r6, #0]
 800718e:	4058      	eors	r0, r3
 8007190:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007194:	f040 81a4 	bne.w	80074e0 <ai_platform_network_process+0x424>
 8007198:	6873      	ldr	r3, [r6, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 80de 	beq.w	800735c <ai_platform_network_process+0x2a0>
 80071a0:	69b3      	ldr	r3, [r6, #24]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 81a4 	beq.w	80074f2 <ai_platform_network_process+0x436>
 80071aa:	9a01      	ldr	r2, [sp, #4]
 80071ac:	4620      	mov	r0, r4
 80071ae:	3701      	adds	r7, #1
 80071b0:	361c      	adds	r6, #28
 80071b2:	429a      	cmp	r2, r3
 80071b4:	bf38      	it	cc
 80071b6:	461a      	movcc	r2, r3
 80071b8:	9201      	str	r2, [sp, #4]
 80071ba:	f7ff fa61 	bl	8006680 <get_tensor_byte_size>
 80071be:	f8c9 0008 	str.w	r0, [r9, #8]
 80071c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	fb00 f303 	mul.w	r3, r0, r3
 80071cc:	f8c9 300c 	str.w	r3, [r9, #12]
 80071d0:	f856 1c18 	ldr.w	r1, [r6, #-24]
 80071d4:	440b      	add	r3, r1
 80071d6:	f8c9 1004 	str.w	r1, [r9, #4]
 80071da:	f84a 300b 	str.w	r3, [sl, fp]
 80071de:	69a0      	ldr	r0, [r4, #24]
 80071e0:	6803      	ldr	r3, [r0, #0]
 80071e2:	009a      	lsls	r2, r3, #2
 80071e4:	f100 80af 	bmi.w	8007346 <ai_platform_network_process+0x28a>
 80071e8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80071ec:	1a9b      	subs	r3, r3, r2
 80071ee:	4419      	add	r1, r3
 80071f0:	6081      	str	r1, [r0, #8]
 80071f2:	69a3      	ldr	r3, [r4, #24]
 80071f4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80071f8:	60da      	str	r2, [r3, #12]
 80071fa:	f8b8 3000 	ldrh.w	r3, [r8]
 80071fe:	42bb      	cmp	r3, r7
 8007200:	d888      	bhi.n	8007114 <ai_platform_network_process+0x58>
 8007202:	9d03      	ldr	r5, [sp, #12]
 8007204:	9b02      	ldr	r3, [sp, #8]
 8007206:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 817b 	beq.w	8007504 <ai_platform_network_process+0x448>
 800720e:	2a01      	cmp	r2, #1
 8007210:	f240 80bd 	bls.w	800738e <ai_platform_network_process+0x2d2>
 8007214:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
 8007218:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 80b6 	beq.w	800738e <ai_platform_network_process+0x2d2>
 8007222:	2700      	movs	r7, #0
 8007224:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007228:	9502      	str	r5, [sp, #8]
 800722a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	f000 80bd 	beq.w	80073ae <ai_platform_network_process+0x2f2>
 8007234:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8007238:	2e00      	cmp	r6, #0
 800723a:	f000 80b8 	beq.w	80073ae <ai_platform_network_process+0x2f2>
 800723e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007242:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8007246:	681c      	ldr	r4, [r3, #0]
 8007248:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 800724c:	f000 8170 	beq.w	8007530 <ai_platform_network_process+0x474>
 8007250:	69b3      	ldr	r3, [r6, #24]
 8007252:	2101      	movs	r1, #1
 8007254:	4658      	mov	r0, fp
 8007256:	685d      	ldr	r5, [r3, #4]
 8007258:	f7ff fa28 	bl	80066ac <ai_buffer_get_size>
 800725c:	4285      	cmp	r5, r0
 800725e:	f0c0 8095 	bcc.w	800738c <ai_platform_network_process+0x2d0>
 8007262:	68f0      	ldr	r0, [r6, #12]
 8007264:	f8db 1018 	ldr.w	r1, [fp, #24]
 8007268:	68c2      	ldr	r2, [r0, #12]
 800726a:	68cb      	ldr	r3, [r1, #12]
 800726c:	429a      	cmp	r2, r3
 800726e:	f040 808d 	bne.w	800738c <ai_platform_network_process+0x2d0>
 8007272:	6882      	ldr	r2, [r0, #8]
 8007274:	688b      	ldr	r3, [r1, #8]
 8007276:	429a      	cmp	r2, r3
 8007278:	f040 8088 	bne.w	800738c <ai_platform_network_process+0x2d0>
 800727c:	6842      	ldr	r2, [r0, #4]
 800727e:	684b      	ldr	r3, [r1, #4]
 8007280:	429a      	cmp	r2, r3
 8007282:	f040 8083 	bne.w	800738c <ai_platform_network_process+0x2d0>
 8007286:	69b3      	ldr	r3, [r6, #24]
 8007288:	e9d3 0100 	ldrd	r0, r1, [r3]
 800728c:	f002 faa8 	bl	80097e0 <ai_array_get_data_byte_size>
 8007290:	9003      	str	r0, [sp, #12]
 8007292:	4630      	mov	r0, r6
 8007294:	f7ff f9f4 	bl	8006680 <get_tensor_byte_size>
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	4283      	cmp	r3, r0
 800729c:	d376      	bcc.n	800738c <ai_platform_network_process+0x2d0>
 800729e:	69b3      	ldr	r3, [r6, #24]
 80072a0:	6818      	ldr	r0, [r3, #0]
 80072a2:	f002 fa2d 	bl	8009700 <ai_array_to_buffer_fmt>
 80072a6:	f8db 3000 	ldr.w	r3, [fp]
 80072aa:	4058      	eors	r0, r3
 80072ac:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80072b0:	f040 812c 	bne.w	800750c <ai_platform_network_process+0x450>
 80072b4:	f8db 3004 	ldr.w	r3, [fp, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 8139 	beq.w	8007530 <ai_platform_network_process+0x474>
 80072be:	f8db 3018 	ldr.w	r3, [fp, #24]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 812a 	beq.w	800751e <ai_platform_network_process+0x462>
 80072ca:	9a01      	ldr	r2, [sp, #4]
 80072cc:	4630      	mov	r0, r6
 80072ce:	3701      	adds	r7, #1
 80072d0:	f10b 0b1c 	add.w	fp, fp, #28
 80072d4:	429a      	cmp	r2, r3
 80072d6:	bf38      	it	cc
 80072d8:	461a      	movcc	r2, r3
 80072da:	9201      	str	r2, [sp, #4]
 80072dc:	f7ff f9d0 	bl	8006680 <get_tensor_byte_size>
 80072e0:	f8c8 0008 	str.w	r0, [r8, #8]
 80072e4:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	fb00 f303 	mul.w	r3, r0, r3
 80072ee:	f8c8 300c 	str.w	r3, [r8, #12]
 80072f2:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 80072f6:	440b      	add	r3, r1
 80072f8:	f8c8 1004 	str.w	r1, [r8, #4]
 80072fc:	f844 300a 	str.w	r3, [r4, sl]
 8007300:	69b0      	ldr	r0, [r6, #24]
 8007302:	6803      	ldr	r3, [r0, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	d44d      	bmi.n	80073a4 <ai_platform_network_process+0x2e8>
 8007308:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800730c:	1a9b      	subs	r3, r3, r2
 800730e:	4419      	add	r1, r3
 8007310:	6081      	str	r1, [r0, #8]
 8007312:	69b3      	ldr	r3, [r6, #24]
 8007314:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007318:	60da      	str	r2, [r3, #12]
 800731a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800731e:	42bb      	cmp	r3, r7
 8007320:	d883      	bhi.n	800722a <ai_platform_network_process+0x16e>
 8007322:	e044      	b.n	80073ae <ai_platform_network_process+0x2f2>
 8007324:	6902      	ldr	r2, [r0, #16]
 8007326:	6183      	str	r3, [r0, #24]
 8007328:	f002 0203 	and.w	r2, r2, #3
 800732c:	2a03      	cmp	r2, #3
 800732e:	d016      	beq.n	800735e <ai_platform_network_process+0x2a2>
 8007330:	2230      	movs	r2, #48	; 0x30
 8007332:	2111      	movs	r1, #17
 8007334:	f105 000c 	add.w	r0, r5, #12
 8007338:	2400      	movs	r4, #0
 800733a:	f000 f95d 	bl	80075f8 <core_set_error>
 800733e:	4620      	mov	r0, r4
 8007340:	b005      	add	sp, #20
 8007342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007346:	f8b8 3000 	ldrh.w	r3, [r8]
 800734a:	429f      	cmp	r7, r3
 800734c:	f4ff aee2 	bcc.w	8007114 <ai_platform_network_process+0x58>
 8007350:	e757      	b.n	8007202 <ai_platform_network_process+0x146>
 8007352:	2400      	movs	r4, #0
 8007354:	4620      	mov	r0, r4
 8007356:	b005      	add	sp, #20
 8007358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735c:	9d03      	ldr	r5, [sp, #12]
 800735e:	2400      	movs	r4, #0
 8007360:	2217      	movs	r2, #23
 8007362:	2112      	movs	r1, #18
 8007364:	f105 000c 	add.w	r0, r5, #12
 8007368:	f000 f946 	bl	80075f8 <core_set_error>
 800736c:	4620      	mov	r0, r4
 800736e:	b005      	add	sp, #20
 8007370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007374:	9d03      	ldr	r5, [sp, #12]
 8007376:	2400      	movs	r4, #0
 8007378:	2218      	movs	r2, #24
 800737a:	2112      	movs	r1, #18
 800737c:	f105 000c 	add.w	r0, r5, #12
 8007380:	f000 f93a 	bl	80075f8 <core_set_error>
 8007384:	4620      	mov	r0, r4
 8007386:	b005      	add	sp, #20
 8007388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738c:	9d02      	ldr	r5, [sp, #8]
 800738e:	2218      	movs	r2, #24
 8007390:	2113      	movs	r1, #19
 8007392:	f105 000c 	add.w	r0, r5, #12
 8007396:	2400      	movs	r4, #0
 8007398:	f000 f92e 	bl	80075f8 <core_set_error>
 800739c:	e7cf      	b.n	800733e <ai_platform_network_process+0x282>
 800739e:	bf00      	nop
 80073a0:	a1c00100 	.word	0xa1c00100
 80073a4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80073a8:	429f      	cmp	r7, r3
 80073aa:	f4ff af3e 	bcc.w	800722a <ai_platform_network_process+0x16e>
 80073ae:	9d02      	ldr	r5, [sp, #8]
 80073b0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80073b4:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 80073b6:	832b      	strh	r3, [r5, #24]
 80073b8:	2a00      	cmp	r2, #0
 80073ba:	f040 808b 	bne.w	80074d4 <ai_platform_network_process+0x418>
 80073be:	4616      	mov	r6, r2
 80073c0:	4617      	mov	r7, r2
 80073c2:	8b6c      	ldrh	r4, [r5, #26]
 80073c4:	429c      	cmp	r4, r3
 80073c6:	d2ba      	bcs.n	800733e <ai_platform_network_process+0x282>
 80073c8:	46ab      	mov	fp, r5
 80073ca:	2e00      	cmp	r6, #0
 80073cc:	d030      	beq.n	8007430 <ai_platform_network_process+0x374>
 80073ce:	f04f 0800 	mov.w	r8, #0
 80073d2:	e014      	b.n	80073fe <ai_platform_network_process+0x342>
 80073d4:	6882      	ldr	r2, [r0, #8]
 80073d6:	68c5      	ldr	r5, [r0, #12]
 80073d8:	6863      	ldr	r3, [r4, #4]
 80073da:	1b52      	subs	r2, r2, r5
 80073dc:	4413      	add	r3, r2
 80073de:	6083      	str	r3, [r0, #8]
 80073e0:	698b      	ldr	r3, [r1, #24]
 80073e2:	6862      	ldr	r2, [r4, #4]
 80073e4:	60da      	str	r2, [r3, #12]
 80073e6:	f859 200a 	ldr.w	r2, [r9, sl]
 80073ea:	f108 0801 	add.w	r8, r8, #1
 80073ee:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80073f2:	440b      	add	r3, r1
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d301      	bcc.n	80073fc <ai_platform_network_process+0x340>
 80073f8:	68e3      	ldr	r3, [r4, #12]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	6063      	str	r3, [r4, #4]
 80073fe:	8833      	ldrh	r3, [r6, #0]
 8007400:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007404:	4543      	cmp	r3, r8
 8007406:	d913      	bls.n	8007430 <ai_platform_network_process+0x374>
 8007408:	6873      	ldr	r3, [r6, #4]
 800740a:	b18b      	cbz	r3, 8007430 <ai_platform_network_process+0x374>
 800740c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007410:	b171      	cbz	r1, 8007430 <ai_platform_network_process+0x374>
 8007412:	6988      	ldr	r0, [r1, #24]
 8007414:	68b2      	ldr	r2, [r6, #8]
 8007416:	6803      	ldr	r3, [r0, #0]
 8007418:	f8d2 9000 	ldr.w	r9, [r2]
 800741c:	009d      	lsls	r5, r3, #2
 800741e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007422:	d5d7      	bpl.n	80073d4 <ai_platform_network_process+0x318>
 8007424:	6881      	ldr	r1, [r0, #8]
 8007426:	68a2      	ldr	r2, [r4, #8]
 8007428:	6860      	ldr	r0, [r4, #4]
 800742a:	f002 f8e1 	bl	80095f0 <st_int8_copy>
 800742e:	e7da      	b.n	80073e6 <ai_platform_network_process+0x32a>
 8007430:	4658      	mov	r0, fp
 8007432:	f000 f937 	bl	80076a4 <ai_layers_forward_all>
 8007436:	2f00      	cmp	r7, #0
 8007438:	d03d      	beq.n	80074b6 <ai_platform_network_process+0x3fa>
 800743a:	2400      	movs	r4, #0
 800743c:	e016      	b.n	800746c <ai_platform_network_process+0x3b0>
 800743e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007442:	f859 100a 	ldr.w	r1, [r9, sl]
 8007446:	4413      	add	r3, r2
 8007448:	428b      	cmp	r3, r1
 800744a:	d302      	bcc.n	8007452 <ai_platform_network_process+0x396>
 800744c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007450:	1acb      	subs	r3, r1, r3
 8007452:	f8c8 3004 	str.w	r3, [r8, #4]
 8007456:	6981      	ldr	r1, [r0, #24]
 8007458:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800745c:	1b52      	subs	r2, r2, r5
 800745e:	4413      	add	r3, r2
 8007460:	608b      	str	r3, [r1, #8]
 8007462:	6983      	ldr	r3, [r0, #24]
 8007464:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007468:	60da      	str	r2, [r3, #12]
 800746a:	3401      	adds	r4, #1
 800746c:	883b      	ldrh	r3, [r7, #0]
 800746e:	42a3      	cmp	r3, r4
 8007470:	d921      	bls.n	80074b6 <ai_platform_network_process+0x3fa>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	b1fb      	cbz	r3, 80074b6 <ai_platform_network_process+0x3fa>
 8007476:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800747a:	b1e0      	cbz	r0, 80074b6 <ai_platform_network_process+0x3fa>
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007482:	6983      	ldr	r3, [r0, #24]
 8007484:	f8d2 9000 	ldr.w	r9, [r2]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800748e:	0092      	lsls	r2, r2, #2
 8007490:	d5d5      	bpl.n	800743e <ai_platform_network_process+0x382>
 8007492:	6898      	ldr	r0, [r3, #8]
 8007494:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007498:	f002 f8aa 	bl	80095f0 <st_int8_copy>
 800749c:	f859 200a 	ldr.w	r2, [r9, sl]
 80074a0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80074a4:	440b      	add	r3, r1
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d302      	bcc.n	80074b0 <ai_platform_network_process+0x3f4>
 80074aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	f8c8 3004 	str.w	r3, [r8, #4]
 80074b4:	e7d9      	b.n	800746a <ai_platform_network_process+0x3ae>
 80074b6:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 80074ba:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80074be:	3401      	adds	r4, #1
 80074c0:	b2a4      	uxth	r4, r4
 80074c2:	42a3      	cmp	r3, r4
 80074c4:	f8ab 401a 	strh.w	r4, [fp, #26]
 80074c8:	f63f af7f 	bhi.w	80073ca <ai_platform_network_process+0x30e>
 80074cc:	4620      	mov	r0, r4
 80074ce:	b005      	add	sp, #20
 80074d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d4:	2a01      	cmp	r2, #1
 80074d6:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80074d8:	d033      	beq.n	8007542 <ai_platform_network_process+0x486>
 80074da:	f106 070c 	add.w	r7, r6, #12
 80074de:	e770      	b.n	80073c2 <ai_platform_network_process+0x306>
 80074e0:	9d03      	ldr	r5, [sp, #12]
 80074e2:	2219      	movs	r2, #25
 80074e4:	2112      	movs	r1, #18
 80074e6:	2400      	movs	r4, #0
 80074e8:	f105 000c 	add.w	r0, r5, #12
 80074ec:	f000 f884 	bl	80075f8 <core_set_error>
 80074f0:	e725      	b.n	800733e <ai_platform_network_process+0x282>
 80074f2:	9d03      	ldr	r5, [sp, #12]
 80074f4:	4604      	mov	r4, r0
 80074f6:	2221      	movs	r2, #33	; 0x21
 80074f8:	2112      	movs	r1, #18
 80074fa:	f105 000c 	add.w	r0, r5, #12
 80074fe:	f000 f87b 	bl	80075f8 <core_set_error>
 8007502:	e71c      	b.n	800733e <ai_platform_network_process+0x282>
 8007504:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007508:	832b      	strh	r3, [r5, #24]
 800750a:	e755      	b.n	80073b8 <ai_platform_network_process+0x2fc>
 800750c:	9d02      	ldr	r5, [sp, #8]
 800750e:	2219      	movs	r2, #25
 8007510:	2113      	movs	r1, #19
 8007512:	2400      	movs	r4, #0
 8007514:	f105 000c 	add.w	r0, r5, #12
 8007518:	f000 f86e 	bl	80075f8 <core_set_error>
 800751c:	e70f      	b.n	800733e <ai_platform_network_process+0x282>
 800751e:	9d02      	ldr	r5, [sp, #8]
 8007520:	4604      	mov	r4, r0
 8007522:	2221      	movs	r2, #33	; 0x21
 8007524:	2113      	movs	r1, #19
 8007526:	f105 000c 	add.w	r0, r5, #12
 800752a:	f000 f865 	bl	80075f8 <core_set_error>
 800752e:	e706      	b.n	800733e <ai_platform_network_process+0x282>
 8007530:	9d02      	ldr	r5, [sp, #8]
 8007532:	2217      	movs	r2, #23
 8007534:	2113      	movs	r1, #19
 8007536:	2400      	movs	r4, #0
 8007538:	f105 000c 	add.w	r0, r5, #12
 800753c:	f000 f85c 	bl	80075f8 <core_set_error>
 8007540:	e6fd      	b.n	800733e <ai_platform_network_process+0x282>
 8007542:	2700      	movs	r7, #0
 8007544:	e73d      	b.n	80073c2 <ai_platform_network_process+0x306>
 8007546:	bf00      	nop

08007548 <ai_platform_observer_register_s>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4b18      	ldr	r3, [pc, #96]	; (80075ac <ai_platform_observer_register_s+0x64>)
 800754c:	6802      	ldr	r2, [r0, #0]
 800754e:	4393      	bics	r3, r2
 8007550:	d12a      	bne.n	80075a8 <ai_platform_observer_register_s+0x60>
 8007552:	4684      	mov	ip, r0
 8007554:	460d      	mov	r5, r1
 8007556:	b301      	cbz	r1, 800759a <ai_platform_observer_register_s+0x52>
 8007558:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800755a:	b9bb      	cbnz	r3, 800758c <ai_platform_observer_register_s+0x44>
 800755c:	81cb      	strh	r3, [r1, #14]
 800755e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8007560:	e006      	b.n	8007570 <ai_platform_observer_register_s+0x28>
 8007562:	b29b      	uxth	r3, r3
 8007564:	81eb      	strh	r3, [r5, #14]
 8007566:	6914      	ldr	r4, [r2, #16]
 8007568:	4294      	cmp	r4, r2
 800756a:	4622      	mov	r2, r4
 800756c:	d003      	beq.n	8007576 <ai_platform_observer_register_s+0x2e>
 800756e:	b114      	cbz	r4, 8007576 <ai_platform_observer_register_s+0x2e>
 8007570:	3301      	adds	r3, #1
 8007572:	2a00      	cmp	r2, #0
 8007574:	d1f5      	bne.n	8007562 <ai_platform_observer_register_s+0x1a>
 8007576:	7a2b      	ldrb	r3, [r5, #8]
 8007578:	2100      	movs	r1, #0
 800757a:	4a0d      	ldr	r2, [pc, #52]	; (80075b0 <ai_platform_observer_register_s+0x68>)
 800757c:	2001      	movs	r0, #1
 800757e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007582:	81a9      	strh	r1, [r5, #12]
 8007584:	60ab      	str	r3, [r5, #8]
 8007586:	e9cc 2510 	strd	r2, r5, [ip, #64]	; 0x40
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	2240      	movs	r2, #64	; 0x40
 800758e:	2111      	movs	r1, #17
 8007590:	300c      	adds	r0, #12
 8007592:	f000 f831 	bl	80075f8 <core_set_error>
 8007596:	2000      	movs	r0, #0
 8007598:	bd38      	pop	{r3, r4, r5, pc}
 800759a:	2211      	movs	r2, #17
 800759c:	2110      	movs	r1, #16
 800759e:	300c      	adds	r0, #12
 80075a0:	f000 f82a 	bl	80075f8 <core_set_error>
 80075a4:	4628      	mov	r0, r5
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	2000      	movs	r0, #0
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	a1c00100 	.word	0xa1c00100
 80075b0:	08006759 	.word	0x08006759

080075b4 <ai_platform_observer_unregister_s>:
 80075b4:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <ai_platform_observer_unregister_s+0x30>)
 80075b6:	b510      	push	{r4, lr}
 80075b8:	6802      	ldr	r2, [r0, #0]
 80075ba:	4393      	bics	r3, r2
 80075bc:	d10e      	bne.n	80075dc <ai_platform_observer_unregister_s+0x28>
 80075be:	460c      	mov	r4, r1
 80075c0:	b129      	cbz	r1, 80075ce <ai_platform_observer_unregister_s+0x1a>
 80075c2:	2300      	movs	r3, #0
 80075c4:	2401      	movs	r4, #1
 80075c6:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
 80075ca:	4620      	mov	r0, r4
 80075cc:	bd10      	pop	{r4, pc}
 80075ce:	2211      	movs	r2, #17
 80075d0:	2110      	movs	r1, #16
 80075d2:	300c      	adds	r0, #12
 80075d4:	f000 f810 	bl	80075f8 <core_set_error>
 80075d8:	4620      	mov	r0, r4
 80075da:	bd10      	pop	{r4, pc}
 80075dc:	2400      	movs	r4, #0
 80075de:	4620      	mov	r0, r4
 80075e0:	bd10      	pop	{r4, pc}
 80075e2:	bf00      	nop
 80075e4:	a1c00100 	.word	0xa1c00100

080075e8 <core_init>:
 80075e8:	2001      	movs	r0, #1
 80075ea:	4770      	bx	lr

080075ec <core_get_error>:
 80075ec:	4603      	mov	r3, r0
 80075ee:	2200      	movs	r2, #0
 80075f0:	6800      	ldr	r0, [r0, #0]
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop

080075f8 <core_set_error>:
 80075f8:	4603      	mov	r3, r0
 80075fa:	7800      	ldrb	r0, [r0, #0]
 80075fc:	b108      	cbz	r0, 8007602 <core_set_error+0xa>
 80075fe:	2000      	movs	r0, #0
 8007600:	4770      	bx	lr
 8007602:	7019      	strb	r1, [r3, #0]
 8007604:	2001      	movs	r0, #1
 8007606:	6819      	ldr	r1, [r3, #0]
 8007608:	f362 211f 	bfi	r1, r2, #8, #24
 800760c:	6019      	str	r1, [r3, #0]
 800760e:	4770      	bx	lr

08007610 <ai_check_custom_types>:
 8007610:	b082      	sub	sp, #8
 8007612:	4b12      	ldr	r3, [pc, #72]	; (800765c <ai_check_custom_types+0x4c>)
 8007614:	9301      	str	r3, [sp, #4]
 8007616:	b118      	cbz	r0, 8007620 <ai_check_custom_types+0x10>
 8007618:	7803      	ldrb	r3, [r0, #0]
 800761a:	2b03      	cmp	r3, #3
 800761c:	d002      	beq.n	8007624 <ai_check_custom_types+0x14>
 800761e:	2000      	movs	r0, #0
 8007620:	b002      	add	sp, #8
 8007622:	4770      	bx	lr
 8007624:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007628:	4293      	cmp	r3, r2
 800762a:	d004      	beq.n	8007636 <ai_check_custom_types+0x26>
 800762c:	2001      	movs	r0, #1
 800762e:	f080 0001 	eor.w	r0, r0, #1
 8007632:	b002      	add	sp, #8
 8007634:	4770      	bx	lr
 8007636:	7842      	ldrb	r2, [r0, #1]
 8007638:	3001      	adds	r0, #1
 800763a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800763e:	429a      	cmp	r2, r3
 8007640:	d1f4      	bne.n	800762c <ai_check_custom_types+0x1c>
 8007642:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007646:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800764a:	429a      	cmp	r2, r3
 800764c:	d1ee      	bne.n	800762c <ai_check_custom_types+0x1c>
 800764e:	7842      	ldrb	r2, [r0, #1]
 8007650:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007654:	429a      	cmp	r2, r3
 8007656:	d1e9      	bne.n	800762c <ai_check_custom_types+0x1c>
 8007658:	2000      	movs	r0, #0
 800765a:	e7e8      	b.n	800762e <ai_check_custom_types+0x1e>
 800765c:	84048403 	.word	0x84048403

08007660 <ai_layers_init_all>:
 8007660:	2100      	movs	r1, #0
 8007662:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007664:	b13b      	cbz	r3, 8007676 <ai_layers_init_all+0x16>
 8007666:	691a      	ldr	r2, [r3, #16]
 8007668:	3101      	adds	r1, #1
 800766a:	60d8      	str	r0, [r3, #12]
 800766c:	429a      	cmp	r2, r3
 800766e:	4613      	mov	r3, r2
 8007670:	d001      	beq.n	8007676 <ai_layers_init_all+0x16>
 8007672:	2a00      	cmp	r2, #0
 8007674:	d1f6      	bne.n	8007664 <ai_layers_init_all+0x4>
 8007676:	4608      	mov	r0, r1
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop

0800767c <ai_layers_post_init_all>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	2500      	movs	r5, #0
 8007680:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007682:	b16c      	cbz	r4, 80076a0 <ai_layers_post_init_all+0x24>
 8007684:	6863      	ldr	r3, [r4, #4]
 8007686:	07db      	lsls	r3, r3, #31
 8007688:	d504      	bpl.n	8007694 <ai_layers_post_init_all+0x18>
 800768a:	6a23      	ldr	r3, [r4, #32]
 800768c:	4620      	mov	r0, r4
 800768e:	b10b      	cbz	r3, 8007694 <ai_layers_post_init_all+0x18>
 8007690:	3501      	adds	r5, #1
 8007692:	4798      	blx	r3
 8007694:	6923      	ldr	r3, [r4, #16]
 8007696:	42a3      	cmp	r3, r4
 8007698:	461c      	mov	r4, r3
 800769a:	d001      	beq.n	80076a0 <ai_layers_post_init_all+0x24>
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1f0      	bne.n	8007682 <ai_layers_post_init_all+0x6>
 80076a0:	4628      	mov	r0, r5
 80076a2:	bd38      	pop	{r3, r4, r5, pc}

080076a4 <ai_layers_forward_all>:
 80076a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a8:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 80076ac:	4604      	mov	r4, r0
 80076ae:	f1b8 0f00 	cmp.w	r8, #0
 80076b2:	d02a      	beq.n	800770a <ai_layers_forward_all+0x66>
 80076b4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80076b6:	63c1      	str	r1, [r0, #60]	; 0x3c
 80076b8:	b319      	cbz	r1, 8007702 <ai_layers_forward_all+0x5e>
 80076ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80076bc:	2001      	movs	r0, #1
 80076be:	47c0      	blx	r8
 80076c0:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 80076c2:	b1f6      	cbz	r6, 8007702 <ai_layers_forward_all+0x5e>
 80076c4:	2700      	movs	r7, #0
 80076c6:	4631      	mov	r1, r6
 80076c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80076ca:	2002      	movs	r0, #2
 80076cc:	47c0      	blx	r8
 80076ce:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80076d0:	4628      	mov	r0, r5
 80076d2:	696b      	ldr	r3, [r5, #20]
 80076d4:	4798      	blx	r3
 80076d6:	692e      	ldr	r6, [r5, #16]
 80076d8:	2003      	movs	r0, #3
 80076da:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80076dc:	42b5      	cmp	r5, r6
 80076de:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80076e0:	d007      	beq.n	80076f2 <ai_layers_forward_all+0x4e>
 80076e2:	47c0      	blx	r8
 80076e4:	3701      	adds	r7, #1
 80076e6:	63e6      	str	r6, [r4, #60]	; 0x3c
 80076e8:	2e00      	cmp	r6, #0
 80076ea:	d1ec      	bne.n	80076c6 <ai_layers_forward_all+0x22>
 80076ec:	4638      	mov	r0, r7
 80076ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f2:	2003      	movs	r0, #3
 80076f4:	3701      	adds	r7, #1
 80076f6:	47c0      	blx	r8
 80076f8:	2300      	movs	r3, #0
 80076fa:	4638      	mov	r0, r7
 80076fc:	63e3      	str	r3, [r4, #60]	; 0x3c
 80076fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007702:	2700      	movs	r7, #0
 8007704:	4638      	mov	r0, r7
 8007706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800770a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800770c:	63c5      	str	r5, [r0, #60]	; 0x3c
 800770e:	2d00      	cmp	r5, #0
 8007710:	d0f7      	beq.n	8007702 <ai_layers_forward_all+0x5e>
 8007712:	4647      	mov	r7, r8
 8007714:	696b      	ldr	r3, [r5, #20]
 8007716:	4628      	mov	r0, r5
 8007718:	4798      	blx	r3
 800771a:	462b      	mov	r3, r5
 800771c:	692d      	ldr	r5, [r5, #16]
 800771e:	429d      	cmp	r5, r3
 8007720:	d004      	beq.n	800772c <ai_layers_forward_all+0x88>
 8007722:	3701      	adds	r7, #1
 8007724:	63e5      	str	r5, [r4, #60]	; 0x3c
 8007726:	2d00      	cmp	r5, #0
 8007728:	d1f4      	bne.n	8007714 <ai_layers_forward_all+0x70>
 800772a:	e7df      	b.n	80076ec <ai_layers_forward_all+0x48>
 800772c:	2300      	movs	r3, #0
 800772e:	3701      	adds	r7, #1
 8007730:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007732:	e7db      	b.n	80076ec <ai_layers_forward_all+0x48>

08007734 <ai_layers_destroy_all>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	2500      	movs	r5, #0
 8007738:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800773a:	b16c      	cbz	r4, 8007758 <ai_layers_destroy_all+0x24>
 800773c:	6863      	ldr	r3, [r4, #4]
 800773e:	075b      	lsls	r3, r3, #29
 8007740:	d504      	bpl.n	800774c <ai_layers_destroy_all+0x18>
 8007742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007744:	4620      	mov	r0, r4
 8007746:	b10b      	cbz	r3, 800774c <ai_layers_destroy_all+0x18>
 8007748:	3501      	adds	r5, #1
 800774a:	4798      	blx	r3
 800774c:	6923      	ldr	r3, [r4, #16]
 800774e:	42a3      	cmp	r3, r4
 8007750:	461c      	mov	r4, r3
 8007752:	d001      	beq.n	8007758 <ai_layers_destroy_all+0x24>
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1f0      	bne.n	800773a <ai_layers_destroy_all+0x6>
 8007758:	4628      	mov	r0, r5
 800775a:	bd38      	pop	{r3, r4, r5, pc}

0800775c <forward_conv2d_if32of32wf32>:
 800775c:	6983      	ldr	r3, [r0, #24]
 800775e:	881a      	ldrh	r2, [r3, #0]
 8007760:	2a00      	cmp	r2, #0
 8007762:	f000 80b4 	beq.w	80078ce <forward_conv2d_if32of32wf32+0x172>
 8007766:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776a:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800776e:	b0a3      	sub	sp, #140	; 0x8c
 8007770:	4607      	mov	r7, r0
 8007772:	f8de 3004 	ldr.w	r3, [lr, #4]
 8007776:	b103      	cbz	r3, 800777a <forward_conv2d_if32of32wf32+0x1e>
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2a01      	cmp	r2, #1
 800777c:	f000 80e1 	beq.w	8007942 <forward_conv2d_if32of32wf32+0x1e6>
 8007780:	f8de 0010 	ldr.w	r0, [lr, #16]
 8007784:	b100      	cbz	r0, 8007788 <forward_conv2d_if32of32wf32+0x2c>
 8007786:	6800      	ldr	r0, [r0, #0]
 8007788:	2a02      	cmp	r2, #2
 800778a:	f000 80a2 	beq.w	80078d2 <forward_conv2d_if32of32wf32+0x176>
 800778e:	f8de 501c 	ldr.w	r5, [lr, #28]
 8007792:	2d00      	cmp	r5, #0
 8007794:	f000 80ce 	beq.w	8007934 <forward_conv2d_if32of32wf32+0x1d8>
 8007798:	f8be 1018 	ldrh.w	r1, [lr, #24]
 800779c:	682c      	ldr	r4, [r5, #0]
 800779e:	2901      	cmp	r1, #1
 80077a0:	f240 80ca 	bls.w	8007938 <forward_conv2d_if32of32wf32+0x1dc>
 80077a4:	686d      	ldr	r5, [r5, #4]
 80077a6:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80077aa:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80077ae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80077b2:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 80077b4:	9113      	str	r1, [sp, #76]	; 0x4c
 80077b6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	9115      	str	r1, [sp, #84]	; 0x54
 80077be:	f8d9 100c 	ldr.w	r1, [r9, #12]
 80077c2:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80077c6:	9116      	str	r1, [sp, #88]	; 0x58
 80077c8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80077cc:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80077d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80077d2:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80077d6:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80077da:	9118      	str	r1, [sp, #96]	; 0x60
 80077dc:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80077e0:	9119      	str	r1, [sp, #100]	; 0x64
 80077e2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80077e4:	911a      	str	r1, [sp, #104]	; 0x68
 80077e6:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80077e8:	911b      	str	r1, [sp, #108]	; 0x6c
 80077ea:	69f9      	ldr	r1, [r7, #28]
 80077ec:	9120      	str	r1, [sp, #128]	; 0x80
 80077ee:	8831      	ldrh	r1, [r6, #0]
 80077f0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80077f4:	911c      	str	r1, [sp, #112]	; 0x70
 80077f6:	88b1      	ldrh	r1, [r6, #4]
 80077f8:	911d      	str	r1, [sp, #116]	; 0x74
 80077fa:	b299      	uxth	r1, r3
 80077fc:	911e      	str	r1, [sp, #120]	; 0x78
 80077fe:	b2a1      	uxth	r1, r4
 8007800:	911f      	str	r1, [sp, #124]	; 0x7c
 8007802:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007806:	e9da 7601 	ldrd	r7, r6, [sl, #4]
 800780a:	b10d      	cbz	r5, 8007810 <forward_conv2d_if32of32wf32+0xb4>
 800780c:	69ad      	ldr	r5, [r5, #24]
 800780e:	68ad      	ldr	r5, [r5, #8]
 8007810:	6980      	ldr	r0, [r0, #24]
 8007812:	b2a4      	uxth	r4, r4
 8007814:	b29b      	uxth	r3, r3
 8007816:	2a03      	cmp	r2, #3
 8007818:	f104 34ff 	add.w	r4, r4, #4294967295
 800781c:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8007820:	f106 30ff 	add.w	r0, r6, #4294967295
 8007824:	f103 33ff 	add.w	r3, r3, #4294967295
 8007828:	fb00 6404 	mla	r4, r0, r4, r6
 800782c:	f107 30ff 	add.w	r0, r7, #4294967295
 8007830:	fb00 7303 	mla	r3, r0, r3, r7
 8007834:	9314      	str	r3, [sp, #80]	; 0x50
 8007836:	f000 8081 	beq.w	800793c <forward_conv2d_if32of32wf32+0x1e0>
 800783a:	f8de 3028 	ldr.w	r3, [lr, #40]	; 0x28
 800783e:	2b00      	cmp	r3, #0
 8007840:	d04a      	beq.n	80078d8 <forward_conv2d_if32of32wf32+0x17c>
 8007842:	f8d3 8000 	ldr.w	r8, [r3]
 8007846:	f1b8 0f00 	cmp.w	r8, #0
 800784a:	d003      	beq.n	8007854 <forward_conv2d_if32of32wf32+0xf8>
 800784c:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8007850:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8007854:	6858      	ldr	r0, [r3, #4]
 8007856:	2800      	cmp	r0, #0
 8007858:	d03f      	beq.n	80078da <forward_conv2d_if32of32wf32+0x17e>
 800785a:	6983      	ldr	r3, [r0, #24]
 800785c:	f46f 7288 	mvn.w	r2, #272	; 0x110
 8007860:	f8dc e000 	ldr.w	lr, [ip]
 8007864:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8007868:	f3ce 4343 	ubfx	r3, lr, #17, #4
 800786c:	fa42 f303 	asr.w	r3, r2, r3
 8007870:	07db      	lsls	r3, r3, #31
 8007872:	d553      	bpl.n	800791c <forward_conv2d_if32of32wf32+0x1c0>
 8007874:	f1b9 0f00 	cmp.w	r9, #0
 8007878:	bf18      	it	ne
 800787a:	4649      	movne	r1, r9
 800787c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800787e:	460a      	mov	r2, r1
 8007880:	940d      	str	r4, [sp, #52]	; 0x34
 8007882:	4651      	mov	r1, sl
 8007884:	930c      	str	r3, [sp, #48]	; 0x30
 8007886:	4658      	mov	r0, fp
 8007888:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800788a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800788c:	930b      	str	r3, [sp, #44]	; 0x2c
 800788e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007890:	9707      	str	r7, [sp, #28]
 8007892:	930a      	str	r3, [sp, #40]	; 0x28
 8007894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007896:	940e      	str	r4, [sp, #56]	; 0x38
 8007898:	e9cd 6308 	strd	r6, r3, [sp, #32]
 800789c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800789e:	9306      	str	r3, [sp, #24]
 80078a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078a2:	9305      	str	r3, [sp, #20]
 80078a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80078a6:	9304      	str	r3, [sp, #16]
 80078a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078aa:	9303      	str	r3, [sp, #12]
 80078ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078ae:	9302      	str	r3, [sp, #8]
 80078b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078b2:	e9cd 8300 	strd	r8, r3, [sp]
 80078b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80078b8:	9311      	str	r3, [sp, #68]	; 0x44
 80078ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80078bc:	9310      	str	r3, [sp, #64]	; 0x40
 80078be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80078c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80078c2:	462b      	mov	r3, r5
 80078c4:	f000 fb6a 	bl	8007f9c <forward_lite_conv2d_if32of32wf32>
 80078c8:	b023      	add	sp, #140	; 0x8c
 80078ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ce:	6853      	ldr	r3, [r2, #4]
 80078d0:	deff      	udf	#255	; 0xff
 80078d2:	2300      	movs	r3, #0
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	deff      	udf	#255	; 0xff
 80078d8:	4698      	mov	r8, r3
 80078da:	f8dc e000 	ldr.w	lr, [ip]
 80078de:	f46f 7088 	mvn.w	r0, #272	; 0x110
 80078e2:	f3ce 4343 	ubfx	r3, lr, #17, #4
 80078e6:	4118      	asrs	r0, r3
 80078e8:	f010 0001 	ands.w	r0, r0, #1
 80078ec:	d1c6      	bne.n	800787c <forward_conv2d_if32of32wf32+0x120>
 80078ee:	f3ce 13c6 	ubfx	r3, lr, #7, #7
 80078f2:	f3ce 5e41 	ubfx	lr, lr, #21, #2
 80078f6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80078fa:	fa43 f30e 	asr.w	r3, r3, lr
 80078fe:	b29b      	uxth	r3, r3
 8007900:	2a00      	cmp	r2, #0
 8007902:	d0bb      	beq.n	800787c <forward_conv2d_if32of32wf32+0x120>
 8007904:	4681      	mov	r9, r0
 8007906:	6980      	ldr	r0, [r0, #24]
 8007908:	9121      	str	r1, [sp, #132]	; 0x84
 800790a:	6840      	ldr	r0, [r0, #4]
 800790c:	9001      	str	r0, [sp, #4]
 800790e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007910:	9000      	str	r0, [sp, #0]
 8007912:	4648      	mov	r0, r9
 8007914:	f001 f8dc 	bl	8008ad0 <lite_decompress_ilutof32>
 8007918:	9921      	ldr	r1, [sp, #132]	; 0x84
 800791a:	e7ab      	b.n	8007874 <forward_conv2d_if32of32wf32+0x118>
 800791c:	f3ce 13c6 	ubfx	r3, lr, #7, #7
 8007920:	f3ce 5e41 	ubfx	lr, lr, #21, #2
 8007924:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8007928:	fa43 f30e 	asr.w	r3, r3, lr
 800792c:	b29b      	uxth	r3, r3
 800792e:	2a00      	cmp	r2, #0
 8007930:	d0a0      	beq.n	8007874 <forward_conv2d_if32of32wf32+0x118>
 8007932:	e7e8      	b.n	8007906 <forward_conv2d_if32of32wf32+0x1aa>
 8007934:	462c      	mov	r4, r5
 8007936:	e736      	b.n	80077a6 <forward_conv2d_if32of32wf32+0x4a>
 8007938:	2500      	movs	r5, #0
 800793a:	e734      	b.n	80077a6 <forward_conv2d_if32of32wf32+0x4a>
 800793c:	2300      	movs	r3, #0
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	deff      	udf	#255	; 0xff
 8007942:	2300      	movs	r3, #0
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	deff      	udf	#255	; 0xff

08007948 <forward_dw_if32of32wf32>:
 8007948:	6982      	ldr	r2, [r0, #24]
 800794a:	8813      	ldrh	r3, [r2, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 809d 	beq.w	8007a8c <forward_dw_if32of32wf32+0x144>
 8007952:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8007956:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800795a:	b101      	cbz	r1, 800795e <forward_dw_if32of32wf32+0x16>
 800795c:	6809      	ldr	r1, [r1, #0]
 800795e:	2b01      	cmp	r3, #1
 8007960:	f000 80b7 	beq.w	8007ad2 <forward_dw_if32of32wf32+0x18a>
 8007964:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8007968:	b102      	cbz	r2, 800796c <forward_dw_if32of32wf32+0x24>
 800796a:	6812      	ldr	r2, [r2, #0]
 800796c:	2b02      	cmp	r3, #2
 800796e:	f000 808f 	beq.w	8007a90 <forward_dw_if32of32wf32+0x148>
 8007972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007976:	f8dc 601c 	ldr.w	r6, [ip, #28]
 800797a:	b0a1      	sub	sp, #132	; 0x84
 800797c:	2e00      	cmp	r6, #0
 800797e:	f000 80a2 	beq.w	8007ac6 <forward_dw_if32of32wf32+0x17e>
 8007982:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 8007986:	6834      	ldr	r4, [r6, #0]
 8007988:	2d01      	cmp	r5, #1
 800798a:	f240 809e 	bls.w	8007aca <forward_dw_if32of32wf32+0x182>
 800798e:	6876      	ldr	r6, [r6, #4]
 8007990:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8007994:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8007998:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800799c:	6989      	ldr	r1, [r1, #24]
 800799e:	9713      	str	r7, [sp, #76]	; 0x4c
 80079a0:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80079a4:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 80079a8:	9714      	str	r7, [sp, #80]	; 0x50
 80079aa:	f8d9 700c 	ldr.w	r7, [r9, #12]
 80079ae:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80079b2:	9715      	str	r7, [sp, #84]	; 0x54
 80079b4:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80079b8:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80079bc:	9716      	str	r7, [sp, #88]	; 0x58
 80079be:	f8d8 700c 	ldr.w	r7, [r8, #12]
 80079c2:	69a1      	ldr	r1, [r4, #24]
 80079c4:	9717      	str	r7, [sp, #92]	; 0x5c
 80079c6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80079ca:	9718      	str	r7, [sp, #96]	; 0x60
 80079cc:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 80079ce:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 80079d2:	9719      	str	r7, [sp, #100]	; 0x64
 80079d4:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 80079d6:	69c0      	ldr	r0, [r0, #28]
 80079d8:	971a      	str	r7, [sp, #104]	; 0x68
 80079da:	901f      	str	r0, [sp, #124]	; 0x7c
 80079dc:	f8be 0000 	ldrh.w	r0, [lr]
 80079e0:	901b      	str	r0, [sp, #108]	; 0x6c
 80079e2:	f8be 0004 	ldrh.w	r0, [lr, #4]
 80079e6:	901c      	str	r0, [sp, #112]	; 0x70
 80079e8:	b2a8      	uxth	r0, r5
 80079ea:	901d      	str	r0, [sp, #116]	; 0x74
 80079ec:	b2a0      	uxth	r0, r4
 80079ee:	901e      	str	r0, [sp, #120]	; 0x78
 80079f0:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80079f4:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 80079f8:	b10e      	cbz	r6, 80079fe <forward_dw_if32of32wf32+0xb6>
 80079fa:	69b0      	ldr	r0, [r6, #24]
 80079fc:	6886      	ldr	r6, [r0, #8]
 80079fe:	6992      	ldr	r2, [r2, #24]
 8007a00:	b2a4      	uxth	r4, r4
 8007a02:	b2ad      	uxth	r5, r5
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	f104 34ff 	add.w	r4, r4, #4294967295
 8007a0a:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8007a0e:	f108 32ff 	add.w	r2, r8, #4294967295
 8007a12:	f105 35ff 	add.w	r5, r5, #4294967295
 8007a16:	fb02 8404 	mla	r4, r2, r4, r8
 8007a1a:	f107 32ff 	add.w	r2, r7, #4294967295
 8007a1e:	fb02 7505 	mla	r5, r2, r5, r7
 8007a22:	d059      	beq.n	8007ad8 <forward_dw_if32of32wf32+0x190>
 8007a24:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8007a28:	b102      	cbz	r2, 8007a2c <forward_dw_if32of32wf32+0xe4>
 8007a2a:	6812      	ldr	r2, [r2, #0]
 8007a2c:	6808      	ldr	r0, [r1, #0]
 8007a2e:	f46f 7388 	mvn.w	r3, #272	; 0x110
 8007a32:	f3c0 4c43 	ubfx	ip, r0, #17, #4
 8007a36:	fa43 f30c 	asr.w	r3, r3, ip
 8007a3a:	07db      	lsls	r3, r3, #31
 8007a3c:	d52b      	bpl.n	8007a96 <forward_dw_if32of32wf32+0x14e>
 8007a3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a40:	464a      	mov	r2, r9
 8007a42:	940c      	str	r4, [sp, #48]	; 0x30
 8007a44:	4651      	mov	r1, sl
 8007a46:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007a48:	4658      	mov	r0, fp
 8007a4a:	9706      	str	r7, [sp, #24]
 8007a4c:	940f      	str	r4, [sp, #60]	; 0x3c
 8007a4e:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
 8007a52:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007a54:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a58:	930a      	str	r3, [sp, #40]	; 0x28
 8007a5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007a60:	e9cd 8307 	strd	r8, r3, [sp, #28]
 8007a64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a66:	9305      	str	r3, [sp, #20]
 8007a68:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a6a:	9304      	str	r3, [sp, #16]
 8007a6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a6e:	9303      	str	r3, [sp, #12]
 8007a70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007a72:	9302      	str	r3, [sp, #8]
 8007a74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a7e:	9310      	str	r3, [sp, #64]	; 0x40
 8007a80:	4633      	mov	r3, r6
 8007a82:	f000 fd57 	bl	8008534 <forward_lite_dw_if32of32wf32>
 8007a86:	b021      	add	sp, #132	; 0x84
 8007a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	deff      	udf	#255	; 0xff
 8007a90:	2300      	movs	r3, #0
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	deff      	udf	#255	; 0xff
 8007a96:	68cb      	ldr	r3, [r1, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0d0      	beq.n	8007a3e <forward_dw_if32of32wf32+0xf6>
 8007a9c:	b1ba      	cbz	r2, 8007ace <forward_dw_if32of32wf32+0x186>
 8007a9e:	6991      	ldr	r1, [r2, #24]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8007aa6:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8007aaa:	4103      	asrs	r3, r0
 8007aac:	e9d1 1001 	ldrd	r1, r0, [r1, #4]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	9101      	str	r1, [sp, #4]
 8007ab4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ab6:	9100      	str	r1, [sp, #0]
 8007ab8:	4649      	mov	r1, r9
 8007aba:	2800      	cmp	r0, #0
 8007abc:	bf18      	it	ne
 8007abe:	4681      	movne	r9, r0
 8007ac0:	f001 f806 	bl	8008ad0 <lite_decompress_ilutof32>
 8007ac4:	e7bb      	b.n	8007a3e <forward_dw_if32of32wf32+0xf6>
 8007ac6:	4634      	mov	r4, r6
 8007ac8:	e762      	b.n	8007990 <forward_dw_if32of32wf32+0x48>
 8007aca:	2600      	movs	r6, #0
 8007acc:	e760      	b.n	8007990 <forward_dw_if32of32wf32+0x48>
 8007ace:	6993      	ldr	r3, [r2, #24]
 8007ad0:	deff      	udf	#255	; 0xff
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	deff      	udf	#255	; 0xff
 8007ad8:	2300      	movs	r3, #0
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	deff      	udf	#255	; 0xff
 8007ade:	bf00      	nop

08007ae0 <forward_dense>:
 8007ae0:	6982      	ldr	r2, [r0, #24]
 8007ae2:	8813      	ldrh	r3, [r2, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d043      	beq.n	8007b70 <forward_dense+0x90>
 8007ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aec:	6855      	ldr	r5, [r2, #4]
 8007aee:	b08e      	sub	sp, #56	; 0x38
 8007af0:	6869      	ldr	r1, [r5, #4]
 8007af2:	b101      	cbz	r1, 8007af6 <forward_dense+0x16>
 8007af4:	6809      	ldr	r1, [r1, #0]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d069      	beq.n	8007bce <forward_dense+0xee>
 8007afa:	692a      	ldr	r2, [r5, #16]
 8007afc:	b102      	cbz	r2, 8007b00 <forward_dense+0x20>
 8007afe:	6812      	ldr	r2, [r2, #0]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d061      	beq.n	8007bc8 <forward_dense+0xe8>
 8007b04:	69ec      	ldr	r4, [r5, #28]
 8007b06:	2c00      	cmp	r4, #0
 8007b08:	d057      	beq.n	8007bba <forward_dense+0xda>
 8007b0a:	8b2e      	ldrh	r6, [r5, #24]
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	2e01      	cmp	r6, #1
 8007b10:	d955      	bls.n	8007bbe <forward_dense+0xde>
 8007b12:	6864      	ldr	r4, [r4, #4]
 8007b14:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8007b18:	2b03      	cmp	r3, #3
 8007b1a:	68d0      	ldr	r0, [r2, #12]
 8007b1c:	68cf      	ldr	r7, [r1, #12]
 8007b1e:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007b22:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8007b26:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8007b2a:	f8d9 0000 	ldr.w	r0, [r9]
 8007b2e:	fb06 f807 	mul.w	r8, r6, r7
 8007b32:	f020 4c7e 	bic.w	ip, r0, #4261412864	; 0xfe000000
 8007b36:	d044      	beq.n	8007bc2 <forward_dense+0xe2>
 8007b38:	6aad      	ldr	r5, [r5, #40]	; 0x28
 8007b3a:	b11d      	cbz	r5, 8007b44 <forward_dense+0x64>
 8007b3c:	682d      	ldr	r5, [r5, #0]
 8007b3e:	b10d      	cbz	r5, 8007b44 <forward_dense+0x64>
 8007b40:	69ab      	ldr	r3, [r5, #24]
 8007b42:	689d      	ldr	r5, [r3, #8]
 8007b44:	6992      	ldr	r2, [r2, #24]
 8007b46:	698b      	ldr	r3, [r1, #24]
 8007b48:	6890      	ldr	r0, [r2, #8]
 8007b4a:	6899      	ldr	r1, [r3, #8]
 8007b4c:	b10c      	cbz	r4, 8007b52 <forward_dense+0x72>
 8007b4e:	69a3      	ldr	r3, [r4, #24]
 8007b50:	689c      	ldr	r4, [r3, #8]
 8007b52:	4b20      	ldr	r3, [pc, #128]	; (8007bd4 <forward_dense+0xf4>)
 8007b54:	459c      	cmp	ip, r3
 8007b56:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8007b5a:	d023      	beq.n	8007ba4 <forward_dense+0xc4>
 8007b5c:	4e1e      	ldr	r6, [pc, #120]	; (8007bd8 <forward_dense+0xf8>)
 8007b5e:	45b4      	cmp	ip, r6
 8007b60:	d015      	beq.n	8007b8e <forward_dense+0xae>
 8007b62:	f5a3 039c 	sub.w	r3, r3, #5111808	; 0x4e0000
 8007b66:	459c      	cmp	ip, r3
 8007b68:	d004      	beq.n	8007b74 <forward_dense+0x94>
 8007b6a:	b00e      	add	sp, #56	; 0x38
 8007b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	deff      	udf	#255	; 0xff
 8007b74:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8007b78:	a807      	add	r0, sp, #28
 8007b7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b7c:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 8007b80:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
 8007b84:	f000 fffc 	bl	8008b80 <forward_lite_dense_if32of32wf32>
 8007b88:	b00e      	add	sp, #56	; 0x38
 8007b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b8e:	464b      	mov	r3, r9
 8007b90:	9500      	str	r5, [sp, #0]
 8007b92:	e9cd e803 	strd	lr, r8, [sp, #12]
 8007b96:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8007b9a:	f001 f94f 	bl	8008e3c <forward_lite_dense_if32of32wf32_lut4>
 8007b9e:	b00e      	add	sp, #56	; 0x38
 8007ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba4:	464b      	mov	r3, r9
 8007ba6:	9500      	str	r5, [sp, #0]
 8007ba8:	e9cd e803 	strd	lr, r8, [sp, #12]
 8007bac:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8007bb0:	f001 fa6e 	bl	8009090 <forward_lite_dense_if32of32wf32_lut8>
 8007bb4:	b00e      	add	sp, #56	; 0x38
 8007bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bba:	4620      	mov	r0, r4
 8007bbc:	e7aa      	b.n	8007b14 <forward_dense+0x34>
 8007bbe:	2400      	movs	r4, #0
 8007bc0:	e7a8      	b.n	8007b14 <forward_dense+0x34>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	deff      	udf	#255	; 0xff
 8007bc8:	2300      	movs	r3, #0
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	deff      	udf	#255	; 0xff
 8007bce:	2300      	movs	r3, #0
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	deff      	udf	#255	; 0xff
 8007bd4:	01d01040 	.word	0x01d01040
 8007bd8:	01e81040 	.word	0x01e81040

08007bdc <forward_relu>:
 8007bdc:	6982      	ldr	r2, [r0, #24]
 8007bde:	8813      	ldrh	r3, [r2, #0]
 8007be0:	b323      	cbz	r3, 8007c2c <forward_relu+0x50>
 8007be2:	6851      	ldr	r1, [r2, #4]
 8007be4:	684a      	ldr	r2, [r1, #4]
 8007be6:	b102      	cbz	r2, 8007bea <forward_relu+0xe>
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	f000 8086 	beq.w	8007cfc <forward_relu+0x120>
 8007bf0:	b470      	push	{r4, r5, r6}
 8007bf2:	690b      	ldr	r3, [r1, #16]
 8007bf4:	b103      	cbz	r3, 8007bf8 <forward_relu+0x1c>
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	69c6      	ldr	r6, [r0, #28]
 8007bfa:	b1ce      	cbz	r6, 8007c30 <forward_relu+0x54>
 8007bfc:	6871      	ldr	r1, [r6, #4]
 8007bfe:	6998      	ldr	r0, [r3, #24]
 8007c00:	2901      	cmp	r1, #1
 8007c02:	d03f      	beq.n	8007c84 <forward_relu+0xa8>
 8007c04:	6893      	ldr	r3, [r2, #8]
 8007c06:	6991      	ldr	r1, [r2, #24]
 8007c08:	0a1b      	lsrs	r3, r3, #8
 8007c0a:	6880      	ldr	r0, [r0, #8]
 8007c0c:	6889      	ldr	r1, [r1, #8]
 8007c0e:	d06c      	beq.n	8007cea <forward_relu+0x10e>
 8007c10:	68d5      	ldr	r5, [r2, #12]
 8007c12:	2201      	movs	r2, #1
 8007c14:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007c18:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007c1c:	429d      	cmp	r5, r3
 8007c1e:	fb04 f202 	mul.w	r2, r4, r2
 8007c22:	d1f9      	bne.n	8007c18 <forward_relu+0x3c>
 8007c24:	68b3      	ldr	r3, [r6, #8]
 8007c26:	bc70      	pop	{r4, r5, r6}
 8007c28:	f000 becc 	b.w	80089c4 <forward_lite_nl_relu_generic_if32of32_kernel>
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	deff      	udf	#255	; 0xff
 8007c30:	6999      	ldr	r1, [r3, #24]
 8007c32:	6893      	ldr	r3, [r2, #8]
 8007c34:	6990      	ldr	r0, [r2, #24]
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	6889      	ldr	r1, [r1, #8]
 8007c3a:	6884      	ldr	r4, [r0, #8]
 8007c3c:	d057      	beq.n	8007cee <forward_relu+0x112>
 8007c3e:	68d5      	ldr	r5, [r2, #12]
 8007c40:	2201      	movs	r2, #1
 8007c42:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007c46:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8007c4a:	429d      	cmp	r5, r3
 8007c4c:	fb00 f202 	mul.w	r2, r0, r2
 8007c50:	d1f9      	bne.n	8007c46 <forward_relu+0x6a>
 8007c52:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007c56:	4413      	add	r3, r2
 8007c58:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007c5c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007c60:	4294      	cmp	r4, r2
 8007c62:	d80d      	bhi.n	8007c80 <forward_relu+0xa4>
 8007c64:	3204      	adds	r2, #4
 8007c66:	3104      	adds	r1, #4
 8007c68:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007d04 <forward_relu+0x128>
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	ed72 7a01 	vldmdb	r2!, {s15}
 8007c72:	3b08      	subs	r3, #8
 8007c74:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8007c78:	ed61 7a01 	vstmdb	r1!, {s15}
 8007c7c:	429c      	cmp	r4, r3
 8007c7e:	d9f5      	bls.n	8007c6c <forward_relu+0x90>
 8007c80:	bc70      	pop	{r4, r5, r6}
 8007c82:	4770      	bx	lr
 8007c84:	6993      	ldr	r3, [r2, #24]
 8007c86:	6880      	ldr	r0, [r0, #8]
 8007c88:	689c      	ldr	r4, [r3, #8]
 8007c8a:	6893      	ldr	r3, [r2, #8]
 8007c8c:	0a1b      	lsrs	r3, r3, #8
 8007c8e:	d030      	beq.n	8007cf2 <forward_relu+0x116>
 8007c90:	68d5      	ldr	r5, [r2, #12]
 8007c92:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007c96:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007c9a:	429d      	cmp	r5, r3
 8007c9c:	fb02 f101 	mul.w	r1, r2, r1
 8007ca0:	d1f9      	bne.n	8007c96 <forward_relu+0xba>
 8007ca2:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8007ca6:	68b3      	ldr	r3, [r6, #8]
 8007ca8:	440a      	add	r2, r1
 8007caa:	ed93 7a00 	vldr	s14, [r3]
 8007cae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007cb2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007cb6:	429c      	cmp	r4, r3
 8007cb8:	d8e2      	bhi.n	8007c80 <forward_relu+0xa4>
 8007cba:	1d02      	adds	r2, r0, #4
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007cc4:	1f19      	subs	r1, r3, #4
 8007cc6:	3b08      	subs	r3, #8
 8007cc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd0:	d405      	bmi.n	8007cde <forward_relu+0x102>
 8007cd2:	429c      	cmp	r4, r3
 8007cd4:	f842 0d04 	str.w	r0, [r2, #-4]!
 8007cd8:	d8d2      	bhi.n	8007c80 <forward_relu+0xa4>
 8007cda:	460b      	mov	r3, r1
 8007cdc:	e7f0      	b.n	8007cc0 <forward_relu+0xe4>
 8007cde:	429c      	cmp	r4, r3
 8007ce0:	ed62 7a01 	vstmdb	r2!, {s15}
 8007ce4:	d8cc      	bhi.n	8007c80 <forward_relu+0xa4>
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	e7ea      	b.n	8007cc0 <forward_relu+0xe4>
 8007cea:	2201      	movs	r2, #1
 8007cec:	e79a      	b.n	8007c24 <forward_relu+0x48>
 8007cee:	4622      	mov	r2, r4
 8007cf0:	e7b8      	b.n	8007c64 <forward_relu+0x88>
 8007cf2:	68b2      	ldr	r2, [r6, #8]
 8007cf4:	4623      	mov	r3, r4
 8007cf6:	ed92 7a00 	vldr	s14, [r2]
 8007cfa:	e7de      	b.n	8007cba <forward_relu+0xde>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	deff      	udf	#255	; 0xff
 8007d02:	bf00      	nop
 8007d04:	00000000 	.word	0x00000000

08007d08 <forward_sm>:
 8007d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d0c:	6982      	ldr	r2, [r0, #24]
 8007d0e:	8813      	ldrh	r3, [r2, #0]
 8007d10:	b383      	cbz	r3, 8007d74 <forward_sm+0x6c>
 8007d12:	6852      	ldr	r2, [r2, #4]
 8007d14:	6855      	ldr	r5, [r2, #4]
 8007d16:	b105      	cbz	r5, 8007d1a <forward_sm+0x12>
 8007d18:	682d      	ldr	r5, [r5, #0]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d029      	beq.n	8007d72 <forward_sm+0x6a>
 8007d1e:	6913      	ldr	r3, [r2, #16]
 8007d20:	b363      	cbz	r3, 8007d7c <forward_sm+0x74>
 8007d22:	681e      	ldr	r6, [r3, #0]
 8007d24:	68a9      	ldr	r1, [r5, #8]
 8007d26:	68ec      	ldr	r4, [r5, #12]
 8007d28:	68f3      	ldr	r3, [r6, #12]
 8007d2a:	0a09      	lsrs	r1, r1, #8
 8007d2c:	6867      	ldr	r7, [r4, #4]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	d022      	beq.n	8007d78 <forward_sm+0x70>
 8007d32:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007d36:	2301      	movs	r3, #1
 8007d38:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8007d3c:	428c      	cmp	r4, r1
 8007d3e:	fb00 f303 	mul.w	r3, r0, r3
 8007d42:	d1f9      	bne.n	8007d38 <forward_sm+0x30>
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	69a8      	ldr	r0, [r5, #24]
 8007d48:	69b1      	ldr	r1, [r6, #24]
 8007d4a:	6884      	ldr	r4, [r0, #8]
 8007d4c:	688e      	ldr	r6, [r1, #8]
 8007d4e:	18e5      	adds	r5, r4, r3
 8007d50:	42ac      	cmp	r4, r5
 8007d52:	d20c      	bcs.n	8007d6e <forward_sm+0x66>
 8007d54:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8007d58:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	444c      	add	r4, r9
 8007d60:	4630      	mov	r0, r6
 8007d62:	463a      	mov	r2, r7
 8007d64:	f000 fdea 	bl	800893c <forward_lite_nl_softmax_if32of32_kernel>
 8007d68:	42a5      	cmp	r5, r4
 8007d6a:	4446      	add	r6, r8
 8007d6c:	d8f6      	bhi.n	8007d5c <forward_sm+0x54>
 8007d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d72:	2300      	movs	r3, #0
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	deff      	udf	#255	; 0xff
 8007d78:	2304      	movs	r3, #4
 8007d7a:	e7e4      	b.n	8007d46 <forward_sm+0x3e>
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	deff      	udf	#255	; 0xff

08007d80 <forward_ap>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	6983      	ldr	r3, [r0, #24]
 8007d86:	b09b      	sub	sp, #108	; 0x6c
 8007d88:	881a      	ldrh	r2, [r3, #0]
 8007d8a:	900f      	str	r0, [sp, #60]	; 0x3c
 8007d8c:	2a00      	cmp	r2, #0
 8007d8e:	f000 80f4 	beq.w	8007f7a <forward_ap+0x1fa>
 8007d92:	6859      	ldr	r1, [r3, #4]
 8007d94:	684b      	ldr	r3, [r1, #4]
 8007d96:	b103      	cbz	r3, 8007d9a <forward_ap+0x1a>
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2a01      	cmp	r2, #1
 8007d9c:	f000 80f8 	beq.w	8007f90 <forward_ap+0x210>
 8007da0:	690a      	ldr	r2, [r1, #16]
 8007da2:	2a00      	cmp	r2, #0
 8007da4:	f000 80f7 	beq.w	8007f96 <forward_ap+0x216>
 8007da8:	6811      	ldr	r1, [r2, #0]
 8007daa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007dac:	68ca      	ldr	r2, [r1, #12]
 8007dae:	6989      	ldr	r1, [r1, #24]
 8007db0:	68d4      	ldr	r4, [r2, #12]
 8007db2:	6895      	ldr	r5, [r2, #8]
 8007db4:	688a      	ldr	r2, [r1, #8]
 8007db6:	68d9      	ldr	r1, [r3, #12]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	9204      	str	r2, [sp, #16]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007dc0:	9315      	str	r3, [sp, #84]	; 0x54
 8007dc2:	9410      	str	r4, [sp, #64]	; 0x40
 8007dc4:	9509      	str	r5, [sp, #36]	; 0x24
 8007dc6:	e9d2 3600 	ldrd	r3, r6, [r2]
 8007dca:	e9d1 7c02 	ldrd	r7, ip, [r1, #8]
 8007dce:	6a02      	ldr	r2, [r0, #32]
 8007dd0:	970a      	str	r7, [sp, #40]	; 0x28
 8007dd2:	920b      	str	r2, [sp, #44]	; 0x2c
 8007dd4:	684f      	ldr	r7, [r1, #4]
 8007dd6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007dd8:	69c1      	ldr	r1, [r0, #28]
 8007dda:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007ddc:	9614      	str	r6, [sp, #80]	; 0x50
 8007dde:	9013      	str	r0, [sp, #76]	; 0x4c
 8007de0:	4258      	negs	r0, r3
 8007de2:	9111      	str	r1, [sp, #68]	; 0x44
 8007de4:	9212      	str	r2, [sp, #72]	; 0x48
 8007de6:	9003      	str	r0, [sp, #12]
 8007de8:	2c00      	cmp	r4, #0
 8007dea:	f000 80c3 	beq.w	8007f74 <forward_ap+0x1f4>
 8007dee:	eb0c 0003 	add.w	r0, ip, r3
 8007df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007df4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007df6:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 8007dfa:	fb07 f303 	mul.w	r3, r7, r3
 8007dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e02:	9005      	str	r0, [sp, #20]
 8007e04:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8007e08:	fb02 f301 	mul.w	r3, r2, r1
 8007e0c:	9316      	str	r3, [sp, #88]	; 0x58
 8007e0e:	4273      	negs	r3, r6
 8007e10:	9317      	str	r3, [sp, #92]	; 0x5c
 8007e12:	fb05 f30a 	mul.w	r3, r5, sl
 8007e16:	463d      	mov	r5, r7
 8007e18:	9319      	str	r3, [sp, #100]	; 0x64
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	930c      	str	r3, [sp, #48]	; 0x30
 8007e1e:	9b03      	ldr	r3, [sp, #12]
 8007e20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e22:	9805      	ldr	r0, [sp, #20]
 8007e24:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8007e28:	4281      	cmp	r1, r0
 8007e2a:	bf94      	ite	ls
 8007e2c:	185b      	addls	r3, r3, r1
 8007e2e:	181b      	addhi	r3, r3, r0
 8007e30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e32:	920e      	str	r2, [sp, #56]	; 0x38
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	2900      	cmp	r1, #0
 8007e38:	f000 808e 	beq.w	8007f58 <forward_ap+0x1d8>
 8007e3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	fb00 f102 	mul.w	r1, r0, r2
 8007e44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e46:	9318      	str	r3, [sp, #96]	; 0x60
 8007e48:	1882      	adds	r2, r0, r2
 8007e4a:	9b04      	ldr	r3, [sp, #16]
 8007e4c:	9108      	str	r1, [sp, #32]
 8007e4e:	4698      	mov	r8, r3
 8007e50:	eb03 010a 	add.w	r1, r3, sl
 8007e54:	9207      	str	r2, [sp, #28]
 8007e56:	2300      	movs	r3, #0
 8007e58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e5a:	930d      	str	r3, [sp, #52]	; 0x34
 8007e5c:	2a00      	cmp	r2, #0
 8007e5e:	9206      	str	r2, [sp, #24]
 8007e60:	f2c0 8093 	blt.w	8007f8a <forward_ap+0x20a>
 8007e64:	9b08      	ldr	r3, [sp, #32]
 8007e66:	189c      	adds	r4, r3, r2
 8007e68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e6a:	9806      	ldr	r0, [sp, #24]
 8007e6c:	fb04 340a 	mla	r4, r4, sl, r3
 8007e70:	9e07      	ldr	r6, [sp, #28]
 8007e72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e74:	42b3      	cmp	r3, r6
 8007e76:	bf94      	ite	ls
 8007e78:	18c0      	addls	r0, r0, r3
 8007e7a:	1980      	addhi	r0, r0, r6
 8007e7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e7e:	eba2 0e00 	sub.w	lr, r2, r0
 8007e82:	1a82      	subs	r2, r0, r2
 8007e84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e88:	9200      	str	r2, [sp, #0]
 8007e8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e8c:	fb02 fe0e 	mul.w	lr, r2, lr
 8007e90:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bf08      	it	eq
 8007e96:	4672      	moveq	r2, lr
 8007e98:	9b01      	ldr	r3, [sp, #4]
 8007e9a:	9202      	str	r2, [sp, #8]
 8007e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	dd48      	ble.n	8007f34 <forward_ap+0x1b4>
 8007ea2:	9b00      	ldr	r3, [sp, #0]
 8007ea4:	4694      	mov	ip, r2
 8007ea6:	2700      	movs	r7, #0
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	fb0a 4003 	mla	r0, sl, r3, r4
 8007eae:	9b00      	ldr	r3, [sp, #0]
 8007eb0:	441f      	add	r7, r3
 8007eb2:	45be      	cmp	lr, r7
 8007eb4:	d063      	beq.n	8007f7e <forward_ap+0x1fe>
 8007eb6:	42a0      	cmp	r0, r4
 8007eb8:	d933      	bls.n	8007f22 <forward_ap+0x1a2>
 8007eba:	2600      	movs	r6, #0
 8007ebc:	4623      	mov	r3, r4
 8007ebe:	eb0a 0b04 	add.w	fp, sl, r4
 8007ec2:	b145      	cbz	r5, 8007ed6 <forward_ap+0x156>
 8007ec4:	2a00      	cmp	r2, #0
 8007ec6:	d05e      	beq.n	8007f86 <forward_ap+0x206>
 8007ec8:	4642      	mov	r2, r8
 8007eca:	ecf3 7a01 	vldmia	r3!, {s15}
 8007ece:	459b      	cmp	fp, r3
 8007ed0:	ece2 7a01 	vstmia	r2!, {s15}
 8007ed4:	d1f9      	bne.n	8007eca <forward_ap+0x14a>
 8007ed6:	46a3      	mov	fp, r4
 8007ed8:	44d3      	add	fp, sl
 8007eda:	4558      	cmp	r0, fp
 8007edc:	d910      	bls.n	8007f00 <forward_ap+0x180>
 8007ede:	2d00      	cmp	r5, #0
 8007ee0:	d0fa      	beq.n	8007ed8 <forward_ap+0x158>
 8007ee2:	4643      	mov	r3, r8
 8007ee4:	465a      	mov	r2, fp
 8007ee6:	ed93 7a00 	vldr	s14, [r3]
 8007eea:	ecf2 7a01 	vldmia	r2!, {s15}
 8007eee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ef2:	ece3 7a01 	vstmia	r3!, {s15}
 8007ef6:	428b      	cmp	r3, r1
 8007ef8:	d1f5      	bne.n	8007ee6 <forward_ap+0x166>
 8007efa:	44d3      	add	fp, sl
 8007efc:	4558      	cmp	r0, fp
 8007efe:	d8ee      	bhi.n	8007ede <forward_ap+0x15e>
 8007f00:	b17e      	cbz	r6, 8007f22 <forward_ap+0x1a2>
 8007f02:	ee07 6a90 	vmov	s15, r6
 8007f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f0e:	b145      	cbz	r5, 8007f22 <forward_ap+0x1a2>
 8007f10:	4643      	mov	r3, r8
 8007f12:	edd3 7a00 	vldr	s15, [r3]
 8007f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1a:	ece3 7a01 	vstmia	r3!, {s15}
 8007f1e:	4299      	cmp	r1, r3
 8007f20:	d1f7      	bne.n	8007f12 <forward_ap+0x192>
 8007f22:	f10c 0c01 	add.w	ip, ip, #1
 8007f26:	9b01      	ldr	r3, [sp, #4]
 8007f28:	444c      	add	r4, r9
 8007f2a:	4448      	add	r0, r9
 8007f2c:	4563      	cmp	r3, ip
 8007f2e:	f04f 0200 	mov.w	r2, #0
 8007f32:	d1bc      	bne.n	8007eae <forward_ap+0x12e>
 8007f34:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f36:	44d0      	add	r8, sl
 8007f38:	9c07      	ldr	r4, [sp, #28]
 8007f3a:	4451      	add	r1, sl
 8007f3c:	9a06      	ldr	r2, [sp, #24]
 8007f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f40:	4402      	add	r2, r0
 8007f42:	1a20      	subs	r0, r4, r0
 8007f44:	3301      	adds	r3, #1
 8007f46:	9007      	str	r0, [sp, #28]
 8007f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f4a:	930d      	str	r3, [sp, #52]	; 0x34
 8007f4c:	4298      	cmp	r0, r3
 8007f4e:	d185      	bne.n	8007e5c <forward_ap+0xdc>
 8007f50:	9b04      	ldr	r3, [sp, #16]
 8007f52:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007f54:	4413      	add	r3, r2
 8007f56:	9304      	str	r3, [sp, #16]
 8007f58:	9a03      	ldr	r2, [sp, #12]
 8007f5a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f5e:	440a      	add	r2, r1
 8007f60:	3301      	adds	r3, #1
 8007f62:	9203      	str	r2, [sp, #12]
 8007f64:	9a05      	ldr	r2, [sp, #20]
 8007f66:	930c      	str	r3, [sp, #48]	; 0x30
 8007f68:	1a52      	subs	r2, r2, r1
 8007f6a:	9205      	str	r2, [sp, #20]
 8007f6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	f47f af55 	bne.w	8007e1e <forward_ap+0x9e>
 8007f74:	b01b      	add	sp, #108	; 0x6c
 8007f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7a:	6853      	ldr	r3, [r2, #4]
 8007f7c:	deff      	udf	#255	; 0xff
 8007f7e:	42a0      	cmp	r0, r4
 8007f80:	9e02      	ldr	r6, [sp, #8]
 8007f82:	d89b      	bhi.n	8007ebc <forward_ap+0x13c>
 8007f84:	e7bc      	b.n	8007f00 <forward_ap+0x180>
 8007f86:	46a3      	mov	fp, r4
 8007f88:	e7ab      	b.n	8007ee2 <forward_ap+0x162>
 8007f8a:	9c08      	ldr	r4, [sp, #32]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	e76b      	b.n	8007e68 <forward_ap+0xe8>
 8007f90:	2300      	movs	r3, #0
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	deff      	udf	#255	; 0xff
 8007f96:	68d3      	ldr	r3, [r2, #12]
 8007f98:	deff      	udf	#255	; 0xff
 8007f9a:	bf00      	nop

08007f9c <forward_lite_conv2d_if32of32wf32>:
 8007f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa0:	ed2d 8b0e 	vpush	{d8-d14}
 8007fa4:	b0a1      	sub	sp, #132	; 0x84
 8007fa6:	4686      	mov	lr, r0
 8007fa8:	4694      	mov	ip, r2
 8007faa:	910c      	str	r1, [sp, #48]	; 0x30
 8007fac:	f8bd 1108 	ldrh.w	r1, [sp, #264]	; 0x108
 8007fb0:	f8bd 4104 	ldrh.w	r4, [sp, #260]	; 0x104
 8007fb4:	f8bd 510c 	ldrh.w	r5, [sp, #268]	; 0x10c
 8007fb8:	424f      	negs	r7, r1
 8007fba:	f8bd 6110 	ldrh.w	r6, [sp, #272]	; 0x110
 8007fbe:	901e      	str	r0, [sp, #120]	; 0x78
 8007fc0:	983e      	ldr	r0, [sp, #248]	; 0xf8
 8007fc2:	9217      	str	r2, [sp, #92]	; 0x5c
 8007fc4:	930e      	str	r3, [sp, #56]	; 0x38
 8007fc6:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8007fc8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007fca:	9418      	str	r4, [sp, #96]	; 0x60
 8007fcc:	9508      	str	r5, [sp, #32]
 8007fce:	961f      	str	r6, [sp, #124]	; 0x7c
 8007fd0:	9711      	str	r7, [sp, #68]	; 0x44
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	f000 8175 	beq.w	80082c2 <forward_lite_conv2d_if32of32wf32+0x326>
 8007fd8:	983f      	ldr	r0, [sp, #252]	; 0xfc
 8007fda:	910d      	str	r1, [sp, #52]	; 0x34
 8007fdc:	fb00 f303 	mul.w	r3, r0, r3
 8007fe0:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8007fe2:	ed9f 8abe 	vldr	s16, [pc, #760]	; 80082dc <forward_lite_conv2d_if32of32wf32+0x340>
 8007fe6:	fb01 f303 	mul.w	r3, r1, r3
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fee:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8007ff0:	fb01 f303 	mul.w	r3, r1, r3
 8007ff4:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8007ff6:	fb01 f102 	mul.w	r1, r1, r2
 8007ffa:	0092      	lsls	r2, r2, #2
 8007ffc:	9205      	str	r2, [sp, #20]
 8007ffe:	0089      	lsls	r1, r1, #2
 8008000:	fb06 f203 	mul.w	r2, r6, r3
 8008004:	fb07 f303 	mul.w	r3, r7, r3
 8008008:	911a      	str	r1, [sp, #104]	; 0x68
 800800a:	4261      	negs	r1, r4
 800800c:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8008010:	0094      	lsls	r4, r2, #2
 8008012:	f10c 4278 	add.w	r2, ip, #4160749568	; 0xf8000000
 8008016:	9312      	str	r3, [sp, #72]	; 0x48
 8008018:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800801a:	9219      	str	r2, [sp, #100]	; 0x64
 800801c:	2200      	movs	r2, #0
 800801e:	fb05 f303 	mul.w	r3, r5, r3
 8008022:	9115      	str	r1, [sp, #84]	; 0x54
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	941c      	str	r4, [sp, #112]	; 0x70
 8008028:	9214      	str	r2, [sp, #80]	; 0x50
 800802a:	9306      	str	r3, [sp, #24]
 800802c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	9307      	str	r3, [sp, #28]
 8008032:	fb03 f301 	mul.w	r3, r3, r1
 8008036:	9316      	str	r3, [sp, #88]	; 0x58
 8008038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800803a:	2b00      	cmp	r3, #0
 800803c:	f2c0 8275 	blt.w	800852a <forward_lite_conv2d_if32of32wf32+0x58e>
 8008040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008042:	930b      	str	r3, [sp, #44]	; 0x2c
 8008044:	2300      	movs	r3, #0
 8008046:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008048:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800804a:	440a      	add	r2, r1
 800804c:	9945      	ldr	r1, [sp, #276]	; 0x114
 800804e:	428a      	cmp	r2, r1
 8008050:	bf94      	ite	ls
 8008052:	ebc3 0b02 	rsbls	fp, r3, r2
 8008056:	ebc3 0b01 	rsbhi	fp, r3, r1
 800805a:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800805c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800805e:	2a00      	cmp	r2, #0
 8008060:	f000 8144 	beq.w	80082ec <forward_lite_conv2d_if32of32wf32+0x350>
 8008064:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008066:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800806a:	f0c0 813f 	bcc.w	80082ec <forward_lite_conv2d_if32of32wf32+0x350>
 800806e:	9a05      	ldr	r2, [sp, #20]
 8008070:	188a      	adds	r2, r1, r2
 8008072:	4291      	cmp	r1, r2
 8008074:	921b      	str	r2, [sp, #108]	; 0x6c
 8008076:	f080 810e 	bcs.w	8008296 <forward_lite_conv2d_if32of32wf32+0x2fa>
 800807a:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800807c:	fb02 f303 	mul.w	r3, r2, r3
 8008080:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008082:	9309      	str	r3, [sp, #36]	; 0x24
 8008084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008086:	4413      	add	r3, r2
 8008088:	931d      	str	r3, [sp, #116]	; 0x74
 800808a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800808c:	9310      	str	r3, [sp, #64]	; 0x40
 800808e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008090:	9313      	str	r3, [sp, #76]	; 0x4c
 8008092:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008094:	930a      	str	r3, [sp, #40]	; 0x28
 8008096:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008098:	9938      	ldr	r1, [sp, #224]	; 0xe0
 800809a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800809c:	f001 faa8 	bl	80095f0 <st_int8_copy>
 80080a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 811f 	beq.w	80082e6 <forward_lite_conv2d_if32of32wf32+0x34a>
 80080a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080aa:	ecf3 1a01 	vldmia	r3!, {s3}
 80080ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80080b0:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 80e4 	beq.w	8008280 <forward_lite_conv2d_if32of32wf32+0x2e4>
 80080b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080be:	9302      	str	r3, [sp, #8]
 80080c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080c2:	9303      	str	r3, [sp, #12]
 80080c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	2300      	movs	r3, #0
 80080ca:	9304      	str	r3, [sp, #16]
 80080cc:	9b01      	ldr	r3, [sp, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f2c0 80fe 	blt.w	80082d0 <forward_lite_conv2d_if32of32wf32+0x334>
 80080d4:	9902      	ldr	r1, [sp, #8]
 80080d6:	2600      	movs	r6, #0
 80080d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080da:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80080dc:	9807      	ldr	r0, [sp, #28]
 80080de:	9c00      	ldr	r4, [sp, #0]
 80080e0:	fb00 3202 	mla	r2, r0, r2, r3
 80080e4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80080e6:	4423      	add	r3, r4
 80080e8:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
 80080ea:	42a3      	cmp	r3, r4
 80080ec:	bf94      	ite	ls
 80080ee:	ebc6 0603 	rsbls	r6, r6, r3
 80080f2:	ebc6 0604 	rsbhi	r6, r6, r4
 80080f6:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80080f8:	f1bb 0f00 	cmp.w	fp, #0
 80080fc:	eba3 0a06 	sub.w	sl, r3, r6
 8008100:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8008102:	eba4 0906 	sub.w	r9, r4, r6
 8008106:	fb03 f606 	mul.w	r6, r3, r6
 800810a:	f340 80e9 	ble.w	80082e0 <forward_lite_conv2d_if32of32wf32+0x344>
 800810e:	f026 070f 	bic.w	r7, r6, #15
 8008112:	eeb0 7a61 	vmov.f32	s14, s3
 8008116:	fb00 fa0a 	mul.w	sl, r0, sl
 800811a:	f04f 0c00 	mov.w	ip, #0
 800811e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008122:	fb00 f909 	mul.w	r9, r0, r9
 8008126:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800812a:	f108 0801 	add.w	r8, r8, #1
 800812e:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8008132:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8008136:	2f00      	cmp	r7, #0
 8008138:	f340 80c8 	ble.w	80082cc <forward_lite_conv2d_if32of32wf32+0x330>
 800813c:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8008140:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8008144:	2400      	movs	r4, #0
 8008146:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 800814a:	3410      	adds	r4, #16
 800814c:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8008150:	3340      	adds	r3, #64	; 0x40
 8008152:	ed50 4a10 	vldr	s9, [r0, #-64]	; 0xffffffc0
 8008156:	42bc      	cmp	r4, r7
 8008158:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800815c:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8008160:	ed50 5a0e 	vldr	s11, [r0, #-56]	; 0xffffffc8
 8008164:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8008168:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 800816c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008170:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 8008174:	ed10 ea1d 	vldr	s28, [r0, #-116]	; 0xffffff8c
 8008178:	ed50 da1c 	vldr	s27, [r0, #-112]	; 0xffffff90
 800817c:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 8008180:	ed50 ca1b 	vldr	s25, [r0, #-108]	; 0xffffff94
 8008184:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 8008188:	eee5 7a86 	vfma.f32	s15, s11, s12
 800818c:	ed50 ba1a 	vldr	s23, [r0, #-104]	; 0xffffff98
 8008190:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 8008194:	ed50 aa19 	vldr	s21, [r0, #-100]	; 0xffffff9c
 8008198:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800819c:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 80081a0:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 80081a4:	eeee 7a26 	vfma.f32	s15, s28, s13
 80081a8:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 80081ac:	ed13 0a17 	vldr	s0, [r3, #-92]	; 0xffffffa4
 80081b0:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 80081b4:	ed13 1a16 	vldr	s2, [r3, #-88]	; 0xffffffa8
 80081b8:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 80081bc:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 80081c0:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80081c4:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 80081c8:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80081cc:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 80081d0:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80081d4:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 80081d8:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80081dc:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80081e0:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 80081e4:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80081e8:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80081ec:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80081f0:	eee9 7a89 	vfma.f32	s15, s19, s18
 80081f4:	eee8 7a80 	vfma.f32	s15, s17, s0
 80081f8:	eee0 7a81 	vfma.f32	s15, s1, s2
 80081fc:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008200:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008204:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008208:	eee5 7a25 	vfma.f32	s15, s10, s11
 800820c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008210:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008214:	db97      	blt.n	8008146 <forward_lite_conv2d_if32of32wf32+0x1aa>
 8008216:	4471      	add	r1, lr
 8008218:	4472      	add	r2, lr
 800821a:	4640      	mov	r0, r8
 800821c:	4286      	cmp	r6, r0
 800821e:	dd10      	ble.n	8008242 <forward_lite_conv2d_if32of32wf32+0x2a6>
 8008220:	4603      	mov	r3, r0
 8008222:	460d      	mov	r5, r1
 8008224:	4614      	mov	r4, r2
 8008226:	3301      	adds	r3, #1
 8008228:	ecf4 6a01 	vldmia	r4!, {s13}
 800822c:	ecf5 7a01 	vldmia	r5!, {s15}
 8008230:	429e      	cmp	r6, r3
 8008232:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008236:	d1f6      	bne.n	8008226 <forward_lite_conv2d_if32of32wf32+0x28a>
 8008238:	1a30      	subs	r0, r6, r0
 800823a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800823e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008242:	f10c 0c01 	add.w	ip, ip, #1
 8008246:	4451      	add	r1, sl
 8008248:	444a      	add	r2, r9
 800824a:	45e3      	cmp	fp, ip
 800824c:	f47f af73 	bne.w	8008136 <forward_lite_conv2d_if32of32wf32+0x19a>
 8008250:	9901      	ldr	r1, [sp, #4]
 8008252:	9808      	ldr	r0, [sp, #32]
 8008254:	9a03      	ldr	r2, [sp, #12]
 8008256:	4401      	add	r1, r0
 8008258:	9b04      	ldr	r3, [sp, #16]
 800825a:	ed82 7a00 	vstr	s14, [r2]
 800825e:	9101      	str	r1, [sp, #4]
 8008260:	3301      	adds	r3, #1
 8008262:	9905      	ldr	r1, [sp, #20]
 8008264:	9304      	str	r3, [sp, #16]
 8008266:	440a      	add	r2, r1
 8008268:	9906      	ldr	r1, [sp, #24]
 800826a:	9203      	str	r2, [sp, #12]
 800826c:	9a00      	ldr	r2, [sp, #0]
 800826e:	1a12      	subs	r2, r2, r0
 8008270:	9200      	str	r2, [sp, #0]
 8008272:	9a02      	ldr	r2, [sp, #8]
 8008274:	440a      	add	r2, r1
 8008276:	9202      	str	r2, [sp, #8]
 8008278:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800827a:	429a      	cmp	r2, r3
 800827c:	f47f af26 	bne.w	80080cc <forward_lite_conv2d_if32of32wf32+0x130>
 8008280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008282:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008286:	440a      	add	r2, r1
 8008288:	3304      	adds	r3, #4
 800828a:	920a      	str	r2, [sp, #40]	; 0x28
 800828c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800828e:	9310      	str	r3, [sp, #64]	; 0x40
 8008290:	4293      	cmp	r3, r2
 8008292:	f4ff af00 	bcc.w	8008096 <forward_lite_conv2d_if32of32wf32+0xfa>
 8008296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008298:	991a      	ldr	r1, [sp, #104]	; 0x68
 800829a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800829c:	440a      	add	r2, r1
 800829e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80082a0:	3301      	adds	r3, #1
 80082a2:	920c      	str	r2, [sp, #48]	; 0x30
 80082a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80082a6:	9314      	str	r3, [sp, #80]	; 0x50
 80082a8:	440a      	add	r2, r1
 80082aa:	9211      	str	r2, [sp, #68]	; 0x44
 80082ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082ae:	1a52      	subs	r2, r2, r1
 80082b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80082b2:	920d      	str	r2, [sp, #52]	; 0x34
 80082b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082b6:	440a      	add	r2, r1
 80082b8:	9212      	str	r2, [sp, #72]	; 0x48
 80082ba:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80082bc:	429a      	cmp	r2, r3
 80082be:	f47f aebb 	bne.w	8008038 <forward_lite_conv2d_if32of32wf32+0x9c>
 80082c2:	b021      	add	sp, #132	; 0x84
 80082c4:	ecbd 8b0e 	vpop	{d8-d14}
 80082c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082cc:	2000      	movs	r0, #0
 80082ce:	e7a5      	b.n	800821c <forward_lite_conv2d_if32of32wf32+0x280>
 80082d0:	9a00      	ldr	r2, [sp, #0]
 80082d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d4:	4616      	mov	r6, r2
 80082d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082d8:	189a      	adds	r2, r3, r2
 80082da:	e6fe      	b.n	80080da <forward_lite_conv2d_if32of32wf32+0x13e>
 80082dc:	00000000 	.word	0x00000000
 80082e0:	eeb0 7a61 	vmov.f32	s14, s3
 80082e4:	e7b4      	b.n	8008250 <forward_lite_conv2d_if32of32wf32+0x2b4>
 80082e6:	eef0 1a48 	vmov.f32	s3, s16
 80082ea:	e6e1      	b.n	80080b0 <forward_lite_conv2d_if32of32wf32+0x114>
 80082ec:	9a05      	ldr	r2, [sp, #20]
 80082ee:	188a      	adds	r2, r1, r2
 80082f0:	4291      	cmp	r1, r2
 80082f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80082f4:	d2cf      	bcs.n	8008296 <forward_lite_conv2d_if32of32wf32+0x2fa>
 80082f6:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80082f8:	fb02 f303 	mul.w	r3, r2, r3
 80082fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80082fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008302:	4413      	add	r3, r2
 8008304:	931d      	str	r3, [sp, #116]	; 0x74
 8008306:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008308:	9310      	str	r3, [sp, #64]	; 0x40
 800830a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800830c:	9313      	str	r3, [sp, #76]	; 0x4c
 800830e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008310:	9309      	str	r3, [sp, #36]	; 0x24
 8008312:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 80fa 	beq.w	800850e <forward_lite_conv2d_if32of32wf32+0x572>
 800831a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800831c:	ecf3 1a01 	vldmia	r3!, {s3}
 8008320:	9313      	str	r3, [sp, #76]	; 0x4c
 8008322:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 80e3 	beq.w	80084f0 <forward_lite_conv2d_if32of32wf32+0x554>
 800832a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008330:	9302      	str	r3, [sp, #8]
 8008332:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008334:	9303      	str	r3, [sp, #12]
 8008336:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	2300      	movs	r3, #0
 800833c:	9304      	str	r3, [sp, #16]
 800833e:	9b01      	ldr	r3, [sp, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	f2c0 80e9 	blt.w	8008518 <forward_lite_conv2d_if32of32wf32+0x57c>
 8008346:	9a02      	ldr	r2, [sp, #8]
 8008348:	2400      	movs	r4, #0
 800834a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800834e:	9807      	ldr	r0, [sp, #28]
 8008350:	9d00      	ldr	r5, [sp, #0]
 8008352:	fb03 1300 	mla	r3, r3, r0, r1
 8008356:	993b      	ldr	r1, [sp, #236]	; 0xec
 8008358:	4429      	add	r1, r5
 800835a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 800835c:	42a9      	cmp	r1, r5
 800835e:	bf94      	ite	ls
 8008360:	ebc4 0401 	rsbls	r4, r4, r1
 8008364:	ebc4 0405 	rsbhi	r4, r4, r5
 8008368:	993b      	ldr	r1, [sp, #236]	; 0xec
 800836a:	f1bb 0f00 	cmp.w	fp, #0
 800836e:	eba1 0a04 	sub.w	sl, r1, r4
 8008372:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8008374:	eba5 0904 	sub.w	r9, r5, r4
 8008378:	fb01 f404 	mul.w	r4, r1, r4
 800837c:	f340 80d2 	ble.w	8008524 <forward_lite_conv2d_if32of32wf32+0x588>
 8008380:	f024 0c0f 	bic.w	ip, r4, #15
 8008384:	eeb0 7a61 	vmov.f32	s14, s3
 8008388:	fb00 fa0a 	mul.w	sl, r0, sl
 800838c:	2700      	movs	r7, #0
 800838e:	f10c 38ff 	add.w	r8, ip, #4294967295
 8008392:	fb00 f909 	mul.w	r9, r0, r9
 8008396:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800839a:	f108 0801 	add.w	r8, r8, #1
 800839e:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 80083a2:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80083a6:	f1bc 0f00 	cmp.w	ip, #0
 80083aa:	f340 80b3 	ble.w	8008514 <forward_lite_conv2d_if32of32wf32+0x578>
 80083ae:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80083b2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80083b6:	2500      	movs	r5, #0
 80083b8:	ed51 6a0f 	vldr	s13, [r1, #-60]	; 0xffffffc4
 80083bc:	3510      	adds	r5, #16
 80083be:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80083c2:	3140      	adds	r1, #64	; 0x40
 80083c4:	ed50 4a10 	vldr	s9, [r0, #-64]	; 0xffffffc0
 80083c8:	4565      	cmp	r5, ip
 80083ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80083ce:	ed11 5a20 	vldr	s10, [r1, #-128]	; 0xffffff80
 80083d2:	ed50 5a0e 	vldr	s11, [r0, #-56]	; 0xffffffc8
 80083d6:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80083da:	ed11 6a1e 	vldr	s12, [r1, #-120]	; 0xffffff88
 80083de:	eee4 7a85 	vfma.f32	s15, s9, s10
 80083e2:	ed51 6a1d 	vldr	s13, [r1, #-116]	; 0xffffff8c
 80083e6:	ed10 ea1d 	vldr	s28, [r0, #-116]	; 0xffffff8c
 80083ea:	ed50 da1c 	vldr	s27, [r0, #-112]	; 0xffffff90
 80083ee:	ed11 da1c 	vldr	s26, [r1, #-112]	; 0xffffff90
 80083f2:	ed50 ca1b 	vldr	s25, [r0, #-108]	; 0xffffff94
 80083f6:	ed11 ca1b 	vldr	s24, [r1, #-108]	; 0xffffff94
 80083fa:	eee5 7a86 	vfma.f32	s15, s11, s12
 80083fe:	ed50 ba1a 	vldr	s23, [r0, #-104]	; 0xffffff98
 8008402:	ed11 ba1a 	vldr	s22, [r1, #-104]	; 0xffffff98
 8008406:	ed50 aa19 	vldr	s21, [r0, #-100]	; 0xffffff9c
 800840a:	ed11 aa19 	vldr	s20, [r1, #-100]	; 0xffffff9c
 800840e:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 8008412:	ed11 9a18 	vldr	s18, [r1, #-96]	; 0xffffffa0
 8008416:	eeee 7a26 	vfma.f32	s15, s28, s13
 800841a:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 800841e:	ed11 0a17 	vldr	s0, [r1, #-92]	; 0xffffffa4
 8008422:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 8008426:	ed11 1a16 	vldr	s2, [r1, #-88]	; 0xffffffa8
 800842a:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 800842e:	ed51 2a15 	vldr	s5, [r1, #-84]	; 0xffffffac
 8008432:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8008436:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 800843a:	ed51 3a14 	vldr	s7, [r1, #-80]	; 0xffffffb0
 800843e:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 8008442:	ed51 4a13 	vldr	s9, [r1, #-76]	; 0xffffffb4
 8008446:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800844a:	ed51 5a12 	vldr	s11, [r1, #-72]	; 0xffffffb8
 800844e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008452:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 8008456:	ed51 6a11 	vldr	s13, [r1, #-68]	; 0xffffffbc
 800845a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800845e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8008462:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008466:	eee8 7a80 	vfma.f32	s15, s17, s0
 800846a:	eee0 7a81 	vfma.f32	s15, s1, s2
 800846e:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008472:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008476:	eee4 7a24 	vfma.f32	s15, s8, s9
 800847a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800847e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008482:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008486:	db97      	blt.n	80083b8 <forward_lite_conv2d_if32of32wf32+0x41c>
 8008488:	4472      	add	r2, lr
 800848a:	4473      	add	r3, lr
 800848c:	4641      	mov	r1, r8
 800848e:	428c      	cmp	r4, r1
 8008490:	dd10      	ble.n	80084b4 <forward_lite_conv2d_if32of32wf32+0x518>
 8008492:	4608      	mov	r0, r1
 8008494:	4616      	mov	r6, r2
 8008496:	461d      	mov	r5, r3
 8008498:	3001      	adds	r0, #1
 800849a:	ecf5 6a01 	vldmia	r5!, {s13}
 800849e:	ecf6 7a01 	vldmia	r6!, {s15}
 80084a2:	4284      	cmp	r4, r0
 80084a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80084a8:	d1f6      	bne.n	8008498 <forward_lite_conv2d_if32of32wf32+0x4fc>
 80084aa:	1a61      	subs	r1, r4, r1
 80084ac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80084b0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80084b4:	3701      	adds	r7, #1
 80084b6:	4452      	add	r2, sl
 80084b8:	444b      	add	r3, r9
 80084ba:	45bb      	cmp	fp, r7
 80084bc:	f47f af73 	bne.w	80083a6 <forward_lite_conv2d_if32of32wf32+0x40a>
 80084c0:	9901      	ldr	r1, [sp, #4]
 80084c2:	9808      	ldr	r0, [sp, #32]
 80084c4:	9a03      	ldr	r2, [sp, #12]
 80084c6:	4401      	add	r1, r0
 80084c8:	9b04      	ldr	r3, [sp, #16]
 80084ca:	ed82 7a00 	vstr	s14, [r2]
 80084ce:	9101      	str	r1, [sp, #4]
 80084d0:	3301      	adds	r3, #1
 80084d2:	9905      	ldr	r1, [sp, #20]
 80084d4:	9304      	str	r3, [sp, #16]
 80084d6:	440a      	add	r2, r1
 80084d8:	9906      	ldr	r1, [sp, #24]
 80084da:	9203      	str	r2, [sp, #12]
 80084dc:	9a00      	ldr	r2, [sp, #0]
 80084de:	1a12      	subs	r2, r2, r0
 80084e0:	9200      	str	r2, [sp, #0]
 80084e2:	9a02      	ldr	r2, [sp, #8]
 80084e4:	440a      	add	r2, r1
 80084e6:	9202      	str	r2, [sp, #8]
 80084e8:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 80084ea:	429a      	cmp	r2, r3
 80084ec:	f47f af27 	bne.w	800833e <forward_lite_conv2d_if32of32wf32+0x3a2>
 80084f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80084f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084f6:	440a      	add	r2, r1
 80084f8:	3304      	adds	r3, #4
 80084fa:	9209      	str	r2, [sp, #36]	; 0x24
 80084fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80084fe:	9310      	str	r3, [sp, #64]	; 0x40
 8008500:	4293      	cmp	r3, r2
 8008502:	f4bf aec8 	bcs.w	8008296 <forward_lite_conv2d_if32of32wf32+0x2fa>
 8008506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008508:	2b00      	cmp	r3, #0
 800850a:	f47f af06 	bne.w	800831a <forward_lite_conv2d_if32of32wf32+0x37e>
 800850e:	eef0 1a48 	vmov.f32	s3, s16
 8008512:	e706      	b.n	8008322 <forward_lite_conv2d_if32of32wf32+0x386>
 8008514:	2100      	movs	r1, #0
 8008516:	e7ba      	b.n	800848e <forward_lite_conv2d_if32of32wf32+0x4f2>
 8008518:	9a00      	ldr	r2, [sp, #0]
 800851a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800851c:	4614      	mov	r4, r2
 800851e:	4413      	add	r3, r2
 8008520:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008522:	e713      	b.n	800834c <forward_lite_conv2d_if32of32wf32+0x3b0>
 8008524:	eeb0 7a61 	vmov.f32	s14, s3
 8008528:	e7ca      	b.n	80084c0 <forward_lite_conv2d_if32of32wf32+0x524>
 800852a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800852c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800852e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008530:	e589      	b.n	8008046 <forward_lite_conv2d_if32of32wf32+0xaa>
 8008532:	bf00      	nop

08008534 <forward_lite_dw_if32of32wf32>:
 8008534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008538:	b0a5      	sub	sp, #148	; 0x94
 800853a:	9113      	str	r1, [sp, #76]	; 0x4c
 800853c:	931a      	str	r3, [sp, #104]	; 0x68
 800853e:	f8bd 10e0 	ldrh.w	r1, [sp, #224]	; 0xe0
 8008542:	f8bd 30dc 	ldrh.w	r3, [sp, #220]	; 0xdc
 8008546:	9019      	str	r0, [sp, #100]	; 0x64
 8008548:	9220      	str	r2, [sp, #128]	; 0x80
 800854a:	4258      	negs	r0, r3
 800854c:	f8bd 20d8 	ldrh.w	r2, [sp, #216]	; 0xd8
 8008550:	9122      	str	r1, [sp, #136]	; 0x88
 8008552:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 8008554:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
 8008558:	9221      	str	r2, [sp, #132]	; 0x84
 800855a:	9123      	str	r1, [sp, #140]	; 0x8c
 800855c:	900e      	str	r0, [sp, #56]	; 0x38
 800855e:	2c00      	cmp	r4, #0
 8008560:	f000 8142 	beq.w	80087e8 <forward_lite_dw_if32of32wf32+0x2b4>
 8008564:	4252      	negs	r2, r2
 8008566:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8008568:	9311      	str	r3, [sp, #68]	; 0x44
 800856a:	921d      	str	r2, [sp, #116]	; 0x74
 800856c:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8008570:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8008572:	0127      	lsls	r7, r4, #4
 8008574:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8008576:	46c2      	mov	sl, r8
 8008578:	fb01 f202 	mul.w	r2, r1, r2
 800857c:	ed9f 3aa5 	vldr	s6, [pc, #660]	; 8008814 <forward_lite_dw_if32of32wf32+0x2e0>
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	46bc      	mov	ip, r7
 8008584:	921f      	str	r2, [sp, #124]	; 0x7c
 8008586:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8008588:	931c      	str	r3, [sp, #112]	; 0x70
 800858a:	fb02 f200 	mul.w	r2, r2, r0
 800858e:	9212      	str	r2, [sp, #72]	; 0x48
 8008590:	00e2      	lsls	r2, r4, #3
 8008592:	9200      	str	r2, [sp, #0]
 8008594:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8008596:	fb02 f303 	mul.w	r3, r2, r3
 800859a:	931e      	str	r3, [sp, #120]	; 0x78
 800859c:	2300      	movs	r3, #0
 800859e:	9314      	str	r3, [sp, #80]	; 0x50
 80085a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085a2:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085a8:	993a      	ldr	r1, [sp, #232]	; 0xe8
 80085aa:	441a      	add	r2, r3
 80085ac:	bfa8      	it	ge
 80085ae:	2300      	movge	r3, #0
 80085b0:	428a      	cmp	r2, r1
 80085b2:	bf28      	it	cs
 80085b4:	460a      	movcs	r2, r1
 80085b6:	9932      	ldr	r1, [sp, #200]	; 0xc8
 80085b8:	2900      	cmp	r1, #0
 80085ba:	f000 8103 	beq.w	80087c4 <forward_lite_dw_if32of32wf32+0x290>
 80085be:	eba2 0e03 	sub.w	lr, r2, r3
 80085c2:	e9dd 122e 	ldrd	r1, r2, [sp, #184]	; 0xb8
 80085c6:	46f3      	mov	fp, lr
 80085c8:	fbb2 f2f1 	udiv	r2, r2, r1
 80085cc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80085ce:	9207      	str	r2, [sp, #28]
 80085d0:	fb03 f101 	mul.w	r1, r3, r1
 80085d4:	9116      	str	r1, [sp, #88]	; 0x58
 80085d6:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80085d8:	fb03 f301 	mul.w	r3, r3, r1
 80085dc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80085de:	9318      	str	r3, [sp, #96]	; 0x60
 80085e0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80085e2:	eba3 030e 	sub.w	r3, r3, lr
 80085e6:	fb01 f303 	mul.w	r3, r1, r3
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	9308      	str	r3, [sp, #32]
 80085ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085f0:	930d      	str	r3, [sp, #52]	; 0x34
 80085f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80085f4:	930a      	str	r3, [sp, #40]	; 0x28
 80085f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085f8:	9309      	str	r3, [sp, #36]	; 0x24
 80085fa:	2300      	movs	r3, #0
 80085fc:	9315      	str	r3, [sp, #84]	; 0x54
 80085fe:	1e53      	subs	r3, r2, #1
 8008600:	931b      	str	r3, [sp, #108]	; 0x6c
 8008602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008604:	2b00      	cmp	r3, #0
 8008606:	f2c0 80ff 	blt.w	8008808 <forward_lite_dw_if32of32wf32+0x2d4>
 800860a:	2200      	movs	r2, #0
 800860c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800860e:	4610      	mov	r0, r2
 8008610:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008612:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008614:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008618:	9930      	ldr	r1, [sp, #192]	; 0xc0
 800861a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800861c:	4421      	add	r1, r4
 800861e:	9c3b      	ldr	r4, [sp, #236]	; 0xec
 8008620:	42a1      	cmp	r1, r4
 8008622:	bf94      	ite	ls
 8008624:	ebc0 0001 	rsbls	r0, r0, r1
 8008628:	ebc0 0004 	rsbhi	r0, r0, r4
 800862c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800862e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008630:	190c      	adds	r4, r1, r4
 8008632:	4414      	add	r4, r2
 8008634:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8008636:	1a11      	subs	r1, r2, r0
 8008638:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800863a:	1a12      	subs	r2, r2, r0
 800863c:	2d00      	cmp	r5, #0
 800863e:	f000 80d8 	beq.w	80087f2 <forward_lite_dw_if32of32wf32+0x2be>
 8008642:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8008644:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8008648:	442c      	add	r4, r5
 800864a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800864c:	fb0a 5404 	mla	r4, sl, r4, r5
 8008650:	9406      	str	r4, [sp, #24]
 8008652:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8008654:	940f      	str	r4, [sp, #60]	; 0x3c
 8008656:	9c06      	ldr	r4, [sp, #24]
 8008658:	eb04 050a 	add.w	r5, r4, sl
 800865c:	42a5      	cmp	r5, r4
 800865e:	9517      	str	r5, [sp, #92]	; 0x5c
 8008660:	f240 809a 	bls.w	8008798 <forward_lite_dw_if32of32wf32+0x264>
 8008664:	fb0a f101 	mul.w	r1, sl, r1
 8008668:	0092      	lsls	r2, r2, #2
 800866a:	f020 0803 	bic.w	r8, r0, #3
 800866e:	9101      	str	r1, [sp, #4]
 8008670:	9202      	str	r2, [sp, #8]
 8008672:	e9dd 212e 	ldrd	r2, r1, [sp, #184]	; 0xb8
 8008676:	428a      	cmp	r2, r1
 8008678:	f200 808e 	bhi.w	8008798 <forward_lite_dw_if32of32wf32+0x264>
 800867c:	2a01      	cmp	r2, #1
 800867e:	f040 80cb 	bne.w	8008818 <forward_lite_dw_if32of32wf32+0x2e4>
 8008682:	f108 31ff 	add.w	r1, r8, #4294967295
 8008686:	2200      	movs	r2, #0
 8008688:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800868c:	0889      	lsrs	r1, r1, #2
 800868e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008690:	1c4a      	adds	r2, r1, #1
 8008692:	fb01 c10c 	mla	r1, r1, ip, ip
 8008696:	e9dd e901 	ldrd	lr, r9, [sp, #4]
 800869a:	9105      	str	r1, [sp, #20]
 800869c:	0111      	lsls	r1, r2, #4
 800869e:	0092      	lsls	r2, r2, #2
 80086a0:	9104      	str	r1, [sp, #16]
 80086a2:	9203      	str	r2, [sp, #12]
 80086a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086a6:	2700      	movs	r7, #0
 80086a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80086aa:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80086ae:	9101      	str	r1, [sp, #4]
 80086b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086b2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80086b6:	9202      	str	r2, [sp, #8]
 80086b8:	9a01      	ldr	r2, [sp, #4]
 80086ba:	f1bb 0f00 	cmp.w	fp, #0
 80086be:	ecb2 7a01 	vldmia	r2!, {s14}
 80086c2:	ee23 7a87 	vmul.f32	s14, s7, s14
 80086c6:	9201      	str	r2, [sp, #4]
 80086c8:	dd4a      	ble.n	8008760 <forward_lite_dw_if32of32wf32+0x22c>
 80086ca:	9a06      	ldr	r2, [sp, #24]
 80086cc:	2600      	movs	r6, #0
 80086ce:	f1b8 0f00 	cmp.w	r8, #0
 80086d2:	f340 808c 	ble.w	80087ee <forward_lite_dw_if32of32wf32+0x2ba>
 80086d6:	9c00      	ldr	r4, [sp, #0]
 80086d8:	f103 0110 	add.w	r1, r3, #16
 80086dc:	f04f 0a00 	mov.w	sl, #0
 80086e0:	1915      	adds	r5, r2, r4
 80086e2:	4614      	mov	r4, r2
 80086e4:	ed51 6a03 	vldr	s13, [r1, #-12]
 80086e8:	f10a 0a04 	add.w	sl, sl, #4
 80086ec:	edd4 7a01 	vldr	s15, [r4, #4]
 80086f0:	3110      	adds	r1, #16
 80086f2:	ed94 4a00 	vldr	s8, [r4]
 80086f6:	45c2      	cmp	sl, r8
 80086f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80086fc:	ed51 4a08 	vldr	s9, [r1, #-32]	; 0xffffffe0
 8008700:	ed95 5a00 	vldr	s10, [r5]
 8008704:	4464      	add	r4, ip
 8008706:	ed51 5a06 	vldr	s11, [r1, #-24]	; 0xffffffe8
 800870a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800870e:	ed95 6a01 	vldr	s12, [r5, #4]
 8008712:	ed51 6a05 	vldr	s13, [r1, #-20]	; 0xffffffec
 8008716:	4465      	add	r5, ip
 8008718:	eee5 7a25 	vfma.f32	s15, s10, s11
 800871c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008724:	dbde      	blt.n	80086e4 <forward_lite_dw_if32of32wf32+0x1b0>
 8008726:	9905      	ldr	r1, [sp, #20]
 8008728:	440a      	add	r2, r1
 800872a:	9904      	ldr	r1, [sp, #16]
 800872c:	440b      	add	r3, r1
 800872e:	9903      	ldr	r1, [sp, #12]
 8008730:	4288      	cmp	r0, r1
 8008732:	dd10      	ble.n	8008756 <forward_lite_dw_if32of32wf32+0x222>
 8008734:	460c      	mov	r4, r1
 8008736:	4692      	mov	sl, r2
 8008738:	461d      	mov	r5, r3
 800873a:	3401      	adds	r4, #1
 800873c:	ecfa 6a01 	vldmia	sl!, {s13}
 8008740:	ecf5 7a01 	vldmia	r5!, {s15}
 8008744:	42a0      	cmp	r0, r4
 8008746:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800874a:	d1f6      	bne.n	800873a <forward_lite_dw_if32of32wf32+0x206>
 800874c:	1a41      	subs	r1, r0, r1
 800874e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008752:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008756:	3601      	adds	r6, #1
 8008758:	4472      	add	r2, lr
 800875a:	444b      	add	r3, r9
 800875c:	45b3      	cmp	fp, r6
 800875e:	d1b6      	bne.n	80086ce <forward_lite_dw_if32of32wf32+0x19a>
 8008760:	9a02      	ldr	r2, [sp, #8]
 8008762:	3701      	adds	r7, #1
 8008764:	eca2 7a01 	vstmia	r2!, {s14}
 8008768:	9202      	str	r2, [sp, #8]
 800876a:	9a08      	ldr	r2, [sp, #32]
 800876c:	4413      	add	r3, r2
 800876e:	9a07      	ldr	r2, [sp, #28]
 8008770:	4297      	cmp	r7, r2
 8008772:	d3a1      	bcc.n	80086b8 <forward_lite_dw_if32of32wf32+0x184>
 8008774:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008776:	9906      	ldr	r1, [sp, #24]
 8008778:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
 800877c:	3104      	adds	r1, #4
 800877e:	42ac      	cmp	r4, r5
 8008780:	bf88      	it	hi
 8008782:	2200      	movhi	r2, #0
 8008784:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008786:	9106      	str	r1, [sp, #24]
 8008788:	3201      	adds	r2, #1
 800878a:	4414      	add	r4, r2
 800878c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800878e:	4291      	cmp	r1, r2
 8008790:	940b      	str	r4, [sp, #44]	; 0x2c
 8008792:	d387      	bcc.n	80086a4 <forward_lite_dw_if32of32wf32+0x170>
 8008794:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800879a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800879c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800879e:	440a      	add	r2, r1
 80087a0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80087a2:	3301      	adds	r3, #1
 80087a4:	9209      	str	r2, [sp, #36]	; 0x24
 80087a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087a8:	9315      	str	r3, [sp, #84]	; 0x54
 80087aa:	440a      	add	r2, r1
 80087ac:	920a      	str	r2, [sp, #40]	; 0x28
 80087ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087b0:	1a52      	subs	r2, r2, r1
 80087b2:	920d      	str	r2, [sp, #52]	; 0x34
 80087b4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80087b6:	429a      	cmp	r2, r3
 80087b8:	f47f af23 	bne.w	8008602 <forward_lite_dw_if32of32wf32+0xce>
 80087bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80087c0:	4413      	add	r3, r2
 80087c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80087c4:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80087c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087ca:	440a      	add	r2, r1
 80087cc:	3301      	adds	r3, #1
 80087ce:	920e      	str	r2, [sp, #56]	; 0x38
 80087d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80087d2:	9314      	str	r3, [sp, #80]	; 0x50
 80087d4:	1a52      	subs	r2, r2, r1
 80087d6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80087d8:	9211      	str	r2, [sp, #68]	; 0x44
 80087da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087dc:	440a      	add	r2, r1
 80087de:	9212      	str	r2, [sp, #72]	; 0x48
 80087e0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 80087e2:	429a      	cmp	r2, r3
 80087e4:	f47f aedc 	bne.w	80085a0 <forward_lite_dw_if32of32wf32+0x6c>
 80087e8:	b025      	add	sp, #148	; 0x94
 80087ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ee:	2100      	movs	r1, #0
 80087f0:	e79e      	b.n	8008730 <forward_lite_dw_if32of32wf32+0x1fc>
 80087f2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80087f4:	eef0 3a43 	vmov.f32	s7, s6
 80087f8:	442c      	add	r4, r5
 80087fa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80087fc:	fb0a 5404 	mla	r4, sl, r4, r5
 8008800:	9406      	str	r4, [sp, #24]
 8008802:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008804:	940f      	str	r4, [sp, #60]	; 0x3c
 8008806:	e726      	b.n	8008656 <forward_lite_dw_if32of32wf32+0x122>
 8008808:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800880a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800880c:	4610      	mov	r0, r2
 800880e:	4413      	add	r3, r2
 8008810:	e6fe      	b.n	8008610 <forward_lite_dw_if32of32wf32+0xdc>
 8008812:	bf00      	nop
 8008814:	00000000 	.word	0x00000000
 8008818:	f108 31ff 	add.w	r1, r8, #4294967295
 800881c:	2200      	movs	r2, #0
 800881e:	0889      	lsrs	r1, r1, #2
 8008820:	9210      	str	r2, [sp, #64]	; 0x40
 8008822:	1c4a      	adds	r2, r1, #1
 8008824:	fb01 c10c 	mla	r1, r1, ip, ip
 8008828:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800882c:	9104      	str	r1, [sp, #16]
 800882e:	0111      	lsls	r1, r2, #4
 8008830:	9103      	str	r1, [sp, #12]
 8008832:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
 8008836:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800883a:	910b      	str	r1, [sp, #44]	; 0x2c
 800883c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800883e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008842:	920c      	str	r2, [sp, #48]	; 0x30
 8008844:	2200      	movs	r2, #0
 8008846:	9205      	str	r2, [sp, #20]
 8008848:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800884a:	f1bb 0f00 	cmp.w	fp, #0
 800884e:	ecb2 7a01 	vldmia	r2!, {s14}
 8008852:	ee27 7a23 	vmul.f32	s14, s14, s7
 8008856:	920b      	str	r2, [sp, #44]	; 0x2c
 8008858:	dd4f      	ble.n	80088fa <forward_lite_dw_if32of32wf32+0x3c6>
 800885a:	9906      	ldr	r1, [sp, #24]
 800885c:	2700      	movs	r7, #0
 800885e:	f1b8 0f00 	cmp.w	r8, #0
 8008862:	dd68      	ble.n	8008936 <forward_lite_dw_if32of32wf32+0x402>
 8008864:	9c00      	ldr	r4, [sp, #0]
 8008866:	f103 0210 	add.w	r2, r3, #16
 800886a:	2600      	movs	r6, #0
 800886c:	190d      	adds	r5, r1, r4
 800886e:	460c      	mov	r4, r1
 8008870:	eb04 0e0a 	add.w	lr, r4, sl
 8008874:	ed12 4a03 	vldr	s8, [r2, #-12]
 8008878:	ed52 4a04 	vldr	s9, [r2, #-16]
 800887c:	3604      	adds	r6, #4
 800887e:	edde 7a00 	vldr	s15, [lr]
 8008882:	eb05 0e0a 	add.w	lr, r5, sl
 8008886:	ed94 5a00 	vldr	s10, [r4]
 800888a:	4546      	cmp	r6, r8
 800888c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008890:	edd5 6a00 	vldr	s13, [r5]
 8008894:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008898:	4464      	add	r4, ip
 800889a:	ed12 6a01 	vldr	s12, [r2, #-4]
 800889e:	4465      	add	r5, ip
 80088a0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80088a4:	f102 0210 	add.w	r2, r2, #16
 80088a8:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80088ac:	edde 6a00 	vldr	s13, [lr]
 80088b0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80088b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088b8:	dbda      	blt.n	8008870 <forward_lite_dw_if32of32wf32+0x33c>
 80088ba:	9a04      	ldr	r2, [sp, #16]
 80088bc:	4411      	add	r1, r2
 80088be:	9a03      	ldr	r2, [sp, #12]
 80088c0:	4413      	add	r3, r2
 80088c2:	464a      	mov	r2, r9
 80088c4:	4290      	cmp	r0, r2
 80088c6:	dd11      	ble.n	80088ec <forward_lite_dw_if32of32wf32+0x3b8>
 80088c8:	4615      	mov	r5, r2
 80088ca:	460c      	mov	r4, r1
 80088cc:	461e      	mov	r6, r3
 80088ce:	3501      	adds	r5, #1
 80088d0:	edd4 7a00 	vldr	s15, [r4]
 80088d4:	ecf6 6a01 	vldmia	r6!, {s13}
 80088d8:	4454      	add	r4, sl
 80088da:	42a8      	cmp	r0, r5
 80088dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088e0:	d1f5      	bne.n	80088ce <forward_lite_dw_if32of32wf32+0x39a>
 80088e2:	1a82      	subs	r2, r0, r2
 80088e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80088e8:	fb02 110a 	mla	r1, r2, sl, r1
 80088ec:	9a01      	ldr	r2, [sp, #4]
 80088ee:	3701      	adds	r7, #1
 80088f0:	4411      	add	r1, r2
 80088f2:	45bb      	cmp	fp, r7
 80088f4:	9a02      	ldr	r2, [sp, #8]
 80088f6:	4413      	add	r3, r2
 80088f8:	d1b1      	bne.n	800885e <forward_lite_dw_if32of32wf32+0x32a>
 80088fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088fc:	9a05      	ldr	r2, [sp, #20]
 80088fe:	eca1 7a01 	vstmia	r1!, {s14}
 8008902:	910c      	str	r1, [sp, #48]	; 0x30
 8008904:	3201      	adds	r2, #1
 8008906:	9908      	ldr	r1, [sp, #32]
 8008908:	9205      	str	r2, [sp, #20]
 800890a:	440b      	add	r3, r1
 800890c:	9907      	ldr	r1, [sp, #28]
 800890e:	4291      	cmp	r1, r2
 8008910:	d89a      	bhi.n	8008848 <forward_lite_dw_if32of32wf32+0x314>
 8008912:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008914:	9906      	ldr	r1, [sp, #24]
 8008916:	e9dd 452e 	ldrd	r4, r5, [sp, #184]	; 0xb8
 800891a:	3104      	adds	r1, #4
 800891c:	42ac      	cmp	r4, r5
 800891e:	bf88      	it	hi
 8008920:	2200      	movhi	r2, #0
 8008922:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008924:	9106      	str	r1, [sp, #24]
 8008926:	3201      	adds	r2, #1
 8008928:	4414      	add	r4, r2
 800892a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800892c:	428a      	cmp	r2, r1
 800892e:	9410      	str	r4, [sp, #64]	; 0x40
 8008930:	f63f af7f 	bhi.w	8008832 <forward_lite_dw_if32of32wf32+0x2fe>
 8008934:	e730      	b.n	8008798 <forward_lite_dw_if32of32wf32+0x264>
 8008936:	2200      	movs	r2, #0
 8008938:	e7c4      	b.n	80088c4 <forward_lite_dw_if32of32wf32+0x390>
 800893a:	bf00      	nop

0800893c <forward_lite_nl_softmax_if32of32_kernel>:
 800893c:	2a01      	cmp	r2, #1
 800893e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008942:	4617      	mov	r7, r2
 8008944:	ed2d 8b02 	vpush	{d8}
 8008948:	ed91 8a00 	vldr	s16, [r1]
 800894c:	d932      	bls.n	80089b4 <forward_lite_nl_softmax_if32of32_kernel+0x78>
 800894e:	1d0b      	adds	r3, r1, #4
 8008950:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008954:	ecf3 7a01 	vldmia	r3!, {s15}
 8008958:	429a      	cmp	r2, r3
 800895a:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800895e:	d1f9      	bne.n	8008954 <forward_lite_nl_softmax_if32of32_kernel+0x18>
 8008960:	4606      	mov	r6, r0
 8008962:	460d      	mov	r5, r1
 8008964:	2400      	movs	r4, #0
 8008966:	eddf 8a16 	vldr	s17, [pc, #88]	; 80089c0 <forward_lite_nl_softmax_if32of32_kernel+0x84>
 800896a:	4680      	mov	r8, r0
 800896c:	ecb5 0a01 	vldmia	r5!, {s0}
 8008970:	3401      	adds	r4, #1
 8008972:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008976:	f003 fb6b 	bl	800c050 <expf>
 800897a:	42a7      	cmp	r7, r4
 800897c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8008980:	eca8 0a01 	vstmia	r8!, {s0}
 8008984:	d8f2      	bhi.n	800896c <forward_lite_nl_softmax_if32of32_kernel+0x30>
 8008986:	eef5 8a40 	vcmp.f32	s17, #0.0
 800898a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800898e:	d00d      	beq.n	80089ac <forward_lite_nl_softmax_if32of32_kernel+0x70>
 8008990:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008994:	2300      	movs	r3, #0
 8008996:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800899a:	edd6 7a00 	vldr	s15, [r6]
 800899e:	3301      	adds	r3, #1
 80089a0:	429f      	cmp	r7, r3
 80089a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089a6:	ece6 7a01 	vstmia	r6!, {s15}
 80089aa:	d8f6      	bhi.n	800899a <forward_lite_nl_softmax_if32of32_kernel+0x5e>
 80089ac:	ecbd 8b02 	vpop	{d8}
 80089b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b4:	2a00      	cmp	r2, #0
 80089b6:	d1d3      	bne.n	8008960 <forward_lite_nl_softmax_if32of32_kernel+0x24>
 80089b8:	ecbd 8b02 	vpop	{d8}
 80089bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c0:	00000000 	.word	0x00000000

080089c4 <forward_lite_nl_relu_generic_if32of32_kernel>:
 80089c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80089c8:	ed93 7a00 	vldr	s14, [r3]
 80089cc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80089d0:	ed93 6a01 	vldr	s12, [r3, #4]
 80089d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d8:	d42b      	bmi.n	8008a32 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 80089da:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80089de:	4413      	add	r3, r2
 80089e0:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80089e4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80089e8:	4291      	cmp	r1, r2
 80089ea:	d821      	bhi.n	8008a30 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80089ec:	f10c 0104 	add.w	r1, ip, #4
 80089f0:	1d13      	adds	r3, r2, #4
 80089f2:	eba2 020c 	sub.w	r2, r2, ip
 80089f6:	4408      	add	r0, r1
 80089f8:	e00c      	b.n	8008a14 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80089fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089fe:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8008a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a06:	db01      	blt.n	8008a0c <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8008a08:	ee65 7a86 	vmul.f32	s15, s11, s12
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	ed60 7a01 	vstmdb	r0!, {s15}
 8008a12:	d00c      	beq.n	8008a2e <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8008a14:	ed73 7a01 	vldmdb	r3!, {s15}
 8008a18:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a20:	daeb      	bge.n	80089fa <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8008a22:	eef0 7a66 	vmov.f32	s15, s13
 8008a26:	4293      	cmp	r3, r2
 8008a28:	ed60 7a01 	vstmdb	r0!, {s15}
 8008a2c:	d1f2      	bne.n	8008a14 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8008a2e:	4770      	bx	lr
 8008a30:	4770      	bx	lr
 8008a32:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008a36:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008a3a:	4413      	add	r3, r2
 8008a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a40:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8008a44:	b500      	push	{lr}
 8008a46:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8008a4a:	d019      	beq.n	8008a80 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8008a4c:	4561      	cmp	r1, ip
 8008a4e:	d815      	bhi.n	8008a7c <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8008a50:	f10e 0204 	add.w	r2, lr, #4
 8008a54:	f10c 0304 	add.w	r3, ip, #4
 8008a58:	ebac 010e 	sub.w	r1, ip, lr
 8008a5c:	4402      	add	r2, r0
 8008a5e:	ed73 7a01 	vldmdb	r3!, {s15}
 8008a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a66:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a6e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008a72:	d827      	bhi.n	8008ac4 <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 8008a74:	428b      	cmp	r3, r1
 8008a76:	ed62 6a01 	vstmdb	r2!, {s13}
 8008a7a:	d1f0      	bne.n	8008a5e <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8008a7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a80:	4561      	cmp	r1, ip
 8008a82:	d8fb      	bhi.n	8008a7c <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8008a84:	f10e 0204 	add.w	r2, lr, #4
 8008a88:	f10c 0304 	add.w	r3, ip, #4
 8008a8c:	ebac 010e 	sub.w	r1, ip, lr
 8008a90:	f04f 0c00 	mov.w	ip, #0
 8008a94:	4402      	add	r2, r0
 8008a96:	ed73 7a01 	vldmdb	r3!, {s15}
 8008a9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa2:	d40a      	bmi.n	8008aba <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 8008aa4:	428b      	cmp	r3, r1
 8008aa6:	f842 cd04 	str.w	ip, [r2, #-4]!
 8008aaa:	d0e7      	beq.n	8008a7c <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8008aac:	ed73 7a01 	vldmdb	r3!, {s15}
 8008ab0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab8:	d5f4      	bpl.n	8008aa4 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8008aba:	428b      	cmp	r3, r1
 8008abc:	ed62 7a01 	vstmdb	r2!, {s15}
 8008ac0:	d1e9      	bne.n	8008a96 <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 8008ac2:	e7db      	b.n	8008a7c <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8008ac4:	428b      	cmp	r3, r1
 8008ac6:	ed62 7a01 	vstmdb	r2!, {s15}
 8008aca:	d1c8      	bne.n	8008a5e <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8008acc:	e7d6      	b.n	8008a7c <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8008ace:	bf00      	nop

08008ad0 <lite_decompress_ilutof32>:
 8008ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ad4:	9d08      	ldr	r5, [sp, #32]
 8008ad6:	2b04      	cmp	r3, #4
 8008ad8:	ea4f 0685 	mov.w	r6, r5, lsl #2
 8008adc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8008ae0:	d014      	beq.n	8008b0c <lite_decompress_ilutof32+0x3c>
 8008ae2:	2b08      	cmp	r3, #8
 8008ae4:	d10f      	bne.n	8008b06 <lite_decompress_ilutof32+0x36>
 8008ae6:	42a8      	cmp	r0, r5
 8008ae8:	d20d      	bcs.n	8008b06 <lite_decompress_ilutof32+0x36>
 8008aea:	460c      	mov	r4, r1
 8008aec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008af0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f840 3b04 	str.w	r3, [r0], #4
 8008afa:	4285      	cmp	r5, r0
 8008afc:	d8f6      	bhi.n	8008aec <lite_decompress_ilutof32+0x1c>
 8008afe:	3e01      	subs	r6, #1
 8008b00:	eb01 0696 	add.w	r6, r1, r6, lsr #2
 8008b04:	1c71      	adds	r1, r6, #1
 8008b06:	4608      	mov	r0, r1
 8008b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b0c:	9b07      	ldr	r3, [sp, #28]
 8008b0e:	085e      	lsrs	r6, r3, #1
 8008b10:	f003 0701 	and.w	r7, r3, #1
 8008b14:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8008b18:	f106 38ff 	add.w	r8, r6, #4294967295
 8008b1c:	42a8      	cmp	r0, r5
 8008b1e:	d2f2      	bcs.n	8008b06 <lite_decompress_ilutof32+0x36>
 8008b20:	b33e      	cbz	r6, 8008b72 <lite_decompress_ilutof32+0xa2>
 8008b22:	f100 0e08 	add.w	lr, r0, #8
 8008b26:	f101 3cff 	add.w	ip, r1, #4294967295
 8008b2a:	eb01 0408 	add.w	r4, r1, r8
 8008b2e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8008b32:	f10e 0e08 	add.w	lr, lr, #8
 8008b36:	091b      	lsrs	r3, r3, #4
 8008b38:	4564      	cmp	r4, ip
 8008b3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f84e 3c10 	str.w	r3, [lr, #-16]
 8008b44:	f89c 3000 	ldrb.w	r3, [ip]
 8008b48:	f003 030f 	and.w	r3, r3, #15
 8008b4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8008b56:	d1ea      	bne.n	8008b2e <lite_decompress_ilutof32+0x5e>
 8008b58:	4431      	add	r1, r6
 8008b5a:	4448      	add	r0, r9
 8008b5c:	2f00      	cmp	r7, #0
 8008b5e:	d0dd      	beq.n	8008b1c <lite_decompress_ilutof32+0x4c>
 8008b60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b64:	091b      	lsrs	r3, r3, #4
 8008b66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f840 3b04 	str.w	r3, [r0], #4
 8008b70:	e7d4      	b.n	8008b1c <lite_decompress_ilutof32+0x4c>
 8008b72:	2f00      	cmp	r7, #0
 8008b74:	d1f4      	bne.n	8008b60 <lite_decompress_ilutof32+0x90>
 8008b76:	42a8      	cmp	r0, r5
 8008b78:	d3fd      	bcc.n	8008b76 <lite_decompress_ilutof32+0xa6>
 8008b7a:	4608      	mov	r0, r1
 8008b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008b80 <forward_lite_dense_if32of32wf32>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	ed2d 8b0c 	vpush	{d8-d13}
 8008b88:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8008b8c:	6801      	ldr	r1, [r0, #0]
 8008b8e:	b083      	sub	sp, #12
 8008b90:	fb02 f303 	mul.w	r3, r2, r3
 8008b94:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8008b98:	9100      	str	r1, [sp, #0]
 8008b9a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008b9e:	4299      	cmp	r1, r3
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	f080 811c 	bcs.w	8008dde <forward_lite_dense_if32of32wf32+0x25e>
 8008ba6:	4607      	mov	r7, r0
 8008ba8:	6904      	ldr	r4, [r0, #16]
 8008baa:	0096      	lsls	r6, r2, #2
 8008bac:	9b00      	ldr	r3, [sp, #0]
 8008bae:	68bd      	ldr	r5, [r7, #8]
 8008bb0:	eb03 0e06 	add.w	lr, r3, r6
 8008bb4:	461e      	mov	r6, r3
 8008bb6:	459e      	cmp	lr, r3
 8008bb8:	f240 8103 	bls.w	8008dc2 <forward_lite_dense_if32of32wf32+0x242>
 8008bbc:	f1a4 0c10 	sub.w	ip, r4, #16
 8008bc0:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8008bc4:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8008bc8:	f10c 0c01 	add.w	ip, ip, #1
 8008bcc:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8008bd0:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8008bd4:	2c0f      	cmp	r4, #15
 8008bd6:	f240 8107 	bls.w	8008de8 <forward_lite_dense_if32of32wf32+0x268>
 8008bda:	f108 0240 	add.w	r2, r8, #64	; 0x40
 8008bde:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8008be2:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8008e38 <forward_lite_dense_if32of32wf32+0x2b8>
 8008be6:	4621      	mov	r1, r4
 8008be8:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8008bec:	3910      	subs	r1, #16
 8008bee:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008bf2:	3340      	adds	r3, #64	; 0x40
 8008bf4:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8008bf8:	290f      	cmp	r1, #15
 8008bfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008bfe:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8008c02:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8008c06:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8008c0a:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 8008c0e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008c12:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 8008c16:	ed12 da1d 	vldr	s26, [r2, #-116]	; 0xffffff8c
 8008c1a:	ed52 ca1c 	vldr	s25, [r2, #-112]	; 0xffffff90
 8008c1e:	ed13 ca1c 	vldr	s24, [r3, #-112]	; 0xffffff90
 8008c22:	ed52 ba1b 	vldr	s23, [r2, #-108]	; 0xffffff94
 8008c26:	ed13 ba1b 	vldr	s22, [r3, #-108]	; 0xffffff94
 8008c2a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008c2e:	ed52 aa1a 	vldr	s21, [r2, #-104]	; 0xffffff98
 8008c32:	ed13 aa1a 	vldr	s20, [r3, #-104]	; 0xffffff98
 8008c36:	ed52 9a19 	vldr	s19, [r2, #-100]	; 0xffffff9c
 8008c3a:	ed13 9a19 	vldr	s18, [r3, #-100]	; 0xffffff9c
 8008c3e:	ed52 8a18 	vldr	s17, [r2, #-96]	; 0xffffffa0
 8008c42:	ed13 8a18 	vldr	s16, [r3, #-96]	; 0xffffffa0
 8008c46:	eeed 7a26 	vfma.f32	s15, s26, s13
 8008c4a:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 8008c4e:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 8008c52:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 8008c56:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 8008c5a:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 8008c5e:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 8008c62:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008c66:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8008c6a:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8008c6e:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8008c72:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8008c76:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8008c7a:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8008c7e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008c82:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8008c86:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8008c8a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8008c8e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008c92:	eee8 7a88 	vfma.f32	s15, s17, s16
 8008c96:	eee0 7a20 	vfma.f32	s15, s0, s1
 8008c9a:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008c9e:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008ca2:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008ca6:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008caa:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008cae:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008cb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008cb6:	d897      	bhi.n	8008be8 <forward_lite_dense_if32of32wf32+0x68>
 8008cb8:	eb05 020b 	add.w	r2, r5, fp
 8008cbc:	f004 010f 	and.w	r1, r4, #15
 8008cc0:	4663      	mov	r3, ip
 8008cc2:	2903      	cmp	r1, #3
 8008cc4:	d95f      	bls.n	8008d86 <forward_lite_dense_if32of32wf32+0x206>
 8008cc6:	edd2 6a01 	vldr	s13, [r2, #4]
 8008cca:	1f08      	subs	r0, r1, #4
 8008ccc:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cd0:	ed93 4a00 	vldr	s8, [r3]
 8008cd4:	2803      	cmp	r0, #3
 8008cd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008cda:	edd2 4a00 	vldr	s9, [r2]
 8008cde:	ed93 5a02 	vldr	s10, [r3, #8]
 8008ce2:	edd2 5a02 	vldr	s11, [r2, #8]
 8008ce6:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008cea:	ed93 6a03 	vldr	s12, [r3, #12]
 8008cee:	edd2 6a03 	vldr	s13, [r2, #12]
 8008cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cf6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008cfa:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008cfe:	eeb0 7a67 	vmov.f32	s14, s15
 8008d02:	d938      	bls.n	8008d76 <forward_lite_dense_if32of32wf32+0x1f6>
 8008d04:	edd2 6a05 	vldr	s13, [r2, #20]
 8008d08:	f1a1 0a08 	sub.w	sl, r1, #8
 8008d0c:	edd3 7a05 	vldr	s15, [r3, #20]
 8008d10:	ed93 4a04 	vldr	s8, [r3, #16]
 8008d14:	f1ba 0f03 	cmp.w	sl, #3
 8008d18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008d1c:	edd2 4a04 	vldr	s9, [r2, #16]
 8008d20:	ed93 5a06 	vldr	s10, [r3, #24]
 8008d24:	edd2 5a06 	vldr	s11, [r2, #24]
 8008d28:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008d2c:	ed93 6a07 	vldr	s12, [r3, #28]
 8008d30:	edd2 6a07 	vldr	s13, [r2, #28]
 8008d34:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008d38:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008d3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d40:	d919      	bls.n	8008d76 <forward_lite_dense_if32of32wf32+0x1f6>
 8008d42:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8008d46:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8008d4a:	ed92 4a08 	vldr	s8, [r2, #32]
 8008d4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008d52:	edd3 4a08 	vldr	s9, [r3, #32]
 8008d56:	ed92 5a0a 	vldr	s10, [r2, #40]	; 0x28
 8008d5a:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 8008d5e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008d62:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 8008d66:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8008d6a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008d6e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008d72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d76:	0880      	lsrs	r0, r0, #2
 8008d78:	f001 0103 	and.w	r1, r1, #3
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8008d82:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8008d86:	b1a9      	cbz	r1, 8008db4 <forward_lite_dense_if32of32wf32+0x234>
 8008d88:	edd3 6a00 	vldr	s13, [r3]
 8008d8c:	3901      	subs	r1, #1
 8008d8e:	edd2 7a00 	vldr	s15, [r2]
 8008d92:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d96:	d00d      	beq.n	8008db4 <forward_lite_dense_if32of32wf32+0x234>
 8008d98:	edd3 6a01 	vldr	s13, [r3, #4]
 8008d9c:	2901      	cmp	r1, #1
 8008d9e:	edd2 7a01 	vldr	s15, [r2, #4]
 8008da2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008da6:	d005      	beq.n	8008db4 <forward_lite_dense_if32of32wf32+0x234>
 8008da8:	edd2 6a02 	vldr	s13, [r2, #8]
 8008dac:	edd3 7a02 	vldr	s15, [r3, #8]
 8008db0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008db4:	eca6 7a01 	vstmia	r6!, {s14}
 8008db8:	45b6      	cmp	lr, r6
 8008dba:	444d      	add	r5, r9
 8008dbc:	f63f af0a 	bhi.w	8008bd4 <forward_lite_dense_if32of32wf32+0x54>
 8008dc0:	697a      	ldr	r2, [r7, #20]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	b9b3      	cbnz	r3, 8008df4 <forward_lite_dense_if32of32wf32+0x274>
 8008dc6:	9b00      	ldr	r3, [sp, #0]
 8008dc8:	0096      	lsls	r6, r2, #2
 8008dca:	9901      	ldr	r1, [sp, #4]
 8008dcc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008dd0:	693c      	ldr	r4, [r7, #16]
 8008dd2:	4299      	cmp	r1, r3
 8008dd4:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	f63f aee7 	bhi.w	8008bac <forward_lite_dense_if32of32wf32+0x2c>
 8008dde:	b003      	add	sp, #12
 8008de0:	ecbd 8b0c 	vpop	{d8-d13}
 8008de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de8:	4621      	mov	r1, r4
 8008dea:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8008e38 <forward_lite_dense_if32of32wf32+0x2b8>
 8008dee:	462a      	mov	r2, r5
 8008df0:	4643      	mov	r3, r8
 8008df2:	e766      	b.n	8008cc2 <forward_lite_dense_if32of32wf32+0x142>
 8008df4:	2a00      	cmp	r2, #0
 8008df6:	d0e6      	beq.n	8008dc6 <forward_lite_dense_if32of32wf32+0x246>
 8008df8:	9a00      	ldr	r2, [sp, #0]
 8008dfa:	ed93 7a00 	vldr	s14, [r3]
 8008dfe:	edd2 7a00 	vldr	s15, [r2]
 8008e02:	4613      	mov	r3, r2
 8008e04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e08:	edc2 7a00 	vstr	s15, [r2]
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	2a01      	cmp	r2, #1
 8008e10:	d9d9      	bls.n	8008dc6 <forward_lite_dense_if32of32wf32+0x246>
 8008e12:	1d19      	adds	r1, r3, #4
 8008e14:	2301      	movs	r3, #1
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	ed91 7a00 	vldr	s14, [r1]
 8008e1c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008e20:	3301      	adds	r3, #1
 8008e22:	edd2 7a00 	vldr	s15, [r2]
 8008e26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e2a:	ece1 7a01 	vstmia	r1!, {s15}
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d8f0      	bhi.n	8008e16 <forward_lite_dense_if32of32wf32+0x296>
 8008e34:	e7c7      	b.n	8008dc6 <forward_lite_dense_if32of32wf32+0x246>
 8008e36:	bf00      	nop
 8008e38:	00000000 	.word	0x00000000

08008e3c <forward_lite_dense_if32of32wf32_lut4>:
 8008e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e40:	b08d      	sub	sp, #52	; 0x34
 8008e42:	4605      	mov	r5, r0
 8008e44:	460c      	mov	r4, r1
 8008e46:	9005      	str	r0, [sp, #20]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	920a      	str	r2, [sp, #40]	; 0x28
 8008e4c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8008e4e:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 8008e52:	fb02 f303 	mul.w	r3, r2, r3
 8008e56:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008e5a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8008e5c:	9308      	str	r3, [sp, #32]
 8008e5e:	b126      	cbz	r6, 8008e6a <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8008e60:	2240      	movs	r2, #64	; 0x40
 8008e62:	4631      	mov	r1, r6
 8008e64:	f000 fbc4 	bl	80095f0 <st_int8_copy>
 8008e68:	4630      	mov	r0, r6
 8008e6a:	9b05      	ldr	r3, [sp, #20]
 8008e6c:	9a08      	ldr	r2, [sp, #32]
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	f080 80f7 	bcs.w	8009062 <forward_lite_dense_if32of32wf32_lut4+0x226>
 8008e74:	08eb      	lsrs	r3, r5, #3
 8008e76:	f005 0101 	and.w	r1, r5, #1
 8008e7a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e7c:	f025 0801 	bic.w	r8, r5, #1
 8008e80:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	9102      	str	r1, [sp, #8]
 8008e8a:	0092      	lsls	r2, r2, #2
 8008e8c:	f104 0b20 	add.w	fp, r4, #32
 8008e90:	00a9      	lsls	r1, r5, #2
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8008e98:	9b05      	ldr	r3, [sp, #20]
 8008e9a:	9207      	str	r2, [sp, #28]
 8008e9c:	9109      	str	r1, [sp, #36]	; 0x24
 8008e9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008ea0:	9a07      	ldr	r2, [sp, #28]
 8008ea2:	eb03 0902 	add.w	r9, r3, r2
 8008ea6:	f1ab 0220 	sub.w	r2, fp, #32
 8008eaa:	4599      	cmp	r9, r3
 8008eac:	9206      	str	r2, [sp, #24]
 8008eae:	f240 80db 	bls.w	8009068 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8008eb2:	469e      	mov	lr, r3
 8008eb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008eb6:	f108 33ff 	add.w	r3, r8, #4294967295
 8008eba:	9303      	str	r3, [sp, #12]
 8008ebc:	9b01      	ldr	r3, [sp, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f000 80b4 	beq.w	800902c <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8008ec4:	9b04      	ldr	r3, [sp, #16]
 8008ec6:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800908c <forward_lite_dense_if32of32wf32_lut4+0x250>
 8008eca:	18d4      	adds	r4, r2, r3
 8008ecc:	465b      	mov	r3, fp
 8008ece:	7816      	ldrb	r6, [r2, #0]
 8008ed0:	3204      	adds	r2, #4
 8008ed2:	ed53 2a07 	vldr	s5, [r3, #-28]	; 0xffffffe4
 8008ed6:	3320      	adds	r3, #32
 8008ed8:	f006 070f 	and.w	r7, r6, #15
 8008edc:	0936      	lsrs	r6, r6, #4
 8008ede:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 8008ee2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8008ee6:	ed13 4a10 	vldr	s8, [r3, #-64]	; 0xffffffc0
 8008eea:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008eee:	ed53 3a0e 	vldr	s7, [r3, #-56]	; 0xffffffc8
 8008ef2:	edd7 7a00 	vldr	s15, [r7]
 8008ef6:	ed96 3a00 	vldr	s6, [r6]
 8008efa:	092e      	lsrs	r6, r5, #4
 8008efc:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8008f00:	f005 050f 	and.w	r5, r5, #15
 8008f04:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008f08:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8008f0c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8008f10:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 8008f14:	eee3 7a04 	vfma.f32	s15, s6, s8
 8008f18:	ed96 3a00 	vldr	s6, [r6]
 8008f1c:	ed95 4a00 	vldr	s8, [r5]
 8008f20:	090d      	lsrs	r5, r1, #4
 8008f22:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8008f26:	f001 010f 	and.w	r1, r1, #15
 8008f2a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8008f2e:	ed13 6a0b 	vldr	s12, [r3, #-44]	; 0xffffffd4
 8008f32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f36:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 8008f3a:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 8008f3e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008f42:	eee4 7a05 	vfma.f32	s15, s8, s10
 8008f46:	ed95 4a00 	vldr	s8, [r5]
 8008f4a:	ed91 5a00 	vldr	s10, [r1]
 8008f4e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008f52:	42a2      	cmp	r2, r4
 8008f54:	ea4f 1511 	mov.w	r5, r1, lsr #4
 8008f58:	f001 010f 	and.w	r1, r1, #15
 8008f5c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008f60:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8008f64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f68:	eee5 7a06 	vfma.f32	s15, s10, s12
 8008f6c:	ed95 5a00 	vldr	s10, [r5]
 8008f70:	ed91 6a00 	vldr	s12, [r1]
 8008f74:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008f78:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008f7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008f80:	d1a5      	bne.n	8008ece <forward_lite_dense_if32of32wf32_lut4+0x92>
 8008f82:	4656      	mov	r6, sl
 8008f84:	4546      	cmp	r6, r8
 8008f86:	d257      	bcs.n	8009038 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8008f88:	9b03      	ldr	r3, [sp, #12]
 8008f8a:	f106 0208 	add.w	r2, r6, #8
 8008f8e:	1e61      	subs	r1, r4, #1
 8008f90:	1b9d      	subs	r5, r3, r6
 8008f92:	08ef      	lsrs	r7, r5, #3
 8008f94:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 8008f98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008f9c:	3208      	adds	r2, #8
 8008f9e:	ed52 5a03 	vldr	s11, [r2, #-12]
 8008fa2:	f003 0c0f 	and.w	ip, r3, #15
 8008fa6:	091b      	lsrs	r3, r3, #4
 8008fa8:	ed52 6a04 	vldr	s13, [r2, #-16]
 8008fac:	42a9      	cmp	r1, r5
 8008fae:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8008fb2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008fb6:	eddc 7a00 	vldr	s15, [ip]
 8008fba:	ed93 6a00 	vldr	s12, [r3]
 8008fbe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008fc2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008fc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008fca:	d1e5      	bne.n	8008f98 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 8008fcc:	3701      	adds	r7, #1
 8008fce:	19e2      	adds	r2, r4, r7
 8008fd0:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8008fd4:	9b02      	ldr	r3, [sp, #8]
 8008fd6:	b30b      	cbz	r3, 800901c <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 8008fd8:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008fdc:	edd6 7a00 	vldr	s15, [r6]
 8008fe0:	091b      	lsrs	r3, r3, #4
 8008fe2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008fe6:	edd3 6a00 	vldr	s13, [r3]
 8008fea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008fee:	ecae 7a01 	vstmia	lr!, {s14}
 8008ff2:	45f1      	cmp	r9, lr
 8008ff4:	f63f af62 	bhi.w	8008ebc <forward_lite_dense_if32of32wf32_lut4+0x80>
 8008ff8:	9b05      	ldr	r3, [sp, #20]
 8008ffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ffc:	1899      	adds	r1, r3, r2
 8008ffe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009000:	b9e3      	cbnz	r3, 800903c <forward_lite_dense_if32of32wf32_lut4+0x200>
 8009002:	9b08      	ldr	r3, [sp, #32]
 8009004:	428b      	cmp	r3, r1
 8009006:	d92c      	bls.n	8009062 <forward_lite_dense_if32of32wf32_lut4+0x226>
 8009008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900a:	4498      	add	r8, r3
 800900c:	449a      	add	sl, r3
 800900e:	449b      	add	fp, r3
 8009010:	9b05      	ldr	r3, [sp, #20]
 8009012:	4599      	cmp	r9, r3
 8009014:	d92a      	bls.n	800906c <forward_lite_dense_if32of32wf32_lut4+0x230>
 8009016:	460b      	mov	r3, r1
 8009018:	9105      	str	r1, [sp, #20]
 800901a:	e741      	b.n	8008ea0 <forward_lite_dense_if32of32wf32_lut4+0x64>
 800901c:	ecae 7a01 	vstmia	lr!, {s14}
 8009020:	45f1      	cmp	r9, lr
 8009022:	d9e9      	bls.n	8008ff8 <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 8009024:	9b01      	ldr	r3, [sp, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	f47f af4c 	bne.w	8008ec4 <forward_lite_dense_if32of32wf32_lut4+0x88>
 800902c:	9e06      	ldr	r6, [sp, #24]
 800902e:	4614      	mov	r4, r2
 8009030:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800908c <forward_lite_dense_if32of32wf32_lut4+0x250>
 8009034:	4546      	cmp	r6, r8
 8009036:	d3a7      	bcc.n	8008f88 <forward_lite_dense_if32of32wf32_lut4+0x14c>
 8009038:	4622      	mov	r2, r4
 800903a:	e7cb      	b.n	8008fd4 <forward_lite_dense_if32of32wf32_lut4+0x198>
 800903c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0df      	beq.n	8009002 <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 8009042:	9b07      	ldr	r3, [sp, #28]
 8009044:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009046:	1acb      	subs	r3, r1, r3
 8009048:	edd3 7a00 	vldr	s15, [r3]
 800904c:	ecb2 7a01 	vldmia	r2!, {s14}
 8009050:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009054:	ece3 7a01 	vstmia	r3!, {s15}
 8009058:	428b      	cmp	r3, r1
 800905a:	d1f5      	bne.n	8009048 <forward_lite_dense_if32of32wf32_lut4+0x20c>
 800905c:	9b08      	ldr	r3, [sp, #32]
 800905e:	428b      	cmp	r3, r1
 8009060:	d8d2      	bhi.n	8009008 <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 8009062:	b00d      	add	sp, #52	; 0x34
 8009064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009068:	4619      	mov	r1, r3
 800906a:	e7c8      	b.n	8008ffe <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800906c:	9b07      	ldr	r3, [sp, #28]
 800906e:	1acb      	subs	r3, r1, r3
 8009070:	461a      	mov	r2, r3
 8009072:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009074:	ed92 7a00 	vldr	s14, [r2]
 8009078:	ecf0 7a01 	vldmia	r0!, {s15}
 800907c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009080:	ece2 7a01 	vstmia	r2!, {s15}
 8009084:	428a      	cmp	r2, r1
 8009086:	d1f5      	bne.n	8009074 <forward_lite_dense_if32of32wf32_lut4+0x238>
 8009088:	e7f2      	b.n	8009070 <forward_lite_dense_if32of32wf32_lut4+0x234>
 800908a:	bf00      	nop
 800908c:	00000000 	.word	0x00000000

08009090 <forward_lite_dense_if32of32wf32_lut8>:
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	b091      	sub	sp, #68	; 0x44
 8009096:	4699      	mov	r9, r3
 8009098:	468b      	mov	fp, r1
 800909a:	920e      	str	r2, [sp, #56]	; 0x38
 800909c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800909e:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80090a2:	9003      	str	r0, [sp, #12]
 80090a4:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	; 0x74
 80090a8:	fb02 f303 	mul.w	r3, r2, r3
 80090ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80090b0:	930c      	str	r3, [sp, #48]	; 0x30
 80090b2:	b134      	cbz	r4, 80090c2 <forward_lite_dense_if32of32wf32_lut8+0x32>
 80090b4:	4648      	mov	r0, r9
 80090b6:	46a1      	mov	r9, r4
 80090b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80090bc:	4621      	mov	r1, r4
 80090be:	f000 fa97 	bl	80095f0 <st_int8_copy>
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090c6:	4293      	cmp	r3, r2
 80090c8:	f080 8084 	bcs.w	80091d4 <forward_lite_dense_if32of32wf32_lut8+0x144>
 80090cc:	4bb7      	ldr	r3, [pc, #732]	; (80093ac <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 80090ce:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80090d0:	4443      	add	r3, r8
 80090d2:	9d03      	ldr	r5, [sp, #12]
 80090d4:	0092      	lsls	r2, r2, #2
 80090d6:	eddf 3ab6 	vldr	s7, [pc, #728]	; 80093b0 <forward_lite_dense_if32of32wf32_lut8+0x320>
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80090de:	f103 0120 	add.w	r1, r3, #32
 80090e2:	930d      	str	r3, [sp, #52]	; 0x34
 80090e4:	445b      	add	r3, fp
 80090e6:	920f      	str	r2, [sp, #60]	; 0x3c
 80090e8:	9105      	str	r1, [sp, #20]
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	eb0b 0301 	add.w	r3, fp, r1
 80090f0:	469a      	mov	sl, r3
 80090f2:	469e      	mov	lr, r3
 80090f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090f6:	eb05 0c03 	add.w	ip, r5, r3
 80090fa:	45ac      	cmp	ip, r5
 80090fc:	d952      	bls.n	80091a4 <forward_lite_dense_if32of32wf32_lut8+0x114>
 80090fe:	9800      	ldr	r0, [sp, #0]
 8009100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009102:	f100 011f 	add.w	r1, r0, #31
 8009106:	eba0 020b 	sub.w	r2, r0, fp
 800910a:	445b      	add	r3, fp
 800910c:	9101      	str	r1, [sp, #4]
 800910e:	eba1 010b 	sub.w	r1, r1, fp
 8009112:	0952      	lsrs	r2, r2, #5
 8009114:	9306      	str	r3, [sp, #24]
 8009116:	0889      	lsrs	r1, r1, #2
 8009118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800911a:	3101      	adds	r1, #1
 800911c:	9102      	str	r1, [sp, #8]
 800911e:	1c51      	adds	r1, r2, #1
 8009120:	00d2      	lsls	r2, r2, #3
 8009122:	3210      	adds	r2, #16
 8009124:	920a      	str	r2, [sp, #40]	; 0x28
 8009126:	00ca      	lsls	r2, r1, #3
 8009128:	9208      	str	r2, [sp, #32]
 800912a:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 800912e:	9209      	str	r2, [sp, #36]	; 0x24
 8009130:	1f02      	subs	r2, r0, #4
 8009132:	9204      	str	r2, [sp, #16]
 8009134:	f10b 0204 	add.w	r2, fp, #4
 8009138:	9207      	str	r2, [sp, #28]
 800913a:	f1b8 0f07 	cmp.w	r8, #7
 800913e:	d84c      	bhi.n	80091da <forward_lite_dense_if32of32wf32_lut8+0x14a>
 8009140:	45d3      	cmp	fp, sl
 8009142:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80093b0 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8009146:	d20f      	bcs.n	8009168 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8009148:	4659      	mov	r1, fp
 800914a:	4618      	mov	r0, r3
 800914c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009150:	ecf1 7a01 	vldmia	r1!, {s15}
 8009154:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8009158:	4551      	cmp	r1, sl
 800915a:	edd2 6a00 	vldr	s13, [r2]
 800915e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009162:	d3f3      	bcc.n	800914c <forward_lite_dense_if32of32wf32_lut8+0xbc>
 8009164:	9a02      	ldr	r2, [sp, #8]
 8009166:	4413      	add	r3, r2
 8009168:	eca5 7a01 	vstmia	r5!, {s14}
 800916c:	45ac      	cmp	ip, r5
 800916e:	d8e4      	bhi.n	800913a <forward_lite_dense_if32of32wf32_lut8+0xaa>
 8009170:	9b03      	ldr	r3, [sp, #12]
 8009172:	46f3      	mov	fp, lr
 8009174:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009176:	1899      	adds	r1, r3, r2
 8009178:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800917a:	b9c3      	cbnz	r3, 80091ae <forward_lite_dense_if32of32wf32_lut8+0x11e>
 800917c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800917e:	428b      	cmp	r3, r1
 8009180:	d928      	bls.n	80091d4 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8009182:	9b00      	ldr	r3, [sp, #0]
 8009184:	9a05      	ldr	r2, [sp, #20]
 8009186:	4413      	add	r3, r2
 8009188:	4492      	add	sl, r2
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	9b03      	ldr	r3, [sp, #12]
 800918e:	459c      	cmp	ip, r3
 8009190:	f240 821e 	bls.w	80095d0 <forward_lite_dense_if32of32wf32_lut8+0x540>
 8009194:	460d      	mov	r5, r1
 8009196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009198:	4496      	add	lr, r2
 800919a:	9103      	str	r1, [sp, #12]
 800919c:	eb05 0c03 	add.w	ip, r5, r3
 80091a0:	45ac      	cmp	ip, r5
 80091a2:	d8ac      	bhi.n	80090fe <forward_lite_dense_if32of32wf32_lut8+0x6e>
 80091a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80091a6:	4629      	mov	r1, r5
 80091a8:	46f3      	mov	fp, lr
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0e6      	beq.n	800917c <forward_lite_dense_if32of32wf32_lut8+0xec>
 80091ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d0e3      	beq.n	800917c <forward_lite_dense_if32of32wf32_lut8+0xec>
 80091b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80091b8:	1acb      	subs	r3, r1, r3
 80091ba:	edd3 7a00 	vldr	s15, [r3]
 80091be:	ecb2 7a01 	vldmia	r2!, {s14}
 80091c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091c6:	ece3 7a01 	vstmia	r3!, {s15}
 80091ca:	428b      	cmp	r3, r1
 80091cc:	d1f5      	bne.n	80091ba <forward_lite_dense_if32of32wf32_lut8+0x12a>
 80091ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091d0:	428b      	cmp	r3, r1
 80091d2:	d8d6      	bhi.n	8009182 <forward_lite_dense_if32of32wf32_lut8+0xf2>
 80091d4:	b011      	add	sp, #68	; 0x44
 80091d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091da:	f003 0203 	and.w	r2, r3, #3
 80091de:	2a02      	cmp	r2, #2
 80091e0:	f000 81ee 	beq.w	80095c0 <forward_lite_dense_if32of32wf32_lut8+0x530>
 80091e4:	2a03      	cmp	r2, #3
 80091e6:	f000 80e5 	beq.w	80093b4 <forward_lite_dense_if32of32wf32_lut8+0x324>
 80091ea:	2a01      	cmp	r2, #1
 80091ec:	f000 81d2 	beq.w	8009594 <forward_lite_dense_if32of32wf32_lut8+0x504>
 80091f0:	9a06      	ldr	r2, [sp, #24]
 80091f2:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80093b0 <forward_lite_dense_if32of32wf32_lut8+0x320>
 80091f6:	4593      	cmp	fp, r2
 80091f8:	f200 81e8 	bhi.w	80095cc <forward_lite_dense_if32of32wf32_lut8+0x53c>
 80091fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80091fe:	f103 0208 	add.w	r2, r3, #8
 8009202:	f10b 0120 	add.w	r1, fp, #32
 8009206:	18c4      	adds	r4, r0, r3
 8009208:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 800920c:	3208      	adds	r2, #8
 800920e:	ed51 2a07 	vldr	s5, [r1, #-28]	; 0xffffffe4
 8009212:	3120      	adds	r1, #32
 8009214:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009218:	ed11 3a10 	vldr	s6, [r1, #-64]	; 0xffffffc0
 800921c:	ed11 4a0e 	vldr	s8, [r1, #-56]	; 0xffffffc8
 8009220:	edd0 7a00 	vldr	s15, [r0]
 8009224:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8009228:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800922c:	ed51 4a0d 	vldr	s9, [r1, #-52]	; 0xffffffcc
 8009230:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009234:	ed11 5a0c 	vldr	s10, [r1, #-48]	; 0xffffffd0
 8009238:	ed51 5a0b 	vldr	s11, [r1, #-44]	; 0xffffffd4
 800923c:	edd0 2a00 	vldr	s5, [r0]
 8009240:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8009244:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009248:	ed11 6a0a 	vldr	s12, [r1, #-40]	; 0xffffffd8
 800924c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009250:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 8009254:	ed90 3a00 	vldr	s6, [r0]
 8009258:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 800925c:	eee3 7a04 	vfma.f32	s15, s6, s8
 8009260:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009264:	ed90 4a00 	vldr	s8, [r0]
 8009268:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 800926c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009270:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009274:	edd0 4a00 	vldr	s9, [r0]
 8009278:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 800927c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009280:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009284:	ed90 5a00 	vldr	s10, [r0]
 8009288:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 800928c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009290:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009294:	edd0 5a00 	vldr	s11, [r0]
 8009298:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 800929c:	42a2      	cmp	r2, r4
 800929e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80092a2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80092a6:	ed90 6a00 	vldr	s12, [r0]
 80092aa:	eee6 7a26 	vfma.f32	s15, s12, s13
 80092ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80092b2:	d1a9      	bne.n	8009208 <forward_lite_dense_if32of32wf32_lut8+0x178>
 80092b4:	9a08      	ldr	r2, [sp, #32]
 80092b6:	4413      	add	r3, r2
 80092b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092ba:	4572      	cmp	r2, lr
 80092bc:	f4bf af54 	bcs.w	8009168 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80092c0:	7819      	ldrb	r1, [r3, #0]
 80092c2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80092c6:	edd1 7a00 	vldr	s15, [r1]
 80092ca:	4611      	mov	r1, r2
 80092cc:	ecf1 6a01 	vldmia	r1!, {s13}
 80092d0:	458a      	cmp	sl, r1
 80092d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80092d6:	d963      	bls.n	80093a0 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80092d8:	7859      	ldrb	r1, [r3, #1]
 80092da:	edd2 6a01 	vldr	s13, [r2, #4]
 80092de:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80092e2:	edd1 7a00 	vldr	s15, [r1]
 80092e6:	f102 0108 	add.w	r1, r2, #8
 80092ea:	458a      	cmp	sl, r1
 80092ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80092f0:	d956      	bls.n	80093a0 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80092f2:	7899      	ldrb	r1, [r3, #2]
 80092f4:	edd2 6a02 	vldr	s13, [r2, #8]
 80092f8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80092fc:	edd1 7a00 	vldr	s15, [r1]
 8009300:	f102 010c 	add.w	r1, r2, #12
 8009304:	458a      	cmp	sl, r1
 8009306:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800930a:	d949      	bls.n	80093a0 <forward_lite_dense_if32of32wf32_lut8+0x310>
 800930c:	78d9      	ldrb	r1, [r3, #3]
 800930e:	edd2 6a03 	vldr	s13, [r2, #12]
 8009312:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009316:	edd1 7a00 	vldr	s15, [r1]
 800931a:	f102 0110 	add.w	r1, r2, #16
 800931e:	458a      	cmp	sl, r1
 8009320:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009324:	d93c      	bls.n	80093a0 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8009326:	7919      	ldrb	r1, [r3, #4]
 8009328:	edd2 6a04 	vldr	s13, [r2, #16]
 800932c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009330:	edd1 7a00 	vldr	s15, [r1]
 8009334:	f102 0114 	add.w	r1, r2, #20
 8009338:	458a      	cmp	sl, r1
 800933a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800933e:	d92f      	bls.n	80093a0 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8009340:	7959      	ldrb	r1, [r3, #5]
 8009342:	edd2 6a05 	vldr	s13, [r2, #20]
 8009346:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800934a:	edd1 7a00 	vldr	s15, [r1]
 800934e:	f102 0118 	add.w	r1, r2, #24
 8009352:	458a      	cmp	sl, r1
 8009354:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009358:	d922      	bls.n	80093a0 <forward_lite_dense_if32of32wf32_lut8+0x310>
 800935a:	7999      	ldrb	r1, [r3, #6]
 800935c:	edd2 6a06 	vldr	s13, [r2, #24]
 8009360:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009364:	edd1 7a00 	vldr	s15, [r1]
 8009368:	f102 011c 	add.w	r1, r2, #28
 800936c:	458a      	cmp	sl, r1
 800936e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009372:	d915      	bls.n	80093a0 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8009374:	79d9      	ldrb	r1, [r3, #7]
 8009376:	edd2 6a07 	vldr	s13, [r2, #28]
 800937a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800937e:	edd1 7a00 	vldr	s15, [r1]
 8009382:	f102 0120 	add.w	r1, r2, #32
 8009386:	458a      	cmp	sl, r1
 8009388:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800938c:	d908      	bls.n	80093a0 <forward_lite_dense_if32of32wf32_lut8+0x310>
 800938e:	7a19      	ldrb	r1, [r3, #8]
 8009390:	edd2 7a08 	vldr	s15, [r2, #32]
 8009394:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009398:	edd1 6a00 	vldr	s13, [r1]
 800939c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80093a0:	9901      	ldr	r1, [sp, #4]
 80093a2:	1a8a      	subs	r2, r1, r2
 80093a4:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 80093a8:	1c53      	adds	r3, r2, #1
 80093aa:	e6dd      	b.n	8009168 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80093ac:	3ffffff8 	.word	0x3ffffff8
 80093b0:	00000000 	.word	0x00000000
 80093b4:	eeb0 7a63 	vmov.f32	s14, s7
 80093b8:	465a      	mov	r2, fp
 80093ba:	461f      	mov	r7, r3
 80093bc:	4610      	mov	r0, r2
 80093be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80093c2:	ecf0 7a01 	vldmia	r0!, {s15}
 80093c6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80093ca:	edd1 6a00 	vldr	s13, [r1]
 80093ce:	9900      	ldr	r1, [sp, #0]
 80093d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80093d4:	4288      	cmp	r0, r1
 80093d6:	f200 80f7 	bhi.w	80095c8 <forward_lite_dense_if32of32wf32_lut8+0x538>
 80093da:	9904      	ldr	r1, [sp, #16]
 80093dc:	f103 0411 	add.w	r4, r3, #17
 80093e0:	3309      	adds	r3, #9
 80093e2:	1a8e      	subs	r6, r1, r2
 80093e4:	3224      	adds	r2, #36	; 0x24
 80093e6:	0976      	lsrs	r6, r6, #5
 80093e8:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80093ec:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 80093f0:	3308      	adds	r3, #8
 80093f2:	ed52 2a07 	vldr	s5, [r2, #-28]	; 0xffffffe4
 80093f6:	3220      	adds	r2, #32
 80093f8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80093fc:	ed12 3a10 	vldr	s6, [r2, #-64]	; 0xffffffc0
 8009400:	ed12 4a0e 	vldr	s8, [r2, #-56]	; 0xffffffc8
 8009404:	edd1 7a00 	vldr	s15, [r1]
 8009408:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 800940c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8009410:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8009414:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009418:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 800941c:	ed52 5a0b 	vldr	s11, [r2, #-44]	; 0xffffffd4
 8009420:	edd1 2a00 	vldr	s5, [r1]
 8009424:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8009428:	eee2 7a83 	vfma.f32	s15, s5, s6
 800942c:	ed12 6a0a 	vldr	s12, [r2, #-40]	; 0xffffffd8
 8009430:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009434:	ed52 6a09 	vldr	s13, [r2, #-36]	; 0xffffffdc
 8009438:	ed91 3a00 	vldr	s6, [r1]
 800943c:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8009440:	eee3 7a04 	vfma.f32	s15, s6, s8
 8009444:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009448:	ed91 4a00 	vldr	s8, [r1]
 800944c:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8009450:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009454:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009458:	edd1 4a00 	vldr	s9, [r1]
 800945c:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8009460:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009464:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009468:	ed91 5a00 	vldr	s10, [r1]
 800946c:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8009470:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009474:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009478:	edd1 5a00 	vldr	s11, [r1]
 800947c:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8009480:	42a3      	cmp	r3, r4
 8009482:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8009486:	eee5 7a86 	vfma.f32	s15, s11, s12
 800948a:	ed91 6a00 	vldr	s12, [r1]
 800948e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009492:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009496:	d1a9      	bne.n	80093ec <forward_lite_dense_if32of32wf32_lut8+0x35c>
 8009498:	3601      	adds	r6, #1
 800949a:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 800949e:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 80094a2:	4550      	cmp	r0, sl
 80094a4:	f4bf ae60 	bcs.w	8009168 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80094a8:	781a      	ldrb	r2, [r3, #0]
 80094aa:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80094ae:	edd2 7a00 	vldr	s15, [r2]
 80094b2:	4602      	mov	r2, r0
 80094b4:	ecf2 6a01 	vldmia	r2!, {s13}
 80094b8:	4592      	cmp	sl, r2
 80094ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80094be:	d963      	bls.n	8009588 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80094c0:	785a      	ldrb	r2, [r3, #1]
 80094c2:	edd0 6a01 	vldr	s13, [r0, #4]
 80094c6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80094ca:	edd2 7a00 	vldr	s15, [r2]
 80094ce:	f100 0208 	add.w	r2, r0, #8
 80094d2:	4592      	cmp	sl, r2
 80094d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80094d8:	d956      	bls.n	8009588 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80094da:	789a      	ldrb	r2, [r3, #2]
 80094dc:	edd0 6a02 	vldr	s13, [r0, #8]
 80094e0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80094e4:	edd2 7a00 	vldr	s15, [r2]
 80094e8:	f100 020c 	add.w	r2, r0, #12
 80094ec:	4592      	cmp	sl, r2
 80094ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80094f2:	d949      	bls.n	8009588 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80094f4:	78da      	ldrb	r2, [r3, #3]
 80094f6:	edd0 6a03 	vldr	s13, [r0, #12]
 80094fa:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80094fe:	edd2 7a00 	vldr	s15, [r2]
 8009502:	f100 0210 	add.w	r2, r0, #16
 8009506:	4592      	cmp	sl, r2
 8009508:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800950c:	d93c      	bls.n	8009588 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800950e:	791a      	ldrb	r2, [r3, #4]
 8009510:	edd0 6a04 	vldr	s13, [r0, #16]
 8009514:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8009518:	edd2 7a00 	vldr	s15, [r2]
 800951c:	f100 0214 	add.w	r2, r0, #20
 8009520:	4592      	cmp	sl, r2
 8009522:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009526:	d92f      	bls.n	8009588 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8009528:	795a      	ldrb	r2, [r3, #5]
 800952a:	edd0 6a05 	vldr	s13, [r0, #20]
 800952e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8009532:	edd2 7a00 	vldr	s15, [r2]
 8009536:	f100 0218 	add.w	r2, r0, #24
 800953a:	4596      	cmp	lr, r2
 800953c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009540:	d922      	bls.n	8009588 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8009542:	799a      	ldrb	r2, [r3, #6]
 8009544:	edd0 6a06 	vldr	s13, [r0, #24]
 8009548:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800954c:	edd2 7a00 	vldr	s15, [r2]
 8009550:	f100 021c 	add.w	r2, r0, #28
 8009554:	4596      	cmp	lr, r2
 8009556:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800955a:	d915      	bls.n	8009588 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 800955c:	79da      	ldrb	r2, [r3, #7]
 800955e:	edd0 6a07 	vldr	s13, [r0, #28]
 8009562:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8009566:	edd2 7a00 	vldr	s15, [r2]
 800956a:	f100 0220 	add.w	r2, r0, #32
 800956e:	4596      	cmp	lr, r2
 8009570:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009574:	d908      	bls.n	8009588 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8009576:	7a1a      	ldrb	r2, [r3, #8]
 8009578:	edd0 7a08 	vldr	s15, [r0, #32]
 800957c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8009580:	edd2 6a00 	vldr	s13, [r2]
 8009584:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009588:	9a01      	ldr	r2, [sp, #4]
 800958a:	1a10      	subs	r0, r2, r0
 800958c:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	e5e9      	b.n	8009168 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8009594:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009598:	eddb 7a00 	vldr	s15, [fp]
 800959c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80095a0:	9a07      	ldr	r2, [sp, #28]
 80095a2:	ed91 7a00 	vldr	s14, [r1]
 80095a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80095aa:	f813 1b01 	ldrb.w	r1, [r3], #1
 80095ae:	ecf2 7a01 	vldmia	r2!, {s15}
 80095b2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80095b6:	edd1 6a00 	vldr	s13, [r1]
 80095ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80095be:	e6fc      	b.n	80093ba <forward_lite_dense_if32of32wf32_lut8+0x32a>
 80095c0:	eeb0 7a63 	vmov.f32	s14, s7
 80095c4:	465a      	mov	r2, fp
 80095c6:	e7f0      	b.n	80095aa <forward_lite_dense_if32of32wf32_lut8+0x51a>
 80095c8:	463b      	mov	r3, r7
 80095ca:	e76a      	b.n	80094a2 <forward_lite_dense_if32of32wf32_lut8+0x412>
 80095cc:	465a      	mov	r2, fp
 80095ce:	e674      	b.n	80092ba <forward_lite_dense_if32of32wf32_lut8+0x22a>
 80095d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095d2:	1acb      	subs	r3, r1, r3
 80095d4:	461a      	mov	r2, r3
 80095d6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80095d8:	ed92 7a00 	vldr	s14, [r2]
 80095dc:	ecf0 7a01 	vldmia	r0!, {s15}
 80095e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80095e4:	ece2 7a01 	vstmia	r2!, {s15}
 80095e8:	4291      	cmp	r1, r2
 80095ea:	d1f5      	bne.n	80095d8 <forward_lite_dense_if32of32wf32_lut8+0x548>
 80095ec:	e7f2      	b.n	80095d4 <forward_lite_dense_if32of32wf32_lut8+0x544>
 80095ee:	bf00      	nop

080095f0 <st_int8_copy>:
 80095f0:	4288      	cmp	r0, r1
 80095f2:	d010      	beq.n	8009616 <st_int8_copy+0x26>
 80095f4:	b17a      	cbz	r2, 8009616 <st_int8_copy+0x26>
 80095f6:	4288      	cmp	r0, r1
 80095f8:	eb00 0302 	add.w	r3, r0, r2
 80095fc:	d20c      	bcs.n	8009618 <st_int8_copy+0x28>
 80095fe:	428b      	cmp	r3, r1
 8009600:	d90a      	bls.n	8009618 <st_int8_copy+0x28>
 8009602:	4283      	cmp	r3, r0
 8009604:	440a      	add	r2, r1
 8009606:	d906      	bls.n	8009616 <st_int8_copy+0x26>
 8009608:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800960c:	4283      	cmp	r3, r0
 800960e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8009612:	d1f9      	bne.n	8009608 <st_int8_copy+0x18>
 8009614:	4770      	bx	lr
 8009616:	4770      	bx	lr
 8009618:	078b      	lsls	r3, r1, #30
 800961a:	d102      	bne.n	8009622 <st_int8_copy+0x32>
 800961c:	e008      	b.n	8009630 <st_int8_copy+0x40>
 800961e:	2a00      	cmp	r2, #0
 8009620:	d04c      	beq.n	80096bc <st_int8_copy+0xcc>
 8009622:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8009626:	3a01      	subs	r2, #1
 8009628:	f801 3b01 	strb.w	r3, [r1], #1
 800962c:	078b      	lsls	r3, r1, #30
 800962e:	d1f6      	bne.n	800961e <st_int8_copy+0x2e>
 8009630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009634:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8009638:	d05d      	beq.n	80096f6 <st_int8_copy+0x106>
 800963a:	ea41 0300 	orr.w	r3, r1, r0
 800963e:	075b      	lsls	r3, r3, #29
 8009640:	d13d      	bne.n	80096be <st_int8_copy+0xce>
 8009642:	f1be 0f01 	cmp.w	lr, #1
 8009646:	d03a      	beq.n	80096be <st_int8_copy+0xce>
 8009648:	f100 0310 	add.w	r3, r0, #16
 800964c:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009650:	f101 0c10 	add.w	ip, r1, #16
 8009654:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8009658:	3310      	adds	r3, #16
 800965a:	f10c 0c10 	add.w	ip, ip, #16
 800965e:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 8009662:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 8009666:	4573      	cmp	r3, lr
 8009668:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 800966c:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8009670:	d1f2      	bne.n	8009658 <st_int8_copy+0x68>
 8009672:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8009676:	4421      	add	r1, r4
 8009678:	4420      	add	r0, r4
 800967a:	f002 0203 	and.w	r2, r2, #3
 800967e:	b16b      	cbz	r3, 800969c <st_int8_copy+0xac>
 8009680:	6804      	ldr	r4, [r0, #0]
 8009682:	600c      	str	r4, [r1, #0]
 8009684:	1e5c      	subs	r4, r3, #1
 8009686:	d005      	beq.n	8009694 <st_int8_copy+0xa4>
 8009688:	6845      	ldr	r5, [r0, #4]
 800968a:	2c01      	cmp	r4, #1
 800968c:	604d      	str	r5, [r1, #4]
 800968e:	d001      	beq.n	8009694 <st_int8_copy+0xa4>
 8009690:	6884      	ldr	r4, [r0, #8]
 8009692:	608c      	str	r4, [r1, #8]
 8009694:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009698:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800969c:	b162      	cbz	r2, 80096b8 <st_int8_copy+0xc8>
 800969e:	f990 3000 	ldrsb.w	r3, [r0]
 80096a2:	3a01      	subs	r2, #1
 80096a4:	700b      	strb	r3, [r1, #0]
 80096a6:	d007      	beq.n	80096b8 <st_int8_copy+0xc8>
 80096a8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80096ac:	2a01      	cmp	r2, #1
 80096ae:	704b      	strb	r3, [r1, #1]
 80096b0:	d002      	beq.n	80096b8 <st_int8_copy+0xc8>
 80096b2:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80096b6:	708b      	strb	r3, [r1, #2]
 80096b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096bc:	4770      	bx	lr
 80096be:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80096c2:	460b      	mov	r3, r1
 80096c4:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80096c8:	4684      	mov	ip, r0
 80096ca:	f8dc 8000 	ldr.w	r8, [ip]
 80096ce:	3310      	adds	r3, #16
 80096d0:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80096d4:	f10c 0c10 	add.w	ip, ip, #16
 80096d8:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 80096dc:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 80096e0:	f843 8c10 	str.w	r8, [r3, #-16]
 80096e4:	f843 7c0c 	str.w	r7, [r3, #-12]
 80096e8:	f843 6c08 	str.w	r6, [r3, #-8]
 80096ec:	f843 5c04 	str.w	r5, [r3, #-4]
 80096f0:	459e      	cmp	lr, r3
 80096f2:	d1ea      	bne.n	80096ca <st_int8_copy+0xda>
 80096f4:	e7bd      	b.n	8009672 <st_int8_copy+0x82>
 80096f6:	0893      	lsrs	r3, r2, #2
 80096f8:	f002 0203 	and.w	r2, r2, #3
 80096fc:	e7bf      	b.n	800967e <st_int8_copy+0x8e>
 80096fe:	bf00      	nop

08009700 <ai_array_to_buffer_fmt>:
 8009700:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8009704:	2b02      	cmp	r3, #2
 8009706:	d053      	beq.n	80097b0 <ai_array_to_buffer_fmt+0xb0>
 8009708:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800970c:	4a2b      	ldr	r2, [pc, #172]	; (80097bc <ai_array_to_buffer_fmt+0xbc>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d010      	beq.n	8009734 <ai_array_to_buffer_fmt+0x34>
 8009712:	dc21      	bgt.n	8009758 <ai_array_to_buffer_fmt+0x58>
 8009714:	4a2a      	ldr	r2, [pc, #168]	; (80097c0 <ai_array_to_buffer_fmt+0xc0>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d00c      	beq.n	8009734 <ai_array_to_buffer_fmt+0x34>
 800971a:	dd0f      	ble.n	800973c <ai_array_to_buffer_fmt+0x3c>
 800971c:	4a29      	ldr	r2, [pc, #164]	; (80097c4 <ai_array_to_buffer_fmt+0xc4>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d008      	beq.n	8009734 <ai_array_to_buffer_fmt+0x34>
 8009722:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8009726:	4293      	cmp	r3, r2
 8009728:	d004      	beq.n	8009734 <ai_array_to_buffer_fmt+0x34>
 800972a:	4a27      	ldr	r2, [pc, #156]	; (80097c8 <ai_array_to_buffer_fmt+0xc8>)
 800972c:	4293      	cmp	r3, r2
 800972e:	bf0c      	ite	eq
 8009730:	4613      	moveq	r3, r2
 8009732:	2340      	movne	r3, #64	; 0x40
 8009734:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009738:	4318      	orrs	r0, r3
 800973a:	4770      	bx	lr
 800973c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8009740:	4293      	cmp	r3, r2
 8009742:	d0f7      	beq.n	8009734 <ai_array_to_buffer_fmt+0x34>
 8009744:	dd2a      	ble.n	800979c <ai_array_to_buffer_fmt+0x9c>
 8009746:	4a21      	ldr	r2, [pc, #132]	; (80097cc <ai_array_to_buffer_fmt+0xcc>)
 8009748:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800974c:	4293      	cmp	r3, r2
 800974e:	bf0c      	ite	eq
 8009750:	4613      	moveq	r3, r2
 8009752:	2340      	movne	r3, #64	; 0x40
 8009754:	4318      	orrs	r0, r3
 8009756:	4770      	bx	lr
 8009758:	4a1d      	ldr	r2, [pc, #116]	; (80097d0 <ai_array_to_buffer_fmt+0xd0>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d0ea      	beq.n	8009734 <ai_array_to_buffer_fmt+0x34>
 800975e:	dd0f      	ble.n	8009780 <ai_array_to_buffer_fmt+0x80>
 8009760:	4a1c      	ldr	r2, [pc, #112]	; (80097d4 <ai_array_to_buffer_fmt+0xd4>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d0e6      	beq.n	8009734 <ai_array_to_buffer_fmt+0x34>
 8009766:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800976a:	4293      	cmp	r3, r2
 800976c:	d0e2      	beq.n	8009734 <ai_array_to_buffer_fmt+0x34>
 800976e:	4a1a      	ldr	r2, [pc, #104]	; (80097d8 <ai_array_to_buffer_fmt+0xd8>)
 8009770:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009774:	4293      	cmp	r3, r2
 8009776:	bf0c      	ite	eq
 8009778:	4613      	moveq	r3, r2
 800977a:	2340      	movne	r3, #64	; 0x40
 800977c:	4318      	orrs	r0, r3
 800977e:	4770      	bx	lr
 8009780:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8009784:	4293      	cmp	r3, r2
 8009786:	d0d5      	beq.n	8009734 <ai_array_to_buffer_fmt+0x34>
 8009788:	3207      	adds	r2, #7
 800978a:	4293      	cmp	r3, r2
 800978c:	d0d2      	beq.n	8009734 <ai_array_to_buffer_fmt+0x34>
 800978e:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 8009792:	4293      	cmp	r3, r2
 8009794:	bf0c      	ite	eq
 8009796:	4613      	moveq	r3, r2
 8009798:	2340      	movne	r3, #64	; 0x40
 800979a:	e7cb      	b.n	8009734 <ai_array_to_buffer_fmt+0x34>
 800979c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d0c7      	beq.n	8009734 <ai_array_to_buffer_fmt+0x34>
 80097a4:	3280      	adds	r2, #128	; 0x80
 80097a6:	4293      	cmp	r3, r2
 80097a8:	bf0c      	ite	eq
 80097aa:	4613      	moveq	r3, r2
 80097ac:	2340      	movne	r3, #64	; 0x40
 80097ae:	e7c1      	b.n	8009734 <ai_array_to_buffer_fmt+0x34>
 80097b0:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <ai_array_to_buffer_fmt+0xdc>)
 80097b2:	4003      	ands	r3, r0
 80097b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097b8:	e7bc      	b.n	8009734 <ai_array_to_buffer_fmt+0x34>
 80097ba:	bf00      	nop
 80097bc:	00840040 	.word	0x00840040
 80097c0:	00040840 	.word	0x00040840
 80097c4:	00041040 	.word	0x00041040
 80097c8:	0004084f 	.word	0x0004084f
 80097cc:	00040447 	.word	0x00040447
 80097d0:	00840840 	.word	0x00840840
 80097d4:	00841040 	.word	0x00841040
 80097d8:	0084084f 	.word	0x0084084f
 80097dc:	00803fff 	.word	0x00803fff

080097e0 <ai_array_get_data_byte_size>:
 80097e0:	b169      	cbz	r1, 80097fe <ai_array_get_data_byte_size+0x1e>
 80097e2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80097e6:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80097ea:	fb03 f101 	mul.w	r1, r3, r1
 80097ee:	1dcb      	adds	r3, r1, #7
 80097f0:	f023 0307 	bic.w	r3, r3, #7
 80097f4:	fa23 f000 	lsr.w	r0, r3, r0
 80097f8:	3007      	adds	r0, #7
 80097fa:	08c0      	lsrs	r0, r0, #3
 80097fc:	4770      	bx	lr
 80097fe:	4608      	mov	r0, r1
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop

08009804 <malloc>:
 8009804:	4b02      	ldr	r3, [pc, #8]	; (8009810 <malloc+0xc>)
 8009806:	4601      	mov	r1, r0
 8009808:	6818      	ldr	r0, [r3, #0]
 800980a:	f000 b82b 	b.w	8009864 <_malloc_r>
 800980e:	bf00      	nop
 8009810:	20004200 	.word	0x20004200

08009814 <free>:
 8009814:	4b02      	ldr	r3, [pc, #8]	; (8009820 <free+0xc>)
 8009816:	4601      	mov	r1, r0
 8009818:	6818      	ldr	r0, [r3, #0]
 800981a:	f001 bc95 	b.w	800b148 <_free_r>
 800981e:	bf00      	nop
 8009820:	20004200 	.word	0x20004200

08009824 <sbrk_aligned>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	4e0e      	ldr	r6, [pc, #56]	; (8009860 <sbrk_aligned+0x3c>)
 8009828:	460c      	mov	r4, r1
 800982a:	6831      	ldr	r1, [r6, #0]
 800982c:	4605      	mov	r5, r0
 800982e:	b911      	cbnz	r1, 8009836 <sbrk_aligned+0x12>
 8009830:	f000 fe38 	bl	800a4a4 <_sbrk_r>
 8009834:	6030      	str	r0, [r6, #0]
 8009836:	4621      	mov	r1, r4
 8009838:	4628      	mov	r0, r5
 800983a:	f000 fe33 	bl	800a4a4 <_sbrk_r>
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	d00a      	beq.n	8009858 <sbrk_aligned+0x34>
 8009842:	1cc4      	adds	r4, r0, #3
 8009844:	f024 0403 	bic.w	r4, r4, #3
 8009848:	42a0      	cmp	r0, r4
 800984a:	d007      	beq.n	800985c <sbrk_aligned+0x38>
 800984c:	1a21      	subs	r1, r4, r0
 800984e:	4628      	mov	r0, r5
 8009850:	f000 fe28 	bl	800a4a4 <_sbrk_r>
 8009854:	3001      	adds	r0, #1
 8009856:	d101      	bne.n	800985c <sbrk_aligned+0x38>
 8009858:	f04f 34ff 	mov.w	r4, #4294967295
 800985c:	4620      	mov	r0, r4
 800985e:	bd70      	pop	{r4, r5, r6, pc}
 8009860:	20004b04 	.word	0x20004b04

08009864 <_malloc_r>:
 8009864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009868:	1ccd      	adds	r5, r1, #3
 800986a:	f025 0503 	bic.w	r5, r5, #3
 800986e:	3508      	adds	r5, #8
 8009870:	2d0c      	cmp	r5, #12
 8009872:	bf38      	it	cc
 8009874:	250c      	movcc	r5, #12
 8009876:	2d00      	cmp	r5, #0
 8009878:	4607      	mov	r7, r0
 800987a:	db01      	blt.n	8009880 <_malloc_r+0x1c>
 800987c:	42a9      	cmp	r1, r5
 800987e:	d905      	bls.n	800988c <_malloc_r+0x28>
 8009880:	230c      	movs	r3, #12
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	2600      	movs	r6, #0
 8009886:	4630      	mov	r0, r6
 8009888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800988c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009960 <_malloc_r+0xfc>
 8009890:	f000 f868 	bl	8009964 <__malloc_lock>
 8009894:	f8d8 3000 	ldr.w	r3, [r8]
 8009898:	461c      	mov	r4, r3
 800989a:	bb5c      	cbnz	r4, 80098f4 <_malloc_r+0x90>
 800989c:	4629      	mov	r1, r5
 800989e:	4638      	mov	r0, r7
 80098a0:	f7ff ffc0 	bl	8009824 <sbrk_aligned>
 80098a4:	1c43      	adds	r3, r0, #1
 80098a6:	4604      	mov	r4, r0
 80098a8:	d155      	bne.n	8009956 <_malloc_r+0xf2>
 80098aa:	f8d8 4000 	ldr.w	r4, [r8]
 80098ae:	4626      	mov	r6, r4
 80098b0:	2e00      	cmp	r6, #0
 80098b2:	d145      	bne.n	8009940 <_malloc_r+0xdc>
 80098b4:	2c00      	cmp	r4, #0
 80098b6:	d048      	beq.n	800994a <_malloc_r+0xe6>
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	4631      	mov	r1, r6
 80098bc:	4638      	mov	r0, r7
 80098be:	eb04 0903 	add.w	r9, r4, r3
 80098c2:	f000 fdef 	bl	800a4a4 <_sbrk_r>
 80098c6:	4581      	cmp	r9, r0
 80098c8:	d13f      	bne.n	800994a <_malloc_r+0xe6>
 80098ca:	6821      	ldr	r1, [r4, #0]
 80098cc:	1a6d      	subs	r5, r5, r1
 80098ce:	4629      	mov	r1, r5
 80098d0:	4638      	mov	r0, r7
 80098d2:	f7ff ffa7 	bl	8009824 <sbrk_aligned>
 80098d6:	3001      	adds	r0, #1
 80098d8:	d037      	beq.n	800994a <_malloc_r+0xe6>
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	442b      	add	r3, r5
 80098de:	6023      	str	r3, [r4, #0]
 80098e0:	f8d8 3000 	ldr.w	r3, [r8]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d038      	beq.n	800995a <_malloc_r+0xf6>
 80098e8:	685a      	ldr	r2, [r3, #4]
 80098ea:	42a2      	cmp	r2, r4
 80098ec:	d12b      	bne.n	8009946 <_malloc_r+0xe2>
 80098ee:	2200      	movs	r2, #0
 80098f0:	605a      	str	r2, [r3, #4]
 80098f2:	e00f      	b.n	8009914 <_malloc_r+0xb0>
 80098f4:	6822      	ldr	r2, [r4, #0]
 80098f6:	1b52      	subs	r2, r2, r5
 80098f8:	d41f      	bmi.n	800993a <_malloc_r+0xd6>
 80098fa:	2a0b      	cmp	r2, #11
 80098fc:	d917      	bls.n	800992e <_malloc_r+0xca>
 80098fe:	1961      	adds	r1, r4, r5
 8009900:	42a3      	cmp	r3, r4
 8009902:	6025      	str	r5, [r4, #0]
 8009904:	bf18      	it	ne
 8009906:	6059      	strne	r1, [r3, #4]
 8009908:	6863      	ldr	r3, [r4, #4]
 800990a:	bf08      	it	eq
 800990c:	f8c8 1000 	streq.w	r1, [r8]
 8009910:	5162      	str	r2, [r4, r5]
 8009912:	604b      	str	r3, [r1, #4]
 8009914:	4638      	mov	r0, r7
 8009916:	f104 060b 	add.w	r6, r4, #11
 800991a:	f000 f829 	bl	8009970 <__malloc_unlock>
 800991e:	f026 0607 	bic.w	r6, r6, #7
 8009922:	1d23      	adds	r3, r4, #4
 8009924:	1af2      	subs	r2, r6, r3
 8009926:	d0ae      	beq.n	8009886 <_malloc_r+0x22>
 8009928:	1b9b      	subs	r3, r3, r6
 800992a:	50a3      	str	r3, [r4, r2]
 800992c:	e7ab      	b.n	8009886 <_malloc_r+0x22>
 800992e:	42a3      	cmp	r3, r4
 8009930:	6862      	ldr	r2, [r4, #4]
 8009932:	d1dd      	bne.n	80098f0 <_malloc_r+0x8c>
 8009934:	f8c8 2000 	str.w	r2, [r8]
 8009938:	e7ec      	b.n	8009914 <_malloc_r+0xb0>
 800993a:	4623      	mov	r3, r4
 800993c:	6864      	ldr	r4, [r4, #4]
 800993e:	e7ac      	b.n	800989a <_malloc_r+0x36>
 8009940:	4634      	mov	r4, r6
 8009942:	6876      	ldr	r6, [r6, #4]
 8009944:	e7b4      	b.n	80098b0 <_malloc_r+0x4c>
 8009946:	4613      	mov	r3, r2
 8009948:	e7cc      	b.n	80098e4 <_malloc_r+0x80>
 800994a:	230c      	movs	r3, #12
 800994c:	603b      	str	r3, [r7, #0]
 800994e:	4638      	mov	r0, r7
 8009950:	f000 f80e 	bl	8009970 <__malloc_unlock>
 8009954:	e797      	b.n	8009886 <_malloc_r+0x22>
 8009956:	6025      	str	r5, [r4, #0]
 8009958:	e7dc      	b.n	8009914 <_malloc_r+0xb0>
 800995a:	605b      	str	r3, [r3, #4]
 800995c:	deff      	udf	#255	; 0xff
 800995e:	bf00      	nop
 8009960:	20004b00 	.word	0x20004b00

08009964 <__malloc_lock>:
 8009964:	4801      	ldr	r0, [pc, #4]	; (800996c <__malloc_lock+0x8>)
 8009966:	f000 bdea 	b.w	800a53e <__retarget_lock_acquire_recursive>
 800996a:	bf00      	nop
 800996c:	20004c48 	.word	0x20004c48

08009970 <__malloc_unlock>:
 8009970:	4801      	ldr	r0, [pc, #4]	; (8009978 <__malloc_unlock+0x8>)
 8009972:	f000 bde5 	b.w	800a540 <__retarget_lock_release_recursive>
 8009976:	bf00      	nop
 8009978:	20004c48 	.word	0x20004c48

0800997c <__cvt>:
 800997c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800997e:	ed2d 8b02 	vpush	{d8}
 8009982:	eeb0 8b40 	vmov.f64	d8, d0
 8009986:	b085      	sub	sp, #20
 8009988:	4617      	mov	r7, r2
 800998a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800998c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800998e:	ee18 2a90 	vmov	r2, s17
 8009992:	f025 0520 	bic.w	r5, r5, #32
 8009996:	2a00      	cmp	r2, #0
 8009998:	bfb6      	itet	lt
 800999a:	222d      	movlt	r2, #45	; 0x2d
 800999c:	2200      	movge	r2, #0
 800999e:	eeb1 8b40 	vneglt.f64	d8, d0
 80099a2:	2d46      	cmp	r5, #70	; 0x46
 80099a4:	460c      	mov	r4, r1
 80099a6:	701a      	strb	r2, [r3, #0]
 80099a8:	d004      	beq.n	80099b4 <__cvt+0x38>
 80099aa:	2d45      	cmp	r5, #69	; 0x45
 80099ac:	d100      	bne.n	80099b0 <__cvt+0x34>
 80099ae:	3401      	adds	r4, #1
 80099b0:	2102      	movs	r1, #2
 80099b2:	e000      	b.n	80099b6 <__cvt+0x3a>
 80099b4:	2103      	movs	r1, #3
 80099b6:	ab03      	add	r3, sp, #12
 80099b8:	9301      	str	r3, [sp, #4]
 80099ba:	ab02      	add	r3, sp, #8
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	4622      	mov	r2, r4
 80099c0:	4633      	mov	r3, r6
 80099c2:	eeb0 0b48 	vmov.f64	d0, d8
 80099c6:	f000 fe53 	bl	800a670 <_dtoa_r>
 80099ca:	2d47      	cmp	r5, #71	; 0x47
 80099cc:	d101      	bne.n	80099d2 <__cvt+0x56>
 80099ce:	07fb      	lsls	r3, r7, #31
 80099d0:	d51a      	bpl.n	8009a08 <__cvt+0x8c>
 80099d2:	2d46      	cmp	r5, #70	; 0x46
 80099d4:	eb00 0204 	add.w	r2, r0, r4
 80099d8:	d10c      	bne.n	80099f4 <__cvt+0x78>
 80099da:	7803      	ldrb	r3, [r0, #0]
 80099dc:	2b30      	cmp	r3, #48	; 0x30
 80099de:	d107      	bne.n	80099f0 <__cvt+0x74>
 80099e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80099e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e8:	bf1c      	itt	ne
 80099ea:	f1c4 0401 	rsbne	r4, r4, #1
 80099ee:	6034      	strne	r4, [r6, #0]
 80099f0:	6833      	ldr	r3, [r6, #0]
 80099f2:	441a      	add	r2, r3
 80099f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80099f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099fc:	bf08      	it	eq
 80099fe:	9203      	streq	r2, [sp, #12]
 8009a00:	2130      	movs	r1, #48	; 0x30
 8009a02:	9b03      	ldr	r3, [sp, #12]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d307      	bcc.n	8009a18 <__cvt+0x9c>
 8009a08:	9b03      	ldr	r3, [sp, #12]
 8009a0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a0c:	1a1b      	subs	r3, r3, r0
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	b005      	add	sp, #20
 8009a12:	ecbd 8b02 	vpop	{d8}
 8009a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a18:	1c5c      	adds	r4, r3, #1
 8009a1a:	9403      	str	r4, [sp, #12]
 8009a1c:	7019      	strb	r1, [r3, #0]
 8009a1e:	e7f0      	b.n	8009a02 <__cvt+0x86>

08009a20 <__exponent>:
 8009a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a22:	4603      	mov	r3, r0
 8009a24:	2900      	cmp	r1, #0
 8009a26:	bfb8      	it	lt
 8009a28:	4249      	neglt	r1, r1
 8009a2a:	f803 2b02 	strb.w	r2, [r3], #2
 8009a2e:	bfb4      	ite	lt
 8009a30:	222d      	movlt	r2, #45	; 0x2d
 8009a32:	222b      	movge	r2, #43	; 0x2b
 8009a34:	2909      	cmp	r1, #9
 8009a36:	7042      	strb	r2, [r0, #1]
 8009a38:	dd2a      	ble.n	8009a90 <__exponent+0x70>
 8009a3a:	f10d 0207 	add.w	r2, sp, #7
 8009a3e:	4617      	mov	r7, r2
 8009a40:	260a      	movs	r6, #10
 8009a42:	4694      	mov	ip, r2
 8009a44:	fb91 f5f6 	sdiv	r5, r1, r6
 8009a48:	fb06 1415 	mls	r4, r6, r5, r1
 8009a4c:	3430      	adds	r4, #48	; 0x30
 8009a4e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009a52:	460c      	mov	r4, r1
 8009a54:	2c63      	cmp	r4, #99	; 0x63
 8009a56:	f102 32ff 	add.w	r2, r2, #4294967295
 8009a5a:	4629      	mov	r1, r5
 8009a5c:	dcf1      	bgt.n	8009a42 <__exponent+0x22>
 8009a5e:	3130      	adds	r1, #48	; 0x30
 8009a60:	f1ac 0402 	sub.w	r4, ip, #2
 8009a64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009a68:	1c41      	adds	r1, r0, #1
 8009a6a:	4622      	mov	r2, r4
 8009a6c:	42ba      	cmp	r2, r7
 8009a6e:	d30a      	bcc.n	8009a86 <__exponent+0x66>
 8009a70:	f10d 0209 	add.w	r2, sp, #9
 8009a74:	eba2 020c 	sub.w	r2, r2, ip
 8009a78:	42bc      	cmp	r4, r7
 8009a7a:	bf88      	it	hi
 8009a7c:	2200      	movhi	r2, #0
 8009a7e:	4413      	add	r3, r2
 8009a80:	1a18      	subs	r0, r3, r0
 8009a82:	b003      	add	sp, #12
 8009a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a86:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009a8a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009a8e:	e7ed      	b.n	8009a6c <__exponent+0x4c>
 8009a90:	2330      	movs	r3, #48	; 0x30
 8009a92:	3130      	adds	r1, #48	; 0x30
 8009a94:	7083      	strb	r3, [r0, #2]
 8009a96:	70c1      	strb	r1, [r0, #3]
 8009a98:	1d03      	adds	r3, r0, #4
 8009a9a:	e7f1      	b.n	8009a80 <__exponent+0x60>
 8009a9c:	0000      	movs	r0, r0
	...

08009aa0 <_printf_float>:
 8009aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	b08b      	sub	sp, #44	; 0x2c
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009aac:	4616      	mov	r6, r2
 8009aae:	461f      	mov	r7, r3
 8009ab0:	4605      	mov	r5, r0
 8009ab2:	f000 fcbf 	bl	800a434 <_localeconv_r>
 8009ab6:	f8d0 b000 	ldr.w	fp, [r0]
 8009aba:	4658      	mov	r0, fp
 8009abc:	f7f6 fc10 	bl	80002e0 <strlen>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	9308      	str	r3, [sp, #32]
 8009ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ac8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009acc:	6822      	ldr	r2, [r4, #0]
 8009ace:	3307      	adds	r3, #7
 8009ad0:	f023 0307 	bic.w	r3, r3, #7
 8009ad4:	f103 0108 	add.w	r1, r3, #8
 8009ad8:	f8c8 1000 	str.w	r1, [r8]
 8009adc:	ed93 0b00 	vldr	d0, [r3]
 8009ae0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009d40 <_printf_float+0x2a0>
 8009ae4:	eeb0 7bc0 	vabs.f64	d7, d0
 8009ae8:	eeb4 7b46 	vcmp.f64	d7, d6
 8009aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009af0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8009af4:	4682      	mov	sl, r0
 8009af6:	dd24      	ble.n	8009b42 <_printf_float+0xa2>
 8009af8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b00:	d502      	bpl.n	8009b08 <_printf_float+0x68>
 8009b02:	232d      	movs	r3, #45	; 0x2d
 8009b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b08:	498f      	ldr	r1, [pc, #572]	; (8009d48 <_printf_float+0x2a8>)
 8009b0a:	4b90      	ldr	r3, [pc, #576]	; (8009d4c <_printf_float+0x2ac>)
 8009b0c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009b10:	bf94      	ite	ls
 8009b12:	4688      	movls	r8, r1
 8009b14:	4698      	movhi	r8, r3
 8009b16:	2303      	movs	r3, #3
 8009b18:	6123      	str	r3, [r4, #16]
 8009b1a:	f022 0204 	bic.w	r2, r2, #4
 8009b1e:	2300      	movs	r3, #0
 8009b20:	6022      	str	r2, [r4, #0]
 8009b22:	9304      	str	r3, [sp, #16]
 8009b24:	9700      	str	r7, [sp, #0]
 8009b26:	4633      	mov	r3, r6
 8009b28:	aa09      	add	r2, sp, #36	; 0x24
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	f000 f9d1 	bl	8009ed4 <_printf_common>
 8009b32:	3001      	adds	r0, #1
 8009b34:	f040 808a 	bne.w	8009c4c <_printf_float+0x1ac>
 8009b38:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3c:	b00b      	add	sp, #44	; 0x2c
 8009b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b42:	eeb4 0b40 	vcmp.f64	d0, d0
 8009b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b4a:	d709      	bvc.n	8009b60 <_printf_float+0xc0>
 8009b4c:	ee10 3a90 	vmov	r3, s1
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	bfbc      	itt	lt
 8009b54:	232d      	movlt	r3, #45	; 0x2d
 8009b56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b5a:	497d      	ldr	r1, [pc, #500]	; (8009d50 <_printf_float+0x2b0>)
 8009b5c:	4b7d      	ldr	r3, [pc, #500]	; (8009d54 <_printf_float+0x2b4>)
 8009b5e:	e7d5      	b.n	8009b0c <_printf_float+0x6c>
 8009b60:	6863      	ldr	r3, [r4, #4]
 8009b62:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009b66:	9104      	str	r1, [sp, #16]
 8009b68:	1c59      	adds	r1, r3, #1
 8009b6a:	d13c      	bne.n	8009be6 <_printf_float+0x146>
 8009b6c:	2306      	movs	r3, #6
 8009b6e:	6063      	str	r3, [r4, #4]
 8009b70:	2300      	movs	r3, #0
 8009b72:	9303      	str	r3, [sp, #12]
 8009b74:	ab08      	add	r3, sp, #32
 8009b76:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009b7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b7e:	ab07      	add	r3, sp, #28
 8009b80:	6861      	ldr	r1, [r4, #4]
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	6022      	str	r2, [r4, #0]
 8009b86:	f10d 031b 	add.w	r3, sp, #27
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	f7ff fef6 	bl	800997c <__cvt>
 8009b90:	9b04      	ldr	r3, [sp, #16]
 8009b92:	9907      	ldr	r1, [sp, #28]
 8009b94:	2b47      	cmp	r3, #71	; 0x47
 8009b96:	4680      	mov	r8, r0
 8009b98:	d108      	bne.n	8009bac <_printf_float+0x10c>
 8009b9a:	1cc8      	adds	r0, r1, #3
 8009b9c:	db02      	blt.n	8009ba4 <_printf_float+0x104>
 8009b9e:	6863      	ldr	r3, [r4, #4]
 8009ba0:	4299      	cmp	r1, r3
 8009ba2:	dd41      	ble.n	8009c28 <_printf_float+0x188>
 8009ba4:	f1a9 0902 	sub.w	r9, r9, #2
 8009ba8:	fa5f f989 	uxtb.w	r9, r9
 8009bac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009bb0:	d820      	bhi.n	8009bf4 <_printf_float+0x154>
 8009bb2:	3901      	subs	r1, #1
 8009bb4:	464a      	mov	r2, r9
 8009bb6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009bba:	9107      	str	r1, [sp, #28]
 8009bbc:	f7ff ff30 	bl	8009a20 <__exponent>
 8009bc0:	9a08      	ldr	r2, [sp, #32]
 8009bc2:	9004      	str	r0, [sp, #16]
 8009bc4:	1813      	adds	r3, r2, r0
 8009bc6:	2a01      	cmp	r2, #1
 8009bc8:	6123      	str	r3, [r4, #16]
 8009bca:	dc02      	bgt.n	8009bd2 <_printf_float+0x132>
 8009bcc:	6822      	ldr	r2, [r4, #0]
 8009bce:	07d2      	lsls	r2, r2, #31
 8009bd0:	d501      	bpl.n	8009bd6 <_printf_float+0x136>
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	6123      	str	r3, [r4, #16]
 8009bd6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d0a2      	beq.n	8009b24 <_printf_float+0x84>
 8009bde:	232d      	movs	r3, #45	; 0x2d
 8009be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009be4:	e79e      	b.n	8009b24 <_printf_float+0x84>
 8009be6:	9904      	ldr	r1, [sp, #16]
 8009be8:	2947      	cmp	r1, #71	; 0x47
 8009bea:	d1c1      	bne.n	8009b70 <_printf_float+0xd0>
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1bf      	bne.n	8009b70 <_printf_float+0xd0>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e7bc      	b.n	8009b6e <_printf_float+0xce>
 8009bf4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009bf8:	d118      	bne.n	8009c2c <_printf_float+0x18c>
 8009bfa:	2900      	cmp	r1, #0
 8009bfc:	6863      	ldr	r3, [r4, #4]
 8009bfe:	dd0b      	ble.n	8009c18 <_printf_float+0x178>
 8009c00:	6121      	str	r1, [r4, #16]
 8009c02:	b913      	cbnz	r3, 8009c0a <_printf_float+0x16a>
 8009c04:	6822      	ldr	r2, [r4, #0]
 8009c06:	07d0      	lsls	r0, r2, #31
 8009c08:	d502      	bpl.n	8009c10 <_printf_float+0x170>
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	440b      	add	r3, r1
 8009c0e:	6123      	str	r3, [r4, #16]
 8009c10:	2300      	movs	r3, #0
 8009c12:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c14:	9304      	str	r3, [sp, #16]
 8009c16:	e7de      	b.n	8009bd6 <_printf_float+0x136>
 8009c18:	b913      	cbnz	r3, 8009c20 <_printf_float+0x180>
 8009c1a:	6822      	ldr	r2, [r4, #0]
 8009c1c:	07d2      	lsls	r2, r2, #31
 8009c1e:	d501      	bpl.n	8009c24 <_printf_float+0x184>
 8009c20:	3302      	adds	r3, #2
 8009c22:	e7f4      	b.n	8009c0e <_printf_float+0x16e>
 8009c24:	2301      	movs	r3, #1
 8009c26:	e7f2      	b.n	8009c0e <_printf_float+0x16e>
 8009c28:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009c2c:	9b08      	ldr	r3, [sp, #32]
 8009c2e:	4299      	cmp	r1, r3
 8009c30:	db05      	blt.n	8009c3e <_printf_float+0x19e>
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	6121      	str	r1, [r4, #16]
 8009c36:	07d8      	lsls	r0, r3, #31
 8009c38:	d5ea      	bpl.n	8009c10 <_printf_float+0x170>
 8009c3a:	1c4b      	adds	r3, r1, #1
 8009c3c:	e7e7      	b.n	8009c0e <_printf_float+0x16e>
 8009c3e:	2900      	cmp	r1, #0
 8009c40:	bfd4      	ite	le
 8009c42:	f1c1 0202 	rsble	r2, r1, #2
 8009c46:	2201      	movgt	r2, #1
 8009c48:	4413      	add	r3, r2
 8009c4a:	e7e0      	b.n	8009c0e <_printf_float+0x16e>
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	055a      	lsls	r2, r3, #21
 8009c50:	d407      	bmi.n	8009c62 <_printf_float+0x1c2>
 8009c52:	6923      	ldr	r3, [r4, #16]
 8009c54:	4642      	mov	r2, r8
 8009c56:	4631      	mov	r1, r6
 8009c58:	4628      	mov	r0, r5
 8009c5a:	47b8      	blx	r7
 8009c5c:	3001      	adds	r0, #1
 8009c5e:	d12a      	bne.n	8009cb6 <_printf_float+0x216>
 8009c60:	e76a      	b.n	8009b38 <_printf_float+0x98>
 8009c62:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009c66:	f240 80e0 	bls.w	8009e2a <_printf_float+0x38a>
 8009c6a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009c6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c76:	d133      	bne.n	8009ce0 <_printf_float+0x240>
 8009c78:	4a37      	ldr	r2, [pc, #220]	; (8009d58 <_printf_float+0x2b8>)
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4628      	mov	r0, r5
 8009c80:	47b8      	blx	r7
 8009c82:	3001      	adds	r0, #1
 8009c84:	f43f af58 	beq.w	8009b38 <_printf_float+0x98>
 8009c88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	db02      	blt.n	8009c96 <_printf_float+0x1f6>
 8009c90:	6823      	ldr	r3, [r4, #0]
 8009c92:	07d8      	lsls	r0, r3, #31
 8009c94:	d50f      	bpl.n	8009cb6 <_printf_float+0x216>
 8009c96:	4653      	mov	r3, sl
 8009c98:	465a      	mov	r2, fp
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	47b8      	blx	r7
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	f43f af49 	beq.w	8009b38 <_printf_float+0x98>
 8009ca6:	f04f 0800 	mov.w	r8, #0
 8009caa:	f104 091a 	add.w	r9, r4, #26
 8009cae:	9b08      	ldr	r3, [sp, #32]
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	4543      	cmp	r3, r8
 8009cb4:	dc09      	bgt.n	8009cca <_printf_float+0x22a>
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	079b      	lsls	r3, r3, #30
 8009cba:	f100 8106 	bmi.w	8009eca <_printf_float+0x42a>
 8009cbe:	68e0      	ldr	r0, [r4, #12]
 8009cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc2:	4298      	cmp	r0, r3
 8009cc4:	bfb8      	it	lt
 8009cc6:	4618      	movlt	r0, r3
 8009cc8:	e738      	b.n	8009b3c <_printf_float+0x9c>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	464a      	mov	r2, r9
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b8      	blx	r7
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	f43f af2f 	beq.w	8009b38 <_printf_float+0x98>
 8009cda:	f108 0801 	add.w	r8, r8, #1
 8009cde:	e7e6      	b.n	8009cae <_printf_float+0x20e>
 8009ce0:	9b07      	ldr	r3, [sp, #28]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	dc3a      	bgt.n	8009d5c <_printf_float+0x2bc>
 8009ce6:	4a1c      	ldr	r2, [pc, #112]	; (8009d58 <_printf_float+0x2b8>)
 8009ce8:	2301      	movs	r3, #1
 8009cea:	4631      	mov	r1, r6
 8009cec:	4628      	mov	r0, r5
 8009cee:	47b8      	blx	r7
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	f43f af21 	beq.w	8009b38 <_printf_float+0x98>
 8009cf6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	d102      	bne.n	8009d04 <_printf_float+0x264>
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	07d9      	lsls	r1, r3, #31
 8009d02:	d5d8      	bpl.n	8009cb6 <_printf_float+0x216>
 8009d04:	4653      	mov	r3, sl
 8009d06:	465a      	mov	r2, fp
 8009d08:	4631      	mov	r1, r6
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	47b8      	blx	r7
 8009d0e:	3001      	adds	r0, #1
 8009d10:	f43f af12 	beq.w	8009b38 <_printf_float+0x98>
 8009d14:	f04f 0900 	mov.w	r9, #0
 8009d18:	f104 0a1a 	add.w	sl, r4, #26
 8009d1c:	9b07      	ldr	r3, [sp, #28]
 8009d1e:	425b      	negs	r3, r3
 8009d20:	454b      	cmp	r3, r9
 8009d22:	dc01      	bgt.n	8009d28 <_printf_float+0x288>
 8009d24:	9b08      	ldr	r3, [sp, #32]
 8009d26:	e795      	b.n	8009c54 <_printf_float+0x1b4>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	4652      	mov	r2, sl
 8009d2c:	4631      	mov	r1, r6
 8009d2e:	4628      	mov	r0, r5
 8009d30:	47b8      	blx	r7
 8009d32:	3001      	adds	r0, #1
 8009d34:	f43f af00 	beq.w	8009b38 <_printf_float+0x98>
 8009d38:	f109 0901 	add.w	r9, r9, #1
 8009d3c:	e7ee      	b.n	8009d1c <_printf_float+0x27c>
 8009d3e:	bf00      	nop
 8009d40:	ffffffff 	.word	0xffffffff
 8009d44:	7fefffff 	.word	0x7fefffff
 8009d48:	080db1fc 	.word	0x080db1fc
 8009d4c:	080db200 	.word	0x080db200
 8009d50:	080db204 	.word	0x080db204
 8009d54:	080db208 	.word	0x080db208
 8009d58:	0800d15a 	.word	0x0800d15a
 8009d5c:	9a08      	ldr	r2, [sp, #32]
 8009d5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d60:	429a      	cmp	r2, r3
 8009d62:	bfa8      	it	ge
 8009d64:	461a      	movge	r2, r3
 8009d66:	2a00      	cmp	r2, #0
 8009d68:	4691      	mov	r9, r2
 8009d6a:	dc38      	bgt.n	8009dde <_printf_float+0x33e>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	9305      	str	r3, [sp, #20]
 8009d70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d74:	f104 021a 	add.w	r2, r4, #26
 8009d78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d7a:	9905      	ldr	r1, [sp, #20]
 8009d7c:	9304      	str	r3, [sp, #16]
 8009d7e:	eba3 0309 	sub.w	r3, r3, r9
 8009d82:	428b      	cmp	r3, r1
 8009d84:	dc33      	bgt.n	8009dee <_printf_float+0x34e>
 8009d86:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	db3c      	blt.n	8009e08 <_printf_float+0x368>
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	07da      	lsls	r2, r3, #31
 8009d92:	d439      	bmi.n	8009e08 <_printf_float+0x368>
 8009d94:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009d98:	eba2 0903 	sub.w	r9, r2, r3
 8009d9c:	9b04      	ldr	r3, [sp, #16]
 8009d9e:	1ad2      	subs	r2, r2, r3
 8009da0:	4591      	cmp	r9, r2
 8009da2:	bfa8      	it	ge
 8009da4:	4691      	movge	r9, r2
 8009da6:	f1b9 0f00 	cmp.w	r9, #0
 8009daa:	dc35      	bgt.n	8009e18 <_printf_float+0x378>
 8009dac:	f04f 0800 	mov.w	r8, #0
 8009db0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009db4:	f104 0a1a 	add.w	sl, r4, #26
 8009db8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009dbc:	1a9b      	subs	r3, r3, r2
 8009dbe:	eba3 0309 	sub.w	r3, r3, r9
 8009dc2:	4543      	cmp	r3, r8
 8009dc4:	f77f af77 	ble.w	8009cb6 <_printf_float+0x216>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	4652      	mov	r2, sl
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4628      	mov	r0, r5
 8009dd0:	47b8      	blx	r7
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	f43f aeb0 	beq.w	8009b38 <_printf_float+0x98>
 8009dd8:	f108 0801 	add.w	r8, r8, #1
 8009ddc:	e7ec      	b.n	8009db8 <_printf_float+0x318>
 8009dde:	4613      	mov	r3, r2
 8009de0:	4631      	mov	r1, r6
 8009de2:	4642      	mov	r2, r8
 8009de4:	4628      	mov	r0, r5
 8009de6:	47b8      	blx	r7
 8009de8:	3001      	adds	r0, #1
 8009dea:	d1bf      	bne.n	8009d6c <_printf_float+0x2cc>
 8009dec:	e6a4      	b.n	8009b38 <_printf_float+0x98>
 8009dee:	2301      	movs	r3, #1
 8009df0:	4631      	mov	r1, r6
 8009df2:	4628      	mov	r0, r5
 8009df4:	9204      	str	r2, [sp, #16]
 8009df6:	47b8      	blx	r7
 8009df8:	3001      	adds	r0, #1
 8009dfa:	f43f ae9d 	beq.w	8009b38 <_printf_float+0x98>
 8009dfe:	9b05      	ldr	r3, [sp, #20]
 8009e00:	9a04      	ldr	r2, [sp, #16]
 8009e02:	3301      	adds	r3, #1
 8009e04:	9305      	str	r3, [sp, #20]
 8009e06:	e7b7      	b.n	8009d78 <_printf_float+0x2d8>
 8009e08:	4653      	mov	r3, sl
 8009e0a:	465a      	mov	r2, fp
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	4628      	mov	r0, r5
 8009e10:	47b8      	blx	r7
 8009e12:	3001      	adds	r0, #1
 8009e14:	d1be      	bne.n	8009d94 <_printf_float+0x2f4>
 8009e16:	e68f      	b.n	8009b38 <_printf_float+0x98>
 8009e18:	9a04      	ldr	r2, [sp, #16]
 8009e1a:	464b      	mov	r3, r9
 8009e1c:	4442      	add	r2, r8
 8009e1e:	4631      	mov	r1, r6
 8009e20:	4628      	mov	r0, r5
 8009e22:	47b8      	blx	r7
 8009e24:	3001      	adds	r0, #1
 8009e26:	d1c1      	bne.n	8009dac <_printf_float+0x30c>
 8009e28:	e686      	b.n	8009b38 <_printf_float+0x98>
 8009e2a:	9a08      	ldr	r2, [sp, #32]
 8009e2c:	2a01      	cmp	r2, #1
 8009e2e:	dc01      	bgt.n	8009e34 <_printf_float+0x394>
 8009e30:	07db      	lsls	r3, r3, #31
 8009e32:	d537      	bpl.n	8009ea4 <_printf_float+0x404>
 8009e34:	2301      	movs	r3, #1
 8009e36:	4642      	mov	r2, r8
 8009e38:	4631      	mov	r1, r6
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	47b8      	blx	r7
 8009e3e:	3001      	adds	r0, #1
 8009e40:	f43f ae7a 	beq.w	8009b38 <_printf_float+0x98>
 8009e44:	4653      	mov	r3, sl
 8009e46:	465a      	mov	r2, fp
 8009e48:	4631      	mov	r1, r6
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	47b8      	blx	r7
 8009e4e:	3001      	adds	r0, #1
 8009e50:	f43f ae72 	beq.w	8009b38 <_printf_float+0x98>
 8009e54:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009e58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e60:	9b08      	ldr	r3, [sp, #32]
 8009e62:	d01a      	beq.n	8009e9a <_printf_float+0x3fa>
 8009e64:	3b01      	subs	r3, #1
 8009e66:	f108 0201 	add.w	r2, r8, #1
 8009e6a:	4631      	mov	r1, r6
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	47b8      	blx	r7
 8009e70:	3001      	adds	r0, #1
 8009e72:	d10e      	bne.n	8009e92 <_printf_float+0x3f2>
 8009e74:	e660      	b.n	8009b38 <_printf_float+0x98>
 8009e76:	2301      	movs	r3, #1
 8009e78:	464a      	mov	r2, r9
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	47b8      	blx	r7
 8009e80:	3001      	adds	r0, #1
 8009e82:	f43f ae59 	beq.w	8009b38 <_printf_float+0x98>
 8009e86:	f108 0801 	add.w	r8, r8, #1
 8009e8a:	9b08      	ldr	r3, [sp, #32]
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	4543      	cmp	r3, r8
 8009e90:	dcf1      	bgt.n	8009e76 <_printf_float+0x3d6>
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e98:	e6dd      	b.n	8009c56 <_printf_float+0x1b6>
 8009e9a:	f04f 0800 	mov.w	r8, #0
 8009e9e:	f104 091a 	add.w	r9, r4, #26
 8009ea2:	e7f2      	b.n	8009e8a <_printf_float+0x3ea>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	4642      	mov	r2, r8
 8009ea8:	e7df      	b.n	8009e6a <_printf_float+0x3ca>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	464a      	mov	r2, r9
 8009eae:	4631      	mov	r1, r6
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	47b8      	blx	r7
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	f43f ae3f 	beq.w	8009b38 <_printf_float+0x98>
 8009eba:	f108 0801 	add.w	r8, r8, #1
 8009ebe:	68e3      	ldr	r3, [r4, #12]
 8009ec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ec2:	1a5b      	subs	r3, r3, r1
 8009ec4:	4543      	cmp	r3, r8
 8009ec6:	dcf0      	bgt.n	8009eaa <_printf_float+0x40a>
 8009ec8:	e6f9      	b.n	8009cbe <_printf_float+0x21e>
 8009eca:	f04f 0800 	mov.w	r8, #0
 8009ece:	f104 0919 	add.w	r9, r4, #25
 8009ed2:	e7f4      	b.n	8009ebe <_printf_float+0x41e>

08009ed4 <_printf_common>:
 8009ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed8:	4616      	mov	r6, r2
 8009eda:	4699      	mov	r9, r3
 8009edc:	688a      	ldr	r2, [r1, #8]
 8009ede:	690b      	ldr	r3, [r1, #16]
 8009ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	bfb8      	it	lt
 8009ee8:	4613      	movlt	r3, r2
 8009eea:	6033      	str	r3, [r6, #0]
 8009eec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	b10a      	cbz	r2, 8009efa <_printf_common+0x26>
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	6033      	str	r3, [r6, #0]
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	0699      	lsls	r1, r3, #26
 8009efe:	bf42      	ittt	mi
 8009f00:	6833      	ldrmi	r3, [r6, #0]
 8009f02:	3302      	addmi	r3, #2
 8009f04:	6033      	strmi	r3, [r6, #0]
 8009f06:	6825      	ldr	r5, [r4, #0]
 8009f08:	f015 0506 	ands.w	r5, r5, #6
 8009f0c:	d106      	bne.n	8009f1c <_printf_common+0x48>
 8009f0e:	f104 0a19 	add.w	sl, r4, #25
 8009f12:	68e3      	ldr	r3, [r4, #12]
 8009f14:	6832      	ldr	r2, [r6, #0]
 8009f16:	1a9b      	subs	r3, r3, r2
 8009f18:	42ab      	cmp	r3, r5
 8009f1a:	dc26      	bgt.n	8009f6a <_printf_common+0x96>
 8009f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f20:	1e13      	subs	r3, r2, #0
 8009f22:	6822      	ldr	r2, [r4, #0]
 8009f24:	bf18      	it	ne
 8009f26:	2301      	movne	r3, #1
 8009f28:	0692      	lsls	r2, r2, #26
 8009f2a:	d42b      	bmi.n	8009f84 <_printf_common+0xb0>
 8009f2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f30:	4649      	mov	r1, r9
 8009f32:	4638      	mov	r0, r7
 8009f34:	47c0      	blx	r8
 8009f36:	3001      	adds	r0, #1
 8009f38:	d01e      	beq.n	8009f78 <_printf_common+0xa4>
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	6922      	ldr	r2, [r4, #16]
 8009f3e:	f003 0306 	and.w	r3, r3, #6
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	bf02      	ittt	eq
 8009f46:	68e5      	ldreq	r5, [r4, #12]
 8009f48:	6833      	ldreq	r3, [r6, #0]
 8009f4a:	1aed      	subeq	r5, r5, r3
 8009f4c:	68a3      	ldr	r3, [r4, #8]
 8009f4e:	bf0c      	ite	eq
 8009f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f54:	2500      	movne	r5, #0
 8009f56:	4293      	cmp	r3, r2
 8009f58:	bfc4      	itt	gt
 8009f5a:	1a9b      	subgt	r3, r3, r2
 8009f5c:	18ed      	addgt	r5, r5, r3
 8009f5e:	2600      	movs	r6, #0
 8009f60:	341a      	adds	r4, #26
 8009f62:	42b5      	cmp	r5, r6
 8009f64:	d11a      	bne.n	8009f9c <_printf_common+0xc8>
 8009f66:	2000      	movs	r0, #0
 8009f68:	e008      	b.n	8009f7c <_printf_common+0xa8>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	4652      	mov	r2, sl
 8009f6e:	4649      	mov	r1, r9
 8009f70:	4638      	mov	r0, r7
 8009f72:	47c0      	blx	r8
 8009f74:	3001      	adds	r0, #1
 8009f76:	d103      	bne.n	8009f80 <_printf_common+0xac>
 8009f78:	f04f 30ff 	mov.w	r0, #4294967295
 8009f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f80:	3501      	adds	r5, #1
 8009f82:	e7c6      	b.n	8009f12 <_printf_common+0x3e>
 8009f84:	18e1      	adds	r1, r4, r3
 8009f86:	1c5a      	adds	r2, r3, #1
 8009f88:	2030      	movs	r0, #48	; 0x30
 8009f8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f8e:	4422      	add	r2, r4
 8009f90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f98:	3302      	adds	r3, #2
 8009f9a:	e7c7      	b.n	8009f2c <_printf_common+0x58>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	4622      	mov	r2, r4
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	4638      	mov	r0, r7
 8009fa4:	47c0      	blx	r8
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	d0e6      	beq.n	8009f78 <_printf_common+0xa4>
 8009faa:	3601      	adds	r6, #1
 8009fac:	e7d9      	b.n	8009f62 <_printf_common+0x8e>
	...

08009fb0 <_printf_i>:
 8009fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb4:	7e0f      	ldrb	r7, [r1, #24]
 8009fb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fb8:	2f78      	cmp	r7, #120	; 0x78
 8009fba:	4691      	mov	r9, r2
 8009fbc:	4680      	mov	r8, r0
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	469a      	mov	sl, r3
 8009fc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fc6:	d807      	bhi.n	8009fd8 <_printf_i+0x28>
 8009fc8:	2f62      	cmp	r7, #98	; 0x62
 8009fca:	d80a      	bhi.n	8009fe2 <_printf_i+0x32>
 8009fcc:	2f00      	cmp	r7, #0
 8009fce:	f000 80d4 	beq.w	800a17a <_printf_i+0x1ca>
 8009fd2:	2f58      	cmp	r7, #88	; 0x58
 8009fd4:	f000 80c0 	beq.w	800a158 <_printf_i+0x1a8>
 8009fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fe0:	e03a      	b.n	800a058 <_printf_i+0xa8>
 8009fe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fe6:	2b15      	cmp	r3, #21
 8009fe8:	d8f6      	bhi.n	8009fd8 <_printf_i+0x28>
 8009fea:	a101      	add	r1, pc, #4	; (adr r1, 8009ff0 <_printf_i+0x40>)
 8009fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ff0:	0800a049 	.word	0x0800a049
 8009ff4:	0800a05d 	.word	0x0800a05d
 8009ff8:	08009fd9 	.word	0x08009fd9
 8009ffc:	08009fd9 	.word	0x08009fd9
 800a000:	08009fd9 	.word	0x08009fd9
 800a004:	08009fd9 	.word	0x08009fd9
 800a008:	0800a05d 	.word	0x0800a05d
 800a00c:	08009fd9 	.word	0x08009fd9
 800a010:	08009fd9 	.word	0x08009fd9
 800a014:	08009fd9 	.word	0x08009fd9
 800a018:	08009fd9 	.word	0x08009fd9
 800a01c:	0800a161 	.word	0x0800a161
 800a020:	0800a089 	.word	0x0800a089
 800a024:	0800a11b 	.word	0x0800a11b
 800a028:	08009fd9 	.word	0x08009fd9
 800a02c:	08009fd9 	.word	0x08009fd9
 800a030:	0800a183 	.word	0x0800a183
 800a034:	08009fd9 	.word	0x08009fd9
 800a038:	0800a089 	.word	0x0800a089
 800a03c:	08009fd9 	.word	0x08009fd9
 800a040:	08009fd9 	.word	0x08009fd9
 800a044:	0800a123 	.word	0x0800a123
 800a048:	682b      	ldr	r3, [r5, #0]
 800a04a:	1d1a      	adds	r2, r3, #4
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	602a      	str	r2, [r5, #0]
 800a050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a058:	2301      	movs	r3, #1
 800a05a:	e09f      	b.n	800a19c <_printf_i+0x1ec>
 800a05c:	6820      	ldr	r0, [r4, #0]
 800a05e:	682b      	ldr	r3, [r5, #0]
 800a060:	0607      	lsls	r7, r0, #24
 800a062:	f103 0104 	add.w	r1, r3, #4
 800a066:	6029      	str	r1, [r5, #0]
 800a068:	d501      	bpl.n	800a06e <_printf_i+0xbe>
 800a06a:	681e      	ldr	r6, [r3, #0]
 800a06c:	e003      	b.n	800a076 <_printf_i+0xc6>
 800a06e:	0646      	lsls	r6, r0, #25
 800a070:	d5fb      	bpl.n	800a06a <_printf_i+0xba>
 800a072:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a076:	2e00      	cmp	r6, #0
 800a078:	da03      	bge.n	800a082 <_printf_i+0xd2>
 800a07a:	232d      	movs	r3, #45	; 0x2d
 800a07c:	4276      	negs	r6, r6
 800a07e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a082:	485a      	ldr	r0, [pc, #360]	; (800a1ec <_printf_i+0x23c>)
 800a084:	230a      	movs	r3, #10
 800a086:	e012      	b.n	800a0ae <_printf_i+0xfe>
 800a088:	682b      	ldr	r3, [r5, #0]
 800a08a:	6820      	ldr	r0, [r4, #0]
 800a08c:	1d19      	adds	r1, r3, #4
 800a08e:	6029      	str	r1, [r5, #0]
 800a090:	0605      	lsls	r5, r0, #24
 800a092:	d501      	bpl.n	800a098 <_printf_i+0xe8>
 800a094:	681e      	ldr	r6, [r3, #0]
 800a096:	e002      	b.n	800a09e <_printf_i+0xee>
 800a098:	0641      	lsls	r1, r0, #25
 800a09a:	d5fb      	bpl.n	800a094 <_printf_i+0xe4>
 800a09c:	881e      	ldrh	r6, [r3, #0]
 800a09e:	4853      	ldr	r0, [pc, #332]	; (800a1ec <_printf_i+0x23c>)
 800a0a0:	2f6f      	cmp	r7, #111	; 0x6f
 800a0a2:	bf0c      	ite	eq
 800a0a4:	2308      	moveq	r3, #8
 800a0a6:	230a      	movne	r3, #10
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0ae:	6865      	ldr	r5, [r4, #4]
 800a0b0:	60a5      	str	r5, [r4, #8]
 800a0b2:	2d00      	cmp	r5, #0
 800a0b4:	bfa2      	ittt	ge
 800a0b6:	6821      	ldrge	r1, [r4, #0]
 800a0b8:	f021 0104 	bicge.w	r1, r1, #4
 800a0bc:	6021      	strge	r1, [r4, #0]
 800a0be:	b90e      	cbnz	r6, 800a0c4 <_printf_i+0x114>
 800a0c0:	2d00      	cmp	r5, #0
 800a0c2:	d04b      	beq.n	800a15c <_printf_i+0x1ac>
 800a0c4:	4615      	mov	r5, r2
 800a0c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0ca:	fb03 6711 	mls	r7, r3, r1, r6
 800a0ce:	5dc7      	ldrb	r7, [r0, r7]
 800a0d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0d4:	4637      	mov	r7, r6
 800a0d6:	42bb      	cmp	r3, r7
 800a0d8:	460e      	mov	r6, r1
 800a0da:	d9f4      	bls.n	800a0c6 <_printf_i+0x116>
 800a0dc:	2b08      	cmp	r3, #8
 800a0de:	d10b      	bne.n	800a0f8 <_printf_i+0x148>
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	07de      	lsls	r6, r3, #31
 800a0e4:	d508      	bpl.n	800a0f8 <_printf_i+0x148>
 800a0e6:	6923      	ldr	r3, [r4, #16]
 800a0e8:	6861      	ldr	r1, [r4, #4]
 800a0ea:	4299      	cmp	r1, r3
 800a0ec:	bfde      	ittt	le
 800a0ee:	2330      	movle	r3, #48	; 0x30
 800a0f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0f8:	1b52      	subs	r2, r2, r5
 800a0fa:	6122      	str	r2, [r4, #16]
 800a0fc:	f8cd a000 	str.w	sl, [sp]
 800a100:	464b      	mov	r3, r9
 800a102:	aa03      	add	r2, sp, #12
 800a104:	4621      	mov	r1, r4
 800a106:	4640      	mov	r0, r8
 800a108:	f7ff fee4 	bl	8009ed4 <_printf_common>
 800a10c:	3001      	adds	r0, #1
 800a10e:	d14a      	bne.n	800a1a6 <_printf_i+0x1f6>
 800a110:	f04f 30ff 	mov.w	r0, #4294967295
 800a114:	b004      	add	sp, #16
 800a116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	f043 0320 	orr.w	r3, r3, #32
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	4833      	ldr	r0, [pc, #204]	; (800a1f0 <_printf_i+0x240>)
 800a124:	2778      	movs	r7, #120	; 0x78
 800a126:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	6829      	ldr	r1, [r5, #0]
 800a12e:	061f      	lsls	r7, r3, #24
 800a130:	f851 6b04 	ldr.w	r6, [r1], #4
 800a134:	d402      	bmi.n	800a13c <_printf_i+0x18c>
 800a136:	065f      	lsls	r7, r3, #25
 800a138:	bf48      	it	mi
 800a13a:	b2b6      	uxthmi	r6, r6
 800a13c:	07df      	lsls	r7, r3, #31
 800a13e:	bf48      	it	mi
 800a140:	f043 0320 	orrmi.w	r3, r3, #32
 800a144:	6029      	str	r1, [r5, #0]
 800a146:	bf48      	it	mi
 800a148:	6023      	strmi	r3, [r4, #0]
 800a14a:	b91e      	cbnz	r6, 800a154 <_printf_i+0x1a4>
 800a14c:	6823      	ldr	r3, [r4, #0]
 800a14e:	f023 0320 	bic.w	r3, r3, #32
 800a152:	6023      	str	r3, [r4, #0]
 800a154:	2310      	movs	r3, #16
 800a156:	e7a7      	b.n	800a0a8 <_printf_i+0xf8>
 800a158:	4824      	ldr	r0, [pc, #144]	; (800a1ec <_printf_i+0x23c>)
 800a15a:	e7e4      	b.n	800a126 <_printf_i+0x176>
 800a15c:	4615      	mov	r5, r2
 800a15e:	e7bd      	b.n	800a0dc <_printf_i+0x12c>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	6826      	ldr	r6, [r4, #0]
 800a164:	6961      	ldr	r1, [r4, #20]
 800a166:	1d18      	adds	r0, r3, #4
 800a168:	6028      	str	r0, [r5, #0]
 800a16a:	0635      	lsls	r5, r6, #24
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	d501      	bpl.n	800a174 <_printf_i+0x1c4>
 800a170:	6019      	str	r1, [r3, #0]
 800a172:	e002      	b.n	800a17a <_printf_i+0x1ca>
 800a174:	0670      	lsls	r0, r6, #25
 800a176:	d5fb      	bpl.n	800a170 <_printf_i+0x1c0>
 800a178:	8019      	strh	r1, [r3, #0]
 800a17a:	2300      	movs	r3, #0
 800a17c:	6123      	str	r3, [r4, #16]
 800a17e:	4615      	mov	r5, r2
 800a180:	e7bc      	b.n	800a0fc <_printf_i+0x14c>
 800a182:	682b      	ldr	r3, [r5, #0]
 800a184:	1d1a      	adds	r2, r3, #4
 800a186:	602a      	str	r2, [r5, #0]
 800a188:	681d      	ldr	r5, [r3, #0]
 800a18a:	6862      	ldr	r2, [r4, #4]
 800a18c:	2100      	movs	r1, #0
 800a18e:	4628      	mov	r0, r5
 800a190:	f7f6 f856 	bl	8000240 <memchr>
 800a194:	b108      	cbz	r0, 800a19a <_printf_i+0x1ea>
 800a196:	1b40      	subs	r0, r0, r5
 800a198:	6060      	str	r0, [r4, #4]
 800a19a:	6863      	ldr	r3, [r4, #4]
 800a19c:	6123      	str	r3, [r4, #16]
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1a4:	e7aa      	b.n	800a0fc <_printf_i+0x14c>
 800a1a6:	6923      	ldr	r3, [r4, #16]
 800a1a8:	462a      	mov	r2, r5
 800a1aa:	4649      	mov	r1, r9
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	47d0      	blx	sl
 800a1b0:	3001      	adds	r0, #1
 800a1b2:	d0ad      	beq.n	800a110 <_printf_i+0x160>
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	079b      	lsls	r3, r3, #30
 800a1b8:	d413      	bmi.n	800a1e2 <_printf_i+0x232>
 800a1ba:	68e0      	ldr	r0, [r4, #12]
 800a1bc:	9b03      	ldr	r3, [sp, #12]
 800a1be:	4298      	cmp	r0, r3
 800a1c0:	bfb8      	it	lt
 800a1c2:	4618      	movlt	r0, r3
 800a1c4:	e7a6      	b.n	800a114 <_printf_i+0x164>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	4632      	mov	r2, r6
 800a1ca:	4649      	mov	r1, r9
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	47d0      	blx	sl
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	d09d      	beq.n	800a110 <_printf_i+0x160>
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	68e3      	ldr	r3, [r4, #12]
 800a1d8:	9903      	ldr	r1, [sp, #12]
 800a1da:	1a5b      	subs	r3, r3, r1
 800a1dc:	42ab      	cmp	r3, r5
 800a1de:	dcf2      	bgt.n	800a1c6 <_printf_i+0x216>
 800a1e0:	e7eb      	b.n	800a1ba <_printf_i+0x20a>
 800a1e2:	2500      	movs	r5, #0
 800a1e4:	f104 0619 	add.w	r6, r4, #25
 800a1e8:	e7f5      	b.n	800a1d6 <_printf_i+0x226>
 800a1ea:	bf00      	nop
 800a1ec:	080db20c 	.word	0x080db20c
 800a1f0:	080db21d 	.word	0x080db21d

0800a1f4 <std>:
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	b510      	push	{r4, lr}
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	e9c0 3300 	strd	r3, r3, [r0]
 800a1fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a202:	6083      	str	r3, [r0, #8]
 800a204:	8181      	strh	r1, [r0, #12]
 800a206:	6643      	str	r3, [r0, #100]	; 0x64
 800a208:	81c2      	strh	r2, [r0, #14]
 800a20a:	6183      	str	r3, [r0, #24]
 800a20c:	4619      	mov	r1, r3
 800a20e:	2208      	movs	r2, #8
 800a210:	305c      	adds	r0, #92	; 0x5c
 800a212:	f000 f8f4 	bl	800a3fe <memset>
 800a216:	4b0d      	ldr	r3, [pc, #52]	; (800a24c <std+0x58>)
 800a218:	6263      	str	r3, [r4, #36]	; 0x24
 800a21a:	4b0d      	ldr	r3, [pc, #52]	; (800a250 <std+0x5c>)
 800a21c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a21e:	4b0d      	ldr	r3, [pc, #52]	; (800a254 <std+0x60>)
 800a220:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a222:	4b0d      	ldr	r3, [pc, #52]	; (800a258 <std+0x64>)
 800a224:	6323      	str	r3, [r4, #48]	; 0x30
 800a226:	4b0d      	ldr	r3, [pc, #52]	; (800a25c <std+0x68>)
 800a228:	6224      	str	r4, [r4, #32]
 800a22a:	429c      	cmp	r4, r3
 800a22c:	d006      	beq.n	800a23c <std+0x48>
 800a22e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a232:	4294      	cmp	r4, r2
 800a234:	d002      	beq.n	800a23c <std+0x48>
 800a236:	33d0      	adds	r3, #208	; 0xd0
 800a238:	429c      	cmp	r4, r3
 800a23a:	d105      	bne.n	800a248 <std+0x54>
 800a23c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a244:	f000 b97a 	b.w	800a53c <__retarget_lock_init_recursive>
 800a248:	bd10      	pop	{r4, pc}
 800a24a:	bf00      	nop
 800a24c:	0800a379 	.word	0x0800a379
 800a250:	0800a39b 	.word	0x0800a39b
 800a254:	0800a3d3 	.word	0x0800a3d3
 800a258:	0800a3f7 	.word	0x0800a3f7
 800a25c:	20004b08 	.word	0x20004b08

0800a260 <stdio_exit_handler>:
 800a260:	4a02      	ldr	r2, [pc, #8]	; (800a26c <stdio_exit_handler+0xc>)
 800a262:	4903      	ldr	r1, [pc, #12]	; (800a270 <stdio_exit_handler+0x10>)
 800a264:	4803      	ldr	r0, [pc, #12]	; (800a274 <stdio_exit_handler+0x14>)
 800a266:	f000 b869 	b.w	800a33c <_fwalk_sglue>
 800a26a:	bf00      	nop
 800a26c:	200041a8 	.word	0x200041a8
 800a270:	0800b9e5 	.word	0x0800b9e5
 800a274:	200041b4 	.word	0x200041b4

0800a278 <cleanup_stdio>:
 800a278:	6841      	ldr	r1, [r0, #4]
 800a27a:	4b0c      	ldr	r3, [pc, #48]	; (800a2ac <cleanup_stdio+0x34>)
 800a27c:	4299      	cmp	r1, r3
 800a27e:	b510      	push	{r4, lr}
 800a280:	4604      	mov	r4, r0
 800a282:	d001      	beq.n	800a288 <cleanup_stdio+0x10>
 800a284:	f001 fbae 	bl	800b9e4 <_fflush_r>
 800a288:	68a1      	ldr	r1, [r4, #8]
 800a28a:	4b09      	ldr	r3, [pc, #36]	; (800a2b0 <cleanup_stdio+0x38>)
 800a28c:	4299      	cmp	r1, r3
 800a28e:	d002      	beq.n	800a296 <cleanup_stdio+0x1e>
 800a290:	4620      	mov	r0, r4
 800a292:	f001 fba7 	bl	800b9e4 <_fflush_r>
 800a296:	68e1      	ldr	r1, [r4, #12]
 800a298:	4b06      	ldr	r3, [pc, #24]	; (800a2b4 <cleanup_stdio+0x3c>)
 800a29a:	4299      	cmp	r1, r3
 800a29c:	d004      	beq.n	800a2a8 <cleanup_stdio+0x30>
 800a29e:	4620      	mov	r0, r4
 800a2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2a4:	f001 bb9e 	b.w	800b9e4 <_fflush_r>
 800a2a8:	bd10      	pop	{r4, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20004b08 	.word	0x20004b08
 800a2b0:	20004b70 	.word	0x20004b70
 800a2b4:	20004bd8 	.word	0x20004bd8

0800a2b8 <global_stdio_init.part.0>:
 800a2b8:	b510      	push	{r4, lr}
 800a2ba:	4b0b      	ldr	r3, [pc, #44]	; (800a2e8 <global_stdio_init.part.0+0x30>)
 800a2bc:	4c0b      	ldr	r4, [pc, #44]	; (800a2ec <global_stdio_init.part.0+0x34>)
 800a2be:	4a0c      	ldr	r2, [pc, #48]	; (800a2f0 <global_stdio_init.part.0+0x38>)
 800a2c0:	601a      	str	r2, [r3, #0]
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	2104      	movs	r1, #4
 800a2c8:	f7ff ff94 	bl	800a1f4 <std>
 800a2cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	2109      	movs	r1, #9
 800a2d4:	f7ff ff8e 	bl	800a1f4 <std>
 800a2d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a2dc:	2202      	movs	r2, #2
 800a2de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2e2:	2112      	movs	r1, #18
 800a2e4:	f7ff bf86 	b.w	800a1f4 <std>
 800a2e8:	20004c40 	.word	0x20004c40
 800a2ec:	20004b08 	.word	0x20004b08
 800a2f0:	0800a261 	.word	0x0800a261

0800a2f4 <__sfp_lock_acquire>:
 800a2f4:	4801      	ldr	r0, [pc, #4]	; (800a2fc <__sfp_lock_acquire+0x8>)
 800a2f6:	f000 b922 	b.w	800a53e <__retarget_lock_acquire_recursive>
 800a2fa:	bf00      	nop
 800a2fc:	20004c49 	.word	0x20004c49

0800a300 <__sfp_lock_release>:
 800a300:	4801      	ldr	r0, [pc, #4]	; (800a308 <__sfp_lock_release+0x8>)
 800a302:	f000 b91d 	b.w	800a540 <__retarget_lock_release_recursive>
 800a306:	bf00      	nop
 800a308:	20004c49 	.word	0x20004c49

0800a30c <__sinit>:
 800a30c:	b510      	push	{r4, lr}
 800a30e:	4604      	mov	r4, r0
 800a310:	f7ff fff0 	bl	800a2f4 <__sfp_lock_acquire>
 800a314:	6a23      	ldr	r3, [r4, #32]
 800a316:	b11b      	cbz	r3, 800a320 <__sinit+0x14>
 800a318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a31c:	f7ff bff0 	b.w	800a300 <__sfp_lock_release>
 800a320:	4b04      	ldr	r3, [pc, #16]	; (800a334 <__sinit+0x28>)
 800a322:	6223      	str	r3, [r4, #32]
 800a324:	4b04      	ldr	r3, [pc, #16]	; (800a338 <__sinit+0x2c>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1f5      	bne.n	800a318 <__sinit+0xc>
 800a32c:	f7ff ffc4 	bl	800a2b8 <global_stdio_init.part.0>
 800a330:	e7f2      	b.n	800a318 <__sinit+0xc>
 800a332:	bf00      	nop
 800a334:	0800a279 	.word	0x0800a279
 800a338:	20004c40 	.word	0x20004c40

0800a33c <_fwalk_sglue>:
 800a33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a340:	4607      	mov	r7, r0
 800a342:	4688      	mov	r8, r1
 800a344:	4614      	mov	r4, r2
 800a346:	2600      	movs	r6, #0
 800a348:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a34c:	f1b9 0901 	subs.w	r9, r9, #1
 800a350:	d505      	bpl.n	800a35e <_fwalk_sglue+0x22>
 800a352:	6824      	ldr	r4, [r4, #0]
 800a354:	2c00      	cmp	r4, #0
 800a356:	d1f7      	bne.n	800a348 <_fwalk_sglue+0xc>
 800a358:	4630      	mov	r0, r6
 800a35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a35e:	89ab      	ldrh	r3, [r5, #12]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d907      	bls.n	800a374 <_fwalk_sglue+0x38>
 800a364:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a368:	3301      	adds	r3, #1
 800a36a:	d003      	beq.n	800a374 <_fwalk_sglue+0x38>
 800a36c:	4629      	mov	r1, r5
 800a36e:	4638      	mov	r0, r7
 800a370:	47c0      	blx	r8
 800a372:	4306      	orrs	r6, r0
 800a374:	3568      	adds	r5, #104	; 0x68
 800a376:	e7e9      	b.n	800a34c <_fwalk_sglue+0x10>

0800a378 <__sread>:
 800a378:	b510      	push	{r4, lr}
 800a37a:	460c      	mov	r4, r1
 800a37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a380:	f000 f87e 	bl	800a480 <_read_r>
 800a384:	2800      	cmp	r0, #0
 800a386:	bfab      	itete	ge
 800a388:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a38a:	89a3      	ldrhlt	r3, [r4, #12]
 800a38c:	181b      	addge	r3, r3, r0
 800a38e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a392:	bfac      	ite	ge
 800a394:	6563      	strge	r3, [r4, #84]	; 0x54
 800a396:	81a3      	strhlt	r3, [r4, #12]
 800a398:	bd10      	pop	{r4, pc}

0800a39a <__swrite>:
 800a39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a39e:	461f      	mov	r7, r3
 800a3a0:	898b      	ldrh	r3, [r1, #12]
 800a3a2:	05db      	lsls	r3, r3, #23
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	4616      	mov	r6, r2
 800a3aa:	d505      	bpl.n	800a3b8 <__swrite+0x1e>
 800a3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f000 f852 	bl	800a45c <_lseek_r>
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3c2:	81a3      	strh	r3, [r4, #12]
 800a3c4:	4632      	mov	r2, r6
 800a3c6:	463b      	mov	r3, r7
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ce:	f000 b879 	b.w	800a4c4 <_write_r>

0800a3d2 <__sseek>:
 800a3d2:	b510      	push	{r4, lr}
 800a3d4:	460c      	mov	r4, r1
 800a3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3da:	f000 f83f 	bl	800a45c <_lseek_r>
 800a3de:	1c43      	adds	r3, r0, #1
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	bf15      	itete	ne
 800a3e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3ee:	81a3      	strheq	r3, [r4, #12]
 800a3f0:	bf18      	it	ne
 800a3f2:	81a3      	strhne	r3, [r4, #12]
 800a3f4:	bd10      	pop	{r4, pc}

0800a3f6 <__sclose>:
 800a3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3fa:	f000 b81f 	b.w	800a43c <_close_r>

0800a3fe <memset>:
 800a3fe:	4402      	add	r2, r0
 800a400:	4603      	mov	r3, r0
 800a402:	4293      	cmp	r3, r2
 800a404:	d100      	bne.n	800a408 <memset+0xa>
 800a406:	4770      	bx	lr
 800a408:	f803 1b01 	strb.w	r1, [r3], #1
 800a40c:	e7f9      	b.n	800a402 <memset+0x4>

0800a40e <strncmp>:
 800a40e:	b510      	push	{r4, lr}
 800a410:	b16a      	cbz	r2, 800a42e <strncmp+0x20>
 800a412:	3901      	subs	r1, #1
 800a414:	1884      	adds	r4, r0, r2
 800a416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a41a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a41e:	429a      	cmp	r2, r3
 800a420:	d103      	bne.n	800a42a <strncmp+0x1c>
 800a422:	42a0      	cmp	r0, r4
 800a424:	d001      	beq.n	800a42a <strncmp+0x1c>
 800a426:	2a00      	cmp	r2, #0
 800a428:	d1f5      	bne.n	800a416 <strncmp+0x8>
 800a42a:	1ad0      	subs	r0, r2, r3
 800a42c:	bd10      	pop	{r4, pc}
 800a42e:	4610      	mov	r0, r2
 800a430:	e7fc      	b.n	800a42c <strncmp+0x1e>
	...

0800a434 <_localeconv_r>:
 800a434:	4800      	ldr	r0, [pc, #0]	; (800a438 <_localeconv_r+0x4>)
 800a436:	4770      	bx	lr
 800a438:	200042f4 	.word	0x200042f4

0800a43c <_close_r>:
 800a43c:	b538      	push	{r3, r4, r5, lr}
 800a43e:	4d06      	ldr	r5, [pc, #24]	; (800a458 <_close_r+0x1c>)
 800a440:	2300      	movs	r3, #0
 800a442:	4604      	mov	r4, r0
 800a444:	4608      	mov	r0, r1
 800a446:	602b      	str	r3, [r5, #0]
 800a448:	f001 fe9e 	bl	800c188 <_close>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_close_r+0x1a>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	b103      	cbz	r3, 800a456 <_close_r+0x1a>
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	20004c44 	.word	0x20004c44

0800a45c <_lseek_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d07      	ldr	r5, [pc, #28]	; (800a47c <_lseek_r+0x20>)
 800a460:	4604      	mov	r4, r0
 800a462:	4608      	mov	r0, r1
 800a464:	4611      	mov	r1, r2
 800a466:	2200      	movs	r2, #0
 800a468:	602a      	str	r2, [r5, #0]
 800a46a:	461a      	mov	r2, r3
 800a46c:	f001 feb4 	bl	800c1d8 <_lseek>
 800a470:	1c43      	adds	r3, r0, #1
 800a472:	d102      	bne.n	800a47a <_lseek_r+0x1e>
 800a474:	682b      	ldr	r3, [r5, #0]
 800a476:	b103      	cbz	r3, 800a47a <_lseek_r+0x1e>
 800a478:	6023      	str	r3, [r4, #0]
 800a47a:	bd38      	pop	{r3, r4, r5, pc}
 800a47c:	20004c44 	.word	0x20004c44

0800a480 <_read_r>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	4d07      	ldr	r5, [pc, #28]	; (800a4a0 <_read_r+0x20>)
 800a484:	4604      	mov	r4, r0
 800a486:	4608      	mov	r0, r1
 800a488:	4611      	mov	r1, r2
 800a48a:	2200      	movs	r2, #0
 800a48c:	602a      	str	r2, [r5, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	f001 feaa 	bl	800c1e8 <_read>
 800a494:	1c43      	adds	r3, r0, #1
 800a496:	d102      	bne.n	800a49e <_read_r+0x1e>
 800a498:	682b      	ldr	r3, [r5, #0]
 800a49a:	b103      	cbz	r3, 800a49e <_read_r+0x1e>
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	20004c44 	.word	0x20004c44

0800a4a4 <_sbrk_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	4d06      	ldr	r5, [pc, #24]	; (800a4c0 <_sbrk_r+0x1c>)
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	4608      	mov	r0, r1
 800a4ae:	602b      	str	r3, [r5, #0]
 800a4b0:	f7fb fb66 	bl	8005b80 <_sbrk>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d102      	bne.n	800a4be <_sbrk_r+0x1a>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	b103      	cbz	r3, 800a4be <_sbrk_r+0x1a>
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	20004c44 	.word	0x20004c44

0800a4c4 <_write_r>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	4d07      	ldr	r5, [pc, #28]	; (800a4e4 <_write_r+0x20>)
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	4608      	mov	r0, r1
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	602a      	str	r2, [r5, #0]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	f7f8 fbc4 	bl	8002c60 <_write>
 800a4d8:	1c43      	adds	r3, r0, #1
 800a4da:	d102      	bne.n	800a4e2 <_write_r+0x1e>
 800a4dc:	682b      	ldr	r3, [r5, #0]
 800a4de:	b103      	cbz	r3, 800a4e2 <_write_r+0x1e>
 800a4e0:	6023      	str	r3, [r4, #0]
 800a4e2:	bd38      	pop	{r3, r4, r5, pc}
 800a4e4:	20004c44 	.word	0x20004c44

0800a4e8 <__errno>:
 800a4e8:	4b01      	ldr	r3, [pc, #4]	; (800a4f0 <__errno+0x8>)
 800a4ea:	6818      	ldr	r0, [r3, #0]
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	20004200 	.word	0x20004200

0800a4f4 <__libc_init_array>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	4d0d      	ldr	r5, [pc, #52]	; (800a52c <__libc_init_array+0x38>)
 800a4f8:	4c0d      	ldr	r4, [pc, #52]	; (800a530 <__libc_init_array+0x3c>)
 800a4fa:	1b64      	subs	r4, r4, r5
 800a4fc:	10a4      	asrs	r4, r4, #2
 800a4fe:	2600      	movs	r6, #0
 800a500:	42a6      	cmp	r6, r4
 800a502:	d109      	bne.n	800a518 <__libc_init_array+0x24>
 800a504:	4d0b      	ldr	r5, [pc, #44]	; (800a534 <__libc_init_array+0x40>)
 800a506:	4c0c      	ldr	r4, [pc, #48]	; (800a538 <__libc_init_array+0x44>)
 800a508:	f001 fe78 	bl	800c1fc <_init>
 800a50c:	1b64      	subs	r4, r4, r5
 800a50e:	10a4      	asrs	r4, r4, #2
 800a510:	2600      	movs	r6, #0
 800a512:	42a6      	cmp	r6, r4
 800a514:	d105      	bne.n	800a522 <__libc_init_array+0x2e>
 800a516:	bd70      	pop	{r4, r5, r6, pc}
 800a518:	f855 3b04 	ldr.w	r3, [r5], #4
 800a51c:	4798      	blx	r3
 800a51e:	3601      	adds	r6, #1
 800a520:	e7ee      	b.n	800a500 <__libc_init_array+0xc>
 800a522:	f855 3b04 	ldr.w	r3, [r5], #4
 800a526:	4798      	blx	r3
 800a528:	3601      	adds	r6, #1
 800a52a:	e7f2      	b.n	800a512 <__libc_init_array+0x1e>
 800a52c:	080db6c0 	.word	0x080db6c0
 800a530:	080db6c0 	.word	0x080db6c0
 800a534:	080db6c0 	.word	0x080db6c0
 800a538:	080db6c4 	.word	0x080db6c4

0800a53c <__retarget_lock_init_recursive>:
 800a53c:	4770      	bx	lr

0800a53e <__retarget_lock_acquire_recursive>:
 800a53e:	4770      	bx	lr

0800a540 <__retarget_lock_release_recursive>:
 800a540:	4770      	bx	lr

0800a542 <memcpy>:
 800a542:	440a      	add	r2, r1
 800a544:	4291      	cmp	r1, r2
 800a546:	f100 33ff 	add.w	r3, r0, #4294967295
 800a54a:	d100      	bne.n	800a54e <memcpy+0xc>
 800a54c:	4770      	bx	lr
 800a54e:	b510      	push	{r4, lr}
 800a550:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a554:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a558:	4291      	cmp	r1, r2
 800a55a:	d1f9      	bne.n	800a550 <memcpy+0xe>
 800a55c:	bd10      	pop	{r4, pc}

0800a55e <quorem>:
 800a55e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a562:	6903      	ldr	r3, [r0, #16]
 800a564:	690c      	ldr	r4, [r1, #16]
 800a566:	42a3      	cmp	r3, r4
 800a568:	4607      	mov	r7, r0
 800a56a:	db7e      	blt.n	800a66a <quorem+0x10c>
 800a56c:	3c01      	subs	r4, #1
 800a56e:	f101 0814 	add.w	r8, r1, #20
 800a572:	f100 0514 	add.w	r5, r0, #20
 800a576:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a57a:	9301      	str	r3, [sp, #4]
 800a57c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a580:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a584:	3301      	adds	r3, #1
 800a586:	429a      	cmp	r2, r3
 800a588:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a58c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a590:	fbb2 f6f3 	udiv	r6, r2, r3
 800a594:	d331      	bcc.n	800a5fa <quorem+0x9c>
 800a596:	f04f 0e00 	mov.w	lr, #0
 800a59a:	4640      	mov	r0, r8
 800a59c:	46ac      	mov	ip, r5
 800a59e:	46f2      	mov	sl, lr
 800a5a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a5a4:	b293      	uxth	r3, r2
 800a5a6:	fb06 e303 	mla	r3, r6, r3, lr
 800a5aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5ae:	0c1a      	lsrs	r2, r3, #16
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	ebaa 0303 	sub.w	r3, sl, r3
 800a5b6:	f8dc a000 	ldr.w	sl, [ip]
 800a5ba:	fa13 f38a 	uxtah	r3, r3, sl
 800a5be:	fb06 220e 	mla	r2, r6, lr, r2
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	9b00      	ldr	r3, [sp, #0]
 800a5c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5ca:	b292      	uxth	r2, r2
 800a5cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a5d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5d4:	f8bd 3000 	ldrh.w	r3, [sp]
 800a5d8:	4581      	cmp	r9, r0
 800a5da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5de:	f84c 3b04 	str.w	r3, [ip], #4
 800a5e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a5e6:	d2db      	bcs.n	800a5a0 <quorem+0x42>
 800a5e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a5ec:	b92b      	cbnz	r3, 800a5fa <quorem+0x9c>
 800a5ee:	9b01      	ldr	r3, [sp, #4]
 800a5f0:	3b04      	subs	r3, #4
 800a5f2:	429d      	cmp	r5, r3
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	d32c      	bcc.n	800a652 <quorem+0xf4>
 800a5f8:	613c      	str	r4, [r7, #16]
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	f001 f86c 	bl	800b6d8 <__mcmp>
 800a600:	2800      	cmp	r0, #0
 800a602:	db22      	blt.n	800a64a <quorem+0xec>
 800a604:	3601      	adds	r6, #1
 800a606:	4629      	mov	r1, r5
 800a608:	2000      	movs	r0, #0
 800a60a:	f858 2b04 	ldr.w	r2, [r8], #4
 800a60e:	f8d1 c000 	ldr.w	ip, [r1]
 800a612:	b293      	uxth	r3, r2
 800a614:	1ac3      	subs	r3, r0, r3
 800a616:	0c12      	lsrs	r2, r2, #16
 800a618:	fa13 f38c 	uxtah	r3, r3, ip
 800a61c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a620:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a624:	b29b      	uxth	r3, r3
 800a626:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a62a:	45c1      	cmp	r9, r8
 800a62c:	f841 3b04 	str.w	r3, [r1], #4
 800a630:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a634:	d2e9      	bcs.n	800a60a <quorem+0xac>
 800a636:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a63a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a63e:	b922      	cbnz	r2, 800a64a <quorem+0xec>
 800a640:	3b04      	subs	r3, #4
 800a642:	429d      	cmp	r5, r3
 800a644:	461a      	mov	r2, r3
 800a646:	d30a      	bcc.n	800a65e <quorem+0x100>
 800a648:	613c      	str	r4, [r7, #16]
 800a64a:	4630      	mov	r0, r6
 800a64c:	b003      	add	sp, #12
 800a64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a652:	6812      	ldr	r2, [r2, #0]
 800a654:	3b04      	subs	r3, #4
 800a656:	2a00      	cmp	r2, #0
 800a658:	d1ce      	bne.n	800a5f8 <quorem+0x9a>
 800a65a:	3c01      	subs	r4, #1
 800a65c:	e7c9      	b.n	800a5f2 <quorem+0x94>
 800a65e:	6812      	ldr	r2, [r2, #0]
 800a660:	3b04      	subs	r3, #4
 800a662:	2a00      	cmp	r2, #0
 800a664:	d1f0      	bne.n	800a648 <quorem+0xea>
 800a666:	3c01      	subs	r4, #1
 800a668:	e7eb      	b.n	800a642 <quorem+0xe4>
 800a66a:	2000      	movs	r0, #0
 800a66c:	e7ee      	b.n	800a64c <quorem+0xee>
	...

0800a670 <_dtoa_r>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	ed2d 8b02 	vpush	{d8}
 800a678:	69c5      	ldr	r5, [r0, #28]
 800a67a:	b091      	sub	sp, #68	; 0x44
 800a67c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a680:	ec59 8b10 	vmov	r8, r9, d0
 800a684:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a686:	9106      	str	r1, [sp, #24]
 800a688:	4606      	mov	r6, r0
 800a68a:	9208      	str	r2, [sp, #32]
 800a68c:	930c      	str	r3, [sp, #48]	; 0x30
 800a68e:	b975      	cbnz	r5, 800a6ae <_dtoa_r+0x3e>
 800a690:	2010      	movs	r0, #16
 800a692:	f7f8 fb3f 	bl	8002d14 <__wrap_malloc>
 800a696:	4602      	mov	r2, r0
 800a698:	61f0      	str	r0, [r6, #28]
 800a69a:	b920      	cbnz	r0, 800a6a6 <_dtoa_r+0x36>
 800a69c:	4ba6      	ldr	r3, [pc, #664]	; (800a938 <_dtoa_r+0x2c8>)
 800a69e:	21ef      	movs	r1, #239	; 0xef
 800a6a0:	48a6      	ldr	r0, [pc, #664]	; (800a93c <_dtoa_r+0x2cc>)
 800a6a2:	f001 f9c7 	bl	800ba34 <__assert_func>
 800a6a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a6aa:	6005      	str	r5, [r0, #0]
 800a6ac:	60c5      	str	r5, [r0, #12]
 800a6ae:	69f3      	ldr	r3, [r6, #28]
 800a6b0:	6819      	ldr	r1, [r3, #0]
 800a6b2:	b151      	cbz	r1, 800a6ca <_dtoa_r+0x5a>
 800a6b4:	685a      	ldr	r2, [r3, #4]
 800a6b6:	604a      	str	r2, [r1, #4]
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	4093      	lsls	r3, r2
 800a6bc:	608b      	str	r3, [r1, #8]
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f000 fdce 	bl	800b260 <_Bfree>
 800a6c4:	69f3      	ldr	r3, [r6, #28]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	601a      	str	r2, [r3, #0]
 800a6ca:	f1b9 0300 	subs.w	r3, r9, #0
 800a6ce:	bfbb      	ittet	lt
 800a6d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a6d4:	9303      	strlt	r3, [sp, #12]
 800a6d6:	2300      	movge	r3, #0
 800a6d8:	2201      	movlt	r2, #1
 800a6da:	bfac      	ite	ge
 800a6dc:	6023      	strge	r3, [r4, #0]
 800a6de:	6022      	strlt	r2, [r4, #0]
 800a6e0:	4b97      	ldr	r3, [pc, #604]	; (800a940 <_dtoa_r+0x2d0>)
 800a6e2:	9c03      	ldr	r4, [sp, #12]
 800a6e4:	43a3      	bics	r3, r4
 800a6e6:	d11c      	bne.n	800a722 <_dtoa_r+0xb2>
 800a6e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a6f4:	ea53 0308 	orrs.w	r3, r3, r8
 800a6f8:	f000 84fb 	beq.w	800b0f2 <_dtoa_r+0xa82>
 800a6fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6fe:	b963      	cbnz	r3, 800a71a <_dtoa_r+0xaa>
 800a700:	4b90      	ldr	r3, [pc, #576]	; (800a944 <_dtoa_r+0x2d4>)
 800a702:	e020      	b.n	800a746 <_dtoa_r+0xd6>
 800a704:	4b90      	ldr	r3, [pc, #576]	; (800a948 <_dtoa_r+0x2d8>)
 800a706:	9301      	str	r3, [sp, #4]
 800a708:	3308      	adds	r3, #8
 800a70a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a70c:	6013      	str	r3, [r2, #0]
 800a70e:	9801      	ldr	r0, [sp, #4]
 800a710:	b011      	add	sp, #68	; 0x44
 800a712:	ecbd 8b02 	vpop	{d8}
 800a716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71a:	4b8a      	ldr	r3, [pc, #552]	; (800a944 <_dtoa_r+0x2d4>)
 800a71c:	9301      	str	r3, [sp, #4]
 800a71e:	3303      	adds	r3, #3
 800a720:	e7f3      	b.n	800a70a <_dtoa_r+0x9a>
 800a722:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a726:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a72e:	d10c      	bne.n	800a74a <_dtoa_r+0xda>
 800a730:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a732:	2301      	movs	r3, #1
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f000 84d7 	beq.w	800b0ec <_dtoa_r+0xa7c>
 800a73e:	4b83      	ldr	r3, [pc, #524]	; (800a94c <_dtoa_r+0x2dc>)
 800a740:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a742:	6013      	str	r3, [r2, #0]
 800a744:	3b01      	subs	r3, #1
 800a746:	9301      	str	r3, [sp, #4]
 800a748:	e7e1      	b.n	800a70e <_dtoa_r+0x9e>
 800a74a:	aa0e      	add	r2, sp, #56	; 0x38
 800a74c:	a90f      	add	r1, sp, #60	; 0x3c
 800a74e:	4630      	mov	r0, r6
 800a750:	eeb0 0b48 	vmov.f64	d0, d8
 800a754:	f001 f866 	bl	800b824 <__d2b>
 800a758:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a75c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a75e:	4605      	mov	r5, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d046      	beq.n	800a7f2 <_dtoa_r+0x182>
 800a764:	eeb0 7b48 	vmov.f64	d7, d8
 800a768:	ee18 1a90 	vmov	r1, s17
 800a76c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a770:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a774:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a778:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a77c:	2000      	movs	r0, #0
 800a77e:	ee07 1a90 	vmov	s15, r1
 800a782:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800a786:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a920 <_dtoa_r+0x2b0>
 800a78a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a78e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800a928 <_dtoa_r+0x2b8>
 800a792:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a796:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800a930 <_dtoa_r+0x2c0>
 800a79a:	ee07 3a90 	vmov	s15, r3
 800a79e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a7a2:	eeb0 7b46 	vmov.f64	d7, d6
 800a7a6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a7aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a7ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b6:	ee16 ba90 	vmov	fp, s13
 800a7ba:	9009      	str	r0, [sp, #36]	; 0x24
 800a7bc:	d508      	bpl.n	800a7d0 <_dtoa_r+0x160>
 800a7be:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a7c2:	eeb4 6b47 	vcmp.f64	d6, d7
 800a7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ca:	bf18      	it	ne
 800a7cc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a7d0:	f1bb 0f16 	cmp.w	fp, #22
 800a7d4:	d82b      	bhi.n	800a82e <_dtoa_r+0x1be>
 800a7d6:	495e      	ldr	r1, [pc, #376]	; (800a950 <_dtoa_r+0x2e0>)
 800a7d8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800a7dc:	ed91 7b00 	vldr	d7, [r1]
 800a7e0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e8:	d501      	bpl.n	800a7ee <_dtoa_r+0x17e>
 800a7ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	e01e      	b.n	800a830 <_dtoa_r+0x1c0>
 800a7f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7f4:	4413      	add	r3, r2
 800a7f6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800a7fa:	2920      	cmp	r1, #32
 800a7fc:	bfc1      	itttt	gt
 800a7fe:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800a802:	408c      	lslgt	r4, r1
 800a804:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800a808:	fa28 f101 	lsrgt.w	r1, r8, r1
 800a80c:	bfd6      	itet	le
 800a80e:	f1c1 0120 	rsble	r1, r1, #32
 800a812:	4321      	orrgt	r1, r4
 800a814:	fa08 f101 	lslle.w	r1, r8, r1
 800a818:	ee07 1a90 	vmov	s15, r1
 800a81c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a820:	3b01      	subs	r3, #1
 800a822:	ee17 1a90 	vmov	r1, s15
 800a826:	2001      	movs	r0, #1
 800a828:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a82c:	e7a7      	b.n	800a77e <_dtoa_r+0x10e>
 800a82e:	2101      	movs	r1, #1
 800a830:	1ad2      	subs	r2, r2, r3
 800a832:	1e53      	subs	r3, r2, #1
 800a834:	9305      	str	r3, [sp, #20]
 800a836:	bf45      	ittet	mi
 800a838:	f1c2 0301 	rsbmi	r3, r2, #1
 800a83c:	9304      	strmi	r3, [sp, #16]
 800a83e:	2300      	movpl	r3, #0
 800a840:	2300      	movmi	r3, #0
 800a842:	bf4c      	ite	mi
 800a844:	9305      	strmi	r3, [sp, #20]
 800a846:	9304      	strpl	r3, [sp, #16]
 800a848:	f1bb 0f00 	cmp.w	fp, #0
 800a84c:	910b      	str	r1, [sp, #44]	; 0x2c
 800a84e:	db18      	blt.n	800a882 <_dtoa_r+0x212>
 800a850:	9b05      	ldr	r3, [sp, #20]
 800a852:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a856:	445b      	add	r3, fp
 800a858:	9305      	str	r3, [sp, #20]
 800a85a:	2300      	movs	r3, #0
 800a85c:	9a06      	ldr	r2, [sp, #24]
 800a85e:	2a09      	cmp	r2, #9
 800a860:	d848      	bhi.n	800a8f4 <_dtoa_r+0x284>
 800a862:	2a05      	cmp	r2, #5
 800a864:	bfc4      	itt	gt
 800a866:	3a04      	subgt	r2, #4
 800a868:	9206      	strgt	r2, [sp, #24]
 800a86a:	9a06      	ldr	r2, [sp, #24]
 800a86c:	f1a2 0202 	sub.w	r2, r2, #2
 800a870:	bfcc      	ite	gt
 800a872:	2400      	movgt	r4, #0
 800a874:	2401      	movle	r4, #1
 800a876:	2a03      	cmp	r2, #3
 800a878:	d847      	bhi.n	800a90a <_dtoa_r+0x29a>
 800a87a:	e8df f002 	tbb	[pc, r2]
 800a87e:	2d0b      	.short	0x2d0b
 800a880:	392b      	.short	0x392b
 800a882:	9b04      	ldr	r3, [sp, #16]
 800a884:	2200      	movs	r2, #0
 800a886:	eba3 030b 	sub.w	r3, r3, fp
 800a88a:	9304      	str	r3, [sp, #16]
 800a88c:	920a      	str	r2, [sp, #40]	; 0x28
 800a88e:	f1cb 0300 	rsb	r3, fp, #0
 800a892:	e7e3      	b.n	800a85c <_dtoa_r+0x1ec>
 800a894:	2200      	movs	r2, #0
 800a896:	9207      	str	r2, [sp, #28]
 800a898:	9a08      	ldr	r2, [sp, #32]
 800a89a:	2a00      	cmp	r2, #0
 800a89c:	dc38      	bgt.n	800a910 <_dtoa_r+0x2a0>
 800a89e:	f04f 0a01 	mov.w	sl, #1
 800a8a2:	46d1      	mov	r9, sl
 800a8a4:	4652      	mov	r2, sl
 800a8a6:	f8cd a020 	str.w	sl, [sp, #32]
 800a8aa:	69f7      	ldr	r7, [r6, #28]
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	2004      	movs	r0, #4
 800a8b0:	f100 0c14 	add.w	ip, r0, #20
 800a8b4:	4594      	cmp	ip, r2
 800a8b6:	d930      	bls.n	800a91a <_dtoa_r+0x2aa>
 800a8b8:	6079      	str	r1, [r7, #4]
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	930d      	str	r3, [sp, #52]	; 0x34
 800a8be:	f000 fc8f 	bl	800b1e0 <_Balloc>
 800a8c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8c4:	9001      	str	r0, [sp, #4]
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d145      	bne.n	800a958 <_dtoa_r+0x2e8>
 800a8cc:	4b21      	ldr	r3, [pc, #132]	; (800a954 <_dtoa_r+0x2e4>)
 800a8ce:	f240 11af 	movw	r1, #431	; 0x1af
 800a8d2:	e6e5      	b.n	800a6a0 <_dtoa_r+0x30>
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	e7de      	b.n	800a896 <_dtoa_r+0x226>
 800a8d8:	2200      	movs	r2, #0
 800a8da:	9207      	str	r2, [sp, #28]
 800a8dc:	9a08      	ldr	r2, [sp, #32]
 800a8de:	eb0b 0a02 	add.w	sl, fp, r2
 800a8e2:	f10a 0901 	add.w	r9, sl, #1
 800a8e6:	464a      	mov	r2, r9
 800a8e8:	2a01      	cmp	r2, #1
 800a8ea:	bfb8      	it	lt
 800a8ec:	2201      	movlt	r2, #1
 800a8ee:	e7dc      	b.n	800a8aa <_dtoa_r+0x23a>
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	e7f2      	b.n	800a8da <_dtoa_r+0x26a>
 800a8f4:	2401      	movs	r4, #1
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a8fc:	f04f 3aff 	mov.w	sl, #4294967295
 800a900:	2100      	movs	r1, #0
 800a902:	46d1      	mov	r9, sl
 800a904:	2212      	movs	r2, #18
 800a906:	9108      	str	r1, [sp, #32]
 800a908:	e7cf      	b.n	800a8aa <_dtoa_r+0x23a>
 800a90a:	2201      	movs	r2, #1
 800a90c:	9207      	str	r2, [sp, #28]
 800a90e:	e7f5      	b.n	800a8fc <_dtoa_r+0x28c>
 800a910:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a914:	46d1      	mov	r9, sl
 800a916:	4652      	mov	r2, sl
 800a918:	e7c7      	b.n	800a8aa <_dtoa_r+0x23a>
 800a91a:	3101      	adds	r1, #1
 800a91c:	0040      	lsls	r0, r0, #1
 800a91e:	e7c7      	b.n	800a8b0 <_dtoa_r+0x240>
 800a920:	636f4361 	.word	0x636f4361
 800a924:	3fd287a7 	.word	0x3fd287a7
 800a928:	8b60c8b3 	.word	0x8b60c8b3
 800a92c:	3fc68a28 	.word	0x3fc68a28
 800a930:	509f79fb 	.word	0x509f79fb
 800a934:	3fd34413 	.word	0x3fd34413
 800a938:	080db23b 	.word	0x080db23b
 800a93c:	080db252 	.word	0x080db252
 800a940:	7ff00000 	.word	0x7ff00000
 800a944:	080db237 	.word	0x080db237
 800a948:	080db22e 	.word	0x080db22e
 800a94c:	0800d15b 	.word	0x0800d15b
 800a950:	080db340 	.word	0x080db340
 800a954:	080db2aa 	.word	0x080db2aa
 800a958:	69f2      	ldr	r2, [r6, #28]
 800a95a:	9901      	ldr	r1, [sp, #4]
 800a95c:	6011      	str	r1, [r2, #0]
 800a95e:	f1b9 0f0e 	cmp.w	r9, #14
 800a962:	d86c      	bhi.n	800aa3e <_dtoa_r+0x3ce>
 800a964:	2c00      	cmp	r4, #0
 800a966:	d06a      	beq.n	800aa3e <_dtoa_r+0x3ce>
 800a968:	f1bb 0f00 	cmp.w	fp, #0
 800a96c:	f340 80a0 	ble.w	800aab0 <_dtoa_r+0x440>
 800a970:	4ac1      	ldr	r2, [pc, #772]	; (800ac78 <_dtoa_r+0x608>)
 800a972:	f00b 010f 	and.w	r1, fp, #15
 800a976:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a97a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a97e:	ed92 7b00 	vldr	d7, [r2]
 800a982:	ea4f 122b 	mov.w	r2, fp, asr #4
 800a986:	f000 8087 	beq.w	800aa98 <_dtoa_r+0x428>
 800a98a:	49bc      	ldr	r1, [pc, #752]	; (800ac7c <_dtoa_r+0x60c>)
 800a98c:	ed91 6b08 	vldr	d6, [r1, #32]
 800a990:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a994:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a998:	f002 020f 	and.w	r2, r2, #15
 800a99c:	2103      	movs	r1, #3
 800a99e:	48b7      	ldr	r0, [pc, #732]	; (800ac7c <_dtoa_r+0x60c>)
 800a9a0:	2a00      	cmp	r2, #0
 800a9a2:	d17b      	bne.n	800aa9c <_dtoa_r+0x42c>
 800a9a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a9a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a9ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a9b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9b6:	2a00      	cmp	r2, #0
 800a9b8:	f000 80a0 	beq.w	800aafc <_dtoa_r+0x48c>
 800a9bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a9c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c8:	f140 8098 	bpl.w	800aafc <_dtoa_r+0x48c>
 800a9cc:	f1b9 0f00 	cmp.w	r9, #0
 800a9d0:	f000 8094 	beq.w	800aafc <_dtoa_r+0x48c>
 800a9d4:	f1ba 0f00 	cmp.w	sl, #0
 800a9d8:	dd2f      	ble.n	800aa3a <_dtoa_r+0x3ca>
 800a9da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a9de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a9e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a9e6:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a9ea:	3101      	adds	r1, #1
 800a9ec:	4654      	mov	r4, sl
 800a9ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a9f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a9f6:	ee07 1a90 	vmov	s15, r1
 800a9fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a9fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 800aa02:	ee15 7a90 	vmov	r7, s11
 800aa06:	ec51 0b15 	vmov	r0, r1, d5
 800aa0a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800aa0e:	2c00      	cmp	r4, #0
 800aa10:	d177      	bne.n	800ab02 <_dtoa_r+0x492>
 800aa12:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800aa16:	ee36 6b47 	vsub.f64	d6, d6, d7
 800aa1a:	ec41 0b17 	vmov	d7, r0, r1
 800aa1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa26:	f300 826a 	bgt.w	800aefe <_dtoa_r+0x88e>
 800aa2a:	eeb1 7b47 	vneg.f64	d7, d7
 800aa2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa36:	f100 8260 	bmi.w	800aefa <_dtoa_r+0x88a>
 800aa3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aa3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aa40:	2a00      	cmp	r2, #0
 800aa42:	f2c0 811d 	blt.w	800ac80 <_dtoa_r+0x610>
 800aa46:	f1bb 0f0e 	cmp.w	fp, #14
 800aa4a:	f300 8119 	bgt.w	800ac80 <_dtoa_r+0x610>
 800aa4e:	4b8a      	ldr	r3, [pc, #552]	; (800ac78 <_dtoa_r+0x608>)
 800aa50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa54:	ed93 6b00 	vldr	d6, [r3]
 800aa58:	9b08      	ldr	r3, [sp, #32]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f280 80b7 	bge.w	800abce <_dtoa_r+0x55e>
 800aa60:	f1b9 0f00 	cmp.w	r9, #0
 800aa64:	f300 80b3 	bgt.w	800abce <_dtoa_r+0x55e>
 800aa68:	f040 8246 	bne.w	800aef8 <_dtoa_r+0x888>
 800aa6c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800aa70:	ee26 6b07 	vmul.f64	d6, d6, d7
 800aa74:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa78:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa80:	464c      	mov	r4, r9
 800aa82:	464f      	mov	r7, r9
 800aa84:	f280 821c 	bge.w	800aec0 <_dtoa_r+0x850>
 800aa88:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aa8c:	2331      	movs	r3, #49	; 0x31
 800aa8e:	f808 3b01 	strb.w	r3, [r8], #1
 800aa92:	f10b 0b01 	add.w	fp, fp, #1
 800aa96:	e218      	b.n	800aeca <_dtoa_r+0x85a>
 800aa98:	2102      	movs	r1, #2
 800aa9a:	e780      	b.n	800a99e <_dtoa_r+0x32e>
 800aa9c:	07d4      	lsls	r4, r2, #31
 800aa9e:	d504      	bpl.n	800aaaa <_dtoa_r+0x43a>
 800aaa0:	ed90 6b00 	vldr	d6, [r0]
 800aaa4:	3101      	adds	r1, #1
 800aaa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aaaa:	1052      	asrs	r2, r2, #1
 800aaac:	3008      	adds	r0, #8
 800aaae:	e777      	b.n	800a9a0 <_dtoa_r+0x330>
 800aab0:	d022      	beq.n	800aaf8 <_dtoa_r+0x488>
 800aab2:	f1cb 0200 	rsb	r2, fp, #0
 800aab6:	4970      	ldr	r1, [pc, #448]	; (800ac78 <_dtoa_r+0x608>)
 800aab8:	f002 000f 	and.w	r0, r2, #15
 800aabc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800aac0:	ed91 7b00 	vldr	d7, [r1]
 800aac4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800aac8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aacc:	486b      	ldr	r0, [pc, #428]	; (800ac7c <_dtoa_r+0x60c>)
 800aace:	1112      	asrs	r2, r2, #4
 800aad0:	2400      	movs	r4, #0
 800aad2:	2102      	movs	r1, #2
 800aad4:	b92a      	cbnz	r2, 800aae2 <_dtoa_r+0x472>
 800aad6:	2c00      	cmp	r4, #0
 800aad8:	f43f af6a 	beq.w	800a9b0 <_dtoa_r+0x340>
 800aadc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aae0:	e766      	b.n	800a9b0 <_dtoa_r+0x340>
 800aae2:	07d7      	lsls	r7, r2, #31
 800aae4:	d505      	bpl.n	800aaf2 <_dtoa_r+0x482>
 800aae6:	ed90 6b00 	vldr	d6, [r0]
 800aaea:	3101      	adds	r1, #1
 800aaec:	2401      	movs	r4, #1
 800aaee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aaf2:	1052      	asrs	r2, r2, #1
 800aaf4:	3008      	adds	r0, #8
 800aaf6:	e7ed      	b.n	800aad4 <_dtoa_r+0x464>
 800aaf8:	2102      	movs	r1, #2
 800aafa:	e759      	b.n	800a9b0 <_dtoa_r+0x340>
 800aafc:	465a      	mov	r2, fp
 800aafe:	464c      	mov	r4, r9
 800ab00:	e775      	b.n	800a9ee <_dtoa_r+0x37e>
 800ab02:	ec41 0b17 	vmov	d7, r0, r1
 800ab06:	495c      	ldr	r1, [pc, #368]	; (800ac78 <_dtoa_r+0x608>)
 800ab08:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800ab0c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800ab10:	9901      	ldr	r1, [sp, #4]
 800ab12:	440c      	add	r4, r1
 800ab14:	9907      	ldr	r1, [sp, #28]
 800ab16:	b351      	cbz	r1, 800ab6e <_dtoa_r+0x4fe>
 800ab18:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ab1c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ab20:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ab24:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ab28:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ab2c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ab30:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ab34:	ee14 1a90 	vmov	r1, s9
 800ab38:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ab3c:	3130      	adds	r1, #48	; 0x30
 800ab3e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ab42:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab4a:	f808 1b01 	strb.w	r1, [r8], #1
 800ab4e:	d439      	bmi.n	800abc4 <_dtoa_r+0x554>
 800ab50:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ab54:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ab58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab5c:	d472      	bmi.n	800ac44 <_dtoa_r+0x5d4>
 800ab5e:	45a0      	cmp	r8, r4
 800ab60:	f43f af6b 	beq.w	800aa3a <_dtoa_r+0x3ca>
 800ab64:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ab68:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ab6c:	e7e0      	b.n	800ab30 <_dtoa_r+0x4c0>
 800ab6e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ab72:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ab76:	4620      	mov	r0, r4
 800ab78:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ab7c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ab80:	ee14 1a90 	vmov	r1, s9
 800ab84:	3130      	adds	r1, #48	; 0x30
 800ab86:	f808 1b01 	strb.w	r1, [r8], #1
 800ab8a:	45a0      	cmp	r8, r4
 800ab8c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ab90:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ab94:	d118      	bne.n	800abc8 <_dtoa_r+0x558>
 800ab96:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ab9a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ab9e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800aba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba6:	dc4d      	bgt.n	800ac44 <_dtoa_r+0x5d4>
 800aba8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800abac:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800abb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb4:	f57f af41 	bpl.w	800aa3a <_dtoa_r+0x3ca>
 800abb8:	4680      	mov	r8, r0
 800abba:	3801      	subs	r0, #1
 800abbc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800abc0:	2b30      	cmp	r3, #48	; 0x30
 800abc2:	d0f9      	beq.n	800abb8 <_dtoa_r+0x548>
 800abc4:	4693      	mov	fp, r2
 800abc6:	e02a      	b.n	800ac1e <_dtoa_r+0x5ae>
 800abc8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800abcc:	e7d6      	b.n	800ab7c <_dtoa_r+0x50c>
 800abce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800abd2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800abd6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800abda:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800abde:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800abe2:	ee15 3a10 	vmov	r3, s10
 800abe6:	3330      	adds	r3, #48	; 0x30
 800abe8:	f808 3b01 	strb.w	r3, [r8], #1
 800abec:	9b01      	ldr	r3, [sp, #4]
 800abee:	eba8 0303 	sub.w	r3, r8, r3
 800abf2:	4599      	cmp	r9, r3
 800abf4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800abf8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800abfc:	d133      	bne.n	800ac66 <_dtoa_r+0x5f6>
 800abfe:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ac02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ac06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac0a:	dc1a      	bgt.n	800ac42 <_dtoa_r+0x5d2>
 800ac0c:	eeb4 7b46 	vcmp.f64	d7, d6
 800ac10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac14:	d103      	bne.n	800ac1e <_dtoa_r+0x5ae>
 800ac16:	ee15 3a10 	vmov	r3, s10
 800ac1a:	07d9      	lsls	r1, r3, #31
 800ac1c:	d411      	bmi.n	800ac42 <_dtoa_r+0x5d2>
 800ac1e:	4629      	mov	r1, r5
 800ac20:	4630      	mov	r0, r6
 800ac22:	f000 fb1d 	bl	800b260 <_Bfree>
 800ac26:	2300      	movs	r3, #0
 800ac28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac2a:	f888 3000 	strb.w	r3, [r8]
 800ac2e:	f10b 0301 	add.w	r3, fp, #1
 800ac32:	6013      	str	r3, [r2, #0]
 800ac34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f43f ad69 	beq.w	800a70e <_dtoa_r+0x9e>
 800ac3c:	f8c3 8000 	str.w	r8, [r3]
 800ac40:	e565      	b.n	800a70e <_dtoa_r+0x9e>
 800ac42:	465a      	mov	r2, fp
 800ac44:	4643      	mov	r3, r8
 800ac46:	4698      	mov	r8, r3
 800ac48:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800ac4c:	2939      	cmp	r1, #57	; 0x39
 800ac4e:	d106      	bne.n	800ac5e <_dtoa_r+0x5ee>
 800ac50:	9901      	ldr	r1, [sp, #4]
 800ac52:	4299      	cmp	r1, r3
 800ac54:	d1f7      	bne.n	800ac46 <_dtoa_r+0x5d6>
 800ac56:	9801      	ldr	r0, [sp, #4]
 800ac58:	2130      	movs	r1, #48	; 0x30
 800ac5a:	3201      	adds	r2, #1
 800ac5c:	7001      	strb	r1, [r0, #0]
 800ac5e:	7819      	ldrb	r1, [r3, #0]
 800ac60:	3101      	adds	r1, #1
 800ac62:	7019      	strb	r1, [r3, #0]
 800ac64:	e7ae      	b.n	800abc4 <_dtoa_r+0x554>
 800ac66:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ac6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac72:	d1b2      	bne.n	800abda <_dtoa_r+0x56a>
 800ac74:	e7d3      	b.n	800ac1e <_dtoa_r+0x5ae>
 800ac76:	bf00      	nop
 800ac78:	080db340 	.word	0x080db340
 800ac7c:	080db318 	.word	0x080db318
 800ac80:	9907      	ldr	r1, [sp, #28]
 800ac82:	2900      	cmp	r1, #0
 800ac84:	f000 80d0 	beq.w	800ae28 <_dtoa_r+0x7b8>
 800ac88:	9906      	ldr	r1, [sp, #24]
 800ac8a:	2901      	cmp	r1, #1
 800ac8c:	f300 80b4 	bgt.w	800adf8 <_dtoa_r+0x788>
 800ac90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac92:	2900      	cmp	r1, #0
 800ac94:	f000 80ac 	beq.w	800adf0 <_dtoa_r+0x780>
 800ac98:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ac9c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aca0:	461c      	mov	r4, r3
 800aca2:	9309      	str	r3, [sp, #36]	; 0x24
 800aca4:	9b04      	ldr	r3, [sp, #16]
 800aca6:	4413      	add	r3, r2
 800aca8:	9304      	str	r3, [sp, #16]
 800acaa:	9b05      	ldr	r3, [sp, #20]
 800acac:	2101      	movs	r1, #1
 800acae:	4413      	add	r3, r2
 800acb0:	4630      	mov	r0, r6
 800acb2:	9305      	str	r3, [sp, #20]
 800acb4:	f000 fb8a 	bl	800b3cc <__i2b>
 800acb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acba:	4607      	mov	r7, r0
 800acbc:	f1b8 0f00 	cmp.w	r8, #0
 800acc0:	d00d      	beq.n	800acde <_dtoa_r+0x66e>
 800acc2:	9a05      	ldr	r2, [sp, #20]
 800acc4:	2a00      	cmp	r2, #0
 800acc6:	dd0a      	ble.n	800acde <_dtoa_r+0x66e>
 800acc8:	4542      	cmp	r2, r8
 800acca:	9904      	ldr	r1, [sp, #16]
 800accc:	bfa8      	it	ge
 800acce:	4642      	movge	r2, r8
 800acd0:	1a89      	subs	r1, r1, r2
 800acd2:	9104      	str	r1, [sp, #16]
 800acd4:	9905      	ldr	r1, [sp, #20]
 800acd6:	eba8 0802 	sub.w	r8, r8, r2
 800acda:	1a8a      	subs	r2, r1, r2
 800acdc:	9205      	str	r2, [sp, #20]
 800acde:	b303      	cbz	r3, 800ad22 <_dtoa_r+0x6b2>
 800ace0:	9a07      	ldr	r2, [sp, #28]
 800ace2:	2a00      	cmp	r2, #0
 800ace4:	f000 80a5 	beq.w	800ae32 <_dtoa_r+0x7c2>
 800ace8:	2c00      	cmp	r4, #0
 800acea:	dd13      	ble.n	800ad14 <_dtoa_r+0x6a4>
 800acec:	4639      	mov	r1, r7
 800acee:	4622      	mov	r2, r4
 800acf0:	4630      	mov	r0, r6
 800acf2:	930d      	str	r3, [sp, #52]	; 0x34
 800acf4:	f000 fc2a 	bl	800b54c <__pow5mult>
 800acf8:	462a      	mov	r2, r5
 800acfa:	4601      	mov	r1, r0
 800acfc:	4607      	mov	r7, r0
 800acfe:	4630      	mov	r0, r6
 800ad00:	f000 fb7a 	bl	800b3f8 <__multiply>
 800ad04:	4629      	mov	r1, r5
 800ad06:	9009      	str	r0, [sp, #36]	; 0x24
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f000 faa9 	bl	800b260 <_Bfree>
 800ad0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad12:	4615      	mov	r5, r2
 800ad14:	1b1a      	subs	r2, r3, r4
 800ad16:	d004      	beq.n	800ad22 <_dtoa_r+0x6b2>
 800ad18:	4629      	mov	r1, r5
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f000 fc16 	bl	800b54c <__pow5mult>
 800ad20:	4605      	mov	r5, r0
 800ad22:	2101      	movs	r1, #1
 800ad24:	4630      	mov	r0, r6
 800ad26:	f000 fb51 	bl	800b3cc <__i2b>
 800ad2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	4604      	mov	r4, r0
 800ad30:	f340 8081 	ble.w	800ae36 <_dtoa_r+0x7c6>
 800ad34:	461a      	mov	r2, r3
 800ad36:	4601      	mov	r1, r0
 800ad38:	4630      	mov	r0, r6
 800ad3a:	f000 fc07 	bl	800b54c <__pow5mult>
 800ad3e:	9b06      	ldr	r3, [sp, #24]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	4604      	mov	r4, r0
 800ad44:	dd7a      	ble.n	800ae3c <_dtoa_r+0x7cc>
 800ad46:	2300      	movs	r3, #0
 800ad48:	9309      	str	r3, [sp, #36]	; 0x24
 800ad4a:	6922      	ldr	r2, [r4, #16]
 800ad4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ad50:	6910      	ldr	r0, [r2, #16]
 800ad52:	f000 faed 	bl	800b330 <__hi0bits>
 800ad56:	f1c0 0020 	rsb	r0, r0, #32
 800ad5a:	9b05      	ldr	r3, [sp, #20]
 800ad5c:	4418      	add	r0, r3
 800ad5e:	f010 001f 	ands.w	r0, r0, #31
 800ad62:	f000 8093 	beq.w	800ae8c <_dtoa_r+0x81c>
 800ad66:	f1c0 0220 	rsb	r2, r0, #32
 800ad6a:	2a04      	cmp	r2, #4
 800ad6c:	f340 8085 	ble.w	800ae7a <_dtoa_r+0x80a>
 800ad70:	9b04      	ldr	r3, [sp, #16]
 800ad72:	f1c0 001c 	rsb	r0, r0, #28
 800ad76:	4403      	add	r3, r0
 800ad78:	9304      	str	r3, [sp, #16]
 800ad7a:	9b05      	ldr	r3, [sp, #20]
 800ad7c:	4480      	add	r8, r0
 800ad7e:	4403      	add	r3, r0
 800ad80:	9305      	str	r3, [sp, #20]
 800ad82:	9b04      	ldr	r3, [sp, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	dd05      	ble.n	800ad94 <_dtoa_r+0x724>
 800ad88:	4629      	mov	r1, r5
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	f000 fc37 	bl	800b600 <__lshift>
 800ad92:	4605      	mov	r5, r0
 800ad94:	9b05      	ldr	r3, [sp, #20]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	dd05      	ble.n	800ada6 <_dtoa_r+0x736>
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f000 fc2e 	bl	800b600 <__lshift>
 800ada4:	4604      	mov	r4, r0
 800ada6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d071      	beq.n	800ae90 <_dtoa_r+0x820>
 800adac:	4621      	mov	r1, r4
 800adae:	4628      	mov	r0, r5
 800adb0:	f000 fc92 	bl	800b6d8 <__mcmp>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	da6b      	bge.n	800ae90 <_dtoa_r+0x820>
 800adb8:	2300      	movs	r3, #0
 800adba:	4629      	mov	r1, r5
 800adbc:	220a      	movs	r2, #10
 800adbe:	4630      	mov	r0, r6
 800adc0:	f000 fa70 	bl	800b2a4 <__multadd>
 800adc4:	9b07      	ldr	r3, [sp, #28]
 800adc6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800adca:	4605      	mov	r5, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f000 8197 	beq.w	800b100 <_dtoa_r+0xa90>
 800add2:	4639      	mov	r1, r7
 800add4:	2300      	movs	r3, #0
 800add6:	220a      	movs	r2, #10
 800add8:	4630      	mov	r0, r6
 800adda:	f000 fa63 	bl	800b2a4 <__multadd>
 800adde:	f1ba 0f00 	cmp.w	sl, #0
 800ade2:	4607      	mov	r7, r0
 800ade4:	f300 8093 	bgt.w	800af0e <_dtoa_r+0x89e>
 800ade8:	9b06      	ldr	r3, [sp, #24]
 800adea:	2b02      	cmp	r3, #2
 800adec:	dc57      	bgt.n	800ae9e <_dtoa_r+0x82e>
 800adee:	e08e      	b.n	800af0e <_dtoa_r+0x89e>
 800adf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adf2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800adf6:	e751      	b.n	800ac9c <_dtoa_r+0x62c>
 800adf8:	f109 34ff 	add.w	r4, r9, #4294967295
 800adfc:	42a3      	cmp	r3, r4
 800adfe:	bfbf      	itttt	lt
 800ae00:	1ae2      	sublt	r2, r4, r3
 800ae02:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae04:	189b      	addlt	r3, r3, r2
 800ae06:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ae08:	bfae      	itee	ge
 800ae0a:	1b1c      	subge	r4, r3, r4
 800ae0c:	4623      	movlt	r3, r4
 800ae0e:	2400      	movlt	r4, #0
 800ae10:	f1b9 0f00 	cmp.w	r9, #0
 800ae14:	bfb5      	itete	lt
 800ae16:	9a04      	ldrlt	r2, [sp, #16]
 800ae18:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800ae1c:	eba2 0809 	sublt.w	r8, r2, r9
 800ae20:	464a      	movge	r2, r9
 800ae22:	bfb8      	it	lt
 800ae24:	2200      	movlt	r2, #0
 800ae26:	e73c      	b.n	800aca2 <_dtoa_r+0x632>
 800ae28:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ae2c:	9f07      	ldr	r7, [sp, #28]
 800ae2e:	461c      	mov	r4, r3
 800ae30:	e744      	b.n	800acbc <_dtoa_r+0x64c>
 800ae32:	461a      	mov	r2, r3
 800ae34:	e770      	b.n	800ad18 <_dtoa_r+0x6a8>
 800ae36:	9b06      	ldr	r3, [sp, #24]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	dc18      	bgt.n	800ae6e <_dtoa_r+0x7fe>
 800ae3c:	9b02      	ldr	r3, [sp, #8]
 800ae3e:	b9b3      	cbnz	r3, 800ae6e <_dtoa_r+0x7fe>
 800ae40:	9b03      	ldr	r3, [sp, #12]
 800ae42:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ae46:	b9a2      	cbnz	r2, 800ae72 <_dtoa_r+0x802>
 800ae48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ae4c:	0d12      	lsrs	r2, r2, #20
 800ae4e:	0512      	lsls	r2, r2, #20
 800ae50:	b18a      	cbz	r2, 800ae76 <_dtoa_r+0x806>
 800ae52:	9b04      	ldr	r3, [sp, #16]
 800ae54:	3301      	adds	r3, #1
 800ae56:	9304      	str	r3, [sp, #16]
 800ae58:	9b05      	ldr	r3, [sp, #20]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	9305      	str	r3, [sp, #20]
 800ae5e:	2301      	movs	r3, #1
 800ae60:	9309      	str	r3, [sp, #36]	; 0x24
 800ae62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f47f af70 	bne.w	800ad4a <_dtoa_r+0x6da>
 800ae6a:	2001      	movs	r0, #1
 800ae6c:	e775      	b.n	800ad5a <_dtoa_r+0x6ea>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e7f6      	b.n	800ae60 <_dtoa_r+0x7f0>
 800ae72:	9b02      	ldr	r3, [sp, #8]
 800ae74:	e7f4      	b.n	800ae60 <_dtoa_r+0x7f0>
 800ae76:	9209      	str	r2, [sp, #36]	; 0x24
 800ae78:	e7f3      	b.n	800ae62 <_dtoa_r+0x7f2>
 800ae7a:	d082      	beq.n	800ad82 <_dtoa_r+0x712>
 800ae7c:	9b04      	ldr	r3, [sp, #16]
 800ae7e:	321c      	adds	r2, #28
 800ae80:	4413      	add	r3, r2
 800ae82:	9304      	str	r3, [sp, #16]
 800ae84:	9b05      	ldr	r3, [sp, #20]
 800ae86:	4490      	add	r8, r2
 800ae88:	4413      	add	r3, r2
 800ae8a:	e779      	b.n	800ad80 <_dtoa_r+0x710>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	e7f5      	b.n	800ae7c <_dtoa_r+0x80c>
 800ae90:	f1b9 0f00 	cmp.w	r9, #0
 800ae94:	dc36      	bgt.n	800af04 <_dtoa_r+0x894>
 800ae96:	9b06      	ldr	r3, [sp, #24]
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	dd33      	ble.n	800af04 <_dtoa_r+0x894>
 800ae9c:	46ca      	mov	sl, r9
 800ae9e:	f1ba 0f00 	cmp.w	sl, #0
 800aea2:	d10d      	bne.n	800aec0 <_dtoa_r+0x850>
 800aea4:	4621      	mov	r1, r4
 800aea6:	4653      	mov	r3, sl
 800aea8:	2205      	movs	r2, #5
 800aeaa:	4630      	mov	r0, r6
 800aeac:	f000 f9fa 	bl	800b2a4 <__multadd>
 800aeb0:	4601      	mov	r1, r0
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	f000 fc0f 	bl	800b6d8 <__mcmp>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	f73f ade4 	bgt.w	800aa88 <_dtoa_r+0x418>
 800aec0:	9b08      	ldr	r3, [sp, #32]
 800aec2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aec6:	ea6f 0b03 	mvn.w	fp, r3
 800aeca:	f04f 0900 	mov.w	r9, #0
 800aece:	4621      	mov	r1, r4
 800aed0:	4630      	mov	r0, r6
 800aed2:	f000 f9c5 	bl	800b260 <_Bfree>
 800aed6:	2f00      	cmp	r7, #0
 800aed8:	f43f aea1 	beq.w	800ac1e <_dtoa_r+0x5ae>
 800aedc:	f1b9 0f00 	cmp.w	r9, #0
 800aee0:	d005      	beq.n	800aeee <_dtoa_r+0x87e>
 800aee2:	45b9      	cmp	r9, r7
 800aee4:	d003      	beq.n	800aeee <_dtoa_r+0x87e>
 800aee6:	4649      	mov	r1, r9
 800aee8:	4630      	mov	r0, r6
 800aeea:	f000 f9b9 	bl	800b260 <_Bfree>
 800aeee:	4639      	mov	r1, r7
 800aef0:	4630      	mov	r0, r6
 800aef2:	f000 f9b5 	bl	800b260 <_Bfree>
 800aef6:	e692      	b.n	800ac1e <_dtoa_r+0x5ae>
 800aef8:	2400      	movs	r4, #0
 800aefa:	4627      	mov	r7, r4
 800aefc:	e7e0      	b.n	800aec0 <_dtoa_r+0x850>
 800aefe:	4693      	mov	fp, r2
 800af00:	4627      	mov	r7, r4
 800af02:	e5c1      	b.n	800aa88 <_dtoa_r+0x418>
 800af04:	9b07      	ldr	r3, [sp, #28]
 800af06:	46ca      	mov	sl, r9
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 8100 	beq.w	800b10e <_dtoa_r+0xa9e>
 800af0e:	f1b8 0f00 	cmp.w	r8, #0
 800af12:	dd05      	ble.n	800af20 <_dtoa_r+0x8b0>
 800af14:	4639      	mov	r1, r7
 800af16:	4642      	mov	r2, r8
 800af18:	4630      	mov	r0, r6
 800af1a:	f000 fb71 	bl	800b600 <__lshift>
 800af1e:	4607      	mov	r7, r0
 800af20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af22:	2b00      	cmp	r3, #0
 800af24:	d05d      	beq.n	800afe2 <_dtoa_r+0x972>
 800af26:	6879      	ldr	r1, [r7, #4]
 800af28:	4630      	mov	r0, r6
 800af2a:	f000 f959 	bl	800b1e0 <_Balloc>
 800af2e:	4680      	mov	r8, r0
 800af30:	b928      	cbnz	r0, 800af3e <_dtoa_r+0x8ce>
 800af32:	4b82      	ldr	r3, [pc, #520]	; (800b13c <_dtoa_r+0xacc>)
 800af34:	4602      	mov	r2, r0
 800af36:	f240 21ef 	movw	r1, #751	; 0x2ef
 800af3a:	f7ff bbb1 	b.w	800a6a0 <_dtoa_r+0x30>
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	3202      	adds	r2, #2
 800af42:	0092      	lsls	r2, r2, #2
 800af44:	f107 010c 	add.w	r1, r7, #12
 800af48:	300c      	adds	r0, #12
 800af4a:	f7ff fafa 	bl	800a542 <memcpy>
 800af4e:	2201      	movs	r2, #1
 800af50:	4641      	mov	r1, r8
 800af52:	4630      	mov	r0, r6
 800af54:	f000 fb54 	bl	800b600 <__lshift>
 800af58:	9b01      	ldr	r3, [sp, #4]
 800af5a:	3301      	adds	r3, #1
 800af5c:	9304      	str	r3, [sp, #16]
 800af5e:	9b01      	ldr	r3, [sp, #4]
 800af60:	4453      	add	r3, sl
 800af62:	9308      	str	r3, [sp, #32]
 800af64:	9b02      	ldr	r3, [sp, #8]
 800af66:	f003 0301 	and.w	r3, r3, #1
 800af6a:	46b9      	mov	r9, r7
 800af6c:	9307      	str	r3, [sp, #28]
 800af6e:	4607      	mov	r7, r0
 800af70:	9b04      	ldr	r3, [sp, #16]
 800af72:	4621      	mov	r1, r4
 800af74:	3b01      	subs	r3, #1
 800af76:	4628      	mov	r0, r5
 800af78:	9302      	str	r3, [sp, #8]
 800af7a:	f7ff faf0 	bl	800a55e <quorem>
 800af7e:	4603      	mov	r3, r0
 800af80:	3330      	adds	r3, #48	; 0x30
 800af82:	9005      	str	r0, [sp, #20]
 800af84:	4649      	mov	r1, r9
 800af86:	4628      	mov	r0, r5
 800af88:	9309      	str	r3, [sp, #36]	; 0x24
 800af8a:	f000 fba5 	bl	800b6d8 <__mcmp>
 800af8e:	463a      	mov	r2, r7
 800af90:	4682      	mov	sl, r0
 800af92:	4621      	mov	r1, r4
 800af94:	4630      	mov	r0, r6
 800af96:	f000 fbbb 	bl	800b710 <__mdiff>
 800af9a:	68c2      	ldr	r2, [r0, #12]
 800af9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af9e:	4680      	mov	r8, r0
 800afa0:	bb0a      	cbnz	r2, 800afe6 <_dtoa_r+0x976>
 800afa2:	4601      	mov	r1, r0
 800afa4:	4628      	mov	r0, r5
 800afa6:	f000 fb97 	bl	800b6d8 <__mcmp>
 800afaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afac:	4602      	mov	r2, r0
 800afae:	4641      	mov	r1, r8
 800afb0:	4630      	mov	r0, r6
 800afb2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800afb6:	f000 f953 	bl	800b260 <_Bfree>
 800afba:	9b06      	ldr	r3, [sp, #24]
 800afbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afbe:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800afc2:	ea43 0102 	orr.w	r1, r3, r2
 800afc6:	9b07      	ldr	r3, [sp, #28]
 800afc8:	4319      	orrs	r1, r3
 800afca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afcc:	d10d      	bne.n	800afea <_dtoa_r+0x97a>
 800afce:	2b39      	cmp	r3, #57	; 0x39
 800afd0:	d029      	beq.n	800b026 <_dtoa_r+0x9b6>
 800afd2:	f1ba 0f00 	cmp.w	sl, #0
 800afd6:	dd01      	ble.n	800afdc <_dtoa_r+0x96c>
 800afd8:	9b05      	ldr	r3, [sp, #20]
 800afda:	3331      	adds	r3, #49	; 0x31
 800afdc:	9a02      	ldr	r2, [sp, #8]
 800afde:	7013      	strb	r3, [r2, #0]
 800afe0:	e775      	b.n	800aece <_dtoa_r+0x85e>
 800afe2:	4638      	mov	r0, r7
 800afe4:	e7b8      	b.n	800af58 <_dtoa_r+0x8e8>
 800afe6:	2201      	movs	r2, #1
 800afe8:	e7e1      	b.n	800afae <_dtoa_r+0x93e>
 800afea:	f1ba 0f00 	cmp.w	sl, #0
 800afee:	db06      	blt.n	800affe <_dtoa_r+0x98e>
 800aff0:	9906      	ldr	r1, [sp, #24]
 800aff2:	ea41 0a0a 	orr.w	sl, r1, sl
 800aff6:	9907      	ldr	r1, [sp, #28]
 800aff8:	ea5a 0a01 	orrs.w	sl, sl, r1
 800affc:	d120      	bne.n	800b040 <_dtoa_r+0x9d0>
 800affe:	2a00      	cmp	r2, #0
 800b000:	ddec      	ble.n	800afdc <_dtoa_r+0x96c>
 800b002:	4629      	mov	r1, r5
 800b004:	2201      	movs	r2, #1
 800b006:	4630      	mov	r0, r6
 800b008:	9304      	str	r3, [sp, #16]
 800b00a:	f000 faf9 	bl	800b600 <__lshift>
 800b00e:	4621      	mov	r1, r4
 800b010:	4605      	mov	r5, r0
 800b012:	f000 fb61 	bl	800b6d8 <__mcmp>
 800b016:	2800      	cmp	r0, #0
 800b018:	9b04      	ldr	r3, [sp, #16]
 800b01a:	dc02      	bgt.n	800b022 <_dtoa_r+0x9b2>
 800b01c:	d1de      	bne.n	800afdc <_dtoa_r+0x96c>
 800b01e:	07da      	lsls	r2, r3, #31
 800b020:	d5dc      	bpl.n	800afdc <_dtoa_r+0x96c>
 800b022:	2b39      	cmp	r3, #57	; 0x39
 800b024:	d1d8      	bne.n	800afd8 <_dtoa_r+0x968>
 800b026:	9a02      	ldr	r2, [sp, #8]
 800b028:	2339      	movs	r3, #57	; 0x39
 800b02a:	7013      	strb	r3, [r2, #0]
 800b02c:	4643      	mov	r3, r8
 800b02e:	4698      	mov	r8, r3
 800b030:	3b01      	subs	r3, #1
 800b032:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b036:	2a39      	cmp	r2, #57	; 0x39
 800b038:	d051      	beq.n	800b0de <_dtoa_r+0xa6e>
 800b03a:	3201      	adds	r2, #1
 800b03c:	701a      	strb	r2, [r3, #0]
 800b03e:	e746      	b.n	800aece <_dtoa_r+0x85e>
 800b040:	2a00      	cmp	r2, #0
 800b042:	dd03      	ble.n	800b04c <_dtoa_r+0x9dc>
 800b044:	2b39      	cmp	r3, #57	; 0x39
 800b046:	d0ee      	beq.n	800b026 <_dtoa_r+0x9b6>
 800b048:	3301      	adds	r3, #1
 800b04a:	e7c7      	b.n	800afdc <_dtoa_r+0x96c>
 800b04c:	9a04      	ldr	r2, [sp, #16]
 800b04e:	9908      	ldr	r1, [sp, #32]
 800b050:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b054:	428a      	cmp	r2, r1
 800b056:	d02b      	beq.n	800b0b0 <_dtoa_r+0xa40>
 800b058:	4629      	mov	r1, r5
 800b05a:	2300      	movs	r3, #0
 800b05c:	220a      	movs	r2, #10
 800b05e:	4630      	mov	r0, r6
 800b060:	f000 f920 	bl	800b2a4 <__multadd>
 800b064:	45b9      	cmp	r9, r7
 800b066:	4605      	mov	r5, r0
 800b068:	f04f 0300 	mov.w	r3, #0
 800b06c:	f04f 020a 	mov.w	r2, #10
 800b070:	4649      	mov	r1, r9
 800b072:	4630      	mov	r0, r6
 800b074:	d107      	bne.n	800b086 <_dtoa_r+0xa16>
 800b076:	f000 f915 	bl	800b2a4 <__multadd>
 800b07a:	4681      	mov	r9, r0
 800b07c:	4607      	mov	r7, r0
 800b07e:	9b04      	ldr	r3, [sp, #16]
 800b080:	3301      	adds	r3, #1
 800b082:	9304      	str	r3, [sp, #16]
 800b084:	e774      	b.n	800af70 <_dtoa_r+0x900>
 800b086:	f000 f90d 	bl	800b2a4 <__multadd>
 800b08a:	4639      	mov	r1, r7
 800b08c:	4681      	mov	r9, r0
 800b08e:	2300      	movs	r3, #0
 800b090:	220a      	movs	r2, #10
 800b092:	4630      	mov	r0, r6
 800b094:	f000 f906 	bl	800b2a4 <__multadd>
 800b098:	4607      	mov	r7, r0
 800b09a:	e7f0      	b.n	800b07e <_dtoa_r+0xa0e>
 800b09c:	f1ba 0f00 	cmp.w	sl, #0
 800b0a0:	9a01      	ldr	r2, [sp, #4]
 800b0a2:	bfcc      	ite	gt
 800b0a4:	46d0      	movgt	r8, sl
 800b0a6:	f04f 0801 	movle.w	r8, #1
 800b0aa:	4490      	add	r8, r2
 800b0ac:	f04f 0900 	mov.w	r9, #0
 800b0b0:	4629      	mov	r1, r5
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	9302      	str	r3, [sp, #8]
 800b0b8:	f000 faa2 	bl	800b600 <__lshift>
 800b0bc:	4621      	mov	r1, r4
 800b0be:	4605      	mov	r5, r0
 800b0c0:	f000 fb0a 	bl	800b6d8 <__mcmp>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	dcb1      	bgt.n	800b02c <_dtoa_r+0x9bc>
 800b0c8:	d102      	bne.n	800b0d0 <_dtoa_r+0xa60>
 800b0ca:	9b02      	ldr	r3, [sp, #8]
 800b0cc:	07db      	lsls	r3, r3, #31
 800b0ce:	d4ad      	bmi.n	800b02c <_dtoa_r+0x9bc>
 800b0d0:	4643      	mov	r3, r8
 800b0d2:	4698      	mov	r8, r3
 800b0d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0d8:	2a30      	cmp	r2, #48	; 0x30
 800b0da:	d0fa      	beq.n	800b0d2 <_dtoa_r+0xa62>
 800b0dc:	e6f7      	b.n	800aece <_dtoa_r+0x85e>
 800b0de:	9a01      	ldr	r2, [sp, #4]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d1a4      	bne.n	800b02e <_dtoa_r+0x9be>
 800b0e4:	f10b 0b01 	add.w	fp, fp, #1
 800b0e8:	2331      	movs	r3, #49	; 0x31
 800b0ea:	e778      	b.n	800afde <_dtoa_r+0x96e>
 800b0ec:	4b14      	ldr	r3, [pc, #80]	; (800b140 <_dtoa_r+0xad0>)
 800b0ee:	f7ff bb2a 	b.w	800a746 <_dtoa_r+0xd6>
 800b0f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f47f ab05 	bne.w	800a704 <_dtoa_r+0x94>
 800b0fa:	4b12      	ldr	r3, [pc, #72]	; (800b144 <_dtoa_r+0xad4>)
 800b0fc:	f7ff bb23 	b.w	800a746 <_dtoa_r+0xd6>
 800b100:	f1ba 0f00 	cmp.w	sl, #0
 800b104:	dc03      	bgt.n	800b10e <_dtoa_r+0xa9e>
 800b106:	9b06      	ldr	r3, [sp, #24]
 800b108:	2b02      	cmp	r3, #2
 800b10a:	f73f aec8 	bgt.w	800ae9e <_dtoa_r+0x82e>
 800b10e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b112:	4621      	mov	r1, r4
 800b114:	4628      	mov	r0, r5
 800b116:	f7ff fa22 	bl	800a55e <quorem>
 800b11a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b11e:	f808 3b01 	strb.w	r3, [r8], #1
 800b122:	9a01      	ldr	r2, [sp, #4]
 800b124:	eba8 0202 	sub.w	r2, r8, r2
 800b128:	4592      	cmp	sl, r2
 800b12a:	ddb7      	ble.n	800b09c <_dtoa_r+0xa2c>
 800b12c:	4629      	mov	r1, r5
 800b12e:	2300      	movs	r3, #0
 800b130:	220a      	movs	r2, #10
 800b132:	4630      	mov	r0, r6
 800b134:	f000 f8b6 	bl	800b2a4 <__multadd>
 800b138:	4605      	mov	r5, r0
 800b13a:	e7ea      	b.n	800b112 <_dtoa_r+0xaa2>
 800b13c:	080db2aa 	.word	0x080db2aa
 800b140:	0800d15a 	.word	0x0800d15a
 800b144:	080db22e 	.word	0x080db22e

0800b148 <_free_r>:
 800b148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b14a:	2900      	cmp	r1, #0
 800b14c:	d044      	beq.n	800b1d8 <_free_r+0x90>
 800b14e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b152:	9001      	str	r0, [sp, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	f1a1 0404 	sub.w	r4, r1, #4
 800b15a:	bfb8      	it	lt
 800b15c:	18e4      	addlt	r4, r4, r3
 800b15e:	f7fe fc01 	bl	8009964 <__malloc_lock>
 800b162:	4a1e      	ldr	r2, [pc, #120]	; (800b1dc <_free_r+0x94>)
 800b164:	9801      	ldr	r0, [sp, #4]
 800b166:	6813      	ldr	r3, [r2, #0]
 800b168:	b933      	cbnz	r3, 800b178 <_free_r+0x30>
 800b16a:	6063      	str	r3, [r4, #4]
 800b16c:	6014      	str	r4, [r2, #0]
 800b16e:	b003      	add	sp, #12
 800b170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b174:	f7fe bbfc 	b.w	8009970 <__malloc_unlock>
 800b178:	42a3      	cmp	r3, r4
 800b17a:	d908      	bls.n	800b18e <_free_r+0x46>
 800b17c:	6825      	ldr	r5, [r4, #0]
 800b17e:	1961      	adds	r1, r4, r5
 800b180:	428b      	cmp	r3, r1
 800b182:	bf01      	itttt	eq
 800b184:	6819      	ldreq	r1, [r3, #0]
 800b186:	685b      	ldreq	r3, [r3, #4]
 800b188:	1949      	addeq	r1, r1, r5
 800b18a:	6021      	streq	r1, [r4, #0]
 800b18c:	e7ed      	b.n	800b16a <_free_r+0x22>
 800b18e:	461a      	mov	r2, r3
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	b10b      	cbz	r3, 800b198 <_free_r+0x50>
 800b194:	42a3      	cmp	r3, r4
 800b196:	d9fa      	bls.n	800b18e <_free_r+0x46>
 800b198:	6811      	ldr	r1, [r2, #0]
 800b19a:	1855      	adds	r5, r2, r1
 800b19c:	42a5      	cmp	r5, r4
 800b19e:	d10b      	bne.n	800b1b8 <_free_r+0x70>
 800b1a0:	6824      	ldr	r4, [r4, #0]
 800b1a2:	4421      	add	r1, r4
 800b1a4:	1854      	adds	r4, r2, r1
 800b1a6:	42a3      	cmp	r3, r4
 800b1a8:	6011      	str	r1, [r2, #0]
 800b1aa:	d1e0      	bne.n	800b16e <_free_r+0x26>
 800b1ac:	681c      	ldr	r4, [r3, #0]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	6053      	str	r3, [r2, #4]
 800b1b2:	440c      	add	r4, r1
 800b1b4:	6014      	str	r4, [r2, #0]
 800b1b6:	e7da      	b.n	800b16e <_free_r+0x26>
 800b1b8:	d902      	bls.n	800b1c0 <_free_r+0x78>
 800b1ba:	230c      	movs	r3, #12
 800b1bc:	6003      	str	r3, [r0, #0]
 800b1be:	e7d6      	b.n	800b16e <_free_r+0x26>
 800b1c0:	6825      	ldr	r5, [r4, #0]
 800b1c2:	1961      	adds	r1, r4, r5
 800b1c4:	428b      	cmp	r3, r1
 800b1c6:	bf04      	itt	eq
 800b1c8:	6819      	ldreq	r1, [r3, #0]
 800b1ca:	685b      	ldreq	r3, [r3, #4]
 800b1cc:	6063      	str	r3, [r4, #4]
 800b1ce:	bf04      	itt	eq
 800b1d0:	1949      	addeq	r1, r1, r5
 800b1d2:	6021      	streq	r1, [r4, #0]
 800b1d4:	6054      	str	r4, [r2, #4]
 800b1d6:	e7ca      	b.n	800b16e <_free_r+0x26>
 800b1d8:	b003      	add	sp, #12
 800b1da:	bd30      	pop	{r4, r5, pc}
 800b1dc:	20004b00 	.word	0x20004b00

0800b1e0 <_Balloc>:
 800b1e0:	b570      	push	{r4, r5, r6, lr}
 800b1e2:	69c6      	ldr	r6, [r0, #28]
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	460d      	mov	r5, r1
 800b1e8:	b976      	cbnz	r6, 800b208 <_Balloc+0x28>
 800b1ea:	2010      	movs	r0, #16
 800b1ec:	f7f7 fd92 	bl	8002d14 <__wrap_malloc>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	61e0      	str	r0, [r4, #28]
 800b1f4:	b920      	cbnz	r0, 800b200 <_Balloc+0x20>
 800b1f6:	4b18      	ldr	r3, [pc, #96]	; (800b258 <_Balloc+0x78>)
 800b1f8:	4818      	ldr	r0, [pc, #96]	; (800b25c <_Balloc+0x7c>)
 800b1fa:	216b      	movs	r1, #107	; 0x6b
 800b1fc:	f000 fc1a 	bl	800ba34 <__assert_func>
 800b200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b204:	6006      	str	r6, [r0, #0]
 800b206:	60c6      	str	r6, [r0, #12]
 800b208:	69e6      	ldr	r6, [r4, #28]
 800b20a:	68f3      	ldr	r3, [r6, #12]
 800b20c:	b183      	cbz	r3, 800b230 <_Balloc+0x50>
 800b20e:	69e3      	ldr	r3, [r4, #28]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b216:	b9b8      	cbnz	r0, 800b248 <_Balloc+0x68>
 800b218:	2101      	movs	r1, #1
 800b21a:	fa01 f605 	lsl.w	r6, r1, r5
 800b21e:	1d72      	adds	r2, r6, #5
 800b220:	0092      	lsls	r2, r2, #2
 800b222:	4620      	mov	r0, r4
 800b224:	f000 fc24 	bl	800ba70 <_calloc_r>
 800b228:	b160      	cbz	r0, 800b244 <_Balloc+0x64>
 800b22a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b22e:	e00e      	b.n	800b24e <_Balloc+0x6e>
 800b230:	2221      	movs	r2, #33	; 0x21
 800b232:	2104      	movs	r1, #4
 800b234:	4620      	mov	r0, r4
 800b236:	f000 fc1b 	bl	800ba70 <_calloc_r>
 800b23a:	69e3      	ldr	r3, [r4, #28]
 800b23c:	60f0      	str	r0, [r6, #12]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1e4      	bne.n	800b20e <_Balloc+0x2e>
 800b244:	2000      	movs	r0, #0
 800b246:	bd70      	pop	{r4, r5, r6, pc}
 800b248:	6802      	ldr	r2, [r0, #0]
 800b24a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b24e:	2300      	movs	r3, #0
 800b250:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b254:	e7f7      	b.n	800b246 <_Balloc+0x66>
 800b256:	bf00      	nop
 800b258:	080db23b 	.word	0x080db23b
 800b25c:	080db2bb 	.word	0x080db2bb

0800b260 <_Bfree>:
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	69c6      	ldr	r6, [r0, #28]
 800b264:	4605      	mov	r5, r0
 800b266:	460c      	mov	r4, r1
 800b268:	b976      	cbnz	r6, 800b288 <_Bfree+0x28>
 800b26a:	2010      	movs	r0, #16
 800b26c:	f7f7 fd52 	bl	8002d14 <__wrap_malloc>
 800b270:	4602      	mov	r2, r0
 800b272:	61e8      	str	r0, [r5, #28]
 800b274:	b920      	cbnz	r0, 800b280 <_Bfree+0x20>
 800b276:	4b09      	ldr	r3, [pc, #36]	; (800b29c <_Bfree+0x3c>)
 800b278:	4809      	ldr	r0, [pc, #36]	; (800b2a0 <_Bfree+0x40>)
 800b27a:	218f      	movs	r1, #143	; 0x8f
 800b27c:	f000 fbda 	bl	800ba34 <__assert_func>
 800b280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b284:	6006      	str	r6, [r0, #0]
 800b286:	60c6      	str	r6, [r0, #12]
 800b288:	b13c      	cbz	r4, 800b29a <_Bfree+0x3a>
 800b28a:	69eb      	ldr	r3, [r5, #28]
 800b28c:	6862      	ldr	r2, [r4, #4]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b294:	6021      	str	r1, [r4, #0]
 800b296:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b29a:	bd70      	pop	{r4, r5, r6, pc}
 800b29c:	080db23b 	.word	0x080db23b
 800b2a0:	080db2bb 	.word	0x080db2bb

0800b2a4 <__multadd>:
 800b2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a8:	690d      	ldr	r5, [r1, #16]
 800b2aa:	4607      	mov	r7, r0
 800b2ac:	460c      	mov	r4, r1
 800b2ae:	461e      	mov	r6, r3
 800b2b0:	f101 0c14 	add.w	ip, r1, #20
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	f8dc 3000 	ldr.w	r3, [ip]
 800b2ba:	b299      	uxth	r1, r3
 800b2bc:	fb02 6101 	mla	r1, r2, r1, r6
 800b2c0:	0c1e      	lsrs	r6, r3, #16
 800b2c2:	0c0b      	lsrs	r3, r1, #16
 800b2c4:	fb02 3306 	mla	r3, r2, r6, r3
 800b2c8:	b289      	uxth	r1, r1
 800b2ca:	3001      	adds	r0, #1
 800b2cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2d0:	4285      	cmp	r5, r0
 800b2d2:	f84c 1b04 	str.w	r1, [ip], #4
 800b2d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2da:	dcec      	bgt.n	800b2b6 <__multadd+0x12>
 800b2dc:	b30e      	cbz	r6, 800b322 <__multadd+0x7e>
 800b2de:	68a3      	ldr	r3, [r4, #8]
 800b2e0:	42ab      	cmp	r3, r5
 800b2e2:	dc19      	bgt.n	800b318 <__multadd+0x74>
 800b2e4:	6861      	ldr	r1, [r4, #4]
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	3101      	adds	r1, #1
 800b2ea:	f7ff ff79 	bl	800b1e0 <_Balloc>
 800b2ee:	4680      	mov	r8, r0
 800b2f0:	b928      	cbnz	r0, 800b2fe <__multadd+0x5a>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	4b0c      	ldr	r3, [pc, #48]	; (800b328 <__multadd+0x84>)
 800b2f6:	480d      	ldr	r0, [pc, #52]	; (800b32c <__multadd+0x88>)
 800b2f8:	21ba      	movs	r1, #186	; 0xba
 800b2fa:	f000 fb9b 	bl	800ba34 <__assert_func>
 800b2fe:	6922      	ldr	r2, [r4, #16]
 800b300:	3202      	adds	r2, #2
 800b302:	f104 010c 	add.w	r1, r4, #12
 800b306:	0092      	lsls	r2, r2, #2
 800b308:	300c      	adds	r0, #12
 800b30a:	f7ff f91a 	bl	800a542 <memcpy>
 800b30e:	4621      	mov	r1, r4
 800b310:	4638      	mov	r0, r7
 800b312:	f7ff ffa5 	bl	800b260 <_Bfree>
 800b316:	4644      	mov	r4, r8
 800b318:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b31c:	3501      	adds	r5, #1
 800b31e:	615e      	str	r6, [r3, #20]
 800b320:	6125      	str	r5, [r4, #16]
 800b322:	4620      	mov	r0, r4
 800b324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b328:	080db2aa 	.word	0x080db2aa
 800b32c:	080db2bb 	.word	0x080db2bb

0800b330 <__hi0bits>:
 800b330:	0c03      	lsrs	r3, r0, #16
 800b332:	041b      	lsls	r3, r3, #16
 800b334:	b9d3      	cbnz	r3, 800b36c <__hi0bits+0x3c>
 800b336:	0400      	lsls	r0, r0, #16
 800b338:	2310      	movs	r3, #16
 800b33a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b33e:	bf04      	itt	eq
 800b340:	0200      	lsleq	r0, r0, #8
 800b342:	3308      	addeq	r3, #8
 800b344:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b348:	bf04      	itt	eq
 800b34a:	0100      	lsleq	r0, r0, #4
 800b34c:	3304      	addeq	r3, #4
 800b34e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b352:	bf04      	itt	eq
 800b354:	0080      	lsleq	r0, r0, #2
 800b356:	3302      	addeq	r3, #2
 800b358:	2800      	cmp	r0, #0
 800b35a:	db05      	blt.n	800b368 <__hi0bits+0x38>
 800b35c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b360:	f103 0301 	add.w	r3, r3, #1
 800b364:	bf08      	it	eq
 800b366:	2320      	moveq	r3, #32
 800b368:	4618      	mov	r0, r3
 800b36a:	4770      	bx	lr
 800b36c:	2300      	movs	r3, #0
 800b36e:	e7e4      	b.n	800b33a <__hi0bits+0xa>

0800b370 <__lo0bits>:
 800b370:	6803      	ldr	r3, [r0, #0]
 800b372:	f013 0207 	ands.w	r2, r3, #7
 800b376:	d00c      	beq.n	800b392 <__lo0bits+0x22>
 800b378:	07d9      	lsls	r1, r3, #31
 800b37a:	d422      	bmi.n	800b3c2 <__lo0bits+0x52>
 800b37c:	079a      	lsls	r2, r3, #30
 800b37e:	bf49      	itett	mi
 800b380:	085b      	lsrmi	r3, r3, #1
 800b382:	089b      	lsrpl	r3, r3, #2
 800b384:	6003      	strmi	r3, [r0, #0]
 800b386:	2201      	movmi	r2, #1
 800b388:	bf5c      	itt	pl
 800b38a:	6003      	strpl	r3, [r0, #0]
 800b38c:	2202      	movpl	r2, #2
 800b38e:	4610      	mov	r0, r2
 800b390:	4770      	bx	lr
 800b392:	b299      	uxth	r1, r3
 800b394:	b909      	cbnz	r1, 800b39a <__lo0bits+0x2a>
 800b396:	0c1b      	lsrs	r3, r3, #16
 800b398:	2210      	movs	r2, #16
 800b39a:	b2d9      	uxtb	r1, r3
 800b39c:	b909      	cbnz	r1, 800b3a2 <__lo0bits+0x32>
 800b39e:	3208      	adds	r2, #8
 800b3a0:	0a1b      	lsrs	r3, r3, #8
 800b3a2:	0719      	lsls	r1, r3, #28
 800b3a4:	bf04      	itt	eq
 800b3a6:	091b      	lsreq	r3, r3, #4
 800b3a8:	3204      	addeq	r2, #4
 800b3aa:	0799      	lsls	r1, r3, #30
 800b3ac:	bf04      	itt	eq
 800b3ae:	089b      	lsreq	r3, r3, #2
 800b3b0:	3202      	addeq	r2, #2
 800b3b2:	07d9      	lsls	r1, r3, #31
 800b3b4:	d403      	bmi.n	800b3be <__lo0bits+0x4e>
 800b3b6:	085b      	lsrs	r3, r3, #1
 800b3b8:	f102 0201 	add.w	r2, r2, #1
 800b3bc:	d003      	beq.n	800b3c6 <__lo0bits+0x56>
 800b3be:	6003      	str	r3, [r0, #0]
 800b3c0:	e7e5      	b.n	800b38e <__lo0bits+0x1e>
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	e7e3      	b.n	800b38e <__lo0bits+0x1e>
 800b3c6:	2220      	movs	r2, #32
 800b3c8:	e7e1      	b.n	800b38e <__lo0bits+0x1e>
	...

0800b3cc <__i2b>:
 800b3cc:	b510      	push	{r4, lr}
 800b3ce:	460c      	mov	r4, r1
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	f7ff ff05 	bl	800b1e0 <_Balloc>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	b928      	cbnz	r0, 800b3e6 <__i2b+0x1a>
 800b3da:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <__i2b+0x24>)
 800b3dc:	4805      	ldr	r0, [pc, #20]	; (800b3f4 <__i2b+0x28>)
 800b3de:	f240 1145 	movw	r1, #325	; 0x145
 800b3e2:	f000 fb27 	bl	800ba34 <__assert_func>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	6144      	str	r4, [r0, #20]
 800b3ea:	6103      	str	r3, [r0, #16]
 800b3ec:	bd10      	pop	{r4, pc}
 800b3ee:	bf00      	nop
 800b3f0:	080db2aa 	.word	0x080db2aa
 800b3f4:	080db2bb 	.word	0x080db2bb

0800b3f8 <__multiply>:
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	4691      	mov	r9, r2
 800b3fe:	690a      	ldr	r2, [r1, #16]
 800b400:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b404:	429a      	cmp	r2, r3
 800b406:	bfb8      	it	lt
 800b408:	460b      	movlt	r3, r1
 800b40a:	460c      	mov	r4, r1
 800b40c:	bfbc      	itt	lt
 800b40e:	464c      	movlt	r4, r9
 800b410:	4699      	movlt	r9, r3
 800b412:	6927      	ldr	r7, [r4, #16]
 800b414:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b418:	68a3      	ldr	r3, [r4, #8]
 800b41a:	6861      	ldr	r1, [r4, #4]
 800b41c:	eb07 060a 	add.w	r6, r7, sl
 800b420:	42b3      	cmp	r3, r6
 800b422:	b085      	sub	sp, #20
 800b424:	bfb8      	it	lt
 800b426:	3101      	addlt	r1, #1
 800b428:	f7ff feda 	bl	800b1e0 <_Balloc>
 800b42c:	b930      	cbnz	r0, 800b43c <__multiply+0x44>
 800b42e:	4602      	mov	r2, r0
 800b430:	4b44      	ldr	r3, [pc, #272]	; (800b544 <__multiply+0x14c>)
 800b432:	4845      	ldr	r0, [pc, #276]	; (800b548 <__multiply+0x150>)
 800b434:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b438:	f000 fafc 	bl	800ba34 <__assert_func>
 800b43c:	f100 0514 	add.w	r5, r0, #20
 800b440:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b444:	462b      	mov	r3, r5
 800b446:	2200      	movs	r2, #0
 800b448:	4543      	cmp	r3, r8
 800b44a:	d321      	bcc.n	800b490 <__multiply+0x98>
 800b44c:	f104 0314 	add.w	r3, r4, #20
 800b450:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b454:	f109 0314 	add.w	r3, r9, #20
 800b458:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b45c:	9202      	str	r2, [sp, #8]
 800b45e:	1b3a      	subs	r2, r7, r4
 800b460:	3a15      	subs	r2, #21
 800b462:	f022 0203 	bic.w	r2, r2, #3
 800b466:	3204      	adds	r2, #4
 800b468:	f104 0115 	add.w	r1, r4, #21
 800b46c:	428f      	cmp	r7, r1
 800b46e:	bf38      	it	cc
 800b470:	2204      	movcc	r2, #4
 800b472:	9201      	str	r2, [sp, #4]
 800b474:	9a02      	ldr	r2, [sp, #8]
 800b476:	9303      	str	r3, [sp, #12]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d80c      	bhi.n	800b496 <__multiply+0x9e>
 800b47c:	2e00      	cmp	r6, #0
 800b47e:	dd03      	ble.n	800b488 <__multiply+0x90>
 800b480:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b484:	2b00      	cmp	r3, #0
 800b486:	d05b      	beq.n	800b540 <__multiply+0x148>
 800b488:	6106      	str	r6, [r0, #16]
 800b48a:	b005      	add	sp, #20
 800b48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b490:	f843 2b04 	str.w	r2, [r3], #4
 800b494:	e7d8      	b.n	800b448 <__multiply+0x50>
 800b496:	f8b3 a000 	ldrh.w	sl, [r3]
 800b49a:	f1ba 0f00 	cmp.w	sl, #0
 800b49e:	d024      	beq.n	800b4ea <__multiply+0xf2>
 800b4a0:	f104 0e14 	add.w	lr, r4, #20
 800b4a4:	46a9      	mov	r9, r5
 800b4a6:	f04f 0c00 	mov.w	ip, #0
 800b4aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b4ae:	f8d9 1000 	ldr.w	r1, [r9]
 800b4b2:	fa1f fb82 	uxth.w	fp, r2
 800b4b6:	b289      	uxth	r1, r1
 800b4b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b4bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b4c0:	f8d9 2000 	ldr.w	r2, [r9]
 800b4c4:	4461      	add	r1, ip
 800b4c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800b4ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4d2:	b289      	uxth	r1, r1
 800b4d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4d8:	4577      	cmp	r7, lr
 800b4da:	f849 1b04 	str.w	r1, [r9], #4
 800b4de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4e2:	d8e2      	bhi.n	800b4aa <__multiply+0xb2>
 800b4e4:	9a01      	ldr	r2, [sp, #4]
 800b4e6:	f845 c002 	str.w	ip, [r5, r2]
 800b4ea:	9a03      	ldr	r2, [sp, #12]
 800b4ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b4f0:	3304      	adds	r3, #4
 800b4f2:	f1b9 0f00 	cmp.w	r9, #0
 800b4f6:	d021      	beq.n	800b53c <__multiply+0x144>
 800b4f8:	6829      	ldr	r1, [r5, #0]
 800b4fa:	f104 0c14 	add.w	ip, r4, #20
 800b4fe:	46ae      	mov	lr, r5
 800b500:	f04f 0a00 	mov.w	sl, #0
 800b504:	f8bc b000 	ldrh.w	fp, [ip]
 800b508:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b50c:	fb09 220b 	mla	r2, r9, fp, r2
 800b510:	4452      	add	r2, sl
 800b512:	b289      	uxth	r1, r1
 800b514:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b518:	f84e 1b04 	str.w	r1, [lr], #4
 800b51c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b520:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b524:	f8be 1000 	ldrh.w	r1, [lr]
 800b528:	fb09 110a 	mla	r1, r9, sl, r1
 800b52c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b530:	4567      	cmp	r7, ip
 800b532:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b536:	d8e5      	bhi.n	800b504 <__multiply+0x10c>
 800b538:	9a01      	ldr	r2, [sp, #4]
 800b53a:	50a9      	str	r1, [r5, r2]
 800b53c:	3504      	adds	r5, #4
 800b53e:	e799      	b.n	800b474 <__multiply+0x7c>
 800b540:	3e01      	subs	r6, #1
 800b542:	e79b      	b.n	800b47c <__multiply+0x84>
 800b544:	080db2aa 	.word	0x080db2aa
 800b548:	080db2bb 	.word	0x080db2bb

0800b54c <__pow5mult>:
 800b54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b550:	4615      	mov	r5, r2
 800b552:	f012 0203 	ands.w	r2, r2, #3
 800b556:	4606      	mov	r6, r0
 800b558:	460f      	mov	r7, r1
 800b55a:	d007      	beq.n	800b56c <__pow5mult+0x20>
 800b55c:	4c25      	ldr	r4, [pc, #148]	; (800b5f4 <__pow5mult+0xa8>)
 800b55e:	3a01      	subs	r2, #1
 800b560:	2300      	movs	r3, #0
 800b562:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b566:	f7ff fe9d 	bl	800b2a4 <__multadd>
 800b56a:	4607      	mov	r7, r0
 800b56c:	10ad      	asrs	r5, r5, #2
 800b56e:	d03d      	beq.n	800b5ec <__pow5mult+0xa0>
 800b570:	69f4      	ldr	r4, [r6, #28]
 800b572:	b97c      	cbnz	r4, 800b594 <__pow5mult+0x48>
 800b574:	2010      	movs	r0, #16
 800b576:	f7f7 fbcd 	bl	8002d14 <__wrap_malloc>
 800b57a:	4602      	mov	r2, r0
 800b57c:	61f0      	str	r0, [r6, #28]
 800b57e:	b928      	cbnz	r0, 800b58c <__pow5mult+0x40>
 800b580:	4b1d      	ldr	r3, [pc, #116]	; (800b5f8 <__pow5mult+0xac>)
 800b582:	481e      	ldr	r0, [pc, #120]	; (800b5fc <__pow5mult+0xb0>)
 800b584:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b588:	f000 fa54 	bl	800ba34 <__assert_func>
 800b58c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b590:	6004      	str	r4, [r0, #0]
 800b592:	60c4      	str	r4, [r0, #12]
 800b594:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b598:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b59c:	b94c      	cbnz	r4, 800b5b2 <__pow5mult+0x66>
 800b59e:	f240 2171 	movw	r1, #625	; 0x271
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f7ff ff12 	bl	800b3cc <__i2b>
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	6003      	str	r3, [r0, #0]
 800b5b2:	f04f 0900 	mov.w	r9, #0
 800b5b6:	07eb      	lsls	r3, r5, #31
 800b5b8:	d50a      	bpl.n	800b5d0 <__pow5mult+0x84>
 800b5ba:	4639      	mov	r1, r7
 800b5bc:	4622      	mov	r2, r4
 800b5be:	4630      	mov	r0, r6
 800b5c0:	f7ff ff1a 	bl	800b3f8 <__multiply>
 800b5c4:	4639      	mov	r1, r7
 800b5c6:	4680      	mov	r8, r0
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f7ff fe49 	bl	800b260 <_Bfree>
 800b5ce:	4647      	mov	r7, r8
 800b5d0:	106d      	asrs	r5, r5, #1
 800b5d2:	d00b      	beq.n	800b5ec <__pow5mult+0xa0>
 800b5d4:	6820      	ldr	r0, [r4, #0]
 800b5d6:	b938      	cbnz	r0, 800b5e8 <__pow5mult+0x9c>
 800b5d8:	4622      	mov	r2, r4
 800b5da:	4621      	mov	r1, r4
 800b5dc:	4630      	mov	r0, r6
 800b5de:	f7ff ff0b 	bl	800b3f8 <__multiply>
 800b5e2:	6020      	str	r0, [r4, #0]
 800b5e4:	f8c0 9000 	str.w	r9, [r0]
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	e7e4      	b.n	800b5b6 <__pow5mult+0x6a>
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5f2:	bf00      	nop
 800b5f4:	080db408 	.word	0x080db408
 800b5f8:	080db23b 	.word	0x080db23b
 800b5fc:	080db2bb 	.word	0x080db2bb

0800b600 <__lshift>:
 800b600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b604:	460c      	mov	r4, r1
 800b606:	6849      	ldr	r1, [r1, #4]
 800b608:	6923      	ldr	r3, [r4, #16]
 800b60a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b60e:	68a3      	ldr	r3, [r4, #8]
 800b610:	4607      	mov	r7, r0
 800b612:	4691      	mov	r9, r2
 800b614:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b618:	f108 0601 	add.w	r6, r8, #1
 800b61c:	42b3      	cmp	r3, r6
 800b61e:	db0b      	blt.n	800b638 <__lshift+0x38>
 800b620:	4638      	mov	r0, r7
 800b622:	f7ff fddd 	bl	800b1e0 <_Balloc>
 800b626:	4605      	mov	r5, r0
 800b628:	b948      	cbnz	r0, 800b63e <__lshift+0x3e>
 800b62a:	4602      	mov	r2, r0
 800b62c:	4b28      	ldr	r3, [pc, #160]	; (800b6d0 <__lshift+0xd0>)
 800b62e:	4829      	ldr	r0, [pc, #164]	; (800b6d4 <__lshift+0xd4>)
 800b630:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b634:	f000 f9fe 	bl	800ba34 <__assert_func>
 800b638:	3101      	adds	r1, #1
 800b63a:	005b      	lsls	r3, r3, #1
 800b63c:	e7ee      	b.n	800b61c <__lshift+0x1c>
 800b63e:	2300      	movs	r3, #0
 800b640:	f100 0114 	add.w	r1, r0, #20
 800b644:	f100 0210 	add.w	r2, r0, #16
 800b648:	4618      	mov	r0, r3
 800b64a:	4553      	cmp	r3, sl
 800b64c:	db33      	blt.n	800b6b6 <__lshift+0xb6>
 800b64e:	6920      	ldr	r0, [r4, #16]
 800b650:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b654:	f104 0314 	add.w	r3, r4, #20
 800b658:	f019 091f 	ands.w	r9, r9, #31
 800b65c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b660:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b664:	d02b      	beq.n	800b6be <__lshift+0xbe>
 800b666:	f1c9 0e20 	rsb	lr, r9, #32
 800b66a:	468a      	mov	sl, r1
 800b66c:	2200      	movs	r2, #0
 800b66e:	6818      	ldr	r0, [r3, #0]
 800b670:	fa00 f009 	lsl.w	r0, r0, r9
 800b674:	4310      	orrs	r0, r2
 800b676:	f84a 0b04 	str.w	r0, [sl], #4
 800b67a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b67e:	459c      	cmp	ip, r3
 800b680:	fa22 f20e 	lsr.w	r2, r2, lr
 800b684:	d8f3      	bhi.n	800b66e <__lshift+0x6e>
 800b686:	ebac 0304 	sub.w	r3, ip, r4
 800b68a:	3b15      	subs	r3, #21
 800b68c:	f023 0303 	bic.w	r3, r3, #3
 800b690:	3304      	adds	r3, #4
 800b692:	f104 0015 	add.w	r0, r4, #21
 800b696:	4584      	cmp	ip, r0
 800b698:	bf38      	it	cc
 800b69a:	2304      	movcc	r3, #4
 800b69c:	50ca      	str	r2, [r1, r3]
 800b69e:	b10a      	cbz	r2, 800b6a4 <__lshift+0xa4>
 800b6a0:	f108 0602 	add.w	r6, r8, #2
 800b6a4:	3e01      	subs	r6, #1
 800b6a6:	4638      	mov	r0, r7
 800b6a8:	612e      	str	r6, [r5, #16]
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	f7ff fdd8 	bl	800b260 <_Bfree>
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	e7c5      	b.n	800b64a <__lshift+0x4a>
 800b6be:	3904      	subs	r1, #4
 800b6c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6c8:	459c      	cmp	ip, r3
 800b6ca:	d8f9      	bhi.n	800b6c0 <__lshift+0xc0>
 800b6cc:	e7ea      	b.n	800b6a4 <__lshift+0xa4>
 800b6ce:	bf00      	nop
 800b6d0:	080db2aa 	.word	0x080db2aa
 800b6d4:	080db2bb 	.word	0x080db2bb

0800b6d8 <__mcmp>:
 800b6d8:	b530      	push	{r4, r5, lr}
 800b6da:	6902      	ldr	r2, [r0, #16]
 800b6dc:	690c      	ldr	r4, [r1, #16]
 800b6de:	1b12      	subs	r2, r2, r4
 800b6e0:	d10e      	bne.n	800b700 <__mcmp+0x28>
 800b6e2:	f100 0314 	add.w	r3, r0, #20
 800b6e6:	3114      	adds	r1, #20
 800b6e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b6f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b6f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6f8:	42a5      	cmp	r5, r4
 800b6fa:	d003      	beq.n	800b704 <__mcmp+0x2c>
 800b6fc:	d305      	bcc.n	800b70a <__mcmp+0x32>
 800b6fe:	2201      	movs	r2, #1
 800b700:	4610      	mov	r0, r2
 800b702:	bd30      	pop	{r4, r5, pc}
 800b704:	4283      	cmp	r3, r0
 800b706:	d3f3      	bcc.n	800b6f0 <__mcmp+0x18>
 800b708:	e7fa      	b.n	800b700 <__mcmp+0x28>
 800b70a:	f04f 32ff 	mov.w	r2, #4294967295
 800b70e:	e7f7      	b.n	800b700 <__mcmp+0x28>

0800b710 <__mdiff>:
 800b710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	460c      	mov	r4, r1
 800b716:	4606      	mov	r6, r0
 800b718:	4611      	mov	r1, r2
 800b71a:	4620      	mov	r0, r4
 800b71c:	4690      	mov	r8, r2
 800b71e:	f7ff ffdb 	bl	800b6d8 <__mcmp>
 800b722:	1e05      	subs	r5, r0, #0
 800b724:	d110      	bne.n	800b748 <__mdiff+0x38>
 800b726:	4629      	mov	r1, r5
 800b728:	4630      	mov	r0, r6
 800b72a:	f7ff fd59 	bl	800b1e0 <_Balloc>
 800b72e:	b930      	cbnz	r0, 800b73e <__mdiff+0x2e>
 800b730:	4b3a      	ldr	r3, [pc, #232]	; (800b81c <__mdiff+0x10c>)
 800b732:	4602      	mov	r2, r0
 800b734:	f240 2137 	movw	r1, #567	; 0x237
 800b738:	4839      	ldr	r0, [pc, #228]	; (800b820 <__mdiff+0x110>)
 800b73a:	f000 f97b 	bl	800ba34 <__assert_func>
 800b73e:	2301      	movs	r3, #1
 800b740:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b748:	bfa4      	itt	ge
 800b74a:	4643      	movge	r3, r8
 800b74c:	46a0      	movge	r8, r4
 800b74e:	4630      	mov	r0, r6
 800b750:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b754:	bfa6      	itte	ge
 800b756:	461c      	movge	r4, r3
 800b758:	2500      	movge	r5, #0
 800b75a:	2501      	movlt	r5, #1
 800b75c:	f7ff fd40 	bl	800b1e0 <_Balloc>
 800b760:	b920      	cbnz	r0, 800b76c <__mdiff+0x5c>
 800b762:	4b2e      	ldr	r3, [pc, #184]	; (800b81c <__mdiff+0x10c>)
 800b764:	4602      	mov	r2, r0
 800b766:	f240 2145 	movw	r1, #581	; 0x245
 800b76a:	e7e5      	b.n	800b738 <__mdiff+0x28>
 800b76c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b770:	6926      	ldr	r6, [r4, #16]
 800b772:	60c5      	str	r5, [r0, #12]
 800b774:	f104 0914 	add.w	r9, r4, #20
 800b778:	f108 0514 	add.w	r5, r8, #20
 800b77c:	f100 0e14 	add.w	lr, r0, #20
 800b780:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b784:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b788:	f108 0210 	add.w	r2, r8, #16
 800b78c:	46f2      	mov	sl, lr
 800b78e:	2100      	movs	r1, #0
 800b790:	f859 3b04 	ldr.w	r3, [r9], #4
 800b794:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b798:	fa11 f88b 	uxtah	r8, r1, fp
 800b79c:	b299      	uxth	r1, r3
 800b79e:	0c1b      	lsrs	r3, r3, #16
 800b7a0:	eba8 0801 	sub.w	r8, r8, r1
 800b7a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b7ac:	fa1f f888 	uxth.w	r8, r8
 800b7b0:	1419      	asrs	r1, r3, #16
 800b7b2:	454e      	cmp	r6, r9
 800b7b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b7b8:	f84a 3b04 	str.w	r3, [sl], #4
 800b7bc:	d8e8      	bhi.n	800b790 <__mdiff+0x80>
 800b7be:	1b33      	subs	r3, r6, r4
 800b7c0:	3b15      	subs	r3, #21
 800b7c2:	f023 0303 	bic.w	r3, r3, #3
 800b7c6:	3304      	adds	r3, #4
 800b7c8:	3415      	adds	r4, #21
 800b7ca:	42a6      	cmp	r6, r4
 800b7cc:	bf38      	it	cc
 800b7ce:	2304      	movcc	r3, #4
 800b7d0:	441d      	add	r5, r3
 800b7d2:	4473      	add	r3, lr
 800b7d4:	469e      	mov	lr, r3
 800b7d6:	462e      	mov	r6, r5
 800b7d8:	4566      	cmp	r6, ip
 800b7da:	d30e      	bcc.n	800b7fa <__mdiff+0xea>
 800b7dc:	f10c 0203 	add.w	r2, ip, #3
 800b7e0:	1b52      	subs	r2, r2, r5
 800b7e2:	f022 0203 	bic.w	r2, r2, #3
 800b7e6:	3d03      	subs	r5, #3
 800b7e8:	45ac      	cmp	ip, r5
 800b7ea:	bf38      	it	cc
 800b7ec:	2200      	movcc	r2, #0
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b7f4:	b17a      	cbz	r2, 800b816 <__mdiff+0x106>
 800b7f6:	6107      	str	r7, [r0, #16]
 800b7f8:	e7a4      	b.n	800b744 <__mdiff+0x34>
 800b7fa:	f856 8b04 	ldr.w	r8, [r6], #4
 800b7fe:	fa11 f288 	uxtah	r2, r1, r8
 800b802:	1414      	asrs	r4, r2, #16
 800b804:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b808:	b292      	uxth	r2, r2
 800b80a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b80e:	f84e 2b04 	str.w	r2, [lr], #4
 800b812:	1421      	asrs	r1, r4, #16
 800b814:	e7e0      	b.n	800b7d8 <__mdiff+0xc8>
 800b816:	3f01      	subs	r7, #1
 800b818:	e7ea      	b.n	800b7f0 <__mdiff+0xe0>
 800b81a:	bf00      	nop
 800b81c:	080db2aa 	.word	0x080db2aa
 800b820:	080db2bb 	.word	0x080db2bb

0800b824 <__d2b>:
 800b824:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b828:	460f      	mov	r7, r1
 800b82a:	2101      	movs	r1, #1
 800b82c:	ec59 8b10 	vmov	r8, r9, d0
 800b830:	4616      	mov	r6, r2
 800b832:	f7ff fcd5 	bl	800b1e0 <_Balloc>
 800b836:	4604      	mov	r4, r0
 800b838:	b930      	cbnz	r0, 800b848 <__d2b+0x24>
 800b83a:	4602      	mov	r2, r0
 800b83c:	4b24      	ldr	r3, [pc, #144]	; (800b8d0 <__d2b+0xac>)
 800b83e:	4825      	ldr	r0, [pc, #148]	; (800b8d4 <__d2b+0xb0>)
 800b840:	f240 310f 	movw	r1, #783	; 0x30f
 800b844:	f000 f8f6 	bl	800ba34 <__assert_func>
 800b848:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b84c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b850:	bb2d      	cbnz	r5, 800b89e <__d2b+0x7a>
 800b852:	9301      	str	r3, [sp, #4]
 800b854:	f1b8 0300 	subs.w	r3, r8, #0
 800b858:	d026      	beq.n	800b8a8 <__d2b+0x84>
 800b85a:	4668      	mov	r0, sp
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	f7ff fd87 	bl	800b370 <__lo0bits>
 800b862:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b866:	b1e8      	cbz	r0, 800b8a4 <__d2b+0x80>
 800b868:	f1c0 0320 	rsb	r3, r0, #32
 800b86c:	fa02 f303 	lsl.w	r3, r2, r3
 800b870:	430b      	orrs	r3, r1
 800b872:	40c2      	lsrs	r2, r0
 800b874:	6163      	str	r3, [r4, #20]
 800b876:	9201      	str	r2, [sp, #4]
 800b878:	9b01      	ldr	r3, [sp, #4]
 800b87a:	61a3      	str	r3, [r4, #24]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	bf14      	ite	ne
 800b880:	2202      	movne	r2, #2
 800b882:	2201      	moveq	r2, #1
 800b884:	6122      	str	r2, [r4, #16]
 800b886:	b1bd      	cbz	r5, 800b8b8 <__d2b+0x94>
 800b888:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b88c:	4405      	add	r5, r0
 800b88e:	603d      	str	r5, [r7, #0]
 800b890:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b894:	6030      	str	r0, [r6, #0]
 800b896:	4620      	mov	r0, r4
 800b898:	b003      	add	sp, #12
 800b89a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b89e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8a2:	e7d6      	b.n	800b852 <__d2b+0x2e>
 800b8a4:	6161      	str	r1, [r4, #20]
 800b8a6:	e7e7      	b.n	800b878 <__d2b+0x54>
 800b8a8:	a801      	add	r0, sp, #4
 800b8aa:	f7ff fd61 	bl	800b370 <__lo0bits>
 800b8ae:	9b01      	ldr	r3, [sp, #4]
 800b8b0:	6163      	str	r3, [r4, #20]
 800b8b2:	3020      	adds	r0, #32
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	e7e5      	b.n	800b884 <__d2b+0x60>
 800b8b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b8bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8c0:	6038      	str	r0, [r7, #0]
 800b8c2:	6918      	ldr	r0, [r3, #16]
 800b8c4:	f7ff fd34 	bl	800b330 <__hi0bits>
 800b8c8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8cc:	e7e2      	b.n	800b894 <__d2b+0x70>
 800b8ce:	bf00      	nop
 800b8d0:	080db2aa 	.word	0x080db2aa
 800b8d4:	080db2bb 	.word	0x080db2bb

0800b8d8 <__sflush_r>:
 800b8d8:	898a      	ldrh	r2, [r1, #12]
 800b8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8de:	4605      	mov	r5, r0
 800b8e0:	0710      	lsls	r0, r2, #28
 800b8e2:	460c      	mov	r4, r1
 800b8e4:	d458      	bmi.n	800b998 <__sflush_r+0xc0>
 800b8e6:	684b      	ldr	r3, [r1, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	dc05      	bgt.n	800b8f8 <__sflush_r+0x20>
 800b8ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	dc02      	bgt.n	800b8f8 <__sflush_r+0x20>
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8fa:	2e00      	cmp	r6, #0
 800b8fc:	d0f9      	beq.n	800b8f2 <__sflush_r+0x1a>
 800b8fe:	2300      	movs	r3, #0
 800b900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b904:	682f      	ldr	r7, [r5, #0]
 800b906:	6a21      	ldr	r1, [r4, #32]
 800b908:	602b      	str	r3, [r5, #0]
 800b90a:	d032      	beq.n	800b972 <__sflush_r+0x9a>
 800b90c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b90e:	89a3      	ldrh	r3, [r4, #12]
 800b910:	075a      	lsls	r2, r3, #29
 800b912:	d505      	bpl.n	800b920 <__sflush_r+0x48>
 800b914:	6863      	ldr	r3, [r4, #4]
 800b916:	1ac0      	subs	r0, r0, r3
 800b918:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b91a:	b10b      	cbz	r3, 800b920 <__sflush_r+0x48>
 800b91c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b91e:	1ac0      	subs	r0, r0, r3
 800b920:	2300      	movs	r3, #0
 800b922:	4602      	mov	r2, r0
 800b924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b926:	6a21      	ldr	r1, [r4, #32]
 800b928:	4628      	mov	r0, r5
 800b92a:	47b0      	blx	r6
 800b92c:	1c43      	adds	r3, r0, #1
 800b92e:	89a3      	ldrh	r3, [r4, #12]
 800b930:	d106      	bne.n	800b940 <__sflush_r+0x68>
 800b932:	6829      	ldr	r1, [r5, #0]
 800b934:	291d      	cmp	r1, #29
 800b936:	d82b      	bhi.n	800b990 <__sflush_r+0xb8>
 800b938:	4a29      	ldr	r2, [pc, #164]	; (800b9e0 <__sflush_r+0x108>)
 800b93a:	410a      	asrs	r2, r1
 800b93c:	07d6      	lsls	r6, r2, #31
 800b93e:	d427      	bmi.n	800b990 <__sflush_r+0xb8>
 800b940:	2200      	movs	r2, #0
 800b942:	6062      	str	r2, [r4, #4]
 800b944:	04d9      	lsls	r1, r3, #19
 800b946:	6922      	ldr	r2, [r4, #16]
 800b948:	6022      	str	r2, [r4, #0]
 800b94a:	d504      	bpl.n	800b956 <__sflush_r+0x7e>
 800b94c:	1c42      	adds	r2, r0, #1
 800b94e:	d101      	bne.n	800b954 <__sflush_r+0x7c>
 800b950:	682b      	ldr	r3, [r5, #0]
 800b952:	b903      	cbnz	r3, 800b956 <__sflush_r+0x7e>
 800b954:	6560      	str	r0, [r4, #84]	; 0x54
 800b956:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b958:	602f      	str	r7, [r5, #0]
 800b95a:	2900      	cmp	r1, #0
 800b95c:	d0c9      	beq.n	800b8f2 <__sflush_r+0x1a>
 800b95e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b962:	4299      	cmp	r1, r3
 800b964:	d002      	beq.n	800b96c <__sflush_r+0x94>
 800b966:	4628      	mov	r0, r5
 800b968:	f7ff fbee 	bl	800b148 <_free_r>
 800b96c:	2000      	movs	r0, #0
 800b96e:	6360      	str	r0, [r4, #52]	; 0x34
 800b970:	e7c0      	b.n	800b8f4 <__sflush_r+0x1c>
 800b972:	2301      	movs	r3, #1
 800b974:	4628      	mov	r0, r5
 800b976:	47b0      	blx	r6
 800b978:	1c41      	adds	r1, r0, #1
 800b97a:	d1c8      	bne.n	800b90e <__sflush_r+0x36>
 800b97c:	682b      	ldr	r3, [r5, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d0c5      	beq.n	800b90e <__sflush_r+0x36>
 800b982:	2b1d      	cmp	r3, #29
 800b984:	d001      	beq.n	800b98a <__sflush_r+0xb2>
 800b986:	2b16      	cmp	r3, #22
 800b988:	d101      	bne.n	800b98e <__sflush_r+0xb6>
 800b98a:	602f      	str	r7, [r5, #0]
 800b98c:	e7b1      	b.n	800b8f2 <__sflush_r+0x1a>
 800b98e:	89a3      	ldrh	r3, [r4, #12]
 800b990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b994:	81a3      	strh	r3, [r4, #12]
 800b996:	e7ad      	b.n	800b8f4 <__sflush_r+0x1c>
 800b998:	690f      	ldr	r7, [r1, #16]
 800b99a:	2f00      	cmp	r7, #0
 800b99c:	d0a9      	beq.n	800b8f2 <__sflush_r+0x1a>
 800b99e:	0793      	lsls	r3, r2, #30
 800b9a0:	680e      	ldr	r6, [r1, #0]
 800b9a2:	bf08      	it	eq
 800b9a4:	694b      	ldreq	r3, [r1, #20]
 800b9a6:	600f      	str	r7, [r1, #0]
 800b9a8:	bf18      	it	ne
 800b9aa:	2300      	movne	r3, #0
 800b9ac:	eba6 0807 	sub.w	r8, r6, r7
 800b9b0:	608b      	str	r3, [r1, #8]
 800b9b2:	f1b8 0f00 	cmp.w	r8, #0
 800b9b6:	dd9c      	ble.n	800b8f2 <__sflush_r+0x1a>
 800b9b8:	6a21      	ldr	r1, [r4, #32]
 800b9ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b9bc:	4643      	mov	r3, r8
 800b9be:	463a      	mov	r2, r7
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	47b0      	blx	r6
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	dc06      	bgt.n	800b9d6 <__sflush_r+0xfe>
 800b9c8:	89a3      	ldrh	r3, [r4, #12]
 800b9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ce:	81a3      	strh	r3, [r4, #12]
 800b9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d4:	e78e      	b.n	800b8f4 <__sflush_r+0x1c>
 800b9d6:	4407      	add	r7, r0
 800b9d8:	eba8 0800 	sub.w	r8, r8, r0
 800b9dc:	e7e9      	b.n	800b9b2 <__sflush_r+0xda>
 800b9de:	bf00      	nop
 800b9e0:	dfbffffe 	.word	0xdfbffffe

0800b9e4 <_fflush_r>:
 800b9e4:	b538      	push	{r3, r4, r5, lr}
 800b9e6:	690b      	ldr	r3, [r1, #16]
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	b913      	cbnz	r3, 800b9f4 <_fflush_r+0x10>
 800b9ee:	2500      	movs	r5, #0
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	b118      	cbz	r0, 800b9fe <_fflush_r+0x1a>
 800b9f6:	6a03      	ldr	r3, [r0, #32]
 800b9f8:	b90b      	cbnz	r3, 800b9fe <_fflush_r+0x1a>
 800b9fa:	f7fe fc87 	bl	800a30c <__sinit>
 800b9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d0f3      	beq.n	800b9ee <_fflush_r+0xa>
 800ba06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba08:	07d0      	lsls	r0, r2, #31
 800ba0a:	d404      	bmi.n	800ba16 <_fflush_r+0x32>
 800ba0c:	0599      	lsls	r1, r3, #22
 800ba0e:	d402      	bmi.n	800ba16 <_fflush_r+0x32>
 800ba10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba12:	f7fe fd94 	bl	800a53e <__retarget_lock_acquire_recursive>
 800ba16:	4628      	mov	r0, r5
 800ba18:	4621      	mov	r1, r4
 800ba1a:	f7ff ff5d 	bl	800b8d8 <__sflush_r>
 800ba1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba20:	07da      	lsls	r2, r3, #31
 800ba22:	4605      	mov	r5, r0
 800ba24:	d4e4      	bmi.n	800b9f0 <_fflush_r+0xc>
 800ba26:	89a3      	ldrh	r3, [r4, #12]
 800ba28:	059b      	lsls	r3, r3, #22
 800ba2a:	d4e1      	bmi.n	800b9f0 <_fflush_r+0xc>
 800ba2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba2e:	f7fe fd87 	bl	800a540 <__retarget_lock_release_recursive>
 800ba32:	e7dd      	b.n	800b9f0 <_fflush_r+0xc>

0800ba34 <__assert_func>:
 800ba34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba36:	4614      	mov	r4, r2
 800ba38:	461a      	mov	r2, r3
 800ba3a:	4b09      	ldr	r3, [pc, #36]	; (800ba60 <__assert_func+0x2c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4605      	mov	r5, r0
 800ba40:	68d8      	ldr	r0, [r3, #12]
 800ba42:	b14c      	cbz	r4, 800ba58 <__assert_func+0x24>
 800ba44:	4b07      	ldr	r3, [pc, #28]	; (800ba64 <__assert_func+0x30>)
 800ba46:	9100      	str	r1, [sp, #0]
 800ba48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba4c:	4906      	ldr	r1, [pc, #24]	; (800ba68 <__assert_func+0x34>)
 800ba4e:	462b      	mov	r3, r5
 800ba50:	f000 f844 	bl	800badc <fiprintf>
 800ba54:	f000 f854 	bl	800bb00 <abort>
 800ba58:	4b04      	ldr	r3, [pc, #16]	; (800ba6c <__assert_func+0x38>)
 800ba5a:	461c      	mov	r4, r3
 800ba5c:	e7f3      	b.n	800ba46 <__assert_func+0x12>
 800ba5e:	bf00      	nop
 800ba60:	20004200 	.word	0x20004200
 800ba64:	080db41e 	.word	0x080db41e
 800ba68:	080db42b 	.word	0x080db42b
 800ba6c:	080db459 	.word	0x080db459

0800ba70 <_calloc_r>:
 800ba70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba72:	fba1 2402 	umull	r2, r4, r1, r2
 800ba76:	b94c      	cbnz	r4, 800ba8c <_calloc_r+0x1c>
 800ba78:	4611      	mov	r1, r2
 800ba7a:	9201      	str	r2, [sp, #4]
 800ba7c:	f7fd fef2 	bl	8009864 <_malloc_r>
 800ba80:	9a01      	ldr	r2, [sp, #4]
 800ba82:	4605      	mov	r5, r0
 800ba84:	b930      	cbnz	r0, 800ba94 <_calloc_r+0x24>
 800ba86:	4628      	mov	r0, r5
 800ba88:	b003      	add	sp, #12
 800ba8a:	bd30      	pop	{r4, r5, pc}
 800ba8c:	220c      	movs	r2, #12
 800ba8e:	6002      	str	r2, [r0, #0]
 800ba90:	2500      	movs	r5, #0
 800ba92:	e7f8      	b.n	800ba86 <_calloc_r+0x16>
 800ba94:	4621      	mov	r1, r4
 800ba96:	f7fe fcb2 	bl	800a3fe <memset>
 800ba9a:	e7f4      	b.n	800ba86 <_calloc_r+0x16>

0800ba9c <__ascii_mbtowc>:
 800ba9c:	b082      	sub	sp, #8
 800ba9e:	b901      	cbnz	r1, 800baa2 <__ascii_mbtowc+0x6>
 800baa0:	a901      	add	r1, sp, #4
 800baa2:	b142      	cbz	r2, 800bab6 <__ascii_mbtowc+0x1a>
 800baa4:	b14b      	cbz	r3, 800baba <__ascii_mbtowc+0x1e>
 800baa6:	7813      	ldrb	r3, [r2, #0]
 800baa8:	600b      	str	r3, [r1, #0]
 800baaa:	7812      	ldrb	r2, [r2, #0]
 800baac:	1e10      	subs	r0, r2, #0
 800baae:	bf18      	it	ne
 800bab0:	2001      	movne	r0, #1
 800bab2:	b002      	add	sp, #8
 800bab4:	4770      	bx	lr
 800bab6:	4610      	mov	r0, r2
 800bab8:	e7fb      	b.n	800bab2 <__ascii_mbtowc+0x16>
 800baba:	f06f 0001 	mvn.w	r0, #1
 800babe:	e7f8      	b.n	800bab2 <__ascii_mbtowc+0x16>

0800bac0 <__ascii_wctomb>:
 800bac0:	b149      	cbz	r1, 800bad6 <__ascii_wctomb+0x16>
 800bac2:	2aff      	cmp	r2, #255	; 0xff
 800bac4:	bf85      	ittet	hi
 800bac6:	238a      	movhi	r3, #138	; 0x8a
 800bac8:	6003      	strhi	r3, [r0, #0]
 800baca:	700a      	strbls	r2, [r1, #0]
 800bacc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bad0:	bf98      	it	ls
 800bad2:	2001      	movls	r0, #1
 800bad4:	4770      	bx	lr
 800bad6:	4608      	mov	r0, r1
 800bad8:	4770      	bx	lr
	...

0800badc <fiprintf>:
 800badc:	b40e      	push	{r1, r2, r3}
 800bade:	b503      	push	{r0, r1, lr}
 800bae0:	4601      	mov	r1, r0
 800bae2:	ab03      	add	r3, sp, #12
 800bae4:	4805      	ldr	r0, [pc, #20]	; (800bafc <fiprintf+0x20>)
 800bae6:	f853 2b04 	ldr.w	r2, [r3], #4
 800baea:	6800      	ldr	r0, [r0, #0]
 800baec:	9301      	str	r3, [sp, #4]
 800baee:	f000 f837 	bl	800bb60 <_vfiprintf_r>
 800baf2:	b002      	add	sp, #8
 800baf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800baf8:	b003      	add	sp, #12
 800bafa:	4770      	bx	lr
 800bafc:	20004200 	.word	0x20004200

0800bb00 <abort>:
 800bb00:	b508      	push	{r3, lr}
 800bb02:	2006      	movs	r0, #6
 800bb04:	f000 fa04 	bl	800bf10 <raise>
 800bb08:	2001      	movs	r0, #1
 800bb0a:	f000 fb75 	bl	800c1f8 <_exit>

0800bb0e <__sfputc_r>:
 800bb0e:	6893      	ldr	r3, [r2, #8]
 800bb10:	3b01      	subs	r3, #1
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	b410      	push	{r4}
 800bb16:	6093      	str	r3, [r2, #8]
 800bb18:	da08      	bge.n	800bb2c <__sfputc_r+0x1e>
 800bb1a:	6994      	ldr	r4, [r2, #24]
 800bb1c:	42a3      	cmp	r3, r4
 800bb1e:	db01      	blt.n	800bb24 <__sfputc_r+0x16>
 800bb20:	290a      	cmp	r1, #10
 800bb22:	d103      	bne.n	800bb2c <__sfputc_r+0x1e>
 800bb24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb28:	f000 b934 	b.w	800bd94 <__swbuf_r>
 800bb2c:	6813      	ldr	r3, [r2, #0]
 800bb2e:	1c58      	adds	r0, r3, #1
 800bb30:	6010      	str	r0, [r2, #0]
 800bb32:	7019      	strb	r1, [r3, #0]
 800bb34:	4608      	mov	r0, r1
 800bb36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <__sfputs_r>:
 800bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3e:	4606      	mov	r6, r0
 800bb40:	460f      	mov	r7, r1
 800bb42:	4614      	mov	r4, r2
 800bb44:	18d5      	adds	r5, r2, r3
 800bb46:	42ac      	cmp	r4, r5
 800bb48:	d101      	bne.n	800bb4e <__sfputs_r+0x12>
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	e007      	b.n	800bb5e <__sfputs_r+0x22>
 800bb4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb52:	463a      	mov	r2, r7
 800bb54:	4630      	mov	r0, r6
 800bb56:	f7ff ffda 	bl	800bb0e <__sfputc_r>
 800bb5a:	1c43      	adds	r3, r0, #1
 800bb5c:	d1f3      	bne.n	800bb46 <__sfputs_r+0xa>
 800bb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb60 <_vfiprintf_r>:
 800bb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb64:	460d      	mov	r5, r1
 800bb66:	b09d      	sub	sp, #116	; 0x74
 800bb68:	4614      	mov	r4, r2
 800bb6a:	4698      	mov	r8, r3
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	b118      	cbz	r0, 800bb78 <_vfiprintf_r+0x18>
 800bb70:	6a03      	ldr	r3, [r0, #32]
 800bb72:	b90b      	cbnz	r3, 800bb78 <_vfiprintf_r+0x18>
 800bb74:	f7fe fbca 	bl	800a30c <__sinit>
 800bb78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb7a:	07d9      	lsls	r1, r3, #31
 800bb7c:	d405      	bmi.n	800bb8a <_vfiprintf_r+0x2a>
 800bb7e:	89ab      	ldrh	r3, [r5, #12]
 800bb80:	059a      	lsls	r2, r3, #22
 800bb82:	d402      	bmi.n	800bb8a <_vfiprintf_r+0x2a>
 800bb84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb86:	f7fe fcda 	bl	800a53e <__retarget_lock_acquire_recursive>
 800bb8a:	89ab      	ldrh	r3, [r5, #12]
 800bb8c:	071b      	lsls	r3, r3, #28
 800bb8e:	d501      	bpl.n	800bb94 <_vfiprintf_r+0x34>
 800bb90:	692b      	ldr	r3, [r5, #16]
 800bb92:	b99b      	cbnz	r3, 800bbbc <_vfiprintf_r+0x5c>
 800bb94:	4629      	mov	r1, r5
 800bb96:	4630      	mov	r0, r6
 800bb98:	f000 f93a 	bl	800be10 <__swsetup_r>
 800bb9c:	b170      	cbz	r0, 800bbbc <_vfiprintf_r+0x5c>
 800bb9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bba0:	07dc      	lsls	r4, r3, #31
 800bba2:	d504      	bpl.n	800bbae <_vfiprintf_r+0x4e>
 800bba4:	f04f 30ff 	mov.w	r0, #4294967295
 800bba8:	b01d      	add	sp, #116	; 0x74
 800bbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbae:	89ab      	ldrh	r3, [r5, #12]
 800bbb0:	0598      	lsls	r0, r3, #22
 800bbb2:	d4f7      	bmi.n	800bba4 <_vfiprintf_r+0x44>
 800bbb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbb6:	f7fe fcc3 	bl	800a540 <__retarget_lock_release_recursive>
 800bbba:	e7f3      	b.n	800bba4 <_vfiprintf_r+0x44>
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	9309      	str	r3, [sp, #36]	; 0x24
 800bbc0:	2320      	movs	r3, #32
 800bbc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbca:	2330      	movs	r3, #48	; 0x30
 800bbcc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bd80 <_vfiprintf_r+0x220>
 800bbd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbd4:	f04f 0901 	mov.w	r9, #1
 800bbd8:	4623      	mov	r3, r4
 800bbda:	469a      	mov	sl, r3
 800bbdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbe0:	b10a      	cbz	r2, 800bbe6 <_vfiprintf_r+0x86>
 800bbe2:	2a25      	cmp	r2, #37	; 0x25
 800bbe4:	d1f9      	bne.n	800bbda <_vfiprintf_r+0x7a>
 800bbe6:	ebba 0b04 	subs.w	fp, sl, r4
 800bbea:	d00b      	beq.n	800bc04 <_vfiprintf_r+0xa4>
 800bbec:	465b      	mov	r3, fp
 800bbee:	4622      	mov	r2, r4
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f7ff ffa2 	bl	800bb3c <__sfputs_r>
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	f000 80a9 	beq.w	800bd50 <_vfiprintf_r+0x1f0>
 800bbfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc00:	445a      	add	r2, fp
 800bc02:	9209      	str	r2, [sp, #36]	; 0x24
 800bc04:	f89a 3000 	ldrb.w	r3, [sl]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f000 80a1 	beq.w	800bd50 <_vfiprintf_r+0x1f0>
 800bc0e:	2300      	movs	r3, #0
 800bc10:	f04f 32ff 	mov.w	r2, #4294967295
 800bc14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc18:	f10a 0a01 	add.w	sl, sl, #1
 800bc1c:	9304      	str	r3, [sp, #16]
 800bc1e:	9307      	str	r3, [sp, #28]
 800bc20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc24:	931a      	str	r3, [sp, #104]	; 0x68
 800bc26:	4654      	mov	r4, sl
 800bc28:	2205      	movs	r2, #5
 800bc2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc2e:	4854      	ldr	r0, [pc, #336]	; (800bd80 <_vfiprintf_r+0x220>)
 800bc30:	f7f4 fb06 	bl	8000240 <memchr>
 800bc34:	9a04      	ldr	r2, [sp, #16]
 800bc36:	b9d8      	cbnz	r0, 800bc70 <_vfiprintf_r+0x110>
 800bc38:	06d1      	lsls	r1, r2, #27
 800bc3a:	bf44      	itt	mi
 800bc3c:	2320      	movmi	r3, #32
 800bc3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc42:	0713      	lsls	r3, r2, #28
 800bc44:	bf44      	itt	mi
 800bc46:	232b      	movmi	r3, #43	; 0x2b
 800bc48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc4c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc50:	2b2a      	cmp	r3, #42	; 0x2a
 800bc52:	d015      	beq.n	800bc80 <_vfiprintf_r+0x120>
 800bc54:	9a07      	ldr	r2, [sp, #28]
 800bc56:	4654      	mov	r4, sl
 800bc58:	2000      	movs	r0, #0
 800bc5a:	f04f 0c0a 	mov.w	ip, #10
 800bc5e:	4621      	mov	r1, r4
 800bc60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc64:	3b30      	subs	r3, #48	; 0x30
 800bc66:	2b09      	cmp	r3, #9
 800bc68:	d94d      	bls.n	800bd06 <_vfiprintf_r+0x1a6>
 800bc6a:	b1b0      	cbz	r0, 800bc9a <_vfiprintf_r+0x13a>
 800bc6c:	9207      	str	r2, [sp, #28]
 800bc6e:	e014      	b.n	800bc9a <_vfiprintf_r+0x13a>
 800bc70:	eba0 0308 	sub.w	r3, r0, r8
 800bc74:	fa09 f303 	lsl.w	r3, r9, r3
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	9304      	str	r3, [sp, #16]
 800bc7c:	46a2      	mov	sl, r4
 800bc7e:	e7d2      	b.n	800bc26 <_vfiprintf_r+0xc6>
 800bc80:	9b03      	ldr	r3, [sp, #12]
 800bc82:	1d19      	adds	r1, r3, #4
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	9103      	str	r1, [sp, #12]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	bfbb      	ittet	lt
 800bc8c:	425b      	neglt	r3, r3
 800bc8e:	f042 0202 	orrlt.w	r2, r2, #2
 800bc92:	9307      	strge	r3, [sp, #28]
 800bc94:	9307      	strlt	r3, [sp, #28]
 800bc96:	bfb8      	it	lt
 800bc98:	9204      	strlt	r2, [sp, #16]
 800bc9a:	7823      	ldrb	r3, [r4, #0]
 800bc9c:	2b2e      	cmp	r3, #46	; 0x2e
 800bc9e:	d10c      	bne.n	800bcba <_vfiprintf_r+0x15a>
 800bca0:	7863      	ldrb	r3, [r4, #1]
 800bca2:	2b2a      	cmp	r3, #42	; 0x2a
 800bca4:	d134      	bne.n	800bd10 <_vfiprintf_r+0x1b0>
 800bca6:	9b03      	ldr	r3, [sp, #12]
 800bca8:	1d1a      	adds	r2, r3, #4
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	9203      	str	r2, [sp, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	bfb8      	it	lt
 800bcb2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcb6:	3402      	adds	r4, #2
 800bcb8:	9305      	str	r3, [sp, #20]
 800bcba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bd90 <_vfiprintf_r+0x230>
 800bcbe:	7821      	ldrb	r1, [r4, #0]
 800bcc0:	2203      	movs	r2, #3
 800bcc2:	4650      	mov	r0, sl
 800bcc4:	f7f4 fabc 	bl	8000240 <memchr>
 800bcc8:	b138      	cbz	r0, 800bcda <_vfiprintf_r+0x17a>
 800bcca:	9b04      	ldr	r3, [sp, #16]
 800bccc:	eba0 000a 	sub.w	r0, r0, sl
 800bcd0:	2240      	movs	r2, #64	; 0x40
 800bcd2:	4082      	lsls	r2, r0
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	3401      	adds	r4, #1
 800bcd8:	9304      	str	r3, [sp, #16]
 800bcda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcde:	4829      	ldr	r0, [pc, #164]	; (800bd84 <_vfiprintf_r+0x224>)
 800bce0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bce4:	2206      	movs	r2, #6
 800bce6:	f7f4 faab 	bl	8000240 <memchr>
 800bcea:	2800      	cmp	r0, #0
 800bcec:	d03f      	beq.n	800bd6e <_vfiprintf_r+0x20e>
 800bcee:	4b26      	ldr	r3, [pc, #152]	; (800bd88 <_vfiprintf_r+0x228>)
 800bcf0:	bb1b      	cbnz	r3, 800bd3a <_vfiprintf_r+0x1da>
 800bcf2:	9b03      	ldr	r3, [sp, #12]
 800bcf4:	3307      	adds	r3, #7
 800bcf6:	f023 0307 	bic.w	r3, r3, #7
 800bcfa:	3308      	adds	r3, #8
 800bcfc:	9303      	str	r3, [sp, #12]
 800bcfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd00:	443b      	add	r3, r7
 800bd02:	9309      	str	r3, [sp, #36]	; 0x24
 800bd04:	e768      	b.n	800bbd8 <_vfiprintf_r+0x78>
 800bd06:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	2001      	movs	r0, #1
 800bd0e:	e7a6      	b.n	800bc5e <_vfiprintf_r+0xfe>
 800bd10:	2300      	movs	r3, #0
 800bd12:	3401      	adds	r4, #1
 800bd14:	9305      	str	r3, [sp, #20]
 800bd16:	4619      	mov	r1, r3
 800bd18:	f04f 0c0a 	mov.w	ip, #10
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd22:	3a30      	subs	r2, #48	; 0x30
 800bd24:	2a09      	cmp	r2, #9
 800bd26:	d903      	bls.n	800bd30 <_vfiprintf_r+0x1d0>
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d0c6      	beq.n	800bcba <_vfiprintf_r+0x15a>
 800bd2c:	9105      	str	r1, [sp, #20]
 800bd2e:	e7c4      	b.n	800bcba <_vfiprintf_r+0x15a>
 800bd30:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd34:	4604      	mov	r4, r0
 800bd36:	2301      	movs	r3, #1
 800bd38:	e7f0      	b.n	800bd1c <_vfiprintf_r+0x1bc>
 800bd3a:	ab03      	add	r3, sp, #12
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	462a      	mov	r2, r5
 800bd40:	4b12      	ldr	r3, [pc, #72]	; (800bd8c <_vfiprintf_r+0x22c>)
 800bd42:	a904      	add	r1, sp, #16
 800bd44:	4630      	mov	r0, r6
 800bd46:	f7fd feab 	bl	8009aa0 <_printf_float>
 800bd4a:	4607      	mov	r7, r0
 800bd4c:	1c78      	adds	r0, r7, #1
 800bd4e:	d1d6      	bne.n	800bcfe <_vfiprintf_r+0x19e>
 800bd50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd52:	07d9      	lsls	r1, r3, #31
 800bd54:	d405      	bmi.n	800bd62 <_vfiprintf_r+0x202>
 800bd56:	89ab      	ldrh	r3, [r5, #12]
 800bd58:	059a      	lsls	r2, r3, #22
 800bd5a:	d402      	bmi.n	800bd62 <_vfiprintf_r+0x202>
 800bd5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd5e:	f7fe fbef 	bl	800a540 <__retarget_lock_release_recursive>
 800bd62:	89ab      	ldrh	r3, [r5, #12]
 800bd64:	065b      	lsls	r3, r3, #25
 800bd66:	f53f af1d 	bmi.w	800bba4 <_vfiprintf_r+0x44>
 800bd6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd6c:	e71c      	b.n	800bba8 <_vfiprintf_r+0x48>
 800bd6e:	ab03      	add	r3, sp, #12
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	462a      	mov	r2, r5
 800bd74:	4b05      	ldr	r3, [pc, #20]	; (800bd8c <_vfiprintf_r+0x22c>)
 800bd76:	a904      	add	r1, sp, #16
 800bd78:	4630      	mov	r0, r6
 800bd7a:	f7fe f919 	bl	8009fb0 <_printf_i>
 800bd7e:	e7e4      	b.n	800bd4a <_vfiprintf_r+0x1ea>
 800bd80:	080db55b 	.word	0x080db55b
 800bd84:	080db565 	.word	0x080db565
 800bd88:	08009aa1 	.word	0x08009aa1
 800bd8c:	0800bb3d 	.word	0x0800bb3d
 800bd90:	080db561 	.word	0x080db561

0800bd94 <__swbuf_r>:
 800bd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd96:	460e      	mov	r6, r1
 800bd98:	4614      	mov	r4, r2
 800bd9a:	4605      	mov	r5, r0
 800bd9c:	b118      	cbz	r0, 800bda6 <__swbuf_r+0x12>
 800bd9e:	6a03      	ldr	r3, [r0, #32]
 800bda0:	b90b      	cbnz	r3, 800bda6 <__swbuf_r+0x12>
 800bda2:	f7fe fab3 	bl	800a30c <__sinit>
 800bda6:	69a3      	ldr	r3, [r4, #24]
 800bda8:	60a3      	str	r3, [r4, #8]
 800bdaa:	89a3      	ldrh	r3, [r4, #12]
 800bdac:	071a      	lsls	r2, r3, #28
 800bdae:	d525      	bpl.n	800bdfc <__swbuf_r+0x68>
 800bdb0:	6923      	ldr	r3, [r4, #16]
 800bdb2:	b31b      	cbz	r3, 800bdfc <__swbuf_r+0x68>
 800bdb4:	6823      	ldr	r3, [r4, #0]
 800bdb6:	6922      	ldr	r2, [r4, #16]
 800bdb8:	1a98      	subs	r0, r3, r2
 800bdba:	6963      	ldr	r3, [r4, #20]
 800bdbc:	b2f6      	uxtb	r6, r6
 800bdbe:	4283      	cmp	r3, r0
 800bdc0:	4637      	mov	r7, r6
 800bdc2:	dc04      	bgt.n	800bdce <__swbuf_r+0x3a>
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	4628      	mov	r0, r5
 800bdc8:	f7ff fe0c 	bl	800b9e4 <_fflush_r>
 800bdcc:	b9e0      	cbnz	r0, 800be08 <__swbuf_r+0x74>
 800bdce:	68a3      	ldr	r3, [r4, #8]
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	60a3      	str	r3, [r4, #8]
 800bdd4:	6823      	ldr	r3, [r4, #0]
 800bdd6:	1c5a      	adds	r2, r3, #1
 800bdd8:	6022      	str	r2, [r4, #0]
 800bdda:	701e      	strb	r6, [r3, #0]
 800bddc:	6962      	ldr	r2, [r4, #20]
 800bdde:	1c43      	adds	r3, r0, #1
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d004      	beq.n	800bdee <__swbuf_r+0x5a>
 800bde4:	89a3      	ldrh	r3, [r4, #12]
 800bde6:	07db      	lsls	r3, r3, #31
 800bde8:	d506      	bpl.n	800bdf8 <__swbuf_r+0x64>
 800bdea:	2e0a      	cmp	r6, #10
 800bdec:	d104      	bne.n	800bdf8 <__swbuf_r+0x64>
 800bdee:	4621      	mov	r1, r4
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	f7ff fdf7 	bl	800b9e4 <_fflush_r>
 800bdf6:	b938      	cbnz	r0, 800be08 <__swbuf_r+0x74>
 800bdf8:	4638      	mov	r0, r7
 800bdfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdfc:	4621      	mov	r1, r4
 800bdfe:	4628      	mov	r0, r5
 800be00:	f000 f806 	bl	800be10 <__swsetup_r>
 800be04:	2800      	cmp	r0, #0
 800be06:	d0d5      	beq.n	800bdb4 <__swbuf_r+0x20>
 800be08:	f04f 37ff 	mov.w	r7, #4294967295
 800be0c:	e7f4      	b.n	800bdf8 <__swbuf_r+0x64>
	...

0800be10 <__swsetup_r>:
 800be10:	b538      	push	{r3, r4, r5, lr}
 800be12:	4b2a      	ldr	r3, [pc, #168]	; (800bebc <__swsetup_r+0xac>)
 800be14:	4605      	mov	r5, r0
 800be16:	6818      	ldr	r0, [r3, #0]
 800be18:	460c      	mov	r4, r1
 800be1a:	b118      	cbz	r0, 800be24 <__swsetup_r+0x14>
 800be1c:	6a03      	ldr	r3, [r0, #32]
 800be1e:	b90b      	cbnz	r3, 800be24 <__swsetup_r+0x14>
 800be20:	f7fe fa74 	bl	800a30c <__sinit>
 800be24:	89a3      	ldrh	r3, [r4, #12]
 800be26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be2a:	0718      	lsls	r0, r3, #28
 800be2c:	d422      	bmi.n	800be74 <__swsetup_r+0x64>
 800be2e:	06d9      	lsls	r1, r3, #27
 800be30:	d407      	bmi.n	800be42 <__swsetup_r+0x32>
 800be32:	2309      	movs	r3, #9
 800be34:	602b      	str	r3, [r5, #0]
 800be36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be3a:	81a3      	strh	r3, [r4, #12]
 800be3c:	f04f 30ff 	mov.w	r0, #4294967295
 800be40:	e034      	b.n	800beac <__swsetup_r+0x9c>
 800be42:	0758      	lsls	r0, r3, #29
 800be44:	d512      	bpl.n	800be6c <__swsetup_r+0x5c>
 800be46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be48:	b141      	cbz	r1, 800be5c <__swsetup_r+0x4c>
 800be4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be4e:	4299      	cmp	r1, r3
 800be50:	d002      	beq.n	800be58 <__swsetup_r+0x48>
 800be52:	4628      	mov	r0, r5
 800be54:	f7ff f978 	bl	800b148 <_free_r>
 800be58:	2300      	movs	r3, #0
 800be5a:	6363      	str	r3, [r4, #52]	; 0x34
 800be5c:	89a3      	ldrh	r3, [r4, #12]
 800be5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be62:	81a3      	strh	r3, [r4, #12]
 800be64:	2300      	movs	r3, #0
 800be66:	6063      	str	r3, [r4, #4]
 800be68:	6923      	ldr	r3, [r4, #16]
 800be6a:	6023      	str	r3, [r4, #0]
 800be6c:	89a3      	ldrh	r3, [r4, #12]
 800be6e:	f043 0308 	orr.w	r3, r3, #8
 800be72:	81a3      	strh	r3, [r4, #12]
 800be74:	6923      	ldr	r3, [r4, #16]
 800be76:	b94b      	cbnz	r3, 800be8c <__swsetup_r+0x7c>
 800be78:	89a3      	ldrh	r3, [r4, #12]
 800be7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be82:	d003      	beq.n	800be8c <__swsetup_r+0x7c>
 800be84:	4621      	mov	r1, r4
 800be86:	4628      	mov	r0, r5
 800be88:	f000 f884 	bl	800bf94 <__smakebuf_r>
 800be8c:	89a0      	ldrh	r0, [r4, #12]
 800be8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be92:	f010 0301 	ands.w	r3, r0, #1
 800be96:	d00a      	beq.n	800beae <__swsetup_r+0x9e>
 800be98:	2300      	movs	r3, #0
 800be9a:	60a3      	str	r3, [r4, #8]
 800be9c:	6963      	ldr	r3, [r4, #20]
 800be9e:	425b      	negs	r3, r3
 800bea0:	61a3      	str	r3, [r4, #24]
 800bea2:	6923      	ldr	r3, [r4, #16]
 800bea4:	b943      	cbnz	r3, 800beb8 <__swsetup_r+0xa8>
 800bea6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800beaa:	d1c4      	bne.n	800be36 <__swsetup_r+0x26>
 800beac:	bd38      	pop	{r3, r4, r5, pc}
 800beae:	0781      	lsls	r1, r0, #30
 800beb0:	bf58      	it	pl
 800beb2:	6963      	ldrpl	r3, [r4, #20]
 800beb4:	60a3      	str	r3, [r4, #8]
 800beb6:	e7f4      	b.n	800bea2 <__swsetup_r+0x92>
 800beb8:	2000      	movs	r0, #0
 800beba:	e7f7      	b.n	800beac <__swsetup_r+0x9c>
 800bebc:	20004200 	.word	0x20004200

0800bec0 <_raise_r>:
 800bec0:	291f      	cmp	r1, #31
 800bec2:	b538      	push	{r3, r4, r5, lr}
 800bec4:	4604      	mov	r4, r0
 800bec6:	460d      	mov	r5, r1
 800bec8:	d904      	bls.n	800bed4 <_raise_r+0x14>
 800beca:	2316      	movs	r3, #22
 800becc:	6003      	str	r3, [r0, #0]
 800bece:	f04f 30ff 	mov.w	r0, #4294967295
 800bed2:	bd38      	pop	{r3, r4, r5, pc}
 800bed4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bed6:	b112      	cbz	r2, 800bede <_raise_r+0x1e>
 800bed8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bedc:	b94b      	cbnz	r3, 800bef2 <_raise_r+0x32>
 800bede:	4620      	mov	r0, r4
 800bee0:	f000 f830 	bl	800bf44 <_getpid_r>
 800bee4:	462a      	mov	r2, r5
 800bee6:	4601      	mov	r1, r0
 800bee8:	4620      	mov	r0, r4
 800beea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800beee:	f000 b817 	b.w	800bf20 <_kill_r>
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d00a      	beq.n	800bf0c <_raise_r+0x4c>
 800bef6:	1c59      	adds	r1, r3, #1
 800bef8:	d103      	bne.n	800bf02 <_raise_r+0x42>
 800befa:	2316      	movs	r3, #22
 800befc:	6003      	str	r3, [r0, #0]
 800befe:	2001      	movs	r0, #1
 800bf00:	e7e7      	b.n	800bed2 <_raise_r+0x12>
 800bf02:	2400      	movs	r4, #0
 800bf04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf08:	4628      	mov	r0, r5
 800bf0a:	4798      	blx	r3
 800bf0c:	2000      	movs	r0, #0
 800bf0e:	e7e0      	b.n	800bed2 <_raise_r+0x12>

0800bf10 <raise>:
 800bf10:	4b02      	ldr	r3, [pc, #8]	; (800bf1c <raise+0xc>)
 800bf12:	4601      	mov	r1, r0
 800bf14:	6818      	ldr	r0, [r3, #0]
 800bf16:	f7ff bfd3 	b.w	800bec0 <_raise_r>
 800bf1a:	bf00      	nop
 800bf1c:	20004200 	.word	0x20004200

0800bf20 <_kill_r>:
 800bf20:	b538      	push	{r3, r4, r5, lr}
 800bf22:	4d07      	ldr	r5, [pc, #28]	; (800bf40 <_kill_r+0x20>)
 800bf24:	2300      	movs	r3, #0
 800bf26:	4604      	mov	r4, r0
 800bf28:	4608      	mov	r0, r1
 800bf2a:	4611      	mov	r1, r2
 800bf2c:	602b      	str	r3, [r5, #0]
 800bf2e:	f000 f94b 	bl	800c1c8 <_kill>
 800bf32:	1c43      	adds	r3, r0, #1
 800bf34:	d102      	bne.n	800bf3c <_kill_r+0x1c>
 800bf36:	682b      	ldr	r3, [r5, #0]
 800bf38:	b103      	cbz	r3, 800bf3c <_kill_r+0x1c>
 800bf3a:	6023      	str	r3, [r4, #0]
 800bf3c:	bd38      	pop	{r3, r4, r5, pc}
 800bf3e:	bf00      	nop
 800bf40:	20004c44 	.word	0x20004c44

0800bf44 <_getpid_r>:
 800bf44:	f000 b930 	b.w	800c1a8 <_getpid>

0800bf48 <__swhatbuf_r>:
 800bf48:	b570      	push	{r4, r5, r6, lr}
 800bf4a:	460c      	mov	r4, r1
 800bf4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf50:	2900      	cmp	r1, #0
 800bf52:	b096      	sub	sp, #88	; 0x58
 800bf54:	4615      	mov	r5, r2
 800bf56:	461e      	mov	r6, r3
 800bf58:	da0d      	bge.n	800bf76 <__swhatbuf_r+0x2e>
 800bf5a:	89a3      	ldrh	r3, [r4, #12]
 800bf5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bf60:	f04f 0100 	mov.w	r1, #0
 800bf64:	bf0c      	ite	eq
 800bf66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bf6a:	2340      	movne	r3, #64	; 0x40
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	6031      	str	r1, [r6, #0]
 800bf70:	602b      	str	r3, [r5, #0]
 800bf72:	b016      	add	sp, #88	; 0x58
 800bf74:	bd70      	pop	{r4, r5, r6, pc}
 800bf76:	466a      	mov	r2, sp
 800bf78:	f000 f848 	bl	800c00c <_fstat_r>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	dbec      	blt.n	800bf5a <__swhatbuf_r+0x12>
 800bf80:	9901      	ldr	r1, [sp, #4]
 800bf82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bf86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bf8a:	4259      	negs	r1, r3
 800bf8c:	4159      	adcs	r1, r3
 800bf8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf92:	e7eb      	b.n	800bf6c <__swhatbuf_r+0x24>

0800bf94 <__smakebuf_r>:
 800bf94:	898b      	ldrh	r3, [r1, #12]
 800bf96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf98:	079d      	lsls	r5, r3, #30
 800bf9a:	4606      	mov	r6, r0
 800bf9c:	460c      	mov	r4, r1
 800bf9e:	d507      	bpl.n	800bfb0 <__smakebuf_r+0x1c>
 800bfa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bfa4:	6023      	str	r3, [r4, #0]
 800bfa6:	6123      	str	r3, [r4, #16]
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	6163      	str	r3, [r4, #20]
 800bfac:	b002      	add	sp, #8
 800bfae:	bd70      	pop	{r4, r5, r6, pc}
 800bfb0:	ab01      	add	r3, sp, #4
 800bfb2:	466a      	mov	r2, sp
 800bfb4:	f7ff ffc8 	bl	800bf48 <__swhatbuf_r>
 800bfb8:	9900      	ldr	r1, [sp, #0]
 800bfba:	4605      	mov	r5, r0
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	f7fd fc51 	bl	8009864 <_malloc_r>
 800bfc2:	b948      	cbnz	r0, 800bfd8 <__smakebuf_r+0x44>
 800bfc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfc8:	059a      	lsls	r2, r3, #22
 800bfca:	d4ef      	bmi.n	800bfac <__smakebuf_r+0x18>
 800bfcc:	f023 0303 	bic.w	r3, r3, #3
 800bfd0:	f043 0302 	orr.w	r3, r3, #2
 800bfd4:	81a3      	strh	r3, [r4, #12]
 800bfd6:	e7e3      	b.n	800bfa0 <__smakebuf_r+0xc>
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	6020      	str	r0, [r4, #0]
 800bfdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfe0:	81a3      	strh	r3, [r4, #12]
 800bfe2:	9b00      	ldr	r3, [sp, #0]
 800bfe4:	6163      	str	r3, [r4, #20]
 800bfe6:	9b01      	ldr	r3, [sp, #4]
 800bfe8:	6120      	str	r0, [r4, #16]
 800bfea:	b15b      	cbz	r3, 800c004 <__smakebuf_r+0x70>
 800bfec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bff0:	4630      	mov	r0, r6
 800bff2:	f000 f81d 	bl	800c030 <_isatty_r>
 800bff6:	b128      	cbz	r0, 800c004 <__smakebuf_r+0x70>
 800bff8:	89a3      	ldrh	r3, [r4, #12]
 800bffa:	f023 0303 	bic.w	r3, r3, #3
 800bffe:	f043 0301 	orr.w	r3, r3, #1
 800c002:	81a3      	strh	r3, [r4, #12]
 800c004:	89a3      	ldrh	r3, [r4, #12]
 800c006:	431d      	orrs	r5, r3
 800c008:	81a5      	strh	r5, [r4, #12]
 800c00a:	e7cf      	b.n	800bfac <__smakebuf_r+0x18>

0800c00c <_fstat_r>:
 800c00c:	b538      	push	{r3, r4, r5, lr}
 800c00e:	4d07      	ldr	r5, [pc, #28]	; (800c02c <_fstat_r+0x20>)
 800c010:	2300      	movs	r3, #0
 800c012:	4604      	mov	r4, r0
 800c014:	4608      	mov	r0, r1
 800c016:	4611      	mov	r1, r2
 800c018:	602b      	str	r3, [r5, #0]
 800c01a:	f000 f8bd 	bl	800c198 <_fstat>
 800c01e:	1c43      	adds	r3, r0, #1
 800c020:	d102      	bne.n	800c028 <_fstat_r+0x1c>
 800c022:	682b      	ldr	r3, [r5, #0]
 800c024:	b103      	cbz	r3, 800c028 <_fstat_r+0x1c>
 800c026:	6023      	str	r3, [r4, #0]
 800c028:	bd38      	pop	{r3, r4, r5, pc}
 800c02a:	bf00      	nop
 800c02c:	20004c44 	.word	0x20004c44

0800c030 <_isatty_r>:
 800c030:	b538      	push	{r3, r4, r5, lr}
 800c032:	4d06      	ldr	r5, [pc, #24]	; (800c04c <_isatty_r+0x1c>)
 800c034:	2300      	movs	r3, #0
 800c036:	4604      	mov	r4, r0
 800c038:	4608      	mov	r0, r1
 800c03a:	602b      	str	r3, [r5, #0]
 800c03c:	f000 f8bc 	bl	800c1b8 <_isatty>
 800c040:	1c43      	adds	r3, r0, #1
 800c042:	d102      	bne.n	800c04a <_isatty_r+0x1a>
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	b103      	cbz	r3, 800c04a <_isatty_r+0x1a>
 800c048:	6023      	str	r3, [r4, #0]
 800c04a:	bd38      	pop	{r3, r4, r5, pc}
 800c04c:	20004c44 	.word	0x20004c44

0800c050 <expf>:
 800c050:	ee10 2a10 	vmov	r2, s0
 800c054:	f240 412a 	movw	r1, #1066	; 0x42a
 800c058:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800c05c:	428b      	cmp	r3, r1
 800c05e:	b430      	push	{r4, r5}
 800c060:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800c064:	d92a      	bls.n	800c0bc <expf+0x6c>
 800c066:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800c06a:	d058      	beq.n	800c11e <expf+0xce>
 800c06c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800c070:	d303      	bcc.n	800c07a <expf+0x2a>
 800c072:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c076:	bc30      	pop	{r4, r5}
 800c078:	4770      	bx	lr
 800c07a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800c124 <expf+0xd4>
 800c07e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c086:	dd03      	ble.n	800c090 <expf+0x40>
 800c088:	bc30      	pop	{r4, r5}
 800c08a:	2000      	movs	r0, #0
 800c08c:	f000 b876 	b.w	800c17c <__math_oflowf>
 800c090:	eddf 7a25 	vldr	s15, [pc, #148]	; 800c128 <expf+0xd8>
 800c094:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c09c:	d503      	bpl.n	800c0a6 <expf+0x56>
 800c09e:	bc30      	pop	{r4, r5}
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	f000 b85f 	b.w	800c164 <__math_uflowf>
 800c0a6:	eddf 7a21 	vldr	s15, [pc, #132]	; 800c12c <expf+0xdc>
 800c0aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0b2:	d503      	bpl.n	800c0bc <expf+0x6c>
 800c0b4:	bc30      	pop	{r4, r5}
 800c0b6:	2000      	movs	r0, #0
 800c0b8:	f000 b85a 	b.w	800c170 <__math_may_uflowf>
 800c0bc:	4b1c      	ldr	r3, [pc, #112]	; (800c130 <expf+0xe0>)
 800c0be:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c0c2:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800c0c6:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800c0ca:	eeb0 7b44 	vmov.f64	d7, d4
 800c0ce:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c0d2:	ee17 0a10 	vmov	r0, s14
 800c0d6:	ee37 7b44 	vsub.f64	d7, d7, d4
 800c0da:	f000 021f 	and.w	r2, r0, #31
 800c0de:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800c0e2:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800c0e6:	ee27 4b07 	vmul.f64	d4, d7, d7
 800c0ea:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800c0ee:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800c0f2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c0f6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800c0fa:	684d      	ldr	r5, [r1, #4]
 800c0fc:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800c100:	2100      	movs	r1, #0
 800c102:	190a      	adds	r2, r1, r4
 800c104:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800c108:	eea5 0b07 	vfma.f64	d0, d5, d7
 800c10c:	ec43 2b17 	vmov	d7, r2, r3
 800c110:	eea6 0b04 	vfma.f64	d0, d6, d4
 800c114:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c118:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c11c:	e7ab      	b.n	800c076 <expf+0x26>
 800c11e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800c134 <expf+0xe4>
 800c122:	e7a8      	b.n	800c076 <expf+0x26>
 800c124:	42b17217 	.word	0x42b17217
 800c128:	c2cff1b4 	.word	0xc2cff1b4
 800c12c:	c2ce8ecf 	.word	0xc2ce8ecf
 800c130:	080db570 	.word	0x080db570
 800c134:	00000000 	.word	0x00000000

0800c138 <with_errnof>:
 800c138:	b513      	push	{r0, r1, r4, lr}
 800c13a:	4604      	mov	r4, r0
 800c13c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c140:	f7fe f9d2 	bl	800a4e8 <__errno>
 800c144:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c148:	6004      	str	r4, [r0, #0]
 800c14a:	b002      	add	sp, #8
 800c14c:	bd10      	pop	{r4, pc}

0800c14e <xflowf>:
 800c14e:	b130      	cbz	r0, 800c15e <xflowf+0x10>
 800c150:	eef1 7a40 	vneg.f32	s15, s0
 800c154:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c158:	2022      	movs	r0, #34	; 0x22
 800c15a:	f7ff bfed 	b.w	800c138 <with_errnof>
 800c15e:	eef0 7a40 	vmov.f32	s15, s0
 800c162:	e7f7      	b.n	800c154 <xflowf+0x6>

0800c164 <__math_uflowf>:
 800c164:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c16c <__math_uflowf+0x8>
 800c168:	f7ff bff1 	b.w	800c14e <xflowf>
 800c16c:	10000000 	.word	0x10000000

0800c170 <__math_may_uflowf>:
 800c170:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c178 <__math_may_uflowf+0x8>
 800c174:	f7ff bfeb 	b.w	800c14e <xflowf>
 800c178:	1a200000 	.word	0x1a200000

0800c17c <__math_oflowf>:
 800c17c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c184 <__math_oflowf+0x8>
 800c180:	f7ff bfe5 	b.w	800c14e <xflowf>
 800c184:	70000000 	.word	0x70000000

0800c188 <_close>:
 800c188:	4b02      	ldr	r3, [pc, #8]	; (800c194 <_close+0xc>)
 800c18a:	2258      	movs	r2, #88	; 0x58
 800c18c:	601a      	str	r2, [r3, #0]
 800c18e:	f04f 30ff 	mov.w	r0, #4294967295
 800c192:	4770      	bx	lr
 800c194:	20004c44 	.word	0x20004c44

0800c198 <_fstat>:
 800c198:	4b02      	ldr	r3, [pc, #8]	; (800c1a4 <_fstat+0xc>)
 800c19a:	2258      	movs	r2, #88	; 0x58
 800c19c:	601a      	str	r2, [r3, #0]
 800c19e:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a2:	4770      	bx	lr
 800c1a4:	20004c44 	.word	0x20004c44

0800c1a8 <_getpid>:
 800c1a8:	4b02      	ldr	r3, [pc, #8]	; (800c1b4 <_getpid+0xc>)
 800c1aa:	2258      	movs	r2, #88	; 0x58
 800c1ac:	601a      	str	r2, [r3, #0]
 800c1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b2:	4770      	bx	lr
 800c1b4:	20004c44 	.word	0x20004c44

0800c1b8 <_isatty>:
 800c1b8:	4b02      	ldr	r3, [pc, #8]	; (800c1c4 <_isatty+0xc>)
 800c1ba:	2258      	movs	r2, #88	; 0x58
 800c1bc:	601a      	str	r2, [r3, #0]
 800c1be:	2000      	movs	r0, #0
 800c1c0:	4770      	bx	lr
 800c1c2:	bf00      	nop
 800c1c4:	20004c44 	.word	0x20004c44

0800c1c8 <_kill>:
 800c1c8:	4b02      	ldr	r3, [pc, #8]	; (800c1d4 <_kill+0xc>)
 800c1ca:	2258      	movs	r2, #88	; 0x58
 800c1cc:	601a      	str	r2, [r3, #0]
 800c1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d2:	4770      	bx	lr
 800c1d4:	20004c44 	.word	0x20004c44

0800c1d8 <_lseek>:
 800c1d8:	4b02      	ldr	r3, [pc, #8]	; (800c1e4 <_lseek+0xc>)
 800c1da:	2258      	movs	r2, #88	; 0x58
 800c1dc:	601a      	str	r2, [r3, #0]
 800c1de:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e2:	4770      	bx	lr
 800c1e4:	20004c44 	.word	0x20004c44

0800c1e8 <_read>:
 800c1e8:	4b02      	ldr	r3, [pc, #8]	; (800c1f4 <_read+0xc>)
 800c1ea:	2258      	movs	r2, #88	; 0x58
 800c1ec:	601a      	str	r2, [r3, #0]
 800c1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f2:	4770      	bx	lr
 800c1f4:	20004c44 	.word	0x20004c44

0800c1f8 <_exit>:
 800c1f8:	e7fe      	b.n	800c1f8 <_exit>
	...

0800c1fc <_init>:
 800c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fe:	bf00      	nop
 800c200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c202:	bc08      	pop	{r3}
 800c204:	469e      	mov	lr, r3
 800c206:	4770      	bx	lr

0800c208 <_fini>:
 800c208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20a:	bf00      	nop
 800c20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c20e:	bc08      	pop	{r3}
 800c210:	469e      	mov	lr, r3
 800c212:	4770      	bx	lr
